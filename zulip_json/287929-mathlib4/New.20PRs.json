[
    {
        "content": "<p>I'm curious what the status or plan is for PRs to mathlib4 with brand-new content, since the possibility of such doesn't seem that far away.</p>",
        "id": 315316428,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670835355
    },
    {
        "content": "<p>I assume we'll ask them to be backported?</p>",
        "id": 315316553,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670835394
    },
    {
        "content": "<p>I guess brand new content in brand new files isn't much of an issue. But when it's touching existing files (which is very likely) then I think it might cause some headaches.</p>",
        "id": 315316749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670835474
    },
    {
        "content": "<p>So what you're saying is that even mathlib PRs will now have a <code>for_mathlib</code> directory.</p>",
        "id": 315316967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670835569
    },
    {
        "content": "<p>Johan and I discussed it a bit and we don't really see any harm in accepting mathlib4 PRs, so long as they don't break backwards compatibility. That is, all of the not-yet-ported files of mathlib 3 are conceptually \"clients\" of the already-ported files, and we can't break them.</p>\n<p>In practice this means that adding new files and likely also new definitions, lemmas etc. is fine but e.g. rearranging imports or changing existing definitions is probably not fine.</p>",
        "id": 315356071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670848508
    },
    {
        "content": "<p>I think even adding new definitions to existing files is a bad idea; it makes it much harder to ask \"are these files in sync\" programatically</p>",
        "id": 315362051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670850407
    },
    {
        "content": "<p>Maybe the solution is an <code>#alignnew</code> command to match <code>#align</code> and <code>#noalign</code>, indicating \"this is new in mathlib4\"</p>",
        "id": 315362221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670850447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315362051\">said</a>:</p>\n<blockquote>\n<p>I think even adding new definitions to existing files is a bad idea; it makes it much harder to ask \"are these files in sync\" programatically</p>\n</blockquote>\n<p>I think the claim is that you don't really need to ask this--all you need to know is \"is this mathlib 4 file newer than a given mathlib 3 file\"</p>",
        "id": 315381719,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670855561
    },
    {
        "content": "<p>That doesn't tell you if the mathlib3 file has grown changes not present in mathlib4</p>",
        "id": 315382858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670855856
    },
    {
        "content": "<p>Ah sorry, what I meant to say was \"newer than a given <em>version</em> of a mathlib 3 file\"</p>",
        "id": 315408080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670862671
    },
    {
        "content": "<p>So as long as you have some knowledge of \"mathlib 4 file X' contains all of mathlib 3 file X as of commit S\", you can detect when new contents in mathlib 3 need to be ported to mathlib 4, while also allowing additions to the mathlib 4 file.</p>",
        "id": 315408428,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670862773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315356071\">said</a>:</p>\n<blockquote>\n<p>Johan and I discussed it a bit and we don't really see any harm in accepting mathlib4 PRs, so long as they don't break backwards compatibility. That is, all of the not-yet-ported files of mathlib 3 are conceptually \"clients\" of the already-ported files, and we can't break them.</p>\n<p>In practice this means that adding new files and likely also new definitions, lemmas etc. is fine but e.g. rearranging imports or changing existing definitions is probably not fine.</p>\n</blockquote>\n<p>I'm working (with <span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> ) on a few PRs only dealing with quivers, which are already almost entirely ported to Mathlib4.<br>\nDoes it make sense, then, to simply forget about mathlib3 and directly do the PRs for Mathlib4 ? That would be <em>way</em> easier than having to deal with synchronized PRs each time.</p>",
        "id": 315547587,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1670924974
    },
    {
        "content": "<p>I think that right now we're trying to keep mathlib3 and mathlib4 in sync, although there are discussions about how to let them diverge.</p>",
        "id": 315549373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670925596
    },
    {
        "content": "<p>I wouldn't bet on those discussions concluding real-soon-now, however. It sounds pretty scary to start diverging already.</p>",
        "id": 315549645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670925663
    },
    {
        "content": "<p>If you're <em>just</em> adding new files, not touching any files that have matching partners in mathlib3, then I'd guess everyone will be on board with that.</p>",
        "id": 315549738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670925694
    },
    {
        "content": "<p>... until someone who is working on mathlib wants them <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 315550027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670925768
    },
    {
        "content": "<p>mathport doesn't do Lean 4 -&gt; Lean 3 translation, does it?</p>",
        "id": 315550121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670925796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315549738\">said</a>:</p>\n<blockquote>\n<p>If you're <em>just</em> adding new files, not touching any files that have matching partners in mathlib3, then I'd guess everyone will be on board with that.</p>\n</blockquote>\n<p>In principle this is true, but I expect this would be very frustrating very soon because when writing new files you always want to add a couple of lemmas in an older file. If those are put in the new file in mathlib4 then we'll simply accumulate mess for no good reason.</p>",
        "id": 315550148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670925806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315550121\">said</a>:</p>\n<blockquote>\n<p>mathport doesn't do Lean 4 -&gt; Lean 3 translation, does it?</p>\n</blockquote>\n<p>Nope, that's totally out of scope and not what we want to encourage in any case. We can and will use new lean 4 material as an extra carrot to move people across :)</p>",
        "id": 315550365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670925868
    },
    {
        "content": "<p>I think we should allow new theorems to be added to aligned mathlib4 files. As long as you don't reorder the aligned theorems, I don't think this poses any major issues for mathport. It currently isn't even really making use of mathlib4 theorem placement, as long as everything is defined and <code>#align</code>ed some time before <code>Mathlib.lean</code></p>",
        "id": 315550834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926009
    },
    {
        "content": "<p>which is also what Reid said above</p>",
        "id": 315551100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926095
    },
    {
        "content": "<p>This sounds like a headache when other people add similar lemmas to mathlib and want to port them over.</p>",
        "id": 315551422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926207
    },
    {
        "content": "<p>Why?</p>",
        "id": 315551641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926284
    },
    {
        "content": "<p>Because we'll have to refactor either mathlib or mathlib4 to account for material coming from the other side.</p>",
        "id": 315551731,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926317
    },
    {
        "content": "<p>the <code>#align</code> statements are the landmarks, just find the ones for the mathlib3 theorems before and after</p>",
        "id": 315551785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926323
    },
    {
        "content": "<p>Yes, I'm saying <em>similar</em> lemmas, not <em>identical</em> lemmas.</p>",
        "id": 315551832,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926341
    },
    {
        "content": "<p>a synced mathlib4 file has #align statements for every statement in the mathlib3 file, in the same order</p>",
        "id": 315551875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926359
    },
    {
        "content": "<p>there may also be additional declarations and theorems which have no align statements in between</p>",
        "id": 315551950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926386
    },
    {
        "content": "<p>if there are <em>similar</em> lemmas in mathlib3 with no mathlib4 equivalents then the file isn't aligned</p>",
        "id": 315552057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315551422\">said</a>:</p>\n<blockquote>\n<p>This sounds like a headache when other people add similar lemmas to mathlib and want to port them over.</p>\n</blockquote>\n<p>If someone is adding lemmas to mathlib files that have been ported to mathlib4 then there is already a headache</p>",
        "id": 315552181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670926462
    },
    {
        "content": "<p>Yes, but there's no decision to be made while porting. The mathlib file has authority on what the mathlib4 file contains.</p>",
        "id": 315552253,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926496
    },
    {
        "content": "<p>no, the mathlib4 file must be a superset of the mathlib3 file</p>",
        "id": 315552361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926532
    },
    {
        "content": "<p>Right now, whenever mathlib and mathlib4 diverge, mathlib has the last word and at worse we just report everything later. What you want to do is allow the mathlib4 to have a say.</p>",
        "id": 315552451,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926558
    },
    {
        "content": "<p>Basically what I mean is in the situation you're describing, it is up to whoever wants to edit mathlib3 to make corresponding changes to mathlib4 appropriately</p>",
        "id": 315552512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670926563
    },
    {
        "content": "<p>Yes, that I agree, but letting mathlib4 diverge means that the \"corresponding changes to mathlib4\" is not just porting anymore.</p>",
        "id": 315552661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926618
    },
    {
        "content": "<p>Sure, and that might be tricky to deal with for whoever wants to edit the mathlib3 file</p>",
        "id": 315552733,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670926640
    },
    {
        "content": "<p>I don't know what you mean by mathlib4 diverging here</p>",
        "id": 315552746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926644
    },
    {
        "content": "<p>I suspect that we already have procedures for whatever it is</p>",
        "id": 315552785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926657
    },
    {
        "content": "<p>\"having a different set of lemmas/definitions\"</p>",
        "id": 315552794,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926660
    },
    {
        "content": "<p>that's what #align is for</p>",
        "id": 315552822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926667
    },
    {
        "content": "<p>you will get a message in mathport if the alignment isn't a defeq match</p>",
        "id": 315552921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926687
    },
    {
        "content": "<p>and there are a few options for how to proceed</p>",
        "id": 315552961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926695
    },
    {
        "content": "<p>you can do the alignment anyway, but this will make some statements fail to typecheck, or you can align with <code>\\_x</code> which causes the mathport output to pretend it did the alignment without actually doing so in its internal state (this is best for when the alignment is not defeq but the elaborator will make up the difference); or you can align with <code>'</code> or some other name when it's genuinely a different definition</p>",
        "id": 315553377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926824
    },
    {
        "content": "<p>That's what I call \"headache\" now <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 315553458,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926857
    },
    {
        "content": "<p>Sure, which is why we also have the option of doing something in mathlib to make them defeq match</p>",
        "id": 315553550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926889
    },
    {
        "content": "<p>In any case, we can't be indiscriminately modifying already-ported files in mathlib3 as though the port doesn't exist. That's going to make the port impractical, regardless of whether mathlib4 has additional stuff that didn't come from mathlib3.</p>",
        "id": 315553684,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670926925
    },
    {
        "content": "<p>but in any case the end result should be that <code>#align</code>s are more or less an exact match to mathlib3</p>",
        "id": 315553724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315553684\">said</a>:</p>\n<blockquote>\n<p>In any case, we can't be indiscriminately modifying already-ported files in mathlib3 as though the port doesn't exist.</p>\n</blockquote>\n<p>That's what I've been doing, in fact. It's extra work, but straightforward extra work.</p>",
        "id": 315553889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670926996
    },
    {
        "content": "<p>What do you mean? What is the extra work, and who is doing it?</p>",
        "id": 315555202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670927340
    },
    {
        "content": "<p>In this case the extra work is creating the mathlib4 update PRs, and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> has been doing those themselves.</p>",
        "id": 315555524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670927443
    },
    {
        "content": "<p>The extra work is</p>\n<ul>\n<li>open a mathlib4 gitpod</li>\n<li>wait 5 min for it to download Lean, mathlib4</li>\n<li>replicate the mathlib changes</li>\n<li>open the PR</li>\n</ul>",
        "id": 315555581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670927463
    },
    {
        "content": "<p>OK so then I wouldn't really describe this as \"as though the port doesn't exist\".</p>",
        "id": 315555635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670927485
    },
    {
        "content": "<p>Takes a good 20min every time, because mathlib4 CI isn't great, still.</p>",
        "id": 315555643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670927487
    },
    {
        "content": "<p>well if you didn't start from scratch every time it would be faster</p>",
        "id": 315555840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670927551
    },
    {
        "content": "<p>Well, if the Lean4 install was persistent, I wouldn't start from scratch every time!</p>",
        "id": 315555918,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670927584
    },
    {
        "content": "<p>Do we need to make a new image for gitpod, for mathlib4?</p>",
        "id": 315555954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670927599
    },
    {
        "content": "<p>I assume this is the solution, yeah.</p>",
        "id": 315555988,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670927612
    },
    {
        "content": "<p>Hopefully just copying the setup we have for mathlib over should be an easy start.</p>",
        "id": 315556001,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670927617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315555635\">said</a>:</p>\n<blockquote>\n<p>OK so then I wouldn't really describe this as \"as though the port doesn't exist\".</p>\n</blockquote>\n<p>What I mean is that typically I'm not changing my PRs because of the port. Eric in <a href=\"https://github.com/leanprover-community/mathlib/pull/17895\">#17895</a> was adding to a non-ported file a lemma that belonged to an already ported one. So I took it onto myself to move it to the correct spot and open the mathlib4 PR.</p>",
        "id": 315556167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670927666
    },
    {
        "content": "<p>Mario, if I stop and start the mathlib4 gitpod again, I need to reinstall Lean 4.</p>",
        "id": 315556283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670927707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, I saw <a href=\"https://github.com/leanprover-community/mathlib/pull/17895\">https://github.com/leanprover-community/mathlib/pull/17895</a> was merged without there being any sign of the corresponding mathlib4 PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/967\">https://github.com/leanprover-community/mathlib4/pull/967</a> even being looked at.</p>\n<p>I suggest that maintainers who are merging either side of a matching pair of PRs either:</p>\n<ul>\n<li>review and merge both at once, or</li>\n<li>if you only have time to think about one side, only delegate that one and ask the author to merge once the other side has been approved</li>\n</ul>",
        "id": 315557024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670927964
    },
    {
        "content": "<p>i.e. neither should go to bors unless the other one is at the same time / already delegated or merged.</p>",
        "id": 315557187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670928020
    },
    {
        "content": "<p>In this case, my initial PR didn't touch mathlib4 files but gained a mathlib4 change in review</p>",
        "id": 315557292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670928058
    },
    {
        "content": "<p>OK I understand the issue now. You're saying--suppose some new mathlib3 development wants a new lemma in some already-ported file, but oops someone else already added such a lemma in mathlib4, but maybe it's in a different place or has a different name or something--which one do we take?</p>",
        "id": 315557437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670928111
    },
    {
        "content": "<p>Perhaps I should have pushed back and said \"we can move the lemma into an earlier file in a follow-up\"</p>",
        "id": 315557442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670928114
    },
    {
        "content": "<p>For a single lemma, it doesn't seem like a big deal--just pick something reasonable.</p>",
        "id": 315557454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670928121
    },
    {
        "content": "<p>My bad, I didn't really read the github message about the mathlib4 file and I thought it was complaining about a long line. I will be more careful.</p>",
        "id": 315557508,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1670928130
    },
    {
        "content": "<p>But if it's a whole new definition &amp; set of lemmas, then it's not as obvious how to proceed</p>",
        "id": 315557600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670928157
    },
    {
        "content": "<p>Yes, precisely.</p>",
        "id": 315557635,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670928166
    },
    {
        "content": "<p>As long as there is some opportunity to explicitly consider a merge I don't see the issue</p>",
        "id": 315557680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670928182
    },
    {
        "content": "<p>And we might not even notice the duplication before a long time.</p>",
        "id": 315557713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670928197
    },
    {
        "content": "<p>We already have that issue, where a mathlib4 definition is made and <code>#align</code>ed without noticing that a similar lean 4 definition already exists</p>",
        "id": 315557884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670928250
    },
    {
        "content": "<p>so we end up with two equivalent definitions in mathlib4</p>",
        "id": 315557937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670928267
    },
    {
        "content": "<p>this isn't a huge problem in the sense that it doesn't cause any failures, and as soon as someone notices it's fairly easy to deduplicate as long as the merge is defeq</p>",
        "id": 315558030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670928304
    },
    {
        "content": "<p>if it's not then we have the usual issues, backporting etc</p>",
        "id": 315558064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670928315
    },
    {
        "content": "<p>Right I think the main question is to decide whether, in this situation, it's mathlib4's job to match mathlib3, or mathlib3's job to match mathlib4.</p>",
        "id": 315558347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670928402
    },
    {
        "content": "<p>I think we should try to do the best thing, and it doesn't matter if that is in mathlib3 or mathlib4</p>",
        "id": 315558378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670928415
    },
    {
        "content": "<p>it's basically just two independent implementations of a thing and we have to merge them</p>",
        "id": 315558478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670928452
    },
    {
        "content": "<p>it's less bureaucracy to make mathlib4 match mathlib3 though</p>",
        "id": 315558638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670928497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315556283\">said</a>:</p>\n<blockquote>\n<p>Mario, if I stop and start the mathlib4 gitpod again, I need to reinstall Lean 4.</p>\n</blockquote>\n<p>Why is that? If you mean opening the same workspace again, I thought they were supposed to be persistent.</p>",
        "id": 315564751,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670930362
    },
    {
        "content": "<p>No idea, really! But it's reproducible.</p>",
        "id": 315564865,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670930400
    },
    {
        "content": "<p>Weird, I should try that. Though I heard Gitpod is declining anyway...</p>",
        "id": 315565128,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670930480
    },
    {
        "content": "<p>I think the workspace directory is persistant but the user directory is transient</p>",
        "id": 315566247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670930823
    },
    {
        "content": "<p>Regarding synchronized PRs to already ported files: Would it be possible to allow doing only a mathlib3 PR first, with some kind of delayed \"duty to synchronize\" allowing the mathlib3 PR to be merged in order to get the mathport thing running automatically and doing the mathlib4 sync by merging the updated mathport output with the old mathlib4 content ? <br>\nIn the few such PRs I've made, I kind of had to manually deal with stuff and I guess it's more error-prone.</p>",
        "id": 315570072,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1670931990
    },
    {
        "content": "<p>Opening a mathlib4 issue would be a reasonable way to record that duty</p>",
        "id": 315570986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670932279
    },
    {
        "content": "<p>Why not open an empty PR?</p>",
        "id": 315571039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670932297
    },
    {
        "content": "<p>You can't?</p>",
        "id": 315571110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670932321
    },
    {
        "content": "<p>Oh, maybe with <code>git commit --allow-empty</code></p>",
        "id": 315571195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670932345
    },
    {
        "content": "<p>Can you not? I must say I never tried!</p>",
        "id": 315571265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670932370
    },
    {
        "content": "<p>Even if you do nothing, the \"duty to synchronize\" is recorded in the output of <code>port-status.py</code></p>",
        "id": 315571526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670932461
    },
    {
        "content": "<p>In the general case there might be multiple mathlib3 PRs that want to modify the same already-ported file, and it would be tricky to update mathlib4 \"atomically\" for all of them.</p>",
        "id": 315574287,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670933300
    },
    {
        "content": "<p>I think it's easier to let mathlib3 \"go ahead\" of mathlib4 for a bit, as long as the mathlib3 PR author has provided a mathlib4 branch or something with the needed changes, which can actually get applied later after the mathlib3 commit is merged</p>",
        "id": 315574456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670933351
    },
    {
        "content": "<p>I guess it's not so bad if a single mathlib4 PR synchronises several mathlib PRs?</p>",
        "id": 315574487,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670933359
    },
    {
        "content": "<p>I think it makes it easier to track what mathlib3 content has been ported to mathlib4, especially if those several mathlib PRs got merged in a single bors run (then we have no way to even identify a subset of them by mathlib3 commit hash)</p>",
        "id": 315574824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670933463
    },
    {
        "content": "<p>Along the same lines of this discussion: <a href=\"https://github.com/leanprover-community/mathlib/pull/16919\">#16919</a> changes an already ported file, however the dependencies that actually make use of these changes have not been ported yet AFAICT. I think this should still have a corresponding mathlib4 PR. What do you think?</p>",
        "id": 315611245,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1670943719
    },
    {
        "content": "<p>My feeling is that this change to <code>algebra.order.hom.basic</code> is way too big to be practical--why not create a new file?</p>",
        "id": 315611964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670943888
    },
    {
        "content": "<p>For the reasons mentioned in the PR description:</p>\n<blockquote>\n<p>I am explicitly against making a new file for the sake of the port, because by the time we can actually merge the two files again, we will have forgotten about it, and it doesn't make the port any easier anyway.</p>\n</blockquote>",
        "id": 315612131,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670943930
    },
    {
        "content": "<p>The picture here is that <code>algebra.order.hom.basic</code> is an advanced file that accidentally got caught under the tide before its imports were fully fixed.</p>",
        "id": 315612302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670943965
    },
    {
        "content": "<p>I don't understand how it could not make the port easier</p>",
        "id": 315612699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670944075
    },
    {
        "content": "<p>Because everything that depends on <code>algebra.order.hom.basic</code> will be ported much later than its prerequisites, so the question is just when we want to merge <a href=\"https://github.com/leanprover-community/mathlib/pull/16919\">#16919</a> and when we want to port the changes.</p>",
        "id": 315613056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670944165
    },
    {
        "content": "<p>(I also separately don't understand why it wouldn't make sense to have two separate files anyways; all the new stuff seems to mention <code>norm</code>, and none of the old stuff mentions <code>norm</code>)</p>",
        "id": 315613066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670944167
    },
    {
        "content": "<p>Once again, it's explained in the PR description.</p>",
        "id": 315613164,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670944194
    },
    {
        "content": "<p>I don't agree that it is \"explained\"</p>",
        "id": 315613369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670944239
    },
    {
        "content": "<p>I have three arguments there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"n\">The</span> <span class=\"n\">new</span> <span class=\"n\">file</span> <span class=\"n\">is</span> <span class=\"n\">still</span> <span class=\"n\">small</span> <span class=\"n\">and</span> <span class=\"n\">cohesive.</span>\n<span class=\"bp\">*</span> <span class=\"n\">There's</span> <span class=\"n\">no</span> <span class=\"n\">use</span> <span class=\"n\">for</span> <span class=\"n\">what</span> <span class=\"n\">was</span> <span class=\"n\">previously</span> <span class=\"bp\">`</span><span class=\"n\">algebra.order.hom.basic</span><span class=\"bp\">`</span> <span class=\"n\">without</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">material.</span>\n<span class=\"bp\">*</span> <span class=\"n\">Increasing</span> <span class=\"n\">the</span> <span class=\"n\">imports</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">algebra.order.hom.basic</span><span class=\"bp\">`</span> <span class=\"n\">didn't</span> <span class=\"n\">increase</span> <span class=\"n\">the</span> <span class=\"n\">imports</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">two</span>\n  <span class=\"n\">files</span> <span class=\"n\">importing</span> <span class=\"n\">it</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">algebra.order.absolute_value</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">analysis.normed.group.seminorm</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>Not sure what you want more.</p>",
        "id": 315613627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670944301
    },
    {
        "content": "<p>But mostly I'm still perplexed about how it doesn't make the porting task more difficult</p>",
        "id": 315613647,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670944312
    },
    {
        "content": "<p>It's because this file is very independent from the rest, and I will have a several months window between the port of the dependencies of <code>algebra.order.hom.basic</code> and its children files to port <a href=\"https://github.com/leanprover-community/mathlib/pull/16919\">#16919</a> to mathlib4.</p>",
        "id": 315613909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670944380
    },
    {
        "content": "<p>Because we have no way to automatically merge synport output of modified files with the already finished ports of earlier versions, right?</p>",
        "id": 315613968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670944395
    },
    {
        "content": "<p>Basically it means these ~150 lines need to be handled manually. But in a new file they would be handled largely automatically.</p>",
        "id": 315614987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670944678
    },
    {
        "content": "<p>Another option is to simply delete the partial port of <code>algebra.order.hom.basic</code>. It's quite short anyway.</p>",
        "id": 315615311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670944755
    },
    {
        "content": "<p>It looks to me like a complete port but yes, that might be possible.</p>",
        "id": 315615617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670944824
    },
    {
        "content": "<p>But in general we cannot just throw away ported files on the whims of mathlib 3 PRs.</p>",
        "id": 315615802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670944881
    },
    {
        "content": "<p>I think we should also have some general \"<code>port-todo</code>\" mechanism to keep track of things that we would like to do but are too difficult or not worth doing the port, for example putting lemmas in the correct locations</p>",
        "id": 315617247,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670945220
    },
    {
        "content": "<p>Because that's surely easier than any of the possibilities discussed above.</p>",
        "id": 315617454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670945278
    },
    {
        "content": "<p>Waiting for <code>algebra.group_power.order</code> to be ported is not too hard either, but I agree with you.</p>",
        "id": 315619283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670945771
    },
    {
        "content": "<p>(Would GitHub Issues be a sufficient platform to record such TODOs? Or a GitHub Project for something a little more kanban?)</p>",
        "id": 315701178,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1670971413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/315557187\">said</a>:</p>\n<blockquote>\n<p>i.e. neither should go to bors unless the other one is at the same time / already delegated or merged.</p>\n</blockquote>\n<p>Is this still true? <a href=\"https://github.com/leanprover-community/mathlib/pull/17956\">#17956</a> has been waiting mathlib4 approval for a week and I think I'll just go ahead and merge it because I can't just wait an eternity on mathlib, then another eternity on mathlib4.</p>",
        "id": 319582119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672924236
    },
    {
        "content": "<p>And the same will happen to <a href=\"https://github.com/leanprover-community/mathlib/pull/17900\">#17900</a>, I'm afraid.</p>",
        "id": 319582422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672924356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/319582119\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17956\">#17956</a> has been waiting mathlib4 approval for a week and I think I'll just go ahead and merge it</p>\n</blockquote>\n<p>I don't think you should go ahead and merge something that was conditionally delegated to you if you're not following the conditions under which it was delegated.</p>\n<p>But indeed we should have a policy here.  Should we ask that someone reviewing the mathlib3 version also review the mathlib4 version?</p>",
        "id": 319622584,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672936359
    },
    {
        "content": "<p>The problem here is that I am unable to fulfill the conditions of the delegation.</p>",
        "id": 319622994,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672936461
    },
    {
        "content": "<p>In fact, what are we expecting from a mathlib4 review? I want to say</p>\n<ul>\n<li>that both PRs' content match</li>\n<li>that all the <code>#align</code> are correct</li>\n<li>that the names are properly capitalised</li>\n</ul>\n<p>but each of those steps was skipped in the past. Indeed, I fixed mistakes that went against each point after delegation.</p>",
        "id": 319623554,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672936625
    },
    {
        "content": "<p>So it seems that the only thing we expect from a mathlib4 review is more design considerations, eg regarding coercions, and compatibility with the port (avoid conflicting PRs, etc...).</p>",
        "id": 319624003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672936741
    },
    {
        "content": "<p>In particular, the content should not get reviewed a second time. Maybe if we make that clearer, <a href=\"https://bit.ly/3cKk3ld\">#queue4</a> will empty faster.</p>",
        "id": 319624372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672936835
    },
    {
        "content": "<p>And PRs that are nontechnical (no coercion fiddling, and similar) and away from the tide don't really need their mathlib4 counterpart to be reviewed simultaneously.</p>",
        "id": 319624909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672936989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20PRs/near/319622994\">said</a>:</p>\n<blockquote>\n<p>The problem here is that I am unable to fulfill the conditions of the delegation.</p>\n</blockquote>\n<p>This I think is particularly bad, because the PR disappears from the radar (long) before being dealt with, so attention isn't drawn to it anymore.</p>",
        "id": 319625395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672937138
    },
    {
        "content": "<p>Then you ask for review here on zulip, same as when you need another review? I looked at the mathlib4 pr and it seems fine</p>",
        "id": 319627695,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672937782
    }
]