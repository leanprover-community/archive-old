[
    {
        "content": "<p>There are a lot of broken <code>convert</code>s turning up in the port of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1304\">mathlib4#1304</a>.  (Search for </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>porting note: broken `convert\n</code></pre></div>\n<p>). I haven't made a self-contained example, but I have a conjecture: maybe in the mathlib3 version <code>convert</code> got to use the expected type to help it elaborate the expression proposed for conversion, and in the mathlib4 version it doesn't.  Does this sound plausible?  If so, can it be changed?</p>\n<p>I noticed a discussion on the lean4 repo this morning about <code>show</code>, which seems like it could be similar:<br>\n<a href=\"https://github.com/leanprover/lean4/commit/fedf235cba35ed8bf6bf571cf38e6d8536b904ac#r95249776\">https://github.com/leanprover/lean4/commit/fedf235cba35ed8bf6bf571cf38e6d8536b904ac#r95249776</a><br>\n<a href=\"https://github.com/leanprover/lean4/commit/474f1a4d39bac6310fbd47aa4545d6c15fb14d53\">https://github.com/leanprover/lean4/commit/474f1a4d39bac6310fbd47aa4545d6c15fb14d53</a></p>",
        "id": 319872949,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673043582
    },
    {
        "content": "<p>Prompted by <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Efinset.2Elattice.20mathlib4.231606/near/321872046\">this</a> I came back to this message to have a look (I had starred Heather's message but I have over 1000 stars now so my system is broken). </p>\n<p>The first porting note about a failing convert is with <code>nat.floor_pos</code>. In Lean 3 it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">floor_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⌊</span><span class=\"n\">a</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">le_floor_iff'</span> <span class=\"n\">nat.one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">cast_one.symm</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and that proof doesn't work in mathlib4, one gets the following complaint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">FloorSemiring</span> <span class=\"bp\">?</span><span class=\"n\">m.36098</span>\n</code></pre></div>\n<p>Lean refuses to guess <code>a</code> (and hence alpha). But you can tell it that <code>a</code> = <code>a</code> and then things work fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">floor_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⌊</span><span class=\"n\">a</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">le_floor_iff'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">Nat.one_ne_zero</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">cast_one.symm</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The second broken convert is <code>Porting note: broken `convert floor_add_nat ha 1` </code> but actually the <code>convert</code> works fine for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">floor_add_one</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⌊</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">=</span> <span class=\"bp\">⌊</span><span class=\"n\">a</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">floor_add_nat</span> <span class=\"n\">ha</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">cast_one.symm</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The third one also works now. The fourth one again needs more hints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">floor_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⌊</span><span class=\"n\">a</span><span class=\"bp\">⌋</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">le_floor</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">cast_one.symm</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It seems to me that convert is \"less agressive\" in mathlib4. Lean has to guess a term of a type, and prove that this type is a floor_ring or whatever; in mathlib3 Lean would look at what the term was in the expression it's supposed to match and say \"Oh OK I'll just use that\". It seems that mathlib4 is more reluctant to do that. Here is a minimised example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- no error</span>\n  <span class=\"c1\">-- ⊢ comm_ring α</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 4</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"cm\">  CommRing ?m.41</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 321903377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673981946
    },
    {
        "content": "<p>mathlib4 is giving up on <code>CommRing ?m.41</code> whereas mathlib3 figures it will just ask the user to solve that goal later on after it's figured out <code>?m.41</code>.</p>",
        "id": 321903950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673982113
    }
]