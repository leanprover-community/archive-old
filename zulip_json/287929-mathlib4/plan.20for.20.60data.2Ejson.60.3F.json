[
    {
        "content": "<p>I would guess that instead of defining <code>exceptional</code> and <code>json_serializable</code>the plan is to use <code>FromJson</code> and <code>ToJson</code> from the lean core? </p>\n<ul>\n<li>Is that correct? </li>\n<li>If so would it be useful to try to make this kind of port (or better to leave this for the core developers to put in Std say)?</li>\n<li>If yes to the above, would it be better to define a single <code>FromToJson</code> class including both and \"export\" instances to the separate classes or to make pairs of instances while porting?</li>\n</ul>",
        "id": 313811981,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670162030
    },
    {
        "content": "<p>I think probably the thing to do is forward-port the missing features from mathlib3 to lean4, rather than do a direct port</p>",
        "id": 313814925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670163554
    },
    {
        "content": "<p>I wrote <a href=\"https://leanprover-community.github.io/mathlib_docs/find/json_serializable\">docs#json_serializable</a> before I was aware that Lean4 had an implementation already</p>",
        "id": 313814952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670163572
    },
    {
        "content": "<p>Backporting to Lean3 would also be quite reasonable</p>",
        "id": 313815156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670163650
    },
    {
        "content": "<p>I don't understand your comment about <code>exceptional</code>; isn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exceptional\">docs#exceptional</a> just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Except#doc\">docs4#Except</a> ?</p>",
        "id": 313815233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670163685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/plan.20for.20.60data.2Ejson.60.3F/near/313815233\">said</a>:</p>\n<blockquote>\n<p>I don't understand your comment about <code>exceptional</code>; isn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exceptional\">docs#exceptional</a> just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Except#doc\">docs4#Except</a> ?</p>\n</blockquote>\n<p><code>mathlib3port</code> ported <code>exceptional</code>to a new monad I believe, so in that sense it is not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Except#doc\">docs4#Except</a>. But I assumed it is meant to be as you say.</p>",
        "id": 313827124,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670169687
    },
    {
        "content": "<p>Ah I see, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.FromJson#doc\">docs4#Lean.FromJson</a> only allows string error messages, not <code>format!\"\"</code> ones</p>",
        "id": 313827465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670169855
    },
    {
        "content": "<p>So <code>exceptional X</code> in Lean 3 is <code>Except (Lean.Options â†’ Std.Format) X</code> in Lean 4</p>",
        "id": 313827576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670169928
    }
]