[
    {
        "content": "<p>As you may now, <code>∃ x ≤ y, p x</code> now elaborates as <code>∃ x, x ≤ y ∧ p x</code>. While this is super nice for readability, it causes some problems when mixed with all of our other double binders. For example, the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_accumulate\">docs#set.mem_accumulate</a> is no longer a direct appication of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem\">docs#set.mem</a>_Union₂. Is there any plan to mitigate that?</p>",
        "id": 317771750,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671921151
    },
    {
        "content": "<p>One possible solution there is to use the <code>bunionᵢ</code>/<code>unionᵢ₂</code> distinction to make the difference, but that requires more care in the way we name lemmas (e.g <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem\">docs#set.mem</a>_Union₂ and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_bUnion\">docs#set.mem_bUnion</a> are not the same)</p>",
        "id": 317771949,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671921297
    },
    {
        "content": "<p>I had heard that this change had been made -- is it in core Lean or mathlib? Definitely \"exists x, exists (h : x &lt;= y)\" is more confusing but do we want to make the refactor now or do we want to put it off?</p>",
        "id": 317772822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671921950
    },
    {
        "content": "<p>This doesn't change the meaning of <code> ⋃ x ≤ y, s x</code> does it?</p>",
        "id": 317772988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671922051
    },
    {
        "content": "<p>That's defined in mathlib and as far as I can see it was faithfully ported (I was looking at this recently but I don't really understand <code>notation3</code>)</p>",
        "id": 317775085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671923556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Exists.20elaboration.20and.20bUnion/near/317772988\">said</a>:</p>\n<blockquote>\n<p>This doesn't change the meaning of <code> ⋃ x ≤ y, s x</code> does it?</p>\n</blockquote>\n<p>No and that is precisely the problem, because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=set.mem#doc\">docs4#set.mem</a>_unionᵢ₂ gives nested exists intead of <code>∃ x ≤ y, ...</code></p>",
        "id": 317777234,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671925581
    },
    {
        "content": "<p>Right, and presumably the problem is that that lemma is supposed to be rfl?</p>",
        "id": 317777350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671925695
    },
    {
        "content": "<p>No it was never <code>rfl</code> I think</p>",
        "id": 317777371,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671925741
    },
    {
        "content": "<p>Can you replace your doc links above with manual ones? Zulip doesn't like the names</p>",
        "id": 317777394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671925781
    },
    {
        "content": "<p>Sorry. In Lean3 this is <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/lattice.html#set.mem_Union%E2%82%82\">https://leanprover-community.github.io/mathlib_docs/data/set/lattice.html#set.mem_Union%E2%82%82</a> and in Lean4 it's not yet in the docs but in the source it's <a href=\"https://github.com/leanprover-community/mathlib4/blob/ea82bbc6dbcd23f2f29bdf7715f6ced3d0e9e9c5/Mathlib/Data/Set/Lattice.lean#L150\">https://github.com/leanprover-community/mathlib4/blob/ea82bbc6dbcd23f2f29bdf7715f6ced3d0e9e9c5/Mathlib/Data/Set/Lattice.lean#L150</a></p>",
        "id": 317777548,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671925927
    },
    {
        "content": "<p>It's not <code>rfl</code> because indexed union is defined as indexed sup which is the sup of the image</p>",
        "id": 317777590,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671925985
    },
    {
        "content": "<p>So I guess the question becomes \"should mathport translate to the defeq thing, or the most similar syntax which might not have the same meaning any more\"</p>",
        "id": 317777687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671926098
    },
    {
        "content": "<p>Yes if by \"the defeq thing\" you mean the nested existential vs \"exists+and\" (because iirc we purposefully traded the bad-defeq of indexed union with the defeq between union and sup, so this one should be kept as is)</p>",
        "id": 317777822,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671926269
    },
    {
        "content": "<p>I don't think that this is a mathport problem. Mathport should definitely be using the thing with the similar syntax; the question is whether the similar syntax should be defeq to what it was in lean 3</p>",
        "id": 317780252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671928489
    },
    {
        "content": "<p>As I've said elsewhere, I don't think mathport should ever try to write the ugly thing to make things typecheck, since then people won't even notice the regression. Mathport could add those noisy warnings, but they have a tendency to confuse people or be ignored and they generally don't have the desired effect compared to a manually written <code>Porting note</code></p>",
        "id": 317780413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671928673
    },
    {
        "content": "<p>Is there a lemma that rewrites the new desugaring of e.g. <code>∃ x ≤ y, p x</code> to the old one?</p>",
        "id": 319087489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672688888
    },
    {
        "content": "<p>aha, <code>exists_prop</code> but I need to <code>simp_rw</code> it of course</p>",
        "id": 319087727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672689033
    }
]