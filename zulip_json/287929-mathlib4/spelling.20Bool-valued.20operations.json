[
    {
        "content": "<p>I have some lemmas I'm trying to port like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">countp_cons_of_neg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">countp</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">countp</span> <span class=\"n\">p</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>I'm a bit concerned about the spelling of the <code>¬p a</code> hypothesis. <code>countp</code> now takes a <code>Bool</code>-valued function not a <code>Prop</code>-valued one, so should the spelling be something like <code>pa : p a == false</code>?</p>",
        "id": 319952522,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673096223
    },
    {
        "content": "<p>Bool-valued arguments are a pain. We should consider having a mathlib version of <code>countp</code> that still uses Prop.</p>",
        "id": 319952761,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673096303
    },
    {
        "content": "<p>After the port we can decide which one to keep.</p>",
        "id": 319952809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673096325
    },
    {
        "content": "<p>One slightly irritating thing is that <code>!(p a) = (p a == false)</code> isn't true by reflexivity.</p>",
        "id": 319953251,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673096498
    },
    {
        "content": "<p>I think using <code>¬p a</code> is the most likely to fit with downstream uses, and we should have simp lemmas and such which rewrite <code>b = false</code> to <code>¬(b = true)</code> so that you can use logical operators as much as possible</p>",
        "id": 319960071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673099230
    },
    {
        "content": "<p>Should <code>count</code> (<code>= countp (· == a)</code>) lemmas be spelled in terms of <code>DecidableEq</code> or <code>LawfulBEq</code>?</p>",
        "id": 319982151,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673109181
    },
    {
        "content": "<p>Since <code>DecidableEq</code> gives an automatic <code>LawfulBEq</code> instance, I think it would be more flexible to just require a <code>LawfulBEq</code>.</p>",
        "id": 319982286,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673109248
    },
    {
        "content": "<p>I'm also wondering if we should use the <code>bif</code> spellings for bool-valued <code>if</code> statements or not.</p>",
        "id": 319982387,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673109326
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">countp_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">countp</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">countp</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 319982404,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673109340
    },
    {
        "content": "<p>Also, any of these could be used:</p>\n<ul>\n<li><code>if a == b then ...</code></li>\n<li><code>if a = b then ...</code></li>\n<li><code>bif a == b then ...</code></li>\n</ul>",
        "id": 319982859,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673109584
    },
    {
        "content": "<p>I tried changing some such lemmas to use bif because it seemed sensible, but it made later parts of the file more awkward</p>",
        "id": 319983435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673109896
    },
    {
        "content": "<p>I think we should use <code>if</code> where we used to use <code>if</code> and <code>bif</code> where we used to use <code>cond</code>, at least for the short to mid term. I think this will lead to the least amount of bool-related pain. Maybe if we get better lemmas and/or tactics we can use <code>bif</code> more, but for now I would stick to using it only in definitions for programming purposes (and even then it might not be necessary depending on how good the compiler is)</p>",
        "id": 319991153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673114497
    }
]