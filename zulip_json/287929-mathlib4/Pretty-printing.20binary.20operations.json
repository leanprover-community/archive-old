[
    {
        "content": "<p>Can we make <code>(·*·)</code> pretty-print to <code>(*)</code> rather than the current <code>(fun x x_1 ↦ x * x_1)</code>?</p>",
        "id": 313721088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670092053
    },
    {
        "content": "<p>Well, we would want it to pretty print back to <code>(·*·)</code>.</p>",
        "id": 313721286,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670092191
    },
    {
        "content": "<p>Am with anything that doesn't involve disambiguated auto-generated names!</p>",
        "id": 313721422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670092233
    },
    {
        "content": "<p>Certainly we could hard code that for a few values of <code>*</code>. I'm not sure what criteria you would use generally.</p>",
        "id": 313721439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670092250
    },
    {
        "content": "<p>How does Lean 3 do it?</p>",
        "id": 313721474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670092285
    },
    {
        "content": "<p>In lean 3, <code>(*)</code> is <code>has_mul.mul</code></p>",
        "id": 313721676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670092409
    },
    {
        "content": "<p><code>(·*·)</code> is syntax for the version that isn't delta-reduced</p>",
        "id": 313721702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670092425
    },
    {
        "content": "<p>Do we want syntax for the delta-reduced version, then?</p>",
        "id": 313721797,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670092465
    },
    {
        "content": "<p>How does it currently print?</p>",
        "id": 313722229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670092773
    },
    {
        "content": "<p>Do you mean eta reduced?</p>",
        "id": 313722399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670092906
    },
    {
        "content": "<p>I remember there's a page in some lean documentation that clearly lists what each name means, but I can never remember where to find it</p>",
        "id": 313722768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670093171
    },
    {
        "content": "<p>I've been thinking about that for a while - I expect that the fact that <code>(.*.)</code> isn't eta-reduced is going to bite us at some point since it is being recommended by mathport in places where lean 3 would have used <code>(*)</code> which is eta-reduced. The way I've been thinking of fixing the issue is to make <code>(bla bla · bla ·)</code> get converted to essentially <code>eta_reduce_fun% x y =&gt; bla bla x bla y</code>where <code>eta_reduce_fun%</code> is a macro which is like <code>fun</code> but eta reduces the resulting lambda if possible.</p>",
        "id": 313756797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670121898
    },
    {
        "content": "<p>There are a small handful of cases where eta-reducing is undesirable, such as when working with finset.sum and wanting to rewrite under the binder; so I can see us potentially wanting a spelling for both the eta-reduced and non-reduced versions</p>",
        "id": 313757136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670122232
    },
    {
        "content": "<p>Assuming that the above is implemented, if you don't want to get it eta reduced you just shouldn't write it with the dot/paren notation. So <code>fun x =&gt; foo x</code> is not eta reduced but <code>(foo .)</code> is</p>",
        "id": 313757890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670122901
    },
    {
        "content": "<p><code>(foo . x)</code> is of course not eta-reduced since it is not an eta redex</p>",
        "id": 313757949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670122935
    },
    {
        "content": "<p>As I see it, the lambdas were never really there in the source, and they are only being introduced as a desugaring. In the case of <code>(.*.)</code> we are clearly just using the syntax to be able to parse the infix operator <code>*</code> without adding much weirder things into the term grammar</p>",
        "id": 313758059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670123068
    },
    {
        "content": "<p>On that reading, we should be within our rights to not introduce the lambdas if we don't need them to express the function</p>",
        "id": 313758158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670123175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pretty-printing.20binary.20operations/near/313722768\">said</a>:</p>\n<blockquote>\n<p>I remember there's a page in some lean documentation that clearly lists what each name means, but I can never remember where to find it</p>\n</blockquote>\n<p>It's here in the <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">Lean 3 reference manual</a></p>",
        "id": 313820103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670165970
    },
    {
        "content": "<p>Ah, my problem was that I was searching for the ascii spellings of the greek letters, not the letters themselves!</p>",
        "id": 313826883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670169580
    }
]