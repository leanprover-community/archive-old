[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> are you still working on that file?</p>",
        "id": 315842437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671030853
    },
    {
        "content": "<p>I have a bit of time now.</p>",
        "id": 315842462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671030857
    },
    {
        "content": "<p>No, pushed the little bit that I accomplished</p>",
        "id": 315842549,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671030881
    },
    {
        "content": "<p>Ok, thanks</p>",
        "id": 315842659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671030918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you have a look at a very strange <code>simp</code> behavior at <a href=\"https://github.com/leanprover-community/mathlib4/pull/998/commits/7d0e0318750daeb511776e8a968a2032955d8617\">https://github.com/leanprover-community/mathlib4/pull/998/commits/7d0e0318750daeb511776e8a968a2032955d8617</a>? Line 135 has a <code>simp</code> doing nothing whereas when I extract the relevant goal in a lemma <code>bar</code> on line 117 it works normally</p>",
        "id": 315853738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671033716
    },
    {
        "content": "<p>While you are in this file, it would also be nice to investigate why the elaborator needs more help in the definition of <code>numDenCasesOn'</code> than in Lean 3. Note that helping the elaborator is easy here, I'm only pointing out one possible improvement.</p>",
        "id": 315855458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671034149
    },
    {
        "content": "<p>Your <code>bar</code> lemma is wrong. The correct version is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">mkPNat</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b.pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and this indeed does not simplify</p>",
        "id": 315856526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671034429
    },
    {
        "content": "<p>Re: <code>numDenCasesOn'</code>, it seems to work fine for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Define a (dependent) function or prove `∀ r : ℚ, p r` by dealing with rational</span>\n<span class=\"sd\">numbers of the form `n /. d` with `0 &lt; d` and coprime `n`, `d`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">def</span> <span class=\"n\">numDenCasesOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Int.natAbs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span><span class=\"o\">)),</span> <span class=\"n\">C</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">rat.num_denom_cases_on</span> <span class=\"n\">Rat.numDenCasesOn</span>\n\n<span class=\"sd\">/-- Define a (dependent) function or prove `∀ r : ℚ, p r` by dealing with rational</span>\n<span class=\"sd\">numbers of the form `n /. d` with `d ≠ 0`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">def</span> <span class=\"n\">numDenCasesOn'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">numDenCasesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h.ne'</span>\n</code></pre></div>",
        "id": 315856946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671034549
    },
    {
        "content": "<p>I don't see any difference between your bar and mine</p>",
        "id": 315857180,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671034612
    },
    {
        "content": "<p><code>h</code> is a dependent function, because it mentions the local variable <code>h</code></p>",
        "id": 315857284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671034643
    },
    {
        "content": "<p>you can see this in the pretty printer, it prints yours as a nondependent arrow and not mine</p>",
        "id": 315857360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671034668
    },
    {
        "content": "<p>as a result <code>simp</code> doesn't want to rewrite the <code>¬b = 0</code></p>",
        "id": 315857524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671034703
    },
    {
        "content": "<p>I think there was some kind of \"canonize proofs\" thing that lean 3 simp did that might explain the difference</p>",
        "id": 315857738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671034766
    },
    {
        "content": "<p>Oh ok, I see the difference now.</p>",
        "id": 315858096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671034860
    },
    {
        "content": "<p>you could also try marking <code>forall_prop_of_true</code> as a simp lemma</p>",
        "id": 315858178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671034879
    },
    {
        "content": "<p>Now at least consistency is restored, and we do have some simp regression compared to Lean 3.</p>",
        "id": 315858228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671034892
    },
    {
        "content": "<p>is <code>forall_prop_of_true</code> a simp lemma in lean 3? Is it used here?</p>",
        "id": 315858449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671034938
    },
    {
        "content": "<p>The Lean 3 version has a simp only there.</p>",
        "id": 315858574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671034974
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/rat/defs.lean#L106\">https://github.com/leanprover-community/mathlib/blob/master/src/data/rat/defs.lean#L106</a></p>",
        "id": 315858812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671035032
    },
    {
        "content": "<p>what does the rewrite trace look like?</p>",
        "id": 315859008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035068
    },
    {
        "content": "<p>The new definition of addition on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> will be a lot of work for porting this file</p>",
        "id": 315859078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671035086
    },
    {
        "content": "<p>Rewrite trace in Lean 3?</p>",
        "id": 315859101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671035094
    },
    {
        "content": "<p>yes</p>",
        "id": 315859119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035098
    },
    {
        "content": "<p>i.e. what did it do</p>",
        "id": 315859181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035109
    },
    {
        "content": "<p>Could you remind me the relevant option?</p>",
        "id": 315859326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671035149
    },
    {
        "content": "<p>eh, I do <code>rewr</code> + autocomplete</p>",
        "id": 315859429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035169
    },
    {
        "content": "<p>something like simplify.rewrite</p>",
        "id": 315859463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035179
    },
    {
        "content": "<p>thanks</p>",
        "id": 315859715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671035246
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[[</span><span class=\"n\">anonymous</span><span class=\"o\">]]:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">false</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">not_false_iff</span><span class=\"o\">]:</span> <span class=\"bp\">¬</span><span class=\"n\">false</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">forall_true_left</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">),</span> <span class=\"n\">mk_pnat</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">mk_pnat</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 315859723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671035248
    },
    {
        "content": "<p>with pp.proofs?</p>",
        "id": 315859772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035261
    },
    {
        "content": "<p>because that's kind of magic</p>",
        "id": 315859814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035271
    },
    {
        "content": "<p>I think it's using a custom <code>congr</code> to descend into both sides of a forall and getting some messy eq.rec term in that <code>_</code></p>",
        "id": 315860082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2ERat.2EDefs/near/315859078\">said</a>:</p>\n<blockquote>\n<p>The new definition of addition on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> will be a lot of work for porting this file</p>\n</blockquote>\n<p>Note that the first theorem we will be proving is <code>a + b = (a.num * b.den + b.num * a.den) /. (a.den * b.den)</code> and all the other theorems follow from that, treating it as the definition</p>",
        "id": 315861013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035573
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[[</span><span class=\"n\">anonymous</span><span class=\"o\">]]:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">false</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">not_false_iff</span><span class=\"o\">]:</span> <span class=\"bp\">¬</span><span class=\"n\">false</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">forall_true_left</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">),</span>\n  <span class=\"n\">mk_pnat</span> <span class=\"n\">a</span>\n      <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span>\n       <span class=\"n\">nat.pos_of_ne_zero</span>\n         <span class=\"o\">(((</span><span class=\"n\">not_congr</span> <span class=\"o\">(</span><span class=\"n\">iff_false_intro</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">int.of_nat</span><span class=\"o\">)</span> <span class=\"n\">b0</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">not_false_iff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">)⟩</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">mk_pnat</span> <span class=\"n\">a</span>\n    <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span>\n     <span class=\"n\">nat.pos_of_ne_zero</span>\n       <span class=\"o\">(((</span><span class=\"n\">not_congr</span> <span class=\"o\">(</span><span class=\"n\">iff_false_intro</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">int.of_nat</span><span class=\"o\">)</span> <span class=\"n\">b0</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">not_false_iff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">true.intro</span><span class=\"o\">)⟩</span> <span class=\"bp\">=</span>\n  <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 315861035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671035580
    },
    {
        "content": "<p>here's a lean 3 MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span> <span class=\"kd\">lemma</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">],</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 315861983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035825
    },
    {
        "content": "<p><code>simp</code> does nothing unless you have that <code>@[congr]</code> lemma</p>",
        "id": 315862052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035846
    },
    {
        "content": "<p>and would you look at that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: `@[congr]` commented out for now.</span>\n<span class=\"c1\">-- @[congr]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">forall_prop_congr</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 315862217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035885
    },
    {
        "content": "<p>so it looks like the root cause is that simp doesn't accept this congr lemma</p>",
        "id": 315862282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035905
    },
    {
        "content": "<p>This is the same one as <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Difference.20in.20.02klzzwxh.3A0000.03.20behaviour\">#mathlib4 &gt; Difference in <code>simp</code> behaviour</a> right?</p>",
        "id": 315863980,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1671036392
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Difference.20in.20.60simp.60.20behaviour/near/314698730\">this link works for me</a> (and Jannis' doesn't)</p>",
        "id": 315864366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671036490
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1926\">https://github.com/leanprover/lean4/issues/1926</a></p>",
        "id": 315864514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671036540
    },
    {
        "content": "<p>Seems like you can't hash-link to topics containing backticks. :(</p>",
        "id": 315869988,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1671038030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> as you can see from this thread, I was also working on this file. It would have been nice to tell us you wanted to work on it too. All the work you pushed two hours ago was duplicated.</p>",
        "id": 315879365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671040659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2ERat.2EDefs/near/315856946\">said</a>:</p>\n<blockquote>\n<p>Re: <code>numDenCasesOn'</code>, it seems to work fine for me:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Define a (dependent) function or prove `∀ r : ℚ, p r` by dealing with rational</span>\n<span class=\"sd\">numbers of the form `n /. d` with `0 &lt; d` and coprime `n`, `d`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">def</span> <span class=\"n\">numDenCasesOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Int.natAbs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span><span class=\"o\">)),</span> <span class=\"n\">C</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">rat.num_denom_cases_on</span> <span class=\"n\">Rat.numDenCasesOn</span>\n\n<span class=\"sd\">/-- Define a (dependent) function or prove `∀ r : ℚ, p r` by dealing with rational</span>\n<span class=\"sd\">numbers of the form `n /. d` with `d ≠ 0`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">def</span> <span class=\"n\">numDenCasesOn'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">numDenCasesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h.ne'</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I forgot to comment on this: the reason why I thought this didn't work is because mathport introduced parentheses that confused Lean. See for instance how Chris and I independently fixed things like <a href=\"https://github.com/leanprover-community/mathlib4/pull/998/commits/5e0e39f6bbee32af1c92863b812e39a918aa1a95#diff-ea45d5aad7c20f5cadf98bd993c050cb08e464552adac793796d1d05f6e4560bL455-R463\">these</a></p>",
        "id": 315879716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671040759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> this has happened to me too and I found it very frustrating. Right now what I am doing is only claiming files when I have time to do the initial run through the entire file fixing the trivial stuff (capitalization etc). Whenever I see a file half-done I am very scared to do more in case it happens to me again.</p>",
        "id": 315884415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671041412
    },
    {
        "content": "<p>To be clear, I'm not blaming Chris for anything, only telling him to be more cautious when Scott explicitly tell people to work on a file. I'm delighted to see all the great work Chris is putting in the port. And there is plenty enough of work for all of us without duplication.</p>",
        "id": 315884783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671041530
    },
    {
        "content": "<p>And now <span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> is also pushing to that branch. I give up.</p>",
        "id": 315885584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671041766
    },
    {
        "content": "<p>Sorry, was responding to Scott's call for help. Happy to back off/revert.</p>",
        "id": 315885711,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671041814
    },
    {
        "content": "<p>Anyway, the file has a lot less errors now, and probably <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should take over since the remaining stuff is really tied to the super un-mathematical new definitions.</p>",
        "id": 315885716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671041814
    },
    {
        "content": "<p>Help is fine! But I think when there is explicit call for help then we should post here before editing the file.</p>",
        "id": 315885852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671041863
    },
    {
        "content": "<p>And also post when we stop. Hence I post: I'm stopping now.</p>",
        "id": 315885960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671041884
    },
    {
        "content": "<p>Anyway from previous work here, I generally think the best approach is for <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  to provide the theorems for invariants in <code>Std</code>, at which the basic lemmas for <code>Rat</code> are trivial.</p>",
        "id": 315886227,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671041977
    },
    {
        "content": "<p>I don't think I can work on it right at this moment, so my recommendation if it's holding up the port is to port all the theorems in terms of some interface theorems similar to the original mathlib definition and sorry the theorems asserting that the new definition matches this, and just commit the file with sorries</p>",
        "id": 315886988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671042192
    },
    {
        "content": "<p>Or for <em>someone</em> with the juice to prove things like <code>add_def</code> to get those invariants in place.</p>",
        "id": 315887745,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671042441
    },
    {
        "content": "<p>Well even if someone does that I'm likely to significantly rewrite it on the way to Std so it's probably not worth it</p>",
        "id": 315887962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671042510
    },
    {
        "content": "<p>this whole file will be migrated to Std but it's easier to do that if it's mostly working already</p>",
        "id": 315888072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671042543
    },
    {
        "content": "<p>that is, I will wait until the <code>feat: port Data.Rat.Defs</code> PR is merged</p>",
        "id": 315888206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671042588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> In response to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"c1\">-- Apparently contrary to the documentation, `conv in a =&gt; rw [← Int.sign_mul_natAbs a]`</span>\n      <span class=\"c1\">-- rewrites all the `a`s, not just the first one.</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.sign_mul_natAbs</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.sign_mul_natAbs</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><del>you are missing the <code>occs</code> parameter:</del></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.sign_mul_natAbs</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n      <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.sign_mul_natAbs</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Actually the default <code>occs</code> setting is <code>(occs := 1)</code> but there was a bug preventing it from matching the <code>a</code>'s separately. Fixed in <a href=\"https://github.com/leanprover/lean4/pull/1956\">lean4#1956</a></p>",
        "id": 315914578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671051939
    },
    {
        "content": "<p>the code with <code>congr</code> can also be written more compactly using <code>enter</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.sign_mul_natAbs</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.sign_mul_natAbs</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 315914852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671052038
    },
    {
        "content": "<p>Thanks for minimizing and fixing this!</p>",
        "id": 315925113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671056091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, sorry about the race conditions on this PR today. Perhaps I overemphasised its priority; hopefully you weren't too annoyed.</p>",
        "id": 315932760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671059684
    },
    {
        "content": "<p>And just a heads up that I'm working on this file now. I'll push individual commits for every lemma that gets fixed. :-)</p>",
        "id": 315936127,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671061562
    },
    {
        "content": "<p>Okay, I'm stopping on <code>Data.Rat.Defs</code>. Still two sorries, and two broken proofs.</p>",
        "id": 315940171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671063928
    },
    {
        "content": "<p>Please don't worry about me and continue the great work you're doing for all of us!</p>",
        "id": 315967447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671086311
    },
    {
        "content": "<p>Gah, someone broke <code>data.rat.defs</code>?? What's going on? Yesterday there was just one error, which <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> was going to handle. Now there are lots. :-(</p>",
        "id": 316830934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671483775
    },
    {
        "content": "<p>I thought <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> was working on it</p>",
        "id": 316831021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671483813
    },
    {
        "content": "<p>I didn't do anything to <code>data.rat.defs</code>, but I added the theorems I said I was going to to Std</p>",
        "id": 316831135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671483845
    },
    {
        "content": "<p>Ok. I will wait for Ruben.</p>",
        "id": 316831320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671483948
    },
    {
        "content": "<p>Okay, I think I understand. Mario's new definition of <code>/.</code> basically borked <code>Data.Rat.Defs</code> in mathlib4, and Ruben has started over fixing things again.</p>",
        "id": 316833883,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485072
    },
    {
        "content": "<p>It feels like we went a long way backwards there. :-(</p>",
        "id": 316833948,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485102
    },
    {
        "content": "<p>what's the issue? It should be the same as the old definition</p>",
        "id": 316833955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671485104
    },
    {
        "content": "<p>Have a look at the branch <code>data_rat_defs2</code>.</p>",
        "id": 316834090,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485159
    },
    {
        "content": "<p>This is where the file used to be, updated to latest Std4.</p>",
        "id": 316834140,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485170
    },
    {
        "content": "<p>It used to be one missing proof, now almost everything fails.</p>",
        "id": 316834181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485187
    },
    {
        "content": "<p>oops, I tried to look that up on mathlib4 and accidentally created a branch through the web interface instead</p>",
        "id": 316834259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671485228
    },
    {
        "content": "<p>the branch doesn't seem to exist</p>",
        "id": 316834285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671485247
    },
    {
        "content": "<p>argh, sorry</p>",
        "id": 316834420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485298
    },
    {
        "content": "<p>Branch is there now.</p>",
        "id": 316834505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485334
    },
    {
        "content": "<p>Whereas back at <a href=\"https://github.com/leanprover-community/mathlib4/pull/998/commits/be6ad827179e8203d7ec2e34a2c1ac6a721bc9ec\">https://github.com/leanprover-community/mathlib4/pull/998/commits/be6ad827179e8203d7ec2e34a2c1ac6a721bc9ec</a> we just had one sorry.</p>",
        "id": 316834584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485370
    },
    {
        "content": "<p>I think to a large extent this file should not be ported at all, just set up the statements and move on. It's basically waiting for the porting wave to pass over it so it can be migrated to std properly, and all the proofs will be written or rewritten at that point anyway</p>",
        "id": 316835150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671485586
    },
    {
        "content": "<p>it feels like while the migration is going on it's just going to be pain for the porting process</p>",
        "id": 316835222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671485619
    },
    {
        "content": "<p>I don't really know what to do with that. :-(</p>",
        "id": 316835358,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485669
    },
    {
        "content": "<p>killing every last sorry is possibly counterproductive if the definitions might change</p>",
        "id": 316835386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671485687
    },
    {
        "content": "<p>what we need for migration to continue is to record all the statements we need</p>",
        "id": 316835458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671485726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  How long do you think the lemmas would have to remain in a <code>sorry</code>'d state?  A week, a month?  I don't really love the idea of leaving sorries in nominally-ported parts of mathlib.</p>",
        "id": 316835689,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671485848
    },
    {
        "content": "<p>It's more an issue of not working on stuff that is currently under active development to avoid stepping on toes</p>",
        "id": 316835831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671485913
    },
    {
        "content": "<p>I still don't understand what you're proposing we do with <code>Data.Rat.Defs</code>, <code>Data.Rat.Basic</code>, and <code>Data.Rat.Order</code>.</p>",
        "id": 316835938,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671485977
    },
    {
        "content": "<p>I had been assuming until this morning that you were going to fill in a proof of <code>add_def</code> in <code>Data.Rat.Defs</code>, and then we would have these three files ported before christmas.</p>",
        "id": 316836067,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486018
    },
    {
        "content": "<p><code>add_def</code> is proved</p>",
        "id": 316836137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671486054
    },
    {
        "content": "<p>But now <code>Data.Rat.Defs</code> is full of broken proofs again, and I'm not sure if you're proposing that we just sorry them all, or what.</p>",
        "id": 316836142,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486056
    },
    {
        "content": "<p>I need to take a closer look at the breakage you are talking about but I didn't make any major changes that should break everything</p>",
        "id": 316836212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671486079
    },
    {
        "content": "<p>So you added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Rat.add_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">normalize</span> <span class=\"o\">(</span><span class=\"n\">a.num</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b.den</span> <span class=\"bp\">+</span> <span class=\"n\">b.num</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">a.den</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.den</span> <span class=\"bp\">*</span> <span class=\"n\">b.den</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Rat.add_def'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">mkRat</span> <span class=\"o\">(</span><span class=\"n\">a.num</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b.den</span> <span class=\"bp\">+</span> <span class=\"n\">b.num</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">a.den</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.den</span> <span class=\"bp\">*</span> <span class=\"n\">b.den</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>in Std.</p>\n<p>But mathlib4 wants:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_def''</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d0</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/.</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/.</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 316836380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486142
    },
    {
        "content": "<p>ok so a lot of problems seem to be that <code>mkNat</code> and <code>mkInt</code> have not been aligned</p>",
        "id": 316836534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671486220
    },
    {
        "content": "<p>You added a definition of <code>/.</code> that is different than what we had in <code>data_rat_defs</code>, so all the statements involving it have broken too.</p>",
        "id": 316836583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486242
    },
    {
        "content": "<p>at least, these definitions still exist on <code>data_rat_defs2</code></p>",
        "id": 316836635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671486252
    },
    {
        "content": "<p>Yes, <code>data_rat_defs2</code> does not include any attempt to update <code>Mathlib.Data.Rat.Defs</code> for your recent changes to Srtd</p>",
        "id": 316836701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486284
    },
    {
        "content": "<p>oh, where am I supposed to be working then?</p>",
        "id": 316836723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671486296
    },
    {
        "content": "<p>It was just to demonstrate that the mathlib4 branch went from one sorry to many errors.</p>",
        "id": 316836733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486301
    },
    {
        "content": "<p>The HEAD of <code>data_rat_defs</code>, I guess?</p>",
        "id": 316836753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486310
    },
    {
        "content": "<p>That appears to be Ruben's effort to update the branch to cope with the changes to Std</p>",
        "id": 316836787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486330
    },
    {
        "content": "<p>But I haven't looked at his changes beyond seeing that there are still lots of breakages.</p>",
        "id": 316836833,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486354
    },
    {
        "content": "<p>I'm sorry if I made life harder for you- I'm not currently looking at the branch, but I'd hoped that the new issues would be easier than the ones we had before</p>",
        "id": 316837314,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671486560
    },
    {
        "content": "<p>No problem, we'll get there. :-)</p>",
        "id": 316837350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486582
    },
    {
        "content": "<p>all I'm seeing is that all the theorems are being replaced by half broken sorry proofs by one line reference-std proofs</p>",
        "id": 316837372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671486595
    },
    {
        "content": "<p>Okay. Sorry to panic, I wasn't happy about seeing a sea of red.</p>",
        "id": 316837500,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486646
    },
    {
        "content": "<p>To be clear, before we bumped, I'm pretty sure there were exactly two sorries.</p>",
        "id": 316837589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486696
    },
    {
        "content": "<p>(add_def and sub_def)</p>",
        "id": 316837604,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486704
    },
    {
        "content": "<p>I had just started trying <code>Data.Rat.Basic</code> and <code>Data.Rat.Order</code>, and then was horrified to discover <code>Data.Rat.Defs</code> was full of errors. :-)</p>",
        "id": 316837710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486750
    },
    {
        "content": "<p>it's sorry free now</p>",
        "id": 316838525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671487136
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 316839493,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671487547
    },
    {
        "content": "<p>Github was confused about the diff, showing a bunch of changes from the std4-update that landed already, so I merged with master</p>",
        "id": 316839825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671487696
    },
    {
        "content": "<p>Amazing, thank you.</p>",
        "id": 316840345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671487952
    },
    {
        "content": "<p>I added Data.Rat.Basic</p>",
        "id": 316841545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671488454
    },
    {
        "content": "<p>I'm confused about casts in <code>Data.Rat.Defs</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, would you be able to help here?</p>\n<p>We currently have (in <code>Data.Rat.Defs</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IntCast</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">ofInt</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">of_int_eq_cast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ofInt</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Int.cast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But it seems that the cast via <code>ofInt</code> is still being picked up as the default, and so several later theorems are written with explicit <code>Int.cast</code> so the LHS is in simp normal form.</p>\n<p>What do we need to do here to have <code>Int.cast</code> be preferred?</p>",
        "id": 316849623,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671491862
    },
    {
        "content": "<p>I punted on <code>Int.cast</code> before but we might need to move it to std just like <code>Nat.cast</code></p>",
        "id": 316852182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671493385
    },
    {
        "content": "<p>Okay, for now, I'm going to leave a note explaining that this problem, then merge as is.</p>",
        "id": 316852430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671493535
    },
    {
        "content": "<p>do you have an example with the issue?</p>",
        "id": 316854015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671494537
    },
    {
        "content": "<p>also I put a <code>attribute [-simp]</code> in data.rat.defs, this should be noted as a temporary workaround</p>",
        "id": 316854088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671494584
    },
    {
        "content": "<p>(the longer story is that <code>mkRat</code> is now preferred over <code>divInt</code> when the denominator is nonnegative, but this needs <code>mkRat</code> to have more API and simp lemmas to match mathlib's theorems about <code>/.</code>)</p>",
        "id": 316854284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671494698
    },
    {
        "content": "<p>I'd like to change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coe_int_eq_divInt</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.cast</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">/.</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">num_den'</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coe_int_eq_divInt</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">/.</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">num_den'</span>\n</code></pre></div>\n<p>but this messes up proofs later. Presumably they are fixable, I'm just not sure if I should do this now or not.</p>",
        "id": 316858671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671497592
    },
    {
        "content": "<p>Oh, I seem to have sorted it out.</p>",
        "id": 316858989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671497829
    },
    {
        "content": "<p>Data.Rat.Defs is hopefully all ready to go.</p>\n<p>The two missing facts for <code>Data.Rat.Order</code> are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_iff_sub_num_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>These probably belong in <code>Std</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, would you like to do this, or shall I have a go?</p>",
        "id": 316863143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671500926
    },
    {
        "content": "<p>do you have a proof relative to some <code>le_def</code> similar to the old definition?</p>",
        "id": 316863289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671501061
    },
    {
        "content": "<p>It looks like the definition trivially satisfies <code>a &lt; b &lt;-&gt; !(b &lt;= a)</code> so it probably comes down to transitivity and asymmetry of <code>&lt;</code></p>",
        "id": 316863441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671501175
    },
    {
        "content": "<p><code>le_iff_sub_num_nonneg</code> is essentially relating the new Std4 definition with the old mathlib3 definition. (But it's stated purely in std4 language).</p>",
        "id": 316863758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671501463
    },
    {
        "content": "<p>So, no, I don't have a proof of <code>le_iff_sub_num_nonneg</code> to work from, since the lhs is the new Std4 definition which mathlib3 didn't talk about.</p>",
        "id": 316864051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671501697
    },
    {
        "content": "<p>aha, I see. (The lt definition is a bit lazy, it could have been just lt &lt;-&gt; not le like it is now)</p>",
        "id": 316864134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671501734
    },
    {
        "content": "<p>I'm done for the day, but I can work on it tomorrow</p>",
        "id": 316864205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671501830
    }
]