[
    {
        "content": "<p>I got started with the OrderIsoNat and it's almost done bar one proof. It's pretty high up in the port status priority list and I don't think I'll be able to finish tonight so I'm just posting in case anyone wants to wrap it up</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1753#issue-1551911732\">https://github.com/leanprover-community/mathlib4/pull/1753#issue-1551911732</a></p>",
        "id": 322784873,
        "sender_full_name": "zbatt",
        "timestamp": 1674339951
    },
    {
        "content": "<p>It's at a point where everything is done except for one lemma which won't simp away properly</p>",
        "id": 322790906,
        "sender_full_name": "zbatt",
        "timestamp": 1674344806
    },
    {
        "content": "<p>does anyone know why <code>simp</code> isn't working for <a href=\"https://github.com/leanprover-community/mathlib4/blob/ecae814f4d2e6b85cbc303e816a6caf73f55332f/Mathlib/Order/OrderIsoNat.lean#L143\"><code>Subtype.orderIsoOfNat_apply</code></a> like it did in Lean3</p>",
        "id": 322792425,
        "sender_full_name": "zbatt",
        "timestamp": 1674346251
    },
    {
        "content": "<p>Some initial remarks for problems of this nature:<br>\n1) Check that the statement looks the same in mathlib4 and mathlib3<br>\n2) Use <code>squeeze_simp</code> in mathlib3 and see what it's using; does the (appropriately capitalized) output work in mathlib4?<br>\n3) You can look at simp logs with <code>set_option trace.Meta.Tactic.simp true</code> in mathlib4 and something like <code>set_option trace.simplify.rewrite true</code> (that last from memory so might not quite be right) in mathlib3.</p>",
        "id": 322792579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674346395
    },
    {
        "content": "<p>The issue is that <code>refl</code> is failing the unify <code>fun a =&gt; Classical.propDecidable (a ∈ s)</code> with <code>(fun a =&gt; DecidablePred fun x =&gt; x ∈ s) a</code></p>",
        "id": 322793780,
        "sender_full_name": "zbatt",
        "timestamp": 1674347314
    },
    {
        "content": "<p>that being said I'm not sure how to get these to unify</p>",
        "id": 322793790,
        "sender_full_name": "zbatt",
        "timestamp": 1674347328
    },
    {
        "content": "<p>Do those two terms have the same type? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 322853966,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674391683
    },
    {
        "content": "<p>The former has type <code>(a : Nat) -&gt; Decidable (a in s)</code> and the latter has type <code>(a : Nat) -&gt; Decidable ((fun x =&gt; (x in s)) a)</code>. I would assume Lean considers these the same, but I could be wrong</p>",
        "id": 322858844,
        "sender_full_name": "zbatt",
        "timestamp": 1674394095
    },
    {
        "content": "<p>tbh I'm a bit confused how this worked in lean3. In particular, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/order_iso_nat.lean#L95\"><code>order_embedding_of_set</code></a> required that <code>x in s</code> be decidable. But I don't see where its decalred for that to be true in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/order_iso_nat.lean#L110\">later theorems</a> that have <code>order_embedding_of_set</code>as part of their definition</p>",
        "id": 322860200,
        "sender_full_name": "zbatt",
        "timestamp": 1674394705
    },
    {
        "content": "<p>for the port, I put <code>[DecidablePred (· ∈ s)]</code> under the declaration of <code>s</code> which solved that requirement, but it could be the cause of this simp not working properly.</p>",
        "id": 322860328,
        "sender_full_name": "zbatt",
        "timestamp": 1674394792
    },
    {
        "content": "<p>I think at some point in the chain classical sneaks into the axioms and then everything is decidable</p>",
        "id": 322862485,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674395887
    },
    {
        "content": "<p>Oh, I see what you mean o.O weird</p>",
        "id": 322862966,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674396100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"483794\">zbatt</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Port.20Order.2FOrderIsoNat/near/322793790\">said</a>:</p>\n<blockquote>\n<p>that being said I'm not sure how to get these to unify</p>\n</blockquote>\n<p>RE: this, what's the output with <code>set_option trace.Meta.isDefEq true</code>?</p>",
        "id": 322863190,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674396177
    },
    {
        "content": "<p>do you want me to paste the whole thing? there's a ton</p>",
        "id": 322863293,
        "sender_full_name": "zbatt",
        "timestamp": 1674396224
    },
    {
        "content": "<p>Just follow the x's until the place where it's clear why it's not unifying :)</p>",
        "id": 322863448,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674396275
    },
    {
        "content": "<p>I think this is it? I'm not 100% sure tho</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">↑?</span><span class=\"n\">f</span>\n      <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RelEmbedding.orderEmbeddingOfLTEmbedding</span>\n            <span class=\"o\">(</span><span class=\"n\">RelEmbedding.natLt</span> <span class=\"o\">(</span><span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.Subtype.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span>\n      <span class=\"n\">n</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">F</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↪</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"n\">found</span> <span class=\"n\">messy</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">s</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">RelEmbedding.orderEmbeddingOfLTEmbedding</span>\n          <span class=\"o\">(</span><span class=\"n\">RelEmbedding.natLt</span> <span class=\"o\">(</span><span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.Subtype.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℕ</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">MulHomClass.toFunLike</span> <span class=\"bp\">=?=</span> <span class=\"n\">EmbeddingLike.toFunLike</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">↑?</span><span class=\"n\">f</span>\n        <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RelEmbedding.orderEmbeddingOfLTEmbedding</span>\n              <span class=\"o\">(</span><span class=\"n\">RelEmbedding.natLt</span> <span class=\"o\">(</span><span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.Subtype.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span>\n        <span class=\"n\">n</span>\n  <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">↑?</span><span class=\"n\">f</span>\n        <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RelEmbedding.orderEmbeddingOfLTEmbedding</span>\n              <span class=\"o\">(</span><span class=\"n\">RelEmbedding.natLt</span> <span class=\"o\">(</span><span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.Subtype.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span>\n        <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 322863585,
        "sender_full_name": "zbatt",
        "timestamp": 1674396345
    },
    {
        "content": "<p>I've never seen it say \"found messy ...\", no clue what that means</p>",
        "id": 322864020,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674396487
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 322864526,
        "sender_full_name": "zbatt",
        "timestamp": 1674396718
    },
    {
        "content": "<p>I think I was wrong about why this is failing, simp is able to unify <code>fun a =&gt; Classical.propDecidable (a ∈ s)) =  (fun a =&gt; dP a)</code> where <code>[dP : DecidablePred (· ∈ s)]</code> but its still not working</p>",
        "id": 322886533,
        "sender_full_name": "zbatt",
        "timestamp": 1674407774
    },
    {
        "content": "<p>nvm I'm wrong, that was the issue</p>",
        "id": 322886617,
        "sender_full_name": "zbatt",
        "timestamp": 1674407837
    },
    {
        "content": "<p>in any case this solves it lol</p>",
        "id": 322886636,
        "sender_full_name": "zbatt",
        "timestamp": 1674407845
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Subtype.orderIsoOfNat_apply</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Subtype.orderIsoOfNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Subtype.ofNat</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Subtype.orderIsoOfNat</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dP</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 322886734,
        "sender_full_name": "zbatt",
        "timestamp": 1674407886
    }
]