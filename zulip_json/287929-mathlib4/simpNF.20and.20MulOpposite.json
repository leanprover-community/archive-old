[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1001\">#1001</a>, the simpNF linter gives me the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">smul_eq_mul_unop</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  a • a'</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  a * a'</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [smul_eq_mul]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>\n<p>Here is the relevant lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MulOpposite.smul_eq_mul_unop</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"bp\">*</span> <span class=\"n\">a.unop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That seems very weird to me because <code>a</code> has type <code>αᵐᵒᵖ</code> while <code>a'</code> has type <code>α</code>, so the multiplication <code>a * a'</code> shouldn't be defined (and indeed if I try replacing <code> a • a'</code> by <code>a * a'</code> I get an error <code>failed to synthesize instance HMul αᵐᵒᵖ α ?m.5162</code> as I would expect). What is going on here?</p>",
        "id": 315866414,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671037071
    },
    {
        "content": "<p>Well, <code>αᵐᵒᵖ</code> is a type synonym for <code>α</code>, so I imagine that in <code>a * a'</code> that <code>a : α</code>. You should be able to see it with whatever the mathlib4 equivalent of <code>set_option pp.all true</code> is.</p>",
        "id": 315869578,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671037899
    },
    {
        "content": "<p>Well <code>a : αᵐᵒᵖ</code> definitely shouldn't be interpreted as an element of <code>α</code> when interpreting <code>a • a'</code>, because, despite being type synonyms <code>αᵐᵒᵖ</code> and <code>α</code> both have a scalar action on <code>α</code> and these are two different actions (left and right multiplication).</p>",
        "id": 315872295,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671038646
    }
]