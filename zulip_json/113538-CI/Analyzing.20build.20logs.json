[
    {
        "content": "<p>I've found it interesting to aggregate the profiling outputs from Scott's build log.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/env perl</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nv\">$cumtime</span><span class=\"p\">{</span><span class=\"nv\">$2</span><span class=\"p\">}</span> <span class=\"o\">+=</span> <span class=\"nv\">$1</span> <span class=\"k\">if</span> <span class=\"sr\">/^\\s+(\\d+)ms\\s+[0-9.]+%\\s+(.*)$/</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span> <span class=\"s\">&quot;$cumtime{$_} $_\\n&quot;</span> <span class=\"k\">foreach</span> <span class=\"nb\">sort</span> <span class=\"p\">{</span> <span class=\"nv\">$cumtime</span><span class=\"p\">{</span><span class=\"nv\">$a</span><span class=\"p\">}</span> <span class=\"sr\">&lt;=&gt;</span> <span class=\"nv\">$cumtime</span><span class=\"p\">{</span><span class=\"nv\">$b</span><span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"nb\">keys</span> <span class=\"nv\">%cumtime</span><span class=\"p\">;</span>\n</code></pre></div>\n\n\n<p>This gives a nice blame-list for slow tactics (cumulative time is in milliseconds):</p>\n<div class=\"codehilite\"><pre><span></span><code>...\n58073 auto.safe_core._main._lambda_4\n67043 tactic.ext._main._lambda_1\n68427 tactic.ext\n70998 tactic.apply_core\n73371 _interaction._lambda_7\n74751 tactic.interactive.finish\n78445 tactic.mk_mapp\n78489 tactic.ring.lift\n79648 tactic.interactive.ring1\n79649 tactic.interactive.ring1._lambda_3\n79650 tactic.interactive.ring\n79650 tactic.interactive.ring._lambda_1\n80756 tactic.ring.ring_m.run\n84920 tactic.chain_iter._main._lambda_2\n84920 tactic.chain_iter\n85168 _private.1069121511.rw_goal._lambda_2\n86784 _private.1069121511.rw_goal._lambda_4\n88774 tactic.interactive.simpa._lambda_4\n89521 _interaction._lambda_8\n101443 rw_core\n102461 tactic.dsimp_target\n104491 simp_lemmas.dsimplify\n114809 tactic.interactive.ext\n117660 _interaction._lambda_6\n119817 tactic.interactive.simp_core_aux._lambda_2\n120007 tactic.interactive.simp_core_aux._lambda_4\n122103 interaction_monad.orelse&#39;\n125459 tactic.interactive.simpa._lambda_3\n126261 interactive.loc.apply\n143214 user_attribute.get_param\n143345 extensional_attribute._main._lambda_7\n143676 tactic.eval_expr\n143945 extensional_attribute._main._lambda_8\n145009 tactic.interactive.have._lambda_1\n157744 _interaction._lambda_5\n160440 user_attribute.get_cache\n162149 tactic.tidy.default_tactics._lambda_4\n162667 tactic.refine\n165736 tactic.ext1\n182106 tactic.tidy.default_tactics._lambda_9\n215667 tactic.interactive.propagate_tags._lambda_3\n255084 tactic.tidy.default_tactics._lambda_8\n270155 _interaction._lambda_4\n399829 tactic.focus1\n429593 tactic.interactive.simpa\n445935 tactic.interactive.exact\n474880 tactic.interactive.dsimp\n481659 tactic.replacer_core\n481659 tactic.replacer\n481659 tactic.replacer_core._main._lambda_4\n558587 tactic.interactive.simpa._lambda_6\n613680 tactic.tidy.default_tactics._lambda_3\n662713 tactic.chain_many._main._lambda_1\n662856 tactic.chain_single\n662857 tactic.first\n662857 tactic.chain_many\n662867 tactic.chain_core\n662890 tactic.tidy\n662890 tactic.tidy.core\n669626 tactic.try\n728163 tactic.try_core\n837059 tactic.to_expr\n884716 _interaction._lambda_3\n925051 tactic.interactive.simp_core_aux._lambda_5\n948162 tactic.simp_target\n1045350 tactic.interactive.simp_core_aux\n1056608 _private.1304821429.all_goals_core._main._lambda_2\n1056647 all_goals_core\n1056660 tactic.all_goals\n1102715 tactic.simplify\n1309747 tactic.seq\n1506343 tactic.solve1\n1520303 interaction_monad.monad._lambda_9\n1998068 interaction_monad_orelse\n3406500 tactic.mk_simp_set\n3424549 tactic.join_user_simp_lemmas\n3439367 simp_lemmas.mk_default\n3449179 tactic.mk_simp_set_core\n4135671 tactic.interactive.simp_core\n4215137 tactic.interactive.propagate_tags\n5029124 _interaction._lambda_2\n5690358 tactic.istep._lambda_1\n5690414 scope_trace\n5690440 tactic.istep\n5695842 _interaction\n6126456 tactic.step\n</code></pre></div>\n\n\n<p>This is how I spotted the <code>ext</code> slowness (<a href=\"https://github.com/leanprover-community/mathlib/issues/2674\">#2674</a>).  Unfortunately there are few other surprises, we all know that <code>simp</code> is slow.</p>",
        "id": 197523478,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589445029
    },
    {
        "content": "<p>Ok, I didn't realize just how slow simp is.  The build spends <strong>one goddamn hour</strong> on just creating the simp set...</p>",
        "id": 197523811,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589445211
    },
    {
        "content": "<p>One hour out of?</p>",
        "id": 197524677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589445700
    },
    {
        "content": "<p>Out of four hours (246m).</p>",
        "id": 197525163,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589445998
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/234\">lean#234</a></p>",
        "id": 197533033,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589451096
    }
]