[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11396\">#11396</a> fails on <code>continuous integration / Run tests (push) </code> with</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&lt;unknown&gt;:1:1: error: unknown declaration <span class=\"s1\">'_private.3777865389.ne_from_not_eq'</span>\nError: Process completed with <span class=\"nb\">exit</span> code <span class=\"m\">1</span>.\n</code></pre></div>",
        "id": 267867629,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642080266
    },
    {
        "content": "<p>It reads as though a <code>private</code> definition should become public somehow. Or maybe this is a hash collision?</p>",
        "id": 267867817,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642080385
    },
    {
        "content": "<p>Seems to be the same as this thread: <a href=\"#narrow/stream/113488-general/topic/error.3A.20unknown.20declaration.20_private\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/error.3A.20unknown.20declaration.20_private</a></p>",
        "id": 267867862,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642080419
    },
    {
        "content": "<p><code>ne_from_not_eq</code> esists as a private declaration (it is in <code>src/tactic/norm_cast.lean</code>), but it seems unrelated to my PR...</p>",
        "id": 267868763,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642080917
    },
    {
        "content": "<p>this seems to be an error that pops up randomly. if you make any nonsense change in your commit, it should go away next push</p>",
        "id": 267868815,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642080948
    },
    {
        "content": "<p>Let me try</p>",
        "id": 267870583,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642081768
    },
    {
        "content": "<p>Mmm, I keep on getting the same error. I am trying to make the declaration public to see what happens.</p>",
        "id": 267873925,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642083263
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/runs/4804393558?check_suite_focus=true\">I just got the same error :cry:</a></p>",
        "id": 267877748,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642084878
    },
    {
        "content": "<p>argh, what is going on... is it worth making <code>detect_errors</code> temporarily dump the full commandline output to figure out what it is? i'm gonna try build one of these locally to see if I can get the error</p>",
        "id": 267878595,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642085228
    },
    {
        "content": "<p>I've been trying this for the past 10 mins or so</p>",
        "id": 267879442,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642085625
    },
    {
        "content": "<p>I can reproduce the error locally, but still not really any closer to diagnosing it</p>",
        "id": 267879466,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642085640
    },
    {
        "content": "<p>argh, yeah, the output isn't helpful diagnosing wise:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code> ~/r/mathlib  on reverse-submodule_norm_coe  lean --json -T100000 --make docs archive roadmap <span class=\"nb\">test</span> counterexamples\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">\"caption\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"nt\">\"file_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"/Users/ericr/repos/mathlib/counterexamples/phillips.lean\"</span><span class=\"p\">,</span><span class=\"nt\">\"pos_col\"</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"nt\">\"pos_line\"</span><span class=\"p\">:</span><span class=\"mi\">110</span><span class=\"p\">,</span><span class=\"nt\">\"severity\"</span><span class=\"p\">:</span><span class=\"s2\">\"error\"</span><span class=\"p\">,</span><span class=\"nt\">\"text\"</span><span class=\"p\">:</span><span class=\"s2\">\"unknown declaration '_private.579854401.pseudo_metric_space.dist_nonneg''\"</span><span class=\"p\">}</span>\n<span class=\"p\">{</span><span class=\"nt\">\"caption\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"nt\">\"file_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"/Users/ericr/repos/mathlib/counterexamples/phillips.lean\"</span><span class=\"p\">,</span><span class=\"nt\">\"pos_col\"</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"nt\">\"pos_line\"</span><span class=\"p\">:</span><span class=\"mi\">134</span><span class=\"p\">,</span><span class=\"nt\">\"severity\"</span><span class=\"p\">:</span><span class=\"s2\">\"error\"</span><span class=\"p\">,</span><span class=\"nt\">\"text\"</span><span class=\"p\">:</span><span class=\"s2\">\"type mismatch at application\\n  Exists.intro φ (λ (f : discrete_copy α →ᵇ ℝ) (hf : integrable ⇑f μ), hφ.left ⟨f, hf⟩)\\nterm\\n  λ (f : discrete_copy α →ᵇ ℝ) (hf : integrable ⇑f μ), hφ.left ⟨f, hf⟩\\nhas type\\n  ∀ (f : discrete_copy α →ᵇ ℝ) (hf : integrable ⇑f μ),\\n    ⇑φ ↑⟨f, hf⟩ = ⇑(bounded_integrable_functions_integral_clm μ) ⟨f, hf⟩\\nbut is expected to have type\\n  ∀ (f : discrete_copy α →ᵇ ℝ), integrable ⇑f μ → ⇑φ f = ∫ (x : α), ⇑f x ∂μ\\nstate:\\nα : Type u,\\n_inst_1 : measurable_space α,\\nμ : measure α,\\n_inst_2 : is_finite_measure μ,\\nφ : (discrete_copy α →ᵇ ℝ) →L[ℝ] ℝ,\\nhφ :\\n  (∀ (x : ↥(bounded_integrable_functions μ)), ⇑φ ↑x = ⇑(bounded_integrable_functions_integral_clm μ) x) ∧\\n    ∥φ∥ = ∥bounded_integrable_functions_integral_clm μ∥\\n⊢ ∃ (φ : (discrete_copy α →ᵇ ℝ) →L[ℝ] ℝ),\\n    ∀ (f : discrete_copy α →ᵇ ℝ), integrable ⇑f μ → ⇑φ f = ∫ (x : α), ⇑f x ∂μ\"</span><span class=\"p\">}</span>\n<span class=\"p\">{</span><span class=\"nt\">\"caption\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"nt\">\"file_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"/Users/ericr/repos/mathlib/counterexamples/phillips.lean\"</span><span class=\"p\">,</span><span class=\"nt\">\"pos_col\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nt\">\"pos_line\"</span><span class=\"p\">:</span><span class=\"mi\">569</span><span class=\"p\">,</span><span class=\"nt\">\"severity\"</span><span class=\"p\">:</span><span class=\"s2\">\"error\"</span><span class=\"p\">,</span><span class=\"nt\">\"text\"</span><span class=\"p\">:</span><span class=\"s2\">\"unknown declaration '_private.579854401.pseudo_metric_space.dist_nonneg''\"</span><span class=\"p\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 267879680,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642085734
    },
    {
        "content": "<blockquote>\n<p>Or maybe this is a hash collision?</p>\n</blockquote>\n<p>Can you try adding a space to <code>src/tactic/doc_commands.lean</code> and see if this make CI happy?</p>",
        "id": 267882407,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642086802
    },
    {
        "content": "<p>This has been coming up rarely but periodically. I saw it the other day but didn't have time to diagnose</p>",
        "id": 267884452,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642087593
    },
    {
        "content": "<p>Merging master usually fixes it but a real diagnosis would be great!</p>",
        "id": 267884499,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642087618
    },
    {
        "content": "<p>I'm not sure if it's a diagnosis, more a sequence of observations but when I get riccardo's PR ea4acc9aba6d6d7033675705809a28b4acbc796a and get the mathlib cache the following fails <code>lean --recursive --export=mathlib2.txt src/algebra/char_zero.lean --only-export=nat.cast_add_one_ne_zero</code> with error <code>&lt;unknown&gt;:1:1: error: unknown declaration '_private.3777865389.ne_from_not_eq'</code>.<br>\nThis is in the term of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_add_one_ne_zero\">docs#nat.cast_add_one_ne_zero</a> because that uses exact_mod_cast which uses its own private lemmas in its proofs.<br>\nThe interesting thing is that many other oleans have <code>ne_from_not_eq</code> in, grep gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">norm_cast.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">metric_space</span><span class=\"bp\">/</span><span class=\"n\">contracting.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">roots_of_unity.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">trigonometric</span><span class=\"bp\">/</span><span class=\"n\">arctan.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">trigonometric</span><span class=\"bp\">/</span><span class=\"n\">arctan_deriv.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">integrals.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">pow.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">quotient.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">fourier.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">liouville</span><span class=\"bp\">/</span><span class=\"n\">liouville_with.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">padics</span><span class=\"bp\">/</span><span class=\"n\">ring_homs.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">padics</span><span class=\"bp\">/</span><span class=\"n\">padic_norm.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">padics</span><span class=\"bp\">/</span><span class=\"n\">padic_numbers.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">padics</span><span class=\"bp\">/</span><span class=\"n\">padic_integers.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">bernoulli.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">modular.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">bernoulli_polynomials.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">pythagorean_triples.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">class_number</span><span class=\"bp\">/</span><span class=\"n\">finite.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">hausdorff.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group_finsupp.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">specific_groups</span><span class=\"bp\">/</span><span class=\"n\">cyclic.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">witt_polynomial.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">frobenius.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">structure_polynomial.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">geometry</span><span class=\"bp\">/</span><span class=\"n\">euclidean</span><span class=\"bp\">/</span><span class=\"n\">monge_point.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">ennreal.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">wallis.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">leibniz.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">nnreal.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">irrational.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">nat</span><span class=\"bp\">/</span><span class=\"n\">modeq.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">rat</span><span class=\"bp\">/</span><span class=\"n\">floor.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">rat</span><span class=\"bp\">/</span><span class=\"n\">basic.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">hasse_deriv.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">char_p</span><span class=\"bp\">/</span><span class=\"n\">invertible.olean</span> <span class=\"n\">matches</span>\n<span class=\"n\">Binary</span> <span class=\"n\">file</span> <span class=\"bp\">.//</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">char_zero.olean</span> <span class=\"n\">matches</span>\n</code></pre></div>\n<p>picking one of these other files like <code>contracting.olean</code> and opening it in hexedit I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">5</span><span class=\"n\">F</span> <span class=\"mi\">70</span> <span class=\"mi\">72</span> <span class=\"mi\">69</span>  <span class=\"mi\">76</span> <span class=\"mi\">61</span> <span class=\"mi\">74</span> <span class=\"mi\">65</span>  <span class=\"mi\">00</span> <span class=\"n\">FF</span> <span class=\"n\">B5</span> <span class=\"n\">BD</span>  <span class=\"n\">BB</span> <span class=\"mi\">25</span> <span class=\"mi\">6</span><span class=\"n\">E</span> <span class=\"mi\">65</span>  <span class=\"mi\">5</span><span class=\"n\">F</span> <span class=\"mi\">66</span> <span class=\"mi\">72</span> <span class=\"mi\">6</span><span class=\"n\">F</span>  <span class=\"mi\">6</span><span class=\"n\">D</span> <span class=\"mi\">5</span><span class=\"n\">F</span> <span class=\"mi\">6</span><span class=\"n\">E</span> <span class=\"mi\">6</span><span class=\"n\">F</span>  <span class=\"mi\">74</span> <span class=\"mi\">5</span><span class=\"n\">F</span> <span class=\"mi\">65</span> <span class=\"mi\">71</span>\n</code></pre></div>\n<p>this is <code>_private.3049110309.ne_from_not_eq</code>. (I'm sure there is an easier way to do this than hexedit lol but olean-rs wasn't working for me). This indeed references a somewhat consistent name as it is the same as in the output of <code>lean --recursive --export=mathlib4.txt src/data/nat/cast.lean</code>, and all of these oleans I checked use <code>3049110309</code> not <code>3777865389</code>.<br>\nIf I manually replace that tiny portion of <code>src/algebra/char_zero.olean</code> with <code>_private.3049110309.ne_from_not_eq</code> instead of <code>_private.3777865389.ne_from_not_eq</code> (<code>B5 BD BB 25</code> with <code>E1 2D A6 AD</code>) then everything looks like it builds fine, at least <code>lean --recursive --export=mathlib5.txt src/algebra/char_zero.lean</code> then works.</p>\n<p>The question seems to be why does one olean think the private name is one thing, while all the others think its different</p>",
        "id": 267901744,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642094604
    },
    {
        "content": "<p>I confirm that merging master fixed the problem.</p>",
        "id": 267902113,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642094749
    }
]