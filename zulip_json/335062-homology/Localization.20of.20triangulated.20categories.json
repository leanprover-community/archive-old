[
    {
        "content": "<p>As I had previously suggested, I have now obtained the localization theorem for triangulated categories in Lean/mathlib: if <code>C</code> is a triangulated category and <code>W</code> is a <code>morphism_property C</code> which satisfies certain conditions (left/right calculus of fractions, stability by shift, etc.), the localized category is also triangulated. In particular, if <code>A</code> is a triangulated subcategory of <code>C</code>, one may take for <code>W</code> the class of morphisms whose cone is in <code>A</code>. In order to do this, I had to develop further the localization of categories (e.g. show that the localized category is additive if <code>C</code> is additive and <code>W</code> satisfies some conditions, etc.). One of the results I have obtained is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">triangulated.subcategory.left_orthogonal_bijective_L_map</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_zero_object</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">has_shift</span> <span class=\"n\">C</span> <span class=\"n\">ℤ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">shift_functor</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">additive</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">triangulated.pretriangulated</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">triangulated</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">triangulated.subcategory</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_8</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_9</span> <span class=\"o\">:</span> <span class=\"n\">L.is_localization</span> <span class=\"n\">A.W</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">A.left_orthogonal.set</span> <span class=\"bp\">→</span> <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">L.map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If <code>C</code> is the category of complexes (up to homotopy) in an abelian category <code>M</code>, one may apply this to the triangulated subcategory consisting of exact complexes. Homology results in LTE should show that this is indeed a triangulated subcategory and the corresponding class <code>W</code> is the class of quasi-isomorphisms. Then, one may define the derived category of <code>M</code> as a triangulated category, and the lemma above would show that we can compute morphisms in the derived category from a \"K-projective\" complex into any complex, e.g. compute morphisms from a bounded above complex of projective objects as homotopy classes of morphisms of complexes. This would easily allow to redefine <code>Ext</code> groups as morphisms in the derived category and recover the previous definition in <code>mathlib</code>.</p>\n<p>The code, which shall require some polishing... is at <a href=\"https://github.com/joelriou/homotopical_algebra\">https://github.com/joelriou/homotopical_algebra</a>.</p>",
        "id": 302852185,
        "sender_full_name": "Joël Riou",
        "timestamp": 1665149446
    }
]