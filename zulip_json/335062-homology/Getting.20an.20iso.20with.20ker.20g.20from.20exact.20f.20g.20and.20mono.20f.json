[
    {
        "content": "<p>I have <code>f : X ⟶ Y</code>, <code>g : Y ⟶ Z</code> and I know <code>mono f</code>, <code>exact f g</code>. What's the easiest way to get an isomorphism <code>X ≅ kernel g</code>? I'm depending on LTE in case there's an easy way from the stuff in there that isn't in mathlib</p>",
        "id": 295302336,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661457869
    },
    {
        "content": "<p>Take a look at <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/exact_lift_desc.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/exact_lift_desc.lean</a> particularly <code>mono_lift</code> etc</p>",
        "id": 295303548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661458379
    },
    {
        "content": "<p>that should let you work with <code>X</code> as if it was a kernel already (in the sense that you get the same API)</p>",
        "id": 295303618,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661458414
    },
    {
        "content": "<p>if you want you could construct an isomorphism with <code>kernel g</code> using this API, but the API itself might be enough for your application.</p>",
        "id": 295303706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661458446
    },
    {
        "content": "<p>No I need an actual isomorphism with the kernel, I have an exact sequence <code>0 -&gt; X -&gt; R^2 -g&gt; R</code> where <code>g(x, y) = x + y</code> and I want to conclude <code>X</code> is free of rank 1. I ended up using <code>exact_iff_image_to_kernel'_is_iso</code> and <code>limits.image_mono_iso_source</code></p>",
        "id": 295305932,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661459456
    },
    {
        "content": "<p>(this is for computing H₁(∂Δ²; R) using the isomorphism H₁(∂Δ²; R) ≅ H₁(Δ¹, ∂Δ¹; R) and the LES of the pair (Δ¹, ∂Δ¹))</p>",
        "id": 295306034,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661459497
    },
    {
        "content": "<p>The usual way to get the isomorphism would be to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.is_limit_of_exact_of_mono\">docs#category_theory.abelian.is_limit_of_exact_of_mono</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.is_limit.cone_point_unique_up_to_iso\">docs#category_theory.limits.is_limit.cone_point_unique_up_to_iso</a></p>",
        "id": 295309229,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1661460944
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 295309656,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661461126
    },
    {
        "content": "<p>Actually I think the right way to do what I'm trying to do is to show that a ladder diagram like this with exact rows and the vertical maps isos induces the dotted iso <a href=\"/user_uploads/3121/_DXIGj7qf9uGtJLEtO2y-vtE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_DXIGj7qf9uGtJLEtO2y-vtE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_DXIGj7qf9uGtJLEtO2y-vtE/image.png\"></a></div>",
        "id": 295310076,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661461306
    },
    {
        "content": "<p>I can do this directly using the API Adam linked</p>",
        "id": 295310131,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661461323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> it's great that you're a consumer of the abelian category API! I don't think abelian category formalisation has been attempted before so it will be interesting to see what people need.</p>",
        "id": 295323154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661468180
    },
    {
        "content": "<p>Yeah, I think my singular homology project has been a kind of stress test for it. I'll try to write up something about my experience with it and pain points</p>",
        "id": 295323203,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661468219
    },
    {
        "content": "<p>Definitely could use some comprehensive documentation</p>",
        "id": 295323218,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661468225
    },
    {
        "content": "<p>Also I am <em>nearly</em> done with my project, I have the iso Hₖ(Δⁿ, ∂Δⁿ) ≅ Hₖ(∂Δⁿ⁺¹) and just need to do an inductive argument to calculate Hₖ(∂Δⁿ). I haven't had much time to work on it until recently because I needed to study for &amp; take my qualifying exams (which I've passed!)</p>",
        "id": 295324185,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661468871
    },
    {
        "content": "<p>After this I'll start merging chunks into mathlib</p>",
        "id": 295324193,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661468881
    },
    {
        "content": "<p>What kind of homology is this?</p>",
        "id": 295326653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661470700
    },
    {
        "content": "<p>Singular, see <a href=\"https://github.com/Shamrock-Frost/BrouwerFixedPoint\">https://github.com/Shamrock-Frost/BrouwerFixedPoint</a></p>",
        "id": 295326789,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661470810
    },
    {
        "content": "<p>Nice!</p>",
        "id": 295326946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661470965
    }
]