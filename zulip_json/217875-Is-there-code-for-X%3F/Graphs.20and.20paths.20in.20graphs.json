[
    {
        "content": "<p>I'm new to Lean and I was wondering if someone has already defined the most general form of a graph:<br>\nA directed multigraph. I will need paths in these graph and I'm looking for something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">arrows</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">paths</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">id</span>  <span class=\"o\">[]</span>           <span class=\"o\">:</span> <span class=\"n\">paths</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">append</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">paths</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">graph.arrows</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">paths</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>I will also need composition of paths and I already tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">path_comp</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">paths</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">paths</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">paths</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"n\">z'</span> <span class=\"n\">w'</span> <span class=\"n\">h</span> <span class=\"n\">qh</span> <span class=\"n\">pq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pq.append</span> <span class=\"n\">qh</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, I would prefer a definition like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">path_comp</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">paths</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">paths</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">paths</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">id</span>            <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">path_comp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>but this gives multiple error that I don't understand yet. My question is if there already exists a<br>\ngeneral theory for these types of graphs. And if not, what I'm doing wrong.</p>",
        "id": 232111852,
        "sender_full_name": "Floris Cnossen",
        "timestamp": 1616872881
    },
    {
        "content": "<p>They exist under the name of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> with some basic theory, fairly recent.</p>",
        "id": 232112284,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1616873388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> added it.</p>",
        "id": 232112501,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1616873590
    },
    {
        "content": "<p>Yes, we have paths, and there is a PR for composition of paths <a href=\"https://github.com/leanprover-community/mathlib/issues/6847\">#6847</a></p>",
        "id": 232113322,
        "sender_full_name": "David Wärn",
        "timestamp": 1616874287
    },
    {
        "content": "<p>The only problem with your definition seems to be that you need to generalize over z in the definition</p>",
        "id": 232113358,
        "sender_full_name": "David Wärn",
        "timestamp": 1616874316
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">path_comp</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">paths</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">paths</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">paths</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">paths.id</span> <span class=\"n\">_</span><span class=\"o\">)</span>        <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">paths.append</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">path_comp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 232113501,
        "sender_full_name": "David Wärn",
        "timestamp": 1616874435
    },
    {
        "content": "<p>Thank you, a quiver seems to be exactly what I need. Also thanks for fixing my definition. I think now I have a better understanding of the definition.</p>",
        "id": 232114324,
        "sender_full_name": "Floris Cnossen",
        "timestamp": 1616875134
    },
    {
        "content": "<p>Do we have the free category on a graph?</p>",
        "id": 232128611,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616890943
    },
    {
        "content": "<p>Not that I know of</p>",
        "id": 232128952,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616891375
    },
    {
        "content": "<p>I made this construction at some point, but I don't remember if it was on a mathlib branch or not...</p>",
        "id": 232130296,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616893040
    },
    {
        "content": "<p>There was some discussion in the <code>prefunctor(?)</code> topic in this stream</p>",
        "id": 232130378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616893152
    },
    {
        "content": "<p>I guess what I made is here <a href=\"https://github.com/leanprover-community/mathlib/tree/free_cat\">branch#free_cat</a> but it's now 7 months old</p>",
        "id": 232130808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616893663
    },
    {
        "content": "<p>2537 commits behind master <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 232130863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616893698
    },
    {
        "content": "<p>The uniqueness of the lift construction seems to be missing there too...</p>",
        "id": 232130923,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616893774
    },
    {
        "content": "<p>The free category is also in <a href=\"https://github.com/leanprover-community/mathlib/tree/hedetniemi\">branch#hedetniemi</a>, but that's even older... <a href=\"https://github.com/leanprover-community/mathlib/issues/6847\">#6847</a> defines all the operations in the underlying path category and shows associativity etc. What's missing is 1) a notion of graph homomorphism 2) a forgetful functor Cat =&gt; Graph 3) the universal property of the category of paths</p>",
        "id": 232153032,
        "sender_full_name": "David Wärn",
        "timestamp": 1616921377
    },
    {
        "content": "<p>I'm sure I can find an even older one... Maybe even 2017. :-)</p>",
        "id": 232154653,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616923378
    },
    {
        "content": "<p>Is there a reason <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> is not a class?</p>",
        "id": 232164013,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616934737
    },
    {
        "content": "<p>Yes, I want to put different quivers on the same vertex set (e.g. a graph and its spanning tree)</p>",
        "id": 232165256,
        "sender_full_name": "David Wärn",
        "timestamp": 1616936158
    },
    {
        "content": "<p>Makes sense. Although it would be nice to automatically get a quiver from a category</p>",
        "id": 232165357,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616936253
    },
    {
        "content": "<p>It would be nice. It's possible that we'd be better off making quiver a class (or just using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.has_hom\">docs#category_theory.has_hom</a>) and introducing a type synonym whenever we put a new quiver on our vertex set. We'll need a type synonym anyway for the path category on a graph. But for the stuff I've done so far, the current setup works well, and I don't have any plans to add more stuff</p>",
        "id": 232167161,
        "sender_full_name": "David Wärn",
        "timestamp": 1616938168
    },
    {
        "content": "<p>You could also use bundled subquivers to talk about spanning trees</p>",
        "id": 232167348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616938330
    },
    {
        "content": "<p>Actually now that I think about it, it shouldn't be difficult to refactor <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> to use <code>has_hom</code> instead. We'd need a type synonym for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.symmetrify\">docs#quiver.symmetrify</a>, but everything else should work well</p>",
        "id": 232176844,
        "sender_full_name": "David Wärn",
        "timestamp": 1616948722
    },
    {
        "content": "<p>(Currently I need to promote subquivers to quivers to talk about paths in a subquiver. But you could alternatively show that a subquiver gives you a subquiver of the path quiver)</p>",
        "id": 232177308,
        "sender_full_name": "David Wärn",
        "timestamp": 1616949148
    },
    {
        "content": "<p>The usual trick is to define a coercion to type on bundled subobjects, and construct an instance of the class on the associated type</p>",
        "id": 232179503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616951337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>, how about we try the following:<br>\n1) make <code>quiver</code> a class<br>\n2) replace <code>has_hom</code> with <code>quiver</code><br>\n3) install <code>prefunctor</code> (or some other name) above <code>functor</code>, for morphisms of quivers?</p>\n<p>If this doesn't seem crazy, I can give it a go. I would like to have a convenient API for path categories soon.</p>",
        "id": 233930230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618035210
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 233936775,
        "sender_full_name": "David Wärn",
        "timestamp": 1618041758
    },
    {
        "content": "<p>Ah: <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>, a problem here will be that we would have to change <code>quiver</code> so arrows live in <code>Type v</code>, rather than <code>Sort v</code> (for the same reasons this is necessary in the category theory library). Can you live with this?</p>",
        "id": 233945781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618051740
    },
    {
        "content": "<p>Note the restriction is actually already hiding in your code, but obscured because there aren't explicit universe annotations. For example <code>symmetrify</code> secretly requires <code>v &gt; 0</code>.</p>",
        "id": 233945801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618051797
    },
    {
        "content": "<p>I don't mind, I only use <code>Type v</code>-valued quivers. But is it really necessary? Can't we e.g. make category extend <code>quiver.{v+1}</code>?  (Btw, this obfuscation is ameliorated in <a href=\"https://github.com/leanprover-community/mathlib/issues/6840\">#6840</a>.)</p>",
        "id": 233946193,
        "sender_full_name": "David Wärn",
        "timestamp": 1618052203
    },
    {
        "content": "<p>Maybe? To be honest, I still have nightmares from changing between Type v and Sort v in the category definition several times, and would prefer to keep things uniform and simple. :-)</p>",
        "id": 233947494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618053562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>, I've converted it to a class in <a href=\"https://github.com/leanprover-community/mathlib/issues/7150\">#7150</a>. If you could have a look over that it would be great.</p>",
        "id": 233948123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618054279
    },
    {
        "content": "<p>I'll immediately try to replace <code>has_hom</code> with <code>quiver</code>, however.</p>",
        "id": 233948133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618054297
    },
    {
        "content": "<p>As long as you don't mind if the <code>arrow</code> field of <code>quiver</code> gets renamed to <code>hom</code>, this turns out to be completely straightforward.</p>",
        "id": 233948823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618055094
    },
    {
        "content": "<p>(It would not be insane to rename the <code>hom</code> field of <code>category</code> to <code>arrow</code>, of course, just a lot of work.)</p>",
        "id": 233948978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618055275
    },
    {
        "content": "<p>This replacement is up as <a href=\"https://github.com/leanprover-community/mathlib/issues/7151\">#7151</a>.</p>",
        "id": 233949092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618055392
    },
    {
        "content": "<p>I'm a bit late to respond here... but I'm 100% supportive of this refactor! </p>\n<p>What are the immediate applications besides the free category on a quiver construction?</p>",
        "id": 233996491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618095907
    },
    {
        "content": "<p>The reason I'm doing this now is that I want cheap access to limits and colimits of chain complexes. The plan is to show that our new \"shapeless\" complexes are equivalent to a particular subcategory of functors from the path category on the complete quiver of the indexing type. That subcategory is the subcategory of functors supported on the paths of length one (because d^2 = 0) and which are allowed by the shape. Finally, not only do functor categories <code>J \\func C</code> have whatever limits <code>C</code> has, the subcategory of functors supported on some specified set of morphisms in <code>J</code> has those same limits. (I think?)</p>",
        "id": 233998659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618098080
    },
    {
        "content": "<p>I have another branch with bundled <code>Quiver</code>, and the <code>free</code> and <code>forget</code> functors. I'll see if the adjunction runs into any 2-categorical horrors, and if not make a separate PR then mark all three for review.</p>",
        "id": 233998720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618098154
    },
    {
        "content": "<p>I think the category of prefunctors(?) from J to C where C is a category is equivalent to the category of functors from the free cat on J to C, so this sounds reasonable!</p>",
        "id": 233998754,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618098211
    },
    {
        "content": "<p>I'm a little tempted to introduce semicategories and semifunctors (no mention of identities) at some point. I think that karoubi (=idempotent) completion has some nice property when thought of as sending semicategories to categories. (Right adjoint to forgetting identities?) Semicategories are occasionally useful, e.g. in geometric field theory where every slice of spacetime has non-zero thickness. But not something we're going to get to anytime soon!</p>",
        "id": 234010004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618110353
    }
]