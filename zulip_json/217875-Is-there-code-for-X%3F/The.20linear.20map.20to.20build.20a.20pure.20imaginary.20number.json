[
    {
        "content": "<p>Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">complex.of_imag</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">⟩,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 244085722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624829102
    },
    {
        "content": "<p>I can get there with <code>linear_map.to_span_singleton ℝ _ complex.I</code>, but the  definitional unfolding is worse.</p>",
        "id": 244085729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624829112
    },
    {
        "content": "<p>Can you compose <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.of_real_am\">docs#complex.of_real_am</a> with the <code>restrict_scalars</code> of the multiplication-by-<code>I</code> linear map?</p>",
        "id": 244085824,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1624829268
    },
    {
        "content": "<p>I'm not sure that really ends up much better. Maybe there's no reason to want <code>⟨0, r⟩</code> definitionally anyway.</p>",
        "id": 244086098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624829622
    },
    {
        "content": "<p>What do you want it for?</p>",
        "id": 244086154,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1624829666
    },
    {
        "content": "<p>As an argument to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/clifford_algebra.lift\">docs#clifford_algebra.lift</a> to construct <code>clifford_algebra Q ≃ₐ[ℝ] ℂ</code> where <code>Q = -quadratic_form.lin_mul_lin linear_map.id linear_map.id</code></p>",
        "id": 244086186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624829720
    },
    {
        "content": "<p>I don't have a particular reason for needing the definitional equality, I just thought it might help</p>",
        "id": 244086209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624829763
    },
    {
        "content": "<p>So far I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.clifford_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">clifford_algebra_complex.Q</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">-</span><span class=\"n\">quadratic_form.lin_mul_lin</span> <span class=\"n\">linear_map.id</span> <span class=\"n\">linear_map.id</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">clifford_algebra_complex.Q_apply</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">clifford_algebra_complex.Q</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">clifford_algebra_complex</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">clifford_algebra_complex</span> <span class=\"o\">:</span> <span class=\"n\">clifford_algebra</span> <span class=\"n\">clifford_algebra_complex.Q</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">clifford_algebra</span> <span class=\"n\">Q</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">clifford_algebra.lift</span> <span class=\"n\">Q</span> <span class=\"o\">⟨</span><span class=\"n\">linear_map.to_span_singleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">complex.I</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">linear_map.to_span_singleton</span><span class=\"o\">,</span> <span class=\"n\">linear_map.id</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_mul_smul</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩</span> <span class=\"k\">in</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">clifford_algebra.ι</span> <span class=\"n\">Q</span> <span class=\"n\">z.im</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">linear_map.to_span_singleton</span><span class=\"o\">],</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">linear_map.to_span_singleton</span><span class=\"o\">],</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 244086237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624829774
    },
    {
        "content": "<p>I guess my question is, which is the most canonical spelling: <code>↑r * complex.I</code>, <code>r • complex.I</code>, or <code>⟨0, r⟩</code>?</p>",
        "id": 244086912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624830851
    }
]