[
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/order/absolute_value.html#absolute_value.le_sub\"><code>absolute_value.le_sub</code></a>.  Is there a reason there isn't <code>absolute_value.le_add</code>?</p>",
        "id": 319298978,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672788954
    },
    {
        "content": "<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/absolute_value.add_le\">docs#absolute_value.add_le</a>?</p>",
        "id": 319299631,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1672789313
    },
    {
        "content": "<p>No, I want <code>abv a - abv b ≤ abv (a + b)</code>.</p>",
        "id": 319299776,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672789392
    },
    {
        "content": "<p>Just rearrange the triangle inequality?</p>",
        "id": 319300131,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672789583
    },
    {
        "content": "<p>Yes, I know how to prove it, but I need it as a lemma to do apply_rules.  Should I send a PR, or does it exist somewhere that I didn’t notice?</p>",
        "id": 319300608,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672789890
    },
    {
        "content": "<p>Oh I see...</p>",
        "id": 319300956,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672790148
    },
    {
        "content": "<p>Is it possible to pass a term to <code>apply_rules</code>? I don't remember. If so, just pass in the term for the proof using g the usual triangle inequality</p>",
        "id": 319301029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672790187
    },
    {
        "content": "<p>My intuition with inequality proofs (on paper as well as in Lean) is to arrange them in such a way that there is no negation.  I suspect metaprogramming will also be more convenient if you keep to this rule.  So, can you phrase your intended proofs to involve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abv</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">abv</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>instead?</p>",
        "id": 319301036,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672790191
    },
    {
        "content": "<p>Why does that logic not apply to le_sub?</p>",
        "id": 319301736,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672790616
    },
    {
        "content": "<p>Well, in fact, I would probably also reorganize to avoid <code>le_sub</code> :)</p>",
        "id": 319303367,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672791667
    }
]