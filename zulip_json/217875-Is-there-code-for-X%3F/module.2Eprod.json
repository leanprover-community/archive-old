[
    {
        "content": "<p>I see <code>submodule.prod</code> but not <code>module.prod</code>...?</p>",
        "id": 288815175,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1657204843
    },
    {
        "content": "<p>the type-theoretic product should get a module instance for free</p>",
        "id": 288815689,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657205062
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.module\">docs#prod.module</a></p>",
        "id": 288816006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657205201
    },
    {
        "content": "<p>How do I get this to work? I just want to define a vector space <code>W=V×V'</code> and a map from an endomorphism of <code>V</code> to one on <code>W</code> (which does nothing on <code>V'</code>).  Help please? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"n\">V</span> <span class=\"n\">V'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_component_injection</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">module.End</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">module.End</span> <span class=\"n\">ℂ</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288818187,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1657206029
    },
    {
        "content": "<p>It doesn't accept <code>module.End ℂ W</code>...</p>",
        "id": 288818289,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1657206065
    },
    {
        "content": "<p>I was hoping to be able to write <code>def W := V.prod V'</code> but that doesn't work...</p>",
        "id": 288818355,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1657206098
    },
    {
        "content": "<p>If you make <code>W</code> <code>@[reducible]</code> then it will work</p>",
        "id": 288818759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657206249
    },
    {
        "content": "<p>By using <code>def</code> you're saying \"make a new thing called <code>W</code> which by default lean knows nothing about\"</p>",
        "id": 288818811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657206275
    },
    {
        "content": "<p>Of course, what you'll find next is that when you write <code>W</code>, lean won't be able to guess what <code>V</code> and <code>V'</code> are</p>",
        "id": 288818913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657206323
    },
    {
        "content": "<p>Forcing you to write <code>@W V V' _ _ _ _ _ _</code> instead...</p>",
        "id": 288818977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657206350
    },
    {
        "content": "<p>Sorry can you explain further? What's the recommended way to define <code>W</code>?</p>",
        "id": 288819436,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1657206532
    },
    {
        "content": "<p>This still gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"n\">V</span> <span class=\"n\">V'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_component_injection</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">module.End</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">module.End</span> <span class=\"n\">ℂ</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288819489,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1657206553
    },
    {
        "content": "<p>If <code>V</code> and <code>V'</code> are really variables and not some specific type, then I don't think you want to define <code>W</code> at all (because at best you'd have to write it <code>W V V'</code>, and that's harder to read than <code>V × V'</code>)</p>",
        "id": 288819607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657206593
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">first_component_injection</span> <span class=\"o\">:</span>\n  <span class=\"n\">module.End</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">module.End</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288819710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657206621
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 288819884,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1657206701
    },
    {
        "content": "<p>Your other options is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">first_component_injection</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">module.End</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">module.End</span> <span class=\"n\">ℂ</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which reads much more like the mathematics, but probably ends up being annoying later (I think mathlib almost never does this).</p>",
        "id": 288819970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657206724
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">W</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span>\n</code></pre></div>\n<p>is a nice way to get shorthand</p>",
        "id": 288823785,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657208325
    },
    {
        "content": "<p>I think you need <code>local notation </code>W<code> := V × V'</code> if you refer to local variables.</p>",
        "id": 288881129,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657238030
    }
]