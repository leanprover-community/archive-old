[
    {
        "content": "<p>Hello, can someone please help me get this to typecheck? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.measure_space</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measurable_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pm_one_space</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"bp\">↥</span><span class=\"n\">pm_one_space</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">meas_pm</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">pm_one_space</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">measurable_set</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306274594,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1666800157
    },
    {
        "content": "<p>You need to take the 1 in <code>pm_one_space</code>, by showing 1 is a mem of this space</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.measure_space</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measurable_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pm_one_space</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"bp\">↥</span><span class=\"n\">pm_one_space</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">meas_pm</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">pm_one_space</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">measurable_set</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{⟨(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pm_one_space</span><span class=\"o\">]⟩})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306275219,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666800318
    },
    {
        "content": "<p>You might find that <code> ℤˣ</code> is more convenient than your <code>pm_one_space</code>; for one, it comes with a group structure</p>",
        "id": 306300162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666807596
    },
    {
        "content": "<p>It makes some things much nicer, thanks! But now I'm stuck on this??</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.measure_space</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measurable_space</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">meas_pm</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_coe</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306331168,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1666817722
    },
    {
        "content": "<p><code>simp</code> finishes it for me</p>",
        "id": 306331780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666817954
    },
    {
        "content": "<p>and <code>squeeze_simp</code> tells me that <code>exact units.coe_eq_one,</code> works too.</p>",
        "id": 306331951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666818007
    },
    {
        "content": "<p>Argh! Thanks. I'd tried <code>simp</code> at first (that's the leading <code>simp only</code>), then <code>norm_cast</code>; for some reason assumed <code>simp</code> wouldn't finish it if it hadn't already.</p>",
        "id": 306333189,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1666818488
    },
    {
        "content": "<p>The thing about the cast lemmas is that you sometimes want to push the coercions inwards and sometimes outwards. It's not clear which is simpler out of \\u(1+x) and 1+\\u(x), so it's not clear whether a lemma saying they're equal should be a simp lemma or not. We have <code>norm_cast</code> pushing one way and <code>push_cast</code> pushing the other way, and these tactics know lemmas which <code>simp</code> doesn't (and apply them in different directions). This means that <code>simp</code> and the cast lemmas can solve a different set of goals.</p>",
        "id": 306333666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666818704
    }
]