[
    {
        "content": "<p>I've realised I can work around needing this, so I don't think I'm going to prove this for my current project, but I'm curious if we have something that quickly proves:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.total_ne_total_of_support_sdiff_support</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span> <span class=\"bp\">\\</span> <span class=\"n\">g.support</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finsupp.total</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 241864586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623119644
    },
    {
        "content": "<p>I guess one just shows <code>x ∈ (f - g).support</code>, and linearity of <code>finsupp.total</code>.</p>",
        "id": 241864621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623119713
    },
    {
        "content": "<p><code>finsupp.total</code> is linear by definition, right?</p>",
        "id": 241864633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623119746
    },
    {
        "content": "<p>Yes</p>",
        "id": 241864684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623119781
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.total_ne_total_of_support_sdiff_support</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span> <span class=\"bp\">\\</span> <span class=\"n\">g.support</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finsupp.total</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hv.total_equiv.injective</span> <span class=\"o\">(</span><span class=\"n\">subtype.ext</span> <span class=\"n\">H</span><span class=\"o\">)]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241868885,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623125582
    },
    {
        "content": "<p>kawow! :-)</p>",
        "id": 241870600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623128007
    },
    {
        "content": "<p>Quite surprising that the proof doesn't mention <code>x</code></p>",
        "id": 241873791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623131991
    }
]