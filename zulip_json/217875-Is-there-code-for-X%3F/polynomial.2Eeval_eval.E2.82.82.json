[
    {
        "content": "<p>Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.eval_eval₂</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>We have <code>polynomial.eval₂_comp</code> but it's composing p's not f's.</p>",
        "id": 265507051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639957414
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.hom\">docs#polynomial.hom</a>_eval₂</p>",
        "id": 265508539,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639959412
    },
    {
        "content": "<p>come on linkifier...</p>",
        "id": 265508550,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639959435
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/polynomial/eval.html#polynomial.hom_eval%E2%82%82\">https://leanprover-community.github.io/mathlib_docs/data/polynomial/eval.html#polynomial.hom_eval%E2%82%82</a></p>",
        "id": 265508552,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639959443
    },
    {
        "content": "<p><code>rw [←eval₂_map, eval₂_at_apply, eval_map],</code></p>",
        "id": 265508680,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639959641
    },
    {
        "content": "<p>want to PR that golf Thomas? the current proof is ridiculous ;b</p>",
        "id": 265508938,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639959892
    },
    {
        "content": "<p>Already on it!</p>",
        "id": 265509245,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639960006
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10920\">#10920</a></p>",
        "id": 265509344,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639960182
    },
    {
        "content": "<p>What? Why did <code>library_search</code> not find it for me?</p>",
        "id": 265510393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639961381
    },
    {
        "content": "<p>Maybe because the mathlib version currently assumes <code>comm_semiring</code>?</p>",
        "id": 265510444,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639961431
    },
    {
        "content": "<p>Oh I'm apparently missing <code>comm_</code> assumptions. Thanks!</p>",
        "id": 265510478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639961500
    },
    {
        "content": "<p>(but notice the new proof in <a href=\"https://github.com/leanprover-community/mathlib/pull/10920\">#10920</a> drops the <code>comm_</code> assumptions)</p>",
        "id": 265510982,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639962140
    }
]