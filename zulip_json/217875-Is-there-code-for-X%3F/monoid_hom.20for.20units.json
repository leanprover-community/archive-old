[
    {
        "content": "<p>I would like to be able to access the monoid_hom structure for the coercion of <code>units M</code> to <code>M</code>. Does this exist?</p>",
        "id": 250885206,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630042007
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">units_hom.lean</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">coe_hom</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"n\">coe_one</span><span class=\"o\">,</span> <span class=\"n\">coe_mul</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 250885930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630042813
    },
    {
        "content": "<p>Just search for <code>units.*→[*]</code>. The output isn't too long.</p>",
        "id": 250885971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630042880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monoid_hom.20for.20units/near/250885971\">said</a>:</p>\n<blockquote>\n<p>Just search for <code>units.*→[*]</code>. The output isn't too long.</p>\n</blockquote>\n<p>Can you explain what you mean by this?</p>",
        "id": 250886090,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630043007
    },
    {
        "content": "<p>Is this some search technique I can use to find things more easily in the future? Where do I enter that search term?</p>",
        "id": 250886222,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630043137
    },
    {
        "content": "<p>Johan is just suggesting you use the search functionality in VSCode. It accepts regular expressions.</p>",
        "id": 250886580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630043507
    },
    {
        "content": "<p>Thus <code>units.*→[*]</code> will find any line in mathlib which contains <code>units</code>, then any string of characters, then <code>→*</code>.</p>",
        "id": 250886648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630043540
    },
    {
        "content": "<p>(He's used the brackets to create a character range, so the last <code>*</code> is literally an asterisk, rather than a regex modifier.)</p>",
        "id": 250886702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630043579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> <a href=\"https://xkcd.com/208/\">https://xkcd.com/208/</a></p>",
        "id": 250886748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630043625
    },
    {
        "content": "<p>I see, I am not too familiar with regex, and I didn't recognize the above as a regex with an escaped asterisk. Thanks very much!</p>",
        "id": 250886974,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630043826
    },
    {
        "content": "<p>Another potential solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.units_hom</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>Note that you have to have the right imports open for this to work! But often you're lucky as the relevant file has already been imported because of the definitions you're working with.</p>",
        "id": 250887480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630044256
    },
    {
        "content": "<p>Indeed, I tried using library_search, but didn't find it that way. I don't think it was because of a missing import though, because <code>hom_coe</code> itself was found just fine. Let me investigate.</p>",
        "id": 250888031,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630044760
    },
    {
        "content": "<p>I think I wrote it without the <code>by</code> actually. My bad.</p>",
        "id": 250888321,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630045042
    }
]