[
    {
        "content": "<p>If memory serves, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> decided to jettison universes at some point in a development because he didn't have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> in universe <code>u</code> so everything went into <code>Type</code>.</p>\n<p>There is this glue which holds Breen-Deligne universal maps together in the liquid experiment, and I was idly formalising an \"easy\" part of it today, but then realised that I needed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> in universe <code>u</code>. I started on it and it didn't go well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ℤ in universe u</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intu</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℤ</span><span class=\"bp\">ᵤ`</span> <span class=\"o\">:=</span> <span class=\"n\">intu</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">intu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ulift</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  a + b</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  b</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  intu.{u_2} : Type u_2</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  intu.{u_1} : Type u_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I only need it as an <code>add_comm_group</code> so I might just go with <code>free_abelian_group (punit.{u})</code> or something. But this is going to bite us at some point, because we don't have cumulative universes. I don't fancy proving <code>add_comm_group ℤᵤ</code>. Am I right in thinking that there is no machine which will do this for us, so if someone wants the naturals in universe <code>u</code> with all its bells and whistles then basically they have to play the natural number game, they can't get it from what we have?</p>\n<p>If this <code>free_abelian_group (punit)</code> trick doesn't work (note : I strongly suspect it will) then when gluing the liquid tensor stuff to the Breen-Deligne resolution we would have to stick to <code>Type</code>, which would mean that all our profinite sets will be in <code>Type</code>, which is of course what happens in the paper in practice (at least as far as I can see) but it would basically be bye-bye universes for the entire development.</p>",
        "id": 224660031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612120890
    },
    {
        "content": "<p>Oh Adam has come up with a one-liner using <code>transfer</code> :D</p>",
        "id": 224662934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612124978
    },
    {
        "content": "<p>Regarding just the error message, the problem was that you didn't constrain <code>a</code> and <code>b</code> to use <code>ℤᵤ</code> from the same universe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">intu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ulift</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">intu</span>\n</code></pre></div>\n<p>(Not sure if I messed anything up switching to an abbreviation from notation, but this let me write the <code>.{u}</code>)</p>",
        "id": 224664071,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612126455
    },
    {
        "content": "<p>Or another way to write it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵤ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">a'</span> <span class=\"bp\">←</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">b'</span> <span class=\"bp\">←</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">+</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224664656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612127180
    },
    {
        "content": "<p>OOOOOHHHH <code>ulift</code> is a monad?!</p>",
        "id": 224665458,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612128256
    },
    {
        "content": "<p>Am I missing an import <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ? Your code doesn't work for me.</p>",
        "id": 224665550,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612128374
    },
    {
        "content": "<p><del><code>import data.ulift</code></del> yes</p>",
        "id": 224665559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612128398
    },
    {
        "content": "<p>There is already <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift.has_add\">docs#ulift.has_add</a> btw</p>",
        "id": 224665861,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612128833
    },
    {
        "content": "<p>(Or instead of monads, <code>def add (a b : ℤᵤ) : ℤᵤ := (+) &lt;$&gt; a &lt;*&gt; b</code> if you're a fan of applicative functors.)  Is there an <code>applicative.map₂</code> if I want to do <del>pointless</del> point-free style?</p>",
        "id": 224666213,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612129311
    }
]