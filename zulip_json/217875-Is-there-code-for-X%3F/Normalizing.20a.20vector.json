[
    {
        "content": "<p>Do we have this anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">normalize_vector</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 286189644,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655286919
    },
    {
        "content": "<p>I don't see it. I note it is inlined in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gram_schmidt_normed\">docs#gram_schmidt_normed</a></p>",
        "id": 286189841,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655287029
    },
    {
        "content": "<p>Yes, exactly. The context is <a href=\"https://github.com/leanprover-community/mathlib/pull/14514\">#14514</a></p>",
        "id": 286189873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655287050
    },
    {
        "content": "<p>I'm particularly interested in the fact that <code>span 𝕜 {normalize_vector x} = span 𝕜 {x}</code>.</p>",
        "id": 286189914,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655287083
    },
    {
        "content": "<p>and more generally <code>span 𝕜 (normalize_vector '' s) = span 𝕜 s</code>.</p>",
        "id": 286190428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655287346
    },
    {
        "content": "<p>Does this deserve its own definition? I want to say yes, because it already is used in more specific contexts.</p>",
        "id": 286190521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655287411
    },
    {
        "content": "<p>I'd lean in favour.</p>",
        "id": 286190675,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655287516
    },
    {
        "content": "<p>Is there more general statement that <code>span 𝕜 {k • x} = span 𝕜 {x}</code> when <code>k</code> is not 0?</p>",
        "id": 286196001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655290905
    },
    {
        "content": "<p>This is not more general because <code>∥x∥⁻¹ = 0</code> when <code>x = 0</code>. Says the pedant.</p>",
        "id": 286196321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655291143
    },
    {
        "content": "<p>Yes, I precisely want to avoid casing on whether <code>x</code> is zero or not.</p>",
        "id": 286197530,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655291959
    }
]