[
    {
        "content": "<p>Sometimes you have a goal and a hypothesis that share a prefix of quantifiers.  As a contrived illustration,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I was wondering if there was a tactic, invoked like <code>auto_use h</code>, that would automatically produce this sequence of tactics:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Perhaps it might even be able to apply cases on other inductive types when one of the cases can be <code>use</code>d.  For example, with a slight alteration to the above example (applying commutativity to the conjunction), it might produce the following proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>While it's true you can compress this proof, the point is to show the intended effect of the tactic.</p>\n<p>That's a sort of imperative description of the wanted tactic, but put another way the idea would be to enter the \"shared context\" implied by a goal and a hypothesis.</p>\n<p>(Tagging <span class=\"user-mention\" data-user-id=\"304588\">@Rahul Dalal</span> because we discussed this at the Berkeley Lean Seminar.)</p>",
        "id": 203767478,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594672508
    },
    {
        "content": "<p><code>tidy</code> is probably the closest to what you want...</p>",
        "id": 203767683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594672602
    },
    {
        "content": "<p>But it's more general, and hence also more conservative.</p>",
        "id": 203767705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594672616
    },
    {
        "content": "<p>I guess this question comes a place of wanting a tactic where you know what it will do and it's safe to use in the middle of a proof.</p>\n<p>I was going to say that <code>tidy</code> certainly would deal with the second example, but I decided to check, and it actually makes a bit of a mess of the context.  Maybe this is a bug in <code>tidy</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">β</span>\n\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 203768054,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594672787
    },
    {
        "content": "<p>What does <code>tidy?</code> say?</p>",
        "id": 203768277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594672893
    },
    {
        "content": "<p>I think <code>tidy</code> isn't really good at apply <code>cases</code> apart from some very specialised examples.</p>",
        "id": 203768358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594672923
    },
    {
        "content": "<p>At least with the examples you gave, it will make a nice tactic writing exercise.</p>",
        "id": 203768589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594673036
    },
    {
        "content": "<p>I'm surprised we don't already have a lemma like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">forall_imp</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tidy</span>\n</code></pre></div>\n\n\n<p>Then you can use this strategy:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_imp</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists_imp_exists</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ p a_1 ∧ q a a_1 → q a a_1</span>\n  <span class=\"n\">tauto</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203769122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594673289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Sounds good. I'll give it a try.</p>",
        "id": 203769171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594673316
    },
    {
        "content": "<p>Also I wonder whether it could be in scope for <code>mono</code>.</p>",
        "id": 203769196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594673326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Automatic.20intro.2Fcases.2Fspecialize.2Fuse.20dance/near/203768277\">said</a>:</p>\n<blockquote>\n<p>What does <code>tidy?</code> say?</p>\n</blockquote>\n<p>It gives <code>intros x, dsimp at *, fsplit</code></p>",
        "id": 203769244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594673349
    },
    {
        "content": "<p>I was about to suggest <code>forall_imp</code>. Shocking that it does not exist...</p>",
        "id": 203769630,
        "sender_full_name": "David Wärn",
        "timestamp": 1594673528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That's fair, but it was just a contrived example.  I don't have any real examples on hand, but I've found myself doing this sort of dance in various contexts, and Rahul was saying he was doing it with even more deeply nested quantifiers. (However, in his case, it turned out to be something like <code>simp_rw [forall_and_distrib]</code>, if I remember correctly.)</p>",
        "id": 203770011,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594673729
    },
    {
        "content": "<p>Should I add <code>forall_imp</code> to mathlib?</p>",
        "id": 203770120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594673767
    },
    {
        "content": "<p>If you want to prove <code>iff</code> rather than an implication the support is slightly better, but still not so great</p>",
        "id": 203770133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594673772
    },
    {
        "content": "<p>(for example, <code>forall_congr</code> actually exists!)</p>",
        "id": 203770985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594674189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Lean has the non-dependent version of <code>forall_imp</code> already: <code>combinator.S</code>. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 203772784,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594675123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Ok, created a pull request <a href=\"https://github.com/leanprover-community/mathlib/issues/3391\">#3391</a></p>",
        "id": 203773357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594675406
    },
    {
        "content": "<p>I didn't notice that the proof is laughing at the situation: <code>λ h' a, h a (h' a)</code>.</p>",
        "id": 203773575,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594675497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Automatic.20intro.2Fcases.2Fspecialize.2Fuse.20dance/near/203768589\">said</a>:</p>\n<blockquote>\n<p>At least with the examples you gave, it will make a nice tactic writing exercise.</p>\n</blockquote>\n<p>That was kind of fun figuring out how to get this to work.  I mostly looked carefully at the code for <code>use</code>, <code>specialize</code>, <code>intro</code>, and <code>cases</code> and combined them into a single <code>enter</code> tactic.  An example application of the tactic is this tutorial exercise:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- 0073</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">seq_continuous_of_continuous</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">,</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">δ</span> <span class=\"n\">δpos</span> <span class=\"n\">at</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">nbig</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>What <code>enter hf with ε εpos</code> does is look at the quantifiers in <code>hf</code> and the goal and give them the names <code>ε</code> and <code>εpos</code> while doing the appropriate actions to eliminate the quantifiers.  The <code>enter hf with δ δpos at hu</code> does something similar, but for two hypotheses <code>hf</code> and <code>hu</code> (this is a non-standard <code>at</code> where only a single hypothesis may be mentioned).  The number of identifiers mentioned in the <code>with</code> clause determines how many quantifiers to eliminate.</p>\n<p>The code follows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">enter_aux_use</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">focus1</span> <span class=\"err\">$</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">done</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">fconstructor</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">enter_aux_use</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">enter_get_local</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">get_local</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"n\">format</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"o\">[</span><span class=\"s2\">&quot;enter failed: no such local &#39;&quot;</span><span class=\"o\">,</span> <span class=\"n\">to_fmt</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"s2\">&quot;&#39;&quot;</span><span class=\"o\">])</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The implementation of `enter` for a hypothesis and the goal.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">enter_aux</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">nh</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">nh</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">::</span> <span class=\"n\">ids</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">enter_get_local</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e_intro</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">note</span> <span class=\"n\">nh</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n    <span class=\"n\">try</span> <span class=\"err\">$</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">nh</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">e_cases</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"o\">[(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h&#39;&#39;</span><span class=\"o\">])]</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nh</span><span class=\"o\">],</span>\n    <span class=\"n\">enter_aux_use</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">h&#39;&#39;</span><span class=\"bp\">.</span><span class=\"n\">local_pp_name</span><span class=\"o\">),</span>\n  <span class=\"n\">h&#39;&#39;</span> <span class=\"err\">←</span> <span class=\"n\">e_intro</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">e_cases</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"n\">format</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"o\">[</span><span class=\"s2\">&quot;enter failed: could not use identifier &#39;&quot;</span><span class=\"o\">,</span> <span class=\"n\">to_fmt</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"s2\">&quot;&#39;&quot;</span><span class=\"o\">]),</span>\n  <span class=\"n\">enter_aux</span> <span class=\"n\">h&#39;&#39;</span> <span class=\"n\">ids</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The implementation of `enter` for two hypotheses.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">enter_at_aux</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">nh</span> <span class=\"n\">nh&#39;</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">nh</span> <span class=\"n\">nh&#39;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">::</span> <span class=\"n\">ids</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e_cases</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">nh</span> <span class=\"n\">nh&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">enter_get_local</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n    <span class=\"n\">h&#39;</span> <span class=\"err\">←</span> <span class=\"n\">enter_get_local</span> <span class=\"n\">nh&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">[(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h&#39;&#39;</span><span class=\"o\">])]</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nh</span><span class=\"o\">],</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">note</span> <span class=\"n\">nh&#39;</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n    <span class=\"n\">try</span> <span class=\"err\">$</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span><span class=\"bp\">.</span><span class=\"n\">local_pp_name</span><span class=\"o\">,</span> <span class=\"n\">nh&#39;</span><span class=\"o\">)),</span>\n  <span class=\"o\">(</span><span class=\"n\">nh</span><span class=\"o\">,</span> <span class=\"n\">nh&#39;</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">e_cases</span> <span class=\"n\">nh</span> <span class=\"n\">nh&#39;</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">e_cases</span> <span class=\"n\">nh&#39;</span> <span class=\"n\">nh</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"n\">format</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"o\">[</span><span class=\"s2\">&quot;enter failed: could not use identifier &#39;&quot;</span><span class=\"o\">,</span> <span class=\"n\">to_fmt</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"s2\">&quot;&#39;&quot;</span><span class=\"o\">]),</span>\n  <span class=\"n\">enter_at_aux</span> <span class=\"n\">nh</span> <span class=\"n\">nh&#39;</span> <span class=\"n\">ids</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">`enter h with a₁ a₂ .. aₙ` takes a prefix of n quantifiers shared</span>\n<span class=\"cm\">by `h` and the goal and, effectively, uses `intro`, `specialize`,</span>\n<span class=\"cm\">`cases`, and `use` to enter the shared context.  The supplied</span>\n<span class=\"cm\">identifiers determine how many quantifiers to enter.</span>\n\n<span class=\"cm\">`enter h` does `enter h with a`, choosing a fresh identifier `a` for</span>\n<span class=\"cm\">you.</span>\n\n<span class=\"cm\">`enter h (with a₁ a₂ .. aₙ)? at h&#39;` performs a similar effect between</span>\n<span class=\"cm\">hypotheses `h` and `h&#39;`, where h&#39; is as if it is the `push_neg` of a</span>\n<span class=\"cm\">goal.  That is to say existential quantifiers of `h` or `h&#39;` are used</span>\n<span class=\"cm\">to specialize a universal quantifier of the other.</span>\n\n<span class=\"cm\">A &quot;quantifier&quot; is any pi (Π, ∀, or →) or any single-constructor</span>\n<span class=\"cm\">inductive type with two arguments (∃, sigma, ∧, etc.).</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">enter</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span> <span class=\"bp\">→</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"err\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">&quot;at&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"s2\">&quot;a&quot;</span><span class=\"o\">,</span>\n             <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">ids</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">propagate_tags</span> <span class=\"err\">$</span> <span class=\"n\">enter_aux</span> <span class=\"n\">h</span> <span class=\"n\">ids</span>\n<span class=\"bp\">|</span> <span class=\"n\">ids</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">propagate_tags</span> <span class=\"err\">$</span> <span class=\"n\">enter_at_aux</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span> <span class=\"n\">ids</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lim_infinity</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lim_infinity</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lim_infinity</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_mul_self</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Continuity of a function at a point  -/</span>\n<span class=\"n\">def</span> <span class=\"n\">continuous_at_pt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"n\">def</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- 0073</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">seq_continuous_of_continuous</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">,</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">δ</span> <span class=\"n\">δpos</span> <span class=\"n\">at</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">nbig</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203997071,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594839163
    },
    {
        "content": "<p><del>How about syntax like <code>enter hf with δ δpos using hu</code>?</del><br>\nNever mind, I see how <code>hf</code> is partially <code>enter</code>ed.<br>\nThen what about <code>enter hf ... using hu</code>?</p>",
        "id": 203999207,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594840156
    },
    {
        "content": "<p>Oh, so <code>enter ID ID_LIST (using ID)?</code>? That seems better.</p>",
        "id": 203999563,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594840340
    },
    {
        "content": "<p><code>enter hf with x y {with,using} hu</code> assigns <code>x, y</code> gets quantifiers from <code>hf</code> and specializes at <code>hu</code>. Or you can phrase it like \"using hf, specialize hu\".</p>",
        "id": 203999725,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594840436
    },
    {
        "content": "<p>so either <code>... at ...</code> or <code>... using ...</code> could work, one would just have to be cognizant of what's used for what.</p>",
        "id": 203999817,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594840469
    },
    {
        "content": "<p>The way it's implemented is that it's symmetric in <code>hf</code> and <code>hu</code>, so it's a bit unfortunate that's not reflected in the tactic syntax.</p>",
        "id": 204000056,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594840587
    },
    {
        "content": "<p>Maybe that would allow for </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">enter</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"n\">δ</span> <span class=\"n\">δpos</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">nbig</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>where it will enter as far as possible on existential, then use the available <code>using</code> hypotheses for the quantified, etc.</p>",
        "id": 204000059,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594840588
    },
    {
        "content": "<p>That's an interesting generalization.  The only objection I'd have is that you might sometimes want to <em>not</em> consider the goal at all, but then for that you might use</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">enter</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"n\">δ</span> <span class=\"n\">δpos</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">nbig</span> <span class=\"kn\">using</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 204000650,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594840895
    },
    {
        "content": "<p>Right, I was ignoring the goal entirely.</p>",
        "id": 204000734,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594840928
    },
    {
        "content": "<p>Oh, I thought you were saying \"try entering the shared context with the goal, and whenever that fails try doing it with the first in the <code>using</code> list that would succeed\"</p>",
        "id": 204000827,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594840985
    },
    {
        "content": "<p>I guess my assumption was <code> ... using </code> would ignore the goal by default, and goal could be included with notation for the goal</p>",
        "id": 204001064,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594841112
    },
    {
        "content": "<p>So either your option with <code>only</code> or explicit goal inclusion when the syntax is <code>using [...]</code></p>",
        "id": 204001106,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594841137
    }
]