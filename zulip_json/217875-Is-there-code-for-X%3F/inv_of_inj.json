[
    {
        "content": "<p>Dear All,</p>\n<p>Lean gave me a hard time proving the result below, but I would imagine that it should already be available in some form or other.</p>\n<p>Does anyone know of a simpler proof?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_of_inj</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⅟</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">invertible_unique</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">unfreezingI</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">is_unit_of_invertible</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">au</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">is_unit_of_invertible</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bu</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_of_units</span><span class=\"o\">,</span> <span class=\"n\">inv_of_units</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">inv_inv</span> <span class=\"n\">au</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">inv_inv</span> <span class=\"n\">bu</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inv_inj.mpr</span> <span class=\"o\">(</span><span class=\"n\">units.ext</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281520710,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651901089
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_of_inj</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⅟</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">invertible_unique</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">inv_of_inv_of</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">inv_of_inv_of</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">invertible_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281527195,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651910956
    },
    {
        "content": "<p>Thanks for the golfing!  Should I PR it?</p>",
        "id": 281527433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651911394
    },
    {
        "content": "<p>Yes, please do! It should go right after <code>invertible_unique</code> (and can be <code>simp</code>).</p>",
        "id": 281531592,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651917450
    },
    {
        "content": "<p>Ok, I'll do that once I'm back at a computer!</p>",
        "id": 281531648,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651917511
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14011\">#14011</a></p>",
        "id": 281541513,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651931313
    },
    {
        "content": "<p>It turns out that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">invertible_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">invertible_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>is also a proof.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <br>\nYet another fine example of proof by obfuscation.</p>\n<p>(In case anyone is wondering, I tried removing the <code>λ h, ... h</code> but even Lean thinks that this is too obscure.)</p>",
        "id": 281549225,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651941846
    },
    {
        "content": "<p>That's because the <code>a = b</code> argument comes before the <code>[invertible a] [invertible b]</code> arguments in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/invertible_unique\">docs#invertible_unique</a></p>",
        "id": 281549474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651942250
    },
    {
        "content": "<p>They should probably be swapped around.</p>",
        "id": 281549479,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651942264
    },
    {
        "content": "<p>If this is desirable, I can do it in this PR: I already made an argument in a different lemma explicit...</p>",
        "id": 281549770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651942726
    },
    {
        "content": "<p>It seems that <code>invertible_unique</code> is uniquely used in mathlib.  And with <code>@</code>!</p>",
        "id": 281549842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651942805
    },
    {
        "content": "<p>Yaël, I went ahead, swapped the arguments and golfed the proof further.</p>",
        "id": 281550539,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651943733
    }
]