[
    {
        "content": "<p>Is there a tactic that can pull let statements to the outermost scope such that they can be introd?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"c1\">-- is there a tactic that can do this for me?</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I want to get `x := 1` in the local context</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315577197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670934251
    },
    {
        "content": "<p>no</p>",
        "id": 315577725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670934427
    },
    {
        "content": "<p>A lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">apply_let</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">):</span>\n  <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>seems not to help, <code>rw</code> can't match it</p>",
        "id": 315579241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670934874
    },
    {
        "content": "<p>no, and you would be hard-pressed to make that work anyway since <code>f</code> can depend on the defeq <code>a' = a</code></p>",
        "id": 315579716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670935030
    },
    {
        "content": "<p>Is the defeq not avialable on both the LHS and RHS?</p>",
        "id": 315580759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670935373
    },
    {
        "content": "<p>Is this tactic broken for obvious reasons?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_local_lets</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.elet</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">v</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.definev</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">ps</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mk_local_lets</span> <span class=\"o\">(</span><span class=\"n\">expr.instantiate_var</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"n\">ps</span><span class=\"o\">),</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">fargs</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mk_local_lets</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">xargs</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mk_local_lets</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fargs</span> <span class=\"bp\">++</span> <span class=\"n\">xargs</span><span class=\"o\">,</span> <span class=\"n\">f.app</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">([],</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.lift_lets</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">lets</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mk_local_lets</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.change</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 315581119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670935488
    },
    {
        "content": "<p>it doesn't work for binders, but otherwise sure that works</p>",
        "id": 315584388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670936456
    },
    {
        "content": "<p>You mean for the types of binders?</p>",
        "id": 315587753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670937356
    },
    {
        "content": "<p>Or do you more generally mean extracting non-dependent lets?</p>",
        "id": 315587824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670937370
    }
]