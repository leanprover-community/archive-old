[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_of_eq_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is this in mathlib?</p>",
        "id": 258564883,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1634829546
    },
    {
        "content": "<p>It'd probably be under the injectivity of pow, given that the exponent is positive. Probably uses a hypothesis and not coerced pnats.</p>",
        "id": 258574743,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634833130
    },
    {
        "content": "<p>You need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_left_injective\">docs#nat.pow_left_injective</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_right_injective\">docs#nat.pow_right_injective</a></p>",
        "id": 258575025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634833218
    },
    {
        "content": "<p>You do need to assume prime, as the exponents are different, right? I don't see this exact lemma in mathlib, but hopefully there is enough things about (unique) factorization that the proof shouldn't be too hard!</p>",
        "id": 258575571,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634833423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/equal.20prime.20powers/near/258575025\">said</a>:</p>\n<blockquote>\n<p>You need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_left_injective\">docs#nat.pow_left_injective</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_right_injective\">docs#nat.pow_right_injective</a></p>\n</blockquote>\n<p>I am using pow_right_injective to prove n=n' after I have p=p', but i dont see how to prove p=p'</p>",
        "id": 258575742,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1634833485
    },
    {
        "content": "<p>I misread initally and thought some of the bases or exponents were the same.</p>",
        "id": 258575848,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634833524
    },
    {
        "content": "<p>Here is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.factors</span>\n<span class=\"kn\">open</span> <span class=\"n\">pnat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_eq_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hpp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_pow_self</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_zero</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hpp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hop</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span> <span class=\"n\">prime.dvd_of_dvd_pow</span> <span class=\"n\">hp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">∣</span> <span class=\"n\">p'</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_pow_self</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_zero</span> <span class=\"n\">n'</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hpp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hop'</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">prime.dvd_of_dvd_pow</span> <span class=\"n\">hp'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dvd_antisymm</span> <span class=\"n\">hop</span> <span class=\"n\">hop'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258578257,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634834408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/equal.20prime.20powers/near/258578257\">said</a>:</p>\n<blockquote>\n<p>Here is a proof:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.factors</span>\n<span class=\"kn\">open</span> <span class=\"n\">pnat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_eq_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hpp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_pow_self</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_zero</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hpp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hop</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span> <span class=\"n\">prime.dvd_of_dvd_pow</span> <span class=\"n\">hp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">∣</span> <span class=\"n\">p'</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_pow_self</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_zero</span> <span class=\"n\">n'</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hpp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hop'</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">prime.dvd_of_dvd_pow</span> <span class=\"n\">hp'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dvd_antisymm</span> <span class=\"n\">hop</span> <span class=\"n\">hop'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 258578467,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1634834511
    },
    {
        "content": "<p>Another proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.head_repeat</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">list.repeat</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">exacts</span> <span class=\"o\">[(</span><span class=\"n\">hn</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_eq_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">list.head</span> <span class=\"bp\">∘</span> <span class=\"n\">factors</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">prime.factors_pow</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hp'</span><span class=\"o\">,</span> <span class=\"n\">list.head_repeat</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258584990,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634837023
    },
    {
        "content": "<p>BTW, why <code>nat.factors</code> returns a list, not a <code>multiset</code>?</p>",
        "id": 258585244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634837121
    },
    {
        "content": "<p>I think it's sorted. Which might occasionally be useful, I guess.</p>",
        "id": 258586304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634837536
    },
    {
        "content": "<p>Another proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">open</span> <span class=\"n\">pnat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_eq_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hne</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">coprime_pow_primes</span> <span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"n\">hp</span> <span class=\"n\">hp'</span> <span class=\"n\">hne</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">coprime_self</span><span class=\"o\">,</span> <span class=\"n\">pow_eq_one_iff</span> <span class=\"o\">(</span><span class=\"n\">ne_zero</span> <span class=\"n\">n'</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">prime.ne_one</span> <span class=\"n\">hp'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">nat.linear_order</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ordered_comm_monoid.to_covariant_class_left</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I'm not sure I understand the necessity of both of the final <code>exact</code>s. Isn't <code>linear_order ℕ</code>, for one, a core fact?</p>",
        "id": 258588269,
        "sender_full_name": "Joanna Choules",
        "timestamp": 1634838390
    },
    {
        "content": "<p>Sometimes <code>rw</code> fails to find an instance  because the expression is only partially applied (don't know the details). You can close these goals by <code>apply_instance</code>.</p>",
        "id": 258592803,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634840083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.sort\">docs#multiset.sort</a></p>",
        "id": 258592890,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634840133
    },
    {
        "content": "<p>But you can't write a <code>@[simp]</code> lemma for <code>factors_pow</code> without extra assumptions unless <code>factors n : multiset nat</code> or <code>finset n : multiset primes</code>.</p>",
        "id": 258593122,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634840229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/equal.20prime.20powers/near/258585244\">said</a>:</p>\n<blockquote>\n<p>BTW, why <code>nat.factors</code> returns a list, not a <code>multiset</code>?</p>\n</blockquote>\n<p>There's a pnat multiset somewhere, I think as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prime_multiset\">docs#prime_multiset</a>. Pain in the ass to use though.</p>",
        "id": 258593194,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634840268
    },
    {
        "content": "<p>Why do we need a special type for <code>multiset primes</code>?</p>",
        "id": 258593348,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634840327
    },
    {
        "content": "<p>This way we can't apply <code>simp</code> lemmas about <code>multiset</code>.</p>",
        "id": 258593394,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634840353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/equal.20prime.20powers/near/258593194\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/equal.20prime.20powers/near/258585244\">said</a>:</p>\n<blockquote>\n<p>BTW, why <code>nat.factors</code> returns a list, not a <code>multiset</code>?</p>\n</blockquote>\n<p>There's a pnat multiset somewhere, I think as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prime_multiset\">docs#prime_multiset</a>. Pain in the ass to use though.</p>\n</blockquote>\n<p>I spent 5 mins trying to get that to work for this problem, but it was too annoying trying to coerce everything into pnat.</p>",
        "id": 258593449,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634840379
    },
    {
        "content": "<p>I said somewhere that these pnat files were currently useless because poorly integrated. We should refactor it all.</p>",
        "id": 258606762,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634846024
    }
]