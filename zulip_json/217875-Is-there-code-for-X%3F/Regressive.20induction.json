[
    {
        "content": "<p>Do we have this induction principle? If no, should I open a PR? I personally find this lemma very useful in many cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.regressive_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">set.infinite</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">k.succ</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"n\">imp_not_comm</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_infinite</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">set.finite_lt_nat</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subset</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_exists_add.mp</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₄</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hk</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">_</span> <span class=\"n\">h₄</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266982353,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641412411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> That seems useful, and I'd PR it. It's very nearly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.decreasing_induction\">docs#nat.decreasing_induction</a>, and you can connect it up to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.infinite.exists_nat_lt\">docs#set.infinite.exists_nat_lt</a> to simplify the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.decreasing_induction_on_of_infinite</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hinf</span> <span class=\"o\">:</span> <span class=\"n\">set.infinite</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hnk</span><span class=\"o\">,</span> <span class=\"n\">hpk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.infinite.exists_nat_lt</span> <span class=\"n\">hinf</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.decreasing_induction</span> <span class=\"n\">h</span> <span class=\"n\">hpk.le</span> <span class=\"n\">hnk</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I changed some variable names here and there to make it look like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.decreasing_induction\">docs#nat.decreasing_induction</a>)</p>",
        "id": 266989725,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641416094
    },
    {
        "content": "<p>API note: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.infinite\">docs#set.infinite</a> expects a <code>set</code>, not a predicate. I know that they're definitionally the same, but they're not syntactically the same, and when this is violated, you can run into some annoying expressions when proving things. That's why I changed the hypothesis to <code>set.infinite {n | P n}</code>.</p>",
        "id": 266989841,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641416161
    },
    {
        "content": "<p>A technical question: how to properly import <code>data.set.finite</code>? It seems to mess up the entire <code>data/nat/basic.lean</code> file.</p>",
        "id": 267231830,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641583644
    },
    {
        "content": "<p>Are you trying to import <code>data.set.finite</code> in <code>data.nat.basic</code>?</p>",
        "id": 267231980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641583725
    },
    {
        "content": "<p><code>data.nat.basic</code> is too low in the hierarchy for that.</p>",
        "id": 267232045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641583777
    },
    {
        "content": "<p>Oh, I see. <code>data.set.finite</code> seems to depend on <code>data.nat.basic</code></p>",
        "id": 267232197,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641583846
    },
    {
        "content": "<p>What is the right way to go then?</p>",
        "id": 267232223,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641583860
    },
    {
        "content": "<p>Move the induction principle to <code>data.set.finite</code>?</p>",
        "id": 267232292,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641583892
    },
    {
        "content": "<p>Put it in <code>data.set.finite</code></p>",
        "id": 267232299,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641583896
    },
    {
        "content": "<p>I'm curious, is <code>set.infinite</code> really a convenient hypothesis to check for this form of induction? I mean it will generally be math-obvious but maybe not so easy to prove in Lean</p>",
        "id": 267232630,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641584076
    },
    {
        "content": "<p>The best way to put it would be to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.at_top\">docs#filter.at_top</a>, because that's what you're really using: that in a set of naturals going to infinity any natural is less than some element.</p>",
        "id": 267232865,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641584202
    },
    {
        "content": "<p>Or just express the unboundedness directly <code>forall n, exists m &gt; n, P m</code>.</p>",
        "id": 267233627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641584619
    },
    {
        "content": "<blockquote>\n<p>Or just express the unboundedness directly <code>forall n, exists m &gt; n, P m</code>.</p>\n</blockquote>\n<p>Well, the proof of the induction principle then becomes so trivial, that it probably doesn't deserve a lemma (it's basically just <code>decreasing_induction</code>). The book I am using defines the \"regressive induction\" as:</p>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> be a proposition that depends on natural number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. if</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is true for infinitely many natural numbers and</li>\n<li>for all natural numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>⟹</mo><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(n+1)\\Longrightarrow P(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>,</li>\n</ul>\n<p>then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is true for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">n\\in\\mathbb N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>. Then they used it to prove the inequality of arithmetic and geometric means.</p>\n<p>If this induction principle is redundant, or too trivial for mathlib, I am perfectly ok with that.</p>",
        "id": 267238245,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641586880
    },
    {
        "content": "<p>Yeah, it's borderline too trivial.</p>",
        "id": 267238502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641587021
    }
]