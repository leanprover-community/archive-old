[
    {
        "content": "<p>Is there a better way to get the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.primitive_roots</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_primitive_root_of_unity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">Fcyc</span> <span class=\"o\">:=</span> <span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fcyc</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">Fcyc</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">Fcyc</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_coe</span><span class=\"o\">,</span> <span class=\"n\">map_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fcyc</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">Fcyc</span><span class=\"o\">)</span> <span class=\"n\">hf'</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">hcyc</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fcyc</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">hh</span><span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"n\">is_cyclotomic_extension.zeta</span> <span class=\"n\">n</span> <span class=\"n\">F</span> <span class=\"n\">Fcyc</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_cyclotomic_extension.zeta_primitive_root</span> <span class=\"n\">n</span> <span class=\"n\">F</span> <span class=\"n\">Fcyc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What I find particularly painful here is the need to show that <code>n : Fcyc</code> is nonzero (and the fact that I didn't find a more direct proof).</p>",
        "id": 283126939,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653080950
    },
    {
        "content": "<p>That's a question for the FLT-regular people. cc <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span></p>",
        "id": 283147913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653100748
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_cyclotomic_extension.zeta\">docs#is_cyclotomic_extension.zeta</a> that is a primitive root of unity.</p>",
        "id": 283155682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653112241
    },
    {
        "content": "<p><code>cyclotomic_field n F</code> should automatically get the <code>is_cyclotomic_extension</code> instnce.</p>",
        "id": 283155715,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653112287
    },
    {
        "content": "<p>Ah, sorry, you are already using it. Well, then you only need to prove <code>ne_zero ((n : ℕ) : Fcycl)</code>, and your proof can probably be golfed a little.</p>",
        "id": 283155886,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653112505
    },
    {
        "content": "<p>This works, but I suggest to have <code>[ne_zero ...]</code> instead of <code>h</code> as an assumption.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.primitive_roots</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_primitive_root_of_unity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">ne_zero.of_no_zero_smul_divisors</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">is_cyclotomic_extension.zeta</span> <span class=\"n\">n</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">is_cyclotomic_extension.zeta_primitive_root</span> <span class=\"n\">n</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283156345,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653113049
    },
    {
        "content": "<p>Note that the <code>ne_zero</code> assumption in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cyclotomic_field.is_cyclotomic_extension\">docs#cyclotomic_field.is_cyclotomic_extension</a> is probably not necessary. I wanted to remove it last week but I didn't have time. I will do it sooner or later, I promise. (But if you're interested feel free to do it...)</p>",
        "id": 283156456,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653113243
    },
    {
        "content": "<p>Also take care with zeta-note for example in the ring of integers subring, there is no reason for zeta to be the same as outside.</p>",
        "id": 283160648,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653120080
    },
    {
        "content": "<p>Yes, it's much better to prove any results for a generic primitive root, and use zeta only if you need to provide an example</p>",
        "id": 283160874,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653120381
    },
    {
        "content": "<blockquote>\n<p>Note that the <code>ne_zero</code> assumption in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cyclotomic_field.is_cyclotomic_extension\">docs#cyclotomic_field.is_cyclotomic_extension</a> is probably not necessary. I wanted to remove it last week but I didn't have time. I will do it sooner or later, I promise. (But if you're interested feel free to do it...)</p>\n</blockquote>\n<p>for details, Michael, see <a href=\"#narrow/stream/304774-FLT-regular/topic/ne_zero.20again\">https://leanprover.zulipchat.com/#narrow/stream/304774-FLT-regular/topic/ne_zero.20again</a></p>",
        "id": 283174713,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653141032
    },
    {
        "content": "<p>I've posted a comment in the FLT-regular stream.<br>\nYou definitely need the <code>ne_zero</code> assumption for the existence of a <em>primitive</em> <code>n</code>th root of unity, which in turn is usually necessary if you want to prove some interesting statements.</p>",
        "id": 283187158,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653158417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/The.20.60n.60th.20cyclotomic.20field.20has.20a.20prim.2E.20.60n.60th.20root.20of.20unity/near/283156345\">said</a>:</p>\n<blockquote>\n<p>This works, but I suggest to have <code>[ne_zero ...]</code> instead of <code>h</code> as an assumption.<br>\n&lt;snip&gt;</p>\n</blockquote>\n<p>Thanks for the shorter proof!<br>\nI'll also take your advice and work with generic (primitive) roots of unity as far as possible.</p>",
        "id": 283187229,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653158574
    },
    {
        "content": "<p>BTW, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>doesn't seem to exist in this form in mathlib. There are some variants where <code>n</code> is something like the order of <code>x</code> or the order (or exponent) of <code>M</code>, when <code>M</code> is a group, but this is sometimes less useful than the simple statement above.</p>",
        "id": 283188444,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653160128
    }
]