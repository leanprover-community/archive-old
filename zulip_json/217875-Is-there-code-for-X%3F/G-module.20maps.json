[
    {
        "content": "<p>We have G-modules (which seem to be called <code>distrib_mul_action</code>) and G-submodules (<code>sub_mul_action</code>) but do we have morphisms of G-modules?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">G_module_map</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If not, then can someone recommend a wacky name for it (experience seems to indicate that G_module_map isn't going to fly -- how about <code>distrib_mul_action_hom</code>?) and also wacky notation (<code>→+ᵍ</code>?) (Or is someone going to tell me that we should not have this structure at all? My instinct is that I need it for this week's lecture. Edit: actually we don't seem to have submodules -- <code>sub_mul_action</code> isn't preserved under <code>+</code>. So <code>sub_distrib_mul_action</code>? :-/</p>",
        "id": 229120712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615057363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> did you do those?</p>",
        "id": 229120966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615057610
    },
    {
        "content": "<p>Should <code>to_fun</code> really be called <code>to_add_monoid_hom</code>? Or should I have <code>A -&gt; B</code> and <code>is_add_monoid_hom to_fun</code>? Does it matter?</p>",
        "id": 229122280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615058779
    },
    {
        "content": "<p>Don't you want to <code>extends A →+ B</code>?</p>",
        "id": 229122531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615059024
    },
    {
        "content": "<p>I dunno, I'm no good at definitions. That's why I want someone else to have done it :-) If you say so!</p>",
        "id": 229123589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615059983
    },
    {
        "content": "<p>All this stuff about structure projections and type class inference issues goes straight over my head.</p>",
        "id": 229123597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615060007
    },
    {
        "content": "<p>Am I missing something? Isn't that just linear_map with weaker assumptions?</p>",
        "id": 229123658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615060052
    },
    {
        "content": "<p>And if so, can we just weaken the assumptions on what we already have?</p>",
        "id": 229123671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615060075
    },
    {
        "content": "<p>(c.f. monoid_hom, which also works as a group hom)</p>",
        "id": 229123745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615060105
    },
    {
        "content": "<p>I don't have a clue if I'm supposed to be doing this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">distrib_mul_action_hom</span> <span class=\"n\">G</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">to_add_monoid_hom</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>or making a coercion to <code>add_monoid_hom</code> or what.</p>",
        "id": 229123786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615060151
    },
    {
        "content": "<p>Eric there's no ring. Aah, but there is <code>mul_action_hom</code>.</p>",
        "id": 229123863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615060217
    },
    {
        "content": "<p>Why do you need a ring?</p>",
        "id": 229123886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615060237
    },
    {
        "content": "<p>The actual fields of your proposed structure are identical to those of linear_map</p>",
        "id": 229123892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615060255
    },
    {
        "content": "<p>So just remove the assumptions from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map/src\">src#linear_map</a> that are overly strict!</p>",
        "id": 229123915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615060274
    },
    {
        "content": "<p>Aah I found it!</p>",
        "id": 229123920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615060297
    },
    {
        "content": "<p>It was indeed called <code>distrib_mul_action_hom</code>, I need to import <code>algebra.group_action_hom</code> even though this has nothing to do with algebras.</p>",
        "id": 229123988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615060355
    },
    {
        "content": "<p>How bad an idea is changing linear_map to this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">linear_map</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">add_hom</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span>\n</code></pre></div>",
        "id": 229123999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615060375
    },
    {
        "content": "<p>That was silly of me, I have never used this stuff before and I searched mathlib without having the name. Once I realised they should be called <code>distrib_mul_action_hom</code> I should have searched again. Thanks <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> for making me organise my thoughts!</p>",
        "id": 229124107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615060481
    },
    {
        "content": "<p>I guess I'm still looking for G-stable subgroups but they're less important.</p>",
        "id": 229124242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615060599
    },
    {
        "content": "<p>I guess <code>extends sub_mul_action, add_subgroup</code> is the best you can get right now</p>",
        "id": 229124733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615061002
    }
]