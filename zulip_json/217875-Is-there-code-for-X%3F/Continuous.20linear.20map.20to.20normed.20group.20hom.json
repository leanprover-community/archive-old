[
    {
        "content": "<p>Hi,<br>\nI am in a situation where I have a <code>continuous_linear_map</code> and need to convert it to a <code>normed_group_hom</code>. It seems weird to me that these are even different notions. Is there an automatic way to convert between them? I don't find any function to do this. Should automatic coercion work?</p>",
        "id": 268577773,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642614530
    },
    {
        "content": "<p>This certainly won't be automatic, someone will have had to prove <code>continuous_linear_map.to_normed_group_hom</code> by hand (and as far as I can see they haven't). Are you able to prove that yourself? (I can't comment on whether it's true)</p>",
        "id": 268578518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642614843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"465995\">Daniel Roca González</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Continuous.20linear.20map.20to.20normed.20group.20hom/near/268577773\">said</a>:</p>\n<blockquote>\n<p>Hi,<br>\nI am in a situation where I have a <code>continuous_linear_map</code> and need to convert it to a <code>normed_group_hom</code>. It seems weird to me that these are even different notions. </p>\n</blockquote>\n<p>Normed group homomorphisms are maps between normed group that have no reason to be linear spaces, so there is no way they could \"the same notion\".</p>",
        "id": 268579672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642615306
    },
    {
        "content": "<p>And continuous linear maps assume you have a topological module (say a topological vector space) but they do not assume the topology comes from a norm.</p>",
        "id": 268579934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642615403
    },
    {
        "content": "<p>Does it make sense?</p>",
        "id": 268579988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642615427
    },
    {
        "content": "<p>Here's the missing definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.operator_norm</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ₁₂</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→+*</span> <span class=\"bp\">𝕜₂</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_isometric</span> <span class=\"n\">σ₁₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">continuous_linear_map.to_normed_group_hom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normed_group_hom</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">bound'</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f.bound</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>So all the maths is already there (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.bound\">docs#continuous_linear_map.bound</a>), the glue was just missing</p>",
        "id": 268580670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642615730
    },
    {
        "content": "<p>Thank you, now I understand why one can't be a subset of the other. I do think that we should have <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's conversion in the library, along with the other direction.</p>",
        "id": 268581000,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642615905
    },
    {
        "content": "<p>Is the other direction true? How do you prove <code>map_smul</code>?</p>",
        "id": 268581222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642616019
    },
    {
        "content": "<p>wait, you're right, that's not true either</p>",
        "id": 268581334,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642616066
    },
    {
        "content": "<p>Crap, Eric was faster</p>",
        "id": 268581354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642616076
    },
    {
        "content": "<p>Mine was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.operator_norm</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.hom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous_linear_map.to_normed_group_hom</span>\n  <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜'</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semi_normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_space</span> <span class=\"bp\">𝕜'</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→+*</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_isometric</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normed_group_hom</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">bound'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">∥</span><span class=\"n\">f</span><span class=\"bp\">∥</span><span class=\"o\">,</span> <span class=\"n\">f.le_op_norm</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 268581384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642616091
    },
    {
        "content": "<p>I still prefer my last line.</p>",
        "id": 268581432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642616114
    },
    {
        "content": "<p><del>I don't get how your last line is so short yet the proof of <code>continuous_linear_map.bound</code> doesn't seem to unfold to it</del> -- oh nevermind, <code>le_op_norm</code> is proved in terms of <code>bound</code></p>",
        "id": 268581574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642616171
    },
    {
        "content": "<p>Daniel, we could add this, but I'm a bit worried this is an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> issue. There's a reason why nobody ever needed that. I'm pretty skeptical that you \"need to convert it to a <code>normed_group_hom</code>\".</p>",
        "id": 268581579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642616173
    },
    {
        "content": "<p>Daniel, if you wonder about the sigma stuff in our code, you can read <a href=\"https://leanprover-community.github.io/blog/posts/semilinear-maps/\">this blog post</a>.</p>",
        "id": 268581825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642616294
    },
    {
        "content": "<p>You're right: I said this because I didn't find the equivalent of <code>normed_group_hom.antilipschitz_of_norm_ge </code>, but after looking some more I found <code>linear_map.antilipschitz_of_bound </code>, which is basically what I needed. Thank you both.</p>",
        "id": 268582886,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642616785
    },
    {
        "content": "<p>I think the def is still worth having in mathlib simply to show the statement is true, even if it's not useful</p>",
        "id": 268583236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642616956
    }
]