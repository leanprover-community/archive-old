[
    {
        "content": "<p>I have a goal of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">nat.choose.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there anything close to what I want, and if not what's the biggest generality I can prove stuff in? I can probably prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.choose_le_pow</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I assume <code>ℝ</code> is not general enough?</p>",
        "id": 240592034,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622201836
    },
    {
        "content": "<p>I already know this by the way: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/nat/choose/dvd.html#nat.choose_eq_factorial_div_factorial\">https://leanprover-community.github.io/mathlib_docs/data/nat/choose/dvd.html#nat.choose_eq_factorial_div_factorial</a></p>",
        "id": 240592544,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622202191
    },
    {
        "content": "<p>I'd probably prove it for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.desc_fac\">docs#nat.desc_fac</a>? With something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.desc_fac_eq_factorial_mul_choose\">docs#nat.desc_fac_eq_factorial_mul_choose</a>, I think that's essentially what you're doing, and then you can use a couple of the lemmas below there to transfer it to <code>nCk</code>. Also, <code>desc_fac</code> is well-linked to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer\">docs#pochhammer</a>, which is a sweeping generalization, and all results transfer almost automatically</p>",
        "id": 240592742,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622202306
    },
    {
        "content": "<p>You asked a slightly different question on the Discord and here's my answer to that one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- should be in mathlib?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">nat.cast_div</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inj'</span> <span class=\"n\">hb</span><span class=\"o\">),</span> <span class=\"n\">div_mul_cancel</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.div_mul_cancel</span> <span class=\"n\">hba</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- might already be in mathlib?</span>\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.parity.cases_on</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h_even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.cast_div</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.parity.cases_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">nat.add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Probably people can build on this.</p>",
        "id": 240599897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622206650
    },
    {
        "content": "<p>Simpler proofs (though why use nat subtraction?):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.parity.cases_on</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">)⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.even_or_odd'</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">h_even</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h_odd</span> <span class=\"n\">k</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.cast_div</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.even_mul_succ_self</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240601089,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622207247
    },
    {
        "content": "<p>Ultimately the original question doesn't use nat subtraction anyway, so it would be nice to get solutions which don't introduce nat subtraction - Eric's approach seems promising</p>",
        "id": 240618901,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1622215126
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">asda</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">},</span> <span class=\"n\">desc_fac</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">desc_fac_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.mul_le_mul</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">asda.trans</span><span class=\"o\">,</span> <span class=\"n\">pow_le_pow_of_le_left</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>this will get you very close to the original lemma, and the <code>desc_fac</code> api will extend that to <code>pochhammer</code>, <code>choose</code> very easily</p>",
        "id": 240623798,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622217152
    },
    {
        "content": "<p>Great! Thanks!</p>",
        "id": 240628203,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622219250
    },
    {
        "content": "<p>Sorry, but why is <code>desc_fac</code> the <strong>ascending</strong> factorial?</p>",
        "id": 240633033,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622221572
    },
    {
        "content": "<p>yikes, I just googled and found out there's actually a convention</p>",
        "id": 240633903,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622221987
    },
    {
        "content": "<p>that's just how I named it at the time, that's pretty bad and probably deserves a rename</p>",
        "id": 240633924,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622221998
    },
    {
        "content": "<p>I'm making a PR now :)</p>",
        "id": 240636574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622223202
    },
    {
        "content": "<p>I'm also taking the opportunity to define the actual descending factorial, as it seems more relevant in my use case.Real mathmos do not deal with nat substraction!</p>",
        "id": 240636709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622223267
    },
    {
        "content": "<p>is this why I'm in Durham instead of Oxford/Cam? ;b</p>",
        "id": 240636971,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622223406
    },
    {
        "content": "<p>If I remember correctly, the point of defining <code>desc_fac</code> (soon-to-be-called <code>asc_fac</code>!) was to allow for quick computation using <code>norm_num</code> for the birthday problem. Did you investigate whether it was preferable to multiply from the left vs from the right time-wise?</p>",
        "id": 240640404,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622225099
    },
    {
        "content": "<p>I didn't, I'm afraid - sorry! left mul made a lot more sense to me while writing lemmata, though</p>",
        "id": 240641531,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622225673
    },
    {
        "content": "<p>Actually, neither order is optimal. Factorials can be calculated in O(n log n)</p>",
        "id": 240662216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622237062
    },
    {
        "content": "<p>What algorithm calculates factorials that fast?</p>",
        "id": 240663727,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622238116
    },
    {
        "content": "<p>Here's a simple recursive algorithm, called \"Product Recursive\" from <a href=\"http://www.luschny.de/math/factorial/index.html\">http://www.luschny.de/math/factorial/index.html</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">factorial'_aux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">in</span>\n  <span class=\"n\">factorial'_aux</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"n\">factorial'_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"gr\">sorry</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">factorial'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">factorial'_aux</span> <span class=\"mi\">1</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">factorial'_aux_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">factorial'_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">nat.desc_fac</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">factorial'_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">factorial'</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 240664950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622238870
    },
    {
        "content": "<p>The reason this is faster is that by binary splitting the factors we ensure that all multiplications are well balanced. The cost of a (naive) multiplication is the product of the number of digits of the factors, so it is a good idea to minimize the number of multiplications with a size close to the actual target value</p>",
        "id": 240665208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622239075
    },
    {
        "content": "<p>This is not the fastest algorithm (that luschny page describes 21(!) algorithms for calculating factorials); the fastest ones do some kind of prime factorization</p>",
        "id": 240665348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622239189
    },
    {
        "content": "<p>Nice! Will look that up.</p>",
        "id": 240719867,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622320590
    },
    {
        "content": "<p>Where should I put lemmas about inequalities <em>not</em> using natural division? And how should I state them? Should I coerce to <code>ℝ</code>? to <code>ℚ</code>? to something more general?</p>",
        "id": 240719893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622320671
    },
    {
        "content": "<p>a division ring if you don't need commutativity of multiplcation, and a field if you do, or maybe a semifield if such a thing exists (maybe the nonnegative reals are one??)</p>",
        "id": 240722477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622323867
    },
    {
        "content": "<p>oh you need an order too -- <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> what should Yael do here? What axioms do you use in your proofs Yael?</p>",
        "id": 240722545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622323929
    },
    {
        "content": "<p>I would have to take a look, but if the proof mixes add and mul, then the <code>ordered</code> refactor has not reached it yet!  I do not have time to look at this now, though.  Also, since the lemmas that use the new typeclasses are still in PR, there is not much for you to try either...</p>",
        "id": 240736818,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622347617
    },
    {
        "content": "<p>There are files <code>ordered_group</code>, <code>ordered_ring</code>, <code>ordered_field</code> in algebra roughly corresponding to whether you need addition, multiplication, or division</p>",
        "id": 240737034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622347960
    },
    {
        "content": "<p>so if you have a general theorem about le and div it would go in <code>ordered_field</code></p>",
        "id": 240737040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622347976
    },
    {
        "content": "<p>like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_div_iff\">docs#le_div_iff</a></p>",
        "id": 240737044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622347989
    },
    {
        "content": "<p>My proof uses the def of nat.choose and monotonicity of division by a natural. That's it I think.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">choose_le_pow</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">r.factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_div_iff'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">desc_fact_eq_factorial_mul_choose</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">desc_fact_le_pow</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">r.factorial_pos</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I think <code>ordered_field</code> sounds right.</p>",
        "id": 240747465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622367154
    },
    {
        "content": "<p>Actually I'm probably missing something. How should I coerce naturals to <code>α</code> where <code>[linear_ordered_field α]</code>? Surely there's a \"canonical\" way to do that, given that we have a 1 and addition.</p>",
        "id": 240753310,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622377360
    },
    {
        "content": "<p>Can't you just write <code>(n : α)</code>? Or just pass the natural number where Lean is expecting an <code>α</code>?</p>",
        "id": 240753539,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622377744
    },
    {
        "content": "<p>Not in the file <code>algebra/ordered_field</code>. Maybe the coercion is set up in a later file?</p>",
        "id": 240753674,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622377966
    },
    {
        "content": "<p>In that case the lemma you are proving probably belongs in a later file.</p>",
        "id": 240753745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622378096
    },
    {
        "content": "<p>But I guess the coercion is set up in <code>algebra/group.*</code> which is probably imported by <code>algebra/ordered_field</code></p>",
        "id": 240753757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622378135
    },
    {
        "content": "<p>Ahah! I think the cast is in <code>data.nat.cast</code>.</p>",
        "id": 240753761,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622378150
    },
    {
        "content": "<p>But that doesn't sound like a great place to put my inequality. What do you think of me creating a new file for those two lemmas?</p>",
        "id": 240753830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622378234
    },
    {
        "content": "<p>It looks like there's an instance <code>linear_ordered_field α</code> to <code>ordered_semiring α</code> missing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.choose.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.cast</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">choose_le_pow</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">r.factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_div_iff'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.desc_fact_eq_factorial_mul_choose</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.cast_le</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n    <span class=\"n\">exact</span> <span class=\"n\">n.desc_fact_le_pow</span> <span class=\"n\">r</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">r.factorial_pos</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240754566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622379329
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7759\">#7759</a></p>",
        "id": 240756691,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622382572
    },
    {
        "content": "<p>Could anyone review the PR one last time? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 243484460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624349704
    }
]