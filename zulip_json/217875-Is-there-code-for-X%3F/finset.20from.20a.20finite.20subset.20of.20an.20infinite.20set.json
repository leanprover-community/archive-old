[
    {
        "content": "<p>I have the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weight</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">wsum</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">j</span>\n<span class=\"kd\">def</span> <span class=\"n\">testvecs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"bp\">|</span> <span class=\"n\">w.wsum</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Now I would like to produce a <code>finset</code> from <code>testvecs n d</code>. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset\">docs#set.to_finset</a> requires a <code>fintype</code> instance on the subtype, but <code>fintype</code> needs the finset as a component. This looks like a chicken-and-egg problem. (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> has the same problem.)</p>\n<p>So what is the recommended way to produce a <code>finset</code> in such a case?</p>",
        "id": 299235993,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663359809
    },
    {
        "content": "<p>Or equivalently, a <code>fintype</code> instance on the subtype?</p>",
        "id": 299236145,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663359862
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nat.antidiagonal_tuple\">docs#finset.nat.antidiagonal_tuple</a> is the <code>finset</code></p>",
        "id": 299236713,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663360106
    },
    {
        "content": "<p>How on earth would I find that?</p>",
        "id": 299236824,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663360153
    },
    {
        "content": "<p>By asking here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 299236851,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663360164
    },
    {
        "content": "<p>But if you follow the Zulip and mathlib changelogs long enough you know that the key phrase is \"antidiagonal\"</p>",
        "id": 299236893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663360188
    },
    {
        "content": "<p>If you do want a <code>fintype</code> (or a <code>set.finite</code>) you generally don't use their constructors, and there are instead usually other functions that will help you out. For example, if you want a <code>fintype</code> instance on <code>testvecs</code> you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_finset\">docs#fintype.of_finset</a> (there are a number of example instances in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html\">https://leanprover-community.github.io/mathlib_docs/data/set/finite.html</a>) along with <code>finset.nat.antidiagonal_tuple</code></p>",
        "id": 299237158,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663360293
    },
    {
        "content": "<p>Why is it called \"antidiagonal\"?</p>",
        "id": 299237342,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663360363
    },
    {
        "content": "<p>I think you're supposed to think about how the diagonal consists of all coordinates where all indices are equal, and these are orthogonal complements of that</p>",
        "id": 299237489,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663360432
    },
    {
        "content": "<p>or, it's a minor diagonal of a matrix when there are two components, which is also known as the antidiagonal</p>",
        "id": 299237572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663360462
    },
    {
        "content": "<p>I was looking for <code>partition</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 299237855,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663360590
    },
    {
        "content": "<p>Usually a partition is considered unordered, which is the key difference here. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.partition\">docs#nat.partition</a></p>",
        "id": 299238709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663361026
    },
    {
        "content": "<p>That's what I figuered out, but then I didn't know what else to look for...</p>",
        "id": 299240406,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663361880
    },
    {
        "content": "<p>It's also worth noting that <code>fin n → α</code> is often called a tuple</p>",
        "id": 299244926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663364238
    },
    {
        "content": "<p>I named that definition after <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nat.antidiagonal\">docs#finset.nat.antidiagonal</a>, which is the binary version</p>",
        "id": 299244959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663364264
    },
    {
        "content": "<p>My original intent was to be able to use it for some generalized version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_sum\">docs#exp_sum</a> to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_add_of_commute_of_mem_ball\">docs#exp_add_of_commute_of_mem_ball</a>, but decided I didn't care enough to go through with it</p>",
        "id": 299245071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663364314
    },
    {
        "content": "<p>My first thought when reading \"antidiagonal\" is \"complement of the diagonal\" or perhaps \"graph of a nontrivial involution\".</p>",
        "id": 299290209,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663404915
    },
    {
        "content": "<p>Complement of the diagonal is a good intuition; the antidiagonal tuples are a complement (in the sense of an affine subspace) to the diagonal formed by <code>function.const</code></p>",
        "id": 299308950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663414463
    },
    {
        "content": "<p>For my taste, this is one or two steps too removed. I'd probably have chosen <code>ordered_partitions</code>...</p>",
        "id": 299312267,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663416074
    },
    {
        "content": "<p>What names would you have chosen for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nat.antidiagonal\">docs#finset.nat.antidiagonal</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nat.antidiagonal\">docs#list.nat.antidiagonal</a> (the <code>prod</code> rather than <code>tuple</code> versions)?</p>",
        "id": 299314386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663417338
    },
    {
        "content": "<p><code>ordered_partitions_two</code>? As the special case <code>ordered_partitions n 2</code>...</p>",
        "id": 299319048,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663419907
    },
    {
        "content": "<p>(Even though it is not formally a specialization from <code>fin n → nat</code>.)</p>",
        "id": 299319157,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663419952
    },
    {
        "content": "<p>Or <code>pairs_with_sum</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 299319248,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663419980
    }
]