[
    {
        "content": "<p>Do we have this canonical iso somewhere? Or that this is simply not true?<br>\nI don't have a good way to construct the inverse map though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">cokernel_lift_iso_kernel_desc</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cokernel</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">kernel</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272582840,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645353121
    },
    {
        "content": "<p>This looks <em>very similar</em> to what I've been doing for derived functors. Let me check if it is actually identical.</p>",
        "id": 272582922,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645353221
    },
    {
        "content": "<p>What are you working on?</p>",
        "id": 272582928,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645353233
    },
    {
        "content": "<p>I'm constructing projective replacements of bounded cochain complexes.</p>",
        "id": 272582992,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645353290
    },
    {
        "content": "<p>I didn't prove this one, but you can have a look <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/derived_functor_zero.lean\">here</a>.</p>",
        "id": 272583391,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645353796
    },
    {
        "content": "<p>I think you can do it using pseudoelements</p>",
        "id": 272583397,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645353807
    },
    {
        "content": "<p>You have the morphism in one direction, right?</p>",
        "id": 272583412,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645353827
    },
    {
        "content": "<p>(My file is a mess, I know. I will clean it once it's sorry free)</p>",
        "id": 272583728,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645354202
    },
    {
        "content": "<p>The morphism is just<br>\n<code>cokernel.desc _ (kernel.lift _ (kernel.ι _ ≫ cokernel.π _) (by simp)) (by { ext, simp })</code>.<br>\nYeah, I'm also fiddling with pseudoelements. Not sure if there is a cleaner proof though.</p>",
        "id": 272583777,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645354269
    },
    {
        "content": "<p>The morphism is also equal to <code>kernel.lift _ (cokernel.desc _ (kernel.ι g ≫ cokernel.π _) (by simp)) (by { ext, simp })</code>, and I think using one way you can show that it is mono, and with the other way that it is epi.</p>",
        "id": 272583890,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1645354406
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 272585696,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1645356268
    },
    {
        "content": "<p>Here's a full proof without pseudoelements:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cokernel_lift_to_kernel_desc₁</span> <span class=\"o\">:</span> <span class=\"n\">cokernel</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">kernel</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">kernel.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cokernel_lift_to_kernel_desc₂</span> <span class=\"o\">:</span> <span class=\"n\">cokernel</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">kernel</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">cokernel.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cokernel_lift_to_kernel_desc_eq</span> <span class=\"o\">:</span>\n  <span class=\"n\">cokernel_lift_to_kernel_desc₁</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">cokernel_lift_to_kernel_desc₂</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cokernel_lift_to_kernel_desc₁</span><span class=\"o\">,</span> <span class=\"n\">cokernel_lift_to_kernel_desc₂</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)),</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">is_colimit</span> <span class=\"o\">(</span><span class=\"n\">pushout_cocone.mk</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">pushout_cocone</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">abelian.mono_inl_of_is_colimit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">pushout_cocone.is_colimit_aux'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">s.inr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">w</span> <span class=\"n\">w'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">kernel.lift_ι</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">s.condition</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">cokernel.condition</span><span class=\"o\">,</span>\n      <span class=\"n\">zero_comp</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cancel_epi</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">s.condition</span><span class=\"o\">,</span> <span class=\"n\">cokernel.π_desc</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">pushout_cocone.mk_inl</span><span class=\"o\">,</span>\n      <span class=\"n\">cokernel.π_desc_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cokernel.π_desc</span><span class=\"o\">,</span> <span class=\"n\">pushout_cocone.mk_inr</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cancel_epi</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cokernel.π_desc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">w'</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">cokernel.π_desc</span><span class=\"o\">,</span> <span class=\"n\">kernel.condition</span><span class=\"o\">])),</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">pullback_cone.mk</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">pullback_cone</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">abelian.epi_fst_of_is_limit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">kernel.lift_ι</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">pullback_cone.is_limit_aux'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">s.snd</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">w</span> <span class=\"n\">w'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cokernel.π_desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">s.condition</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">kernel.condition</span><span class=\"o\">,</span>\n      <span class=\"n\">comp_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cancel_mono</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">s.condition</span><span class=\"o\">,</span> <span class=\"n\">kernel.lift_ι</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">pullback_cone.mk_fst</span><span class=\"o\">,</span>\n      <span class=\"n\">kernel.lift_ι_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">kernel.lift_ι</span><span class=\"o\">,</span> <span class=\"n\">pullback_cone.mk_snd</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cancel_mono</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">kernel.lift_ι</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">w'</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mono_cokernel_lift_to_kernel_desc₁</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">cokernel_lift_to_kernel_desc₁</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">kernel.lift_mono</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">epi_cokernel_lift_to_kernel_desc₁</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">cokernel_lift_to_kernel_desc₁</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cokernel_lift_to_kernel_desc_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cokernel.desc_epi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">cokernel_lift_to_kernel_desc₁</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_iso_of_mono_of_epi</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">cokernel_lift_iso_kernel_desc</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cokernel</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">kernel</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">as_iso</span> <span class=\"o\">(</span><span class=\"n\">cokernel_lift_to_kernel_desc₁</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272587107,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1645357791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/LES.20for.20Ext/near/272419447\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/LES.20for.20Ext/near/272419447</a></p>",
        "id": 272595489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645367110
    },
    {
        "content": "<p>So is everyone ready to change the definition of <code>homology</code> now?</p>",
        "id": 272598295,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645370425
    },
    {
        "content": "<p>I am in favor of changing it, but we already use quite a lot in the LTE. I don't know how much work a refactor would be</p>",
        "id": 272599746,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645372173
    },
    {
        "content": "<p>We should at least add the API obtained by identifying it with a cokernel or kernel, similarly to the lemmas in the code under the link I posted</p>",
        "id": 272600103,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645372528
    },
    {
        "content": "<p>That would make it much more pleasant to work with IMO</p>",
        "id": 272600116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645372546
    },
    {
        "content": "<p>This should help: <a href=\"https://github.com/leanprover-community/mathlib/pull/12171\">#12171</a></p>",
        "id": 272615053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645389778
    },
    {
        "content": "<p>I am adding the file to the LTE (shamelessly of course, but you're listed as the author).</p>",
        "id": 272616724,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645391424
    },
    {
        "content": "<p>I am already lost trying to use your constructions :D Do you see an easy way of providing the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">left_derived.zero_to_self_obj_hom</span> <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveResolution</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F.obj</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 272617920,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645392744
    },
    {
        "content": "<p>Perhaps using <code>homology.desc'</code>? I'm away from my computer, so I can't check</p>",
        "id": 272619909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645394831
    },
    {
        "content": "<p>I mean, I already have it with the current API, it's just to play with what you did</p>",
        "id": 272620027,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645394941
    },
    {
        "content": "<p>If you want to map out of homology, you can use <code>homology.desc'</code> and if you want to map into it, use <code>homology.lift</code></p>",
        "id": 272620054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645394976
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">left_derived.zero_to_self_obj_hom</span> <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveResolution</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F.obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left_derived_obj_iso</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"n\">homology.desc'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">P.π.f</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.down</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rel</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">kernel.lift_ι_assoc</span><span class=\"o\">,</span> <span class=\"n\">homological_complex.d_to_eq</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">map_homological_complex_obj_d</span><span class=\"o\">,</span>\n      <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">functor.map_comp</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works (I don't know if using <code>P</code> is a good idea or not). In any case naturality of this morphism seems a pain. I will have a closer look tomorrow.</p>",
        "id": 272625889,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645401643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  I added the lemmas you asked for in <a href=\"https://github.com/leanprover-community/mathlib/pull/12171\">#12171</a> . <br>\n<code>homology.map</code> is pretty clunky to work with. Maybe we should think about (eventually) redefining <code>homology.map</code> to be, e.g. <br>\n<code>homology.desc' _ _ _ (homology.lift _ _ _ (kernel.ι _ ≫ β.left ≫ cokernel.π _) _) _</code>.</p>",
        "id": 272717671,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645465313
    },
    {
        "content": "<p>Note that the proofs that switch between <code>homology.desc' ... (homology.lift ...)</code> and <code>homology.lift ... (homology.desc' ...)</code> are now just a simple <code>ext, simp</code> game.</p>",
        "id": 272717853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645465429
    },
    {
        "content": "<p>This should make the naturality of your map pretty simple to prove I think.</p>",
        "id": 272717976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645465499
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 272718678,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645465964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/cokernel_lift_iso_kernel_desc/near/272717976\">said</a>:</p>\n<blockquote>\n<p>This should make the naturality of your map pretty simple to prove I think.</p>\n</blockquote>\n<p>Assuming you define it using <code>homology.desc'</code>, of course!</p>",
        "id": 272718853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645466063
    },
    {
        "content": "<p>I will do it later, but I agree it should be easy now.</p>",
        "id": 272719055,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645466210
    },
    {
        "content": "<p>I confirm it's now easy</p>",
        "id": 272735247,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645477704
    }
]