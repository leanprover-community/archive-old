[
    {
        "content": "<p>When applying a certain lemma (notably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.le_max'\">docs#finset.le_max'</a>), the <em>conclusion</em> contains and underscore that I can't turn into something more explicit. My question is not about these <code>finset.max'</code> issues, but about the underscore, it just so happens that I met the problem while playing with finsets. A MWE is the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">finset.nonempty</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">B.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">A.le_max'</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_succ</span> <span class=\"o\">(</span><span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">three</span> <span class=\"o\">:=</span> <span class=\"n\">one.trans</span> <span class=\"n\">two</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hB</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">three</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which works, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">finset.nonempty</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">B.succ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A.le_max'</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"o\">(</span><span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hB</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, did not find instance of the pattern in the target expression</span>\n  <span class=\"c1\">--A.max' H</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does not (if I replace <code> rw [← hB] at this</code> by <code>erw [← hB] at this,</code> everything is fine, but that is not the point of my question). The funny thing is that in the first example, after introducing <code>one</code> and <code>two</code>, their transitive composition is <code>three :  a ≤ (A.max' H).succ</code> whereas in the second example the \"direct\" transitive composition is <code>this : a ≤ (A.max' _).succ</code>.</p>\n<p>So my questions are</p>\n<ol>\n<li>Is there a way to force Lean to remember what the underscore was even if the conclusion of the<code>lemma</code> contains a <code>_</code>?</li>\n<li>Why is the transitive composition of <code>one</code> and <code>two</code> remembering <code>H</code>, whereas the direct composition does not?</li>\n<li>Is there a reason why in <code>mathlib</code> we prefer (if I undestand correctly) the version of the lemma with the <code>_</code>?</li>\n</ol>",
        "id": 280108834,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650910731
    },
    {
        "content": "<p>It's not really an \"underscore\" in <code>finset.le_max'</code>, the documentation generator is just printing it that way for some reason.</p>",
        "id": 280111085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650911900
    },
    {
        "content": "<p>Does <code>rw</code> not understand definitional proof irrelevance?</p>",
        "id": 280111109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650911916
    },
    {
        "content": "<p>You should probably write an expected type on the <code>have</code> (involving <code>H</code>), then the <code>rw</code> works fine</p>",
        "id": 280111213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650911968
    },
    {
        "content": "<blockquote>\n<ol>\n<li>Is there a way to force Lean to remember what the underscore was even if the conclusion of the <code>lemma</code> contains a <code>_</code>?</li>\n</ol>\n</blockquote>\n<p>Underscore is not a thing in the type theory. It's just a pretty-print feature that hides complicated proofs (because of proof irrelevance). Lean knows how each underscore is constructed and you can extract a proof as an assumption using <code>generalize_proofs</code> tactic. You can either do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A.le_max'</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"o\">(</span><span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">)),</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hB</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A.le_max'</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"o\">(</span><span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">)),</span>\n<span class=\"n\">generalize_proofs</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hB</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 280111839,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650912312
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 280112439,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650912629
    },
    {
        "content": "<p>Does <code>set_option pp.proofs true</code> help?</p>",
        "id": 280113156,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650912977
    },
    {
        "content": "<blockquote>\n<ol start=\"2\">\n<li>Why is the transitive composition of <code>one</code> and <code>two</code> remembering <code>H</code>, whereas the direct composition does not?</li>\n</ol>\n</blockquote>\n<p>The underscore from <code>A.le_max' a ha</code> is <code>Exists.intro a ha</code>, which is definitionally equal to the proof of <code>A.nonempty</code> (because <code>∃ (x : ℕ), x ∈ A</code> is definitionally equal to <code>A.nonempty</code>).</p>\n<p>When you write <code>have two := nat.le_succ (A.max' H)</code>, the type includes <code>H</code> because you explicitly used <code>H</code> to construct the proof. On the other hand, when you write <code>have three := (A.le_max' a ha).trans (nat.le_succ (A.max' H))</code>, the proof of <code>H</code> gets unified with <code>Exists.intro a ha</code> (because they are defeq). Since there is no (syntactically equal) proof of <code>Exists.intro a ha</code> in the assumptions, it gets displayed as underscore and <code>rw</code> gets confused.</p>",
        "id": 280114847,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650913748
    },
    {
        "content": "<blockquote>\n<ol start=\"3\">\n<li>Is there a reason why in <code>mathlib</code> we prefer (if I undestand correctly) the version of the lemma with the <code>_</code>?</li>\n</ol>\n</blockquote>\n<p><code>finset.le_max'</code> could be defined in a slightly different way to avoid underscores:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.le_max'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">s.max'</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span>\n<span class=\"n\">Exists.intro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">le_max_of_mem</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">option.get_mem</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Use it with <code>(A.le_max' a ha).some_spec</code></p>",
        "id": 280116349,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650914473
    },
    {
        "content": "<p>This cause problem in Lean 3 however because we don't have eta expansion.</p>",
        "id": 280117062,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650914799
    },
    {
        "content": "<p>No, I am not making sense.</p>",
        "id": 280117304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650914904
    },
    {
        "content": "<p>What about using a default argument?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_max'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">s.max'</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 280117538,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650915009
    },
    {
        "content": "<p>What's the rationale for <code>rw</code> not working in the second example considering that the types match up to definitional proof irrelevance?</p>",
        "id": 280118123,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650915293
    },
    {
        "content": "<p>Is it that <code>rw</code> might want to inspect the proof argument to infer the values of some non-propositional variables?</p>",
        "id": 280118177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650915315
    },
    {
        "content": "<p>Would it make sense for <code>rw</code> to treat the proof as irrelevant as a fallback option?</p>",
        "id": 280118347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650915397
    },
    {
        "content": "<p>Simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">h₁</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">h₂</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Seems like <code>rw</code> does not unfold <code>finset.nonempty</code></p>",
        "id": 280120029,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650916269
    },
    {
        "content": "<p>That's interesting and not what I thought was happening but, in some ways, leaves me more confused!</p>",
        "id": 280120260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650916371
    },
    {
        "content": "<p>Namely, it does work with <code>h₂ : s.nonempty</code> instead</p>",
        "id": 280120331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650916405
    },
    {
        "content": "<p>Very interesting, thank you very much. I am not sure I fully understand your answer to point 2., but that is my lack of knowledge. I will read carefully and try to come back if I need further clarification. <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span></p>",
        "id": 280169774,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650957579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/making.20implicit.20variable.20explicit.20in.20output/near/280113156\">said</a>:</p>\n<blockquote>\n<p>Does <code>set_option pp.proofs true</code> help?</p>\n</blockquote>\n<p>No, unfortunately it does not, because with this option instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A.le_max'</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"o\">(</span><span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">)),</span> <span class=\"c1\">-- a ≤ (A.max' _).succ</span>\n</code></pre></div>\n<p>I find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A.le_max'</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"o\">(</span><span class=\"n\">A.max'</span> <span class=\"n\">H</span><span class=\"o\">)),</span> <span class=\"c1\">-- a ≤ (A.max' (Exists.intro a ha)).succ</span>\n</code></pre></div>\n<p>which (much in the spirit of <span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> 's suggestions) is not matched neither when doing <code>rw ← hB</code> (for <code>hB : B = A.max' H</code>).</p>",
        "id": 280170553,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650958188
    }
]