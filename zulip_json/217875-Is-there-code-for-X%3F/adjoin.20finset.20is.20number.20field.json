[
    {
        "content": "<p>How would one go and prove?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">number_field</span> <span class=\"o\">(</span><span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">ℚ</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I couldn't find the relavent lemmas regarding finite dimensionality, and there seems to be a diamond between the <code>module ℚ _</code> instance induced from the <code>intermediate_field</code> and the <code>char_zero</code>.</p>",
        "id": 288249742,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1656738549
    },
    {
        "content": "<p>I haven't played with the API, but I suspect some assumption is missing: what if <code>x = π</code>?</p>",
        "id": 288250075,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656739098
    },
    {
        "content": "<p>Oops I have modified the type signature. Thanks.</p>",
        "id": 288250210,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1656739348
    },
    {
        "content": "<p>For some context, I am defining bezout domains to work with valuation rings, and I thought it would be nice if I could show that the ring of algebraic integers is bezout.</p>",
        "id": 288250394,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1656739662
    },
    {
        "content": "<p>I think you can just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fg_adjoin_of_finite\">docs#fg_adjoin_of_finite</a> since <code>finite_dimensional</code> in the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field\">docs#number_field</a> is just an abbreviation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.finite\">docs#module.finite</a> which is defined to mean the top submodule is fg.</p>",
        "id": 288250735,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656740218
    },
    {
        "content": "<p>Do we know that <code>intermediate_field.adjoin</code> coincides with <code>algebra.adjoin</code> when the elements adjoined are all algebraic?</p>",
        "id": 288251536,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1656741505
    },
    {
        "content": "<p>I could only find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.adjoin_simple_to_subalgebra_of_integral\">docs#intermediate_field.adjoin_simple_to_subalgebra_of_integral</a> for adjoining one (algebraic, stated as <code>is_integral</code>) element. Hopefully it's not hard to use induction to get the full result.</p>",
        "id": 288252997,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656743802
    }
]