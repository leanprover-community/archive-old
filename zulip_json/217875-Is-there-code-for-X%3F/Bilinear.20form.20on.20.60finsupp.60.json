[
    {
        "content": "<p>I'd like to know that <code>A : (α × α) → R</code> induces a bilinear form on <code>α →₀ R</code>, where the operation is to take two elements <code>p q : α →₀ R</code>, and sum <code>A (i, j) * p i * q j</code> for all <code>i : α</code>.  This doesn't seem to exist.</p>\n<p>In fact I also can't seem to find the simpler fact that <code>A : α → R</code> induces an element of the dual of <code>α →₀ R</code>, where the operation is to take an element <code>p : α →₀ R</code>, and sum <code>A i * p i</code> for all <code>i : α</code>.   This I might well have missed, since there are small amounts of <code>finsupp</code> material scattered across many files in the linear algebra library.</p>\n<p>This came up while trying to extract some of the work in <a href=\"https://github.com/leanprover-community/mathlib/issues/6427\">#6427</a> as general-purpose lemmas, cc <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>.</p>",
        "id": 229204243,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615138719
    },
    {
        "content": "<p>Here's messy code for the second one, as an illustration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">linear_map.id</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finsupp.sum_add_index'</span> <span class=\"n\">g</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"n\">finsupp.sum_smul_index</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finsupp.mul_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 229204570,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615139064
    },
    {
        "content": "<p>The first one is almost <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_bilin\">docs#matrix.to_bilin</a></p>",
        "id": 229204872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615139369
    },
    {
        "content": "<p>Yes, it would be nice if a lot of the matrix code worked for <code>finsupp</code> on an arbitrary type rather than just on a fintype!</p>",
        "id": 229204963,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615139432
    },
    {
        "content": "<p>This would be the theory of finite rank endomorphisms of a module. I've used these in a paper. They even have characteristic polynomials -- det(1-XL) makes sense if L is a finite rank linear map -- you restrict to any finite dimensional subspace containing the image and the resulting poly is independent of the choice</p>",
        "id": 229205923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615140287
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6606\">#6606</a></p>",
        "id": 229527530,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615314312
    }
]