[
    {
        "content": "<p>I would like to know that <code>fin.snoc</code> is a permutation of <code>fin.cons</code> (ie. given by precomposition by some <code>equiv</code>). Does anyone see a cheap way to get this?</p>\n<p>I was trying to build</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rotate</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">last</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">last</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and finding it quite painful.</p>",
        "id": 227873440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614306855
    },
    {
        "content": "<p>I would generalize to swaps of the parts of <code>fin (m + n)</code></p>",
        "id": 227873947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614307412
    },
    {
        "content": "<p>Isn't this <code>\\lambda i, i+1</code>?</p>",
        "id": 227876003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614309309
    },
    {
        "content": "<p>That works as well, but <code>left_inv</code> and <code>right_inv</code> don't get any easier, because we have no theorems about addition in <code>fin n</code>.</p>",
        "id": 227877691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614310762
    },
    {
        "content": "<p>(In part because we keep considering changing the definition.)</p>",
        "id": 227877703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614310784
    },
    {
        "content": "<p>We do have <code>add_comm_monoid (fin (n + 1))</code></p>",
        "id": 227877942,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614310936
    },
    {
        "content": "<p>That doesn't say anything about the invertibility of the operation though, it would be true with saturating add too</p>",
        "id": 227878035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614311034
    },
    {
        "content": "<p>Hopefully we have <code>fin (n+m) ≃ fin n \\oplus fin m</code> somewhere, which would make Mario's suggestion nice and straightforward.</p>",
        "id": 227878259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614311209
    },
    {
        "content": "<p>Wait, it has a monoid instance but not a group instance?</p>",
        "id": 227878265,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614311218
    },
    {
        "content": "<p>Yeah that's there. I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_sum_equiv\">docs#fin_sum_equiv</a> or something like that?</p>",
        "id": 227878309,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614311253
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_fin_sum_equiv\">docs#sum_fin_sum_equiv</a></p>",
        "id": 227878398,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614311320
    },
    {
        "content": "<p>Oh it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_fin_sum_equiv\">docs#sum_fin_sum_equiv</a></p>",
        "id": 227878399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614311322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fin.2Erotate/near/227878265\">said</a>:</p>\n<blockquote>\n<p>Wait, it has a monoid instance but not a group instance?</p>\n</blockquote>\n<p>If you want the group instance you should be using <code>zmod</code>. It's a bit awkward that we have both, but the idea is that <code>fin n</code> is mostly meant to be algebraically structureless... Of course it inevitably has some.</p>",
        "id": 227885734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614318473
    },
    {
        "content": "<p>It only has some because some pesky people want to talk about <code>37 : fin 3</code> (even though they don't know what they want it to mean ;-) ).</p>",
        "id": 227902186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614331511
    },
    {
        "content": "<p>Why use evil addition on <code>fin n</code>? Haven't we got some \"next\" and \"prev\" structure on <code>fin n</code>?</p>\n<p>I am one of these terrible people who has never got involved with <code>fin n</code> but just watches from the sidelines thinking \"why is this such a mess\"? For me <code>fin n</code> is some finite totally ordered set, and given any nonempty finite totally ordered set at all (including <code>fin n</code> with its nightmare dependently typed definition and its two definitions of +) there should be functions like \"bottom\", \"top\", \"next\" and \"previous\" and a cute little API for them which does not ever get tangled up with this pathological fin + question (which is as bad as nat subtraction as far as I'm concerned and as far as I can see the only reason we have it so that we can use numerals). However I moan about all this and then don't actually ever do anything about it :-(</p>",
        "id": 227903423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614332290
    },
    {
        "content": "<p>At least this point of view abstracts away the whole + issue because the API writes itself -- if x!=top then previous(next x)=x, if x!=bottom then next(previous x)=x, next(top) can be 37 for all I care, the only assumption should be a finite nonempty total order and then we have the advantage that it applies more generally.</p>",
        "id": 227903839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614332546
    },
    {
        "content": "<p>Is there such a thing as a discrete total order? I mean a total order such that everything other than \"top\" has a \"next\" and everything other than \"bottom\" has a \"previous\"? I guess I'm saying I want all nonempty bounded-above sets to have a max and all non-empty bounded-below sets to have a min.</p>",
        "id": 227904037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614332661
    },
    {
        "content": "<blockquote>\n<p>At least this point of view abstracts away the whole + issue because the API writes itself -- if x!=top then previous(next x)=x, if x!=bottom then next(previous x)=x, next(top) can be 37 for all I care, the only assumption should be a finite nonempty total order and then we have the advantage that it applies more generally.</p>\n</blockquote>\n<p>Unfortunately, the fact that <code>fin 0</code> is empty is a recurring thorn in your side if you want to totalize everything</p>",
        "id": 227904272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614332783
    },
    {
        "content": "<blockquote>\n<p>fin n is some finite totally ordered set [...] including fin n with its nightmare dependently typed definition and its two definitions of +</p>\n</blockquote>\n<p>I feel like fin has been repurposed for stuff it wasn't meant to do, and now people complain that it doesn't fit their vision.</p>\n<ol>\n<li><code>fin n</code> is not some abstract totally ordered set, it is literally the naturals less than n.</li>\n<li>\"nightmare dependently typed definition\" please use go-to-definition.  It's literally a subtype.  It's literally <em>the natural numbers less than n</em>...</li>\n<li>\"two definitions of +\".  There is one definition of + on fin n, it's addition modulo n and this is the right choice.</li>\n</ol>",
        "id": 227904291,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614332795
    },
    {
        "content": "<blockquote>\n<p>\"two definitions of +\". There is one definition of + on fin n, it's addition modulo n and this is the right choice.</p>\n</blockquote>\n<p>If that's the case, then subtraction should also be modulo n</p>",
        "id": 227904366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614332851
    },
    {
        "content": "<p>Addition wraps, subtraction saturates</p>",
        "id": 227904382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614332869
    },
    {
        "content": "<p>wtf</p>",
        "id": 227904385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614332872
    },
    {
        "content": "<p>Indeed wtf.</p>",
        "id": 227904391,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614332881
    },
    {
        "content": "<p>Finally one argument for changing + that I can get behind.  Although I'd prefer both to be modulo.</p>",
        "id": 227904482,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614332917
    },
    {
        "content": "<p>I think part of the confounding issue is that <code>zmod</code> exists, in part because fin subtraction was broken during the core freeze</p>",
        "id": 227904531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614332950
    },
    {
        "content": "<p>since <code>zmod</code> exists now, people want <code>fin n</code> to not just be a poor man's <code>zmod</code></p>",
        "id": 227904563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614332993
    },
    {
        "content": "<p>I'm so happy that Lean 4 gets this right:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">mlt</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 227904699,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614333074
    },
    {
        "content": "<p>Gabriel's point is interesting. I am always thinking of <code>fin n</code> in terms of simplicial sets because at the back of my mind I have things like simplicial homology in Lean. That particular <code>fin n</code> is equipped with a structure which is well-defined within that sphere, there is the total order, the maps <code>fin n -&gt; fin (n+1)</code> which \"miss out i\", and the maps <code>fin (n+1) -&gt; fin n</code> which \"identify j and j+1\" and that's it, other than the obvious lemmas about what happens if you compose these maps. Once we have this right (and maybe we have it right already) we can do algebraic topology and this would be really cool. It would be crazy to introduce another type which played this role, but the problem is that the naive definitions of these maps use addition, which for me is a dangerous function because there's more than one definition of it (saturating or wrapping). Scott is probably thinking about something else, so he is somehow using <code>fin n</code> in a different way, but again he's using addition. Maybe there are better functions that one needs on <code>fin n</code>, like \"next\" and \"previous\" (on fin n.succ at least).</p>",
        "id": 227906074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614333917
    },
    {
        "content": "<p>My point is that I'm realising I have a different mental model of <code>fin n</code> to others, and am wondering whether all these different mental models can coexist. Probably they should.</p>",
        "id": 227906167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614333965
    },
    {
        "content": "<p>If you only care about two functions <code>fin.next</code> and <code>fin.prev</code>, then why does it matter if addition is defined or not?  (In any case, I didn't see any addition on fin in this thread, only addition of natural numbers.)</p>",
        "id": 227907266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614334595
    },
    {
        "content": "<p>It matters to Scott because he defined them using addition, which is intuitively the way to define them, and then got into a mess. I think my only worthwhile contribution to this thread is suggesting that these functions should be defined (or are perhaps defined already) and a little API made for them and Scott should be using these instead.</p>",
        "id": 227908939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614335571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> which maps are you talking about now? We have the face/degeneracy maps + the simplicial identities now.</p>",
        "id": 227909555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614335937
    },
    {
        "content": "<p>of course, for the simplicial identities you need an ordering on <code>fin n</code></p>",
        "id": 227909598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614335972
    },
    {
        "content": "<p>Yes, I thought we would have them by now. Are they in mathlib? For Scott we need \"next\" and \"prev\" but I am arguing that these could be defined as \"min of {x : x &gt; a}\" and \"max of {x : x &lt; a}\" (which clearly exist for an arbitrary finite totally ordered set) and this would remove dependence on + which might be a good thing.</p>",
        "id": 227909878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614336137
    },
    {
        "content": "<p>the simplex category is on the current PR queue</p>",
        "id": 227910264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614336397
    },
    {
        "content": "<p>To answer the original question of the thread, it is straightforward to build <code>rotate</code> because we have modulo arithmetic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fin.n_add_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_add</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_one'</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fin.one_add_n</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">fin.n_add_one</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rotate</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]⟩</span>\n</code></pre></div>\n<p>(It would be even easier if <code>fin (n+1)</code> had a ring instance.)</p>",
        "id": 227911685,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614337385
    },
    {
        "content": "<p>Aah, one could also do this by proving <code>rotate</code> for <code>zmod n</code> (true even without the case split!) and then deducing it for <code>fin n</code> using our HoTT substitution tool (equiv.trans).</p>",
        "id": 227915620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614339653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> The point about simplicial sets is interesting! But if we ever want to do cyclic homology, we would need <code>fin.rotate</code> :)</p>",
        "id": 227933856,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614349155
    },
    {
        "content": "<p>I just think it's strange to give <code>fin (n+1)</code> an <code>add_monoid</code> structure which is not an <code>add_group</code> structure.</p>",
        "id": 227934050,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614349235
    },
    {
        "content": "<p>The <code>add_monoid</code> would hold even if addition was redefined. The <code>add_group</code> could be misleading because the <code>-</code> isn't what the <code>add_group</code> would suggest.</p>",
        "id": 227935501,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614349860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fin.2Erotate/near/227904037\">said</a>:</p>\n<blockquote>\n<p>Is there such a thing as a discrete total order? I mean a total order such that everything other than \"top\" has a \"next\" and everything other than \"bottom\" has a \"previous\"? I guess I'm saying I want all nonempty bounded-above sets to have a max and all non-empty bounded-below sets to have a min.</p>\n</blockquote>\n<p>I'm not sure \"discrete\" is the correct word for this. Doesn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo><mo>∪</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0\\} \\cup \\{1/2^n \\ | \\ n \\in \\mathbb{N}\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\">}</span></span></span></span> satisfy these conditions?</p>",
        "id": 227935995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614350074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fin.2Erotate/near/227935501\">said</a>:</p>\n<blockquote>\n<p>The <code>add_monoid</code> would hold even if addition was redefined. The <code>add_group</code> could be misleading because the <code>-</code> isn't what the <code>add_group</code> would suggest.</p>\n</blockquote>\n<p>Yeah, I see what you mean here.</p>",
        "id": 227936095,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614350125
    },
    {
        "content": "<p>Rob said in the PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/5010\">#5010</a>) where I added <code>add_monoid</code>:</p>\n<blockquote>\n<p>Although you could argue that cleaning things up encourages people to use the controversial operations...</p>\n</blockquote>",
        "id": 227936619,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614350364
    },
    {
        "content": "<p>Here is how things are organized in my mind (for better or worse):</p>\n<ol>\n<li><code>fin n</code> could be endowed with the usual abelian groups structure, while <code>zmod n</code> is a commutative ring.</li>\n<li><code>fin n</code> can be endowed with the usual order structure, with the understanding that this is really a cyclic order which is compatible with the additive group structure. If you just want the non-cyclic order, just don't use the additive group structure.</li>\n</ol>\n<p>I was under the impression that this controversy about arithmetic operations in <code>fin n</code> arose from some coercion <code>fin n -&gt; \\N</code></p>",
        "id": 227937136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614350611
    },
    {
        "content": "<p>Re 1, given that <code>fin n</code> has a <code>has_mul</code>, do we just ignore that?</p>",
        "id": 227937525,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614350774
    },
    {
        "content": "<p>Oh I wasn't aware it had a <code>has_mul</code>. I would say to remove that completely.</p>",
        "id": 227937606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614350821
    },
    {
        "content": "<p>Ah, but all those operations are defined in core. Because it's a shortcut to getting <code>unsigned</code> working.</p>",
        "id": 227937679,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614350859
    },
    {
        "content": "<p>I want to repeat that in Lean 4, subtraction will be defined correctly on Fin (i.e. as an inverse to addition).  We can (should?) backport this change to Lean 3.</p>",
        "id": 227938060,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614351027
    },
    {
        "content": "<p>The coercion of <code>fin n -&gt; \\N</code>, if it is the <code>coe_subtype</code>, that is fine. The other coercion comes from <code>nat.cast</code>, which relies on <code>has_add</code>. The reverse direction <code>\\N -&gt; fin (n + 1)</code> comes from core <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.of_nat\">docs#fin.of_nat</a></p>",
        "id": 227938231,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614351119
    },
    {
        "content": "<p>Gabriel, would you then separate the <code>unsigned.has_sub</code> from <code>fin.has_sub</code>?</p>",
        "id": 227938450,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614351203
    },
    {
        "content": "<p>Give me a second.</p>",
        "id": 227938658,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614351286
    },
    {
        "content": "<p>(Relatedly, does it make sense for unsigned ints that subtraction is saturating? According to the C spec,</p>\n<blockquote>\n<p>A computation involving unsigned operands can never overflow, because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the resulting type)</p>\n</blockquote>",
        "id": 227939196,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614351503
    },
    {
        "content": "<p>Lean is certainly not C.</p>",
        "id": 227939493,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614351650
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/541\">lean#541</a><br>\nI think this worth it just for the fact that this is how Lean 4 does it.</p>",
        "id": 227939713,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614351729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fin.2Erotate/near/227935995\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fin.2Erotate/near/227904037\">said</a>:</p>\n<blockquote>\n<p>Is there such a thing as a discrete total order? I mean a total order such that everything other than \"top\" has a \"next\" and everything other than \"bottom\" has a \"previous\"? I guess I'm saying I want all nonempty bounded-above sets to have a max and all non-empty bounded-below sets to have a min.</p>\n</blockquote>\n<p>I'm not sure \"discrete\" is the correct word for this. Doesn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo><mo>∪</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0\\} \\cup \\{1/2^n \\ | \\ n \\in \\mathbb{N}\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\">}</span></span></span></span> satisfy these conditions?</p>\n</blockquote>\n<p>No, because <code>0</code> is not <code>top</code> and doesn't have a <code>next</code>.</p>",
        "id": 227958206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614359197
    },
    {
        "content": "<p>Oh right.</p>",
        "id": 227963343,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614361369
    },
    {
        "content": "<p>Coming back to this: should we make <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.comm_ring\">docs#fin.comm_ring</a> a global instance now? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> suggested that would be reasonable in <a href=\"https://github.com/leanprover-community/mathlib/issues/6848\">#6848</a>, and I'd be loosely in favor too</p>",
        "id": 231677346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616607641
    }
]