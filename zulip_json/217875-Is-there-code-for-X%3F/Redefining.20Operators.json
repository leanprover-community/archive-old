[
    {
        "content": "<p>Is there a way to overwrite/redefine an operator? For example, I want to redefine logical disjunction to use a class like so</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">has_land</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">land</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">/\\</span> <span class=\"o\">:=</span> <span class=\"n\">has_logical_conjunction</span><span class=\"bp\">.</span><span class=\"n\">land</span>\n</code></pre></div>\n\n\n<p>But this of course conflicts with the definition in core. I figured out I can force this by marking the file as <code>prelude</code> but I was hoping there was more elegant and less destructive way around this.</p>",
        "id": 202016945,
        "sender_full_name": "Mac",
        "timestamp": 1593115009
    },
    {
        "content": "<p>I think you can't do that in Lean3.</p>",
        "id": 202017355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593115204
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 202017478,
        "sender_full_name": "Mac",
        "timestamp": 1593115267
    },
    {
        "content": "<p>There are a lot of available unicode symbols.</p>",
        "id": 202017541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593115303
    },
    {
        "content": "<p>E.g <code>\\And</code> and <code>\\Or</code></p>",
        "id": 202018211,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593115635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">ðŸ§€</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">ðŸ§€</span>\n</code></pre></div>",
        "id": 202018259,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593115672
    },
    {
        "content": "<p>I tend to keep my code ASCII only -- I prefer coding that way.</p>",
        "id": 202018427,
        "sender_full_name": "Mac",
        "timestamp": 1593115760
    },
    {
        "content": "<p>You should try Coq <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 202018571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593115839
    },
    {
        "content": "<p>Both <code>//\\\\</code> and <code>/^\\</code> are free, for your \"ultra-and\".  Or <code>/'\\</code>, the \"pen nib\" operator.</p>",
        "id": 202018667,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593115910
    },
    {
        "content": "<p>10-characters notations incoming</p>",
        "id": 202018794,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593115970
    },
    {
        "content": "<p>Is there a way to do infix notation haskell style like <code>f `land` g</code>?</p>",
        "id": 202019030,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593116097
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">infix</span>  <span class=\"bp\">`//\\</span><span class=\"err\">\\</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">land</span>\n</code></pre></div>",
        "id": 202019241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593116191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Redefining.20Operators/near/202019030\">said</a>:</p>\n<blockquote>\n<p>Is there a way to do infix notation haskell style like <code>f `land` g</code>?</p>\n</blockquote>\n<p>I've been wondering this, too, but I haven't seen evidence that Lean has anything like this syntax.</p>\n<p>This is probably a terrible idea, but you can mimic it with postfix operators:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">apply_arg</span> <span class=\"o\">{</span><span class=\"n\">Î±</span> <span class=\"n\">Î²</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î²</span><span class=\"o\">)</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î²</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">postfix</span> <span class=\"bp\">`</span> <span class=\"err\">&#39;</span><span class=\"bp\">&lt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">apply_arg</span>\n<span class=\"kn\">postfix</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;</span><span class=\"err\">&#39;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">1</span> <span class=\"err\">&#39;</span><span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"bp\">&gt;</span><span class=\"err\">&#39;</span> <span class=\"mi\">2</span>\n</code></pre></div>\n\n\n<p>or with a new notation</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"err\">&#39;</span><span class=\"bp\">&lt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;</span><span class=\"err\">&#39;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">1</span> <span class=\"err\">&#39;</span><span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"bp\">&gt;</span><span class=\"err\">&#39;</span> <span class=\"mi\">2</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">1</span> <span class=\"err\">&#39;</span><span class=\"bp\">&lt;</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">on_fun</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&gt;</span><span class=\"err\">&#39;</span> <span class=\"mi\">2</span>\n</code></pre></div>\n\n\n<p>(I'm just guessing with precedence levels and how the <code>notation</code> syntax is supposed to work, based on <a href=\"https://leanprover.github.io/reference/other_commands.html\">this documentation</a>.)</p>",
        "id": 202022166,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593117741
    },
    {
        "content": "<p>Are you asking for more than Lean's <code>infix</code> operator?</p>",
        "id": 202038040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593128195
    },
    {
        "content": "<p>Haskell has a feature where you can have an operator that is a variable: the notation <code>x `f` y</code> stands for <code>f x y</code>.  It's described in the second paragraph after the grammar in <a href=\"https://www.haskell.org/onlinereport/exps.html#sect3.2\">this part</a> of the Haskell 98 report.</p>\n<p>It lets you do things like write <code>5 `div` 2</code> for integer division, since slash is reserved for the <code>Fractional</code> typeclass, which defines reciprocals.</p>",
        "id": 202038479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593128649
    },
    {
        "content": "<p>If I understand it correctly, the infix operator will permanently make something infix, where this Haskell syntax is a one-off thing if you want it to be.</p>",
        "id": 202038587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593128759
    },
    {
        "content": "<p>like this?:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„•</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">ðŸ§€</span><span class=\"bp\">`</span> <span class=\"n\">g</span> <span class=\"bp\">`</span><span class=\"err\">ðŸ§€</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">1</span> <span class=\"err\">ðŸ§€</span><span class=\"n\">f</span><span class=\"err\">ðŸ§€</span> <span class=\"mi\">2</span>\n</code></pre></div>\n\n\n<p>your choice of character may differ ;)</p>",
        "id": 202038910,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593129063
    },
    {
        "content": "<p>Lol I just saw you already did it this way too, my bad!</p>",
        "id": 202039120,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593129348
    },
    {
        "content": "<p>I used <code>'&lt;</code> and <code>&gt;'</code>; yours is clearly superior.</p>\n<p>Do you know how precedence works for this?  In the Haskell version, these \"operator symbols\" are left-associative and high precedence.  Also, it restricts you to using a single (possibly qualified) variable or constructor id.  Can you restrict the middle thing like that?</p>",
        "id": 202039240,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593129460
    },
    {
        "content": "<p>You can put a colon and a binding power after each emoji</p>",
        "id": 202039430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593129548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Redefining.20Operators/near/202038910\">said</a>:</p>\n<blockquote>\n<p>like this?:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„•</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">ðŸ§€</span><span class=\"bp\">`</span> <span class=\"n\">g</span> <span class=\"bp\">`</span><span class=\"err\">ðŸ§€</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">1</span> <span class=\"err\">ðŸ§€</span><span class=\"n\">f</span><span class=\"err\">ðŸ§€</span> <span class=\"mi\">2</span>\n</code></pre></div>\n\n\n<p>your choice of character may differ ;)</p>\n</blockquote>\n<p>You need more pizza!</p>",
        "id": 202048983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593141842
    }
]