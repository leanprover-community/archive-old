[
    {
        "content": "<p>Do we have this somewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fintype_of_fintype_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or is there an easy solution?</p>",
        "id": 257199902,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634044324
    },
    {
        "content": "<p>Maybe by moving <code>fintype</code> along the equivalence <code>{b // b = a} ⊕ {b // b ≠ a} ≃ α</code>?</p>",
        "id": 257200596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634044607
    },
    {
        "content": "<p>Thanks! I'm just trying something else but if that doesn't work in five minutes, I'll try this :-)</p>",
        "id": 257200644,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634044638
    },
    {
        "content": "<p>Your idea works nicely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">fintype_of_fintype_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">equiv.sum_compl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">equiv.bijective</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257201769,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634045056
    },
    {
        "content": "<p>Isn't there something like <code>equiv.fintype</code>?</p>",
        "id": 257202168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045225
    },
    {
        "content": "<p>That would make it ε shorter <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 257202192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045237
    },
    {
        "content": "<p>Oh yes, that should work. Let me try.</p>",
        "id": 257202365,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634045295
    },
    {
        "content": "<p>This is the statement that the <code>equiv</code> type is a fintype.</p>",
        "id": 257202369,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634045297
    },
    {
        "content": "<p>So not what you want here <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 257202409,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634045313
    },
    {
        "content": "<p>Why not?</p>",
        "id": 257202436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045324
    },
    {
        "content": "<p>I mean, just read it: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.fintype\">docs#equiv.fintype</a></p>",
        "id": 257202477,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634045344
    },
    {
        "content": "<p>Ooh, is there <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv\">docs#fintype.equiv</a> ?</p>",
        "id": 257202557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045375
    },
    {
        "content": "<p>I think what Johan has in mind is something that captures the <code>fintype.of_bijective _ (equiv.bijective _)</code> pattern.</p>",
        "id": 257202562,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634045378
    },
    {
        "content": "<p>it's saying that <code>fintype (α \\equiv β)</code> for α, β fintypes, not transferring it across</p>",
        "id": 257202568,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634045381
    },
    {
        "content": "<p>That's a useful fact, but it doesn't deserve such a useful name (-;</p>",
        "id": 257202681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045412
    },
    {
        "content": "<p>If it were, it would be in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/equiv/transfer_instance.html\">https://leanprover-community.github.io/mathlib_docs/data/equiv/transfer_instance.html</a> but I can't find anything to my surprise.</p>",
        "id": 257202705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634045419
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <code>fintype.of_equiv</code></p>",
        "id": 257202747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045437
    },
    {
        "content": "<p>I knew I had seen something like it before!</p>",
        "id": 257202792,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634045457
    },
    {
        "content": "<p>Alas, no dot-notation for you</p>",
        "id": 257202805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045459
    },
    {
        "content": "<p>We should move the names around. <code>equiv.fintype</code> can use an underscore</p>",
        "id": 257202920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045514
    },
    {
        "content": "<p>A prize for any further golfing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">fintype_of_fintype_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_equiv</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">equiv.sum_compl</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 257203508,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634045762
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">fintype_of_fintype_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_equiv</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">equiv.sum_compl</span> <span class=\"o\">(</span><span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>what do I win? ;b</p>",
        "id": 257204004,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634045920
    },
    {
        "content": "<p>Ooooh <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> Fame on Zulip?</p>",
        "id": 257204074,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634045945
    },
    {
        "content": "<p>You can also just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_injective\">docs#fintype.of_injective</a> using the injection into alpha...</p>",
        "id": 257208915,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634047782
    },
    {
        "content": "<p>Nope, that's the wrong way around.</p>",
        "id": 257209436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634047966
    },
    {
        "content": "<p>Doesn't that go the wrong way?</p>",
        "id": 257209442,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634047968
    },
    {
        "content": "<p>Oh</p>",
        "id": 257209844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634048116
    },
    {
        "content": "<p>Oops yes. Ignore me. I should get some coffee</p>",
        "id": 257209880,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634048130
    },
    {
        "content": "<p>Or computably:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fintype_of_fintype_ne</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_equiv</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">equiv.sum_compl</span> <span class=\"o\">(</span><span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257210439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634048338
    }
]