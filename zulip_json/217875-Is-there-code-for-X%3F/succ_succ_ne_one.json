[
    {
        "content": "<p>While reviewing <a href=\"https://github.com/leanprover-community/mathlib/issues/6456\">#6456</a>, I realized that the following lemmas seem to only exist for <code>fin</code> and not <code>nat</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.bernoulli</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one_lt_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.succ.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">one_lt_two</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_succ_of_lt</span> <span class=\"n\">ih</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_succ_ne_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.succ.succ</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat.one_lt_succ_succ</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>\n<p>Do these lemmas already exist? If not, can I add them? I think they are generally useful and will help with golfing <a href=\"https://github.com/leanprover-community/mathlib/issues/6456\">#6456</a>.</p>",
        "id": 228925322,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1614937424
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one_lt_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.succ.succ</span> <span class=\"o\">:=</span> <span class=\"n\">succ_lt_succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ_pos</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 228930992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614940118
    },
    {
        "content": "<p>All the ingredients are there -- remember 1 = 0.succ by definition.</p>\n<p>By the way, <code>simp</code> lemmas are usually of the form <code>X = Y</code> or <code>X &lt;-&gt; Y</code> because <code>simp</code> is a rewrite system. I'm not sure <code>succ_succ_ne_one</code> is a good <code>simp</code> lemma because it is not of this form.</p>",
        "id": 228931087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614940171
    },
    {
        "content": "<p>For nat, it is not. But for fin, it might be if someone is using fin.sum_univ_succ and there are long chains of (i : fin n).succ.succ.succ</p>",
        "id": 228969742,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614957344
    },
    {
        "content": "<p>Also because (1 : fin 1) = 0</p>",
        "id": 228969900,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614957399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Ah thanks! That makes sense.</p>",
        "id": 229084105,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615024116
    },
    {
        "content": "<p>Would these be useful statements to have nonetheless?</p>",
        "id": 229084136,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615024157
    },
    {
        "content": "<p>And re the <code>simp</code>, I don't know anything about these things, it just seemed to accomplish what I was looking for and passed the linter so I had figured it was fine.</p>",
        "id": 229084336,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615024348
    },
    {
        "content": "<p>I was trying to think about this more generally and realized that it might be useful to have <code>ne</code> versions of <code>add_left_inj</code>, <code>add_right_inj</code>, and <code>succ_inj'</code>. Specifically,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_ne_add_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"n\">add_left_inj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_ne_add_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_ne_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Does that make sense? Is there a way to generalize these further? (I know the first two lemmas should be for some group and not <code>ℕ</code>, but should I choose a group without zero so that they can be done as <code>to_additive</code>? Is there something else I'm not taking into consideration?) Any and all help is appreciated.</p>",
        "id": 229137289,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615072413
    },
    {
        "content": "<p>Would you expect to use these lemmas to transform goals or hypotheses?</p>",
        "id": 229139119,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615074353
    },
    {
        "content": "<p>There will surely be some lemma in logic.basic saying (p iff q) implies (not p iff not q) so you could make a term mode proof using that</p>",
        "id": 229139642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615074859
    },
    {
        "content": "<p>Goals, I think? Really my motivation is to be able to have these as direct statements. For example instead of needing to include </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n.succ.succ</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">succ_ne_zero</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I could just use <code>succ_ne_succ.mpr</code>where <code>h</code> would have been required.</p>",
        "id": 229139884,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615075179
    },
    {
        "content": "<p>Update using Kevin's suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_ne_add_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">not_congr</span> <span class=\"o\">(</span><span class=\"n\">add_left_inj</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_ne_add_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">not_congr</span> <span class=\"o\">(</span><span class=\"n\">add_right_inj</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_ne_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">not_congr</span> <span class=\"n\">succ_inj'</span>\n</code></pre></div>",
        "id": 229140111,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615075362
    },
    {
        "content": "<p>These now seem very simple, but the fact that <code>library_search</code> does not procure their proofs compels me to still add them.</p>",
        "id": 229141029,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615076310
    },
    {
        "content": "<p>It doesn't find them because they're combinations of two things in the library. My instinct is that I look at these things and I can instantly see how to build them from things which will be in the library so I would not think to add them, but maybe they're useful for some people?</p>",
        "id": 229141166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615076422
    },
    {
        "content": "<p>I did not see them instantly so I suppose I am one of those people <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 229141240,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615076487
    },
    {
        "content": "<p>When I see the name <code>not_congr</code> I kick myself for not guessing that this is what it was called. There should be a \"guess the name of this proof\" competition/website/whatever where stuff like this is thrown at you and you have to guess the correct name.</p>",
        "id": 229141417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615076701
    },
    {
        "content": "<p>I agree with you that adding them is now really just a question regarding accessibility (for lack of a better word)</p>",
        "id": 229141569,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615076846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/succ_succ_ne_one/near/229141417\">said</a>:</p>\n<blockquote>\n<p>When I see the name <code>not_congr</code> I kick myself for not guessing that this is what it was called. There should be a \"guess the name of this proof\" competition/website/whatever where stuff like this is thrown at you and you have to guess the correct name.</p>\n</blockquote>\n<p>Hahaha, this is the exact game I play as I wait for <code>library_search</code> to do its thing! I try to beat it to the result.</p>",
        "id": 229141639,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615076907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/succ_succ_ne_one/near/229141166\">said</a>:</p>\n<blockquote>\n<p>It doesn't find them because they're combinations of two things in the library. My instinct is that I look at these things and I can instantly see how to build them from things which will be in the library so I would not think to add them, but maybe they're useful for some people?</p>\n</blockquote>\n<p>To quote something <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> once commented on one of my PRs,</p>\n<p>\"I'm in favour of adding lemmas like these. I don't think their existence causes any harm, and easy inequalities have such a high Lean-effort : IRL-effort ratio that any help (e.g. <code>library_search</code>) is useful.\"</p>\n<p>Admittedly, though, these lemmas are even simpler than the ones that were in question there.</p>",
        "id": 229141768,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615077050
    },
    {
        "content": "<p>This may be offtopic for this topic considering all its participants likely know it already but I just today watched Kevin's own <a href=\"https://www.youtube.com/watch?v=bghu6jVt0SY\">https://www.youtube.com/watch?v=bghu6jVt0SY</a> which helped crystalize a bit of this \"accessibility\" question for me</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"bghu6jVt0SY\" href=\"https://www.youtube.com/watch?v=bghu6jVt0SY\"><img src=\"https://i.ytimg.com/vi/bghu6jVt0SY/default.jpg\"></a></div>",
        "id": 229142518,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615077875
    },
    {
        "content": "<p>I could make a bunch more videos like that if only I knew what people were looking for</p>",
        "id": 229146178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615081725
    },
    {
        "content": "<p>How about a video for people looking for the video? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> (slippery slope)</p>",
        "id": 229146818,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615082417
    },
    {
        "content": "<p>The lemma you ask for exists in dot notation as <code>add_left_injective.ne_iff</code>: (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.ne_iff\">docs#function.injective.ne_iff</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_left_injective\">docs#add_left_injective</a>)</p>",
        "id": 229155362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615091292
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 229156939,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615093126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/succ_succ_ne_one/near/228931087\">said</a>:</p>\n<blockquote>\n<p>By the way, <code>simp</code> lemmas are usually of the form <code>X = Y</code> or <code>X &lt;-&gt; Y</code> because <code>simp</code> is a rewrite system. I'm not sure <code>succ_succ_ne_one</code> is a good <code>simp</code> lemma because it is not of this form</p>\n</blockquote>\n<p>In fact, <code>≠</code> lemmas can make good simp lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>That is, if you mark an <code>a ≠ b</code> lemma with <code>@[simp]</code>, then the <code>simp</code> tactic will simplify any appearance of <code>a = b</code> to <code>false</code>, which is often quite useful.</p>",
        "id": 229249893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615181412
    },
    {
        "content": "<p>I opened a PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/6637\">#6637</a>) with the lemmas discussed here; we can continue the conversation there.</p>",
        "id": 229800154,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615443222
    }
]