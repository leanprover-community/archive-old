[
    {
        "content": "<p>Working through a textbook from my younger days, I came across this exercise... I wonder if lean could be made to brute-force it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.cycle.concrete</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.card</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302091717,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664812304
    },
    {
        "content": "<p>This gives you the answer, at least when using <code>#eval</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.cycle.concrete</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_order</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">periodic_pts</span> <span class=\"o\">((</span><span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">computable_order</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.find</span> <span class=\"o\">(</span><span class=\"n\">exists_order</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">computable_order</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"c1\">-- 9</span>\n</code></pre></div>\n<p>Note that <code>#eval</code> happily computes even though I've <code>sorry</code>'d one lemma. There is still some work to be done to turn this into what you asked...</p>",
        "id": 302094470,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664813021
    },
    {
        "content": "<p>AFAIR, Lean 4 has a way to associate a \"computationally better implementation\" with a function. Can it work with extra decidability assumptions? Or should we have definitions like <code>decidable.order_of</code> and a special <code>simp</code> set that consists of lemmas like <code>order_of x = decidable.order_of x</code>?</p>",
        "id": 302103549,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664815752
    },
    {
        "content": "<p>Then a tactic can simplify using these formulas &amp; eval. However, it doesn't work for <code>order_of</code> hidden deep inside of another noncomputable definition.</p>",
        "id": 302103746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664815802
    },
    {
        "content": "<p>From what I understand of Kyle's arguments, the Lean 4 system means we will drop decidability entirely. This means all constructions will be noncomputable according to the Lean 3 definition of computing.</p>",
        "id": 302130760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664824319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> As I understand it, while in Lean 4 you can associate a computationally better implementation, you cannot have it depend on additional decidability assumptions. It has to be a replacement with the exact same type.</p>\n<p>What Yael is referring to is that I've been wanting to see a <code>computable</code> class that you can use to associate computations to specific terms given specific additional typeclasses (and, for example, associating a computation to a normally noncomputable term). Then we can be more free to prefer noncomputable definitions in mathlib. In principle, the compiler could use instances of this class when compiling, though I haven't heard of anyone looking into this possibility yet.</p>\n<p>I'm not sure there is anything Lean 3 vs Lean 4 about this, other than perhaps Lean 4 noncomputability detection is more reliable.</p>",
        "id": 302143666,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664829159
    },
    {
        "content": "<p>Can the computationally better implementation be unsafe? If yes, then it can try to generate the missing decidability arguments (though I'm not sure if it has access to the environment). OTOH, with this approach we don't have a proof of the fact that the computationally better implementation returns the same result.</p>",
        "id": 303728211,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1665612118
    }
]