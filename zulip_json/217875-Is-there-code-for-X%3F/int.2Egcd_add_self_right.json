[
    {
        "content": "<p>We have <code>nat.gcd_add_self_right : ∀ (m n : ℕ), m.gcd (n + m) = m.gcd n</code>. One of the students in my class just wanted the <code>int</code> version of that and neither they nor I could find it. I have written a proof for them but I followed a path of least resistance: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.gcd</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int.nat_abs_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.nat_abs</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int.add_nat_abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"bp\">=</span> <span class=\"n\">a.nat_abs</span> <span class=\"bp\">+</span> <span class=\"n\">b.nat_abs</span> <span class=\"bp\">∨</span>\n  <span class=\"n\">a.nat_abs</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"bp\">+</span> <span class=\"n\">b.nat_abs</span> <span class=\"bp\">∨</span>\n  <span class=\"n\">b.nat_abs</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"bp\">+</span> <span class=\"n\">a.nat_abs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">zify</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int.nat_abs_def</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int.gcd_add_self_right</span>  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">m.gcd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m.gcd</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">m.nat_abs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m.nat_abs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">n.nat_abs</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">int.add_nat_abs</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.gcd_add_self_right</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.gcd_add_self_right</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.gcd_add_self_left</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.gcd_add_self_left</span><span class=\"o\">,</span> <span class=\"n\">nat.gcd_comm</span> <span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This proof was very easy to write: |a+b| is either going to be |a|+|b| or |a|-|b| or |b|-|a| (proof by mindless cases) so you can reduce to nat (as int.gcd a b := nat.gcd |a|,|b|) and then in all three cases it's going to be basically in the library. The problem with this approach of course is that I suspect this proof would not be acceptable for something so high up the import tree (did I get this right? This \"tree\" is an upside-down tree with the trunk at the top and leafs at the bottom, right? You wacky computer scientists...). There are variants too such as <code>m.gcd (m + n)</code> and <code>(m + n).gcd m</code> etc etc (and some of these don't even seem to be available for <code>nat</code>), but these are probably all painless the moment one has one of them, so the question is how to get the first one in an appropriate way (assuming this way isn't appropriate).</p>",
        "id": 275990724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647814580
    },
    {
        "content": "<p>I would expect this to be proved for all Euclidean domains and maybe the proof can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_domain.gcd_val\">docs#euclidean_domain.gcd_val</a></p>",
        "id": 275992435,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647817373
    },
    {
        "content": "<p>I'm wondering if these two generalize:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">nat.gcd_rec</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.gcd</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">m</span>\n <span class=\"kd\">theorem</span> <span class=\"n\">nat.gcd_add_mul_right_right</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.gcd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m.gcd</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 275992617,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647817679
    }
]