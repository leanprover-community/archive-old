[
    {
        "content": "<p>I want to show that totally bounded has the following characterization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.uniform_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.cauchy</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">uniformity</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_group</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">totally_bounded</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)),</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">t.finite</span> <span class=\"bp\">‚àß</span> <span class=\"n\">A</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">x.snd</span> <span class=\"bp\">/</span> <span class=\"n\">x.fst</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hU'</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"n\">filter.comap</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">filter.preimage_mem_comap</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span><span class=\"n\">uniformity_eq_comap_nhds_one</span> <span class=\"n\">Œ±</span> <span class=\"n\">at</span> <span class=\"n\">hU'</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"n\">hU'</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">h.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">set.Union‚ÇÇ_mono</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">uniformity_eq_comap_nhds_one</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">filter.mem_comap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hU</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">V</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">set.Union‚ÇÇ_mono</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">hU</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_preimage</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The proof does not quite work (<code>uniformity_eq_comap_nhds_one</code> has to be replaced with a flipped version). It looks too ugly to be the correct way to do that anyways. Is there a better way to prove this?</p>",
        "id": 275774200,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647593785
    },
    {
        "content": "<p>We should add <code>filter.has_basis.totally_bounded_iff</code>.</p>",
        "id": 275916093,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647704698
    }
]