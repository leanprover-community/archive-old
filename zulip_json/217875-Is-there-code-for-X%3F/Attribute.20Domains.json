[
    {
        "content": "<p>I'm having trouble figuring out how to go about formalizing a concept called \"attribute domains\". The basic idea is that you have some inductive type <code>α</code>. This type has some list of constructors of various arities. We want to define a function <code>f : α  → vals</code> into some (typically ordered) type of values. This function <code>f</code> should \"match up\" the constructors of <code>α</code> with some other list of operators on <code>vals</code>, where the value of <code>f</code> is recursively defined according to the inductive structure of the elements of <code>α</code>. </p>\n<p>So far, there's no problem. If I know <code>α</code> and I have a list of operators in mind, I can just write the recursive function. But I'm looking for a general way of telling Lean how to build the recursive function based on, say, the type <code>α</code> and the list of operators to use for the respective cases. </p>\n<p>Here's an example based on the specific structures I'm looking to support.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">attack_tree</span> <span class=\"o\">(</span><span class=\"n\">lab</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span>\n<span class=\"kn\">open</span> <span class=\"n\">attack_tree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">place</span>\n<span class=\"bp\">|</span> <span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">program</span>\n<span class=\"bp\">|</span> <span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">program</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">component</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">place</span> <span class=\"bp\">→</span> <span class=\"n\">program</span> <span class=\"bp\">→</span> <span class=\"n\">component</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">msp</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"bp\">→</span> <span class=\"n\">component</span> <span class=\"bp\">→</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">nul</span> <span class=\"o\">:</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">cpy</span> <span class=\"o\">:</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">hsh</span> <span class=\"o\">:</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">sig</span> <span class=\"o\">:</span> <span class=\"n\">asp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">dir</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">dir</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">dir</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">split</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">dir</span> <span class=\"bp\">→</span> <span class=\"n\">dir</span> <span class=\"bp\">→</span> <span class=\"n\">split</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">asp</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">lseq</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">bseq</span> <span class=\"o\">:</span> <span class=\"n\">split</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">bpar</span> <span class=\"o\">:</span> <span class=\"n\">split</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">att</span> <span class=\"o\">:</span> <span class=\"n\">place</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"kn\">open</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">lab</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AD1</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">AD1</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AD1</span> <span class=\"n\">t1</span> <span class=\"bp\">+</span> <span class=\"n\">AD1</span> <span class=\"n\">t2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">AD1</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AD2</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bpar</span> <span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AD2</span> <span class=\"n\">c1</span> <span class=\"bp\">+</span> <span class=\"n\">AD2</span> <span class=\"n\">c2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lseq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">AD2</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bseq</span> <span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">AD2</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">att</span> <span class=\"n\">q</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AD2</span> <span class=\"n\">c1</span>\n\n<span class=\"c1\">-- Input types are clearly wrong. How to package the necessary info?</span>\n<span class=\"kd\">def</span> <span class=\"n\">AD_general</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vals</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">vals</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'd like the general construction to prove things like, \"as long as <code>attack_tree.and</code> gets associated with the same operator as <code>copland.bpar</code> and <code>attack_tree.seq</code> gets associated with the same operator as <code>copland.lseq</code> and <code>copland.bseq</code>, then a property holds about the AD1 version iff it holds about the AD2 version\".</p>",
        "id": 304355728,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1665958340
    },
    {
        "content": "<p>I wonder if <a href=\"https://leanprover-community.github.io/mathlib_docs/find/W_type\">docs#W_type</a> might be relevant here, as it represents inductively defined trees</p>",
        "id": 304363580,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665967140
    },
    {
        "content": "<p>Thanks. I’ll check into that lead when I get a chance. I really appreciate the suggestion!</p>",
        "id": 304368387,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1665972240
    },
    {
        "content": "<p>While I have a feeling using W_types would be helpful, I decided to go with a more modest solution. Since I have two particular inductive types in mind, I can at least parameterize each of those with a list (vector, really) of functions. Since I know the number of constructors and their arities, I can hard code those into the lists. Just for reference in case it helps anybody, a revised version is below that shows the equality of the new approach with the one-off solutions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">attack_tree</span> <span class=\"o\">(</span><span class=\"n\">lab</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span> <span class=\"bp\">→</span> <span class=\"n\">attack_tree</span>\n<span class=\"kn\">open</span> <span class=\"n\">attack_tree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">place</span>\n<span class=\"bp\">|</span> <span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">place</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">program</span>\n<span class=\"bp\">|</span> <span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">program</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">component</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">place</span> <span class=\"bp\">→</span> <span class=\"n\">program</span> <span class=\"bp\">→</span> <span class=\"n\">component</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">msp</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"bp\">→</span> <span class=\"n\">component</span> <span class=\"bp\">→</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">nul</span> <span class=\"o\">:</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">cpy</span> <span class=\"o\">:</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">hsh</span> <span class=\"o\">:</span> <span class=\"n\">asp</span>\n<span class=\"bp\">|</span> <span class=\"n\">sig</span> <span class=\"o\">:</span> <span class=\"n\">asp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">dir</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">dir</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">dir</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">split</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">dir</span> <span class=\"bp\">→</span> <span class=\"n\">dir</span> <span class=\"bp\">→</span> <span class=\"n\">split</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">asp</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">lseq</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">bseq</span> <span class=\"o\">:</span> <span class=\"n\">split</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">bpar</span> <span class=\"o\">:</span> <span class=\"n\">split</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"bp\">|</span> <span class=\"n\">att</span> <span class=\"o\">:</span> <span class=\"n\">place</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">copland</span>\n<span class=\"kn\">open</span> <span class=\"n\">copland</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">lab</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AD1</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">AD1</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AD1</span> <span class=\"n\">t1</span> <span class=\"bp\">+</span> <span class=\"n\">AD1</span> <span class=\"n\">t2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">AD1</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- An alternative that takes a list of functions as an argument.</span>\n<span class=\"kd\">def</span> <span class=\"n\">AD1'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"n\">attack_tree</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector.nth</span> <span class=\"n\">l2</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1'</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1'</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector.nth</span> <span class=\"n\">l2</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1'</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1'</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector.nth</span> <span class=\"n\">l2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1'</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD1'</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ad1ops</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨[(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">AD1_eq</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"n\">lab</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">attack_tree</span> <span class=\"n\">lab</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">AD1</span> <span class=\"n\">V</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">AD1'</span> <span class=\"n\">V</span> <span class=\"n\">ad1ops</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">attack_tree.atom</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD1</span><span class=\"o\">,</span> <span class=\"n\">AD1'</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">attack_tree.or</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD1</span><span class=\"o\">,</span> <span class=\"n\">AD1'</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IH1</span><span class=\"o\">,</span> <span class=\"n\">IH2</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">attack_tree.and</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD1</span><span class=\"o\">,</span> <span class=\"n\">AD1'</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IH1</span><span class=\"o\">,</span> <span class=\"n\">IH2</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">attack_tree.seq</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD1</span><span class=\"o\">,</span> <span class=\"n\">AD1'</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IH1</span><span class=\"o\">,</span> <span class=\"n\">IH2</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AD2</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bpar</span> <span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AD2</span> <span class=\"n\">c1</span> <span class=\"bp\">+</span> <span class=\"n\">AD2</span> <span class=\"n\">c2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lseq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">AD2</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bseq</span> <span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">AD2</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">att</span> <span class=\"n\">q</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AD2</span> <span class=\"n\">c1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AD2'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bpar</span> <span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector.nth</span> <span class=\"n\">l2</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2'</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2'</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lseq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector.nth</span> <span class=\"n\">l2</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2'</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2'</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bseq</span> <span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector.nth</span> <span class=\"n\">l2</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2'</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AD2'</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">att</span> <span class=\"n\">q</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"n\">AD2'</span> <span class=\"n\">c1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ad2ops</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨[</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">AD2_eq</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">copland</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">copland</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">AD2</span> <span class=\"n\">V</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">AD2'</span> <span class=\"n\">V</span> <span class=\"n\">id</span> <span class=\"n\">ad2ops</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">copland.atom</span> <span class=\"o\">:</span> <span class=\"n\">c</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD2</span><span class=\"o\">,</span> <span class=\"n\">AD2'</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">copland.lseq</span> <span class=\"o\">:</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD2</span><span class=\"o\">,</span> <span class=\"n\">AD2'</span><span class=\"o\">,</span> <span class=\"n\">IH1</span><span class=\"o\">,</span> <span class=\"n\">IH2</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">copland.bseq</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD2</span><span class=\"o\">,</span> <span class=\"n\">AD2'</span><span class=\"o\">,</span> <span class=\"n\">IH1</span><span class=\"o\">,</span> <span class=\"n\">IH2</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">copland.bpar</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD2</span><span class=\"o\">,</span> <span class=\"n\">AD2'</span><span class=\"o\">,</span> <span class=\"n\">IH1</span><span class=\"o\">,</span> <span class=\"n\">IH2</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">copland.att</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">c1</span> <span class=\"n\">IH</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AD2</span><span class=\"o\">,</span> <span class=\"n\">AD2'</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 304505388,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1666024259
    }
]