[
    {
        "content": "<p>There is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">list.map_const</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">function.const</span> <span class=\"n\">α</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">list.repeat</span> <span class=\"n\">b</span> <span class=\"n\">l.length</span>\n</code></pre></div>\n<p>which clearly generalizes to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">list.repeat</span> <span class=\"n\">b</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but I can't find this more general version. Is it really not there? And if so, would it make sense to add it? (I have a use case...)</p>",
        "id": 314118320,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670272059
    },
    {
        "content": "<p>Do you want this as a <code>@[simp]</code> lemma, in a situation where you expect <code>simp</code> to solve <code>h</code> as well?</p>\n<p>Do you actually want a lemma that says <code>(∀ x ∈ l, f x = b) → f = function.const α b</code>?</p>",
        "id": 314120408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670272881
    },
    {
        "content": "<p>Not sure it would make sense as a <code>simp</code>lemma.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/More.20general.20version.20of.20.60list.2Emap_const.60.3F/near/314120408\">said</a>:</p>\n<blockquote>\n<p>Do you actually want a lemma that says <code>(∀ x ∈ l, f x = b) → f = function.const α b</code>?</p>\n</blockquote>\n<p>This will not be true in general: <code>f</code>can take other values on elments that are not in the list.</p>",
        "id": 314121001,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670273106
    },
    {
        "content": "<p>(Which is precisely the point...)</p>",
        "id": 314121076,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670273131
    },
    {
        "content": "<p>Your version might be better as an `iff</p>",
        "id": 314141832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670281330
    },
    {
        "content": "<p>OK; I'll do the <code>iff</code> version and PR it.</p>",
        "id": 314228848,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670330634
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17832\">#17832</a></p>",
        "id": 314251358,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670337816
    },
    {
        "content": "<p>I think this can be merged now (before the tide rises <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ...).</p>",
        "id": 314705097,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670514438
    }
]