[
    {
        "content": "<p>Are these hidden somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.cast</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid_with_one</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_action</span> <span class=\"n\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">add_action.comp_hom</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">nat.cast_add_monoid_hom</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">vadd_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group_with_one</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_action</span> <span class=\"n\">ℤ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">add_action.comp_hom</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">int.cast_add_hom</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">vadd_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">rat</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_action</span> <span class=\"n\">ℚ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">add_action.comp_hom</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">rat.cast_hom</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">vadd_def</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">rat</span>\n</code></pre></div>",
        "id": 304215724,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665848211
    },
    {
        "content": "<p>Of course the corresponding <code>mul_action</code>s also hold.</p>",
        "id": 304215791,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665848257
    },
    {
        "content": "<p>The first one looks like <code>add_action.comp_hom nat.cast_add_monoid_hom</code></p>",
        "id": 304217726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665849227
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_action.comp_hom\">docs#add_action.comp_hom</a></p>",
        "id": 304217790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665849246
    },
    {
        "content": "<p>And the others in the obvious way</p>",
        "id": 304217837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665849281
    },
    {
        "content": "<p>I think there's a high risk of non-defeq diamonds with those instances though, something to be careful of</p>",
        "id": 304217934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665849320
    },
    {
        "content": "<p>Golfed</p>",
        "id": 304218005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665849352
    },
    {
        "content": "<p>Time for a <code>nvadd</code> field to <code>add_monoid_with_one</code>? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 304218146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665849404
    },
    {
        "content": "<p>At least this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.add_action</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid.to_add_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.add_action</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid.to_add_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rat.add_action</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid.to_add_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 304218237,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665849468
    },
    {
        "content": "<p>I'm more concerned about prod, pi, and complex</p>",
        "id": 304218435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665849578
    },
    {
        "content": "<p>But maybe this instance is safe more generally for <code>[algebra R A] : add_action R A</code></p>",
        "id": 304218512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665849604
    }
]