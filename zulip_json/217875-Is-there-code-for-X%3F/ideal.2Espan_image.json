[
    {
        "content": "<p>Do we have this anywhere? We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_image\">docs#submodule.span_image</a>, but I couldn't work out how to use it here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ideal.span_image</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ideal.span</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ideal.span</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">submodule.span_le.2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ideal.map</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">set.subset.trans</span> <span class=\"n\">_</span> <span class=\"n\">submodule.subset_span</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span>  <span class=\"n\">ideal.subset_span</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">ideal.map_le_of_le_comap</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">submodule.span_le.2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ideal.comap</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">set.image_subset_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ideal.subset_span</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260633421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636364337
    },
    {
        "content": "<p><code>rg -A3 \"lemma.*map_span\"</code></p>",
        "id": 260634110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636364728
    },
    {
        "content": "<p>Something exists. But I don't know which namespace</p>",
        "id": 260634155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636364751
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_span\">docs#map_span</a></p>",
        "id": 260634164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636364756
    },
    {
        "content": "<p>Looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.map_span\">docs#ideal.map_span</a> is your friend</p>",
        "id": 260634313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636364826
    },
    {
        "content": "<p>Annoying that the naming convention is the reverse of the submodule one</p>",
        "id": 260634371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636364868
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 260634376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636364870
    },
    {
        "content": "<p>For <code>submodule</code> both seem to exist</p>",
        "id": 260634645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636365007
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.map_span/src\">src#submodule.map_span</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_image/src\">src#submodule.span_image</a></p>",
        "id": 260635567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636365536
    },
    {
        "content": "<p>Naturally both are proved from scratch...</p>",
        "id": 260635603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636365568
    },
    {
        "content": "<p>I fear that a <code>library_search</code>-linter will be very expansive.</p>",
        "id": 260635920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636365691
    },
    {
        "content": "<p>Dedup'd in <a href=\"https://github.com/leanprover-community/mathlib/issues/10219\">#10219</a></p>",
        "id": 260656885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636378482
    }
]