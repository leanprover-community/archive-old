[
    {
        "content": "<p>I wanted to remove the unnecessary consideration of prime factors from the following lemma, keeping the imports elementary.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coprime_of_mul_modeq_one</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Note that by definition <code>a * b ≡ 1 [MOD n]</code> means <code>(a * b) % n = 1 % n</code> and <code>nat.coprime a n</code> means <code>a.gcd n = 1</code>. So basically this is just the lemma that if <code>N * k + 1 = a * b</code> then <code>a.gcd N = 1</code>.</p>\n<p>You can see my 14-line version on <a href=\"https://github.com/leanprover-community/mathlib/pull/16811\">#16811</a>, any golfing?</p>",
        "id": 302509198,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664991329
    },
    {
        "content": "<p>this works, using mostly your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coprime_of_mul_modeq_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coprime_zero_right</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">eq_one_of_mul_eq_one_right</span> <span class=\"bp\">$</span> <span class=\"n\">modeq_zero_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">coprime_one_right</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coprime_iff_gcd_eq_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.dvd_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.dvd_add_right</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_right</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_right</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_left</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_right</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mod</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>it's a bit metavariably sadly, you can fill in the holes on the righthand of the first <code>rw</code> but it makes it a line longer</p>",
        "id": 302516506,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664993663
    },
    {
        "content": "<p>it'd be nice if there was also a definitional lemma for modeq so I don't have to do the horrendous <code>(h : _ = _)</code></p>",
        "id": 302516799,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664993754
    },
    {
        "content": "<p>the equation compiler style is very underutilised I find</p>",
        "id": 302517074,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664993837
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coprime_of_mul_modeq_one</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">eq_or_ne</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">h₀</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₀</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.eq_one_of_dvd_one</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq_zero_iff_dvd.mp</span> <span class=\"n\">h.symm</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">substr</span> <span class=\"o\">(</span><span class=\"n\">nat.coprime_one_right</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_le_iff_ne_zero.mpr</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq_iff_dvd'</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.sub_eq_iff_eq_add</span> <span class=\"n\">h₁</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.eq_one_of_dvd_one</span> <span class=\"o\">((</span><span class=\"n\">nat.dvd_add_iff_right</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_right</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">dvd_mul_right</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">$</span> <span class=\"n\">hk</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_left</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_right</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302518399,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1664994293
    },
    {
        "content": "<p>Thank you both!</p>",
        "id": 302519147,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664994557
    },
    {
        "content": "<p>One can save another line by inlining <code>h₁</code>, but I assume this would be a bit less efficient...</p>",
        "id": 302520414,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1664994985
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n<span class=\"bp\">.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_of_mul_modeq_one</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.prime.not_coprime_iff_dvd.mp</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.not_prime_one</span> <span class=\"o\">(</span><span class=\"n\">nat.dvd_one.mp</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq_zero_iff_dvd.mp</span>\n    <span class=\"o\">((</span><span class=\"n\">nat.modeq.of_modeq_mul_right</span> <span class=\"n\">d</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span>\n    <span class=\"o\">(</span><span class=\"n\">zero_mul</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq_zero_iff_dvd.mpr</span> <span class=\"n\">hpa</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_right</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302550897,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665006504
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> , I'm trying to avoid primes!</p>",
        "id": 302553874,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665007954
    },
    {
        "content": "<p>Oops! Thats what I get for diving straight into lean xD</p>",
        "id": 302553983,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665008018
    },
    {
        "content": "<p>As I complain on <a href=\"https://github.com/leanprover-community/mathlib/pull/16811\">#16811</a>, <code>nat.prime</code> imports all kinds of rubbish ... complete boolean algebras, modules, ...</p>",
        "id": 302554204,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665008144
    },
    {
        "content": "<p>Don't call my beautiful orders rubbish <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 302554478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665008283
    },
    {
        "content": "<p>What about this? Instead of using a prime just using the gcd, maybe I'm just redoing the above now lol</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n<span class=\"bp\">.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_of_mul_modeq_one</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.gcd_dvd_right</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">nat.coprime_iff_gcd_eq_one.mpr</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.dvd_one.mp</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq_zero_iff_dvd.mp</span>\n    <span class=\"o\">((</span><span class=\"n\">nat.modeq.of_modeq_mul_right</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">hh.subst</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span>\n    <span class=\"o\">(</span><span class=\"n\">zero_mul</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq_zero_iff_dvd.mpr</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul_right</span> <span class=\"n\">b</span><span class=\"o\">)))),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302555003,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665008592
    },
    {
        "content": "<p>I do often wish we could do as Anne wanted and import specific lemmas and only their requirements, but that's for the computer scientists to figure out :)</p>",
        "id": 302562116,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665012991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/golf.20.60nat.2Ecoprime.60.20proof/near/302562116\">said</a>:</p>\n<blockquote>\n<p>I do often wish we could do as Anne wanted and import specific lemmas and only their requirements, but that's for the computer scientists to figure out :)</p>\n</blockquote>\n<p>One way to make this possible would be to split mathlib into many more files (though perhaps not one <code>.lean</code> file per lemma). It would also make parallel builds easier. I'm assuming that the reason the files in mathlib are so big is that doing otherwise would make build times a lot bigger?</p>",
        "id": 302596252,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665041371
    },
    {
        "content": "<p>Files have always been huge. I think data.multiset.basic was already thousands of lines long in 2017 when I joined. So it might be more cultural than anything else. Also, it's easier to just PR an addition to a file than to start reorganising things.</p>",
        "id": 302600143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665043141
    },
    {
        "content": "<p>There's a balance: too many small files makes finding related material hard. But we almost certainly still err much too far on the side of large files, with too many imports that are only relevant for short sections.</p>",
        "id": 302608113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665046476
    },
    {
        "content": "<p>I've been trying to be critical on the import structure during reviews, suggesting to create a new file rather than doing a heavy import. But there's still quite a bit of nontrivial dependencies coming with innocuous imports.</p>",
        "id": 302622697,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1665052144
    },
    {
        "content": "<p>I went with the following un-golfed version of <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>'s <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/golf.20.60nat.2Ecoprime.60.20proof/near/302555003\">proof</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coprime_of_mul_modeq_one</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.gcd_dvd_right</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.coprime_iff_gcd_eq_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.dvd_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.modeq_zero_iff_dvd</span><span class=\"o\">],</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">1</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">a.gcd</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat.modeq.of_modeq_mul_right</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">hh.subst</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">a.gcd</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq_zero_iff_dvd.mpr</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul_right</span> <span class=\"n\">b</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302754122,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665096419
    },
    {
        "content": "<p>That's actually way nicer, and the same line count <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 302754718,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665096762
    }
]