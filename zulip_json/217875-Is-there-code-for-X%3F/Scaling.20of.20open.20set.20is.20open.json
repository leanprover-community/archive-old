[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_open_smul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Probably the assumptions can be weakened - I expect this doesn't need a norm but I'm not sure which class exactly is correct, I'm also struggling to find helpful lemmas in mathlib for this</p>",
        "id": 234718227,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618507336
    },
    {
        "content": "<p>I guess this will be true for any topological vector space, because mulitplication by x^{-1} is continuous</p>",
        "id": 234718442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618507420
    },
    {
        "content": "<p>My Lean can't find <code>topological_vector_space</code> though - that was my first guess too</p>",
        "id": 234718541,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618507448
    },
    {
        "content": "<p>Ah, got it</p>",
        "id": 234718726,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618507506
    },
    {
        "content": "<p>I needed <code>is_open_map_smul'</code> not <code>is_open_map_smul</code></p>",
        "id": 234718765,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618507518
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_open_smul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">is_open_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hX</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_map_smul'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234718872,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618507557
    },
    {
        "content": "<p><code>exact hx.ne'</code></p>",
        "id": 234719198,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618507671
    },
    {
        "content": "<p>Oh neat trick, thanks</p>",
        "id": 234719417,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618507746
    },
    {
        "content": "<p>He's the dot notation master :-)</p>",
        "id": 234721044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618508355
    },
    {
        "content": "<p>It's little tricks like this which really open your eyes to how this dot notation can be used. Apparently this is Leo's insight (this is my understanding from Jeremy at least).</p>",
        "id": 234721173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618508404
    },
    {
        "content": "<p>I still think Yury is the dot notation expert. I just read his refactoring PRs</p>",
        "id": 234721428,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618508522
    }
]