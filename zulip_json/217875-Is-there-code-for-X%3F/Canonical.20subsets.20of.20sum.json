[
    {
        "content": "<p>Does mathlib have some nice notation/abbreviation for the two canonical subsets of a disjoint union of types?<br>\nSpecifically for the following two sets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inl</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inr</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span>\n</code></pre></div>",
        "id": 213166592,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602600685
    },
    {
        "content": "<p><code>range sum.inl</code>?</p>",
        "id": 213167667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602601057
    },
    {
        "content": "<p>Oh yeah I always forget about range. But I still feel like there should be some smaller notation, like <code>sum.setl</code> and <code>sum.setr</code>.</p>",
        "id": 213167802,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601100
    },
    {
        "content": "<p>This lemma also seems to be missing... (at least library search didn't find it).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">sum.inl</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">sum.inr</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 213168291,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601278
    },
    {
        "content": "<p>I don't think it pulls its weight; you would have to unfold the definition to do anything with it, and it doesn't really have any interesting theorems that aren't easily expressible with range</p>",
        "id": 213168351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601301
    },
    {
        "content": "<p>except for that one</p>",
        "id": 213168371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Canonical.20subsets.20of.20sum/near/213168351\">said</a>:</p>\n<blockquote>\n<p>I don't think it pulls its weight; you would have to unfold the definition to do anything with it, and it doesn't really have any interesting theorems that aren't easily expressible with range</p>\n</blockquote>\n<p>Fair enough...</p>",
        "id": 213168521,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601355
    },
    {
        "content": "<p>I don't think the lemma is there, but it's not hard to prove. There are similar theorems for prod and option too</p>",
        "id": 213168569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601374
    },
    {
        "content": "<p>I'm surprised that <code>tauto</code> doesn't immediately prove it!</p>",
        "id": 213168616,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601391
    },
    {
        "content": "<p>there is a <code>cases</code> in the middle</p>",
        "id": 213168650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601401
    },
    {
        "content": "<p>finish might get it</p>",
        "id": 213168669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601409
    },
    {
        "content": "<p><code>finish</code> didn't work</p>",
        "id": 213168696,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601418
    },
    {
        "content": "<p>tidy?</p>",
        "id": 213168731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601434
    },
    {
        "content": "<p>yup!</p>",
        "id": 213168800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601450
    },
    {
        "content": "<p>finish needs you to make the first move btw, applying set.ext</p>",
        "id": 213168867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601470
    },
    {
        "content": "<p>Yeah I tried with <code>ext</code> first.</p>",
        "id": 213168894,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601479
    },
    {
        "content": "<p>BTW, is there an <code>rcases</code> analogue for <code>ext</code>?</p>",
        "id": 213168921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601488
    },
    {
        "content": "<p><code>ext</code></p>",
        "id": 213168940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601495
    },
    {
        "content": "<p>ext takes rcases patterns</p>",
        "id": 213168981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602601510
    },
    {
        "content": "<p>Oh nice.</p>",
        "id": 213169042,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601535
    },
    {
        "content": "<p>Okay, so now I have 17 different proofs of this very serious lemma.</p>",
        "id": 213169180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602601569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Canonical.20subsets.20of.20sum/near/213168569\">said</a>:</p>\n<blockquote>\n<p>I don't think the lemma is there, but it's not hard to prove. There are similar theorems for prod and option too</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.is_compl_range_inl_range_inr\">docs#set.is_compl_range_inl_range_inr</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.range_inl_union_range_inr\">docs#set.range_inl_union_range_inr</a></p>",
        "id": 213174598,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602603574
    }
]