[
    {
        "content": "<p>Trying to show <code>(r: ℤ) : 2 * r ≠ 3</code>, I have the following so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_div_cancel_div</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">eq_inv_mul_iff_mul_eq₀</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">int_ne_div</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span>\n    <span class=\"bp\">←@</span><span class=\"n\">int.cast_inj</span> <span class=\"n\">rat</span><span class=\"o\">,</span>\n    <span class=\"n\">int.cast_mul</span> <span class=\"mi\">2</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">mul_div_cancel_div</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ne_zero.2</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">),</span>\n    <span class=\"bp\">←</span><span class=\"n\">div_eq_inv_mul</span>\n  <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">int_ne_div</span> <span class=\"n\">r</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think <code>int_ne_div</code> is true but don't know how to show it. Also having some problems using it as there are casts. Any ideas, or easier ways to show it?</p>",
        "id": 314116886,
        "sender_full_name": "Ben",
        "timestamp": 1670271481
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 314117544,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1670271742
    },
    {
        "content": "<p><code>int_ne_div</code> is false for <code>i = 0</code>, <code>a = 0</code>, <code>b = 1</code>. Also note that all rationals divide all rationals, except <code>0</code> that doesn't divide any nonzero rational.</p>",
        "id": 314117797,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670271849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Showing.202.20*.20int.20is.20not.20equal.20to.203/near/314117544\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Nice, I wondered if there was an better way. Should have gone down the modulo route. Hadn't come across <code>apply_fun</code> before, that's cool. The <code>norm_num</code> seems to be doing a lot work here. Guessing somewhere inside that statement it is basically saying <code>\\not\\forall r % 8 = 4</code>...?</p>",
        "id": 314119241,
        "sender_full_name": "Ben",
        "timestamp": 1670272410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 314119363,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670272458
    },
    {
        "content": "<p>Somewhere inside it's saying <code>(2 * r) % 2 = 0</code> and <code>3 % 2 = 1</code>so they can't be equal, that's all.</p>",
        "id": 314122143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670273525
    }
]