[
    {
        "content": "<p><code>rintros</code> doesn't seem to do the deal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">--rintros ⟨hp, hq⟩ ⟨p, q⟩,</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Also, is this the correct stream to ask about tactics? (They are technically code.)</p>",
        "id": 198600086,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590354201
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"bp\">|</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">⟩;</span> <span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198600290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590354542
    },
    {
        "content": "<p>That is great, thank you!</p>",
        "id": 198600873,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590355421
    },
    {
        "content": "<p>When I <code>#print notation ⟨</code> I get that <code>`⟨`:1024 builtin := #0</code>. Is <code>|</code> also a builtin in this case?</p>",
        "id": 198600941,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590355492
    },
    {
        "content": "<p>all the notation used in <code>rintro</code> is ad hoc</p>",
        "id": 198601010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590355600
    },
    {
        "content": "<p>it's literally a bunch of nested uses of <code>⟨a, b⟩</code> and <code>a | b</code></p>",
        "id": 198601030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590355648
    },
    {
        "content": "<p>Use <code>a | b</code> when you have an inductive with multiple cases, like <code>or</code>; this creates multiple subgoals. Use <code>⟨a, b⟩</code> when you have a constructor with multiple arguments, like <code>and</code>; this gives you names for the components</p>",
        "id": 198601092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590355723
    },
    {
        "content": "<p><code>cases</code> just lumps them all together into one list</p>",
        "id": 198601109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590355762
    },
    {
        "content": "<p>The same patterns are used in <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a>. You can also try <code>rintro?</code> (or <code>rintros?</code>, same thing), which will give a suggestion.</p>",
        "id": 198601159,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590355844
    },
    {
        "content": "<p><code>rintro</code>, <code>rintros</code>, <code>rcases</code> and <code>obtain</code> all share the rcases parser</p>",
        "id": 198601172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590355872
    }
]