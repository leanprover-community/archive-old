[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 209838453,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599860383
    },
    {
        "content": "<p>Hmm, maybe we only have this for <code>comm_ring</code>s</p>",
        "id": 209862208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599881437
    },
    {
        "content": "<p>You could either prove it by hand, or use the <code>zify</code> tactic to deduce it from the fact for <code>int</code>.</p>",
        "id": 209862216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599881470
    },
    {
        "content": "<p><code>h</code> isn't necessary as an assumption I don't think, if <code>a &lt; b</code> then both sides are 0.</p>",
        "id": 209862407,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1599881856
    },
    {
        "content": "<p>Oh, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul_self_sub_mul_self_eq\">docs#nat.mul_self_sub_mul_self_eq</a>, but not <code>nat.pow_two_sub_pow_two</code>, even though we have both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_self_sub_mul_self_eq\">docs#mul_self_sub_mul_self_eq</a> (which is redundant with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_self_sub_mul_self\">docs#mul_self_sub_mul_self</a>) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_two_sub_pow_two.\">docs#pow_two_sub_pow_two.</a></p>",
        "id": 209863120,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599883419
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4119\">#4119</a> removes <code>mul_self_sub_mul_self_eq</code>. It's getting late so I'll leave it to someone else to add <code>nat.pow_two_sub_pow_two</code>.</p>",
        "id": 209863278,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599883708
    },
    {
        "content": "<p>Update: I was going to add <code>nat.pow_two_sub_pow_two</code> but it's turned into a cleanup of <code>data.nat.basic</code> instead, which I'll try to PR sometime tomorrow.</p>",
        "id": 209903284,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599950982
    },
    {
        "content": "<p>PR is here: <a href=\"https://github.com/leanprover-community/mathlib/issues/4135\">#4135</a></p>",
        "id": 209950334,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600032558
    }
]