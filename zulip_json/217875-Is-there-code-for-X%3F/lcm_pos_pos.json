[
    {
        "content": "<p>Do we have the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lcm_pos_pos</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">lcm</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hmn</span><span class=\"o\">:=</span><span class=\"n\">mul_pos</span> <span class=\"n\">hm</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">nat.gcd_mul_lcm</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hmn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">≤</span><span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pos_of_mul_pos_left</span> <span class=\"n\">hmn</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280098806,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1650906058
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lcm_ne_zero\">docs#nat.lcm_ne_zero</a> that is essentially what you want.</p>",
        "id": 280099014,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650906136
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lcm_pos_pos</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lcm</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.pos_of_ne_zero</span> <span class=\"bp\">$</span> <span class=\"n\">nat.lcm_ne_zero</span> <span class=\"n\">hm.ne'</span> <span class=\"n\">hn.ne'</span>\n</code></pre></div>\n<p>should work (untested).</p>",
        "id": 280099395,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650906321
    }
]