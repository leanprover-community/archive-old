[
    {
        "content": "<p>Suppose H is an hypothesis with conjuctions and existentials;<br>\nfor example H = a /\\ b /\\ exists x, c<br>\nIs there a tactic that splits this into all it's parts, something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span>\n<span class=\"bp\">======================</span>\n<span class=\"n\">Goal</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decompose</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n<span class=\"bp\">=======</span>\n<span class=\"n\">Goal</span>\n</code></pre></div>\n<p>Instead of having to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 257925020,
        "sender_full_name": "Jelmer Firet",
        "timestamp": 1634482764
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#obtain\">tactic#obtain</a> both do that</p>",
        "id": 257925164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634482835
    },
    {
        "content": "<p><code>obtain ⟨a, b, x, c⟩ := H</code></p>",
        "id": 257925211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634482890
    },
    {
        "content": "<p>I will check those out, thanks!</p>",
        "id": 257925216,
        "sender_full_name": "Jelmer Firet",
        "timestamp": 1634482898
    }
]