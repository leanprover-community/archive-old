[
    {
        "content": "<p>Is there a version of this statement in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">odd_of_prime_gt_two</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.odd_iff_not_even</span><span class=\"o\">,</span> <span class=\"n\">even_iff_two_dvd</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.prime_dvd_prime_iff_eq</span> <span class=\"n\">nat.prime_two</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">hp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This <a href=\"https://github.com/leanprover-community/mathlib/pull/17632#discussion_r1052774168\">came up</a> during my PR but I wasn't able to find it using library search.</p>",
        "id": 316998731,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671556756
    },
    {
        "content": "<p>I guess the closest we have is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime.eq_two_or_odd\">docs#nat.prime.eq_two_or_odd</a></p>",
        "id": 317000562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671557314
    },
    {
        "content": "<p>I think that's the second closest -- the closest is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime.eq_two_or_odd'\">docs#nat.prime.eq_two_or_odd'</a></p>",
        "id": 317002568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671557911
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">odd_of_prime_gt_two</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">h.eq_two_or_odd'</span><span class=\"o\">)</span> <span class=\"n\">hp.ne'</span>\n</code></pre></div>",
        "id": 317003149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671558089
    },
    {
        "content": "<p>Makes me wonder whether <code>eq_two_or_odd'</code> is actually usable in the application rather than <code>odd_of_prime_gt_two</code></p>",
        "id": 317003335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671558140
    },
    {
        "content": "<p>there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime.odd_of_ne_two\">docs#nat.prime.odd_of_ne_two</a>, which used to be called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime.odd\">docs#nat.prime.odd</a> until naming people decided that this wasn't right</p>",
        "id": 317006152,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671559033
    },
    {
        "content": "<p>I personally think that \"obvious\" hypotheses shouldn't be in the theorem title, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 317006215,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671559054
    },
    {
        "content": "<p>This lemma was actually added after I originally opened my pull request, so the version of mathlib that my code branched from is actually outdated. I think I'm going to try running a <code>git merge</code>.</p>",
        "id": 317014954,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671561718
    },
    {
        "content": "<p>I ran <code>git merge</code> and there were no merge conflicts, but now the Lean window in VSCode is constantly loading. If I had to guess, it's probably building 360 commits worth of oleans. Is there a way I can download those instead of rebuilding them?</p>",
        "id": 317017280,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671562484
    },
    {
        "content": "<p>Maybe <code>leanproject get-mathlib-cache</code> is what you want.</p>",
        "id": 317017497,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671562554
    },
    {
        "content": "<p>If you're working in mathlib rather than another Lean project, I'd recommend:<br>\n<code>leanproject get-cache --rev &lt;hash of latest mathlib commit&gt;</code><br>\nthen<br>\n<code>lean --make &lt;path to the file you want to work on&gt;</code></p>",
        "id": 317017743,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671562640
    },
    {
        "content": "<p><code>leanproject get-cache --rev a7aa4a2e6c</code> (where <code>a7aa4a2e6c</code> is the most recent <code>master</code> commit) seemed to work<br>\nnorm_num now fails in one case but that shouldn't be that hard to fix</p>",
        "id": 317018383,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671562847
    },
    {
        "content": "<p>It seems to work now</p>",
        "id": 317019683,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671563254
    },
    {
        "content": "<p>The way I get cache just after merging is <code>leanproject get-c --rev origin/master</code></p>",
        "id": 317025500,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671565017
    },
    {
        "content": "<p>You can also do <code>leanproject get-c</code>, see what commits leanproject gives you, and do <code>leanproject get-c --rev the_first_one</code>.</p>",
        "id": 317025645,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671565076
    },
    {
        "content": "<p>Or just do <code>leanproject get-cache --fallback=download-first</code> which does those two things for you</p>",
        "id": 317054462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671576668
    }
]