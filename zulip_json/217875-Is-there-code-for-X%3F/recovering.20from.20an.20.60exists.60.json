[
    {
        "content": "<p>Is it possible to construct</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>by looking through the <code>elems</code> of the <code>fintype</code>?</p>",
        "id": 201395363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592575967
    },
    {
        "content": "<p>I think so--basically use subsingleton-ness of <code>trunc</code> to eliminate the quotient in <code>fintype \\a</code> to a list of elements</p>",
        "id": 201395700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592576121
    },
    {
        "content": "<p>then take the first element satisfying the predicate, which has to exist</p>",
        "id": 201395751,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592576150
    },
    {
        "content": "<p>The form of your question seems slightly at odds with the stream it's posted in, though <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 201395898,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592576215
    },
    {
        "content": "<p>Hm, okay. :-) I guess I have sometimes use \"Is there code for X?\" to also include \"Does anyone want to proof / sketch for me X?\"</p>",
        "id": 201396549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592576525
    },
    {
        "content": "<p>Okay, I have a horrible proof now!</p>",
        "id": 201396640,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592576571
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">trunc_of_nonempty_multiset</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">trunc</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">rec_on_subsingleton</span> <span class=\"n\">s</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[],</span>       <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">trunc_of_nonempty_of_fintype</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">trunc_of_nonempty_multiset</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">trunc_of_nonempty_of_fintype</span> <span class=\"err\">$</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩⟩</span>\n</code></pre></div>",
        "id": 201413102,
        "sender_full_name": "David Wärn",
        "timestamp": 1592584295
    },
    {
        "content": "<p>Just for the record this made it into mathlib as <a href=\"https://github.com/leanprover-community/mathlib/issues/3166\">#3166</a>, in <code>data.fintype.basic</code>.</p>",
        "id": 203669369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594601968
    },
    {
        "content": "<p>Shouldn't this be using <code>subtype</code> instead of <code>Sigma'</code>?</p>",
        "id": 203669452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594602106
    },
    {
        "content": "<p>Yes!</p>",
        "id": 203669627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594602378
    },
    {
        "content": "<p>I'll get to it eventually. :-)</p>",
        "id": 203669628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594602384
    }
]