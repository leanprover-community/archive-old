[
    {
        "content": "<p>Dear All,</p>\n<p>is there code already for defining a linear order on finsupps with source and target that are linearly ordered?</p>\n<p>Specifically, I would like to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finsupp.lex</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>where <code>f &lt; g</code> if <code>f ≠ g</code> and</p>\n<ul>\n<li>either <code>f = 0</code>, or</li>\n<li>the smallest <code>a : α</code> where <code>f a ≠ g a</code> satisfies <code>f a &lt; g a</code>.</li>\n</ul>\n<p>This is essentially a lex-order, but I was not able to find it in the <code>lex</code> files.</p>\n<p>Thanks!</p>",
        "id": 292692975,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660106814
    },
    {
        "content": "<p>One observation: it might be convenient to define this as the pullback of the lex order on functions under the embedding of funsupps into functions</p>",
        "id": 292693518,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1660107381
    },
    {
        "content": "<p>I don't see why you need the <code>f = 0</code> case.</p>",
        "id": 292693531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660107401
    },
    {
        "content": "<p>The <code>0</code> case was only to be able to talk about the \"smallest ...\".</p>",
        "id": 292693548,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660107428
    },
    {
        "content": "<p>Anyway, I have tried getting the functions to work, but I might be missing some imports.</p>",
        "id": 292693578,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660107478
    },
    {
        "content": "<p>Still it doesn't seem like you need it. If <code>f</code> is minimal, then the smallest <code>a</code> will respect <code>f a &lt; g a</code> (because <code>g a &lt; f a</code> would be contradictory.</p>",
        "id": 292693661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660107521
    },
    {
        "content": "<p>Also, you will need <code>N</code> to be well-ordered for the minimal <code>a</code> to even exist.</p>",
        "id": 292693681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660107560
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.lex.linear_order\">docs#pi.lex.linear_order</a></p>",
        "id": 292693689,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660107575
    },
    {
        "content": "<p>If you do not need to split that case, that is fine as well.  I was just worried that applying <code>f</code> to <code>a</code> would cause problems is <code>a</code> was the bottom of <code>with_bot α</code>.</p>",
        "id": 292693702,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660107600
    },
    {
        "content": "<p>Is well-ordering necessary, since I am always dealing with <code>fin</code>supps?</p>",
        "id": 292693780,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660107635
    },
    {
        "content": "<p>What I mean is that the minimal <code>a</code> can be chosen in the union of the supports of <code>f</code> and <code>g</code>.</p>",
        "id": 292693823,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660107675
    },
    {
        "content": "<p>I'll try with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.lex.linear_order\">docs#pi.lex.linear_order</a> and see how far I get, thanks!</p>",
        "id": 292693923,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660107756
    },
    {
        "content": "<p>Oh yeah, maybe not. In that case you can pull back the order from <code>pi.lex</code>, but not its linearity, so you will need to prove that separately.</p>",
        "id": 292693954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660107793
    },
    {
        "content": "<p>This brings up a lot of memory, so I wonder whether I didn't try implementing this for Shing and his Gröbner bases somewhere.</p>",
        "id": 292694013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660107844
    },
    {
        "content": "<p>I think I didn't, so please go ahead</p>",
        "id": 292694027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660107864
    },
    {
        "content": "<p>Ok, so <code>pi.lex</code> will give me an order once I have orders on source and target, right?  And you are saying that this order is linear, but this final fact is not proven?</p>",
        "id": 292694061,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660107901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/linear.20order.20on.20finsupps/near/292694013\">said</a>:</p>\n<blockquote>\n<p>This brings up a lot of memory, so I wonder whether I didn't try implementing this for Shing and his Gröbner bases somewhere.</p>\n</blockquote>\n<p>This makes lots of sense to me, since I am thinking about this in the context of <code>add_monoid_algebra</code>s.</p>",
        "id": 292694094,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660107959
    },
    {
        "content": "<p>Yaël, you are suggesting this, correct?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finsupp.lex</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">pi.lex</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_lt</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">max_def</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">min_def</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 292694499,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660108293
    },
    {
        "content": "<p>You can get at least <code>partial_order</code> for free: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/partial_order.lift\">docs#partial_order.lift</a></p>",
        "id": 292695914,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660109512
    },
    {
        "content": "<p>Ah, great!  I was having problems proving reflexivity!  With your suggestion, I can probably make it to the end!</p>\n<p>I'll let you know if I need more help, but I will get back to this in an hour or so.</p>\n<p>Thanks!</p>",
        "id": 292696064,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660109629
    },
    {
        "content": "<p>You can get <code>lattice</code> from defining <code>sup</code> and <code>inf</code> and then using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.lattice\">docs#function.injective.lattice</a>.</p>",
        "id": 292696113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660109653
    },
    {
        "content": "<p>So you'll only to prove totality afterwards</p>",
        "id": 292696132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660109676
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pi.lex</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.synonym</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp.order</span>\n<span class=\"bp\">.</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_well_order</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_order.lift'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"n\">finsupp.coe_fn_injective</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">to_lex</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">to_lex</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292696176,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1660109711
    },
    {
        "content": "<p>And now try getting rid of <code>is_well_order</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 292696251,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660109770
    },
    {
        "content": "<p>For Damiano I would imagine alpha is <code>fin n</code> or something anyways</p>",
        "id": 292696306,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1660109823
    },
    {
        "content": "<p>I suspect it might be <code>int</code></p>",
        "id": 292696345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660109865
    },
    {
        "content": "<p>Alex, I would prefer to leave α arbitrary, but <code>fin n</code> is one of the main players.</p>\n<p>Yaël, <code>N</code> is likely to be ℕ or ℤ, depending on whether I'm thinking of polynomials or Laurent polynomials.</p>",
        "id": 292696593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660110098
    },
    {
        "content": "<p>Anyway, thank you both!  I'll see what I can do with the well-order wrinkle!</p>",
        "id": 292696645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660110133
    },
    {
        "content": "<p>Can you tell that I do not know my way around the <code>lex</code> API?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pi.lex</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">partial_order.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)))</span>\n  <span class=\"n\">finsupp.coe_fn_injective</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne_or_ne_of_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">ne_of_ne_of_eq</span> <span class=\"n\">ab.symm</span> <span class=\"n\">ac</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">ac</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finsupp.lex</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">dfug</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.support</span> <span class=\"bp\">∪</span> <span class=\"n\">g.support</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">of_lex</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">of_lex</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">de</span> <span class=\"o\">:</span> <span class=\"n\">dfug</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">not_ne_iff.mp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_ne_iff.mpr</span> <span class=\"n\">de</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">finset.ne_empty_of_mem</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_union</span><span class=\"o\">,</span> <span class=\"n\">finsupp.mem_support_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ne_or_ne_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.nonempty_iff_ne_empty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">de</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">dfug.min'</span> <span class=\"n\">de</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">mf</span> <span class=\"o\">:</span> <span class=\"n\">of_lex</span> <span class=\"n\">f</span> <span class=\"n\">min</span> <span class=\"bp\">≤</span> <span class=\"n\">of_lex</span> <span class=\"n\">g</span> <span class=\"n\">min</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">finset.mem_filter.mp</span> <span class=\"o\">(</span><span class=\"n\">finset.min'_mem</span> <span class=\"n\">_</span> <span class=\"n\">de</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">mf</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span> <span class=\"bp\">∪</span> <span class=\"n\">g.support</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">finset.min'_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_filter.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_union</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">not_or_distrib</span><span class=\"o\">,</span> <span class=\"n\">finsupp.mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">js</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">js</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">not_le.mp</span> <span class=\"n\">mf</span><span class=\"o\">⟩),</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span> <span class=\"bp\">∪</span> <span class=\"n\">g.support</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">finset.min'_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_filter.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">hj.symm</span><span class=\"o\">⟩)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_union</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">not_or_distrib</span><span class=\"o\">,</span> <span class=\"n\">finsupp.mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">js</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">js</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_lt</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 292710940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660119101
    },
    {
        "content": "<p>I will have a go at it myself when I have access to a computer</p>",
        "id": 292714145,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660120589
    },
    {
        "content": "<p>Should I make a PR about this or is it too niche?  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 292768986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660142754
    },
    {
        "content": "<p>It may be helpful to prove <code>is_domain (add_monoid_algebra R (σ → ₀ G))</code>, which can be used in the proof of the Lindemann-Weierstrass theorem. Otherwise it needs a copy of <code>mv_polynomial.is_domain</code>.</p>",
        "id": 292784465,
        "sender_full_name": "FR",
        "timestamp": 1660147359
    },
    {
        "content": "<p>Yes, my goal is to prove <code>no_zero_divisors</code> on <code>add_monoid_algebra</code>s in as much a generality as I can.</p>",
        "id": 292789635,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660149154
    },
    {
        "content": "<p>I already have a proof with enough covariant assumptions on the grading type.  Now I'd like to make sure that these assumptions are unneeded!</p>",
        "id": 292790750,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660149533
    },
    {
        "content": "<p>I opened two PRs:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/15983\">#15983</a>, where there are results about non-zero divisors in <code>add_monoid_algebra</code>s,</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/15984\">#15984</a>, where there is the proof above that <code>finsupp</code>s can be linearly ordered.</li>\n</ul>\n<p>Any comments on these PRs are very welcome!  In particular, if you have a use-case in mind for either the linear extensions or the non-existence of zero-divisors, I would be happy to hear about them and try to improve/generalize as needed!</p>\n<p>Thanks!</p>",
        "id": 292809129,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660156145
    }
]