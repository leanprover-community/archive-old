[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 297730892,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662626090
    },
    {
        "content": "<p>I meant for you to construct the equivalence between the two subtypes using the equality of the predicates, then to use that equivalence to transfer the fintype instance, but there may be a quicker way.</p>",
        "id": 297735095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662627829
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.prod</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">locally_finite</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">□</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">g'</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">□</span> <span class=\"n\">G'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neighbor_set</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">g'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">g'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">∪</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">G'.neighbor_set</span> <span class=\"n\">g'</span><span class=\"o\">)),</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_neighbor_set</span><span class=\"o\">,</span> <span class=\"n\">box_prod_adj</span><span class=\"o\">,</span> <span class=\"n\">mem_union_eq</span><span class=\"o\">,</span> <span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">prod.mk.inj_iff</span><span class=\"o\">,</span>\n               <span class=\"n\">exists_eq_right_right</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">and_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_eq_right_right</span><span class=\"o\">],</span><span class=\"n\">finish</span><span class=\"o\">,},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.fintype_union</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.fintype_image</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>\n<p>side-stepping <code>set.finite</code> without the equivalence: I think that's good enough?</p>",
        "id": 297736254,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662628316
    },
    {
        "content": "<p>Can you not replace the last two lines with <code>apply_instance</code>?</p>",
        "id": 297736693,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662628511
    },
    {
        "content": "<p>This gives bad defeq but I doubt we care.</p>",
        "id": 297736722,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662628529
    },
    {
        "content": "<p>You should really separate the <code>have</code> as its own lemma, though! That's a statement I wanted in the <code>box_prod</code> API but didn't round to adding.</p>",
        "id": 297736870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662628587
    },
    {
        "content": "<p>Also, the corresponding <code>degree</code> statement</p>",
        "id": 297736900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662628600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Product.20of.20locally.20finite.20simple.20graphs/near/297736693\">said</a>:</p>\n<blockquote>\n<p>Can you not replace the last two lines with <code>apply_instance</code>?</p>\n</blockquote>\n<p>oh, that's magic: it works</p>",
        "id": 297736984,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662628653
    },
    {
        "content": "<p>OK, well, I'll give that a go and try for a PR if that makes sense?</p>",
        "id": 297737122,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662628706
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.prod</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n\n<span class=\"kd\">variables</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">box_prod.neighbor_set_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v'</span> <span class=\"o\">:</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">□</span> <span class=\"n\">G'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neighbor_set</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"bp\">∪</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">G'.neighbor_set</span> <span class=\"n\">v'</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_neighbor_set</span><span class=\"o\">,</span> <span class=\"n\">box_prod_adj</span><span class=\"o\">,</span> <span class=\"n\">mem_union_eq</span><span class=\"o\">,</span> <span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">prod.mk.inj_iff</span><span class=\"o\">,</span>\n             <span class=\"n\">exists_eq_right_right</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">v'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span><span class=\"o\">),</span> <span class=\"n\">exists_eq_right_right</span><span class=\"o\">],</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">locally_finite</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">□</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">box_prod.neighbor_set_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">box_prod.degree_eq</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v'</span> <span class=\"o\">:</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">□</span> <span class=\"n\">G'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">G.degree</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">G'.degree</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">,</span><span class=\"n\">neighbor_finset</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">box_prod.neighbor_set_eq</span> <span class=\"n\">v</span> <span class=\"n\">v'</span><span class=\"o\">,</span><span class=\"n\">to_finset_union</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n                  <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">G'.neighbor_set</span> <span class=\"n\">v'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">mem_neighbor_set</span><span class=\"o\">,</span>\n               <span class=\"n\">prod.mk.inj_iff</span><span class=\"o\">,</span><span class=\"n\">exists_eq_right_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">a.ne</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span>\n         <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_finset_card</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_of_finset</span><span class=\"o\">,</span>\n               <span class=\"n\">finset.card_image_of_injective</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.inj_right</span> <span class=\"n\">v'</span><span class=\"o\">)],},</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">V'</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"n\">G'.neighbor_set</span> <span class=\"n\">v'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span>\n         <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G'.neighbor_set</span> <span class=\"n\">v'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_finset_card</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_of_finset</span><span class=\"o\">,</span>\n               <span class=\"n\">finset.card_image_of_injective</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.inj_left</span> <span class=\"n\">v</span><span class=\"o\">)],},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.card_disjoint_union</span> <span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>\n<p>I guess this is too <code>have</code>y, let me try and reverse some of the process.</p>",
        "id": 297752301,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662635170
    },
    {
        "content": "<p>Maybe that's slightly better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">box_prod.degree_eq</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v'</span> <span class=\"o\">:</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">□</span> <span class=\"n\">G'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">G.degree</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">G'.degree</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">,</span><span class=\"n\">neighbor_finset</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">box_prod.neighbor_set_eq</span> <span class=\"n\">v</span> <span class=\"n\">v'</span><span class=\"o\">,</span><span class=\"n\">to_finset_union</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.card_disjoint_union</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span>\n         <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_finset_card</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_of_finset</span><span class=\"o\">,</span>\n               <span class=\"n\">finset.card_image_of_injective</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.inj_right</span> <span class=\"n\">v'</span><span class=\"o\">)],},</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">V'</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"n\">G'.neighbor_set</span> <span class=\"n\">v'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span>\n         <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G'.neighbor_set</span> <span class=\"n\">v'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_finset_card</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_of_finset</span><span class=\"o\">,</span>\n               <span class=\"n\">finset.card_image_of_injective</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.inj_left</span> <span class=\"n\">v</span><span class=\"o\">)],},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">mem_neighbor_set</span><span class=\"o\">,</span>\n               <span class=\"n\">prod.mk.inj_iff</span><span class=\"o\">,</span><span class=\"n\">exists_eq_right_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">a.ne</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 297753515,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662635693
    },
    {
        "content": "<p>OK, <a href=\"https://github.com/leanprover-community/mathlib/compare/bottine/box_prod_locally_finite?expand=1\">in a new branch here</a>. I'll make it into a PR soon, if it seems reasonable.</p>",
        "id": 297758316,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662637709
    },
    {
        "content": "<p>You should take a single <code>v</code> rather than <code>v</code> and <code>v'</code> as that's more general</p>",
        "id": 297760392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662638603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  you mean an element of <code>V×V'</code>?</p>",
        "id": 297788602,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662645359
    },
    {
        "content": "<p>Corrected and PRed : <a href=\"https://github.com/leanprover-community/mathlib/pull/16431\">https://github.com/leanprover-community/mathlib/pull/16431</a></p>",
        "id": 297792951,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662646946
    }
]