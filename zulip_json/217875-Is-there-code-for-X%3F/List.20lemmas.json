[
    {
        "content": "<p>Do we have either of these in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">singleton_append</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons_append</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_append</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bind_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons_bind</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_bind</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append_nil</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>I did find the latter in terms of monads, but it would still be nice to have a version specialized to lists.</p>",
        "id": 197045919,
        "sender_full_name": "Chris Wong",
        "timestamp": 1589105159
    },
    {
        "content": "<p><code>library_search</code> is helpful here and finds solution to both.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">singleton_append</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bind_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append_nil</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197048927,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589109231
    },
    {
        "content": "<p>Even if the first is true by <code>rfl</code>, it might not hurt to have the lemma, so that one can rewrite using it.</p>",
        "id": 197053020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589114074
    },
    {
        "content": "<p>Similarly the second can still be useful, as the solution found by <code>library_search</code> is unfolding some definitions, and it might be helpful to have the syntactical statement too.</p>",
        "id": 197053059,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589114141
    },
    {
        "content": "<p>Maybe a <code>reducible</code> setting for <code>library_search</code> would be useful?</p>",
        "id": 197053060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589114141
    },
    {
        "content": "<p>Moreover, potentially both of these lemmas could be <code>@[simp]</code> lemmas?</p>",
        "id": 197053106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589114164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">library_search</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">e</span> <span class=\"o\">{</span> <span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>should do this (i.e. only unfold <code>reducible</code> things), but there is a small bug preventing it from working.</p>",
        "id": 197053453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589114549
    },
    {
        "content": "<p>(the custom <code>apply</code> tactic is only used by <code>solve_by_elim</code> discharging subgoals, not for actually applying library lemmas)</p>",
        "id": 197053457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589114577
    },
    {
        "content": "<p>I'll fix that bug.</p>",
        "id": 197053534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589114678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, if you have an idea for a shortcut syntax for the reducibility setting, I can do that.</p>",
        "id": 197053543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589114720
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2648\" title=\"https://github.com/leanprover-community/mathlib/issues/2648\">#2648</a></p>",
        "id": 197053728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589115005
    },
    {
        "content": "<p>Well, hmm... the best option would be not to have an option, and have library_search try with the <code>reducible</code> setting first. Would this be too slow?</p>",
        "id": 197053904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589115249
    },
    {
        "content": "<p>I'll try to do some experiments. I don't know what to expect: pessimistically, it will take twice as long, optimistically, running with <code>md := reducible</code> could be be much faster (and so potentially even faster overall in cases where it finds something in the first pass).</p>",
        "id": 197092931,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589163803
    },
    {
        "content": "<p>What an interesting discussion!</p>\n<p>Indeed I was using these for <code>rw</code>. With palindromes, there's a lot of <code>x :: (l ++ [x])</code> constructions that take some effort to manipulate.</p>\n<p>I think I'll send a PR then, if at least so they're there next time I reach for them.</p>",
        "id": 197257783,
        "sender_full_name": "Chris Wong",
        "timestamp": 1589280009
    }
]