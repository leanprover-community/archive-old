[
    {
        "content": "<p>I very often use these theorems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_div_eq_succ_div</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_of_odd</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">even_div_2</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_div_2</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_div_2'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>All of them are easy to prove, but I'm wondering is it worth adding some of them to mathlib? Or maybe some of them already exists?</p>",
        "id": 268540238,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642599785
    },
    {
        "content": "<p>The first one is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_add_one\">docs#div_add_one</a>. The second one should be called <code>odd.pos</code> and is true in a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_comm_semiring\">docs#canonically_ordered_comm_semiring</a>.</p>",
        "id": 268545733,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642602039
    },
    {
        "content": "<p>Ok, I may open a PR (except for the first lemma). Which of <code>(n / 2 * 2 + 1 = n)</code> and <code>(n / 2 * 2 = n - 1)</code> is preferred?</p>",
        "id": 268572047,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642612215
    },
    {
        "content": "<p>The first</p>",
        "id": 268572342,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642612333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/data.2Enat.2Eparity/near/268545733\">said</a>:</p>\n<blockquote>\n<p>The first one is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_add_one\">docs#div_add_one</a>. The second one should be called <code>odd.pos</code> and is true in a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_comm_semiring\">docs#canonically_ordered_comm_semiring</a>.</p>\n</blockquote>\n<p>I note we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.odd_gt_zero\">docs#nat.odd_gt_zero</a> which is badly named. Your PR could fix this too!</p>",
        "id": 268572423,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1642612364
    },
    {
        "content": "<p>And generalize it!</p>",
        "id": 268572668,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642612447
    },
    {
        "content": "<blockquote>\n<p>The second one should be called odd.pos and is true in a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_comm_semiring\">docs#canonically_ordered_comm_semiring</a>.</p>\n</blockquote>\n<p>It doesn't seem to be true in any canonically ordered commutative semiring. I guess I need a <code>nontrivial</code> instance. Do I need some more instances on it?</p>",
        "id": 268685662,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642682654
    },
    {
        "content": "<p>None I think</p>",
        "id": 268699712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642688962
    },
    {
        "content": "<p>Ah yes, you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nontrivial\">docs#nontrivial</a></p>",
        "id": 268699861,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642689020
    },
    {
        "content": "<p>Maybe <code>odd.ne_zero</code> would also be useful</p>",
        "id": 268700010,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1642689088
    }
]