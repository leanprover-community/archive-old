[
    {
        "content": "<p>Does mathlib know the following fact? If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> are equivalent categories, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> has (co)limits then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> has (co)limits.</p>",
        "id": 230292487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615781067
    },
    {
        "content": "<p>This should be something like <code>equivalence.preserves_limits</code></p>",
        "id": 230292831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615781411
    },
    {
        "content": "<p>Ooh, that's not exactly it. I guess \"creates limits\"?</p>",
        "id": 230292852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615781434
    },
    {
        "content": "<p>Yeah, we should have the fact that equivalences create limits.</p>",
        "id": 230292982,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615781569
    },
    {
        "content": "<p>But it seems like that's missing too. at least I can't find it.</p>",
        "id": 230292994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615781585
    },
    {
        "content": "<p>I wanted this because I was going to make the has_limits/has_colimits instances for simplicial sets, but there were some stupid universe issues and I wanted to use the skeletal equivalence.</p>",
        "id": 230293026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615781634
    },
    {
        "content": "<p>Eek. I'm not finding it either. <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>?</p>",
        "id": 230299389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615788652
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230299525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615788795
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6687\">#6687</a></p>",
        "id": 230301344,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615790568
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.adjunction.is_equivalence_creates_limits\">docs#category_theory.adjunction.is_equivalence_creates_limits</a></p>",
        "id": 230328463,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615807248
    },
    {
        "content": "<p>It was already there</p>",
        "id": 230328481,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615807263
    },
    {
        "content": "<p>Oh, and even easier.</p>",
        "id": 230329619,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615807865
    },
    {
        "content": "<p>Scaling problems...</p>",
        "id": 230329633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615807873
    },
    {
        "content": "<p>I think lots of the lemmas in that file can be hard to find, perhaps we should add something to the docstrings about them</p>",
        "id": 230329911,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615808041
    },
    {
        "content": "<p>Actually maybe it's sensible to move that file to <code>limits.adjunction</code> and possibly split some things off into <code>limits.equivalence</code></p>",
        "id": 230336479,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615811620
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I'm adding a def for transporting has_(co)limits instances across an equivalence.</p>",
        "id": 230351231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615817791
    }
]