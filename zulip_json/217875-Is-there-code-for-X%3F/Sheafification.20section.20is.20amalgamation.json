[
    {
        "content": "<p>Do we know that every section of the sheafification (of a sheaf of types) is the amalgamation of some sections from the original sheaf?<br>\nFor example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">J.sheafify</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">sieve</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">J</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">presieve.family_of_elements</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">x.comp_presheaf_map</span> <span class=\"bp\">$</span> <span class=\"n\">J.to_sheafify</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_amalgamation</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Tagging <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> since sheafification is your work.</p>",
        "id": 289319257,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657630764
    },
    {
        "content": "<p>No we don't have this. Do you have a proof?</p>",
        "id": 289319376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657630815
    },
    {
        "content": "<p>I could prove that the subset of sections satisfying the condition (<code>image_sheaf (J.to_sheafify F)</code>)  is a subsheaf of <code>J.sheafify F</code>, so that there is a map <code>J.sheafify F ⟶ image_sheaf (J.to_sheafify F)</code> which should show that they are equal.</p>",
        "id": 289319773,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657630984
    },
    {
        "content": "<p>Where is <code>image_sheaf</code>?</p>",
        "id": 289320610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657631366
    },
    {
        "content": "<p>Sorry about the confusion. I just defined it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">image_sheaf</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">G.obj</span> <span class=\"n\">U</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">sieve</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">presieve.family_of_elements</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x.comp_presheaf_map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_amalgamation</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">G.map</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">s.prop</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">J.pullback_stable</span> <span class=\"n\">i.unop</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">x.pullback</span> <span class=\"n\">i.unop</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">W</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">functor_to_types.map_comp_apply</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"n\">j.op</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">hj</span><span class=\"o\">)⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">functor_to_types.map_id_apply</span> <span class=\"n\">G</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">functor_to_types.map_comp_apply</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 289320859,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657631469
    },
    {
        "content": "<p>And there is also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">image_sheaf_is_sheaf</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">presieve.is_sheaf</span> <span class=\"n\">J</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">presieve.is_sheaf</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">image_sheaf</span> <span class=\"n\">J</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where I have a proof already.</p>",
        "id": 289321126,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657631602
    },
    {
        "content": "<p>Ah, I see. Anyway that would be a useful lemma to add!</p>",
        "id": 289321178,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657631634
    },
    {
        "content": "<p>Ok. I'll make it into a PR. Thanks!</p>",
        "id": 289321361,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657631709
    }
]