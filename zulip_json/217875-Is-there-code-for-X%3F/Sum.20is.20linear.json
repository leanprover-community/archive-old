[
    {
        "content": "<p>I'm a bit surprised that I can't find the following lemma anywhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- TODO Convenient coercion to state using `g : α → M →[R] N` instead of the unbundled hypothesis ?</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">finsupp.smul_sum'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f.sum</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have a (horrid) proof that I can tidy up and push but I thought I'd check here first. Any ideas?</p>",
        "id": 229021943,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1614977255
    },
    {
        "content": "<p>Isn't it possible to make <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.smul_sum\">docs#finsupp.smul_sum</a> work here?</p>",
        "id": 229022360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614977403
    },
    {
        "content": "<p>Maybe but I don’t think so: it doesn’t use the scalar action on <code>f</code>, but rather only on the module <code>M</code>.</p>",
        "id": 229023023,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1614977650
    },
    {
        "content": "<p>It seems totally ridiculous but I had to fuss about quite a bit to get a proof.</p>",
        "id": 229023090,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1614977684
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 229023092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614977685
    },
    {
        "content": "<p>Here's a sketch, but I can't find anything like <code>finsupp.foo</code> either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finsupp.foo</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"bp\">+</span> <span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f1.sum</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">f2.sum</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- TODO Convenient coercion to state using `g : α → M →[R] N` instead of the unbundled hypothesis ?</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">finsupp.smul_sum'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f.sum</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp.induction</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp.foo</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp.sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp.sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- follows from linearity</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229024585,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614978303
    },
    {
        "content": "<p>oh, maybe this is it? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum_smul_index\">docs#finsupp.sum_smul_index</a></p>",
        "id": 229025242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614978573
    },
    {
        "content": "<p>No, not quite.</p>",
        "id": 229025440,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614978642
    },
    {
        "content": "<p>Ok, here it is golfed a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- TODO Convenient coercion to state using `g : α → M →[R] N` instead of the unbundled hypothesis ?</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">finsupp.smul_sum'</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp.induction</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finsupp.sum_zero_index</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp.sum_add_index</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229025600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614978710
    },
    {
        "content": "<p>Note I changed <code>g</code></p>",
        "id": 229025611,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614978714
    },
    {
        "content": "<p>Thanks, this is great :-) My horrid proof only assumed <code>g</code> to be a family of <code>mul_action_hom</code>s but in my application I have full linearity so I'll go with this.</p>",
        "id": 229036201,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1614983816
    },
    {
        "content": "<p>There's definitely a one-line proof for this...</p>",
        "id": 229039878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614985801
    },
    {
        "content": "<p>What's the statement for a general add_monoid_hom, not just <code>t \\smul</code></p>",
        "id": 229040593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614986143
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.map_finsupp_sum\">docs#add_monoid_hom.map_finsupp_sum</a> applied to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_add_hom\">docs#smul_add_hom</a> should be half of the puzzle I think</p>",
        "id": 229042121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614987063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Sum.20is.20linear/near/229042121\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.map_finsupp_sum\">docs#add_monoid_hom.map_finsupp_sum</a> applied to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_add_hom\">docs#smul_add_hom</a> should be half of the puzzle I think</p>\n</blockquote>\n<p>If I'm reading it right, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.map_finsupp_sum\">docs#add_monoid_hom.map_finsupp_sum</a> does not apply here. The <code>smul</code> on the LHS of my <code>(t • f).sum g = t • (f.sum g)</code> is a scalar action on <code>α →₀ M</code> whereas the LHS of <code>map_finsupp_sum</code> consumes <code>f.sum g</code> which is an element of <code>N</code>.</p>",
        "id": 229116654,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615053842
    },
    {
        "content": "<p>(Note also that I require a <code>semimodule</code> structure for my statement to make sense.)</p>",
        "id": 229116759,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615053945
    },
    {
        "content": "<p>I wouldn't be surprised if there is a one-line proof and I would love if someone could find it (maybe GPTf <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>).</p>",
        "id": 229116761,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615053949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Sum.20is.20linear/near/229040593\">said</a>:</p>\n<blockquote>\n<p>What's the statement for a general add_monoid_hom, not just <code>t \\smul</code></p>\n</blockquote>\n<p>This is a great point of course but if this result really is missing (as I now believe) then I think the corresponding general statement would use it, rather than the other way around. Anyway, I only have a few minutes so I'd better stop waffling and see if I can PR Adam's proof.</p>",
        "id": 229116849,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615054023
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/6565\">https://github.com/leanprover-community/mathlib/pull/6565</a></p>",
        "id": 229120102,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615056793
    }
]