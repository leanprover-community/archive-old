[
    {
        "content": "<p>Do we have <code>(Π a b, φ a b) ≃ (Π b a, φ a b)</code> (which is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.swap\">docs#function.swap</a> both ways) ? I couldn't find anything in the usual <code>logic/equiv/basic</code>, and <code>library_search</code> seems to agree, but it feels weird that we don't have it</p>",
        "id": 285460783,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1654726899
    },
    {
        "content": "<p>Maybe we could bundle <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.transpose\">docs#matrix.transpose</a> as an <code>equiv</code> using this?</p>",
        "id": 285495254,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654759170
    },
    {
        "content": "<p>I think that bundling would lose us notation (and so shouldn't replace <code>transpose</code>)</p>",
        "id": 285496321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654759834
    },
    {
        "content": "<p>But we do already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.transpose_ring_equiv\">docs#matrix.transpose_ring_equiv</a></p>",
        "id": 285496334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654759849
    },
    {
        "content": "<p>(and weaker versions)</p>",
        "id": 285496428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654759918
    },
    {
        "content": "<p>This works though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.synonym</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a.of_dual</span> <span class=\"c1\">-- ⇑order_dual.of_dual a : α</span>\n<span class=\"k\">#check</span> <span class=\"n\">a.to_dual</span> <span class=\"c1\">-- ⇑order_dual.to_dual a : αᵒᵈᵒᵈ</span>\n</code></pre></div>",
        "id": 285496824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654760184
    },
    {
        "content": "<p>I'm talking about <code>Mᵀ</code> notation (in the pretty printer)</p>",
        "id": 285496896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654760254
    }
]