[
    {
        "content": "<p>Is there a code to intercept the result of <code>tactic.trace</code>? More specifically, I would like a tactic that turns a <code>tactic unit</code> into a <code>tactic string</code>, the output string being the (maybe empty) string that is traced by the original tactic.</p>",
        "id": 259344668,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1635401750
    },
    {
        "content": "<p>I think there isn't.</p>",
        "id": 259346036,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635403252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251825\">@Frédéric Le Roux</span> I'm currently learning about metaprogramming and stumbled across this thread while looking for recent tactic feature requests that I could try my hand at. I'm not 100% sure I can help, but I'm willing to give it a go. Can you be more specific about the use case that you're trying to address?</p>",
        "id": 262502243,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1637695821
    },
    {
        "content": "<p>Unfortunately I don't think this is solveable with a Lean metaprogram, you'd have to dig into the C++ source.</p>",
        "id": 262504609,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1637697072
    },
    {
        "content": "<p><em>Maybe</em> there's a very hackish way to do it but it won't be pretty...</p>",
        "id": 262504672,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1637697119
    },
    {
        "content": "<p>Ya, I kinda wondered - I did some initial exploration but couldn't see how best to grab a hold of the necessary objects. Thought I might have been misinterpreting the request tho.</p>",
        "id": 262512356,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1637700919
    },
    {
        "content": "<p>Thanks for your answer. I have actually modified all my tactics into <code>tactic string</code> \"by hand\", i.e. without using tactic.trace.<br>\nThe original motivation was to be able to compose various tactics with the <code>or else</code> connector and retrieve the code that actually worked (like in the \"Try\" message). I ended up rewriting all the tactics so that they return their own code. If you are interested, you can have a look at <br>\n<a href=\"https://github.com/dEAduction/dEAduction-lean/blob/master/src/lean_src_deaduction_synchro/compute3.lean\">https://github.com/dEAduction/dEAduction-lean/blob/master/src/lean_src_deaduction_synchro/compute3.lean</a><br>\nwhich contains a bunch of tactics for solving inequalities. (Mostly inefficient for the moment, unfortunately. I would love to have something usable...).</p>",
        "id": 262585793,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1637759354
    }
]