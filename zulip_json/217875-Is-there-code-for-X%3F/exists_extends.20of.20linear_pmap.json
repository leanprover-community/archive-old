[
    {
        "content": "<p>I want to define a linear map, which takes some (fixed) value on a given non-zero vector. I found <code>linear_pmap.mk_span_singleton</code>, which gives the partially defined map and <code>linear_map.exists_extend</code> which does the extension, but it seems awfully convoluted to prove<br>\n<code>f := classical.some (linear_pmap.mk_span_singleton x y _).to_fun.exists_extend</code> satisfies <code>f x = y</code>. It feels like I am not doing the correct thing here, is there a better way to do this?</p>",
        "id": 272978562,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1645636023
    },
    {
        "content": "<p>You could extend to a basis and send all basis elements to the fixed value and then extend linearly</p>",
        "id": 272994835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645642365
    },
    {
        "content": "<p>I thought there might something like that already for linearly independent sets.</p>",
        "id": 272995384,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1645642650
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.exists_extend\">docs#linear_map.exists_extend</a></p>",
        "id": 272996196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645642993
    },
    {
        "content": "<p>I would just use classical.some and <em>immediately</em> use classical.some_spec to get the API for the classical.some; you can take it from there.</p>",
        "id": 272996564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645643155
    },
    {
        "content": "<p>My basis idea, you'll still need classical.some to get the basis so it's no better</p>",
        "id": 272996664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645643180
    },
    {
        "content": "<p><code>classical.some</code> is one of these things which is much easier to use once you've figured out the trick, which is to <code>let f := classical.some h</code> and then to immediately write <code>have hf : P f := classical.some_spec h</code> where <code>h : ∃ g, P g</code>.</p>",
        "id": 272997028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645643335
    },
    {
        "content": "<p>Then you have everything you need with <code>hf</code> and never need to write <code>classical.some</code> or start guessing what an underscore stands for ever again</p>",
        "id": 272997128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645643400
    },
    {
        "content": "<p>Does this solve your problem?</p>",
        "id": 272997272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645643478
    },
    {
        "content": "<p>I did not get it to work yet, but it certainly helps.</p>",
        "id": 272999952,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1645644731
    },
    {
        "content": "<p>lol <code>mk_span_singleton</code> seems to have 0 API!</p>",
        "id": 273010965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645650109
    },
    {
        "content": "<p>You better not have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/DFA\">docs#DFA</a> then <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 273011389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645650322
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- seems to be missing; this should be in mathlib.</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_pmap.mk_span_singleton_apply'</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">linear_pmap.mk_span_singleton</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">submodule.mem_span_singleton_self</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})⟩</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">linear_pmap.mk_span_singleton_apply</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">submodule.mem_span_singleton_self</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- your function</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span>  <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">linear_map.exists_extend</span> <span class=\"o\">(</span><span class=\"n\">linear_pmap.mk_span_singleton</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- immediately make the proof</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">f_spec</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">hv</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">∙</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">linear_pmap.mk_span_singleton</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">linear_map.exists_extend</span> <span class=\"o\">(</span><span class=\"n\">linear_pmap.mk_span_singleton</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- now it's not so bad</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">hv</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">f_spec</span> <span class=\"n\">k</span> <span class=\"n\">hv</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_map.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">submodule.mem_span_singleton_self</span> <span class=\"n\">v</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_pmap.mk_span_singleton_apply'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273012028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645650677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span></p>",
        "id": 273012050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645650691
    },
    {
        "content": "<p>thank you so much</p>",
        "id": 273012857,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1645651201
    },
    {
        "content": "<p>Thank you for your recent PRs.</p>",
        "id": 273012917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645651216
    },
    {
        "content": "<p>In a tactic block you can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#choose\">tactic#choose</a> to get <code>f</code> and <code>f_spec</code> at once, even when (as here) there aren't any foralls involved.</p>",
        "id": 273013284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645651452
    },
    {
        "content": "<p>In fact the docstring for <code>choose</code> is somehow way too complex; it never showcases the simplest use case, which is proving that a surjection has a one-sided inverse; it's on my job list to make a PR adding that example. All the examples have two \\forall s, I thought the base case was one but I've just learnt that in fact it's zero :-)</p>",
        "id": 273013473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645651563
    }
]