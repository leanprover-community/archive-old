[
    {
        "content": "<p>Just started exploring the analysis part of mathlib. Why can't Lean infer the instance <code>nontrivial ℝ</code>? How would you prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_div_iff</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span> <span class=\"c1\">-- why can't Lean infer nontrivial ℝ?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296426831,
        "sender_full_name": "Winston Yin",
        "timestamp": 1661971261
    },
    {
        "content": "<p>Can you include imports?</p>",
        "id": 296426939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661971300
    },
    {
        "content": "<p>(sorry, I meant to post this on #general)</p>",
        "id": 296426975,
        "sender_full_name": "Winston Yin",
        "timestamp": 1661971312
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.mfderiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.ODE.picard_lindelof</span>\n</code></pre></div>",
        "id": 296427057,
        "sender_full_name": "Winston Yin",
        "timestamp": 1661971328
    },
    {
        "content": "<p>Same behaviour with just:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.ODE.picard_lindelof</span>\n</code></pre></div>",
        "id": 296427147,
        "sender_full_name": "Winston Yin",
        "timestamp": 1661971363
    },
    {
        "content": "<p>I'm finding that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.ODE.picard_lindelof</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_div_iff</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works just fine on a recent mathlib</p>",
        "id": 296427606,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661971523
    },
    {
        "content": "<p>When you mean \"why can't Lean infer nontrivial ℝ?\", do you mean \"why am I presented this goal?\"?</p>",
        "id": 296427712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661971559
    },
    {
        "content": "<p>I've never really understood what causes <code>rw</code> to need to introduce instance goals (especially since there are a number of others here that it seems to find just fine), but giving it a hint that the lemma is about the reals helps it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_div_iff</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_two</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296428411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661971773
    },
    {
        "content": "<p>This is a recurring problem with the <code>zero_lt_...</code> lemmas, so I'm adding a version with the type explicit in <a href=\"https://github.com/leanprover-community/mathlib/pull/16172\">#16172</a>.</p>",
        "id": 296429237,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661972070
    },
    {
        "content": "<p><code>linarith</code> also works :)</p>",
        "id": 296429962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661972305
    },
    {
        "content": "<p>Or just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/half_pos\">docs#half_pos</a></p>",
        "id": 296430059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661972346
    },
    {
        "content": "<p>but who can remember that?!</p>",
        "id": 296430083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661972357
    },
    {
        "content": "<p>Me, in fact <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 296430109,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661972369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can't.20infer.20nontrivial.20.E2.84.9D/near/296427712\">said</a>:</p>\n<blockquote>\n<p>When you mean \"why can't Lean infer nontrivial ℝ?\", do you mean \"why am I presented this goal?\"?</p>\n</blockquote>\n<p>Yeah. Why would Lean present me with this goal when <code>apply_instance</code> ends up finding it with no extra steps anyway?</p>",
        "id": 296431013,
        "sender_full_name": "Winston Yin",
        "timestamp": 1661972675
    },
    {
        "content": "<p>In the past when I've seen this behaviour it was because my own lemma included an unnecessary / unused typeclass variable</p>",
        "id": 296431112,
        "sender_full_name": "Winston Yin",
        "timestamp": 1661972720
    },
    {
        "content": "<p>I think the reason has to do with the internals of how <code>rw</code> fills in metavariables.</p>",
        "id": 296431185,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661972747
    }
]