[
    {
        "content": "<p>Currently I have a few goals of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ha.unit</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which I just proof by endless manual blocks of <code>rw mul_comm</code> and rw <code>mul_assoc</code> along with the key input <code>(h : ↑(ha.unit)⁻¹ * a = 1)</code>. Is there any tactic that would help doing that?</p>\n<p>Basically multiplying both sides of an equality with <code>a</code> if there is a hypothesis like <code>h</code> present and cancel them out.<br>\n<code>field_simp</code> does something very similar, for example it solves</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>so I had the idea of copying the <code>field_simp</code> tactic and modifying it slightly, but haven't been successful so far.</p>",
        "id": 286896891,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1655809568
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assoc_rw\">tactic#assoc_rw</a> can be helpful here, it rewrites up to associativity</p>",
        "id": 286922661,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655822094
    },
    {
        "content": "<p>So you can just do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ha.unit</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">assoc_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">is_unit.mul_coe_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 286922695,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655822108
    },
    {
        "content": "<p>I was hoping that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span> <span class=\"n\">using</span> <span class=\"n\">id</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_unit.unit_of_coe_units</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>would be useful here, as then the goal becomes <code>↑a * b * (↑a⁻¹ * c) = b * c</code>. It's pretty trick to extend the simp set of <code>field_simps</code> though to work with coerced units like this though</p>",
        "id": 286923709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655822572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> has marked this topic as unresolved.</p>",
        "id": 286959000,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655837679
    },
    {
        "content": "<p>If I add a <code>field_simps</code>-lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[field_simps]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_eq_one_divp'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/ₚ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">one_divp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>remove <code>one_divp</code> (which says<code>1 /ₚ x = ↑x⁻¹</code>), and mark a few pdiv-lemmas as <code>@[field_simp]</code> then <code>field_simp</code> can handle partial division <code>/ₚ</code> just like normal division. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>Still need your <code>lift</code> trick first, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>,  to get all the <code>is_unit</code> hypotheses into the correct shape before calling <code>field_simp, ring,</code> then to do all the calculation.</p>",
        "id": 286959018,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1655837687
    },
    {
        "content": "<p>(The lemma has this weird form instead of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[field_simps]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_eq_one_divp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/ₚ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_divp</span>\n</code></pre></div>\n<p>because <code>field_simp</code> uses <code>inv_eq_one_div</code> always first and turns <code>↑x⁻¹</code> directly into <code>↑(1 / x)</code> for any <code>x : αˣ</code>.)</p>",
        "id": 286959600,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1655837942
    },
    {
        "content": "<p>The in-development <code>polyrith</code> tactic <a href=\"https://github.com/leanprover-community/mathlib/pull/14878\">#14878</a> should do this after you add all relevant <code>(h : ↑(ha.unit)⁻¹ * a = 1)</code> to the list of hypotheses.</p>",
        "id": 286975052,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1655845902
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"452188\">@Dhruv Bhatia</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span></p>",
        "id": 286975211,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1655846003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> has marked this topic as unresolved.</p>",
        "id": 287198450,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655994563
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 287199281,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1655994884
    },
    {
        "content": "<p>Related to this, can anybody explain what happens here? I think something to do with instances <code>units.group</code> and <code>units.comm_group</code>, maybe simply some instance priority?</p>\n<p>The following example times out, unless I specify a group instance manually</p>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> on the current master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">mul_div_cancel'_right</span> <span class=\"n\">d</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"c1\">-- times out. same for `simp`</span>\n  <span class=\"c1\">-- works if one replaces [comm_ring R] with [comm_monoid R]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- My instance</span>\n<span class=\"kd\">instance</span> <span class=\"n\">myinst</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"n\">comm_group.to_group</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">mul_div_cancel'_right</span> <span class=\"n\">d</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287214832,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656001523
    },
    {
        "content": "<p>Outsmarted myself, but I think the problem above exists indeed. Any help?</p>",
        "id": 287215009,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656001598
    },
    {
        "content": "<p>investigating this a bit I see sometimes <code>comm_ring.to_ring</code> and then <code>ring.to_monoid</code> and in other terms <code>comm_ring.to_comm_monoid</code> and then <code>comm_monoid.to_monoid</code>...</p>",
        "id": 287215909,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656001939
    },
    {
        "content": "<p>Another data point; <code>: _</code> fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- works</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_div_cancel'_right</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287216398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656002159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60field_simp.60.20for.20units/near/287216398\">said</a>:</p>\n<blockquote>\n<p>Another data point; <code>: _</code> fixes it:</p>\n</blockquote>\n<p>I'm closing in on this, I think I'll get there when I look at it tomorrow, the following works (writing Eric's example more explicitely with the help of <code>show_term</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">mul_div_cancel'_right</span>\n    <span class=\"n\">R</span><span class=\"bp\">ˣ</span> <span class=\"c1\">-- (@units R (@ring.to_monoid R (@comm_ring.to_ring R _inst_1)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.comm_group</span> <span class=\"n\">R</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- (@comm_ring.to_comm_monoid R _inst_1)</span>\n    <span class=\"n\">d</span>\n    <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So it really seems like <code>simp</code> goes down the wrong instances when trying to find this second argument <code>[comm_group Rˣ]</code>...</p>",
        "id": 287223708,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656005674
    },
    {
        "content": "<p><code>simp</code> isn't relevant here, it fails in term mode without the explicit arguments too - this is a unification problem</p>",
        "id": 287223962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656005820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60field_simp.60.20for.20units/near/287223962\">said</a>:</p>\n<blockquote>\n<p><code>simp</code> isn't relevant here, it fails in term mode without the explicit arguments too - this is a unification problem</p>\n</blockquote>\n<p>You are right, sorry. What I meant with <code>simp</code> is that <code>mul_div_cancel'_right</code> is a <code>simp</code>-lemma, so my original problem was of the form <code>example (R : Type*) [comm_ring R] (c d : Rˣ) : d * (c / d) = c := by simp</code> and that should work ideally after finding this issue.</p>",
        "id": 287230958,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656009209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nThe solution to this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">400</span><span class=\"o\">]</span> <span class=\"n\">ring.to_monoid</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">600</span><span class=\"o\">]</span> <span class=\"n\">comm_monoid.to_monoid</span>\n</code></pre></div>\n<p>to prefer the commutative monoid way of going <code>comm_ring → ring/comm_monoid → monoid</code>. Are there any specific numbers that the priorities should be and where would you put these two statements? Underneath the definitions <code>ring</code> and <code>comm_ring</code> respectively?</p>",
        "id": 287311675,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656064834
    },
    {
        "content": "<p>That's probably not a good idea; there are likely other bits of mathlib that rely on the priorities being in the reverse order</p>",
        "id": 287311737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656064884
    },
    {
        "content": "<p>Hmm what could be another approach then?</p>",
        "id": 287312209,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656065195
    },
    {
        "content": "<p>If you are just looking at <code>(R, *)</code>, what could be a problem where you would want to forget commutativity first before forgetting the <code>+</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 287312392,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656065323
    },
    {
        "content": "<p>Interestingly just the one line <code>attribute [instance, priority 100] comm_monoid.to_monoid</code> (without anything for <code>ring.to_monoid</code>) makes it work while <code>attribute [instance, priority 99] comm_monoid.to_monoid</code> makes it fail.</p>",
        "id": 287313146,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656065884
    },
    {
        "content": "<p>Does <code>attribute [-instance] ring.to_monoid</code> work?</p>",
        "id": 287323136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656073030
    },
    {
        "content": "<p>There's no actual need for that instance, lean can work it out via <code>ring.to_semiring.to_monoid</code></p>",
        "id": 287323156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656073045
    },
    {
        "content": "<p>(for others: <a href=\"https://github.com/leanprover-community/mathlib/pull/14923\">#14923</a> was created based on an earlier message)</p>",
        "id": 287323452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656073248
    },
    {
        "content": "<p>Not in my quick test, what's the difference between <code>attribute</code> and <code>local attribute</code>? It always wants me to write the latter and then times out again</p>",
        "id": 287325381,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656074462
    },
    {
        "content": "<p>How about <code>attribute [instance, priority 0] ring.to_monoid</code>?</p>",
        "id": 287326021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656074825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60field_simp.60.20for.20units/near/287326021\">said</a>:</p>\n<blockquote>\n<p>How about <code>attribute [instance, priority 0] ring.to_monoid</code>?</p>\n</blockquote>\n<p>The following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">99</span><span class=\"o\">]</span> <span class=\"n\">ring.to_monoid</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">99</span><span class=\"o\">]</span> <span class=\"n\">monoid_with_zero.to_monoid</span>\n</code></pre></div>\n<p>Looks like <code>ring.to_monoid</code>, <code>monoid_with_zero.to_monoid</code> and <code>comm_monoid.to_monoid</code> have all priority <code>100</code>, therefore this example works as soon as you tell it which of the three to use first.</p>",
        "id": 287333119,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656078709
    },
    {
        "content": "<p>Note that the default in case of a tie is to use the most-recently-declared one</p>",
        "id": 287333633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656078947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60field_simp.60.20for.20units/near/287333633\">said</a>:</p>\n<blockquote>\n<p>Note that the default in case of a tie is to use the most-recently-declared one</p>\n</blockquote>\n<p>That's why writing <code>attribute [instance, priority 100] comm_monoid.to_monoid</code> into my file made it work too: it moves <code>comm_monoid.to_monoid</code> back on top of the stack <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 287334056,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656079130
    },
    {
        "content": "<p>Huh, I didn't know it worked that way, but I guess that makes sense</p>",
        "id": 287335110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656079630
    },
    {
        "content": "<p>I still think that <code>ring.to_monoid</code> should have priority 0</p>",
        "id": 287335151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656079649
    },
    {
        "content": "<p>(like <code>algebra.to_has_scalar</code>)</p>",
        "id": 287335164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656079655
    },
    {
        "content": "<p>It's rather harder to argue which of <code>monoid_with_zero.to_monoid</code> and <code>comm_monoid.to_monoid</code> should take preference</p>",
        "id": 287335284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656079696
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/pl6gcxnGU1qH3Svqdvuu331f/c4319d2b-cb63-400e-90c2-647b5d67907f.jpg\">c4319d2b-cb63-400e-90c2-647b5d67907f.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pl6gcxnGU1qH3Svqdvuu331f/c4319d2b-cb63-400e-90c2-647b5d67907f.jpg\" title=\"c4319d2b-cb63-400e-90c2-647b5d67907f.jpg\"><img src=\"/user_uploads/3121/pl6gcxnGU1qH3Svqdvuu331f/c4319d2b-cb63-400e-90c2-647b5d67907f.jpg\"></a></div>",
        "id": 287338355,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656081128
    },
    {
        "content": "<p>Looks like there is this kind of square, all have priority 100. After removing <code>ring.to_monoid</code> I wonder if all the horizontal ones should have higher priority?</p>",
        "id": 287338503,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1656081205
    },
    {
        "content": "<p>It's more of a hypercube than a square, but you're certainly thinking about this the right way</p>",
        "id": 287345471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656084341
    },
    {
        "content": "<p>(the other dimensions remove associativity and 1)</p>",
        "id": 287345500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656084351
    }
]