[
    {
        "content": "<p>Can we for example proof that if V is a 9-dimensional vector space, and X and Y are two 5-dimensional subspaces, then X \\cap Y is non-zero? I'm happy to do the work proving the lemma but I don't know where to start. Do we have dim(X+Y)=dim(X)+dim(Y)-dim(X \\cap Y)? Is it some statement about cardinals instead of naturals?</p>",
        "id": 201653013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592855839
    },
    {
        "content": "<p>Oh great, search works :-) I am now reading <code>linear_algebra.finite_dimensional</code></p>",
        "id": 201653498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592856090
    },
    {
        "content": "<p>meh, the thing I want is only proved for arbitrary vector spaces as far as I can see. The API is good enough to prove the finite-dimensional case; maybe I should add it though.</p>",
        "id": 201661261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592860147
    },
    {
        "content": "<p>from reading the docs in that file, it seems like \"port more stuff from cardinal dimension\" is a goal, so probably your lemma should be PRed</p>",
        "id": 201663969,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592861634
    },
    {
        "content": "<p>A mathematics lecturer with no Lean background was asking me about this lemma -- they wanted to know if this sort of thing was possible in Lean. Here's the proof I knocked up for them :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- boilerplate -- ignore for now</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">vector_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"c1\">-- Let&#39;s prove that if V is a 9-dimensional vector space, and X and Y are 5-dimensional subspaces</span>\n<span class=\"c1\">-- then X ∩ Y is non-zero</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">five_inter_five_in_nine_is_nonzero</span>\n<span class=\"c1\">-- let K be a field</span>\n<span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- let V be a finite-dimensional vector space over K</span>\n<span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hVfin</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- and let&#39;s assume V is 9-dimensional</span>\n<span class=\"c1\">-- (note that dim will return a cardinal! findim returns a natural number)</span>\n<span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Let X and Y be subspaces of V</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- and let&#39;s assume they&#39;re both 5-dimensional</span>\n<span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">K</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- then X ∩ Y isn&#39;t 0</span>\n<span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊓</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span>\n\n<span class=\"c1\">-- Proof</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"c1\">-- I will give a proof which uses *the current state of mathlib*.</span>\n<span class=\"c1\">-- Note that mathlib can be changed, and other lemmas can be proved,</span>\n<span class=\"c1\">-- and notation can be created, which will make this proof much more</span>\n<span class=\"c1\">-- recognisable to undergraduates</span>\n\n<span class=\"c1\">-- The key lemma from the library we&#39;ll need is that dim(X + Y) + dim(X ∩ Y) = dim(X)+dim(Y)</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⊔</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⊓</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">dim_sup_add_dim_inf_eq</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- Unfortunately this is only proved in the library, right now, for arbitrary vector</span>\n<span class=\"c1\">-- spaces (i.e no finite dimension assumptions). This can be fixed, by adding the</span>\n<span class=\"c1\">-- finite-dimensional version. The point is that there&#39;s an invisible map from natural</span>\n<span class=\"c1\">-- numbers to cardinals, but it is a map; key is currently a statement about cardinals.</span>\n\n<span class=\"c1\">-- Because the lemma is not proved for finite-dimensional spaces, I have to</span>\n<span class=\"c1\">-- deduce it from the cardinal version</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">findim_eq_dim</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">},</span>\n<span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- `key` is now a statement about natural numbers. It says dim(X+Y)+dim(X∩Y)=dim(X)+dim(Y)</span>\n<span class=\"c1\">-- Now let&#39;s substitute in the hypothesis that dim(X)=dim(Y)=5</span>\n<span class=\"n\">rw</span> <span class=\"n\">hX</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hY</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- so now we know dim(X+Y)+dim(X∩Y)=10.</span>\n\n<span class=\"c1\">-- Let&#39;s now turn to the proof of the theorem.</span>\n<span class=\"c1\">-- Let&#39;s prove it by contradiction. Assume X∩Y is 0</span>\n<span class=\"n\">intro</span> <span class=\"n\">hXY</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- then we know dim(X+Y) + dim(0) = 10</span>\n<span class=\"n\">rw</span> <span class=\"n\">hXY</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- and dim(0) = 0</span>\n<span class=\"n\">rw</span> <span class=\"n\">findim_bot</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- so the dimension of X+Y is 10</span>\n\n<span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- But the dimension of a subspace is at most the dimension of a space</span>\n\n<span class=\"k\">have</span> <span class=\"n\">key2</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">K</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⊔</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">findim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">findim_le</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⊔</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n\n<span class=\"c1\">-- and now we can get our contradiction by just doing linear arithmetic</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201664770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592862189
    },
    {
        "content": "<p>I don't have time to PR this tonight, but this is an attempt to show a mathematician interested in using Lean for teaching how to a question on his problem sheet, so the easier on the eye we can make it the better.</p>",
        "id": 201665083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592862423
    },
    {
        "content": "<p>Why do you set the <code>hVfin : finite_dimensional K V</code> as opposed to <code>[finite_dimensional K V]</code>?</p>",
        "id": 201665694,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592862867
    },
    {
        "content": "<p>It's a bit confusing, because your other hypotheses <code>h*</code> are equalities, and <code>X Y</code> are terms of a type, but <code>hVfin</code> is a hypothesis but not an equality.</p>",
        "id": 201665825,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592862943
    },
    {
        "content": "<p>Is it worth renaming <code>findim</code> to <code>dim</code> and using <code>infindim</code> for infinite dimension. How often does reasoning about infinite dimension come up? My guess is not that much</p>",
        "id": 201667711,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592864031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> I've never used that stuff before -- if it was a class I missed it, it's just an error on my part. Thanks!</p>",
        "id": 201672102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592867428
    },
    {
        "content": "<p>I think this stuff about dimensions was written by Mario when he was under the impression that ordinals and cardinals were actually used by mathematicians</p>",
        "id": 201672169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592867511
    },
    {
        "content": "<p>I think there's also an argument for card being the finite one (sending infinite sets/types to zero) and infincard being the cardinal one. I might be biased here, I never see cardinals in number theory, perhaps they show up in other courses. It's perhaps worth noting that cardinals are defined in the Imperial curriculum in an optional 3rd year logic course which is not a prerequisite for any other course</p>",
        "id": 201672345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592867662
    },
    {
        "content": "<p>I like this proposal to give the cardinal valued versions the clumsier names!</p>",
        "id": 201675717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592870618
    },
    {
        "content": "<p>that's fine with me. In the original version there was no <code>findim</code> at all, the idea was to use <code>dim</code> and coercion</p>",
        "id": 201677463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592872447
    },
    {
        "content": "<p>I believe the case of countably infinite dimension comes up reasonably often</p>",
        "id": 201677483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592872490
    },
    {
        "content": "<p>e.g. Hilbert spaces</p>",
        "id": 201677489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592872503
    },
    {
        "content": "<p>Uncountably infinite dimension is mostly only useful for choicy constructions like Hamel bases</p>",
        "id": 201677567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592872566
    },
    {
        "content": "<p>i think you don't use dimension-based arguments very much in that context, precisely because cardinal arithmetic isn't strong enough to help you</p>",
        "id": 201677568,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592872568
    },
    {
        "content": "<p>No, but you need to be able to say \"this has dimension omega\"</p>",
        "id": 201677581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592872596
    },
    {
        "content": "<p>for sure</p>",
        "id": 201677584,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592872603
    },
    {
        "content": "<p>we ended up defining \"this has dimension &lt; omega\" as a typeclass because it makes sense</p>",
        "id": 201677596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592872622
    },
    {
        "content": "<p>But I think in more general circumstances it is more useful to be able to reason about free modules than bases directly</p>",
        "id": 201677679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592872694
    },
    {
        "content": "<p>I'm arguing only in favor of \"findim gets used much more than dim\" (and therefore deserves the shorter names)</p>",
        "id": 201677680,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592872695
    }
]