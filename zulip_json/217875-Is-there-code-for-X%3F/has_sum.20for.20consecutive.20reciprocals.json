[
    {
        "content": "<p>Is there a lemma stating that the sum of consecutive reciprocals is one?  E.g. like this<br>\nEdit : See the correction by Kevin Buzzard below, still looking for an answer.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_sum_cons_rec</span><span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">k.succ</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k.succ.succ</span><span class=\"o\">)))</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283926370,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1653505119
    },
    {
        "content": "<p>As you state it, the sum will be zero ;-) because Lean will by default assume that <code>1/(k.succ*(k.succ.succ))</code> is a natural number, and division in the natural numbers rounds down, so it's a sum of zeros.</p>",
        "id": 283926754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653505270
    },
    {
        "content": "<p>This should be true though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_sum_cons_rec</span><span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and you can even sum <code>1/(k*(k+1))</code> because in the reals 1/0 is defined to be a junk value, which happens to be zero.</p>",
        "id": 283927102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653505439
    },
    {
        "content": "<p>Not in mathlib, but I have this in the unit fractions project! Along with the versions starting from any natural, to get sum 1/k</p>",
        "id": 283937693,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653511219
    },
    {
        "content": "<p>The partial sums are essentially the result of <code>archive/100-theorems-list/42_inverse_triangle_sum.lean</code>, so if any results like this go in mathlib proper, maybe that file should be refactored to use them (unless something about handling the infinite sum makes things fundamentally different).</p>",
        "id": 283957514,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1653525225
    }
]