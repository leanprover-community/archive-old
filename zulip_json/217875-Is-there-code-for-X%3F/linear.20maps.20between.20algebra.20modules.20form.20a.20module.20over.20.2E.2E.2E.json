[
    {
        "content": "<p>Do we have somewhere:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">linear_map_algebra_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I'm not finding it so far, but perhaps it hasn't been done.</p>",
        "id": 198180796,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589971642
    },
    {
        "content": "<p>(If <code>V</code> and <code>W</code> are <code>R</code> modules, we have an instance for <code>module R (V →ₗ[R] W)</code>, and of course it's just not true that there is a <code>module S (V →ₗ[S] W)</code> instance at all.)</p>",
        "id": 198180924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589971706
    },
    {
        "content": "<p>is there a canonical module structure?</p>",
        "id": 198181048,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589971785
    },
    {
        "content": "<p>You just define <code>(r • f) v = f (r • v)</code>, and use that fact that <code>r</code> commutes with everything in <code>S</code> to check that this is still an <code>S</code>-linear map.</p>",
        "id": 198181263,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589971916
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2759\">#2759</a></p>",
        "id": 198186496,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589975356
    }
]