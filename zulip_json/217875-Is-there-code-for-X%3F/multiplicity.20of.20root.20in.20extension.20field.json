[
    {
        "content": "<p>I was happily counting roots and then I ran into this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">\\</span><span class=\"n\">ne</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">root_multiplicity</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"n\">multiset.count</span> <span class=\"n\">a</span> <span class=\"n\">p.roots</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It says that if a is a root of p, then the multiplicity of a as a root of p doesn't change when you increase the base field. In general this multiplicity can jump from 0 to positive as the field gets bigger, but if it's already positive then it can't go up any more.</p>",
        "id": 286736361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655682823
    },
    {
        "content": "<p><del>It can jump from 0 to positive only if <code>a</code> is not in <code>K</code> ... You want <code>a : L</code> right? But then it seems impossible to write down the statement ...</del> Actually, I think it can never jump.</p>",
        "id": 286742946,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655691589
    },
    {
        "content": "<p>The jump might refer to the inequality in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.count_map_roots\">docs#polynomial.count_map_roots</a> may be a strict equality. But that's because <code>multiset.map ⇑f p.roots</code> doesn't count roots outside of <code>K</code> at all.</p>",
        "id": 286745044,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655694080
    },
    {
        "content": "<p>I believe the injective hypothesis can be replaced with <code>p.map f ≠ 0</code> in both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.le_root_multiplicity_map\">docs#polynomial.le_root_multiplicity_map</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.count_map_roots\">docs#polynomial.count_map_roots</a>; with the injectivity hypothesis we ought be be able to prove equalities.</p>",
        "id": 286745132,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655694197
    },
    {
        "content": "<p>Anyway, the sorry in the statement as is, can be filled with <a href=\"https://github.com/leanprover-community/mathlib/compare/root_multiplicity?expand=1#diff-2e05733e29b100e8839f028700348cb3f71b0bbf90ff26e6e76c15458a734621R486\">this new lemma</a> (<a href=\"https://github.com/leanprover-community/mathlib/pull/14839\">#14839</a>) together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.count_roots\">docs#polynomial.count_roots</a>.</p>",
        "id": 286756672,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655708307
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 286757260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655708812
    },
    {
        "content": "<p>You're most welcome! I now think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.roots_map_of_injective_card_eq_total_degree\">docs#polynomial.roots_map_of_injective_card_eq_total_degree</a> can also have the injectivity hypothesis replaced by <code>map f p ≠ 0</code>. My planned proof will use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.C_leading_coeff_mul_prod_multiset_X_sub_C\">docs#polynomial.C_leading_coeff_mul_prod_multiset_X_sub_C</a>, which is in splitting_field.lean, but I think I can give an easier proof using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.eq_of_monic_of_dvd_of_nat_degree_le\">docs#polynomial.eq_of_monic_of_dvd_of_nat_degree_le</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_dvd_of_coprime\">docs#finset.prod_dvd_of_coprime</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_multiset_count\">docs#finset.prod_multiset_count</a>, and the result could then be moved to the end of ring_division.lean. I'll try to carry out the plan tomorrow.</p>",
        "id": 286758591,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655709789
    },
    {
        "content": "<p>So just to explain what's happening: Maria Ines is pushing for B_{dR} but she still has a few missing proofs. For one argument involving extension of norms to bigger fields she needs to pass to a normal closure. But we have 0 about normal in mathlib -- we have the definition and the \"big theorem\" (normal iff splitting field for finite extensions). Normal is not used for splitting fields or algebraic closures, and the only reason it's used in Galois theory is in the definition of Galois, which is the usual normal-separable thing. You can define Galois to be \"#automorphisms = degree\" (it's always &lt;=) and then it seems to me that you can develop the entire fundamental theorem of Galois theory without ever saying the word \"normal\", and the only bit that you are missing is the bit saying \"by the way, the subgroup is normal iff the subfield is normal\". This is what the FTG seems to look like in mathlib, I can't find the statements that normal match up and so I'm fiddling around with splitting fields to get a better API for <code>normal</code> and then hopefully I can find someone who can take over :-)</p>",
        "id": 286762447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655712474
    },
    {
        "content": "<p>B_{dR}?! That's great!!</p>",
        "id": 286762681,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655712628
    },
    {
        "content": "<p>Yeah <a href=\"https://www.youtube.com/watch?v=WedbOtc7OlQ\">she spoke at London Learning Lean</a> about it earlier this week!</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"WedbOtc7OlQ\" href=\"https://www.youtube.com/watch?v=WedbOtc7OlQ\"><img src=\"https://uploads.zulipusercontent.net/3aafb9c8cddf84b57539d1d3e823a7e54ca52f26/68747470733a2f2f692e7974696d672e636f6d2f76692f576564624f7463374f6c512f64656661756c742e6a7067\"></a></div>",
        "id": 286763186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655713022
    },
    {
        "content": "<p>But there's still some missing pieces. The other big one is theta, but that should be do-able.</p>",
        "id": 286763258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655713073
    },
    {
        "content": "<p>I've been able to significantly golf (+51 -138) some proofs in splitting_field.lean at <a href=\"https://github.com/leanprover-community/mathlib/pull/14862\">#14862</a>. I think this would not be hard to review! :)</p>",
        "id": 286870788,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655792700
    },
    {
        "content": "<p>A golf indeed! Well done <span aria-label=\"golf\" class=\"emoji emoji-1f3cc\" role=\"img\" title=\"golf\">:golf:</span> <span aria-label=\"hole in one\" class=\"emoji emoji-26f3\" role=\"img\" title=\"hole in one\">:hole_in_one:</span></p>",
        "id": 286871375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655793215
    },
    {
        "content": "<p>Second golfing PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14888\">#14888</a> with a few new lemmas. +119 -172 this time :)</p>",
        "id": 287008070,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655877170
    }
]