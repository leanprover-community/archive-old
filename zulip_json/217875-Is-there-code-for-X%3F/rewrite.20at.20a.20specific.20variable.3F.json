[
    {
        "content": "<p>For example,I want to rw the rhs of\"a+b=a\" to \"a+b=a+0\"conveniently,what should I do?<br>\nI found that there is an intro. in<br>\n<a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">https://leanprover.github.io/tutorial/A1_Quick_Reference.html</a><br>\nwhich said\"t at H {i, ...}  : apply t only at numbered occurences in H\"<br>\nbut I don't know what is \"i\" means,and other ref. didn't explain this.</p>",
        "id": 207885429,
        "sender_full_name": "唐乾",
        "timestamp": 1598297101
    },
    {
        "content": "<p>The first line of this document says: \"Note that this quick reference guide describes Lean 2 only. \"</p>",
        "id": 207886003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598297388
    },
    {
        "content": "<p>Are you using Lean 2?</p>",
        "id": 207886014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598297392
    },
    {
        "content": "<p>If you don't know then the answer is no.</p>",
        "id": 207886094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598297415
    },
    {
        "content": "<p>oh! I'm using Lean 3,is there anyway in Lean 3?</p>",
        "id": 207886488,
        "sender_full_name": "唐乾",
        "timestamp": 1598297636
    },
    {
        "content": "<p>Yes, you can do targetted rewrites in several ways in Lean 3</p>",
        "id": 207886598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598297696
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 207886653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598297726
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(the <code>true</code> there is just a placeholder)</p>",
        "id": 207886662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598297735
    },
    {
        "content": "<p>For the record, you can also do <code>rw ← nat.add_zero a at h {occs := occurrences.pos [2]},</code> which is closer to what this ancient doc was referring to.</p>",
        "id": 207887696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598298265
    },
    {
        "content": "<p>thx!!It works !!!</p>",
        "id": 207889719,
        "sender_full_name": "唐乾",
        "timestamp": 1598299242
    }
]