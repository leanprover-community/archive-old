[
    {
        "content": "<p>I have written a construction below for monoids, but one can write this construction -- the homomorphism of function spaces induced by a homomorphism of the targets -- for any algebraic structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">monoid_hom.comp_left_hom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Do any of these constructions exist in mathlib?  If so, what is the naming convention?  (I would like to PR analogous constructions for <code>C(ι, A) →* C(ι, B)</code>.)</p>",
        "id": 242828840,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623817545
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.comp_hom\">docs#monoid_hom.comp_hom</a> for when the arguments are not functions but monoid_homs</p>",
        "id": 242838063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623827121
    },
    {
        "content": "<p>I think for <code>C(ι, A) →* C(ι, A)</code> this would be <code>continuous_map.comp_monoid_hom</code></p>",
        "id": 242838219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623827258
    },
    {
        "content": "<p>I think for <code>C(ι, A) →* C(ι, A)</code> this would be <code>continuous_map.comp_monoid_hom</code></p>",
        "id": 242838223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623827267
    },
    {
        "content": "<p>Perhaps the one you suggest is <code>pi.comp_monoid_hom</code>?</p>",
        "id": 242838313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623827321
    },
    {
        "content": "<p>To match <code>pi.eval_monoid_hom</code>?</p>",
        "id": 242838320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623827335
    },
    {
        "content": "<p>Indeed, the version when the arguments are morphisms exists in mathlib in a few cases:  in addition to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.comp_hom\">docs#monoid_hom.comp_hom</a> there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.llcomp\">docs#linear_map.llcomp</a>.  Someone should standardize the notation (though I am not volunteering!)</p>",
        "id": 242914242,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623864416
    },
    {
        "content": "<p>Now PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/7984\">#7984</a>.</p>",
        "id": 243119001,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623995597
    },
    {
        "content": "<p>Oops: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.fun_left\">docs#linear_map.fun_left</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.comp_left\">docs#linear_map.comp_left</a></p>",
        "id": 243622507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624437919
    },
    {
        "content": "<p>Oh, maybe those aren't duplicates after all</p>",
        "id": 243622748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624438067
    },
    {
        "content": "<p>But the names are certainly using different conventions</p>",
        "id": 243622826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624438092
    }
]