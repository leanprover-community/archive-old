[
    {
        "content": "<p>I am used to thinking of a span of a set of vectors as the set of linear combinations over all (finite) subsets. In mathlib span is instead defined as the inf of all subpaces containing the set of vectors. Is there a lemma that shows the equivalence of these two definitions? <br>\nTo be precise, I am looking for something like the following, at least when the set of vectors is finite.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.sum</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 284331806,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653895192
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a> close to what you want?</p>",
        "id": 284332901,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653895945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> I was surprised to learn that in most cases where a human wants to start using linear combinations, thinking more abstractly will often enable you to just use the axioms of the closure operator instead. Are you sure you need this in your situation? The one exception is when proving things by induction but there are tailor-made induction procedures which help here rather than getting your hands dirty with <code>finsupp</code></p>",
        "id": 284348384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653905671
    },
    {
        "content": "<p>Ie can you un-XY your question? Closure/span is extremely functorial.</p>",
        "id": 284348480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653905741
    },
    {
        "content": "<p>I agree with Kevin but it would still be nice to have this lemma. We have analogues for other closure operators. However using <code>fin n</code> is weird here, especially in combination with <code>finsupp</code>. Talking about function with finite support when the source type is finite is masochistic. Also there are missing parentheses around the existential quantifier. Vasily, you can prove the non-trivial implication in this lemma using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_induction\">docs#submodule.span_induction</a>. And presumably you can also prove what you actually want to prove using that lemma (or something more abstract as Kevin wrote).</p>",
        "id": 284369223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1653918280
    },
    {
        "content": "<p>Oh yes the missing parens are a common gotcha -- right now this says the false statement \"exists f, (P &lt;-&gt; Q)\" instead of \"(exists f, P) &lt;-&gt; Q\"</p>",
        "id": 284378271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653922985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/equivalence.20of.20two.20definitions.20of.20span/near/284348480\">said</a>:</p>\n<blockquote>\n<p>Ie can you un-XY your question? Closure/span is extremely functorial.</p>\n</blockquote>\n<p>I don't know what \"un-XY\" means but I am trying to do the exercise in the image. <br>\n<a href=\"/user_uploads/3121/9ecLrpq3xxFzSSgKqjCGddFD/image.png\">image.png</a><br>\nMy attempt so far is below. </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9ecLrpq3xxFzSSgKqjCGddFD/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9ecLrpq3xxFzSSgKqjCGddFD/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lin_indep</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">w</span> <span class=\"bp\">∉</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- want to say that w is a linear combination of vectors in v, which implies that they are not linearly independent.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284385543,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653926980
    },
    {
        "content": "<p>un-XY refers to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 284385612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1653927009
    },
    {
        "content": "<p>and see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent_fin_succ'\">docs#linear_independent_fin_succ'</a></p>",
        "id": 284386255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1653927475
    }
]