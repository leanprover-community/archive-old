[
    {
        "content": "<p>What's the quickest way to prove something like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→₀</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finsupp.total</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 276372975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648057283
    },
    {
        "content": "<p>Here's a proof that's three lines too long:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→₀</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finsupp.total</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp.total_apply_of_mem_supported</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">rotate</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">finset.univ</span> <span class=\"o\">},</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_univ</span><span class=\"o\">,</span> <span class=\"n\">finsupp.supported_univ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_fin_eq_sum_range</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 276376584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648058813
    },
    {
        "content": "<p>a yikes but technically works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→₀</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finsupp.total</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp.total_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp.sum_fintype</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_fin_eq_sum_range</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">finset.range_one</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_pos'</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_zero</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">,</span>\n  <span class=\"n\">nat.one_lt_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_one</span><span class=\"o\">,</span> <span class=\"n\">nat.bit0_lt_bit1_iff</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_bit0</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276377966,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648059381
    },
    {
        "content": "<p>I mean, just <code>simp [finset.sum_range_succ]</code> works for the last line but is fairly slow</p>",
        "id": 276378015,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648059413
    },
    {
        "content": "<p>I think it'd be nice if <code>norm_num</code> unfolded small <code>finset.sum</code>s, for some value of \"small\"</p>",
        "id": 276378140,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648059466
    },
    {
        "content": "<p>this is technically a one-liner, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→₀</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finsupp.total</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.total_apply</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f.sum_fintype</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_fin_eq_sum_range</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 276378395,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648059565
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_succ\">docs#fin.sum_univ_succ</a> likely also works</p>",
        "id": 276382781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648061433
    },
    {
        "content": "<p>I looked for something like that but I didn't find that lemma for some reason :)</p>",
        "id": 276382843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648061476
    },
    {
        "content": "<p><code>by rw [f.total_apply _, f.sum_fintype]; simp [fin.sum_univ_succ, ←add_assoc]</code> is nice!</p>",
        "id": 276384145,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648062041
    },
    {
        "content": "<p>I think it would be reasonable to have <code>fin.sum_univ_three</code> etc</p>",
        "id": 276404355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648071568
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.trace_fin_three\">docs#matrix.trace_fin_three</a></p>",
        "id": 276404381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648071586
    },
    {
        "content": "<p><code>simp [fin.sum_univ_succ]</code> is working just fine for me!</p>",
        "id": 276405361,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648072134
    },
    {
        "content": "<p>And the <code>finsupp.total</code> came up because I was dealing with linear independence. I discovered <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.linear_independent_iff\">docs#fintype.linear_independent_iff</a> which, in conjunction with matrix notation and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_succ\">docs#fin.sum_univ_succ</a> is surprisingly usable!</p>",
        "id": 276405589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648072275
    },
    {
        "content": "<p>I'm planning to make a <code>norm_num</code> plugin or something similar that deals with sums over <code>fin</code> (and other fintypes/finsets, ideally). Because <code>simp [fin.sum_univ_succ]</code> is rather slow...</p>",
        "id": 276448397,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648113358
    }
]