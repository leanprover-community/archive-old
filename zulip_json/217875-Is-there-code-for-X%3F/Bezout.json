[
    {
        "content": "<p>Is there code to show that  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>:</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\exists x,y : ax+by=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\gcd (a, b) = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span style=\"margin-right:0.01389em;\">g</span>cd</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>? Thank you!</p>",
        "id": 224538161,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1611956800
    },
    {
        "content": "<p>Take a look at <code>nat.is_coprime_iff_coprime</code></p>",
        "id": 224539478,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611957550
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.is_coprime_iff_coprime\">docs#nat.is_coprime_iff_coprime</a></p>",
        "id": 224539530,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611957583
    },
    {
        "content": "<p>If <code>a</code> and <code>b</code> are natural numbers, but <code>x</code> and <code>y</code> are quantified over the integers, then the left side of that equivalence is your hypothesis, and the right side of that equivalence is defined as <code>nat.gcd a b = 1</code>.</p>",
        "id": 224539987,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611957689
    },
    {
        "content": "<p>If you need a different context, then I think the answer's no, but we could hack it together.</p>",
        "id": 224540451,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611957802
    },
    {
        "content": "<p>Great thanks! And if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> are integers?...</p>",
        "id": 224541021,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1611957962
    },
    {
        "content": "<p>I think we don't have a particular lemma for that.</p>",
        "id": 224541121,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611957988
    },
    {
        "content": "<p>In that case, the fastest route probably goes through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gcd_eq_normalize\">docs#gcd_eq_normalize</a> to reduce it to showing <code>gcd a b | 1</code>, and that should follow from <code>dvd_add</code> and your LHS equation.</p>",
        "id": 224541167,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611958004
    },
    {
        "content": "<p>I think probably the best way to add this into mathlib would be as a converse to <code>euclidean_domain.gcd_eq_gcd_ab</code>, unless using <code>dvd_add</code> is direct enough.</p>",
        "id": 224542146,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611958305
    },
    {
        "content": "<p>Let me know if you think there's a lemma here we should add.</p>",
        "id": 224543683,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611958791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> how about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">int.gcd_eq_one_iff_coprime'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">is_coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">int.coe_gcd</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">int.coe_nat_one</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_inj'</span><span class=\"o\">,</span> <span class=\"n\">int.gcd_eq_one_iff_coprime</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 224548810,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1611961956
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 224556233,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1611968160
    }
]