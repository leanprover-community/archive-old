[
    {
        "content": "<p>I made this because I don't have a monoid but need to express powers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- More general version of monoid.has_pow -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_pow_of_has_one_has_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_pow</span> <span class=\"n\">A</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">npow_rec</span> <span class=\"n\">k</span> <span class=\"n\">t</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>However, if I have a monoid this is going to confuse with the instance of the original <code>monoid.has_has</code>? Currently I'm trying to prove something and it's basically asking me to show that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comeone</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">monoid.has_pow</span> <span class=\"bp\">=</span> <span class=\"n\">has_pow_of_has_one_has_mul</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this kind of thing already dealt with / why does the definition of <code>monoid</code> mention <code>pow</code> at all?</p>",
        "id": 265165582,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1639665878
    },
    {
        "content": "<p>Isn't there already something called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/npow_rec\">docs#npow_rec</a>?</p>",
        "id": 265166453,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639666254
    },
    {
        "content": "<p>The reason <code>monoid</code> contains <code>pow</code> is because otherwise we'd get distinct <code>module ℕ ℕ</code> structures:</p>",
        "id": 265166577,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639666314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/has_pow_of_has_one_has_mul/near/265166577\">said</a>:</p>\n<blockquote>\n<p>The reason <code>monoid</code> contains <code>pow</code> is because otherwise we'd get distinct <code>module ℕ ℕ</code> structures:</p>\n</blockquote>\n<p>yes I used <code>npow_rec</code> in my definition. Are you saying that having this more general <code>has_pow</code> has an <em>instance</em> is just a bad idea?</p>",
        "id": 265166897,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1639666444
    },
    {
        "content": "<p>There are two ways that the natural numbers are an <code>ℕ</code>-semimodule: all additive monoids are <code>ℕ</code>-semimodules by defining recursively  <code>0 • x = 0</code> and <code>(n+1) • x = n • x + x</code>. And all semirings are modules over themselves by defining <code>x • y = x * y</code>. Now for whatever reason, multiplication of natural numbers is defined by recursion on the parameter on the <em>right</em>, so the two definitions of scalar multiplication don't line up. (Even though you can prove them to return equal values, the definitions do not look the same.)</p>\n<p>In general, you need all instances to have the same definition, and the solution chosen in mathlib is to include the definition of <code>nsmul</code>, scalar multiplication by a natural, into the <code>add_monoid</code> class.</p>",
        "id": 265167220,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639666588
    },
    {
        "content": "<p>Since <code>add_monoid</code> is defined as a copy of <code>monoid</code> with multiplicative terms replaced with additive terms, you need to add the corresponding <code>npow</code> field to <code>monoid</code>.</p>",
        "id": 265167405,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639666654
    },
    {
        "content": "<p>So the conclusion is: you should be able to <em>prove</em> that exponentiation of monoids is equal to <code>npow_rec</code>, or your instance, you cannot <em>define</em> this to be the case because it will make the library as a whole incoherent.</p>",
        "id": 265167675,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639666752
    },
    {
        "content": "<p>I see! Thank you :)</p>",
        "id": 265168318,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1639666976
    },
    {
        "content": "<p>You're welcome! It's a complicated story that the Mathlib community only figured out this year (<a href=\"https://github.com/leanprover-community/mathlib/pull/7084\">#7084</a>), so you definitely deserve an explanation :)</p>",
        "id": 265169513,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639667458
    },
    {
        "content": "<p>I just saw the expression \"anecdotal defeq\" in that PR, which I'm definitely adding to my vocabulary :D</p>",
        "id": 265170205,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639667735
    },
    {
        "content": "<blockquote>\n<p>I made this because I don't have a monoid but need to express powers:</p>\n</blockquote>\n<p>Do you have a <code>mul_one_class</code>?</p>",
        "id": 265171906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639668415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/has_pow_of_has_one_has_mul/near/265171906\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I made this because I don't have a monoid but need to express powers:</p>\n</blockquote>\n<p>Do you have a <code>mul_one_class</code>?</p>\n</blockquote>\n<p>i only have <code>has_one</code> and <code>has_mul</code></p>",
        "id": 265172905,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1639668829
    }
]