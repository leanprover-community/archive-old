[
    {
        "content": "<p>Try <code>(two_pos : (0 : &lt;the correct type&gt;) &lt; 2)</code>? Lean is sometimes too quick to assume they're naturals</p>",
        "id": 281616316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652041160
    },
    {
        "content": "<p>Mmh, I thought the type should be naturals here, should it not?<br>\nIn any case I tried <br>\n<code>rw tendsto.mul_at_top (two_pos : (0 : foo) &lt; 2) h2 tendsto_id,</code> with <code>foo</code> ‚àà {‚Ñï, ‚Ñù} and that didn't work.</p>",
        "id": 281616611,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1652041521
    },
    {
        "content": "<p>Here one wants naturals, they are supposed to specify a subsequence, right?</p>\n<p>So I think <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> is right, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.mul_at_top\">docs#filter.tendsto.mul_at_top</a> has the wrong typeclasses (<code>[linear_ordered_field]</code>) for this purpose.</p>\n<p>I don't know what is the elegant way for the auxiliary result <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>‚Å°</mo></mrow><mrow><mi>n</mi><mo>‚Üí</mo><mi mathvariant=\"normal\">‚àû</mi></mrow></msub><mn>2</mn><mi>n</mi><mo>=</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{n \\to \\infty} 2 n = \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">‚Üí</span><span class=\"mord mtight\">‚àû</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">‚àû</span></span></span></span>, but the ugly one below works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sub_seq_tendsto</span> <span class=\"o\">{</span><span class=\"n\">an</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))):</span>\n <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">tendsto_at_top.mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">Ici_mem_at_top</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">n_large</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Ici</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">n_large</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.comp</span> <span class=\"n\">aux</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281616962,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1652042080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kyt√∂l√§</span> Thanks!<br>\nIs there something missing here in mathlib, could for example  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.mul_at_top\">docs#filter.tendsto.mul_at_top</a>  be extended so that it works in this case?</p>",
        "id": 281617136,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1652042381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> has marked this topic as resolved.</p>",
        "id": 281617137,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652042383
    },
    {
        "content": "<p>There should definitely be a better way to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>‚Å°</mo></mrow><mrow><mi>n</mi><mo>‚Üí</mo><mi mathvariant=\"normal\">‚àû</mi></mrow></msub><mn>2</mn><mi>n</mi><mo>=</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{n \\to \\infty} 2 n = \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">‚Üí</span><span class=\"mord mtight\">‚àû</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">‚àû</span></span></span></span>. But I don't know if something is missing from mathlib; I only tried <code>library_search</code> and when it failed, I gave up and wrote the first thing that came to mind... <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 281617272,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1652042530
    },
    {
        "content": "<p>Actually even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.nat_tendsto_at_top\">docs#function.injective.nat_tendsto_at_top</a> + <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul_right_inj\">docs#nat.mul_right_inj</a> would make it better, but still not sure of the elegant way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sub_seq_tendsto</span> <span class=\"o\">{</span><span class=\"n\">an</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))):</span>\n <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">function.injective.nat_tendsto_at_top</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat.mul_right_inj</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.comp</span> <span class=\"n\">aux</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281617367,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1652042673
    },
    {
        "content": "<p>The right way is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.const_mul_at_top'\">docs#filter.tendsto.const_mul_at_top'</a></p>",
        "id": 281617765,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1652043247
    },
    {
        "content": "<p>Cool, that works and my lemma becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sub_seq_tendsto</span> <span class=\"o\">{</span><span class=\"n\">an</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">an</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">A</span><span class=\"o\">)):</span>\n <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto.const_mul_at_top'</span> <span class=\"o\">(</span><span class=\"n\">two_pos</span><span class=\"o\">)</span> <span class=\"n\">tendsto_id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281618257,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1652043909
    },
    {
        "content": "<p>I guess you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sub_seq_tendsto</span> <span class=\"o\">{</span><span class=\"n\">an</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">an</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">A</span><span class=\"o\">)):</span>\n <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">tendsto_id.const_mul_at_top'</span> <span class=\"n\">two_pos</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281619167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652045319
    },
    {
        "content": "<p>(see <a href=\"https://leanprover-community.github.io/glossary.html#dot-notation--generalized-field-notation--generalized-projections\">https://leanprover-community.github.io/glossary.html#dot-notation--generalized-field-notation--generalized-projections</a>)</p>",
        "id": 281619176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652045367
    }
]