[
    {
        "content": "<p>We are currently working on subgraphs. In particular, If H is a subgraph of G and and M is a subgraph of H, we fail to construct M as a subgraph of G.</p>\n<p>Let's put that into Lean's terms. We work on graphs whose vertices are a fintype, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Now, the construction we are trying to define is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subgraph_in_graph_of_subgraph_in_subgraph_coe</span>\n        <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">H.coe.subgraph</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span>\n        <span class=\"n\">G.subgraph</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where the resulting subgraph would be the trivial inclusion.</p>\n<p>How would we best go about this?</p>\n<hr>\n<p>Our current state for reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subgraph_in_graph_of_subgraph_in_subgraph_coe</span>\n        <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">H.coe.subgraph</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span>\n        <span class=\"n\">G.subgraph</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">verts</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">M.verts</span><span class=\"o\">,</span>\n        <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n            <span class=\"n\">intros</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n            <span class=\"n\">by_cases</span> <span class=\"n\">h_in_M</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">M.verts</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">M.verts</span><span class=\"o\">),</span>\n            <span class=\"o\">{</span>\n                <span class=\"k\">have</span> <span class=\"n\">h_u_in_M</span> <span class=\"o\">:=</span> <span class=\"n\">h_in_M.1</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">h_v_in_M</span> <span class=\"o\">:=</span> <span class=\"n\">h_in_M.2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">h_u_in_H</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">obviously</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">h_v_in_H</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">obviously</span><span class=\"o\">,</span>\n\n                <span class=\"k\">let</span> <span class=\"n\">u_H</span> <span class=\"o\">:</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">h_u_in_H</span><span class=\"o\">⟩,</span>\n                <span class=\"k\">have</span> <span class=\"n\">h_u_H_in_M</span> <span class=\"o\">:</span> <span class=\"n\">u_H</span> <span class=\"bp\">∈</span> <span class=\"n\">M.verts</span><span class=\"o\">,</span>\n                <span class=\"n\">focus</span> <span class=\"o\">{</span>\n                    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h_u_in_M</span><span class=\"o\">,</span>\n                    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">h_u_H_in_M</span><span class=\"o\">,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">h_u_H_in_M</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">let</span> <span class=\"n\">u_M</span> <span class=\"o\">:</span> <span class=\"n\">M.verts</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">u_H</span><span class=\"o\">,</span> <span class=\"n\">h_u_H_in_M</span><span class=\"o\">⟩,</span>\n\n                <span class=\"k\">let</span> <span class=\"n\">v_H</span> <span class=\"o\">:</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h_v_in_H</span><span class=\"o\">⟩,</span>\n                <span class=\"k\">have</span> <span class=\"n\">h_v_H_in_M</span> <span class=\"o\">:</span> <span class=\"n\">v_H</span> <span class=\"bp\">∈</span> <span class=\"n\">M.verts</span><span class=\"o\">,</span>\n                <span class=\"n\">focus</span> <span class=\"o\">{</span>\n                    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h_v_in_M</span><span class=\"o\">,</span>\n                    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">let</span> <span class=\"n\">v_M</span> <span class=\"o\">:</span> <span class=\"n\">M.verts</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">v_H</span><span class=\"o\">,</span> <span class=\"n\">h_v_H_in_M</span><span class=\"o\">⟩,</span>\n\n                <span class=\"n\">exact</span> <span class=\"n\">M.adj</span> <span class=\"n\">u_M</span> <span class=\"n\">v_M</span>\n\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n        <span class=\"kd\">end</span><span class=\"o\">,</span>\n        <span class=\"n\">adj_sub</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n            <span class=\"n\">intros</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">by_cases</span> <span class=\"n\">h_in_M</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">M.verts</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">M.verts</span><span class=\"o\">),</span>\n            <span class=\"o\">{</span>\n                <span class=\"gr\">sorry</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"gr\">sorry</span>\n            <span class=\"o\">}</span>\n        <span class=\"kd\">end</span><span class=\"o\">,</span>\n        <span class=\"n\">edge_vert</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n        <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 286933655,
        "sender_full_name": "Ben Bals",
        "timestamp": 1655826290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"495400\">@Ben Bals</span> Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a subgraph of a subgraph of `G`, construct a subgraph of `G`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">subgraph.coe_subgraph</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G''</span> <span class=\"o\">:</span> <span class=\"n\">G'.coe.subgraph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">verts</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"n\">G''.verts</span><span class=\"o\">,</span>\n  <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">G'.verts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">G'.verts</span><span class=\"o\">),</span> <span class=\"n\">G''.adj</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">adj_sub</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">bex_imp_distrib</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">G'.adj_sub</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">G''.adj_sub</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">edge_vert</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">set_coe.exists</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">exists_and_distrib_right</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">bex_imp_distrib</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hv</span> <span class=\"n\">hw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">G''.edge_vert</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 286936634,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655827433
    },
    {
        "content": "<p>Then, using the names of the variables in your definition, if you have <code>M : H.coe.subgraph</code> you can write <code>M.coe_subgraph</code> to get a <code>G.subgraph</code></p>",
        "id": 286936794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655827489
    },
    {
        "content": "<p>Is it not just the image under inclusion? You shouldn't need a new definition.</p>",
        "id": 286940163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655828971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Do you have a docs link?</p>",
        "id": 286941205,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655829454
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.subgraph.map\">docs#simple_graph.subgraph.map</a> and we're missing <code>simple_graph.subgraph.inclusion</code>.</p>",
        "id": 286941747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655829668
    },
    {
        "content": "<p>How does <code>simple_graph.subgraph.map</code> apply here? That's the induced injective map on the subgraph relationship, but <code>subgraph.coe_subgraph</code> is about a map on the collections of subgraphs themselves.</p>",
        "id": 286942321,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655829942
    },
    {
        "content": "<p>Oh then it's misnamed. I was expecting it to be the map of a subgraph under a graph hom.</p>",
        "id": 286942774,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655830123
    },
    {
        "content": "<p>It's the functor from the lattice of subgraphs to the category of simple graphs, which is why it's called <code>map</code>.</p>",
        "id": 286943020,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655830231
    },
    {
        "content": "<p>Okay, but all other subobjects use <code>map</code> to mean something else.</p>",
        "id": 286943101,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655830275
    },
    {
        "content": "<p>The general way we go about this with subobjects is, if <code>G : simple_graph V</code>, <code>H : subgraph G</code>, then <code>inclusion H : H -&gt;g G</code> and <code>map (inclusion H) : subgraph H -&gt; subgraph G</code>.</p>",
        "id": 286943160,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655830302
    },
    {
        "content": "<p>Here <code>map</code> is the map part of the <code>subgraph</code> functor.</p>",
        "id": 286943314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655830353
    },
    {
        "content": "<p>Presumably you mean <code>subgraph H -&gt; subgraph G</code> here?</p>",
        "id": 286943411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655830393
    },
    {
        "content": "<p>I don't mind if it's renamed to <code>simple_graph.subgraph.inclusion</code>, but in any case we need a new definition since <code>subgraph.coe_subgraph</code> would need <code>map</code>, which doesn't exist yet.</p>",
        "id": 286943683,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655830496
    },
    {
        "content": "<p>Yes, absolutely. I'm just advocating to add the definitions that we use everywhere else, rather than an ad hoc construction.</p>",
        "id": 286943861,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655830563
    },
    {
        "content": "<p>I think <code>subgraph.map</code> should be renamed to <code>subgraph.coe_map</code>, because it is the map of the <code>subgraph.coe</code> functor.</p>",
        "id": 286944023,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655830629
    },
    {
        "content": "<p>Do we have it for other subobjects? Maybe we can get the name from there.</p>",
        "id": 286944251,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655830733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"495400\">@Ben Bals</span> Here's an unfinished PR with this construction, in case it's helpful: <a href=\"https://github.com/leanprover-community/mathlib/pull/14877\">#14877</a></p>",
        "id": 286944626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655830905
    }
]