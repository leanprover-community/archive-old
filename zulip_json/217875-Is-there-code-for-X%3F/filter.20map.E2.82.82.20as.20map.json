[
    {
        "content": "<p>I couldn't find the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ≤</span><span class=\"o\">):</span> <span class=\"n\">filter.map‚ÇÇ</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">filter.map</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">√ó·∂†</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 279234264,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650220676
    },
    {
        "content": "<p>I didn't add it. Do we have the corresponding <code>set.image2</code> lemma?</p>",
        "id": 279234491,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650220963
    },
    {
        "content": "<p>Let me see...</p>",
        "id": 279234500,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650220976
    },
    {
        "content": "<p>Doesn't seem so</p>",
        "id": 279234514,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650221012
    },
    {
        "content": "<p>Nope.</p>",
        "id": 279234580,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650221071
    },
    {
        "content": "<p>Was it intentional that filter.map‚ÇÇ was not defined in terms of the applicative instance?</p>",
        "id": 279234596,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650221122
    },
    {
        "content": "<p>Yes, because we care about definitional equality.</p>",
        "id": 279234652,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650221171
    },
    {
        "content": "<p>So yeah we actually have the two lemmas you ask for, but not quite in your form: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_prod\">docs#set.image_prod</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map_prod\">docs#filter.map_prod</a>.</p>",
        "id": 279234691,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650221243
    },
    {
        "content": "<p>How does defintional equality affect things? I don't follow.</p>",
        "id": 279234696,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650221259
    },
    {
        "content": "<p>This is a concern for the end user.</p>",
        "id": 279234702,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650221277
    },
    {
        "content": "<p>Which end user? I'm an end user and it' affecting me, but I don't see the connection with definitional equality.</p>",
        "id": 279234874,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650221509
    },
    {
        "content": "<p>Seems that we're also missing this applicative combinator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">applicative</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 279235056,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650221749
    },
    {
        "content": "<p>When you have <code>hx : x \\in filter.map\\2 m f g</code>, you can <code>obtain \\&lt;s, t, hs, ht, h\\&gt; := hx</code>.</p>",
        "id": 279235177,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650221936
    },
    {
        "content": "<p>Yes, that is nice. The way I was doing that without map2 was kind of painful.</p>",
        "id": 279235632,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650222474
    },
    {
        "content": "<p>Anyways, I'll make a PR to add the map2 as map for filter.</p>",
        "id": 279235699,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650222542
    },
    {
        "content": "<p>Question: why does  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_prod\">docs#set.image_prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map_prod\">docs#filter.map_prod</a> not use <code>uncurry f</code>. Is there some advantage to having the explicit lambda?</p>",
        "id": 279236412,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650223586
    },
    {
        "content": "<p>Yeah, this allows rewriting inside the lambda.</p>",
        "id": 279236569,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650223874
    },
    {
        "content": "<p>It makes it easier for Lean to infer <code>f</code> by unification</p>",
        "id": 279237053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650224618
    },
    {
        "content": "<p>OK</p>",
        "id": 279237198,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650224779
    },
    {
        "content": "<p>I've heard the mathlib community prefers to have names of lemmas, definitions etc. in plain ascii although it seems we're not doing this for the map‚ÇÇ stuff. I guess we're bending the rules here?</p>",
        "id": 279238045,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650226112
    },
    {
        "content": "<p>That's not the only place we do this. For example we use numerals in indices to indicate an \"iterated\" operation: <code>forall‚ÇÇ</code> refers to <code>‚àÄ a b, _</code>, <code>exists‚ÇÇ</code> to <code>‚àÉ a b, _</code>, etc.</p>",
        "id": 279238139,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650226253
    },
    {
        "content": "<p>I see. I guess subscript indices are still OK, although they are hard to type in the browser.</p>",
        "id": 279238243,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650226406
    },
    {
        "content": "<p>What browser are you using? We have browser extensions to type unicode in the same way as in VScode, as well as a system-wide version.</p>",
        "id": 279238290,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650226453
    },
    {
        "content": "<p>I use Chrome. I usually copy/paste the fancy unicode into the browser. But Chrome search is pretty aweful, since it has problems distinguishing e.g. fancy unicode letters from plain ascii ones.</p>",
        "id": 279238337,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650226557
    },
    {
        "content": "<p>For example, searching for ùìü gives you all the regular ascii p's.</p>",
        "id": 279238403,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650226627
    },
    {
        "content": "<p>Wait, are you not using the API documentation search?</p>",
        "id": 279238416,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650226649
    },
    {
        "content": "<p>Yes, I use that too.</p>",
        "id": 279238483,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650226745
    },
    {
        "content": "<p>The Chrome extension is <a href=\"https://github.com/arthurpaulino/chrome-lean-unicode\">https://github.com/arthurpaulino/chrome-lean-unicode</a></p>",
        "id": 279238497,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650226773
    },
    {
        "content": "<p>Oh, nice.</p>",
        "id": 279238558,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650226820
    },
    {
        "content": "<p>Here's the PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/13490/files\">https://github.com/leanprover-community/mathlib/pull/13490/files</a></p>",
        "id": 279241985,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650231835
    }
]