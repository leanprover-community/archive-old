[
    {
        "content": "<p>Do we have something that can give:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Something like <code>pi.unique_of_empty</code> but saying that <code>unique [option α]</code> when <code>α ≃ empty</code>.</p>",
        "id": 226715910,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613591754
    },
    {
        "content": "<p>I guess you already know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv_punit_of_unique\">docs#equiv_punit_of_unique</a>? The other part seems like it's missing, but is very easy.</p>",
        "id": 226717920,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613592628
    },
    {
        "content": "<p>the other direction sounds like the composition of two lemmas, equivs preserve <code>unique</code> and <code>unique pempty</code></p>",
        "id": 226718198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613592765
    },
    {
        "content": "<p>I wouldn't make that into one lemma unless it's one half of an iff statement</p>",
        "id": 226718356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613592830
    },
    {
        "content": "<p>I think <code>(\\a -&gt; false) -&gt; unique (option \\a)</code> is a reasonable lemma to have.</p>",
        "id": 226718359,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613592831
    },
    {
        "content": "<p>that could also be one half of an iff statement</p>",
        "id": 226718455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613592856
    },
    {
        "content": "<p>Honestly, I feel like we should add <code>[is_empty \\a]</code> as a typeclass</p>",
        "id": 226718465,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613592860
    },
    {
        "content": "<p>I'm a fan</p>",
        "id": 226718540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613592895
    },
    {
        "content": "<p>that works for me</p>",
        "id": 226718546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613592899
    },
    {
        "content": "<p>there aren't that many instances but there are at least 2 or 3</p>",
        "id": 226718593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613592923
    },
    {
        "content": "<p>We already have <code>subsingleton</code>, <code>unique</code>, <code>nonempty</code> and <code>nontrivial</code>. It's only reasonable to also have <code>is_empty</code>.</p>",
        "id": 226718603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613592930
    },
    {
        "content": "<p>Of course you have to keep in mind that because of the <code>@[class] def</code> thing this might not be easier to use than <code>A -&gt; false</code></p>",
        "id": 226718708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613592965
    },
    {
        "content": "<p><code>empty</code>, <code>pempty</code>, <code>{x // x \\in \\empty}</code>, <code>false</code>, <code>prime_spectrum punit</code></p>",
        "id": 226718711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613592967
    },
    {
        "content": "<p><code>fin 0</code>, <code>A -&gt; false</code> where <code>nonempty A</code></p>",
        "id": 226718768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613592997
    },
    {
        "content": "<p><code>↥∅</code> for <code>∅</code> in various types</p>",
        "id": 226718829,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613593031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/unique.20from.20empty/near/226718768\">said</a>:</p>\n<blockquote>\n<p><code>A -&gt; false</code> where <code>nonempty A</code></p>\n</blockquote>\n<p><code>A -&gt; B</code>where <code>nonempty A</code> and <code>is_empty B</code> :)</p>",
        "id": 226718880,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613593066
    },
    {
        "content": "<p>I think we have convincingly, and even constructively! proven Marios conjecture that there are at least 2 or 3 examples (-;</p>",
        "id": 226718886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613593069
    },
    {
        "content": "<p>lean has too many ways to say nothing :)</p>",
        "id": 226718894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593076
    },
    {
        "content": "<p>It's a hard problem! If you can fix it, I guess you solved the \"canonical isomorphism\" problem (-;</p>",
        "id": 226718982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613593108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/unique.20from.20empty/near/226718880\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/unique.20from.20empty/near/226718768\">said</a>:</p>\n<blockquote>\n<p><code>A -&gt; false</code> where <code>nonempty A</code></p>\n</blockquote>\n<p><code>A -&gt; B</code>where <code>nonempty A</code> and <code>is_empty B</code> :)</p>\n</blockquote>\n<p>I think you can drop the <code>nonempty A</code> assumption here.</p>",
        "id": 226718985,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613593108
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 226719007,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613593119
    },
    {
        "content": "<p><code>false -&gt; false</code> is true</p>",
        "id": 226719008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593119
    },
    {
        "content": "<p>Oops.  You're right of course.</p>",
        "id": 226719034,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613593137
    },
    {
        "content": "<p>If we introduce this class, there will be 37 files (or more) where we can replace <code>(p)empty</code> using this class.</p>",
        "id": 226719114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613593187
    },
    {
        "content": "<p>not all of those would necessarily be a good idea</p>",
        "id": 226719199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593219
    },
    {
        "content": "<p>in particular we don't want algebraic classes for these types just because they are empty</p>",
        "id": 226719242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593248
    },
    {
        "content": "<p>Sure, but we prove things about <code>mv_polynomial pempty R</code> and also about <code>mv_polynomial (fin 0) R</code></p>",
        "id": 226719318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613593290
    },
    {
        "content": "<p>certainly if be have any duplicated lemmas then that's a good candidate, but if you want the initial object of Set to inhabit a typeclass you probably don't want that to be generic</p>",
        "id": 226719611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593434
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.prod_empty\">docs#equiv.prod_empty</a> looks like it could be generalized, although <code>prod_punit</code> isn't</p>",
        "id": 226719816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593529
    },
    {
        "content": "<p>When I was proving some instances of <code>free_abelian_group</code> I proved <code>free_abelian_group pempty ≃+ unit</code> and <code>free_abelian_group punit ≃+ ℤ</code> and then in the PR process Eric said I would be better off proving <code>punit_equiv (T : Type*) [unique T] : free_abelian_group T ≃+ ℤ</code> and <code>pempty_unique : unique (free_abelian_group pempty)</code>. This does seem like a natural extension of this. The argument the other way is of course <a href=\"https://xkcd.com/927/\">xkcd#927</a></p>",
        "id": 226721384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613594179
    },
    {
        "content": "<p>Another lemma that would benefit from this type class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_basis_empty</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_empty</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 226729426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613597660
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis_empty\">docs#is_basis_empty</a> isn't yet stated exactly like that, but will be soon ;)</p>",
        "id": 226729631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613597768
    },
    {
        "content": "<p>oh, I spent a while looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis_empty_bot\">docs#is_basis_empty_bot</a> trying to figure out why it's not a straight generalization of the lemma before it</p>",
        "id": 226729926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613597908
    },
    {
        "content": "<p>Yeah, I have a PR that removes it</p>",
        "id": 226730188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613598043
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6281\">#6281</a></p>",
        "id": 226730256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613598086
    },
    {
        "content": "<p>No I mean a generalization in the other direction</p>",
        "id": 226732047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613598941
    },
    {
        "content": "<p>if you look at the two statements in docgen the only difference is that the _bot lemma has one fewer assumption</p>",
        "id": 226732158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613598973
    },
    {
        "content": "<p>Yes, and it's proved in terms of the other lemma, so I don't understand what you're disagreeing with. Perhaps best to discuss in the PR.</p>",
        "id": 226740270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613602348
    },
    {
        "content": "<p>We also have some lemmas about <code>supr</code>/<code>infi</code> over an empty type and filters on an empty type.</p>",
        "id": 228355108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614662211
    },
    {
        "content": "<p>My impression is that now we're just waiting for someone to make the PR</p>",
        "id": 228364283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614669269
    },
    {
        "content": "<p>I've started this on <a href=\"https://github.com/leanprover-community/mathlib/tree/is_empty\">branch#is_empty</a>.</p>",
        "id": 238583375,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620883883
    },
    {
        "content": "<p>Awesome! (Bikeshedding comment) It's unfortunate that <code>empty</code> is taken, because now <code>is_empty</code> doesn't agree with <code>nonempty</code></p>",
        "id": 238584132,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620884703
    }
]