[
    {
        "content": "<p>Specifically, the obvious embeddings <code>r ↪r sum.lex r s</code>, <code>s ↪r sum.lex r s</code>, and the embeddings <code>r ↪r prod.lex r s</code> and <code>s ↪r prod.lex r s</code> given an element in the other type</p>",
        "id": 289592041,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657805532
    },
    {
        "content": "<p>Would also be nice to have things like <code>s ↪r t → sum.lex r s ↪r sum.lex r t</code></p>",
        "id": 289592192,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657805622
    },
    {
        "content": "<p>We could lift a lot of these into initial segments, and use them to golf the basic ordinal API</p>",
        "id": 289592297,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657805663
    },
    {
        "content": "<p>Do we have these for the specialization to ≤?</p>",
        "id": 289594061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657806492
    },
    {
        "content": "<p>I doubt it, we don't have any special way to write <code>sum.lex (≤) (≤)</code></p>",
        "id": 289598272,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657808469
    },
    {
        "content": "<p>As far as I'm aware</p>",
        "id": 289598296,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657808487
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.lex.preorder\">docs#sum.lex.preorder</a></p>",
        "id": 289598459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657808549
    },
    {
        "content": "<p>The special way to write <code>sum.lex (≤) (≤)</code> is <code>(≤)</code>.</p>",
        "id": 289598577,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657808611
    },
    {
        "content": "<p>Well, there's a few lemmas about order isomorphisms but I can't see anything about relation embeddings</p>",
        "id": 289599193,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657808882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/sum.2Elex.20and.20prod.2Elex.20as.20rel_embeddings/near/289598577\">said</a>:</p>\n<blockquote>\n<p>The special way to write <code>sum.lex (≤) (≤)</code> is <code>(≤)</code>.</p>\n</blockquote>\n<p>No it's not, it's <code>(≤) on to_lex</code></p>",
        "id": 289603248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657810732
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.lex.to_lex_mono\">docs#sum.lex.to_lex_mono</a> is the statement I'm thinking of, I guess we don't have the bundling. Maybe we have the bundled <code>sum.inl</code> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.preorder\">docs#sum.preorder</a></p>",
        "id": 289603474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657810812
    },
    {
        "content": "<p>Again no bundling, but we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.lex.inl_mono/src\">src#sum.lex.inl_mono</a></p>",
        "id": 289603637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657810873
    },
    {
        "content": "<p>I guess I could prove the bundled versions on arbitrary relations and then use those to golf these theorems</p>",
        "id": 289604146,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657811064
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.lex.to_lex_mono/src\">src#sum.lex.to_lex_mono</a>  isn't exactly in need of further golfing</p>",
        "id": 289604606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657811271
    },
    {
        "content": "<p>Wait a second</p>",
        "id": 289605617,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657811706
    },
    {
        "content": "<p>That doesn't seem right</p>",
        "id": 289605648,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657811724
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.sum_comm\">docs#order_iso.sum_comm</a></p>",
        "id": 289605814,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657811793
    },
    {
        "content": "<p>Oh wait nevermind, that's not the same relation</p>",
        "id": 289605892,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657811828
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15355\">#15355</a></p>",
        "id": 289612456,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657814878
    }
]