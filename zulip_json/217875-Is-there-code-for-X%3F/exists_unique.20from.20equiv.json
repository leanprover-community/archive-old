[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equiv.exists_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- `by library_search`  fails</span>\n<span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e.apply_symm_apply</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">e.eq_symm_apply.mpr</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 224715166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612180429
    },
    {
        "content": "<p>Or perhaps even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">function.bijective.exists_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf.2</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">hf.1</span> <span class=\"o\">(</span><span class=\"n\">ha'.trans</span> <span class=\"n\">ha.symm</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 224715880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612180917
    },
    {
        "content": "<p>LGTM</p>",
        "id": 224716353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612181214
    },
    {
        "content": "<p>Should probably be an <code>iff</code>, right?</p>",
        "id": 224716371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612181231
    },
    {
        "content": "<p>I suppose it could be</p>",
        "id": 224716388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612181253
    },
    {
        "content": "<p>f should be implicit</p>",
        "id": 224716396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612181259
    },
    {
        "content": "<p>Ah, actually you won't get projection notation with the iff version</p>",
        "id": 224716487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612181304
    },
    {
        "content": "<p>probably still good to have the theorem though</p>",
        "id": 224716510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612181324
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">function.bijective.iff_exists_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">hf</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf.2</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">hf.1</span> <span class=\"o\">(</span><span class=\"n\">ha'.trans</span> <span class=\"n\">ha.symm</span><span class=\"o\">)⟩,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"o\">⟨</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ha''</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">he</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">ha''</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">ha''</span> <span class=\"n\">a'</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">he</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.bijective.exists_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">function.bijective.iff_exists_unique</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hf</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 224716724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612181489
    },
    {
        "content": "<p>Are those names in the right order?</p>",
        "id": 224716970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612181657
    },
    {
        "content": "<p>Are you sure those lemmas are not there yet?</p>",
        "id": 224718085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612182377
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5995\">#5995</a></p>",
        "id": 224718171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612182430
    },
    {
        "content": "<p>No, I'm not sure</p>",
        "id": 224718173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612182433
    },
    {
        "content": "<p>But they're not in logic.function.basic where I'd expect to find them</p>",
        "id": 224718186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612182454
    },
    {
        "content": "<p>I am not too surprised that they aren't there; <code>exists_unique</code> doesn't have many lemmas about it</p>",
        "id": 224718789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612182863
    },
    {
        "content": "<p>The iff lemma should be <code>function.bijective_iff_exists_unique</code> without the dot</p>",
        "id": 224718898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612182935
    },
    {
        "content": "<p>Updated in the PR. I was able to golf the reverse direction a bit using existing lemmas too</p>",
        "id": 224719008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612182993
    }
]