[
    {
        "content": "<p>Do we have a typeclass for binary operations <code>f : α → β → γ</code> such that <code>∀ a b c d, f (a * b) (c * d) = f a c * f b d</code>? This is respected for <code>*</code> and <code>/</code> for example.</p>",
        "id": 266162844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640601581
    },
    {
        "content": "<p>No, I'm quite certain we don't have that. Especially if you want <code>f : α → β → γ</code> to be heterogeneous, instead of <code>α = β = γ</code>.</p>",
        "id": 266167701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640606731
    },
    {
        "content": "<p>It's like a binary <code>mul_hom</code>, but that's not the same as <code>α →* β →* γ</code>.</p>",
        "id": 266168013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640607055
    },
    {
        "content": "<p>Is it the same as <code>α × β →* γ</code>?</p>",
        "id": 266172253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640611349
    },
    {
        "content": "<p>It looks like it</p>",
        "id": 266172264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640611364
    },
    {
        "content": "<p>Oh yes probably. Do you want me to use that in <a href=\"https://github.com/leanprover-community/mathlib/pull/10907\">#10907</a>?</p>",
        "id": 266172366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640611455
    },
    {
        "content": "<p>Your <code>m.prod_hom₂</code> seems reasonable to keep, but it would be neat to prove it using maps from <code>×</code></p>",
        "id": 266172582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640611713
    },
    {
        "content": "<p>Do you mean changing the statement, or changing the proof? Because the proof is about as short as it can be.</p>",
        "id": 266172627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640611788
    },
    {
        "content": "<p>I meant the proof, mainly to see if any machinery elsewhere is missing</p>",
        "id": 266173759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640612978
    },
    {
        "content": "<p>What's missing is <code>*</code> and <code>/</code> bundled as <code>α × α →* α</code>, but that's for the specific uses of <code>prod_hom₂</code>. I can't see how to shorten <code>prod_hom₂</code> itself, because you need to build the <code>mul_hom</code> on the fly.</p>",
        "id": 266174057,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640613271
    },
    {
        "content": "<p>I was just about to say, it would be great to have those bundled homs</p>",
        "id": 266175048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640614196
    },
    {
        "content": "<p>I assume there's also a version of <code> α × β →* β</code> that's true for smul</p>",
        "id": 266175431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640614439
    },
    {
        "content": "<p>I'm making all of them right now!</p>",
        "id": 266175569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640614498
    },
    {
        "content": "<p>Btw there's also the <code>α × α →*₀ α</code> version.</p>",
        "id": 266176039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640614900
    },
    {
        "content": "<p>which feels like it can be strengthened, because we not only have <code>0 / 0 = 0</code>, but also <code>a / 0 = 0</code> and <code>0 / a = 0</code></p>",
        "id": 266176099,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640614945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Abstracting.20*.20and.20.2F/near/266167701\">said</a>:</p>\n<blockquote>\n<p>No, I'm quite certain we don't have that. Especially if you want <code>f : α → β → γ</code> to be heterogeneous, instead of <code>α = β = γ</code>.</p>\n</blockquote>\n<p>Core Lean only seems to have the homogeneous version: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_left_distrib\">docs#is_left_distrib</a></p>\n<p>I've got the impression that these typeclasses tend not to be used since the field name must be the generic one (like <code>left_distrib</code>), which isn't so nice if you want to extend the same typeclass multiple times for multiple operators.</p>",
        "id": 266176820,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640615631
    },
    {
        "content": "<p>I think they tend not to be used because we switched to bundled homs. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_mul_hom\">docs#is_mul_hom</a> is pretty close in essence.</p>",
        "id": 266176933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640615753
    },
    {
        "content": "<p>Okay, I got them all I think. Where should they go?</p>",
        "id": 266180203,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640618638
    },
    {
        "content": "<p>Next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.mul\">docs#add_monoid_hom.mul</a>?</p>",
        "id": 266200281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640634829
    },
    {
        "content": "<p>Putting it in <code>algebra.group.hom_instances</code> is not quite nice, because nothing imports that.</p>",
        "id": 266979333,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641410871
    },
    {
        "content": "<p>Where you have them in <code>prod</code> seems fine</p>",
        "id": 267063727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641477639
    }
]