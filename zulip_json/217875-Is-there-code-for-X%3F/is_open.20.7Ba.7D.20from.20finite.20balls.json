[
    {
        "content": "<p>Is this result (or something similar) in <code>mathlib</code>? The proof is not very difficult but it might exists already.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">metric.ball</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 316473057,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671290026
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite_of_mem_nhds\">docs#infinite_of_mem_nhds</a> seems related but not quite there yet</p>",
        "id": 316474735,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671290709
    },
    {
        "content": "<p>Actually the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite_of_mem_nhds\">docs#infinite_of_mem_nhds</a> is exactly what we want, we just have to remove the extra negation</p>",
        "id": 316477361,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671291880
    },
    {
        "content": "<p>I suggest replacing the current proof by this, which gives you what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_open_singleton_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_open_singleton_iff_nhds_eq_pure</span><span class=\"o\">,</span> <span class=\"n\">nhds_within</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mem_iff_inf_principal_compl</span><span class=\"o\">,</span>\n        <span class=\"bp\">←</span> <span class=\"n\">le_pure_iff</span><span class=\"o\">,</span> <span class=\"n\">nhds_ne_bot.le_pure_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open_singleton_of_finite_mem_nhds</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t1_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsf</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">singleton_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_of_mem_nhds</span> <span class=\"n\">hs</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hsf.subset</span> <span class=\"o\">(</span><span class=\"n\">diff_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">is_closed</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">B.is_open_compl.mem_nhds</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.2</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">diff_eq</span><span class=\"o\">,</span> <span class=\"n\">diff_diff_cancel_left</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">inter_mem</span> <span class=\"n\">hs</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mem_interior_iff_mem_nhds</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">singleton_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">subset_interior_iff_is_open</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">D</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infinite_of_mem_nhds</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t1_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">ne_bot</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.infinite</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">hsf</span><span class=\"o\">,</span> <span class=\"n\">hx.1</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">is_open_singleton_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_open_singleton_of_finite_mem_nhds</span> <span class=\"n\">x</span> <span class=\"n\">hs</span> <span class=\"n\">hsf</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 316477932,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671292161
    },
    {
        "content": "<p>Well, that would be great! Can you PR that?</p>",
        "id": 316478389,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671292386
    },
    {
        "content": "<p>Sure, once I'm done with fighting with the linter in mathlib4 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 316478538,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671292460
    },
    {
        "content": "<p>Thanks a lot <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 316478568,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671292477
    }
]