[
    {
        "content": "<p>Is there a library theorem that shows this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">dp</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">dq</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 254713290,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1632493776
    },
    {
        "content": "<p>That last implication is an <code>iff</code>, right?</p>",
        "id": 254717845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632495538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> yes it could be, but I'm currently only interested in this direction</p>",
        "id": 254733653,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1632501506
    },
    {
        "content": "<p>It appears this works; but do I need the <code>match</code> clause?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">dp</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">dq</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">dp</span><span class=\"o\">,</span> <span class=\"n\">dq</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">is_false</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">is_false</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span>\n<span class=\"bp\">|</span> <span class=\"n\">is_false</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">is_true</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span>\n<span class=\"bp\">|</span> <span class=\"n\">is_true</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">is_false</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span>\n<span class=\"bp\">|</span> <span class=\"n\">is_true</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">is_true</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254749814,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1632507858
    },
    {
        "content": "<p>If you're happy to use <code>mathlib</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">dp</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">dq</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span>\n  <span class=\"n\">cc</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254750333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632508064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ty! I wasn't aware of <code>split_ifs</code>.</p>",
        "id": 254751235,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1632508430
    }
]