[
    {
        "content": "<p>This was nonsense.<br>\n<del>Does someone see a quick way of proving the following?</del></p>",
        "id": 260406273,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636119735
    },
    {
        "content": "<p>Is this true as stated? Why can't the set of i larger than a be empty say and the other one not be?</p>",
        "id": 260407174,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636120164
    },
    {
        "content": "<p>Because I am stupid.</p>",
        "id": 260407312,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636120221
    },
    {
        "content": "<p>Time for  coffee</p>",
        "id": 260407328,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636120232
    },
    {
        "content": "<p>Ok, the real question is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.interval</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am not asking to do my work, but suggestions are welcome :)</p>",
        "id": 260411320,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636122079
    },
    {
        "content": "<p>I think the RHS is <code>∏ i in (finset.univ : finset ℕ).off_diag, f i.2 - f i.1</code>?</p>",
        "id": 260411614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636122241
    },
    {
        "content": "<p>You can move multiplication out of the LHS, swap the products on the right factor, then split the prod on the RHS as the <code>i &lt; j</code> and <code>j &lt; i</code> bits.</p>",
        "id": 260412018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636122431
    },
    {
        "content": "<p>Do we have something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter_or\">docs#finset.filter_or</a></p>",
        "id": 260412358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636122581
    },
    {
        "content": "<p>It's the \"swap the product\" part that is causing me troubles.</p>",
        "id": 260412380,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636122592
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter_or\">docs#finset.filter_or</a> seems relevant</p>",
        "id": 260412486,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636122624
    },
    {
        "content": "<p>Yeah, <code>simp_rw [ne_iff_lt_or_gt, finset.filter_or],</code> is a good start</p>",
        "id": 260413028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636122903
    },
    {
        "content": "<p>You might need to turn the double sum in a single one using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.product\">docs#finset.product</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_product\">docs#finset.prod_product</a>.</p>",
        "id": 260413196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636122979
    },
    {
        "content": "<p>And once again Eric, <code>finset.prod_product_right</code> would come in handy!</p>",
        "id": 260413266,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636123022
    },
    {
        "content": "<p>Well, no more handy than <code>rw [prod_product, prod_comm]</code></p>",
        "id": 260413602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636123185
    },
    {
        "content": "<p>This gets through some of the pain:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ne_iff_lt_or_gt</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_or</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">finset.prod</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.prod_union</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_inter.1</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">finset.mem_filter.1</span> <span class=\"n\">finset.mem_filter.1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_asymm</span> <span class=\"n\">hl</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260414737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636123689
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ne_iff_lt_or_gt</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_or</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">finset.prod</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.prod_union</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n      <span class=\"n\">conv</span> <span class=\"o\">{</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_neg_one_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_const</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_inter.1</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">finset.mem_filter.1</span> <span class=\"n\">finset.mem_filter.1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_asymm</span> <span class=\"n\">hl</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Takes care of one half of the product, the easy part...</p>",
        "id": 260423004,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636127285
    },
    {
        "content": "<p>And let's <code>simp</code> for the win.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod_filter_lt_mul_neg_eq_prod_off_diag</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ne_iff_lt_or_gt</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_or</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">finset.prod</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.prod_union</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n      <span class=\"n\">conv</span> <span class=\"o\">{</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_neg_one_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_const</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n      <span class=\"n\">conv</span> <span class=\"o\">{</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_neg_one_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_const</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">,</span> <span class=\"n\">filter_gt_card</span><span class=\"o\">],</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_sigma'</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_sigma'</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finset.prod_bij'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i.2</span><span class=\"o\">,</span> <span class=\"n\">i.1</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i.2</span><span class=\"o\">,</span> <span class=\"n\">i.1</span><span class=\"o\">⟩)</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_inter.1</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">finset.mem_filter.1</span> <span class=\"n\">finset.mem_filter.1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_asymm</span> <span class=\"n\">hl</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260429878,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636130095
    },
    {
        "content": "<p>Does this lemma generalize to <code>g i j = f i - f j</code>?</p>",
        "id": 260432589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636131239
    },
    {
        "content": "<p>Probably, as long as <code>g i j = - g j i</code>.</p>",
        "id": 260435289,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636132262
    },
    {
        "content": "<p>Oh, or maybe that condition is not even needed</p>",
        "id": 260435420,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636132322
    },
    {
        "content": "<p><del>It can probably be further generalized by replacing ...</del><br>\nedit: nevermind</p>",
        "id": 260435738,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636132446
    },
    {
        "content": "<p>Yes, it should be generalized and golfed</p>",
        "id": 260436092,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636132591
    }
]