[
    {
        "content": "<p>Is there some tactic that will solve goals of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>where <code>A B C : set X</code> ?</p>",
        "id": 212441928,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601997069
    },
    {
        "content": "<p><code>by ext; tauto!</code></p>",
        "id": 212442533,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601997205
    },
    {
        "content": "<p>Or <code>by finish</code></p>",
        "id": 212442580,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601997224
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> also had some incantation that involved <code>finish</code> with some extra arguments</p>",
        "id": 212442605,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601997235
    },
    {
        "content": "<p>This works for me though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span>\n</code></pre></div>",
        "id": 212442875,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601997343
    },
    {
        "content": "<p>Thanks. <code>finish</code> worked.</p>",
        "id": 212442919,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601997358
    },
    {
        "content": "<p>It had a hard time with this though <code>AA ∩ Q ∩ (AA ∩ Q1) = AA ∩ (Q ∩ Q1)</code>.</p>",
        "id": 212443068,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601997404
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/set.20tactic/near/186732870\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/set.20tactic/near/186732870</a></p>",
        "id": 212443371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601997521
    },
    {
        "content": "<p>To be fair, I'm using it in a proof that's ~130 lines long, and it fails with a deterministic timeout.</p>",
        "id": 212444197,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601997877
    },
    {
        "content": "<p>But this small example also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">set.ext_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 212444379,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601997960
    },
    {
        "content": "<p>This fails too :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 212444487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601997997
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n</code></pre></div>\n\n<p>That works!</p>",
        "id": 212444602,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601998056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Simple.20set.20theory.20nonsense/near/212444379\">said</a>:</p>\n<blockquote>\n<p>But this small example also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">set.ext_iff</span><span class=\"o\">]</span>\n</code></pre></div>\n\n</blockquote>\n<p>Interesting, I thought I tried that exact example, but actually what I tried was <code>c ∩ (a ∩ b) = (c ∩ a) ∩ (b ∩ c)</code></p>",
        "id": 212444758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601998119
    }
]