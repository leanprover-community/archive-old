[
    {
        "content": "<p>(The linear algebra code makes me so sad...)</p>\n<p>I have <code>x âˆˆ submodule.span R S</code> for some <code>S : set M</code>, and <code>module R M</code>.</p>\n<p>How to I obtain a formula for <code>x</code> as a linear combination of finitely many elements of <code>S</code>? (Ideally in a way that it's then convenient to do induction on the size of that linear combination?)</p>",
        "id": 209370529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599562281
    },
    {
        "content": "<p>I feel like grepping for <code>linear combination</code> should reveal this, but ...</p>",
        "id": 209370544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599562302
    },
    {
        "content": "<p>The fact that the word \"combination\" doesn't even appear in <code>linear_algebra.basic</code> seems worrying.</p>",
        "id": 209370609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599562348
    },
    {
        "content": "<p>Isn't there something like <code>finsupp.total</code> or something like that?</p>",
        "id": 209370615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599562354
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_induction\">docs#submodule.span_induction</a> help?</p>",
        "id": 209370690,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1599562435
    },
    {
        "content": "<p>This is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a></p>",
        "id": 209370789,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599562499
    },
    {
        "content": "<p><code>finsupp.total</code> does mention the words \"linear combination\" in its docstring, by the way :)</p>",
        "id": 209370940,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599562641
    },
    {
        "content": "<p>But even this has some business about an image of a set <code>v '' s</code>...</p>",
        "id": 209371368,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599563025
    },
    {
        "content": "<p>I have to make my set look like that? :-(</p>",
        "id": 209371468,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599563068
    },
    {
        "content": "<p>It seems <code>submodule.span_induction</code> will work smoothly for me.</p>",
        "id": 209371620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599563179
    },
    {
        "content": "<p>I got frustrated with something like this a little while ago for another project I was working on, and ended up proving this </p>\n<p><a href=\"https://github.com/adamtopaz/comb_geom/blob/e16b629d6de3fbdea54a528755e7305dfb51e902/src/linear_algebra/lincomb.lean#L145\">https://github.com/adamtopaz/comb_geom/blob/e16b629d6de3fbdea54a528755e7305dfb51e902/src/linear_algebra/lincomb.lean#L145</a></p>\n<p>I could try to clean it up and integrate it into mathlib with a small PR if people think it is actually useful.</p>",
        "id": 209377320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599567138
    },
    {
        "content": "<p>Has this finally got merged into mathlib?</p>",
        "id": 215125139,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604078516
    },
    {
        "content": "<p>No :(<br>\nIt's still unclear what form of this should belong in mathlib (if at all!)</p>",
        "id": 215130158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604080988
    },
    {
        "content": "<p>I guess some general stuff about linear combinations (defined as lists as in the above link) should also be added.</p>",
        "id": 215130317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604081046
    },
    {
        "content": "<p>Ah, that's a pity. I am trying to build a proof using that every element in a product of modules is a linear combination and your file would be extremely useful.</p>",
        "id": 215135528,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604083587
    },
    {
        "content": "<p>I think this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a> is the way to do such things with what's in mathlib, as the above comments suggest.</p>",
        "id": 215135932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604083807
    },
    {
        "content": "<p>Yes, I saw it. Your file looks much more transparent to me, though. Thanks again for the ref, at any rate.</p>",
        "id": 215136018,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604083866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215136018\">said</a>:</p>\n<blockquote>\n<p>Yes, I saw it. Your file looks much more transparent to me, though. Thanks again for the ref, at any rate.</p>\n</blockquote>\n<p>I agree, of course.</p>",
        "id": 215136077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604083902
    },
    {
        "content": "<p>Following the above discussion with <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> , I was thinking about creating a lemma to the effect that the product of two ideals (or two <code>R</code>-submodules contained in a <code>R</code>-algebra <code>A</code>) consists of all linear combinations of products of an element of the first module times an element of the second module. But of course I don't want to reinvent the wheel, so I would like to double check that this does not exist already.</p>",
        "id": 215202763,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604166393
    },
    {
        "content": "<p>I think linear combinations need some love. I don't know exactly what, but whatever we have at the moment in mathlib is just not very intuitive to use.</p>",
        "id": 215203546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604167256
    },
    {
        "content": "<p>But I don't have the time to experiment with this.</p>",
        "id": 215203559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604167267
    },
    {
        "content": "<p>Probably it's not something that you get right at the first attempt. So maybe we just need several people to try things out. And hopefully it will converge to something useful.</p>",
        "id": 215203584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604167306
    },
    {
        "content": "<p>I see. I will write down something for the above result, then, and we'll see if it is somehow useful.</p>",
        "id": 215203644,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604167348
    },
    {
        "content": "<p>At any rate, my impression with <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> 's file is that it was useful and very nice. Yet (unless I misread it) it still does not immediately contain the result about products of sub-modules that I was referring to.</p>",
        "id": 215203655,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604167371
    },
    {
        "content": "<p>Personally I think defining linear combinations as lists (as in the above file) is very intuitive</p>",
        "id": 215203679,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604167402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215203546\">said</a>:</p>\n<blockquote>\n<p>I think linear combinations need some love. I don't know exactly what, but whatever we have at the moment in mathlib is just not very intuitive to use.</p>\n</blockquote>\n<p>As one of the authors of this part of the library I would be interested to know what the pain points are</p>",
        "id": 215203777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604167536
    },
    {
        "content": "<p>I think that <code>finsupp</code> is actually the mathematically correct way to represent the type of linear combinations, because unlike lists they have the right equality relation</p>",
        "id": 215203848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604167613
    },
    {
        "content": "<p>how would you represent a linear combination where two of the vectors are the same?</p>",
        "id": 215203874,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604167652
    },
    {
        "content": "<p><code>{v1 * (a - b)}</code>?</p>",
        "id": 215203942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604167691
    },
    {
        "content": "<p>You can always express a linear combination as <code>(l.map (\\lam (vi, ai), finsupp.single vi ai)).sum</code> where <code>l</code> is a list of vectors and coefficients that is not necessarily injective in the <code>vi</code></p>",
        "id": 215204005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604167789
    },
    {
        "content": "<p>the summing of finsupps handles the job of putting all the coefficients of some fixed <code>v</code> into the same bucket</p>",
        "id": 215204067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604167838
    },
    {
        "content": "<p>Okay. That's one point that's not intuitive for me.</p>",
        "id": 215204083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604167863
    },
    {
        "content": "<p>Of course, I agree this can be done with finsupp, but I think representing them as lists is much closer to what I think of as a linear combination mathematically.</p>",
        "id": 215204107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604167898
    },
    {
        "content": "<p>The <code>finsupp</code> is just the normal form</p>",
        "id": 215204164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604167931
    },
    {
        "content": "<p>just like how <code>polynomial</code> only represents the polynomials in normal form</p>",
        "id": 215204180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604167953
    },
    {
        "content": "<p>In particular, as a mathematician, the set over which I sum is often \"irrelevant\". I fully appreciate that it cannot be really irrelevant, but my impression is that this aspect plays a major role in <code>finsupp</code>.</p>",
        "id": 215204189,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604167963
    },
    {
        "content": "<p>if you have a list, you can sum the list</p>",
        "id": 215204191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604167965
    },
    {
        "content": "<p>But two polynomials are equal if and only if their coefficients are the same, and this is not true for the finsupp representation of linear combinations</p>",
        "id": 215204211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604167989
    },
    {
        "content": "<p>it is</p>",
        "id": 215204219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168008
    },
    {
        "content": "<p>Why is <code>1 * v + 0 * v</code> the same as <code>1 * v</code> ?</p>",
        "id": 215204229,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168039
    },
    {
        "content": "<p>one is a linear combination of two vectors, and the other is a linear combination of one vector</p>",
        "id": 215204271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168059
    },
    {
        "content": "<p>Okay we're clearly having a miscommunication then</p>",
        "id": 215204287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168088
    },
    {
        "content": "<p>probably :)</p>",
        "id": 215204290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168098
    },
    {
        "content": "<p>that's not a linear combination of two vectors</p>",
        "id": 215204291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168099
    },
    {
        "content": "<p>that's a linear combination of one vector</p>",
        "id": 215204297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168108
    },
    {
        "content": "<p>Oh, I would say it's a linear comb of two vectors which just so happen to be the same</p>",
        "id": 215204310,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168140
    },
    {
        "content": "<p>The thing is, the finsupp allows you to pick a more abstract notion of indexing type than just the vectors themselves</p>",
        "id": 215204311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168141
    },
    {
        "content": "<p>In fact, this was a problem in the early versions of the linalg library that needed a major refactor</p>",
        "id": 215204365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168184
    },
    {
        "content": "<p>Oh, I thought you were identifying linear combinations with funsupp functions from the module to the ring</p>",
        "id": 215204369,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168193
    },
    {
        "content": "<p>So did I.</p>",
        "id": 215204376,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604168207
    },
    {
        "content": "<p>That depends on your use case</p>",
        "id": 215204384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168218
    },
    {
        "content": "<p>Usually, when you have a basis, the basis vectors are themselves given by <code>I -&gt; V</code> where <code>I</code> is an abstract indexing set</p>",
        "id": 215204414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168257
    },
    {
        "content": "<p>If you define it as a funsupp from some index type \\iota to R \\times M, that would be great, but I dont think what exists in mathlib right now actually does this.</p>",
        "id": 215204419,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168269
    },
    {
        "content": "<p>so you want the linear combinations to instead be <code>I -&gt;0 R</code></p>",
        "id": 215204420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168278
    },
    {
        "content": "<p>This <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a> is a good example</p>",
        "id": 215204464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168304
    },
    {
        "content": "<p>If you look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.total\">docs#finsupp.total</a> (which is the \"forgetful functor\" from linear combinations of vectors to vectors), you will see that there is an abstract indexing type <code>alpha</code></p>",
        "id": 215204499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168384
    },
    {
        "content": "<p>Yeah, I see now</p>",
        "id": 215204502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168393
    },
    {
        "content": "<p>But what should I \"normally\" chose as <code>alpha</code>? <code>Nat</code>?</p>",
        "id": 215204566,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604168424
    },
    {
        "content": "<p>That depends on where the vectors come from</p>",
        "id": 215204570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168437
    },
    {
        "content": "<p>Is this how <code>finsupp.total</code> was always defined?</p>",
        "id": 215204571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604168437
    },
    {
        "content": "<p>no</p>",
        "id": 215204574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168440
    },
    {
        "content": "<p>It was once the way Adam said, <code>V -&gt;0 R</code></p>",
        "id": 215204592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215204570\">said</a>:</p>\n<blockquote>\n<p>That depends on where the vectors come from</p>\n</blockquote>\n<p>Well, in my case at hand they are all elements of a ring, I am trying to say that every element of <code>I * J</code> (both ideals in <code>R</code>) is a linear combination of things, one from <code>I</code> and the other from <code>J</code>.</p>",
        "id": 215204606,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604168502
    },
    {
        "content": "<p>As in, just two things?</p>",
        "id": 215204660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168543
    },
    {
        "content": "<p>For that you don't need linear combinations at all, you just write <code>a * x + b * y</code></p>",
        "id": 215204671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168561
    },
    {
        "content": "<p>Well, no, they are of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>âˆ‘</mo><mrow><mi>i</mi><mo>âˆˆ</mo><mi>A</mi></mrow></msub><msub><mi>x</mi><mi>i</mi></msub><mo>âˆ—</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum _{i \\in A} x_i * y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">âˆ‘</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17862099999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">âˆˆ</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">âˆ—</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for some (finite) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span></p>",
        "id": 215204687,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604168581
    },
    {
        "content": "<p>That's the thing, with this finsupp formulation it's so cumbersome to state facts like \"every element in the span of a set is a linear combination of the elements of the set\"</p>",
        "id": 215204688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604168583
    },
    {
        "content": "<p>you can still do that though?</p>",
        "id": 215204766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168644
    },
    {
        "content": "<p>Same thing for the generic element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>âŠ—</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M\\otimes N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">âŠ—</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>.</p>",
        "id": 215204774,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604168650
    },
    {
        "content": "<p>if you really want to put in <code>I = V</code> you can</p>",
        "id": 215204782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> what's the type of A</p>",
        "id": 215204792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168673
    },
    {
        "content": "<p>Oh I understand now</p>",
        "id": 215204816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215204792\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> what's the type of A</p>\n</blockquote>\n<p>A finite subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>, typically (at least in my mind, I can come up with more complicated things; for instance I can index them over all elements in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>)</p>",
        "id": 215204824,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604168725
    },
    {
        "content": "<p>I think the indexing set in your example is <code>â†‘I Ã— â†‘J</code></p>",
        "id": 215204887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168766
    },
    {
        "content": "<p>if you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I can make something that typechecks</p>",
        "id": 215204921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215204887\">said</a>:</p>\n<blockquote>\n<p>I think the indexing set in your example is <code>â†‘I Ã— â†‘J</code></p>\n</blockquote>\n<p>Possibly; but a part from being potentially very huge it seems hard to compare it with elements in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>âˆ—</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">I*J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">âˆ—</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> *which I can see as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi></mrow><mo stretchy=\"false\">(</mo><mi>I</mi><mo>âˆ—</mo><mi>J</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Span}(I*J)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">n</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">âˆ—</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mclose\">)</span></span></span></span> and would be indexed on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>âˆ—</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">I*J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">âˆ—</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> (product of ideals, not cartesian product).</p>",
        "id": 215204992,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604168884
    },
    {
        "content": "<blockquote>\n<p>being potentially very huge</p>\n</blockquote>\n<p>It's just the index set, the range of possibilities for the vectors. These are usually infinite</p>",
        "id": 215205026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604168941
    },
    {
        "content": "<p>For the <a href=\"https://leanprover-community.github.io/mwe.html\">https://leanprover-community.github.io/mwe.html</a>: Well, I don't have it yet... I was figuring out how to prove my claim that every element of the product can be written in that way, and got lost in <code>finsupp</code> (with all the due respect, as I would have been totally incapable of coming up with <em>anything</em>, so no criticism at all is meant here)</p>",
        "id": 215205032,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604168954
    },
    {
        "content": "<p>I mean if you can provide something with the context of your problem</p>",
        "id": 215205094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604169028
    },
    {
        "content": "<p>like imports and variables</p>",
        "id": 215205099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604169042
    },
    {
        "content": "<p>Sure, give me a sec.</p>",
        "id": 215205120,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169069
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_smul_span\">docs#submodule.span_smul_span</a> is pretty close to your statement</p>",
        "id": 215205137,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169108
    },
    {
        "content": "<p>since if <code>I : ideal R</code> then <code>I = ideal.span (I : set R)</code></p>",
        "id": 215205199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215205137\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_smul_span\">docs#submodule.span_smul_span</a> is pretty close to your statement</p>\n</blockquote>\n<p>Indeed, it is. I was starting from there to try to construct the proof, but got a bit lost and begun wondering if what I was doing was worth it.</p>",
        "id": 215205202,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169156
    },
    {
        "content": "<p>Yeah I was going to point out next that this combination doesn't look very linear because there is no coefficient</p>",
        "id": 215205204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604169159
    },
    {
        "content": "<p>You don't need a coefficient because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>â‰¥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2 \\ge 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">â‰¥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>--but it might be better to allow one anyways for uniformity</p>",
        "id": 215205236,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169226
    },
    {
        "content": "<p>If you multiply together n ideals then you need to allow a coefficient from R when n=0</p>",
        "id": 215205294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169278
    },
    {
        "content": "<p>In that case, I would want to go for a more inductive formulation: if <code>I = ideal.span (set.range a)</code> and <code>J = ideal.span (set.range b)</code> then <code>I * J = ideal.span (set.range (\\lam (i,j), a i * b j)</code></p>",
        "id": 215205383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604169398
    },
    {
        "content": "<p>This seems very nice, and I can take <code>a = (I : set R)</code> and <code>b = (J : set R)</code></p>",
        "id": 215205413,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169454
    },
    {
        "content": "<p>Filippo, I'm curious what you intend to do next after applying this statement about linear combinations--normally I think the <code>span</code> formulation would be better</p>",
        "id": 215205414,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215205414\">said</a>:</p>\n<blockquote>\n<p>Filippo, I'm curious what you intend to do next after applying this statement about linear combinations--normally I think the <code>span</code> formulation would be better</p>\n</blockquote>\n<p>Well, I'm trying to prove the statement that for an invertible module <code>M</code>, <code>M * (1 / M ) \\le 1</code>. Which is immediate if I can take an element in <code>M * 1/M</code> and write it as a linear combination <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>âˆ‘</mo><msub><mi>x</mi><mi>i</mi></msub><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum x_i y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">âˆ‘</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>âˆˆ</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">x_i\\in M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">âˆˆ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>âˆˆ</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">y_i \\in 1/M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">âˆˆ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, so that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><msub><mi>y</mi><mi>i</mi></msub><mo>âˆˆ</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">x_iy_i\\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">âˆˆ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> by definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1/M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span></p>",
        "id": 215205502,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169561
    },
    {
        "content": "<p>Then you don't want to deal with linear combinations explicitly</p>",
        "id": 215205508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169592
    },
    {
        "content": "<p>Well, what do you mean by \"explicitely\"?</p>",
        "id": 215205567,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169622
    },
    {
        "content": "<p>just use the fact that if <code>M</code> is an <code>R</code>-submodule of something and <code>S \\sub M</code> then <code>span S \\sub M</code></p>",
        "id": 215205569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169627
    },
    {
        "content": "<p>I mean you don't need to mention things like <code>finsupp.total</code></p>",
        "id": 215205587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169672
    },
    {
        "content": "<p><code>apply submodule.span_le</code></p>",
        "id": 215205588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604169672
    },
    {
        "content": "<p>assuming that <code>M * (1/M)</code> is defined as a span (which I think it is).</p>",
        "id": 215205599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604169705
    },
    {
        "content": "<p>You can use the \"universal algebra-style\" characterization of the span (i.e. linear combinations) of <code>S</code> as the smallest ideal/submodule containing <code>S</code></p>",
        "id": 215205657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169749
    },
    {
        "content": "<p>Well, that's what I was trying to do, but could not understand how to use the definition of the product to come up with elements.</p>",
        "id": 215205699,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169839
    },
    {
        "content": "<p>This is what I read:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">âŸ¨</span><span class=\"bp\">Î»</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">â¨†</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">N.map</span> <span class=\"bp\">$</span> <span class=\"n\">algebra.lmul</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">s.1</span><span class=\"o\">âŸ©</span>\n</code></pre></div>",
        "id": 215205763,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169891
    },
    {
        "content": "<p>I agree the definition of the product is less convenient (though you could presumably do a similar argument with it)</p>",
        "id": 215205765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169901
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.mul_le\">docs#ideal.mul_le</a></p>",
        "id": 215205780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604169924
    },
    {
        "content": "<p>i.e., it's a <code>â¨†</code> so to prove it's <code>\\le 1</code> means to prove each summand is <code>\\le 1</code></p>",
        "id": 215205782,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604169926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215205780\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.mul_le\">docs#ideal.mul_le</a></p>\n</blockquote>\n<p>This doesn't work, I guess. because it's not about ideals.</p>",
        "id": 215205792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604169945
    },
    {
        "content": "<p>What is the type of anything?</p>",
        "id": 215205820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604169964
    },
    {
        "content": "<p>Exactly, it's about submodules in a <code>R</code>-algebra</p>",
        "id": 215205840,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169968
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please</p>",
        "id": 215205841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604169969
    },
    {
        "content": "<p>both are <code>submodules A R</code></p>",
        "id": 215205842,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604169979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215205841\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please</p>\n</blockquote>\n<p>Working on it...</p>",
        "id": 215205852,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170001
    },
    {
        "content": "<p>Can you use <code>extract_goal</code> to create the lemma that you want to prove?</p>",
        "id": 215205854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170004
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mul_le\">docs#submodule.mul_le</a></p>",
        "id": 215205861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604170027
    },
    {
        "content": "<p>Then I can post a 5-line proof, and Mario will golf it into a 42-character proof</p>",
        "id": 215205870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170045
    },
    {
        "content": "<p>I was about to say the same as Reid. Consider how one might define the subgroup generated by a subset X of an abelian group A. I can think of three ways to do it.</p>\n<p>1) intersection of all the subgroups of A that contain X</p>\n<p>2) custom inductive type. Elements of X are in, 0 is in, sum of two elements which are in is in, negation of an element which is in, is in</p>\n<p>3) something involving the image of some finsupp</p>",
        "id": 215205871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215205870\">said</a>:</p>\n<blockquote>\n<p>Then I can post a 5-line proof, and Mario will golf it into a 42-character proof</p>\n</blockquote>\n<p>Is this what you mean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">I</span> <span class=\"bp\">â‰¤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215205961,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170161
    },
    {
        "content": "<p>imports?</p>",
        "id": 215205965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604170173
    },
    {
        "content": "<p>But what in practice does one want from these things? When I first learnt about inductive types etc I got super-excited about the idea of (2) and how the recursor was generated automatically and looked mathematically useful</p>",
        "id": 215205966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170173
    },
    {
        "content": "<p>But now more and more I am realising the power of (1). It's quite pleasant to prove things about definition (1)</p>",
        "id": 215206020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170217
    },
    {
        "content": "<p>But can you work with them \"explicitely\"? Or at least, would you admit it takes a bit to change our \"usual\" elements-based proofs into that language?</p>",
        "id": 215206037,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170266
    },
    {
        "content": "<p>Which, of course, I am willing to...but still trying to learn.</p>",
        "id": 215206039,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170280
    },
    {
        "content": "<p>The idea behind having a big API is so that you can use any of (1) (2) or (3) depending on your current use case</p>",
        "id": 215206056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604170311
    },
    {
        "content": "<p>You can construct the recursor yourself</p>",
        "id": 215206057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170312
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 215206127,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170356
    },
    {
        "content": "<p>right, in practice you want whichever one of the three is the most convenient in a given situation.<br>\nTextbooks in (say) commutative algebra will often use (3) everywhere even when using (1) is logically more efficient, because it costs so little to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>âˆ‘</mo><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_i x_i y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">âˆ‘</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> on a page</p>",
        "id": 215206140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604170386
    },
    {
        "content": "<p>Your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> doesn't work</p>",
        "id": 215206143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604170398
    },
    {
        "content": "<p>Try copying it into a new file</p>",
        "id": 215206154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604170414
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.operations</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">I</span> <span class=\"bp\">â‰¤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215206163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604170438
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.operations</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">â‰¤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">submodule.mul_le</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">submodule.mem_div_iff_forall_mul_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215206205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170452
    },
    {
        "content": "<p>5 lines, as promised</p>",
        "id": 215206209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170461
    },
    {
        "content": "<p>Note that I changed the import, and added <code>(..)</code> around <code>1 / I</code></p>",
        "id": 215206214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170478
    },
    {
        "content": "<p>Great, I tried for the whole morning... <span aria-label=\"silence\" class=\"emoji emoji-1f910\" role=\"img\" title=\"silence\">:silence:</span></p>",
        "id": 215206225,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170492
    },
    {
        "content": "<p>Then inspect the proof carefully and figure out what you were missing</p>",
        "id": 215206239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170516
    },
    {
        "content": "<p>Sure, I will. Thanks.</p>",
        "id": 215206244,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170529
    },
    {
        "content": "<p>As a beginner I would always unfold everything</p>",
        "id": 215206245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170530
    },
    {
        "content": "<p>And I have learnt more recently that whilst this teaches you a lot about how lean and type theory works</p>",
        "id": 215206301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170576
    },
    {
        "content": "<p>It is almost never the optimal way to prove things, because the way to prove things is to use the API</p>",
        "id": 215206319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170613
    },
    {
        "content": "<p>The way to prove things is to prove them mathematically and then to try and translate your 5 line maths proof into Lean</p>",
        "id": 215206338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170649
    },
    {
        "content": "<p>Well, that's what I was trying, but got stuck with my elements-based proof, as Reid said.</p>",
        "id": 215206414,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170720
    },
    {
        "content": "<p>But I see your point, thanks.</p>",
        "id": 215206416,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604170728
    },
    {
        "content": "<p>My PhD student Ashvni made a short PR today about subalgebras and submodules and I think her proof was six lines long, and also used submodule.mul_le</p>",
        "id": 215206433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170756
    },
    {
        "content": "<p>Things like mul_le are great examples of the tricks that you can do when working with products of ideals</p>",
        "id": 215206492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170805
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.operations</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">â‰¤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_le.2</span> <span class=\"bp\">$</span> <span class=\"bp\">Î»</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">â–¸</span> <span class=\"o\">(</span><span class=\"n\">mem_div_iff_forall_mul_mem.2</span> <span class=\"n\">hn</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>80 chars... <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>",
        "id": 215206507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170824
    },
    {
        "content": "<p>The triangle works!</p>",
        "id": 215206522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604170850
    },
    {
        "content": "<p>4 of those <code>()</code>s look unnecessary</p>",
        "id": 215206606,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604170929
    },
    {
        "content": "<p>which is all of them I guess</p>",
        "id": 215206610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604170934
    },
    {
        "content": "<p>Ooh, I don't need the parens... and I can rename <code>hm</code> and <code>hn</code> to <code>h</code> and <code>H</code>.</p>",
        "id": 215206615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170942
    },
    {
        "content": "<p>That's 72 chars</p>",
        "id": 215206618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170945
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">â‰¤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_le.2</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">mem_div_iff_forall_mul_mem</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 215206619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604170950
    },
    {
        "content": "<p>Is that 42?</p>",
        "id": 215206625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604170959
    },
    {
        "content": "<p>49</p>",
        "id": 215206647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604170976
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 215206677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171010
    },
    {
        "content": "<p><code>by finish [mul_le, mem_div_iff_forall_mul_mem]</code> is 47</p>",
        "id": 215206685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604171028
    },
    {
        "content": "<p>and slow...</p>",
        "id": 215206740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171058
    },
    {
        "content": "<p>I guess we need to rename <code>mem_div_iff_forall_mul_mem</code> to something shorter <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 215206756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171095
    },
    {
        "content": "<p><code>rfl</code></p>",
        "id": 215206767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604171114
    },
    {
        "content": "<p>I think it could just be <code>mem_div_iff</code> since it's the definition</p>",
        "id": 215206783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604171148
    },
    {
        "content": "<p>That would even bring it below <img alt=\":37:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18469.png\" title=\"37\"> chars</p>",
        "id": 215206835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171182
    },
    {
        "content": "<p>What would happen if J and Lean had a child?</p>",
        "id": 215206864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171235
    },
    {
        "content": "<p>L</p>",
        "id": 215206867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604171246
    },
    {
        "content": "<p>We'd have seriously weird unicode symbols for tactics like <code>finish</code></p>",
        "id": 215206874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215206619\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">â‰¤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_le.2</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">mem_div_iff_forall_mul_mem</span><span class=\"o\">]</span>\n</code></pre></div>\n</blockquote>\n<p>Thanks to both! I confess that while <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's code was clear at first, now eveything seems less comprehensible. What does the <code>$</code> mean (I see it everywhere, never dared to ask)?</p>",
        "id": 215207026,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604171441
    },
    {
        "content": "<p><code>foo $ bar x</code> is the same as <code>foo (bar x)</code></p>",
        "id": 215207045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171465
    },
    {
        "content": "<p>It just means \"put parentheses around everything that follows me\".</p>",
        "id": 215207056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171483
    },
    {
        "content": "<p>It doesn't even save us a character. But if you use it multiple times, then it avoids ending the line with <code>)))))</code></p>",
        "id": 215207107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171524
    },
    {
        "content": "<p>Ah, ok!</p>",
        "id": 215207116,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604171533
    },
    {
        "content": "<p>The $ thing is a really cool trick. I read something about Pratt parsers and then it all made sense</p>",
        "id": 215207120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171541
    },
    {
        "content": "<p>Pratt parsers?</p>",
        "id": 215207130,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604171561
    },
    {
        "content": "<p>A $ B is literally defined to be A B but $ has precedence 1</p>",
        "id": 215207133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171568
    },
    {
        "content": "<p>In the UK we call it bidmas or bodmas</p>",
        "id": 215207144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171585
    },
    {
        "content": "<p>Pemdas in the US</p>",
        "id": 215207147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171594
    },
    {
        "content": "<p>It's about which operators to do first</p>",
        "id": 215207151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171603
    },
    {
        "content": "<p><code>$</code> is a Haskell thing right?</p>",
        "id": 215207164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604171621
    },
    {
        "content": "<p>AH, go(ogle)t it!</p>",
        "id": 215207167,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604171624
    },
    {
        "content": "<p>Multiplication has higher priority than addition so we all know what a+b*c means</p>",
        "id": 215207171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215207164\">said</a>:</p>\n<blockquote>\n<p><code>$</code> is a Haskell thing right?</p>\n</blockquote>\n<p>It was a US thing before that (-;</p>",
        "id": 215207218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604171657
    },
    {
        "content": "<p>$ literally means \"do nothing, with priority 1\" ie very low</p>",
        "id": 215207219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171658
    },
    {
        "content": "<p>You can write <code>#print notation $</code> to see.</p>",
        "id": 215207237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171700
    },
    {
        "content": "<p>Compare with <code>#print notation *</code> which tells you multiplication has priority 70 or so</p>",
        "id": 215207260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215207237\">said</a>:</p>\n<blockquote>\n<p>You can write <code>#print notation $</code> to see.</p>\n</blockquote>\n<p>Well, to see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_</span> <span class=\"bp\">`$`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>to which I still prefer your explanation...</p>",
        "id": 215207279,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604171755
    },
    {
        "content": "<p>So when lean is parsing everything, it leaves $ until last</p>",
        "id": 215207280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171761
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\">https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/</a></p>",
        "id": 215207330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171793
    },
    {
        "content": "<p>mul_le is the universal property of product of ideals. If you use the universal property you don't have to get your hands dirty with elements</p>",
        "id": 215207372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604171854
    },
    {
        "content": "<p>Right.</p>",
        "id": 215207456,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604171992
    },
    {
        "content": "<p>I'll have stuff to work on during my locked-down Sunday - thanks!</p>",
        "id": 215207518,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604172031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem.2Espan/near/215207219\">said</a>:</p>\n<blockquote>\n<p>$ literally means \"do nothing, with priority 1\" ie very low</p>\n</blockquote>\n<p>It doesn't mean \"do nothing\", it means application, although adjacency (i.e. nothing) is also notation for application</p>",
        "id": 215207607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604172126
    },
    {
        "content": "<p>This issue has come up again -- <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> has run into it. The proof that if all nonzero ideals are invertible in a comm ring R then R is Noetherian goes like this: Say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is a non-zero ideal. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>Ã—</mo><msup><mi>I</mi><mrow><mo>âˆ’</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">I\\times I^{-1}=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">Ã—</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">âˆ’</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> so there exists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>âˆˆ</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">a_i\\in I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">âˆˆ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>âˆˆ</mo><msup><mi>I</mi><mrow><mo>âˆ’</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">b_i\\in I^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">âˆˆ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">âˆ’</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>âˆ‘</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_i a_i b_i = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">âˆ‘</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (a finite sum); multiplying both sides by an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> now shows that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> generate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>.</p>",
        "id": 215582375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604497897
    },
    {
        "content": "<p>This time I don't immediately see how to use <code>mul_le</code> to get around this.</p>",
        "id": 215582413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604497920
    },
    {
        "content": "<p>OK I think that there is a very natural proof of what Ashvni needs if we had the following weaker theorem: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module (or semiwhathaveyou) and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>âŠ†</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">S\\subseteq M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">âŠ†</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a subset, and if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is in <code>span S</code> then there's a finite subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">â€²</mo></msup><mo>âŠ†</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S'\\subseteq S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.887862em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">â€²</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">âŠ†</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is in <code>span S'</code>. Do we have _this_? I can't spot it in mathlib.</p>",
        "id": 215605948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604507389
    },
    {
        "content": "<p>This shouldn't be hard to prove using <code>span_induction</code>. Let's say this isn't in mathlib. Should we put in the version which has <code>S'</code> a <code>finset</code> or the version with <code>S'</code> a set which is also <code>finite</code>?</p>",
        "id": 215606902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604507713
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">submodule.mem_span_finset_of_mem_span</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">âˆƒ</span> <span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">â†‘</span><span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">âŠ†</span> <span class=\"n\">S</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">x</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">â†‘</span><span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I can prove this; is this the right form for mathlib?</p>",
        "id": 215611706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604509619
    },
    {
        "content": "<p>I would suggest using a <code>finite</code> set, because you only ever use it in the form <code>(â†‘S' : set M)</code>. If the user wants it to be in that form then they can apply the theorem to unfold <code>finite</code> into that</p>",
        "id": 215625458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604516043
    },
    {
        "content": "<p>Thanks. The proof was also nothing but coercions and I needed classical to take a union of two finsets (although perhaps I'll also need it to take a union of two finite sets)</p>",
        "id": 215651419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604530363
    }
]