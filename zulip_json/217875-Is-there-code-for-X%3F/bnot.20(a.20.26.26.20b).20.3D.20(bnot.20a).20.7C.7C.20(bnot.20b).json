[
    {
        "content": "<p>Do we have a tactic which solves</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>? I tried <code>finish</code>, <code>tauto</code>, <code>tauto!</code>, <code>cc</code>, <code>simp</code> and <code>exact dec_trivial</code> but none work. I know I can prove it by casing on a and b, but in my use case a and b are unwieldy and if I have a tactic it will save me the work of <code>generalize</code>ing.</p>",
        "id": 195294409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835670
    },
    {
        "content": "<p><code>revert a b, exact dec_trivial</code> ??</p>",
        "id": 195294457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587835691
    },
    {
        "content": "<p>This does work, but in my use case it will be revert [some unholy mess]. I was surprised that this wasn't in logic.basic -- I should say <code>library_search</code> also seems to fail (unless I've not got the right imports?)</p>",
        "id": 195294484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835762
    },
    {
        "content": "<p>Or otherwise</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 195294485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587835762
    },
    {
        "content": "<p>What if a and b are 100 ASCII characters long?</p>",
        "id": 195294491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835780
    },
    {
        "content": "<p>Then first prove this lemma</p>",
        "id": 195294493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587835794
    },
    {
        "content": "<p>rofl</p>",
        "id": 195294496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835801
    },
    {
        "content": "<p>And apply it</p>",
        "id": 195294497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587835801
    },
    {
        "content": "<p><code>cases_matching</code></p>",
        "id": 195294542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587835818
    },
    {
        "content": "<p>maybe not</p>",
        "id": 195294545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587835825
    },
    {
        "content": "<p>You can do it locally:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 195294550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587835836
    },
    {
        "content": "<p>Right.</p>",
        "id": 195294554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835846
    },
    {
        "content": "<p>Does our esteemed mathematics library not contain this result??</p>",
        "id": 195294559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835858
    },
    {
        "content": "<p>PR</p>",
        "id": 195294570,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587835879
    },
    {
        "content": "<p>Where does it go?</p>",
        "id": 195294576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835887
    },
    {
        "content": "<p><code>data.codewars</code></p>",
        "id": 195294578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835891
    },
    {
        "content": "<p>together with <code>def lt_abs (x y : ℝ) : x &lt; abs y ↔ x &lt; y ∨ x &lt; -y := lt_max_iff</code></p>",
        "id": 195294583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835912
    },
    {
        "content": "<p><code>data.bool</code></p>",
        "id": 195294584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587835913
    },
    {
        "content": "<p>and <code>theorem modeq_iff_dvd' {n : ℕ} {a b : ℕ} (h : a ≤ b) : a ≡ b [MOD n] ↔ n ∣ b - a</code></p>",
        "id": 195294632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587835942
    },
    {
        "content": "<p>^^ spoiler alerts</p>",
        "id": 195294710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587836069
    },
    {
        "content": "<p>Why are you suddenly using <code>bool</code>?</p>",
        "id": 195295265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587836926
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2523\" title=\"https://github.com/leanprover-community/mathlib/issues/2523\">#2523</a></p>",
        "id": 195295702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587837576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/bnot.20(a.20.26.26.20b).20.3D.20(bnot.20a).20.7C.7C.20(bnot.20b)/near/195295265\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/bnot.20(a.20.26.26.20b).20.3D.20(bnot.20a).20.7C.7C.20(bnot.20b)/near/195295265\">said</a>:</p>\n<blockquote>\n<p>Why are you suddenly using <code>bool</code>?</p>\n</blockquote>\n<p>bloody codewars</p>",
        "id": 195295707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587837584
    },
    {
        "content": "<p>It's Saturday night</p>",
        "id": 195295712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587837599
    },
    {
        "content": "<p>This should be in <code>data.bool</code></p>",
        "id": 195299027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587842854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/bnot.20(a.20.26.26.20b).20.3D.20(bnot.20a).20.7C.7C.20(bnot.20b)/near/195295702\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/bnot.20(a.20.26.26.20b).20.3D.20(bnot.20a).20.7C.7C.20(bnot.20b)/near/195295702\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2523\" title=\"https://github.com/leanprover-community/mathlib/issues/2523\">#2523</a></p>\n</blockquote>",
        "id": 195299482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587843518
    },
    {
        "content": "<p>I read my messages in temporal order, so sometimes my responses come from the past :)</p>",
        "id": 195299863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587844091
    }
]