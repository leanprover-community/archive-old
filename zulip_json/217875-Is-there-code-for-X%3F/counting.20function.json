[
    {
        "content": "<p>A question inspired by discussion in General: is there a counting function which returns the n-th natural number satisfying predicate f?</p>",
        "id": 249880076,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629306150
    },
    {
        "content": "<p>AFAIK, there is <code>nat.find</code> which you would have to iterate, otherwise, if you had a bound on the n-th natural number, you could use <code>find_greatest</code> I suppose.</p>",
        "id": 249880394,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629306280
    },
    {
        "content": "<p>Well, I am just thinking of creating a bounding function and a basic API to it as my first contribution to mathlib, and want to get sure I will not duplicate something already implemented.</p>",
        "id": 249881734,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629306817
    },
    {
        "content": "<p>If you can write (at least roughly) a type for the function you have in mind, you can get a more precise answer about what exists.  (It's also good to run API ideas past the community anyway.)</p>",
        "id": 249882220,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629307017
    },
    {
        "content": "<p>I think this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n\n<span class=\"sd\">/-- `satisfied_by p i n c` states that there are `n` values less than or equal to `i` which satisfy `p`, and</span>\n<span class=\"sd\">that `p m` is satisfied iff`c`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">satisfied_by</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero_pos</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">satisfied_by</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero_neg</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">satisfied_by</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_pos</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">satisfied_by</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">satisfied_by</span> <span class=\"n\">i.succ</span> <span class=\"n\">n.succ</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_neg</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">satisfied_by</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">satisfied_by</span> <span class=\"n\">i.succ</span> <span class=\"n\">n</span> <span class=\"n\">ff</span>\n\n<span class=\"sd\">/-- a counting function which returns the `n`-th natural number satisfying predicate p -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">satisfied_by</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">tt</span><span class=\"o\">),</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 249886298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629308844
    },
    {
        "content": "<p>So this returns <code>0</code> when no such <code>n</code>-th nat exists, right?</p>",
        "id": 249887699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629309456
    },
    {
        "content": "<p>Yeah, I think so. There's probably a nicer way than using <code>infi</code></p>",
        "id": 249887752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629309476
    },
    {
        "content": "<p>Of course, you'll probably want to show that <code>decidable_pred (λ (i : ℕ), satisfied_by p i n tt)</code>, which I think is true but is going to be a painful case-bash</p>",
        "id": 249888195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629309628
    },
    {
        "content": "<p>Perhaps you can do it with fewer constructors</p>",
        "id": 249888211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629309633
    },
    {
        "content": "<p>I don't think you need the bools at all?</p>",
        "id": 249888749,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629309835
    },
    {
        "content": "<p>I think a computable version that just assumes the set is infinite would be nice?</p>",
        "id": 249888826,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629309849
    },
    {
        "content": "<p>No, but I figured they'd make things easier later</p>",
        "id": 249888829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629309849
    },
    {
        "content": "<p>The alternative would be to use <code>satisfied_by p i n ∧ p i</code> instead of <code>satisfied_by p i n tt</code></p>",
        "id": 249889011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629309920
    },
    {
        "content": "<p>if you're taking the infi can't we just use the smallest <code>i</code> with <code>satisfied_by p i n</code>?</p>",
        "id": 249889112,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629309959
    },
    {
        "content": "<p>Sure, i just thought that condition might come up in the computable version</p>",
        "id": 249889309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629310034
    },
    {
        "content": "<p>ahh I think I get the motivation</p>",
        "id": 249889491,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629310105
    },
    {
        "content": "<p>I think this would be another option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.preorder_hom</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">r</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n    <span class=\"k\">then</span> <span class=\"n\">h.some</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 249889656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629310194
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import might need to be changed to `data.nat.lattice` in a more recent version of mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 249891312,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629310928
    },
    {
        "content": "<p>These are really nice. I especially like that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is then simply <code>count prime n</code>.</p>",
        "id": 249891596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629311058
    },
    {
        "content": "<p>A more restrictive but computable version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.primes</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nth_with_aux</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">j</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n               <span class=\"k\">in</span> <span class=\"n\">nth_with_aux</span> <span class=\"n\">n</span> <span class=\"n\">j.succ</span> <span class=\"n\">j</span>\n\n<span class=\"c1\">-- maybe `find_nth` would be a more appropriate name</span>\n<span class=\"kd\">def</span> <span class=\"n\">nth_with</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nth_with_aux</span> <span class=\"n\">h</span> <span class=\"n\">n.succ</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf_evens</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">even</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl.ge</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.even_succ.mpr</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">nth_with</span> <span class=\"n\">inf_evens</span><span class=\"o\">)</span>\n<span class=\"c1\">-- [0, 2, 4, 6]</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">nth_with</span> <span class=\"n\">nat.exists_infinite_primes</span><span class=\"o\">)</span>\n<span class=\"c1\">-- [2, 3, 5, 7, 11]</span>\n</code></pre></div>",
        "id": 249892100,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629311312
    },
    {
        "content": "<p>Taking a step back, why are we calling this <code>count</code>? This is the \"nth element satisfying <code>p</code>\". We should have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.fincard</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.card</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">nth</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nth</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 249892146,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629311348
    },
    {
        "content": "<p>With my example, if you import <code>data.nat.primes</code> too, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">nth_with</span> <span class=\"n\">nat.exists_infinite_primes</span><span class=\"o\">)</span>\n<span class=\"c1\">-- [2, 3, 5, 7, 11]</span>\n</code></pre></div>",
        "id": 249892464,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629311488
    },
    {
        "content": "<p>i'm currently trying to make a decidable instance for Eric's definition, and just want to <code>resetI</code> all the time, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">satisfied_by</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">n.rec_on</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span>\n          <span class=\"k\">then</span> <span class=\"n\">decidable.is_false</span> <span class=\"o\">(</span><span class=\"n\">not_satisfied_of_zero</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n          <span class=\"k\">else</span>\n          <span class=\"bp\">@</span><span class=\"n\">nat.rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">satisfied_by</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">decidable.is_true</span> <span class=\"o\">(</span><span class=\"n\">satisfied_by.zero_neg</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">decidable.by_cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n          <span class=\"o\">)</span>\n</code></pre></div>\n<p>this makes me feel that I'm doing it wrong; what's the \"correct\" way to make decidable instances?</p>",
        "id": 249893202,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629311792
    },
    {
        "content": "<p>eq compiler</p>",
        "id": 249894647,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629312441
    },
    {
        "content": "<p>As another idea, could we first define the inverse of nth, (which is just number of elements satisfying p which are less than the given number), and then define nth as its inverse?</p>",
        "id": 249895651,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629312872
    },
    {
        "content": "<p>Defining functions through inversion is usually a bad idea.</p>",
        "id": 249895767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629312929
    },
    {
        "content": "<p>Okay, thanks. As for the rubbish values: if there are only n numbers satisfying p, we could set nth p k = (nth p (k-1)) + 1 for <code>n \\le k</code>, because this way we have the main theorems about nth (that it is injective, strictly monotone, and that <code>k \\le nth p k</code>) without having to supply that there are infinitely many numbers satisfying p. Because otherwise it doesn't really matter what the rubbish values are, does it?</p>",
        "id": 249897451,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629313506
    },
    {
        "content": "<p>(btw, how do I render <code>\\le</code> correctly in the chat?)</p>",
        "id": 249897608,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629313568
    },
    {
        "content": "<p>(dollar dollar \\leq dollar dollar)</p>",
        "id": 249898587,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629314052
    },
    {
        "content": "<p>Can anyone prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_count</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>with <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>'s definition above? It seems quite tricky!</p>",
        "id": 250114397,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629464641
    },
    {
        "content": "<p>If I can fill that in I have the pleasant fact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">set.infinite.order_iso_nat</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s.infinite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 250114573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629464720
    },
    {
        "content": "<p>Why isn't <code>count</code> just something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.length</span> <span class=\"o\">((</span><span class=\"n\">list.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250114917,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629464898
    },
    {
        "content": "<p>I put my work so far on an API for <code>count</code> and <code>nth</code> in <a href=\"https://github.com/leanprover-community/mathlib/tree/count\">branch#count</a>, in <code>data.nat.count</code>. Contributions welcome.</p>",
        "id": 250114955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629464916
    },
    {
        "content": "<p>I'm perfectly happy with that definition as well.</p>",
        "id": 250114988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629464939
    },
    {
        "content": "<p>But now I'm off to sleep.</p>",
        "id": 250115149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629465013
    },
    {
        "content": "<p>I'll have a go!</p>",
        "id": 250115186,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629465036
    },
    {
        "content": "<p>Wait, your lemma is wrong, Scott. What if <code>\\not p n</code>?</p>",
        "id": 250115520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629465228
    },
    {
        "content": "<p>There's a hypothesis <code>h : p n</code>?</p>",
        "id": 250116670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629465830
    },
    {
        "content": "<p>Ah, of course.</p>",
        "id": 250117056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629466048
    },
    {
        "content": "<p>We should state that <code>nth</code> and <code>count</code> form a Galois connection, then <code>p n</code> tantamounts to <code>n</code> closed.</p>",
        "id": 250117160,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629466088
    },
    {
        "content": "<p>They are not just a Galois connection, they're inverses, right?</p>",
        "id": 250117531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629466304
    },
    {
        "content": "<p>Yes, but not between <code>ℕ</code> and <code>ℕ</code>.</p>",
        "id": 250117948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629466529
    },
    {
        "content": "<p>good point</p>",
        "id": 250118069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629466567
    },
    {
        "content": "<p>Proved <code>nth_count</code> from the Galois connection and another sorry.</p>",
        "id": 250156958,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629484983
    },
    {
        "content": "<p><code>nth_count_gc</code> doesn't seem to work for me <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 250157146,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629485086
    },
    {
        "content": "<p>Yeah, the definition of <code>count</code> is probably off by one</p>",
        "id": 250165306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629489435
    },
    {
        "content": "<p>i meant your proof, but I think it's pretty invariably flawed in general:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_count_gc</span>  <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"o\">(</span><span class=\"n\">nth</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  case nat.zero</span>\n<span class=\"cm\">    p: ℕ → Prop</span>\n<span class=\"cm\">    b: ℕ</span>\n<span class=\"cm\">    h: 0 ≤ count p b</span>\n\n<span class=\"cm\">  ⊢ nth p 0 ≤ b</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250173701,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629494190
    },
    {
        "content": "<p>Okay whoops, it's the other way around</p>",
        "id": 250176639,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629496075
    },
    {
        "content": "<p>sorry I didn't just fix it, don't have much of an intuition for galois connections yet</p>",
        "id": 250176900,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629496259
    },
    {
        "content": "<p>i've never seen them really described as a separate concept outside mathlib</p>",
        "id": 250176922,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629496283
    },
    {
        "content": "<p>i've pushed some proofs though</p>",
        "id": 250176939,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629496298
    },
    {
        "content": "<p>I'm confused by the state of the new commits. It looks like there are a bunch of lemmas proved as consequences of the incorrect statement about a galois connection.</p>",
        "id": 250181733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629500253
    },
    {
        "content": "<p>After deleting those parts, the <code>computable</code> section has no content, besides a duplicate of <code>count_eq_count_add_one</code> in the <code>noncomputable</code> section.</p>",
        "id": 250181980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629500457
    },
    {
        "content": "<p>so I think I'll just delete the computable section.</p>",
        "id": 250181994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629500476
    },
    {
        "content": "<p>I've changed the definition of <code>count</code> to the computable version, and added a lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">count_eq_card</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>for when the cardinality version is more useful.</p>",
        "id": 250182552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629500937
    },
    {
        "content": "<p>I've pushed this now. (But <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, please do double check that I didn't remove something useful about galois connections.)</p>",
        "id": 250182819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629501208
    },
    {
        "content": "<p>What's true is <code>galois_connection (count p) (nth p)</code>. All the results I had in the computable section can be turned around and it should be about as easy as before to get <code>nth_count</code>.</p>",
        "id": 250198460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629523676
    },
    {
        "content": "<p>Surely you're assuming <code>p</code> is true infinitely often before there is a galois connection.</p>",
        "id": 250200336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629526621
    },
    {
        "content": "<p>Yep</p>",
        "id": 250205209,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629534537
    },
    {
        "content": "<p>Ah, yes, you have some results unconditional on that.</p>",
        "id": 250205666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629535261
    },
    {
        "content": "<p>In particular the lemma that I think is the \"hard\" one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_count</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>doesn't depend on it being true infinitely often.</p>",
        "id": 250206070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629535602
    },
    {
        "content": "<p>Yeah, I understand your point now</p>",
        "id": 250206396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629536039
    },
    {
        "content": "<p>There are some off by one errors that I think I've just fixed.</p>",
        "id": 250207377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629537579
    },
    {
        "content": "<p>Argh, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, your last commit seems to be badly broken (8f3294ca76cf5c5b8d9d0f91fd4ba6eba031f4b7).</p>",
        "id": 250207604,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629537912
    },
    {
        "content": "<p>It has duplicated definitions, lots of errors, etc.</p>",
        "id": 250207608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629537921
    },
    {
        "content": "<p>For now I've just reverted it, but hopefully you can recover your work from your commit.</p>",
        "id": 250207687,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629538061
    },
    {
        "content": "<p>Wow, it is a weird feeling to say I want to work on a feature, and see so much work being already done on it : )<br>\nAnyway, the instructions say I should ask here for a permission to edit branches of mathlib. My GitHub username is SymmetryUnbroken</p>",
        "id": 250207768,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629538172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250207377\">said</a>:</p>\n<blockquote>\n<p>There are some off by one errors that I think I've just fixed.</p>\n</blockquote>\n<p><code>list.range</code> doesn't include the upper bound -- I think it needed the succ.</p>",
        "id": 250207938,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629538437
    },
    {
        "content": "<p>Sorry, just pushed again.</p>",
        "id": 250207986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629538471
    },
    {
        "content": "<p>I had to revert out the broken commit before I could commit my fixes.</p>",
        "id": 250207999,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629538492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span>, invitation sent.</p>",
        "id": 250208004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629538498
    },
    {
        "content": "<p>(I'm hacking together <code>count_set_fintype</code>)</p>",
        "id": 250208005,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629538501
    },
    {
        "content": "<p>If several people are working on this branch, lets make sure we only commit things without red squiggles. :-)</p>",
        "id": 250208016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629538519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, isn't <code>count_set_fintype</code> already done?</p>",
        "id": 250208088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629538604
    },
    {
        "content": "<p>Sorry, miscopied. <code>count_eq_card</code></p>",
        "id": 250208097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629538630
    },
    {
        "content": "<p>Excellent, thanks!</p>",
        "id": 250208106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629538647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250207938\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250207377\">said</a>:</p>\n<blockquote>\n<p>There are some off by one errors that I think I've just fixed.</p>\n</blockquote>\n<p><code>list.range</code> doesn't include the upper bound -- I think it needed the succ.</p>\n</blockquote>\n<p>Ah yeah I was correcting that in my broken commit</p>",
        "id": 250208305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629538860
    },
    {
        "content": "<p>Why is count defined so that it includes the upper bound?</p>",
        "id": 250208619,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629539357
    },
    {
        "content": "<p>I think <code>count_nth_of_le_card</code> needs to be split into the finite and the infinite case for <code>p</code>, because <code>nat.card p = 0</code> can mean two very different things</p>",
        "id": 250208666,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629539407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409003\">Vladimir Goryachev</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250208619\">said</a>:</p>\n<blockquote>\n<p>Why is count defined so that it includes the upper bound?</p>\n</blockquote>\n<p>otherwise we don't have the Galois connection</p>",
        "id": 250208677,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629539469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250208666\">said</a>:</p>\n<blockquote>\n<p>I think <code>count_nth_of_le_card</code> needs to be split into the finite and the infinite case for <code>p</code>, because <code>nat.card p = 0</code> can mean two very different things</p>\n</blockquote>\n<p>or use the ordinal inequality used in <code>nth_mem_of_le_card</code></p>",
        "id": 250208688,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629539506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250208677\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"409003\">Vladimir Goryachev</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250208619\">said</a>:</p>\n<blockquote>\n<p>Why is count defined so that it includes the upper bound?</p>\n</blockquote>\n<p>otherwise we don't have the Galois connection</p>\n</blockquote>\n<p>In the sense of F(a) ≤ b if and only if a ≤ G(b)?</p>",
        "id": 250208777,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629539599
    },
    {
        "content": "<p>Also, if I use \"git pull origin count\", I get the count file, but it has errors (red underscores), is it fine? Or am I getting the file the wrong way?</p>",
        "id": 250208901,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629539803
    },
    {
        "content": "<p>it currently has one red underline...</p>",
        "id": 250208923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629539849
    },
    {
        "content": "<p>:-(</p>",
        "id": 250208924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629539851
    },
    {
        "content": "<p>In <code>count_nth_gc</code>, that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> just introduced.</p>",
        "id": 250208983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629539904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409003\">Vladimir Goryachev</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250208777\">said</a>:</p>\n<blockquote>\n<p>In the sense of F(a) ≤ b if and only if a ≤ G(b)?</p>\n</blockquote>\n<p>Yep,  exactly</p>",
        "id": 250208985,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629539914
    },
    {
        "content": "<p>Mine has 4 of them, starting with the definition of nth</p>",
        "id": 250208986,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629539915
    },
    {
        "content": "<p>That's a problem.</p>",
        "id": 250208987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629539924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250208983\">said</a>:</p>\n<blockquote>\n<p>In <code>count_nth_gc</code>, that <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> just introduced.</p>\n</blockquote>\n<p>Public shaming <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 250208989,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629539937
    },
    {
        "content": "<p>:-)</p>",
        "id": 250208990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629539942
    },
    {
        "content": "<p>did you get cache and restart the lean server?</p>",
        "id": 250208991,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629539943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span></p>",
        "id": 250208996,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629539950
    },
    {
        "content": "<p>there's no cache at the moment, I guess</p>",
        "id": 250209000,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629539988
    },
    {
        "content": "<p>Probably not</p>",
        "id": 250209003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629539995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250208991\">said</a>:</p>\n<blockquote>\n<p>did you get cache and restart the lean server?</p>\n</blockquote>\n<p>Is it described somewhere how to do it?</p>",
        "id": 250209082,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629540019
    },
    {
        "content": "<p>you can just get some from an old one with <code>--rev</code> because we're only touching the one file</p>",
        "id": 250209085,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629540020
    },
    {
        "content": "<p>If you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">count</span>\n<span class=\"n\">git</span> <span class=\"n\">pull</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">build</span>\n</code></pre></div>",
        "id": 250209107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540039
    },
    {
        "content": "<p>and then restart VSCode, all should be good</p>",
        "id": 250209108,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540047
    },
    {
        "content": "<p><code>leanproject up</code> updates to the last commit, and then tries to download precompiles oleans for that commit. On <code>master</code> those are guaranteed to exist; on other branches they are about an hour or more behind.</p>",
        "id": 250209202,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540133
    },
    {
        "content": "<p>So that recipe should pull the oleans for master, then switch to the current <code>count</code> branch, and recompiles anything that has changed relative to master (which should be only <code>count.lean</code>)</p>",
        "id": 250209217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540168
    },
    {
        "content": "<p>Oh wait, I think we may need to not include the upper bound in <code>count</code> for the gc to work.</p>",
        "id": 250209232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629540195
    },
    {
        "content": "<p>Yup, <code>count 0</code> should always be <code>0</code></p>",
        "id": 250209293,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629540273
    },
    {
        "content": "<p>Do you mind if we do not include <code>n</code> in the definition of <code>count</code>?</p>",
        "id": 250209306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629540300
    },
    {
        "content": "<p>I think that not including the upper bound is the correct way.</p>",
        "id": 250209372,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629540390
    },
    {
        "content": "<p>No objection from me. All I care about is the last statement in the file, which I need for something else. :-)</p>",
        "id": 250209375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540407
    },
    {
        "content": "<p>Oh please, I look away 5min and here are 11 commits waiting to be pulled <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 250209379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629540418
    },
    {
        "content": "<p>I merged master, so Vladimir could retrieve oleans.</p>",
        "id": 250209405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540452
    },
    {
        "content": "<p>sorry</p>",
        "id": 250209406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540453
    },
    {
        "content": "<p>The prime-counting function traditionally includes the upper bound -- why is it the correct way not to include it?</p>",
        "id": 250209446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629540488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250209107\">said</a>:</p>\n<blockquote>\n<p>If you:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">count</span>\n<span class=\"n\">git</span> <span class=\"n\">pull</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">build</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I tried to do it, didn't help. The Inf in the def nth gets the red line.</p>",
        "id": 250209451,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629540491
    },
    {
        "content": "<p>What is the error message?</p>",
        "id": 250209459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540522
    },
    {
        "content": "<p>Did you get any errors from <code>leanproject up</code>?</p>",
        "id": 250209462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540538
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">nth</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_Inf</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 250209463,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629540539
    },
    {
        "content": "<p>Weird. What do you get from <code>lean --version</code>?</p>",
        "id": 250209485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540582
    },
    {
        "content": "<p>Lean (version 3.27.0, commit de35266fe596, Release)</p>",
        "id": 250209524,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629540606
    },
    {
        "content": "<p>leanproject up gave no error messages, just said it found some local oleans</p>",
        "id": 250209560,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629540677
    },
    {
        "content": "<p>Did you install elan? It seems you might have installed a fixed version of Lean, which won't work. You need elan, which will look at the repository you are working in and pick the right version automatically.</p>",
        "id": 250209571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540702
    },
    {
        "content": "<p>oh! I now get the same error message...</p>",
        "id": 250209617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540740
    },
    {
        "content": "<p>Sorry. :-)</p>",
        "id": 250209618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540745
    },
    {
        "content": "<p>regardless of whether you get the same error, that's definitely the wrong version of lean ;b</p>",
        "id": 250209624,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629540768
    },
    {
        "content": "<p>Yes, so you should still sort of out the lean version.</p>",
        "id": 250209642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540810
    },
    {
        "content": "<p>But the <code>has_Inf</code> error I've fixed (by adding an import --- when I updated to master, someone must have removed a transitive import in the meantime, so we weren't importing <code>data.nat.lattice</code> anymore...)</p>",
        "id": 250209693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540848
    },
    {
        "content": "<p>ahh, <a href=\"https://github.com/leanprover-community/mathlib/issues/8708\">#8708</a></p>",
        "id": 250209711,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629540913
    },
    {
        "content": "<p>Thanks, that error message disappeared!</p>",
        "id": 250209803,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629541080
    },
    {
        "content": "<p>And I have elan 0.11.0 (b25724876 2021-03-09)</p>",
        "id": 250209937,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629541304
    },
    {
        "content": "<p>wait, did you run <code>lean --version</code> from the <code>mathlib</code> directory?</p>",
        "id": 250210008,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629541372
    },
    {
        "content": "<p>or somewhere else?</p>",
        "id": 250210009,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629541376
    },
    {
        "content": "<p>I don't remember, probably from the root. Anyway, I ran elan update, and I now have lean version 3.32.1 (though elan update had errors while self-updating)</p>",
        "id": 250210083,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629541477
    },
    {
        "content": "<p>because the thing is that <code>lean</code> is a smart executable and can execute different versions depending on where you are</p>",
        "id": 250210122,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629541541
    },
    {
        "content": "<p>so it really does matter in which directory you run it</p>",
        "id": 250210128,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629541553
    },
    {
        "content": "<p>Okay, thanks! I think that is now sorted out.</p>",
        "id": 250210210,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629541635
    },
    {
        "content": "<p>I'm off for the evening, good luck everyone. :-)</p>",
        "id": 250210291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629541782
    },
    {
        "content": "<p>(I accidentally just pushed without making sure there were no errors after dealing with a merge conflict...)</p>\n<p>(never mind, it's all fine)</p>",
        "id": 250210458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629542039
    },
    {
        "content": "<p>Where is this gone?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">count_succ_eq_succ_count</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 250210532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629542130
    },
    {
        "content": "<p>There was a proof and I can't find it anymore.</p>",
        "id": 250210537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629542144
    },
    {
        "content": "<p>Ah, found it!</p>",
        "id": 250210597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629542188
    },
    {
        "content": "<p>If I want to add a change, do I just git push origin count?</p>",
        "id": 250210750,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629542459
    },
    {
        "content": "<p>Yes</p>",
        "id": 250210758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629542490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> What's going on down here?</p>\n<p><a href=\"/user_uploads/3121/0-yH461ASygZpP33MNMMO0u-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0-yH461ASygZpP33MNMMO0u-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0-yH461ASygZpP33MNMMO0u-/image.png\"></a></div>",
        "id": 250210914,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629542758
    },
    {
        "content": "<p>Whoops, that's unwanted. Delete the second one.</p>",
        "id": 250210964,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629542802
    },
    {
        "content": "<p>I'm in orange bar hell <span aria-label=\"slight frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"slight frown\">:slight_frown:</span></p>",
        "id": 250211277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629543295
    },
    {
        "content": "<p><code>leanproject get-cache --rev=f36c98e877dd86af12606a</code> and a restart server always fixes my orange bar hell :)</p>",
        "id": 250211293,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629543336
    },
    {
        "content": "<p>there seem to be some errors in the current commit -- i'm going through and fixing them and will be pushing in a moment</p>",
        "id": 250211435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629543599
    },
    {
        "content": "<p>ok, they're fixed</p>",
        "id": 250211695,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629543907
    },
    {
        "content": "<p>As far as I understand, the line lemma nth_count (n : ℕ) (h : p n) : nth p (count p n - 1) = n should not have \"- 1\" in it. I have tried to push this tiny change. Did it work?</p>",
        "id": 250213018,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629546096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> It looks like you just merged the remote branch and pushed your merge commit</p>",
        "id": 250213234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629546463
    },
    {
        "content": "<p>(and I just pushed my own merge commits)</p>",
        "id": 250213288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629546514
    },
    {
        "content": "<p>What does it mean? Or maybe I could read about it somewhere?</p>",
        "id": 250213307,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629546558
    },
    {
        "content": "<p>I am just really new to github</p>",
        "id": 250213316,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629546582
    },
    {
        "content": "<p>It doesn't include the removal of the \"- 1\"</p>",
        "id": 250213317,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629546584
    },
    {
        "content": "<p>What are you using for git?</p>",
        "id": 250213379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629546636
    },
    {
        "content": "<p>\"What\" in what sense? I just type \"git push origin count\" in the terminal.</p>",
        "id": 250213467,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629546755
    },
    {
        "content": "<p>There are many interfaces -- GitHub has a graphical application you can use, for instance.  I personally use magit in Emacs, though sometimes I do a command in the terminal</p>",
        "id": 250213490,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629546808
    },
    {
        "content": "<p>Have you become acquainted with \"git status\" yet? it shows you the files that you have changed locally.  To create a commit, you can use <code>git add ...filenames</code> and then <code>git commit -m \"short message\"</code>.  At this point, you want to <code>git pull origin count</code> to merge any changes others have made (and then possibly deal with merge conflicts...), and then <code>git push origin count</code>.</p>",
        "id": 250213628,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629546997
    },
    {
        "content": "<p>but for a colleague who was new to git this summer, I set him up with <a href=\"https://desktop.github.com/\">GitHub Desktop</a>, which seemed to work well.</p>\n<p>To learn more than you need to know about git, there's the <a href=\"https://git-scm.com/book/en/v2\">Pro Git</a> book</p>",
        "id": 250213864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629547277
    },
    {
        "content": "<p>Thanks! It seems it worked. And I will look into those resources.</p>",
        "id": 250213923,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629547368
    },
    {
        "content": "<p>We can confirm it worked: <a href=\"https://github.com/leanprover-community/mathlib/commit/0c0484d9e67eef92e3d1f074adab91efbcb527b6\">https://github.com/leanprover-community/mathlib/commit/0c0484d9e67eef92e3d1f074adab91efbcb527b6</a></p>",
        "id": 250213953,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629547438
    },
    {
        "content": "<p>Great, thank you!</p>",
        "id": 250214010,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629547507
    },
    {
        "content": "<p>(I've pushed one more change to remove the error in the last definition)</p>",
        "id": 250214045,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629547551
    },
    {
        "content": "<p>If you look at the end of <a href=\"https://github.com/leanprover-community/mathlib/compare/count\">https://github.com/leanprover-community/mathlib/compare/count</a>, you can see two commits that you created.  The  first contains your change, with respect to what you thought was the current version of the repositiory, and the second is a \"merge commit\" that joins together two histories: your local one and the remote (GitHub) one.  Earlier you had pushed a merge with no changes.</p>",
        "id": 250214109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629547627
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 250214203,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629547735
    },
    {
        "content": "<p>I don't know if I'd ever seen it on the GitHub website, but other tools can show you how the various histories intertwine -- which commits refer to which commits.</p>\n<p>In this one, time goes upwards:</p>\n<p><a href=\"/user_uploads/3121/0mKLyNl6aOgCI0VKybw2BVGa/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0mKLyNl6aOgCI0VKybw2BVGa/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0mKLyNl6aOgCI0VKybw2BVGa/image.png\"></a></div>",
        "id": 250214289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629547828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409003\">Vladimir Goryachev</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250213018\">said</a>:</p>\n<blockquote>\n<p>As far as I understand, the line lemma nth_count (n : ℕ) (h : p n) : nth p (count p n - 1) = n should not have \"- 1\" in it. I have tried to push this tiny change. Did it work?</p>\n</blockquote>\n<p>I think the <code>-1</code> is correct: remember that <code>nth</code> is zero-indexed!</p>",
        "id": 250215669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629549748
    },
    {
        "content": "<p>well, say p is always true, n = 1. Then count p 1-1 = count p 0 = 0, nth p 0 = 0 rather than 1. So -1 breaks things.</p>",
        "id": 250215930,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629550134
    },
    {
        "content": "<p>Oh, we changed to counting in <code>{0,...,n-1}</code>! Sorry, my mistake.</p>",
        "id": 250216018,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629550277
    },
    {
        "content": "<p>GC, GC, GC!</p>",
        "id": 250218187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629553183
    },
    {
        "content": "<p>I completed the <code>count_succ</code> lemmas to try an induction, if that sparks ideas.</p>",
        "id": 250223731,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629560795
    },
    {
        "content": "<p>Make sure to check what's in a commit before pushing it.  <a href=\"https://github.com/leanprover-community/mathlib/commit/bac4ea22b72d16169babd1ba36cb0f20e40e75cd\">This one</a> introduced duplicate lemmas (and for some reason replaced the <code>count_succ</code> proofs that I had fixed earlier).  <a href=\"https://github.com/leanprover-community/mathlib/commit/e30823352c6fb0f34d9eee664aa5ce56f4024663\">This one</a> deletes my proof of <code>exists_gt_of_infinite</code>, causing Eric to reprove it later.</p>",
        "id": 250233985,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629575430
    },
    {
        "content": "<p>There are bound to be merge issues with so many people editing the same small file simultaneously, which means extra diligence needed <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 250234012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629575520
    },
    {
        "content": "<p>aah the lemma was right there why did I go round loops to prove the same thing LOL</p>",
        "id": 250234074,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629575588
    },
    {
        "content": "<p>But I do check the diff before merging <span aria-label=\"big frown\" class=\"emoji emoji-2639\" role=\"img\" title=\"big frown\">:big_frown:</span> It must be lying a bit.</p>",
        "id": 250234429,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629576099
    },
    {
        "content": "<p>When I'm working on a branch that others are working on actively, sometimes I will do some work without committing, then run <code>git stash</code>, <code>git pull</code>, <code>git stash apply</code>. It's hard to go wrong this way.</p>",
        "id": 250250435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629600341
    },
    {
        "content": "<p>I just made some good progress on <a href=\"https://github.com/leanprover-community/mathlib/tree/count\">branch#count</a>. In particular, the main statement I want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">set.infinite.order_iso_nat</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s.infinite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>still has a bunch of sorries, but they all seem very doable! Again if anyone wants to help fill in a few please do so.</p>",
        "id": 250269528,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629631860
    },
    {
        "content": "<p>The route I found does _not_ go via building the galois connection, so I took the liberty of moving everything off the direct route to <code>order_iso_nat</code> below it.</p>",
        "id": 250269542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629631900
    },
    {
        "content": "<p>In fact, I think the galois connection is consequence of <code>order_iso_nat</code> and <code>nth_count</code> without too much difficulty.</p>",
        "id": 250269587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629631930
    },
    {
        "content": "<p>Hello! I did some work towards the galois connection. I would appreciate some feedback, as this is my first attempt to push some code, rather that delete a -1.</p>",
        "id": 250478422,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629808927
    },
    {
        "content": "<p>Also, I feel that nth_count_le would be useful in the galois connection proof, so I moved it upwards</p>",
        "id": 250478854,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629809132
    },
    {
        "content": "<p>Also, could someone explain me why can't the first sorry in count_nth_gc be simply closed by exact hc? The goal and the hc statement look identical to me.</p>",
        "id": 250480022,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629809667
    },
    {
        "content": "<p>You can try <code>convert hc</code> and see what it leaves as goals</p>",
        "id": 250481727,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629810441
    },
    {
        "content": "<p>Thanks. It leaves nothing at all!</p>",
        "id": 250482099,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629810607
    },
    {
        "content": "<p>I feel bewildered about that.</p>",
        "id": 250482227,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629810664
    },
    {
        "content": "<p>I have pushed convert hc and closed this sorry.</p>",
        "id": 250482586,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629810839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409003\">Vladimir Goryachev</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/250482099\">said</a>:</p>\n<blockquote>\n<p>Thanks. It leaves nothing at all!</p>\n</blockquote>\n<p>That means the difference is too big for the unifier to figure out, but just small enough for <code>convert</code> (really <code>congr</code>) to figure out, so it's probably some term in a <code>subsingleton</code> type. From looking at the code, it might be a clash between <code>open_locale classical</code> and <code>variable [decidable_pred p]</code>: <code>classical.decidable p</code> is not definitially equal to any instance argument, but <code>decidable</code> has a subsingleton instance that <code>congr</code> can use.</p>",
        "id": 250483645,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629811315
    },
    {
        "content": "<p>take care with the merge in the future - I think you merged the wrong way round, so the merge commit made a weird diff</p>",
        "id": 250487631,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629813091
    },
    {
        "content": "<p>also when you split into subgoals, it's in mathlib style to always brace around it - it makes the code a lot more readable</p>",
        "id": 250488725,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629813560
    },
    {
        "content": "<p>but otherwise this is very good, thanks!</p>",
        "id": 250489162,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629813709
    },
    {
        "content": "<p>Thanks. Where can I see that the diff is weird?</p>",
        "id": 250489887,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629814016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  whilst looking for some other stuff, I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.subtype.order_iso_of_nat\">docs#nat.subtype.order_iso_of_nat</a>; is this good enough for what you needed it? (not to discourage you from working on this branch too ;b)</p>",
        "id": 250489962,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629814050
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/baf6d178760376981c38c2bfb286562f105d560e\">https://github.com/leanprover-community/mathlib/commit/baf6d178760376981c38c2bfb286562f105d560e</a> <span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span></p>",
        "id": 250490078,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629814085
    },
    {
        "content": "<p>Thanks, will be more careful.</p>",
        "id": 250492713,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629815258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> that's perfect! I should try library_search more often. :-)</p>",
        "id": 250561052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629846012
    },
    {
        "content": "<p>I suspect we can relate that existing order iso to count and nth, and this will be helpful for building the galois connection.</p>",
        "id": 250561142,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629846065
    },
    {
        "content": "<p>Finished the proof of the Galois connection (modulo the lemmas it uses)</p>",
        "id": 250597837,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629884115
    },
    {
        "content": "<p>By the way, is it possible and/or useful to create notation p[m] =nth p m? It is potentially easier to read (e.g nat.prime[m] makes a lot of sense for me).</p>",
        "id": 250598128,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629884332
    },
    {
        "content": "<p>It's possible, but I'm always inclined to be very cautious introducing new notation.</p>",
        "id": 250598527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629884602
    },
    {
        "content": "<p>And certainly anything involving square brackets is dangerously prone to clashing with other notations.</p>",
        "id": 250598567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629884626
    },
    {
        "content": "<p>I think we should definitely use a lot more use of localised notation, though; I think it's a great shame the amount of long function names we end up using often</p>",
        "id": 250598666,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629884696
    },
    {
        "content": "<p>Especially with the <code>open scoped</code> stuff in Lean4</p>",
        "id": 250598699,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629884716
    },
    {
        "content": "<p>Okay. Also, should one place a space after a \\&lt;- ? The styleguide doesn't say anything about it, but there are such spaces in the examples there.</p>",
        "id": 250598818,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629884805
    },
    {
        "content": "<p>The style guide is silent on that, and both seem acceptable.</p>",
        "id": 250599070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629884978
    },
    {
        "content": "<p>same as the style guide on ending commas, which I'm glad we won't have to deal with in Lean4 because there's huge variances on what's what</p>",
        "id": 250599146,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629885010
    },
    {
        "content": "<p>I searched for all lines containing <code>simp</code> or <code>rw</code> and counted how many <code>←</code>s there were with and without a space: about 3100 without a space and 7400 with a space.</p>",
        "id": 250599154,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629885015
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 250599872,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629885544
    },
    {
        "content": "<p>I did some work on nth_succ_of_zero, and I hope it is in the right direction. The goal there was of type Inf ... = Inf ... + 1, and it looked like if I manage to put this + 1 inside the Inf, the sets will become equal. So I wrote a lemma (yet without proof) that Inf {m : ℕ | p m} + n = max (Inf {m : ℕ | p (m - n)}) n, which I could not find in the file with Infs, applied it, and began to iron out the edge cases where the right Inf is zero.</p>",
        "id": 250912850,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630060966
    },
    {
        "content": "<p>are you sure <code>Inf_plus</code> is the right way to do this? On your second <code>by_cases</code>, we'd need <code>p 1</code>, which I don't think we either have nor could figure out (remember, ∀ x, 0 - x = 0)</p>",
        "id": 250921562,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630065984
    },
    {
        "content": "<p>We have p 1, it is called hp</p>",
        "id": 250922609,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630066616
    },
    {
        "content": "<p>It seems to me this approach would work, but I am not sure this is the right way.</p>",
        "id": 250922763,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630066718
    },
    {
        "content": "<p>Also, it can be the case that the better form of Inf_plus is lemma Inf_plus {n: ℕ} {p: set ℕ} (h: 0 &lt; Inf {m : ℕ | p m}) : Inf {m : ℕ | p m} + n = Inf {m : ℕ | p (m - n)}</p>",
        "id": 250922986,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630066859
    },
    {
        "content": "<p>(Because it is stronger)</p>",
        "id": 250922997,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630066870
    },
    {
        "content": "<p>you get <code>p 1</code> from <code>h0 </code> which needs <code>p 1</code> in and of itself</p>",
        "id": 250925520,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630068314
    },
    {
        "content": "<p>like to actually be proved</p>",
        "id": 250925537,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630068322
    },
    {
        "content": "<p>h0 is getting Inf = 0 from (not 0 &lt; Inf), this should be closed trivially.</p>",
        "id": 250925817,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630068456
    },
    {
        "content": "<p>I can commit it in a few minutes</p>",
        "id": 250925938,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630068502
    },
    {
        "content": "<p>Done. Also have changed Inf_plus statement.</p>",
        "id": 250927057,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630069086
    },
    {
        "content": "<p>I have just proved Inf_plus, but I see something was done on it 7 minutes ago.</p>",
        "id": 251043535,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630143348
    },
    {
        "content": "<p>So I guess if I push my proof now, this would cause a merge problem, wouldn't it?</p>",
        "id": 251043601,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630143402
    },
    {
        "content": "<p>You won't be able to push unless you first merge the remote changes.</p>",
        "id": 251043769,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630143604
    },
    {
        "content": "<p>Start with <code>git pull</code> and hope for the best!</p>",
        "id": 251043799,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630143612
    },
    {
        "content": "<p>Okay. I pushed my proof, putting it into lemma Inf_plus', because I felt uncomfortable deleting the existing beginning of a proof.</p>",
        "id": 251044023,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630143877
    },
    {
        "content": "<p>don't worry about it, a full proof is better than my half-baked attempt at one :b</p>",
        "id": 251044357,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630144278
    },
    {
        "content": "<p>I have proved count_nth_of_infinite. I think basically same proof would work for bounded cardinalities, and then we would be able use it all over, as having one-sided inverse is neat.</p>",
        "id": 251061939,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630163221
    },
    {
        "content": "<p>I would be thankful if someone filled up count_eq_card_finset, which is basically expressing count in terms of finset.card - it should be trivial, but I have not learned to work with cardinalities different from finset yet.</p>",
        "id": 251062212,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630163507
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 251062394,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630163690
    },
    {
        "content": "<p>You were right about triviality, the proof ended up being <code>rfl</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 251062628,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630163968
    },
    {
        "content": "<p>I had a longer proof that ended with the <code>refl</code> tactic, and I kept deleting lines until nothing was left.</p>",
        "id": 251062655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630164001
    },
    {
        "content": "<p>Thanks! Trivial indeed : )</p>",
        "id": 251063582,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630164978
    },
    {
        "content": "<p>i'm surprised it's <code>rfl</code>, I thought finset was some level of list quotients and proofs with quotients couldn't be <code>rfl</code></p>",
        "id": 251064351,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630165744
    },
    {
        "content": "<p>that's nice</p>",
        "id": 251064354,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630165746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> Here's what's going on: a <code>finset</code> is a <code>nodup</code> <code>multiset</code>, and a <code>multiset</code> is the quotient of  <code>list</code> by <code>list.perm</code>. The definition of <code>finset.card</code> is <code>multiset.card</code> of its <code>multiset</code>, and the definition of <code>multiset.card</code> is the <code>list.length</code> of a representative <code>list</code> (using <code>quot.lift</code> for well-definedness).  Similarly, both <code>finset.range</code> and <code>finset.filter</code> are defined in terms of <code>list.range</code> and <code>list.filter</code>, in that the latter functions are by definition the <code>list</code> representatives for the <code>finset</code>s.</p>\n<p>A key fact is that Lean has the following reduction rule (where reduction is what underlies what it means for things to be defeq):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">quot.lift</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">~~&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>So, for example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"mi\">37</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">~~&gt;</span> <span class=\"n\">quot.lift</span> <span class=\"n\">list.length</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"mi\">37</span><span class=\"o\">))</span>\n                       <span class=\"bp\">~~&gt;</span> <span class=\"n\">list.length</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>We can see this in action for <code>count_eq_card_finset</code> using <code>#reduce</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">finset.card</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"c1\">-- λ (n : ℕ), (filter p (range_core n nil)).length</span>\n</code></pre></div>",
        "id": 251066273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630167812
    },
    {
        "content": "<p>Another example of something involving quotients that's intentionally defeq to something more basic is the edge set for simple graphs. It's convenient how <code>⟦(v, w)⟧ ∈ G.edge_set</code> is by definition <code>G.adj v w</code>.</p>",
        "id": 251066581,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630168168
    },
    {
        "content": "<p>The main problem in the case of finite p was that we didn't have prove that the set over which we take Inf is nonempty (unlike in the infinite case, where it is easily infinite). Now I have proved lemma nth_mem_of_le_card_aux, which computes the cardilities of those sets, allowing to prove them to be nonempty.</p>",
        "id": 251119749,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630229103
    },
    {
        "content": "<p>(Renamed the lemma, and proved a slightly stronger lemma nth_set_card)</p>",
        "id": 251122283,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630231939
    },
    {
        "content": "<p>And now I have proved p(nth p n) in the finite case.</p>",
        "id": 251123466,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630233278
    },
    {
        "content": "<p>I have proved nth_count. Again, I haven't deleted the existing unfinished proof, and added my proof as nth_count' instead. Please tell me if it is fine to remove the unfinished proof.</p>",
        "id": 251449740,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630440233
    },
    {
        "content": "<p>Usually replacing an unfinished proof by a complete proof is fine. And if the old proof exists in the git history, then people can dig it up there if they want/need it.</p>",
        "id": 251456940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630442944
    },
    {
        "content": "<p>I'm going through things right now, by the way <span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span>.  I'll delete the old proof.</p>",
        "id": 251457326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630443086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> I've pushed my changes and am done for now.  I tried simplifying proofs, and hopefully I succeed in not obfuscating them.</p>",
        "id": 251478736,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630453973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks! I do hope I will learn to write those shorter proofs at some point.</p>",
        "id": 251498540,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630470427
    },
    {
        "content": "<p>I have proved count_nth_le. I think it means that the galois connection theorem is now proved completely (without sorries all the way down). I think I will try look at the latest edits Kyle Miller has made to the file and try to edit my last proof accordingly.</p>",
        "id": 251513249,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630480319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> A way you can check is to use the <code>#print axioms count_nth_gc</code> command.  If it's sorry-free, it won't print <code>[sorry]</code>, and I can confirm it doesn't.</p>",
        "id": 251580151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630510566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I have finally looked into your edits. I understood that I should use squeeze_simp rather than simp, and I have changed it in my latest commit. Could you maybe give some other general advise on how to write proofs so that they do not require cleaning up, please?</p>",
        "id": 252205385,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630950284
    },
    {
        "content": "<p>It's probably better not to worry too much about it while doing the hard part of actually finishing the proofs in the first place.  Later on, you can go in with your sandpaper to give the proof a nicer finish.</p>\n<p>I think mainly what helped were the <code>refine</code>, <code>convert</code> and <code>convert_to</code> tactics, and also noticing when small arguments could be passed directly to a lemma in an <code>apply</code>.  What could also help is studying what is going on overall in a theorem, to try to make things that would be defined with a <code>have</code> be automatically generated as a subgoal.</p>\n<p>For example, in <code>nth_count_eq_Inf</code>, I notice</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">apply</span> <span class=\"n\">count_strict_mono</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>Looking at the type of <code>count_strict_mono</code>, we see it takes the predicate <code>p</code> along with two proofs.  So, we can simplify this to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">exact</span> <span class=\"n\">count_strict_mono</span> <span class=\"n\">_</span> <span class=\"n\">hp</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>(I used an underscore since it can figure out <code>p</code>, but you could also write <code>p</code> in its place.  Doesn't matter either way.)</p>",
        "id": 252208466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630952295
    },
    {
        "content": "<p>Or, consider the large-scale structure of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_count_eq_Inf</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nth</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>After <code>rw nth</code>, the left-hand side becomes <code>Inf</code>, and <code>h</code> is for rewriting its set.  Instead, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_count_eq_Inf</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nth</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>since <code>congr' 1</code> will create the exact hypothesis you've written for <code>have h</code>.  I find it easier to follow in this form since there isn't this lone <code>rw h</code> at the very end.</p>",
        "id": 252208840,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630952526
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_count_eq_Inf</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nth</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252209374,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1630952881
    },
    {
        "content": "<p>Another pattern: rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,},</span>\n</code></pre></div>\n<p>you can use <code>refine</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I think this makes it clearer that the intent is, that the rest of the proof is to fill in the less-than part of this transitivity proof.</p>",
        "id": 252209774,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630953129
    },
    {
        "content": "<p>After some transformations like these, it ended up in this form:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_count_eq_Inf</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nth</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">and.congr_right_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">count_strict_mono</span> <span class=\"n\">_</span> <span class=\"n\">hp</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nth_count</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">lt_self_iff_false</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hn</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">count_monotone</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reflect_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">hfi</span><span class=\"bp\">|</span><span class=\"n\">hfi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">set.finite</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">count_nth_of_lt_card_finite</span> <span class=\"n\">_</span> <span class=\"n\">hfi</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">count_monotone</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">count_lt_card</span> <span class=\"n\">p</span> <span class=\"n\">hfi</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">count_nth_of_infinite</span> <span class=\"n\">p</span> <span class=\"n\">hfi</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<p>I find it to be relatively easy to follow this kind of proof with the infoview, but these things are a matter of taste.</p>\n<p>(I didn't commit this change)</p>",
        "id": 252210843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630953843
    },
    {
        "content": "<p>Thank you very much for your advise! So, do you say that I should first finish the file, so that no sorries are left, and only then begin refactoring?</p>",
        "id": 252262713,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1630999740
    },
    {
        "content": "<p>And I commited the little changes, in line with your recommendations.</p>",
        "id": 252296306,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631017463
    },
    {
        "content": "<p>Do we still have a need for nth_succ_of_zero? I think it is easy to prove now, but it seems like an auxiliary lemma which I have bypassed by using other proofs. Do you consider it still relevant?</p>",
        "id": 252413502,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631083137
    },
    {
        "content": "<p>I think it can be dropped.</p>",
        "id": 252413964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631083496
    },
    {
        "content": "<p>Something that will be essential for PRing this material is connecting it with what is already in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.subtype.order_iso_of_nat\">docs#nat.subtype.order_iso_of_nat</a>.</p>",
        "id": 252413983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631083511
    },
    {
        "content": "<p>(and higher up in that file)</p>",
        "id": 252413991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631083517
    },
    {
        "content": "<p>Sorry, wrong link</p>",
        "id": 252414107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631083602
    },
    {
        "content": "<p>I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.subtype.of_nat\">docs#nat.subtype.of_nat</a></p>",
        "id": 252414114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631083609
    },
    {
        "content": "<p>at the least we need lemmas relating this to <code>nth</code>.</p>",
        "id": 252414145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631083636
    },
    {
        "content": "<p>possibly we should redefine it in terms of <code>nth</code>.</p>",
        "id": 252414156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631083654
    },
    {
        "content": "<p>Thanks. I will look into it - I'm still unsure how to work with those types of objects though.</p>",
        "id": 252418269,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631086320
    },
    {
        "content": "<p>Also - can anyone help me with why in the nth_lt_of_lt_count proof the line \"apply lt_of_count_lt\" (now the only line commented out) does not work, and how to fix it?</p>",
        "id": 252418591,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631086523
    },
    {
        "content": "<p>I want to finish the last couple of lemmas in the end of the file first, and then I'll think about nat subtypes.</p>",
        "id": 252418702,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631086596
    },
    {
        "content": "<p>I have finished the proof of nth_lt_of_lt_count. I have removed the lemma nth_le_of_le_count, as it is wrong: even though 2 \\le count <a href=\"http://nat.prime\">nat.prime</a> 4, we do not have nth <a href=\"http://nat.prime\">nat.prime</a> 2 \\le  4.</p>",
        "id": 253240070,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631621836
    },
    {
        "content": "<p>It sounds like it was the wrong way around. <code>le_nth_of_count_le</code> should be correct instead.</p>",
        "id": 253240523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631622071
    },
    {
        "content": "<p>and similarly <code>lt_nth_of_count_lt</code> should be wrong.</p>",
        "id": 253240574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631622098
    },
    {
        "content": "<p>I love Galois connections <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 253240688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631622137
    },
    {
        "content": "<p>Yeah, sure, le_nth_of_count_le is now trivial. Done it!</p>",
        "id": 253241537,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631622582
    },
    {
        "content": "<p>If you want to turn iff into one way implications, you can use <code>alias iff_theorem ↔ name_of_the_first_imp name_of_the_second_imp</code>.</p>",
        "id": 253241933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631622748
    },
    {
        "content": "<p>I could not actually do it, as the Galois connection lemma uses assumptions that p is infinite, but those lemmas do not.</p>",
        "id": 253245916,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631624511
    },
    {
        "content": "<p>Well one of them must use it. You can place an <code>_</code> instead of the lemma you don't want <code>alias</code> to generate.</p>",
        "id": 253246049,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631624560
    },
    {
        "content": "<p>No, those lemmas are equivalent, as they are just contrapositions of each other. And none of them assume infinitude of p.</p>",
        "id": 253318152,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631651068
    },
    {
        "content": "<p>Neither of the <code>←</code> and <code>→</code> implications need <code>p</code> infinite, but <code>↔</code> does? Is it really what you mean?</p>",
        "id": 253318342,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631651148
    },
    {
        "content": "<p>No. I mean that one of -&gt; and &lt;- is not implemented, and we have a -&gt; b and ~b -&gt; ~a instead.</p>",
        "id": 253370427,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631688821
    },
    {
        "content": "<p>I have proved the lemma nth_nonzero_of_ge_nonzero and removed another lemma which seemed like a leftover of a no longer relevant proof by induction. Now the only sorry left is to prove nth_eq_order_iso_of_nat.</p>",
        "id": 253375027,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631691922
    },
    {
        "content": "<p>Ah yes, that's different indeed. Good work by the way!</p>",
        "id": 253375396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631692181
    },
    {
        "content": "<p>I have finished the proof of nth_eq_order_iso_of_nat!</p>",
        "id": 253448598,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631724689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> you were particularly interested in that.</p>",
        "id": 253448724,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631724723
    },
    {
        "content": "<p>Also, this means that no sorries are currently left in the count file!</p>",
        "id": 253448812,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631724751
    },
    {
        "content": "<p>So I would like to ask everyone's advise on what to do next. I have seen the idea that PRs should be kept fairly small and manageable, so I would be inclined to polish up the existing lemmas, rearrange them and PR the file. But I am new to mathlib development, and so I am not sure how things are done here.</p>",
        "id": 253449778,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631725105
    },
    {
        "content": "<p>I'm willing to go through the file, fix lemma names if needed and such... if you want.</p>",
        "id": 253450397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631725293
    },
    {
        "content": "<p>I very much love file restructuring <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 253450468,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631725317
    },
    {
        "content": "<p>Oh, you are definitely welcome!</p>",
        "id": 253450735,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631725407
    },
    {
        "content": "<p>I usually prefer writing new code to restructuring the old one : )</p>",
        "id": 253451044,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1631725516
    },
    {
        "content": "<p>OK, so I've pushed some changes; mostly golfing (-200 lines or so!) to the file. I think most changes should be done by now! I also fixed (hopefully) all linting issues. I'd appreciate if one of you could check the file (especially the names of stuff, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  your skills would be appreciated :]) but I think we should PR this sooner rather than later so that stuff doesn't bitrot</p>",
        "id": 254704726,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632490632
    },
    {
        "content": "<p>Let me have another look!</p>",
        "id": 254827630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632565202
    },
    {
        "content": "<p>I must say I see absolutely no point in using <code>cardinal</code>. This to me seems like a pretty artificial way to unify the cases where <code>p</code> is true finitely vs infinitely often.</p>",
        "id": 254835895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632573026
    },
    {
        "content": "<p><code>count_succ'</code> is a too specialized case of <code>count_add {a b : ℕ} : count p (a + b) = count p a + count (λ k, p (a + k)) b</code>. I'm trying to prove that now.</p>",
        "id": 254836136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632573270
    },
    {
        "content": "<p>Done!</p>",
        "id": 254839077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632575954
    },
    {
        "content": "<p>how come you localised the instance?</p>",
        "id": 254839709,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632576476
    },
    {
        "content": "<p>Isn't it a pretty peculiar use-case? We're providing a fintype instance for the coercion to Sort of a sep of the set of naturals strictly less than <code>n</code>.</p>",
        "id": 254840867,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632577398
    },
    {
        "content": "<p>I feel like it's not going to hurt anyone to have it around, either</p>",
        "id": 254842479,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632578763
    },
    {
        "content": "<p>Would it make sense to feed in <code>(set_of p).infinite</code> through TC inference?</p>",
        "id": 254844929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632580945
    },
    {
        "content": "<p>hmm, I feel like there's some good reason  why <code>infinite</code> isn't a class already though</p>",
        "id": 254845401,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632581391
    },
    {
        "content": "<p>Yeah sure. I meant to use <code>fact</code></p>",
        "id": 254845873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632581790
    },
    {
        "content": "<p>no strong feelings either way there</p>",
        "id": 254846106,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632582003
    },
    {
        "content": "<p>I would avoid writing things using <code>fact</code> unless it really makes life fundamentally easier at the point of use.</p>",
        "id": 254849655,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632585171
    },
    {
        "content": "<p>I'm pretty sure <code>count_set.fintype</code> should be an instance, but generalized a bit.  This could go in <code>data.set.finite</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">set.finite.fintype_pred_sep</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}]</span>\n  <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">set.fintype_sep</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Now it's automatic:</span>\n<span class=\"kd\">def</span> <span class=\"n\">count_set.fintype</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 254850089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632585566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I see you changed <code>(set_of p).finite</code> back to <code>set.finite p</code>.  The issue is that <code>p</code> is not a set, so <code>set.finite p</code> is \"wrong\".</p>",
        "id": 254850431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632585830
    },
    {
        "content": "<p>I am pretty sure it has already been used like that in mathlib... There's not even any coercion as <code>set</code> is a type synonym.</p>",
        "id": 254850526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632585885
    },
    {
        "content": "<p>yeah but it's breaking the abstraction barrier</p>",
        "id": 254850556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632585914
    },
    {
        "content": "<p>Maybe someone decides to make <code>set</code> irreducible one day and then your code breaks.</p>",
        "id": 254850576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632585935
    },
    {
        "content": "<p>It's breaking the abstraction barrier.  I carefully went through everything in this a while back to make sure whenever a predicate is used as a set, it's cast using <code>set_of</code>.</p>",
        "id": 254850642,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632585986
    },
    {
        "content": "<p>Oh well, sorry about that.</p>",
        "id": 254850706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632586060
    },
    {
        "content": "<p>What's wrong with cardinals?  I'm just going to record the deleted lemmas here in case <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has any comment, since he added originally them I believe.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">count_nth_of_lt_card</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">set_of</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">count</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nth_mem_of_lt_card</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">set_of</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Also, did this one go somewhere, or is it a trivial consequence of other lemmas so was deleted?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_nonzero_of_ge_nonzero</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 254851171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632586502
    },
    {
        "content": "<p>It's now <code>nth_zero_of_nth_zero</code>.</p>",
        "id": 254851201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632586547
    },
    {
        "content": "<p>The only thing you're doing with cardinals is checking the finite case, and the omega case. There's nothing more happening with them and, as expected, they aren't used by anything else.</p>",
        "id": 254851300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632586631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/254851300\">said</a>:</p>\n<blockquote>\n<p>they aren't used by anything else.</p>\n</blockquote>\n<p>Let's delete the whole file then, since none of it's being used elsewhere <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (I know that's not fair, since we know one of the theorems has use in another project.)</p>\n<p>It's possible they have limited future utility -- just wanted to make sure Scott had a chance to notice their departure.</p>",
        "id": 254851681,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632587038
    },
    {
        "content": "<p>It looks like there's an accidental battle between <code>rw</code> and <code>simp</code> in the git history.  I think <code>rw</code> has won this match <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">count_set_fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_finset</span> <span class=\"o\">((</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">])</span>\n\n<span class=\"c1\">--&gt; two days ago</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">count_set_fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_finset</span> <span class=\"o\">((</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--&gt; yesterday</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count_set.fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_finset</span> <span class=\"o\">((</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 254852879,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632588164
    },
    {
        "content": "<p>Whooops. The fervent partisan of \"A <code>simp</code> should not replace less than two full lines of <code>rw</code>\" is me.</p>",
        "id": 254853995,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632589206
    },
    {
        "content": "<p>My take on the simp vs rw \"war\" is that replacing <code>simp</code> with <code>rw</code> is nice for explicitness and speed --- but this shouldn't come at the cost of really polishing and perfecting the simp set, if only for downstream users.</p>",
        "id": 254876236,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632609632
    },
    {
        "content": "<p>I'm happy with the deleted lemmas staying deleted.</p>",
        "id": 254876253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632609656
    },
    {
        "content": "<p>Regarding a lemma upthread; note that <code>sep</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sep\">docs#has_sep</a>) refers to <code>{x ∈ s | p x}</code> not <code>{x | p x}</code></p>",
        "id": 254932020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632663404
    },
    {
        "content": "<p>do you still think that lemma has the right name?</p>",
        "id": 254935810,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632666921
    },
    {
        "content": "<p>No, <code>fintype_pred_sep</code> should probably be called <code>fintype_setof_and_right</code></p>",
        "id": 254936697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632667767
    },
    {
        "content": "<p>I did the PR! I hope I followed the conventions correctly : )</p>",
        "id": 255475255,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1632949884
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9457\">#9457</a>!</p>",
        "id": 255475612,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632950039
    },
    {
        "content": "<p>Could you update the top post of the PR to include coauthor information? Format is:<br>\n<code>Co-authored-by: Name Name &lt;email@address.com&gt;</code><br>\n(don't worry to much about getting the emails right; you could try pulling them off here)</p>",
        "id": 255494380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632959553
    },
    {
        "content": "<p>So, I finally got my computer back, and hope to continue working on this PR.</p>",
        "id": 258257939,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634671907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, I have updated the top post of the PR as you have asked.</p>",
        "id": 258258062,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634671959
    },
    {
        "content": "<p>When I try to open the count file in VS code, it underlines literally everything with red, saying that there is not enough memory. Am I the only one to have this problem? Could any other changes to mathlib have broken something here?</p>",
        "id": 258258618,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634672201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> (1) How much memory do you have? (2) Did you <code>git pull</code> and <code>leanproject get-cache</code> recently?</p>",
        "id": 258258982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634672342
    },
    {
        "content": "<p>1) Which memory exactly? Where do I look it up?<br>\n2) I have deleted and redownloaded the mathlib_count branch half an hour ago, so I hope it would solve any such problems.</p>",
        "id": 258259777,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634672675
    },
    {
        "content": "<p>But did you run <code>leanproject get-cache</code>?</p>",
        "id": 258259841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634672709
    },
    {
        "content": "<p>I have right now, it <code>Failed to fetch cached oleans</code></p>",
        "id": 258260170,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634672862
    },
    {
        "content": "<p>Update <code>elan</code>. It now gives you the name of the commit you can try.</p>",
        "id": 258260424,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634672960
    },
    {
        "content": "<p>Did you mean \"Update <code>leanproject</code>\"?</p>",
        "id": 258260602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634673035
    },
    {
        "content": "<p>Eh yes</p>",
        "id": 258260696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634673077
    },
    {
        "content": "<p>Saying <code>leanproject update</code> (while inside mathlib_count folder) also results in <code>Failed to fetch cached oleans</code></p>",
        "id": 258260926,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634673163
    },
    {
        "content": "<p>So can I assume that only have this problem?</p>",
        "id": 258260981,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634673185
    },
    {
        "content": "<p>I think you need <code>pip install -U mathlibtools</code> to update <code>leanproject</code></p>",
        "id": 258261046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634673210
    },
    {
        "content": "<p>This problem can be fixed, your issue is that your computer doesn't want to compile all of Lean's maths library but there is a way of getting it to download compiled files which will solve the memory errors</p>",
        "id": 258261773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634673508
    },
    {
        "content": "<p>If I download the master branch, it compiles just fine. If I download the count branch, it has memory problems. So I would think that my problems have to do something not with leanproject nor with the memory of my computer, but with something in the count branch.</p>",
        "id": 258262729,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634673865
    },
    {
        "content": "<p>That's why I ask if anyone has the same problems with this branch.</p>",
        "id": 258263089,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634674011
    },
    {
        "content": "<p>The count branch is probably quite a bit older than current master. So the olean files don't match.</p>",
        "id": 258263095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634674016
    },
    {
        "content": "<p>What is the exact branch name? I'll try.</p>",
        "id": 258263126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634674028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, count</p>",
        "id": 258263188,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634674050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> which file should I open?</p>",
        "id": 258263423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634674136
    },
    {
        "content": "<p><code>data.nat.count</code></p>",
        "id": 258263465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634674156
    },
    {
        "content": "<p>data/nat/count</p>",
        "id": 258263468,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634674157
    },
    {
        "content": "<p>Works flawlessly for me</p>",
        "id": 258263527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634674183
    },
    {
        "content": "<p>Here is what I did:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git checkout count\ngit pull\nleanproject get-cache\n</code></pre></div>",
        "id": 258263606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634674203
    },
    {
        "content": "<p>After that, I opened mathlib in VScode, and opened <code>data/nat/count</code>.</p>",
        "id": 258263678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634674224
    },
    {
        "content": "<p>There were orange bars for 2-3 seconds, that's it.</p>",
        "id": 258263702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634674235
    },
    {
        "content": "<p>Thanks! I still have the problem, I'll try to figure something out.</p>",
        "id": 258264289,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634674447
    },
    {
        "content": "<p>Do you have any other (modified) files open in vscode</p>",
        "id": 258266064,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634675198
    },
    {
        "content": "<p>What was the output from <code>leanproject get-cache</code>?</p>",
        "id": 258267241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634675698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, no</p>",
        "id": 258267469,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634675782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, now it says something that includes </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">There</span> <span class=\"n\">are</span> <span class=\"n\">multiple</span> <span class=\"n\">viable</span> <span class=\"n\">caches</span> <span class=\"k\">from</span> <span class=\"n\">parent</span> <span class=\"n\">commits</span><span class=\"o\">:</span>\n<span class=\"n\">ee74b6717</span>\n<span class=\"n\">e61584d59</span>\n</code></pre></div>",
        "id": 258267588,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634675832
    },
    {
        "content": "<p>Try <code>leanproject get-cache --fallback=download-all</code></p>",
        "id": 258267979,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634675964
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/5f89arH6gRv2f1jr689mpL7K/Screenshot-from-2021-10-19-23-41-38.png\">Screenshot-from-2021-10-19-23-41-38.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5f89arH6gRv2f1jr689mpL7K/Screenshot-from-2021-10-19-23-41-38.png\" title=\"Screenshot-from-2021-10-19-23-41-38.png\"><img src=\"/user_uploads/3121/5f89arH6gRv2f1jr689mpL7K/Screenshot-from-2021-10-19-23-41-38.png\"></a></div>",
        "id": 258268442,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634676128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, what you have said did download something, but it did not solve the problem with memory</p>",
        "id": 258268953,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634676324
    },
    {
        "content": "<p>Did you restart the lean server after the download?</p>",
        "id": 258269097,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634676373
    },
    {
        "content": "<p>What was the output from <code>leanproject get-cache --fallback=download-all</code>?</p>",
        "id": 258269104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634676375
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/5g0A0ZwYndwPEELgTQ_b8axR/Screenshot-from-2021-10-19-23-50-27.png\">Screenshot-from-2021-10-19-23-50-27.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5g0A0ZwYndwPEELgTQ_b8axR/Screenshot-from-2021-10-19-23-50-27.png\" title=\"Screenshot-from-2021-10-19-23-50-27.png\"><img src=\"/user_uploads/3121/5g0A0ZwYndwPEELgTQ_b8axR/Screenshot-from-2021-10-19-23-50-27.png\"></a></div>",
        "id": 258269790,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634676653
    },
    {
        "content": "<p>I have reinstalled mathlib_count again, and did this thing, here is what I got. The memory problem persists.</p>",
        "id": 258269869,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634676700
    },
    {
        "content": "<p>How do I uninstall Lean, if I'd like to try it out?</p>",
        "id": 258271363,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634677319
    },
    {
        "content": "<p>How did you install <code>elan</code>? If you installed it via the shell script, you can <code>rm -rf ~/.elan</code>.</p>",
        "id": 258276097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634679264
    },
    {
        "content": "<p>How are you opening your <code>.lean</code> file? You're opening the mathlib folder in VSCode, not some subfolder, right?</p>",
        "id": 258276134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634679289
    },
    {
        "content": "<p>Yes, mathlib folder.</p>",
        "id": 258276181,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634679314
    },
    {
        "content": "<p>Trying to reinstall elan did not help.</p>",
        "id": 258277487,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634679878
    },
    {
        "content": "<p>Just to be clear, the oleans you should be getting are from commit <code>ee74b67171</code>.</p>",
        "id": 258279899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634680995
    },
    {
        "content": "<p>I can confirm that <code>data.nat.count</code> works fine for me on the <code>count</code> branch with those oleans. What is the output of <code>leanproject --version</code>? If it's not <code>1.1.0</code> you could try updating.</p>",
        "id": 258280096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634681098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409003\">Vladimir Goryachev</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/258260926\">said</a>:</p>\n<blockquote>\n<p>Saying <code>leanproject update</code> (while inside mathlib_count folder) also results in <code>Failed to fetch cached oleans</code></p>\n</blockquote>\n<p>This shouldn't happen. Is your local copy of <code>count</code> equal with the version on github? Did you try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">count</span>\n<span class=\"n\">git</span> <span class=\"n\">pull</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n</code></pre></div>\n<p>? What does <code>git status</code> look like after these commands? Does <code>get-cache</code> get the oleans for <code>ee74b67171</code>?</p>",
        "id": 258280325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634681209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> are you sure it is ee74b67171? I have ee74b6717.</p>",
        "id": 258280951,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634681533
    },
    {
        "content": "<p>version of leanproject is 1.1.0, version of lean is 3.33.0</p>",
        "id": 258281010,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634681573
    },
    {
        "content": "<p>I have tried the three lines, though I have to use git pull origin count, as otherwise it does not understand where to pull from.</p>",
        "id": 258281232,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634681687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409003\">Vladimir Goryachev</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/258280951\">said</a>:</p>\n<blockquote>\n<p>are you sure it is ee74b67171? I have ee74b6717.</p>\n</blockquote>\n<p>A slightly confusing thing about git: a full commit id is 40 characters, but git will report an unambiguous prefix given all the other commits in the repository.  These two likely refer to the same thing.</p>",
        "id": 258281276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634681708
    },
    {
        "content": "<p>if I specify <code>leanproject get-cache --rev ee74b6717</code>, it says that it applies cash and deletes two zombies.</p>",
        "id": 258281464,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634681806
    },
    {
        "content": "<p><code>git status</code> returns</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">On</span> <span class=\"n\">branch</span> <span class=\"n\">count</span>\n<span class=\"n\">nothing</span> <span class=\"n\">to</span> <span class=\"n\">commit</span><span class=\"o\">,</span> <span class=\"n\">working</span> <span class=\"n\">tree</span> <span class=\"n\">clean</span>\n</code></pre></div>",
        "id": 258281527,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634681848
    },
    {
        "content": "<p>After you've run <code>leanproject get-cache</code>, you should be able to run <code>leanpkg build</code> and have it return quickly (&lt;20s). Could you confirm that? Or is it recompiling, even on the command line?</p>",
        "id": 258281774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634681964
    },
    {
        "content": "<p>(I should also say that it doesn't hurt to give <em>more</em> of the commit id: <code>leanproject get-cache --rev ee74b67171b26da3fa6f3a8b4af5ea2d7b333137</code> is the full form, based on the commits I see <a href=\"https://github.com/leanprover-community/mathlib/commits/count\">here</a>.  I clicked on the first one and looked at the url.)</p>",
        "id": 258281800,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634681975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  It is recompiling on the command line.</p>",
        "id": 258449192,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634766181
    },
    {
        "content": "<p>That is ... weird. Can you show us the output of <code>leanproject get-cache --rev ee74b6717</code>, and the output of <code>git status</code>?</p>",
        "id": 258454349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634768830
    },
    {
        "content": "<p>Have you made local changes? If you pull and push does anything happen? This is difficult to debug because it's working for everyone else</p>",
        "id": 258463318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634774230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <a href=\"/user_uploads/3121/Mt9vQfHIxPWQgXiWw0QvJSMZ/Screenshot-from-2021-10-21-03-35-36.png\">Screenshot-from-2021-10-21-03-35-36.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mt9vQfHIxPWQgXiWw0QvJSMZ/Screenshot-from-2021-10-21-03-35-36.png\" title=\"Screenshot-from-2021-10-21-03-35-36.png\"><img src=\"/user_uploads/3121/Mt9vQfHIxPWQgXiWw0QvJSMZ/Screenshot-from-2021-10-21-03-35-36.png\"></a></div>",
        "id": 258467632,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634776665
    },
    {
        "content": "<p>and now <code>leanpkg build</code>?</p>",
        "id": 258467735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634776719
    },
    {
        "content": "<p>Does not intend to stop. <a href=\"/user_uploads/3121/YlBVeybaI5jC_yzIauJOzoqM/Screenshot-from-2021-10-21-03-40-04.png\">Screenshot-from-2021-10-21-03-40-04.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YlBVeybaI5jC_yzIauJOzoqM/Screenshot-from-2021-10-21-03-40-04.png\" title=\"Screenshot-from-2021-10-21-03-40-04.png\"><img src=\"/user_uploads/3121/YlBVeybaI5jC_yzIauJOzoqM/Screenshot-from-2021-10-21-03-40-04.png\"></a></div>",
        "id": 258467918,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634776844
    },
    {
        "content": "<p>Okay, somehow you have got a bad local cache. Let's force it to pull a new one.</p>",
        "id": 258467966,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634776874
    },
    {
        "content": "<p>How do I do it? And should I let this thing run to completion, or terminate it?</p>",
        "id": 258468077,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634776941
    },
    {
        "content": "<p>no ,kill it</p>",
        "id": 258468092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634776950
    },
    {
        "content": "<p>I'm just checking locally for you</p>",
        "id": 258468099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634776955
    },
    {
        "content": "<p>To me that looks like some core Lean file got changed. Uninstalling and reinstalling elan might not have done anything because it might not have cleaned out the existing core lean files. And when you reinstalled it, it was happy to use the files that already existed.</p>",
        "id": 258468376,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634777131
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rm</span> <span class=\"bp\">~/.</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">ee74b67171b26da3fa6f3a8b4af5ea2d7b333137.tar.xz</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">leanpkg</span> <span class=\"n\">build</span>\n</code></pre></div>",
        "id": 258468463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634777170
    },
    {
        "content": "<p>If that still fails, we'll need to work out how to more thoroughly clean your system.</p>",
        "id": 258468484,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634777184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/counting.20function/near/258468376\">said</a>:</p>\n<blockquote>\n<p>To me that looks like some core Lean file got changed. Uninstalling and reinstalling elan might not have done anything because it might not have cleaned out the existing core lean files. And when you reinstalled it, it was happy to use the files that already existed.</p>\n</blockquote>\n<p>I think there was a change to <code>elan</code> a while back that made core Lean files read-only (though that's certainly still a possibility).</p>",
        "id": 258469188,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1634777562
    },
    {
        "content": "<p>It failed. Is there a way to delete everything connected to Lean completely, to reinstall it again?</p>",
        "id": 258469782,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634777909
    },
    {
        "content": "<p>It can depend a bit on what installation method you used, but deleting <code>~/.mathlib</code> and <code>~/.elan</code> is a good start.</p>",
        "id": 258470033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634778055
    },
    {
        "content": "<p>If after that <code>lean</code> fails at the command line, you're probably good to start over again.</p>",
        "id": 258470056,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634778074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Did not help.<br>\nAlso, is it expected behavior that if I take the master branch, and slightly edit data.nat.basic (e.g. add an additional enter), then most other files in nat (e.g. data.nat.lattice) do not recompile in time and get this \"excessive memory consumption\"?</p>",
        "id": 258543389,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634822332
    },
    {
        "content": "<p>Also, in the general branch, there was a discussion that elan broke two days ago, right before I tried to get back to lean. Could it be relevant?</p>",
        "id": 258548308,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634824177
    },
    {
        "content": "<p>And, do I understand my situation correctly? Mathlib takes long to compile. So there exist those olean files, which are proofs that indicate that the files are checked and are true. This count branch has inserted a couple of trivial lines in data.nat.basic, so it requires to recompile almost all the mathlib from scratch, as everything depends on nat.basic. Everyone else can simply download oleans for the count branch, but my computer does not see them for some reason. Is this correct?</p>",
        "id": 258551896,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634825429
    },
    {
        "content": "<p>That sounds like a correct summary to me.</p>",
        "id": 258552375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634825609
    },
    {
        "content": "<p>I set it to compile from the command line. I'll see how it goes.</p>",
        "id": 258564631,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634829450
    },
    {
        "content": "<p>It is compiling. The nat files now became workable with, as their yellow stripes disappear quickly. However, the compiler showed me an error message while compiling (and then continued on). It said that it does not know the identifier <code>sub_lt_iff_right</code>, which is used in the lemma Inf_plus. I have googled it and only found <code>tsub_lt_iff_right</code>. Where is <code>sub_lt_iff_right</code>? Also, if I enter VS Code, it also underscore this identifier with red and says that it is unknown.</p>",
        "id": 258604514,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634845001
    },
    {
        "content": "<p>Also, when compiling other files, the compiler sometimes warns me that data.nat.lattice uses sorry. There is no sorry there, so I guess it just says it because there is a mistake in the data.nat.lattice (the one about sub_lt_iff_right)</p>",
        "id": 258605715,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634845556
    },
    {
        "content": "<p><code>sub_lt_iff_right</code> (and a bucnh of other lemmas) has been renamed to <code>tsub_lt_iff_right</code> recently by Floris.</p>",
        "id": 258606902,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634846071
    },
    {
        "content": "<p>Then how do Johan Commelin and Kevin Buzzard say the branch compiles just fine??</p>",
        "id": 258608860,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634846814
    },
    {
        "content": "<p>You must have taken cache from <code>master</code>.</p>",
        "id": 258610542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634847495
    },
    {
        "content": "<p>Just merge now and everything will be alright.</p>",
        "id": 258610576,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634847513
    },
    {
        "content": "<p>What exactly do you mean by merge here?</p>",
        "id": 258612521,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634848320
    },
    {
        "content": "<p>What does <code>git rev-parse HEAD</code> say? This will get the actual commit ID you're working with, and it would be good to check. (It ought to say <code>ee74b67171b26da3fa6f3a8b4af5ea2d7b333137</code>)</p>",
        "id": 258614205,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634849022
    },
    {
        "content": "<p>One other thing I might suggest is <code>leanproject clean</code> to delete all the oleans from the project and then <code>leanproject get-cache</code>.</p>\n<p>Given your trouble with <code>tsub_...</code>, the following seems unlikely to help, but you might also check what the modified times are for a lean file and its corresponding olean.  If your system clock is incorrect, potentially the lean file might appear to be newer than its olean.  (I believe Lean uses modified times for olean invalidation.)</p>",
        "id": 258615142,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634849426
    },
    {
        "content": "<p>(I know someone who for awhile had his system clock set incorrectly by a few years, and his e-mails from the future would sit at the tops of our inboxes...)</p>",
        "id": 258615551,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634849622
    },
    {
        "content": "<p>Everyone, thank you for your help, I figured out what happened! I am illiterate with git, so when I have read in \"How to contribute to mathlib\" guide that one should use <code>leanproject get -b mathlib:shiny_lemma</code> to contribute, I decided that this must be the default way of downloading branches. So to get the <code>count</code> branch, I was just saying <code>leanproject get -b mathlib:count</code>, followed by <code>git pull origin count</code>. This used to work when data.nat.basic was not altered, but it stopped to work after it was altered, as everything had to be recompiled. Now I have googled around, learned of the wonderful <code>checkout</code> functionality of git, and now it works and I have no problems.</p>\n<p>So, maybe that piece of documentation should be rewritten? As people whose interest is primarily in pure mathematics are a meaningful portion of potential new contributours, I guess I am not the only one for whom it was the first time working with git. So I think instructions on how to contribute should be mindful of such people.</p>",
        "id": 258620229,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634851672
    },
    {
        "content": "<p>I've accidentally used <code>-b</code> before and been confused, too.  <code>leanproject get mathlib:count</code> downloads the actual count branch.  The <code>-b</code> option is just for creating new branches.</p>\n<p>What your sequence of commands does is (1) download the <code>master</code> branch with its oleans, (2) create a new local branch based on that one with a name derived from <code>mathlib:count</code>, (3) try to merge in the <code>origin/count</code> branch.  This leaves you in a state where you have oleans for <code>master</code>, and files that are some mixture of <code>master</code> and <code>count</code> (depending on how the merge went).  If you then went ahead and followed the suggestion to do <code>leanproject get-cache --rev ee74b6717</code> then you'd have <em>really</em> the wrong oleans (since they'd be for the original <code>count</code> branch), so no wonder Lean was trying to compile everything from scratch!</p>",
        "id": 258621412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634852289
    },
    {
        "content": "<p>Yeah, I understand now. In fact, I have done <code>leanproject get-cache --rev ee74b6717</code>, and it did download some oleans, but they (logically) did not help.</p>",
        "id": 258621762,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634852489
    },
    {
        "content": "<p>It's always complicated to provide \"easy\" tools like <code>leanproject</code>, but without obscuring what's going on underneath (e.g. with <code>git</code>). :-(</p>",
        "id": 258659037,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634875090
    },
    {
        "content": "<p>If you have a suggested sentence or two that we could add to the docs to that would have saved you, please propose them and we can think about incorporating them!</p>",
        "id": 258659061,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634875118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> Wow, that was a nasty trap. I'm very glad that you figured it out.</p>",
        "id": 258661073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634876933
    },
    {
        "content": "<p>Thanks! <br>\nAs for changes I would propose for \"How to contribute to mathlib\":</p>\n<ul>\n<li>Move the part (6) upwards: it describes things which happen before opening a PR.</li>\n<li>Add a few words about git, e.g.</li>\n</ul>\n<p>As with most projects stored on github, mathlib exists as a collection of copies, called branches. The main copy, called master, is the version which is shown to the world, and so must not include any half-finished work. So, all the other branches exist exactly for that purpose: to store various work in progress. When you complete the changes in a branch, you merge that branch with the master, making your results available to the world.</p>\n<p>Note that while you can edit secondary branches freely, merging with the master requires approval from more experienced contributor, as described in the section \"Lifecycle of a PR\".</p>\n<ul>\n<li>\n<p>And finally, I would add to the point 6 the following. \"The simplest way to start making changes is to create your own branch. To do it, &lt;here go the first two bullet points of the point 6&gt;. However, if you want to get an existing branch, for example to help someone else with their changes, or to get a branch you have been working on on another computer, be sure to use &lt;git checkout? leanproject get without -b? I am still not sure what is the community-approved way is&gt; instead.</p>\n</li>\n<li>\n<p>(I'd also fix the typo \"steps for for sharing\")</p>\n</li>\n</ul>",
        "id": 258690469,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634897536
    },
    {
        "content": "<p>As for working on the PR.<br>\nMaybe the simplest thing would be to separate the things which are preliminary to nth and count, and PR them separately. I mean changes to data.nat.basic and data.nat.lattice, as well as lemmas list.range_add, multiset.range_add and finset.range_add (which I believe should be moved to their respective files).</p>\n<p>The harder thing would be to redefine nat.subtype.order_iso_of_nat in terms of nth, and make the count file its dependency. Does anyone have objections to the fact that it should be done?</p>",
        "id": 258691696,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634898212
    },
    {
        "content": "<p>PRing lemmas deep down in the heirarchy separately is always a good idea, especially if the stuff built on top of them isn't ready yet</p>",
        "id": 258710806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634909112
    },
    {
        "content": "<p>OK. Should I create a separate branch for each of those changes?</p>",
        "id": 258721267,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634913755
    },
    {
        "content": "<p>For each related set of changes, yes.</p>",
        "id": 258721313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634913780
    },
    {
        "content": "<p>I've made a PR updating the advice for pull requests, at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/212\">https://github.com/leanprover-community/leanprover-community.github.io/pull/212</a>. Improvements welcome --- please just push changes directly, you don't need to check with me. :-)</p>",
        "id": 258796280,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634953471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> Would you mind reviewing <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> ?</p>",
        "id": 258807195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634971194
    },
    {
        "content": "<p>Thank you, this is much more clear now!  The instructions look much more complete, and I think I would have much easier time if I had them available. However, I am to unproficient with the said tools to review on how optimal the proposed solutions are.</p>",
        "id": 258809902,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1634975347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> You have suggested renaming Inf_plus into Inf_add. What is your reasoning behind it?</p>",
        "id": 259199813,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635318228
    },
    {
        "content": "<p>Uniformity with the rest of the library. It may be worth reading <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a>.</p>",
        "id": 259200409,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635318697
    }
]