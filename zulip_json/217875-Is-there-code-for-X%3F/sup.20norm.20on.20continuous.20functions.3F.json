[
    {
        "content": "<p>What do I need to import to get the sup norm on continuous functions?</p>",
        "id": 228114920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614499931
    },
    {
        "content": "<p>It's in <code>topology.bounded_continuous_function</code> -- <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.normed_space\">docs#bounded_continuous_function.normed_space</a> !</p>",
        "id": 228114947,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614499990
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 228114967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614500033
    },
    {
        "content": "<p>Do we have something that provides</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_norm</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 228114970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614500039
    },
    {
        "content": "<p>Are you assuming compactness of <code>X</code>?</p>",
        "id": 228115029,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614500073
    },
    {
        "content": "<p>I guess yes. I really just want <code>X = [0,1]</code>.</p>",
        "id": 228115036,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614500098
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.mk_of_compact\">docs#bounded_continuous_function.mk_of_compact</a>, which turns a continuous function on compact <code>X</code> into a <code>bounded_continuous_function</code>.</p>",
        "id": 228115066,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614500145
    },
    {
        "content": "<p>It would be nice to have this operation as a linear equivalence from <code>C(X, ℝ)</code> to <code>bounded_continuous_function X ℝ</code>, but I think currently it exists just as a raw function.</p>",
        "id": 228115133,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614500217
    },
    {
        "content": "<p>Can you perhaps just work in <code>bounded_continuous_function X ℝ</code>, and forget about <code>C(X, ℝ)</code>?</p>",
        "id": 228115206,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614500294
    },
    {
        "content": "<p>I'm going to need this sup norm on the continuous functions from a compact space to a normed group soon.</p>",
        "id": 228116917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614502525
    },
    {
        "content": "<p>Yup, that also exists!  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.normed_group\">docs#bounded_continuous_function.normed_group</a></p>",
        "id": 228117182,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614502810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/sup.20norm.20on.20continuous.20functions.3F/near/228115206\">said</a>:</p>\n<blockquote>\n<p>Can you perhaps just work in <code>bounded_continuous_function X ℝ</code>, and forget about <code>C(X, ℝ)</code>?</p>\n</blockquote>\n<p>I'm not so excited about doing this, just because it will sound awkward. No one talks about the bounded continuous functions on <code>[0,1]</code>.</p>\n<p>Would it be a bad idea if I invested some effort into upgrading <code>mk_of_compact</code> into a linear equivalence, and provide that <code>has_norm</code> instance?</p>",
        "id": 228118424,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614504460
    },
    {
        "content": "<p>Or will this just result in too many ways to talk about the same thing, and I should get over using <code>→ᵇ</code>?</p>",
        "id": 228118483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614504499
    },
    {
        "content": "<p>Hmm, it might become awkward, you'll have to prove a bunch of lemmas about properties (eg, completeness) of a norm being preserved when you pull it back by a linear equivalence.</p>",
        "id": 228119152,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614505380
    },
    {
        "content": "<p>On the other hand, I think nobody much likes <code>bounded_continuous_function</code> in its current form.  I think <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> said he thinks it ought to be made as a structure rather than a subtype, for example.</p>",
        "id": 228119240,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614505502
    },
    {
        "content": "<p>Can it extend <code>continuous_map</code>? Or would the <code>topological_space</code> on the target there get in the way of the metric space on the target in <code>bounded_continuous_function</code>?</p>",
        "id": 228119347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614505651
    },
    {
        "content": "<p>I think that would be nice!  I would hope that if the <code>topological_space</code> on the target is induced by the <code>metric_space</code>, there isn't a problem?</p>",
        "id": 228119500,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614505829
    },
    {
        "content": "<p>Okay, maybe I will try it someday. :-) In the meantime I think I will try to get used to <code>→ᵇ</code>!</p>",
        "id": 228119604,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614505947
    },
    {
        "content": "<p>Another question while you're here --- if I have a continuous function <code>[0,1] →ᵇ ℝ</code>, and I just want the epsilon delta formulation of it being uniformly continuous, where do I go?</p>",
        "id": 228119645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614506000
    },
    {
        "content": "<p>Ah! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.uniform_continuous_iff\">docs#metric.uniform_continuous_iff</a></p>",
        "id": 228119727,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614506095
    },
    {
        "content": "<p>Yup, plus <a href=\"https://leanprover-community.github.io/mathlib_docs/find/compact_space.uniform_continuous_of_continuous\">docs#compact_space.uniform_continuous_of_continuous</a> to get the uniform continuity.</p>",
        "id": 228119797,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614506168
    },
    {
        "content": "<p>Do we have that, on a compact space, <code>|| f || &lt; M</code> iff for all x, |f(x)| &lt; M?</p>",
        "id": 228121095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614507717
    },
    {
        "content": "<p>I think not directly, but you can deduce it from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_forall_ge\">docs#is_compact.exists_forall_ge</a></p>",
        "id": 228121283,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614507917
    },
    {
        "content": "<p>Do these look okay:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">norm_le_of_bound</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">f</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">nonempty.some</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real.Inf_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dist_zero_right</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">}⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_lt_of_bound</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">f</span><span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">f.2.1</span><span class=\"o\">,</span> <span class=\"n\">continuity</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">le</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"n\">is_compact.exists_forall_ge</span> <span class=\"n\">compact_univ</span> <span class=\"n\">set.univ_nonempty</span> <span class=\"o\">(</span><span class=\"n\">continuous.continuous_on</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">norm_le_of_bound</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"n\">y</span> <span class=\"n\">trivial</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm hoping the first one already exists in some easier form.</p>",
        "id": 228131721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614520094
    },
    {
        "content": "<p>Looks good!  The first one does indeed exist, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.norm_le\">docs#bounded_continuous_function.norm_le</a>.</p>",
        "id": 228141056,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614530294
    },
    {
        "content": "<p>Thanks Heather, for your help on these questions. I've just pushed my proof of Weierstrass' theorem, and as punishment for helping me I've requested a review from you. :-) The PR is <a href=\"https://github.com/leanprover-community/mathlib/issues/6497\">#6497</a> and the diff relative to earlier PRs still in the queue is <a href=\"https://github.com/leanprover-community/mathlib/compare/bernstein_identities...bernstein_approximation\">https://github.com/leanprover-community/mathlib/compare/bernstein_identities...bernstein_approximation</a>.</p>",
        "id": 228323108,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614640129
    },
    {
        "content": "<p>Very exciting!</p>",
        "id": 228323626,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614640400
    },
    {
        "content": "<p>In this PR is a very \"concrete\" statement --- the approximations by Bernstein polynomials converge uniformly. In a later PR I'll set up the abstract statement about density.</p>",
        "id": 228324183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614640702
    },
    {
        "content": "<p>(Do you want me to review it now or wait for some of the prerequisites to be merged?  I see silly things, like <code>finset</code> lemmas in the wrong file <code>src/analysis/special_functions/bernstein.lean</code>, that you are probably planning to fix later.)</p>",
        "id": 228324294,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614640772
    },
    {
        "content": "<p>Hmm, okay, maybe I was too eager to ask for a review. :-) I'll ask again once I've finished cleaning up.</p>",
        "id": 228325257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614641243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I've just put up <a href=\"https://github.com/leanprover-community/mathlib/issues/6701\">#6701</a>, which transfers the various <code>normed_X</code> structures from <code>α →ᵇ β</code> to <code>C(α, β)</code> when <code>α</code> is compact, and proves the various equivalences/isometries.</p>\n<p>I'm uncertain how far to go, however. Should I restate the lemmas characterising the norm/distance on <code>α →ᵇ β</code>? Should I e.g. transfer completeness?</p>\n<p>I want to do this because it feels cumbersome to have to talk about <code>α →ᵇ β</code> (and keep providing proofs of boundedness) when you know <code>α</code> is compact and would naturally just talk about continuous functions. But I don't want to duplicate too much API... :-(</p>\n<p>The same issue is going to come up for talking about functions vanishing at infinity.</p>",
        "id": 230445214,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615856635
    }
]