[
    {
        "content": "<p>Do we have these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">set.not_mem_empty</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">set.mem_univ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>(They both should also essentially be <code>congr_fun h</code>.)</p>",
        "id": 282413446,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652627205
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_univ_iff_forall_mem\">docs#set.eq_univ_iff_forall_mem</a></p>",
        "id": 282413811,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652627772
    },
    {
        "content": "<p>Actually, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_univ_iff_forall\">docs#set.eq_univ_iff_forall</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_empty_iff_forall_not_mem\">docs#set.eq_empty_iff_forall_not_mem</a> - thanks!</p>",
        "id": 282424936,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652643100
    }
]