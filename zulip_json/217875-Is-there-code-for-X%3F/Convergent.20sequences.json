[
    {
        "content": "<p>Given a sequence <code>a : ‚Ñï ‚Üí E</code> (<code>E</code> topological space) is there a shorter way to state that <code>a</code> converges to some point then <code>‚àÉ x, filter.tendsto a filter.at_top (ùìù x)</code>?  This makes statements of theorems hard to read if you have several converging sequences and then prove that they converge to some explicit point.</p>",
        "id": 290206153,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658305184
    },
    {
        "content": "<p>It's so bad if you <code>open filter</code> and drop the <code>filter.</code> prefixes but maybe we do want some notation (maybe localized) for this.</p>",
        "id": 290210185,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1658308000
    },
    {
        "content": "<p>E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation a `‚Üí‚àû` x := filter.tendsto a filter.at_top (nhds x)\"</span> <span class=\"k\">in</span> <span class=\"n\">sequential_limits</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">sequential_limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üí‚àû</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 290210500,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1658308258
    },
    {
        "content": "<p>I introduced such a notation a very long time ago and I regret it. If Moritz really needs this predicate a lot then he can define a notation for the whole predicate.</p>",
        "id": 290229166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1658320920
    },
    {
        "content": "<p>I'm willing to trust you that it would be regrettable but if there's an easy illustration of why, I'd be interested to hear it.</p>",
        "id": 290229737,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1658321292
    },
    {
        "content": "<p>I don't really need it, but I feel that it makes statements really hard to read. Of course if there are technical reasons to not use shorthand notation, then I agree we should not use it. I have quite often in mathlib come across places where I would have liked to have abbreviations that don't change anything on the technical level, so that the statements look really nice, but all reductions work as intended.</p>",
        "id": 290243152,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658327576
    },
    {
        "content": "<p>A less controversial option might be a <code>local notation</code> around the relevant statements.</p>",
        "id": 290243638,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1658327772
    },
    {
        "content": "<p>Given that math is hard enough as it is, I always prefer to have notation so that it is really easy to see that the statements in mathlib correspond to the statements in the literature (but maybe I am very oldschool about that)</p>",
        "id": 290243704,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658327810
    },
    {
        "content": "<blockquote>\n<p>I would have liked to have abbreviations that don't change anything on the technical level</p>\n</blockquote>\n<p>would writing a <code>def</code> not suffice?</p>",
        "id": 290306512,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658355145
    },
    {
        "content": "<p>like how <code>def converges_to {E : Type*} [topological_space E] (a : ‚Ñï ‚Üí E) (x) : Prop := filter.tendsto a filter.at_top (nhds x)</code> would allow you to just write <code>converges_to a x</code> instead of the whole thing</p>",
        "id": 290306898,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658355367
    },
    {
        "content": "<p>you can define abbreviations for any proposition very easily</p>",
        "id": 290306977,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658355430
    },
    {
        "content": "<p>The 'issue' with <code>def</code> is that it is not syntactically equal to what it defines. this is why you cannot use <code>rw</code>, except if you mark your <code>def</code> as <code>[reducible]</code>, because <code>rw</code> works up to reducible definitional equality (according to Mario). I want syntactic equality, which is even stronger.</p>",
        "id": 290309765,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658357171
    },
    {
        "content": "<p>ahh, I see... thanks for explaining, that makes sense</p>",
        "id": 290309842,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658357242
    },
    {
        "content": "<p>it would be nice if Lean gave you another way to create a syntactically-equal alias besides notation</p>",
        "id": 290310524,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658357645
    },
    {
        "content": "<p>though maybe notation is flexible enough... I haven't played around with it much</p>",
        "id": 290310641,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658357741
    },
    {
        "content": "<p>The problem with such a notation is that is creates an extra layer of complexity that needs to be unfolded when you want to use those theorems. It's fine when you look at the statement but as soon as you want to use it you need to remember what they stand for.</p>",
        "id": 290322397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1658367540
    }
]