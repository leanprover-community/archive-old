[
    {
        "content": "<p>Is there a tactic to compute the rational power of  a  number?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>The library_search tactic failed to give a result.</p>",
        "id": 263426691,
        "sender_full_name": "Shi You",
        "timestamp": 1638446618
    },
    {
        "content": "<p>It's because it's not true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Can you understand why?</p>",
        "id": 263427406,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638447087
    },
    {
        "content": "<p>Yes. In the context of integers.</p>",
        "id": 263427988,
        "sender_full_name": "Shi You",
        "timestamp": 1638447470
    },
    {
        "content": "<p>for this specific example,  (with the correct modifications to the cast), you can do it with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I don't think there'll be a general-purpose tactic; closest things may be <code>norm_num</code> and <code>linarith</code>.</p>",
        "id": 263428089,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638447519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/rational.20power/near/263428089\">said</a>:</p>\n<blockquote>\n<p>for this specific example,  (with the correct modifications to the cast), you can do it with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I don't think there'll be a general-purpose tactic; closest things may be <code>norm_num</code> and <code>linarith</code>.</p>\n</blockquote>\n<p>I got this error from your code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_pow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 263428283,
        "sender_full_name": "Shi You",
        "timestamp": 1638447641
    },
    {
        "content": "<p>ahh, you need <code>analysis.special_functions.complex.pow</code>.  I don't think there's a <code>has_pow ℝ ℚ</code> in Lean, sadly</p>",
        "id": 263428693,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638447911
    }
]