[
    {
        "content": "<p>Does this exist in some form?  Also, is there a typeclass for <em>not</em> having a maximal element, the way that <code>has_top</code> is for having a maximal element?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top_bot</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_ordered_add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exists_pos</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">exists_ne</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨-</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">neg_pos</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_has_top</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">exists_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">lt_add_of_pos_right</span> <span class=\"n\">c</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206961188,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1597429599
    },
    {
        "content": "<p>For the second question, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_top_order\">docs#no_top_order</a></p>",
        "id": 206961588,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597429835
    },
    {
        "content": "<p>Ah good.  So to rephrase, it seems I'm asking about the existence of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_ordered_add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">no_top_order</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 206962386,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1597430234
    },
    {
        "content": "<p>By looking to see how one gets <code>no_top_order ℤ</code>, I discovered <code>linear_ordered_semiring.​to_no_top_order</code>.</p>\n<p><del>The instance I wrote would supersede <code>linear_ordered_semiring.​to_no_top_order</code>.  Should I make this replacement?</del> on second thoughts, I guess not all linear ordered semirings are decidable.  If there were a preexisting typeclass <code>linear_ordered_add_comm_group</code>, that would be the right way to do a grand unified theory.</p>",
        "id": 206965072,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1597431708
    },
    {
        "content": "<p>This exists for <code>linear_ordered_field</code>s, and apparently separately for <code>linear_ordered_(semi)ring</code></p>",
        "id": 206974505,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597435090
    },
    {
        "content": "<p>Is there a reason not to have all the classes just be <code>linear_ordered_thingy</code> and then have a mixin for the order being decidable?</p>",
        "id": 206975454,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597435309
    },
    {
        "content": "<p>I completely agree.  I think there are a lot of similar issues in the order hierarchy, actually.  For example, <a href=\"#narrow/stream/113489-new-members/topic/Linear.20orders\">this</a>.</p>",
        "id": 206976552,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1597435992
    },
    {
        "content": "<p>But that'd be a big refactor.  Maybe for now I will just PR a documentation comment to <code>linear_ordered_semiring</code> and <code>linear_ordered_field</code>, so that when (someday) a typeclass <code>linear_ordered_add_comm_group</code> is created, the person doing it remembers to prove this theorem for it.</p>",
        "id": 206976764,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1597436156
    }
]