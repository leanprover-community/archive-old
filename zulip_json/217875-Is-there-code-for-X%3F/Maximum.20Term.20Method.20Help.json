[
    {
        "content": "<p>I'm working on proving the <a href=\"https://en.wikipedia.org/wiki/Maximum_term_method#:~:text=The%20maximum%2Dterm%20method%20is,maximum%20term%20in%20the%20summation.\">maximum term method</a>, but I keep getting to a point where I get stuck. I'm starting to think there may be a flaw in how I wrote the theorem and wanted to get feedback. My idea for the proof was by <code>induction</code> on <code>n</code>, but I get to an unsolvable goal. I've also experimented with either using just <code>n</code> or <code>n.succ</code> but neither variation seems to make much difference for the proof. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset.mem_le_pos_sum</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 321715844,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1673902059
    },
    {
        "content": "<p>You should generalise to any <code>finset</code>, not just <code>finset.range n</code>, and do induction on the finset itself rather than its cardinality.</p>",
        "id": 321716651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673902474
    },
    {
        "content": "<p>I think the generalized form would look like this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finset.mem_le_pos_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>And then you mean do <code>induction s</code> as the first step?</p>",
        "id": 321718183,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1673903356
    },
    {
        "content": "<p>Just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_eq_add_sum_diff_singleton\">docs#finset.sum_eq_add_sum_diff_singleton</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_nonneg\">docs#finset.sum_nonneg</a></p>",
        "id": 321719525,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673904147
    },
    {
        "content": "<p>If you go via Yael's route, use the bespoke induction principle <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.induction_on\">docs#finset.induction_on</a> .</p>",
        "id": 321721288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673905105
    },
    {
        "content": "<p>Actually you can directly apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.single_le_sum\">docs#finset.single_le_sum</a></p>",
        "id": 321721941,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673905451
    },
    {
        "content": "<p>Thank you for the help! I imagined the code already existed in some form, but it was just a matter of finding the exact wording</p>",
        "id": 321723456,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1673906292
    }
]