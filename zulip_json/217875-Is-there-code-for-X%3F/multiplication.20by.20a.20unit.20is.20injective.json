[
    {
        "content": "<p>I can't find the following in the library:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.apply_fun</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hu</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ui</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">ui</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">units.inv_mul_cancel_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>There is <code>mul_left_injective₀</code>, but it requires a <code>cancel_monoid_with_zero</code> (and then works for all non-zero elements) and <code>group_with_zero.mul_left_injective</code>, which (as the name indicates) even needs a <code>group_with_zero</code>.</p>",
        "id": 283116935,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653075536
    },
    {
        "content": "<p>Found a shorter proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.apply_fun</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.regular.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_unit.is_regular</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n</code></pre></div>",
        "id": 283116971,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653075559
    },
    {
        "content": "<p>So maybe it's not worth the effort of adding?</p>",
        "id": 283117000,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653075578
    },
    {
        "content": "<p>There is also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hm.mul_right_inj</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n</code></pre></div>",
        "id": 283117729,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1653076061
    },
    {
        "content": "<p>I'm adding it in <a href=\"https://github.com/leanprover-community/mathlib/pull/14212\">#14212</a> already</p>",
        "id": 283117807,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653076095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/multiplication.20by.20a.20unit.20is.20injective/near/283117729\">said</a>:</p>\n<blockquote>\n<p>There is also</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hm.mul_right_inj</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah, OK. There are too many places where to look... (and I was looking for <code>injective</code> and not just <code>inj</code>).</p>",
        "id": 283118291,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653076402
    },
    {
        "content": "<p>I think it's got to the point now where nobody knows all the library; after a while you either know where it is, or how to find it, or who to ask :-)</p>",
        "id": 283128363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653081741
    },
    {
        "content": "<p>I call dibs on the entire <code>set_theory</code> folder :P</p>",
        "id": 283129281,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653082362
    },
    {
        "content": "<p>And me <code>order</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 283133618,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653085431
    }
]