[
    {
        "content": "<p>I was discussing this \"joke\" theorem with some students (about the dangers of ineffective implied constants, which are all over some big parts of analytic number theory...), and they asked if it could be formalized in Lean. I said, of course, and it took two minutes to do so. I'm assuming this isn't the kind of thing that people would want in mathlib, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- A natural number `n` is a `twin_prime` if it and `n+2` are both `prime`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">twin_prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">prime</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The Twin Prime Conjecture states that there are infinitely many twin primes.</span>\n<span class=\"sd\">  Equivalently, for any `C`, there exists `n&gt;C` which is a `twin_prime`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">twin_prime_conj</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">twin_prime</span> <span class=\"n\">n</span>\n\n<span class=\"sd\">/-- The Iwaniec/Heath-Brown (folklore/joke) Theorem states that there is a constant `C` so that:</span>\n<span class=\"sd\">  If you can find a `twin_prime` greater than `C`, then there are infinitely many such. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">twin_primes_C</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">twin_prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">twin_prime_conj</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">twin_prime_conj</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">twin_prime_conj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">C</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">HH</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hC</span> <span class=\"n\">n</span> <span class=\"n\">this</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 307035079,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1667190805
    },
    {
        "content": "<p>If we don't put things like this into mathlib (ideally with a doc-string clearly explaining the joke), how are our new AI overlords ever going to gain a sense of humour?</p>",
        "id": 307035665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667191329
    },
    {
        "content": "<p>Right. Except that, if/when we get around to formalizing the Deuring/Heilbronn phenomenon, we'll be making a similar kind of \"joke\", but in that case, it will be solving the Gauss class number problem... So...?</p>",
        "id": 307036008,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1667191755
    },
    {
        "content": "<p>I think it's an specialization of <a href=\"https://en.wikipedia.org/wiki/Drinker_paradox\">https://en.wikipedia.org/wiki/Drinker_paradox</a></p>",
        "id": 307036880,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667192693
    },
    {
        "content": "<p><a href=\"https://www.codewars.com/kata/5e3cd88fa5b6a8001fa84ed5/train/lean\">https://www.codewars.com/kata/5e3cd88fa5b6a8001fa84ed5/train/lean</a></p>",
        "id": 307037525,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667193194
    },
    {
        "content": "<p>That's a fun re-statement. I'm guessing that the \"Drinker\" version (from the 70's?) is a reformulation of something like Deuring-Heilbronn (from the 30's), which I believe is the first time such an argument appeared in serious mathematics... (But I'm not an historian...)</p>",
        "id": 307038709,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1667194191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> on a side note, if you just <code>use C</code> in your proof instead of <code>use C+1</code> then you don't need to use <code>linarith</code></p>",
        "id": 307149339,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667233971
    },
    {
        "content": "<p>Yes, of course. But (analytic) number theorists <em>have</em> to put the <code>+1</code>. You know, just in case... <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 307206980,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1667252306
    }
]