[
    {
        "content": "<p>Does mathlib have the following example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">primes</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 211381968,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601153110
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.pow_card\">docs#zmod.pow_card</a> ?</p>",
        "id": 211382346,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601153742
    },
    {
        "content": "<p>Yeah the proof would follow easily from this and the fact that zmod p is the quotient of Z by the ideal generated by p, and the fact that the equivalence relation for a principal ideal is given by divisibility of the difference by the generator of the ideal. All of these things are presumably in mathlib, and I was hoping someone put them together into such a lemma.</p>",
        "id": 211382467,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601153908
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">primes</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.modeq.modeq_iff_dvd</span><span class=\"o\">],</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">≡</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_eq_int_coe_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">zmod.pow_card</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">p.2</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211382881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601154617
    },
    {
        "content": "<p>Nice! I wonder if it makes sense to add an <code>elementary_number_theory</code> file/folder for small facts like this?</p>",
        "id": 211384316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601157304
    },
    {
        "content": "<p>That might be good. <br>\nHowever, I'm not sure what the \"normal form\" of these lemmas should be. If you formulate the lemma slightly differently, the proof becomes a little shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.modeq.modeq_iff_dvd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_eq_int_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">exact_mod_cast</span> <span class=\"bp\">@</span><span class=\"n\">zmod.pow_card</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>(yes, it's mostly shorter because I put everything on 1 line, but there is also 1-2 fewer steps)</p>",
        "id": 211384624,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601157896
    },
    {
        "content": "<p>I still don't know what is mathlib's preferred way to speak about primes. It seems the <code>[fact p.prime]</code> is more common than using the type <code>primes</code></p>",
        "id": 211384705,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601158073
    },
    {
        "content": "<p>I have not done much with primes in mathlib, so I also don't know. A general strategy is to follow the conventions of the lemmas you're using (or the majority of the lemmas, if mathlib is not consistent itself). That also makes them easier to apply.</p>",
        "id": 211384950,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601158474
    },
    {
        "content": "<p>The divisibility/zmod/ZMOD stuff seems more difficult than it has to be whenever I have to use it, though that could just be wishful thinking.</p>",
        "id": 211385975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601160342
    }
]