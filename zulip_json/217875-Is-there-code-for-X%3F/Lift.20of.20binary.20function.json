[
    {
        "content": "<p>Does something like this already exist?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">lift₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">ma</span> <span class=\"n\">mb</span><span class=\"o\">,</span> <span class=\"n\">do</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">ma</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">mb</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206360317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596914063
    },
    {
        "content": "<p>You can do <code>λ ma mb, f &lt;$&gt; ma &lt;*&gt; mb</code>- this works for any applicative not just monads</p>",
        "id": 206360978,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596915372
    },
    {
        "content": "<p>Yes, I was about to write there should be some ascii art doing it.</p>",
        "id": 206360984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596915410
    },
    {
        "content": "<p>Simon will tell us everything about monadic ascii art.</p>",
        "id": 206360990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596915427
    },
    {
        "content": "<p>Thanks. I guss what I'm really hoping is that mathlib has a lemma that says something like this: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_monad</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mb</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">do</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">ma</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">mb</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">do</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">mb</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">ma</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Any ideas?</p>",
        "id": 206361154,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596915551
    },
    {
        "content": "<p>one would think <code>simp</code> should solve this, right? (maybe not, but there should be a one line proof, I think.)</p>",
        "id": 206361219,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596915632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ?</p>",
        "id": 206361222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596915655
    },
    {
        "content": "<p>Also, <code>refl</code> doesn't work for this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_monad</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mb</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">do</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">ma</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">mb</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">ma</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">mb</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- failed!</span>\n</code></pre></div>",
        "id": 206361347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596915813
    },
    {
        "content": "<p>Manipulating applicative and monad can be a pain without the right set of simplification lemmas. There's <code>functor_norm</code> and <code>monad_norm</code> as lists of simplification lemmas to normalize those expressions. That should help. In your specific situation, you're going to need applicatives to commute</p>",
        "id": 206361470,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596915982
    },
    {
        "content": "<p>I guess the lemma is false in general.</p>",
        "id": 206361479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596916016
    },
    {
        "content": "<p><code>foo</code> is not going to hold for monads in general</p>",
        "id": 206361480,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596916018
    },
    {
        "content": "<p>We could imagine side effects ruining the lemma.</p>",
        "id": 206361488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596916034
    },
    {
        "content": "<p>Exactly</p>",
        "id": 206361490,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596916043
    },
    {
        "content": "<p>Oh yeah!</p>",
        "id": 206361491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596916049
    },
    {
        "content": "<p>for <code>bar</code>, you can prove it by normalizing using <code>monad_norm</code></p>",
        "id": 206361494,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596916060
    },
    {
        "content": "<p>Okay, thanks!</p>",
        "id": 206361500,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596916072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think I like this terminology even better than \"monadology\": ascii art. I think I'll find a way to put it on my resume</p>",
        "id": 206361554,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596916130
    },
    {
        "content": "<p>(you may need to import <code>control.monad.basic</code>)</p>",
        "id": 206361667,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596916355
    },
    {
        "content": "<p><code>simp with monad_norm</code> proves <code>bar</code>, as you said.</p>",
        "id": 206361684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596916433
    },
    {
        "content": "<p>Is there some natural typeclass extending a lawful monad where <code>foo</code> holds true?</p>",
        "id": 206361726,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596916491
    },
    {
        "content": "<p>I'm pretty sure you want a <a href=\"https://ncatlab.org/nlab/show/commutative+monad\">https://ncatlab.org/nlab/show/commutative+monad</a></p>",
        "id": 206361733,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596916512
    },
    {
        "content": "<p>yes that looks right!</p>",
        "id": 206361735,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596916529
    },
    {
        "content": "<p>Ha! Is it true that <code>foo</code> exactly characterizes commutative monads?</p>",
        "id": 206361849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596916726
    },
    {
        "content": "<p>If you use applicative notation, <code>is_comm_applicative</code> will suffice</p>",
        "id": 206362006,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596916954
    },
    {
        "content": "<p>Perfect! That's what I'm looking for (I guess <code>[monad M] [is_lawful_monad M] [is_comm_applicative M]</code> is equivalent to <code>[is_commutative_monad M]</code>)</p>",
        "id": 206362075,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596917048
    },
    {
        "content": "<p>In case it is useful for anyone else:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_comm_applicative</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mb</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">ma</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">mb</span> <span class=\"bp\">=</span> <span class=\"n\">do</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">mb</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">ma</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_comm_applicative</span><span class=\"bp\">.</span><span class=\"n\">commutative_map</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"k\">with</span> <span class=\"n\">monad_norm</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206362213,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596917288
    },
    {
        "content": "<p>That sounds like a reasonable conclusion</p>",
        "id": 206362217,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596917289
    }
]