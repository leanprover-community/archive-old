[
    {
        "content": "<p>Do we have something about the Lp space for exponents between 0 and 1? It would not be a <code>normed_space</code> but could still be a <code>metric_space</code> and that might lift requirements for <code>[fact (1 \\le p)]</code> in a few places. Is it possible to have an instance for <code>p &lt; 1</code> and another for <code>1 \\le p</code>, with very different definitions, or is that looking for trouble with decidability of <code>1 \\le p</code>?</p>",
        "id": 278843118,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649863223
    },
    {
        "content": "<p>This is something that shows up in LTE and I was planning to work on putting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\ell^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0&lt;p&lt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> in <code>mathlib</code> at a certain point.</p>",
        "id": 278843228,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1649863274
    },
    {
        "content": "<p>It wouldn't be a problem to have instances defined differently for <code>p &lt; 1</code> and <code>1 \\le p</code>. Right now, we have a <code>has_dist</code> instance for all <code>p</code>, and it does not satisfy the triangular inequality for <code>p &lt; 1</code>, so one would have the change the definition. It would probably be a good thing to do, it's just that nobody has invested the time to do it properly for now.</p>",
        "id": 278849213,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649865723
    },
    {
        "content": "<p>One possibility to avoid having an instance for <code>1 ≤ p</code> and another one for <code>p &lt; 1</code> is to push the disjunction to the definition of <code>dist</code>. then you can probably prove a few things by casing within the theorems rather than having two separate versions.</p>",
        "id": 278849450,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649865831
    },
    {
        "content": "<p>Surely you rarely unfold the definition anyway, right?</p>",
        "id": 278849533,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649865854
    },
    {
        "content": "<p>Well, but there are many theorems which are not true in case <code>p&lt;1</code>, the theories are quite different.</p>",
        "id": 278849612,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1649865884
    },
    {
        "content": "<p>Sure, the basic API looks similar, but they would rapidly diverge (Open Mapping thm fails in the non-locally convex setting, for instance, and many things depending on it).</p>",
        "id": 278849735,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1649865925
    },
    {
        "content": "<p>I'm not saying this buys us much. But it might be nice to have a single <code>metric_space</code> instance, for example.</p>",
        "id": 278849866,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649865971
    },
    {
        "content": "<p>Yes, this should definitely be hidden in the definition of <code>has_dist</code>!</p>",
        "id": 278850609,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649866273
    },
    {
        "content": "<p>Ah but if <code>has_dist</code> is non-trivial won't we fall back into the whole non-defeq problem of yesterday? I mean if p&lt;1 then <code>has_dist</code> is a true definition while if <code>1 \\le p</code> it should still be obtained by typeclass inference from <code>normed_group</code>, or am I missing something?</p>",
        "id": 278853951,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649867643
    },
    {
        "content": "<p>Probably we should have <code>pseudonormed_group</code> (which are already there, I guess, but with a different meaning)</p>",
        "id": 278854122,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1649867729
    },
    {
        "content": "<p><code>prenormed_group</code>?</p>",
        "id": 278854176,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649867760
    },
    {
        "content": "<p>Or <code>quasinormed_group</code> as <a href=\"https://en.wikipedia.org/wiki/Quasinorm\">here</a> ?</p>",
        "id": 278854383,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1649867826
    },
    {
        "content": "<p>Note that these spaces are <code>p</code>-Banach spaces. Which we have in LTE.</p>",
        "id": 278855085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649868155
    },
    {
        "content": "<p>This is way I was planning to port them to <code>mathlib</code> once LTE will be more advanced.</p>",
        "id": 278855431,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1649868308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lp.20for.200.3Cp.3C1/near/278853951\">said</a>:</p>\n<blockquote>\n<p>Ah but if <code>has_dist</code> is non-trivial won't we fall back into the whole non-defeq problem of yesterday? I mean if p&lt;1 then <code>has_dist</code> is a true definition while if <code>1 \\le p</code> it should still be obtained by typeclass inference from <code>normed_group</code>, or am I missing something?</p>\n</blockquote>\n<p>No, in all cases <code>has_dist</code> will be a definition, and then when we define the <code>normed_group</code> structure we just have to make sure that the <code>dist</code>   we define in there is definitionally the same as the one we had already defined. Which we can ensure.</p>",
        "id": 278911036,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649898101
    },
    {
        "content": "<p>Oh, I thought naively (without looking at the definition of <code>normde_group</code>) that <code>dist</code> was defined in terms of the norm and that <code>normed_group.dist_eq</code> was a <code>rfl</code> lemma, I should have looked earlier. Nevertheless my fear is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">thenorm</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">thenorm'</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">thedist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">thedist</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">thenorm</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">fact.out</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">thedist</span><span class=\"o\">,</span><span class=\"n\">thenorm</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">thedist</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">thenorm'</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>where <code>thenorm</code> looks natural but is not defeq to <code>thedist</code> when both are defined, and where <code>thenorm'</code> is defeq to <code>thedist</code> whenever they are both defined but <code>thenorm'</code> just looks wrong.</p>",
        "id": 278932957,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649922392
    }
]