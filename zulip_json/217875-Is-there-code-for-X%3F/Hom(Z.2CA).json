[
    {
        "content": "<p>Does anyone know whether we have the isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(\\mathbb{Z},A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> for an additive group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>? Ideally I would like an <code>add_equiv</code>.</p>",
        "id": 275299586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647292729
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmultiples_add_hom\">docs#zmultiples_add_hom</a> , assuming commutativity (not sure if it's needed)</p>",
        "id": 275300258,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647292948
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 275300313,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647292992
    },
    {
        "content": "<p>with thanks to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 275300368,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647293030
    },
    {
        "content": "<p>While you're here.... do you know if we have the iso between <code>\\top : subgroup G</code> and <code>G</code>?</p>",
        "id": 275300670,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647293228
    },
    {
        "content": "<p>library search comes up short on that...</p>",
        "id": 275300675,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647293234
    },
    {
        "content": "<p>I found it for submodules: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.top_equiv_self\">docs#submodule.top_equiv_self</a></p>",
        "id": 275301070,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647293484
    },
    {
        "content": "<p>(this time by googling for <code>↥⊤</code> through the whole documentation)</p>",
        "id": 275301092,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647293502
    },
    {
        "content": "<p>You could build it from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.cod_restrict\">docs#add_monoid_hom.cod_restrict</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.restrict\">docs#add_monoid_hom.restrict</a> (as I'm sure you know perfectly well).</p>",
        "id": 275301704,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647293868
    },
    {
        "content": "<p>There's an open PR for that, <a href=\"https://github.com/leanprover-community/mathlib/pull/12658\">#12658</a></p>",
        "id": 275310016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647299224
    },
    {
        "content": "<p>Heh yeah this came up on the discord yesterday</p>",
        "id": 275310203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647299355
    }
]