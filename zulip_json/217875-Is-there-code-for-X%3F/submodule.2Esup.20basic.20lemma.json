[
    {
        "content": "<p>I'm not able to find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ₁₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R₂</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">submodule.sup_eq_span_union</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊔</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">span_union</span><span class=\"o\">,</span> <span class=\"n\">span_eq</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">span_eq</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_map.eq_on_sup</span>  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">⊔</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map.eq_on_span</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">;</span> <span class=\"n\">tauto</span> <span class=\"o\">})</span>\n  <span class=\"o\">((</span><span class=\"n\">s.sup_eq_span_union</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Am I missing something?</p>",
        "id": 273779410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646214017
    },
    {
        "content": "<p>The first lemma strikes me as a bit specialized, unless we already have something analogous for supr</p>",
        "id": 273780151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646214506
    },
    {
        "content": "<p>The second feels like it might be nice to also have stated as an <code>ext</code> lemma for <code>f g : s ⊔ t →ₗ M</code>, with hypotheses <code>f.comp (submodule.of_le le_sup_left) = g.comp (submodule.of_le le_sup_left)</code> and similar for <code>right</code></p>",
        "id": 273780242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646214576
    },
    {
        "content": "<p>Probably we haven't bothered with many of these lemmas because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mem_sup\">docs#submodule.mem_sup</a> is easy enough to use.</p>",
        "id": 273780592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646214747
    },
    {
        "content": "<p>Do we have <code>span_union</code> in the form <code>span (a ∪ b) = span a ⊔ span b</code>? This is true for lots of subobjects</p>",
        "id": 273781819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646215267
    },
    {
        "content": "<p>Yes Kevin, span_union already says that.</p>",
        "id": 273782184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646215462
    },
    {
        "content": "<p>Eric, I'm not convinced at all by your arguments, and the variation you suggest would be a lot less convenient to use (and we indeed already have the supr version). So I'm going to PR that at some point (it will first go to the sphere eversion project).</p>",
        "id": 273782254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646215519
    },
    {
        "content": "<p>We don't appear to have <code>linear_map.eq_on_supr</code>, unless if has another name</p>",
        "id": 273786633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646217802
    },
    {
        "content": "<p>But you're right, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr_eq_span\">docs#supr_eq_span</a> (<code>_Union</code>) does exist. Perhaps we should rename it to match your suggested <code>sup_eq_span_union</code>.</p>",
        "id": 273786728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646217855
    }
]