[
    {
        "content": "<p>I have rings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi><mo>⊆</mo><mi>C</mi><mo>⊆</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">A\\subseteq B\\subseteq C\\subseteq D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>. The rings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">A,B,D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> are given, and I can build <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-subalgebra of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> which contains <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. I'm now having trouble putting the finishing touches to the <code>is_scalar_tower</code> glue. Am I doing it wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.intermediate_field</span>\n\n<span class=\"kd\">constants</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"c1\">-- A ⊆ B ⊆ D</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">B</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- I now have a ring C sitting between B and D, but defined initially</span>\n<span class=\"c1\">-- as sitting between A and D</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">A</span> <span class=\"n\">D</span> <span class=\"c1\">-- A ⊆ C ⊆ D; I will be thinking of C as a type not a term.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- so far so good</span>\n\n<span class=\"c1\">-- in fact I can prove B ⊆ C</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">B_subset_C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_scalar_tower.to_alg_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- need to build this somehow</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.to_algebra</span>\n<span class=\"o\">((</span><span class=\"n\">subalgebra.inclusion</span> <span class=\"o\">(</span><span class=\"n\">B_subset_C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n  <span class=\"o\">((</span><span class=\"n\">is_scalar_tower.to_alg_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range_restrict</span><span class=\"o\">))</span> <span class=\"c1\">-- is this a bad idea?</span>\n\n<span class=\"c1\">-- this one I can do</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- this one I can't</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 285946399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655134487
    },
    {
        "content": "<blockquote>\n<p>is this a bad idea?</p>\n</blockquote>\n<p>Both <code>noncomputable</code> and <code>ring_hom.to_algebra</code> are red flags to me, so I think yes</p>",
        "id": 285952371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655136733
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">B</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">algebra_map_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">B_subset_C</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">..</span><span class=\"n\">C</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- need to build this somehow</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">subalgebra.algebra</span> <span class=\"n\">C'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">B</span> <span class=\"n\">C'</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 285953057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655137002
    },
    {
        "content": "<p>Saves you from having to prove anything</p>",
        "id": 285953072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655137008
    },
    {
        "content": "<p>My guess is that the best answer is actually to just build <code>C'</code> directly, since you didn't mention where <code>C</code> came from</p>",
        "id": 285953264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655137098
    },
    {
        "content": "<p>I make <code>C</code> as a sup (of objects including B), so it's coming from the lattice structure on <code>subalgebra A D</code>. I'm more than happy to do it this way! Your code makes me think that my <code>C</code> should be called <code>C_aux</code> and your <code>C'</code> should be my <code>C</code>. Is <code>ring_hom.to_algebra</code> a code smell? I hadn't realised.</p>",
        "id": 285960612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655140196
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_algebra\">docs#ring_hom.to_algebra</a> is pretty much guaranteed to introduce a diamond in <code>smul</code></p>",
        "id": 285961329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655140525
    },
    {
        "content": "<p>Because it implements it as <code>f r * x</code></p>",
        "id": 285961356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655140542
    },
    {
        "content": "<blockquote>\n<p>Your code makes me think that my <code>C</code> should be called <code>C_aux</code> and your <code>C'</code> should be my <code>C</code>.</p>\n</blockquote>\n<p>This sounds good to me</p>",
        "id": 285961490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655140604
    },
    {
        "content": "<p>Hmm. In my use case I run into an exciting new problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.normal</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">middle_field</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span> <span class=\"c1\">-- or anything</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">middle_field</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">middle_field</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_scalar_tower_mid'</span> <span class=\"c1\">-- works fine and this is an instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">middle_field</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- deterministic timeout :-(</span>\n</code></pre></div>\n<p>Looking at the trace with <code>set_option trace.class_instances true</code> it seems to me that typeclass inference actually does succeed and finds a monster term and then for some reason falls over later. Should I be worried about this? I can just add the instance manually I guess, or will this cause problems later on?</p>",
        "id": 285978402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655148875
    },
    {
        "content": "<p>I think you probably are in trouble here and I'm not sure there's all that much you can do about it. Adding special cases of instances manually that already exist like you do above is a fairly typical workaround, which has the main drawback of forcing you to come up with stupid names for your instances</p>",
        "id": 285997332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655159155
    }
]