[
    {
        "content": "<p>Do we have somewhere that the expectation of the product of two independent random variables is the product of their expectations?</p>\n<p>I am trying to prove this but am running in circles trying to manage putting different sigma-fields and measurable_space structures on the same underlying type (but with the same measure ...). So far I am able to write something that at least type-checks,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">measurable'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">⦄,</span> <span class=\"n\">measurable_set</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">indep_fun_of_indep_sets</span> <span class=\"o\">{</span><span class=\"n\">F1</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hindep</span> <span class=\"o\">:</span> <span class=\"n\">indep_sets</span> <span class=\"n\">F1</span> <span class=\"n\">F2</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">measurable'</span> <span class=\"n\">F1</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">measurable'</span> <span class=\"n\">F2</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">indep_fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">hA</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">hB</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hindep</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"n\">hA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"n\">hB</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_mul_of_indep_sets</span> <span class=\"o\">{</span><span class=\"n\">F1</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hindep</span> <span class=\"o\">:</span> <span class=\"n\">indep_sets</span> <span class=\"n\">F1</span> <span class=\"n\">F2</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">hXm</span> <span class=\"o\">:</span> <span class=\"n\">measurable'</span> <span class=\"n\">F1</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hXi</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">hYm</span> <span class=\"o\">:</span> <span class=\"n\">measurable'</span> <span class=\"n\">F2</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hYi</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">integral</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">integral</span> <span class=\"n\">volume</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">integral</span> <span class=\"n\">volume</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but it feels like I am doing it wrong. I also tried starting like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">integral_indep</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)}</span>\n    <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">indep_fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">ω</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">Y</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">integrable.induction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">ω</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">Y</span> <span class=\"n\">ω</span><span class=\"o\">))</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but did not manage to go much further.</p>",
        "id": 276458112,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1648119121
    },
    {
        "content": "<p>We have it for the Lebesgue integral: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/probability_theory.lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun\">docs#probability_theory.lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun</a> but it is not used by anything right now so there is no guarantee that it is usable. I started proving the same statement for the Bochner integral a month ago but I did not have time to work on Lean recently, so I did not finish that work. I realized that you really want to do induction on functions which are measurable with respect to some sub-sigma-algebras in order to prove this, so I wrote such an induction lemma. I will PR that induction lemma during the week-end.</p>",
        "id": 276461037,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1648120844
    },
    {
        "content": "<p>Thanks! I will have a look ...</p>",
        "id": 276461618,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1648121202
    },
    {
        "content": "<p>I managed to prove the case of nonnegative variables, using the <code>lintegral</code> version, but it is very sub-optimal (to say the least):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_probability_measure</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"bp\">Ω</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_indep_of_pos</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hXYind</span> <span class=\"o\">:</span> <span class=\"n\">indep_fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">hXpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hXmes</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hYpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hYmes</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">Y</span><span class=\"o\">}:</span>\n  <span class=\"bp\">𝔼</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">𝔼</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"bp\">𝔼</span><span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">integral_eq_lintegral_of_nonneg_ae</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">integral_eq_lintegral_of_nonneg_ae</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">integral_eq_lintegral_of_nonneg_ae</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"bp\">∘</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"bp\">∘</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun</span> <span class=\"bp\">Ω</span> <span class=\"n\">_</span> <span class=\"n\">volume</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">ennreal.to_real</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">ennreal.of_real_mul</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hXpos</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ennreal.to_real_mul.symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">measurable.ennreal_of_real</span> <span class=\"n\">hXmes</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">measurable.ennreal_of_real</span> <span class=\"n\">hYmes</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">hA</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">hB</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">set.preimage_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">X</span> <span class=\"n\">ennreal.of_real</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">set.preimage_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Y</span> <span class=\"n\">ennreal.of_real</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hXYind</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">measurable_set_preimage</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">real.measurable_space</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable.of_comap_le</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_set_preimage</span> <span class=\"n\">ennreal.measurable_of_real</span> <span class=\"n\">hA</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">measurable_set_preimage</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">real.measurable_space</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable.of_comap_le</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_set_preimage</span> <span class=\"n\">ennreal.measurable_of_real</span> <span class=\"n\">hB</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">filter.eventually_of_forall</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hYpos</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hYmes.ae_measurable</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">filter.eventually_of_forall</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hXpos</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hXmes.ae_measurable</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">filter.eventually_of_forall</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">mul_nonneg</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hXpos</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hYpos</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable.ae_measurable</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">measurable.mul</span> <span class=\"n\">hXmes</span> <span class=\"n\">hYmes</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276637518,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1648222906
    },
    {
        "content": "<p>OK so I finally proved <code>E[X*Y] = E[X] * E[Y]</code> by adding some plumbing around the <code>lintegral</code> version, the code is here <a href=\"https://github.com/vbeffara/lean/blob/main/src/probability/indep.lean\">https://github.com/vbeffara/lean/blob/main/src/probability/indep.lean</a> </p>\n<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> I agree that the right way would be to have an induction on functions that are measurable wrt a sub-sigma-algebra, as that will be of more general use, but I needed to scratch that itch :-)</p>",
        "id": 277111772,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1648629875
    },
    {
        "content": "<p>That code looks good. You should PR it and add that result to the <code>probability.integration</code> file. If you do, could you generalize your statements to any measure, not only <code>volume</code>? It should change almost nothing to the proofs.</p>",
        "id": 277112970,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1648630498
    },
    {
        "content": "<p>Yes, I will see about that. But first I would also like to slightly generalize <code>lintegral_mul_eq_lintegral_mul_lintegral_of_independent_measurable_space</code> to work on <code>ae_measurable</code> functions to be able to drop the <code>measurable X</code> assumption (<code>integrable X</code> should be enough).</p>",
        "id": 277113340,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1648630691
    },
    {
        "content": "<p>I am not sure you have the right statement yet. Instead, it should probably be : if <code>X</code> is a real-valued random variable, <code>Y</code> is vector-valued, and both are integrable and independent, then <code>X • Y</code> is integrable and <code>E (X • Y) = E X • E Y</code>. Or, even better: if <code>B</code> is bilinear continuous and <code>X</code> and <code>Y</code> are independent, then <code>E (B X Y) = B (E X) (E Y)</code>(is that even true? :-)</p>",
        "id": 277114907,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1648631434
    },
    {
        "content": "<p>What I want is something like <code>X</code> and <code>Y</code> are independent (with values in arbitrary types) iff for every <code>f</code> and <code>g</code> with values in the reals, <code>E[(f o X) * (g o Y)] = E[f o X] * E[g o Y]</code>, from which I believed all the others would follow as needed (but I did not think so much about that). I'm not sure I want to break the symmetry with <code>smul</code>, and I'm not sure either that I want to learn how to use bilinear maps in lean (yet) ;-)</p>",
        "id": 277118234,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1648633204
    },
    {
        "content": "<p>But certainly the current version is not at the right level of generality!</p>",
        "id": 277118295,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1648633250
    }
]