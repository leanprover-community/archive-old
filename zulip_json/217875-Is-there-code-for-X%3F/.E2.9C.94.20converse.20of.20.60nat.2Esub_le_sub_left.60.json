[
    {
        "content": "<p>While we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.sub_le_sub_left\">docs#nat.sub_le_sub_left</a>, I seem unable to find the converse</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.le_of_sub_le_sub_left</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>Is it really not in mathlib?</p>",
        "id": 298275587,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662918674
    },
    {
        "content": "<p>OK, <code>library_search</code> came up with <code>(tsub_le_tsub_iff_left hn).mp h</code>. I had expected something in the <code>nat</code> namespace...</p>",
        "id": 298275721,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662918788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as resolved.</p>",
        "id": 298275724,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662918791
    },
    {
        "content": "<p>I guess \"truncated subtraction\" also works for things like the non-negative reals, maybe that's the logic?</p>",
        "id": 298276030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662919050
    },
    {
        "content": "<p>Also, on <a href=\"https://github.com/leanprover-community/mathlib/tree/adomani_remove_subs_at\">branch#adomani_remove_subs_at</a>, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.remove_subs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">remove_subs</span><span class=\"bp\">!</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 298276047,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662919066
    },
    {
        "content": "<p>Probably, the tactic could be called <code>remove_tsubs</code>.  Or, even better, <code>RemoveTSubs</code>!</p>",
        "id": 298276195,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662919173
    },
    {
        "content": "<p>does it work for <code>tsub</code> in general or just for specifically nat's tsub?</p>",
        "id": 298276374,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662919308
    },
    {
        "content": "<p>I implemented it to specifically check that the terms have type <code>nat</code>, but this could easily be removed.  All that you need is a lemma that states that <code>a - b</code> is <code>0</code> if <code>a \\le b</code> or an <code>exists_add_of_le</code> otherwise.</p>",
        "id": 298276518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662919382
    },
    {
        "content": "<p>Once the case split is done, the tactic calls linarith to deal with the pieces, so there is not much more to do there.</p>",
        "id": 298276551,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662919408
    },
    {
        "content": "<p>With very little modifications, I think that the tactic could work for a linear, canonically ordered something.</p>",
        "id": 298276719,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662919528
    },
    {
        "content": "<p>(Though, to be honest, I do not know if there is much interest in a new Lean3 tactic, so close to the Lean4 transition.)</p>",
        "id": 298276829,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662919583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20converse.20of.20.60nat.2Esub_le_sub_left.60/near/298276829\">said</a>:</p>\n<blockquote>\n<p>(Though, to be honest, I do not know if there is much interest in a new Lean3 tactic, so close to the Lean4 transition.)</p>\n</blockquote>\n<p>words said since 2019 :(</p>",
        "id": 298276851,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662919604
    },
    {
        "content": "<p>Well, the tactic for nat is already PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16443\">#16443</a>.  Feel free to show support for it!  I'd be more than happy to clean it up, if it is desired!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 298276975,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662919687
    }
]