[
    {
        "content": "<p>I can't find this: can anyone see a golfing strategy?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">order_iso.map_supr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">le_supr_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">order_iso.le_symm_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">supr_le</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">order_iso.le_symm_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">order_iso.symm_apply_le</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_supr_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">order_iso.symm_apply_le</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">supr_le</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">order_iso.le_iff_le</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">order_iso.map_infi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">order_iso.map_supr</span> <span class=\"n\">f.dual</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 262585135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637759032
    },
    {
        "content": "<p>aha, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.le_map_supr\">docs#monotone.le_map_supr</a> helps</p>",
        "id": 262586399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637759663
    },
    {
        "content": "<p>Note issue <a href=\"https://github.com/leanprover-community/mathlib/issues/408\">#408</a></p>",
        "id": 262586766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637759883
    },
    {
        "content": "<p>I don't see the connection all that well here</p>",
        "id": 262587244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637760141
    },
    {
        "content": "<p>PR'd a shorter version of the above as <a href=\"https://github.com/leanprover-community/mathlib/issues/10451\">#10451</a></p>",
        "id": 262587389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637760226
    },
    {
        "content": "<p>I guess maybe I'm conflating two similar but different things. Both are of the form \"if things are isomorphic then they're the same to mathematicians\" and it's a shame that there's not some general machine which will write such proofs</p>",
        "id": 262588148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637760612
    },
    {
        "content": "<p>I don't see how a general machine could write the proof I needed</p>",
        "id": 262588843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637761002
    },
    {
        "content": "<p>there's another ingredient involved here, namely, the sup is determined by <code>&lt;=</code> (by Yoneda) even though Lean calls it extra data</p>",
        "id": 262588916,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637761043
    },
    {
        "content": "<p>I can see a general machine <em>using</em> <code>order_iso.map_supr</code></p>",
        "id": 262588936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637761055
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">order_iso.map_supr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">function.surjective.forall</span> <span class=\"n\">f.surjective</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262589502,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637761356
    },
    {
        "content": "<p>The principle I want to invoke is that if A and B are isomorphic structures via f then all constructions in A which only use the structure are mirrored in B via f</p>",
        "id": 262589560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637761391
    },
    {
        "content": "<p>(btw it seems like a bug that the parentheses are needed in <code>(⨆ i, f (x i)) ≤ y</code>)</p>",
        "id": 262589714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637761451
    },
    {
        "content": "<p>They'd be needed with ∀, right?</p>",
        "id": 262589772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637761486
    },
    {
        "content": "<p>Yes, but surely with <code>⨆</code> the purpose is exactly to compare it using <code>&lt;=</code></p>",
        "id": 262589844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637761521
    },
    {
        "content": "<p>Do you prefer that proof to this one in the PR?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">order_iso.map_supr</span>  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">f.monotone.le_map_supr</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">order_iso.le_symm_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">f.symm.monotone.le_map_supr</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">f.symm_apply_apply</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262590084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637761623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/order_iso.2Emap_supr/near/262589714\">said</a>:</p>\n<blockquote>\n<p>(btw it seems like a bug that the parentheses are needed in <code>(⨆ i, f (x i)) ≤ y</code>)</p>\n</blockquote>\n<p>This has been complained about repeatedly, no one has bothered to fix it</p>",
        "id": 262590151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637761665
    },
    {
        "content": "<p>There should be a <code>galois_connection</code> version of this lemma.</p>",
        "id": 262594858,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637763841
    },
    {
        "content": "<p>Kevin's Principle strikes again!</p>",
        "id": 262595390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637763998
    },
    {
        "content": "<p>Right, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.l_supr\">docs#galois_connection.l_supr</a></p>",
        "id": 262595605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637764106
    },
    {
        "content": "<p>Although I can't prove the lemma as early if I prove it using that</p>",
        "id": 262595707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637764162
    },
    {
        "content": "<p>You can also use something like <code>eq_of_forall_ge_iff $ λ b, by simp only [supr_le, f.surjective.forall]</code> (untested)</p>",
        "id": 262604842,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637768659
    },
    {
        "content": "<p>I think PR comments on <a href=\"https://github.com/leanprover-community/mathlib/issues/10451\">#10451</a> are probably the place for golfing suggestions</p>",
        "id": 262604888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637768696
    }
]