[
    {
        "content": "<p>I'm sure this is in mathlib, but I can't find it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 217813101,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606251809
    },
    {
        "content": "<p>Oh, maybe the correct answer is <code>by tidy</code>.</p>",
        "id": 217813161,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606251841
    },
    {
        "content": "<p>There is <code>set.is_compl_range_inl_range_inr</code> that is essentially what you want.</p>",
        "id": 217815400,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606253026
    },
    {
        "content": "<p>Yeah, but proving the example with this takes more characters than <code>by tidy</code>.</p>",
        "id": 217815574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606253124
    },
    {
        "content": "<p>Sure! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 217815750,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606253225
    },
    {
        "content": "<p>Presumably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.is_compl_range_inl_range_inr\">docs#set.is_compl_range_inl_range_inr</a> is a slightly stronger statement</p>",
        "id": 217817453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606254203
    },
    {
        "content": "<p>Although I suppose <code>.inf_eq_bot</code> gives bot when you want empty</p>",
        "id": 217817583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606254274
    },
    {
        "content": "<p>What about this simple thing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">∩</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>  <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 217818290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606254609
    },
    {
        "content": "<p>Unfortunately, <code>tidy</code> doesn't solve this one :(</p>",
        "id": 217818341,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606254637
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">∩</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">hst</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.image_inter</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hst</span><span class=\"o\">,</span> <span class=\"n\">set.image_empty</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217820432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606255743
    },
    {
        "content": "<p>Thanks! Didn't know about set.image_inter</p>",
        "id": 217821899,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606256671
    },
    {
        "content": "<p>Should it be called image_inter_image?</p>",
        "id": 217821922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606256689
    },
    {
        "content": "<p>I'm guessing what the result is but maybe image_inter_distrib would also be a valid name. But I think the idea is that image_inter might be saying something about the image of an intersection, and there's precisely one obvious thing you can say about it. EDIT -- actually maybe there are two...</p>",
        "id": 217822468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606257017
    },
    {
        "content": "<p>Oh now I have to go and find lean to check</p>",
        "id": 217822548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606257083
    },
    {
        "content": "<p>I was claiming that image_inter could only mean one thing but it could also mean an inclusion for a non injective function</p>",
        "id": 217822702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606257198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> This is splitting hairs, but IMO <code>image_inter</code> would make more sense with the following type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">image_inter</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 217822938,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606257355
    },
    {
        "content": "<p>I agree! I realised I had to stop guessing what the function was and actually go and look :-)</p>",
        "id": 217823022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606257394
    },
    {
        "content": "<p>For others who are also reading whilst washing up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set.image_inter</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n    <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 217823075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606257429
    },
    {
        "content": "<p>Yes, maybe the lemma should be called <code>image_inter_image</code> after all.</p>",
        "id": 217823246,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606257543
    },
    {
        "content": "<p>Or have its equality reversed</p>",
        "id": 217825074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606258742
    }
]