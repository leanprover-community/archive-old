[
    {
        "content": "<p>Do we have  this definition somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smul_lmap</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_const_hom\">docs#smul_const_hom</a> (aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action.to_add_monoid_hom\">docs#distrib_mul_action.to_add_monoid_hom</a>) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_add_hom\">docs#smul_add_hom</a> don't quite have as much structure as I want.</p>",
        "id": 243617119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624434503
    },
    {
        "content": "<p>Wow, <code>library_search</code> found it, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_span_singleton\">docs#linear_map.to_span_singleton</a></p>",
        "id": 243617203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624434588
    },
    {
        "content": "<p>It's great when that works! The only caveat is that sometimes it finds eg the zero map :-)</p>",
        "id": 243619271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624435883
    },
    {
        "content": "<p>That's what I expected it to find here</p>",
        "id": 243620979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624436939
    },
    {
        "content": "<p>Sometimes <code>suggest</code> helps in these cases.</p>",
        "id": 243623274,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624438394
    }
]