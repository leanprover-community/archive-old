[
    {
        "content": "<p>I'd like to reason about bounded functions G -&gt; ℝ, where G is a group. Equivalently, theses are bounded continuous functions G -&gt; ℝ if we equip G with the discrete topology. </p>\n<p>So far, I tried the following: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.bounded</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.category.Top</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">bounded_continuous_function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">discrete_topology</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function</span> <span class=\"n\">G</span> <span class=\"n\">ℝ</span>\n        <span class=\"o\">:=</span> <span class=\"n\">bounded_continuous_function.const</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In the line <code>instance : topological_space G := ⊥</code>, I get the message \"invalid definition, a declaration named 'topological_space' has already been declared\", however, if I remove it, the compiler fails to synthesize the type class instance for <code>topological space G</code>.</p>\n<p>How can I equip the group G with the discrete topology?</p>",
        "id": 277256751,
        "sender_full_name": "Matthias U",
        "timestamp": 1648720300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409809\">@Matthias U</span> You need to give it a name explicitly, e.g. <code>instance foobar : topo...</code></p>",
        "id": 277256892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648720380
    },
    {
        "content": "<p>However, when you try to apply these results, it might be better to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_topology</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 277257035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648720476
    },
    {
        "content": "<p>That way you assume that <code>G</code> has a discrete topology, without requiring it to be <code>\\bot</code> by definition. (It will of course still be equal to <code>\\bot</code> by assumption.</p>",
        "id": 277257080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648720514
    },
    {
        "content": "<p>that works, thanks .</p>",
        "id": 277257290,
        "sender_full_name": "Matthias U",
        "timestamp": 1648720629
    },
    {
        "content": "<p>In addition, those instances essentially \"for all groups <code>G</code>, <code>G</code> has a canonical topology, namely the discrete one\", while putting it in a variable means \"let <code>G</code> be a group and assume it has the discrete topology\"</p>",
        "id": 277257295,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648720631
    },
    {
        "content": "<p>So the instances will prevent you from working with other topological groups</p>",
        "id": 277257368,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648720681
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/blob/master/counterexamples/phillips.lean\">https://github.com/leanprover-community/mathlib/blob/master/counterexamples/phillips.lean</a>, I need to put the discrete topology on the real line. Here I use a type synonym <code>discrete_copy</code>. If it is useful for you, this could be moved to the <code>src</code> directory.</p>",
        "id": 277257467,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1648720735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>   ok, I see</p>",
        "id": 277257934,
        "sender_full_name": "Matthias U",
        "timestamp": 1648720957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> thanks</p>",
        "id": 277258122,
        "sender_full_name": "Matthias U",
        "timestamp": 1648721059
    }
]