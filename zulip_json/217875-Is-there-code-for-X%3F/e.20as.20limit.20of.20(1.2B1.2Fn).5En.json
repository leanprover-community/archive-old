[
    {
        "content": "<p>Does mathlib have a statement like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243102846,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1623975994
    },
    {
        "content": "<p>I don't know the answer, but it would be nice to have the more general form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>exp</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mrow><mi>lim</mi><mo>‚Å°</mo></mrow><mi>x</mi></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>t</mi><mi mathvariant=\"normal\">/</mi><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mi>x</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\exp(t) = \\lim_x (1+t/x)^x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 243102975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623976086
    },
    {
        "content": "<p>Good point - I've amended the original post</p>",
        "id": 243103208,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1623976259
    },
    {
        "content": "<p>I haven't done an extensive check but I would be surprised if those existed, since I've spent quite a lot of times using files where it could have been and have never seen it</p>",
        "id": 243104128,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1623976946
    },
    {
        "content": "<p>I've got a roughly 50 line proof but I'm sure someone else will find a much nicer one!</p>",
        "id": 243111778,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1623985659
    },
    {
        "content": "<p>Something similar is proved here: <a href=\"https://github.com/leanprover-community/mathlib/blob/700c4cb6f6d85b589d76f7e88fa9e26c74689149/src/data/equiv/derangements/exponential.lean\">https://github.com/leanprover-community/mathlib/blob/700c4cb6f6d85b589d76f7e88fa9e26c74689149/src/data/equiv/derangements/exponential.lean</a> (this is part of the derangements PR, fwiw)</p>\n<p>The issue is that <code>exp</code> is defined using <code>cau_seq</code>, so it needs converting</p>",
        "id": 243132750,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624006145
    },
    {
        "content": "<p>You shouldn't need to inspect the definition of <code>exp</code> here. <code>real.pow</code> is defined using <code>exp</code>, so you only need something like the derivative of log at 1</p>",
        "id": 243165163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624025167
    },
    {
        "content": "<p>Yes, we have everything we need on the exponential now, so its definition through <code>cau_seq</code> should never ever be used anymore.</p>",
        "id": 243166319,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1624025662
    },
    {
        "content": "<p>Yup, Mario's suggestion is almost exactly what I did:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one_plus_div_pow_tendsto_exp</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">real.exp_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_div</span><span class=\"o\">,</span> <span class=\"n\">real.one_rpow</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">((</span><span class=\"n\">real.continuous_exp.tendsto</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">congr'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">eventually_at_top.2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_one.trans_le</span> <span class=\"o\">((</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">‚Äπ</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">‚Ä∫</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_div'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">‚Äπ</span><span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">‚Ä∫,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">div_pos</span> <span class=\"n\">_</span> <span class=\"o\">‚Äπ</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">‚Ä∫,</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hx</span><span class=\"o\">]},</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">real.log_rpow</span> <span class=\"o\">‚Äπ</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">‚Ä∫,</span> <span class=\"n\">real.exp_log</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">real.rpow_pos_of_pos</span> <span class=\"o\">‚Äπ</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">‚Ä∫},</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">tendsto_inv_at_top_zero'.mono_right</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">congr'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">eventually_at_top.2</span> <span class=\"o\">‚ü®</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">inv_inv'</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">inf_le_inf_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">principal_mono</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">tendsto.inf</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">continuous_mul_left</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">not_or_distrib</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">replace</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto.mul_const</span> <span class=\"n\">t</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">mul_div_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ht</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">sub_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h.congr'</span> <span class=\"o\">(</span><span class=\"n\">eventually_inf_principal.2</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">eventually_nhds_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">set.univ</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">div_self</span> <span class=\"n\">hx</span><span class=\"o\">],</span> <span class=\"n\">is_open_univ</span><span class=\"o\">,</span> <span class=\"o\">‚ü®‚ü©‚ü©</span> <span class=\"o\">},</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this.add_const</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">asymptotics.is_o.tendsto_0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">real.has_deriv_at_log</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_deriv_at_iff_is_o_nhds_zero</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">real.log_one</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">this.mono</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 243199549,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624044336
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/8243\">#8243</a></p>",
        "id": 245474003,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625852465
    },
    {
        "content": "<p>\"The Fact\"</p>",
        "id": 245478182,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1625854394
    }
]