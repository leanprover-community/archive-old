[
    {
        "content": "<p>Did I miss a generalization? Is there a slick proof of that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.sup_attach</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.attach.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_forall_ge_iff</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sup_le_iff</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_le_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">s.mem_attach</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">b.1</span> <span class=\"n\">b.2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257616347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634250695
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.sup_attach</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.attach.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">finset.induction_on</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"n\">hx</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sup_image</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.sup_image</span><span class=\"o\">,</span> <span class=\"n\">finset.attach_insert</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_insert</span><span class=\"o\">,</span>\n             <span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257617810,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634251464
    },
    {
        "content": "<p>Oh sorry missed that you edited it</p>",
        "id": 257617848,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634251488
    },
    {
        "content": "<p>Shorter <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 257617856,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634251492
    },
    {
        "content": "<p>but I expect there's something more general about this \"let's drop the proof\" kind of thing.</p>",
        "id": 257617925,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634251530
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sup_map\">docs#finset.sup_map</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sup_image\">docs#finset.sup_image</a>?</p>",
        "id": 257663801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634286905
    },
    {
        "content": "<p>Yes; you can use that to pull the coercion out of the <code>sup</code>, and then you just need something like <code>s.attach.map coe = s</code></p>",
        "id": 257664006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634287009
    }
]