[
    {
        "content": "<p>Does the following exist in mathlib? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.intervals</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_range_add_sum_Ico</span> <span class=\"n\">f</span> <span class=\"n\">n.le_succ</span><span class=\"o\">,</span> <span class=\"n\">Ico.succ_singleton</span><span class=\"o\">,</span> <span class=\"n\">sum_singleton</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I know it follows easily from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_add_sum_Ico\">docs#finset.sum_range_add_sum_Ico</a>, but I was surprised to not find it explicitly.</p>",
        "id": 229616797,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615363162
    },
    {
        "content": "<p>Isn't it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_succ\">docs#finset.sum_range_succ</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_succ'\">docs#finset.sum_range_succ'</a> ?</p>",
        "id": 229617047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615363235
    },
    {
        "content": "<p>One pulls off the first term, one the last term</p>",
        "id": 229617264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615363295
    },
    {
        "content": "<p>Thank you! I don't know why I couldn't find this.</p>",
        "id": 229618223,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615363868
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_succ\">docs#finset.sum_range_succ</a> has <code>f n + (∑ x in range n, f x)</code> as its RHS. Would it be worthwhile to add a version with an RHS of <code>(∑ x in range n, f x) + f n</code>? I think that would make it easier to find.</p>",
        "id": 229619101,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615364312
    },
    {
        "content": "<p>That is strange. Maybe even experiment with just switching the order on the RHS in that lemma?</p>",
        "id": 229634503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615372286
    },
    {
        "content": "<p>Sure, I'll give that a go.</p>",
        "id": 229794884,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615439187
    },
    {
        "content": "<p>Upon taking a closer look, why do both of the following lemmas exist? Is the additive version of the latter not the same as the former?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_range_succ</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">range_succ</span><span class=\"o\">,</span> <span class=\"n\">sum_insert</span> <span class=\"n\">not_mem_range_self</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_range_succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">range_succ</span><span class=\"o\">,</span> <span class=\"n\">prod_insert</span> <span class=\"n\">not_mem_range_self</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(from lines 651-658 of <code>algebra.big_operators.basic</code>)</p>",
        "id": 229797041,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615440672
    },
    {
        "content": "<p><code>to_additive</code> is not generating a lemma there, it's just linking together the lemmas</p>",
        "id": 229816162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615453344
    },
    {
        "content": "<p>May I ask what the point of that is?</p>",
        "id": 229816925,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615453740
    },
    {
        "content": "<p>So that to_additive can still be used to generate copies of lemmas that use that lemma</p>",
        "id": 229820292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615455472
    },
    {
        "content": "<p>Ah I see. Thanks!</p>",
        "id": 229983184,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615530438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Should I then also try to make the same commutative change to the <code>prod</code> lemma?</p>",
        "id": 229983247,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615530487
    },
    {
        "content": "<p>I don't get it. Why is to_additive not being used to prove the second lemma? Is it one of those weird cases where it doesn't work for some reason?</p>",
        "id": 229984586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615531578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Exactly, that's why I did a double-take! Strangely, though, if you remove the first (<code>sum</code>) lemma, the second (<code>prod</code>) lemma breaks, and I'm not sure why.</p>",
        "id": 229984795,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615531785
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/6676\">#6676</a></p>",
        "id": 230253263,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1615740131
    }
]