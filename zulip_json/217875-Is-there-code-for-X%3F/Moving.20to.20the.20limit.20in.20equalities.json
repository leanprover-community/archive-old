[
    {
        "content": "<p>Hello there,<br>\nI'm looking for general techniques in mathlib for things such as:</p>\n<p>Let be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo separator=\"true\">,</mo><mi>g</mi><mo>:</mo><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">f, g: \\mathbb{R} \\to \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{+\\infty} g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><mi>f</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\lim_{+\\infty} f/(1 - g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> exist.<br>\nI would like to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{+\\infty} f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> exist (and its value is what should be expected).</p>\n<p>I can see theorems to prove composition of limits (<code>filter.tendsto.comp</code>), but it seems like I would need something to inverse the second limit hypothesis.<br>\nI am also trying to avoid as much as possible epsilon-delta definitions to maximally reuse filter theory, but these theorems looks very epsilon-delta IMHO.</p>\n<p>Precisely, I am looking for proofs of things like that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_aux1</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">g</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)):</span>\n  <span class=\"n\">filter.tendsto</span> <span class=\"n\">f</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 249745769,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629218704
    },
    {
        "content": "<p>This lemma is false.</p>",
        "id": 249748219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629219837
    },
    {
        "content": "<p>So you need to switch to another proof assistant to prove it (I hear that Agda should work nicely here).</p>",
        "id": 249748333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629219867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Moving.20to.20the.20limit.20in.20equalities/near/249748219\">said</a>:</p>\n<blockquote>\n<p>This lemma is false.</p>\n</blockquote>\n<p>I was pretty sure I was going to write something false :&gt;</p>",
        "id": 249748409,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629219901
    },
    {
        "content": "<p>How easy is the proof that it's false? Is it within the grasp of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.slim_check\">docs#tactic.interactive.slim_check</a>?</p>",
        "id": 249748465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629219932
    },
    {
        "content": "<p>I don't think slim_check would be a natural fit here.</p>",
        "id": 249748551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629219969
    },
    {
        "content": "<p>It could easily instantiate the lemma with data that makes it wrong, but I fear we couldn't check the conclusion.</p>",
        "id": 249748613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629220015
    },
    {
        "content": "<p>So assuming <code>l</code> is not a <code>filter \\R</code> but some nhds of a finite value, I believe (quick proof sketching seems to confirm) it is true.</p>",
        "id": 249748822,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629220098
    },
    {
        "content": "<p>Is the lemma really false? Note that it doesn't say the same thing as the math summary beforehand (even ignoring the issue which I think you're referring to).</p>",
        "id": 249748845,
        "sender_full_name": "Reid Barton",
        "timestamp": 1629220112
    },
    {
        "content": "<p>oh I didn't notice <code>l</code> was an arbitrary filter</p>",
        "id": 249748891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1629220133
    },
    {
        "content": "<p>Maybe, a good start would be also something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendsto_aux2</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span><span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">g</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)):</span>\n  <span class=\"n\">filter.tendsto</span> <span class=\"n\">f</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 249749375,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629220429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Moving.20to.20the.20limit.20in.20equalities/near/249748822\">said</a>:</p>\n<blockquote>\n<p>So assuming <code>l</code> is not a <code>filter \\R</code> but some nhds of a finite value, I believe (quick proof sketching seems to confirm) it is true.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_aux1</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span>  <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">l</span><span class=\"o\">)):</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">lim₁</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_zero</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds.sub</span> <span class=\"n\">hg</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">compl_singleton_mem_nhds</span> <span class=\"n\">zero_ne_one.symm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"n\">lim₁</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this.mono</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">hx</span>  <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">tendsto_congr'</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">lim₁.mul</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249752107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629221663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Moving.20to.20the.20limit.20in.20equalities/near/249752107\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Moving.20to.20the.20limit.20in.20equalities/near/249748822\">said</a>:</p>\n<blockquote>\n<p>So assuming <code>l</code> is not a <code>filter \\R</code> but some nhds of a finite value, I believe (quick proof sketching seems to confirm) it is true.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_aux1</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span>  <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">l</span><span class=\"o\">)):</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">lim₁</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_zero</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds.sub</span> <span class=\"n\">hg</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">compl_singleton_mem_nhds</span> <span class=\"n\">zero_ne_one.symm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"n\">lim₁</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this.mono</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">hx</span>  <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">tendsto_congr'</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">lim₁.mul</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>That's way more better than what I could come up with :), thanks!</p>\n</blockquote>",
        "id": 249752647,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629221934
    },
    {
        "content": "<p>Note that your second example is <em>much</em> easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendsto_aux2</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span><span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">g</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)):</span>\n  <span class=\"n\">filter.tendsto</span> <span class=\"n\">f</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">hfg.add</span> <span class=\"n\">hg</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 249753483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629222416
    },
    {
        "content": "<p>ha</p>",
        "id": 249753559,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629222457
    },
    {
        "content": "<p>My version was :')</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendsto_aux2</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span><span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">g</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)):</span>\n  <span class=\"n\">filter.tendsto</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric.tendsto_nhds</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hg</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hε</span><span class=\"o\">]),</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hfg</span> <span class=\"o\">:=</span> <span class=\"n\">hfg</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hε</span><span class=\"o\">]),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.eventually_iff_exists_mem</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hg</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">hs₁</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hfg</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">hs₂</span><span class=\"o\">,</span> <span class=\"n\">hfg</span> <span class=\"o\">⟩,</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s₁</span><span class=\"bp\">∩</span><span class=\"n\">s₂</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">filter.inter_mem_sets</span> <span class=\"n\">hs₁</span> <span class=\"n\">hs₂</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hg</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span> <span class=\"n\">_</span> <span class=\"n\">hy.1</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hfg</span> <span class=\"o\">:=</span> <span class=\"n\">hfg</span> <span class=\"n\">_</span> <span class=\"n\">hy.2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist_zero_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">+</span> <span class=\"bp\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">∥</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks again!</p>",
        "id": 249753597,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629222476
    },
    {
        "content": "<p>Is there a name suggestion for <code>aux1</code>, e.g. <code>tendsto_of_tendsto_div_sub</code>?</p>",
        "id": 249754703,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629222996
    },
    {
        "content": "<p>This seems a lot too specialized to have a name.</p>",
        "id": 249756969,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629224044
    },
    {
        "content": "<p>I also returned to your original question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">ryan</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span>  <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>  <span class=\"bp\">𝓟</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">/</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">/</span><span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">div_self</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">x</span><span class=\"o\">],</span>\n      <span class=\"n\">linarith</span>  <span class=\"o\">[</span><span class=\"n\">one_div_pos.mpr</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n    <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">tendsto_const_nhds.add</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">one_div</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_inv_at_top_zero.comp</span> <span class=\"o\">(</span><span class=\"n\">tendsto_const_nhds.add_at_top</span> <span class=\"bp\">$</span> <span class=\"n\">tendsto_pow_at_top</span> <span class=\"n\">one_le_two</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ryan</span> <span class=\"n\">hg</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hx</span> <span class=\"n\">x</span> <span class=\"n\">le_rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249757013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629224061
    },
    {
        "content": "<p>Explicit computation of limits are really painful, I'll go back to the adic topology.</p>",
        "id": 249757074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629224093
    }
]