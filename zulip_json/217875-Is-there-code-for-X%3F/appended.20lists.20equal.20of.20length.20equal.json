[
    {
        "content": "<p>Does this exist? I want this and the other case too, when the lengths all of them are equal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.eq_of_eq_append_left</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">l3</span> <span class=\"n\">l4</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"n\">l1.length</span> <span class=\"bp\">=</span> <span class=\"n\">l2.length</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">l1.append</span> <span class=\"n\">l3</span> <span class=\"bp\">=</span> <span class=\"n\">l2.append</span> <span class=\"n\">l4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l1</span> <span class=\"bp\">=</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 278033816,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1649256242
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.append_right_cancel\">docs#list.append_right_cancel</a> should help.</p>",
        "id": 278034066,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649256347
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.append_inj\">docs#list.append_inj</a>?</p>",
        "id": 278034083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649256351
    },
    {
        "content": "<p>Wow, naming convention really pulled through there</p>",
        "id": 278034242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649256408
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.append_inj_left\">docs#list.append_inj_left</a> is precisely your statement, but the one I mention above might be what you actually want</p>",
        "id": 278034364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649256461
    },
    {
        "content": "<p>ah perfect, thanks yall</p>",
        "id": 278034830,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1649256622
    },
    {
        "content": "<p>Out of curiosity; would <code>library_search</code> have found this?</p>",
        "id": 278034961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649256669
    },
    {
        "content": "<p>library_search timed out on what I wrote</p>",
        "id": 278035823,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1649256976
    },
    {
        "content": "<p>With what imports?</p>",
        "id": 278035961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649257039
    },
    {
        "content": "<p>Library search is faster (but less successful) the fewer imports you have</p>",
        "id": 278036001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649257060
    },
    {
        "content": "<p>ah makes sense, yeah I have tons of imports and my computer is slowing down even without library search</p>",
        "id": 278037009,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1649257362
    }
]