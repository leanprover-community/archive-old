[
    {
        "content": "<p>I'd like to map injectively a fintype to another fintype, knowing that the cardinal of the former is smaller than the cardinal of the latter. Is there a function doing this somewhere?</p>",
        "id": 254493754,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632382604
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_le_of_embedding\">docs#fintype.card_le_of_embedding</a> which goes in the other direction...</p>",
        "id": 254494096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632382791
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a> together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cast_le\">docs#fin.cast_le</a>, but maybe there is something more direct.</p>",
        "id": 254494165,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632382810
    },
    {
        "content": "<p>Thanks for the pointers. I'll go with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fin.exists_injective_of_le_card_fintype</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.injective.comp</span> <span class=\"o\">(</span><span class=\"n\">fin.cast_le</span> <span class=\"n\">hk</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fin.exists_injective_of_le_card_finset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">fintype.card_coe</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">fin.exists_injective_of_le_card_fintype</span> <span class=\"n\">hk</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"n\">function.injective.comp</span> <span class=\"n\">subtype.coe_injective</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">range_subset_iff</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254497161,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632384334
    },
    {
        "content": "<p>This seems like it should be near <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.is_empty_of_card_lt\">docs#function.embedding.is_empty_of_card_lt</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.embedding.nonempty_of_card_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">fa</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fb</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.to_embedding</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">fa.trans</span> <span class=\"o\">((</span><span class=\"n\">fin.cast_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding.trans</span> <span class=\"n\">fb</span><span class=\"o\">)⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254497626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632384590
    },
    {
        "content": "<p>Then, for example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">the_function</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">function.embedding.nonempty_of_card_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">the_function_prop</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">the_function</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">function.embedding.nonempty_of_card_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some.injective</span>\n</code></pre></div>",
        "id": 254498032,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632384801
    },
    {
        "content": "<p>It should be possible to get <code>trunc</code> version that's computable, right?</p>",
        "id": 254499277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632385463
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.trunc_equiv_fin\">docs#fintype.trunc_equiv_fin</a></p>",
        "id": 254499531,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632385572
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.embedding.trunc_of_card_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fintype.trunc_equiv_fin</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">fintype.trunc_equiv_fin</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">eb</span><span class=\"o\">,</span>\n    <span class=\"n\">ea.to_embedding.trans</span> <span class=\"o\">((</span><span class=\"n\">fin.cast_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding.trans</span> <span class=\"n\">eb.symm.to_embedding</span>\n</code></pre></div>",
        "id": 254499864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632385743
    },
    {
        "content": "<p>Then use that to prove the <code>nonempty</code> lemma and provide the noncomputable def</p>",
        "id": 254499899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632385757
    },
    {
        "content": "<p>Unfortunate <code>do</code> notation doesn't work there as <code>α</code> and <code>β</code> are in different universes</p>",
        "id": 254502620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632387250
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9346\">#9346</a>. Thanks to all!</p>",
        "id": 254524968,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632399641
    }
]