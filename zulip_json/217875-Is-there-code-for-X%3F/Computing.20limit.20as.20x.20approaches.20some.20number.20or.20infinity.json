[
    {
        "content": "<p>Is there a way to compute the limit of some function as x approaches 2, or x approaches negative infinity?</p>",
        "id": 214510354,
        "sender_full_name": "Formally Verified Waffle Maker",
        "timestamp": 1603657709
    },
    {
        "content": "<p>What do you mean by \"compute\" exactly? Regardless, the answer is probably not in Lean, since the reals in mathlib are <code>noncomputable</code>.</p>",
        "id": 214510549,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603657958
    },
    {
        "content": "<p>mathlib does contain proofs of several specific limit computations in <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/specific_limits.html\">analysis.specific_limits</a>.</p>",
        "id": 214510631,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603658045
    },
    {
        "content": "<p>You might be able to <em>prove</em> that a certain number is a limit, but Lean is not really for computing, it's for proving.</p>",
        "id": 214510669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603658111
    },
    {
        "content": "<p>That's unfortunate, since it would be nice if Lean could help mathematicians by having the ability to compute certain expressions, like a CAS.</p>",
        "id": 214510780,
        "sender_full_name": "Formally Verified Waffle Maker",
        "timestamp": 1603658261
    },
    {
        "content": "<p>Well, it again depends on what you mean by \"compute\", because there are several tactics that get within striking distance of computing limits like a CAS</p>",
        "id": 214510783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603658268
    },
    {
        "content": "<p>By compute I mean calculating <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></munder><mn>2</mn><mi>x</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle\\lim_{x\\to\\infty} 2x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.39444em;vertical-align:-0.7em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span></span></span></span> for instance to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>.</p>",
        "id": 214510854,
        "sender_full_name": "Formally Verified Waffle Maker",
        "timestamp": 1603658327
    },
    {
        "content": "<p>that's certainly doable with some elbow grease</p>",
        "id": 214510880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603658361
    },
    {
        "content": "<p>not sure how far simp lemmas will take you to get that exact result</p>",
        "id": 214510891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603658378
    },
    {
        "content": "<p>we have lemmas for computing derivatives but I don't know about limits, unless the function is continuous and we can just evaluate it</p>",
        "id": 214510958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603658430
    },
    {
        "content": "<p>It's <em>provable</em> using e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_at_top_mono\">docs#filter.tendsto_at_top_mono</a>, but there isn't currently a way to just throw the equivalent of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></munder><mn>2</mn><mi>x</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle\\lim_{x\\to\\infty} 2x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.39444em;vertical-align:-0.7em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span></span></span></span> into Lean and get ∞ out.</p>",
        "id": 214510986,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603658494
    },
    {
        "content": "<p>Let's be clear: what Bryan says is clearly a defect that will have to be fixed at some point, but this require work. It's not something that is meant to stay like this forever.</p>",
        "id": 214511057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603658559
    },
    {
        "content": "<p>One reasonable general approach here would be to calculate the big O expansion of the function automatically</p>",
        "id": 214511109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603658635
    },
    {
        "content": "<p>As far as I know, the current state of the art is still <a href=\"https://www21.in.tum.de/~eberlm/pubs/real_asymp.html\">https://www21.in.tum.de/~eberlm/pubs/real_asymp.html</a></p>",
        "id": 214511202,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603658741
    },
    {
        "content": "<p>It's not in Lean but in another proof assistant called Isabelle. One day we'll have it, but this is non-trivial work.</p>",
        "id": 214511254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603658767
    },
    {
        "content": "<p>Another way of gluing together the existing lemmas in the library to get this: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_at_top_mul_left\">docs#tendsto_at_top_mul_left</a> plus <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_id\">docs#filter.tendsto_id</a></p>",
        "id": 214516231,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603664777
    }
]