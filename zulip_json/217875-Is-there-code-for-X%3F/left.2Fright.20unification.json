[
    {
        "content": "<p>Dear All,</p>\n<p>I am testing out whether what is below could be a compromise between allowing a mixture of \"order-like conditions\" and \"monotonicity\" conditions in a general setting.  This is motivated by trying to prove lemmas about <code>nnreal</code> by working with <code>linear_ordered_comm_group_with_zero</code>.</p>\n<p><a href=\"#narrow/stream/116395-maths/topic/linear_ordered_*noncomm*_group.28_with_zero.29\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/linear_ordered_*noncomm*_group.28_with_zero.29</a></p>\n<p>Since there are a lot of assumptions implicit in <code>linear_ordered_comm_group_with_zero</code> and making the whole poset of weakinings into typeclasses does not seem reasonable, I am trying to see if I can tweak the definitions and make do with a single extra class.</p>\n<p>If this is already available, I would be more than happy to know!  Otherwise, below are my experiments: I would welcome any comment!</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">lo</span>\n\n<span class=\"sd\">/--  A general predicate on two Types `α β`, together with an \"action\" `μ : α → β`, a relation</span>\n<span class=\"sd\">`r : β → β`, asserting that if the relation holds for the pair `(b₁, b₂)`, then it also holds</span>\n<span class=\"sd\">for the pair `(μ a b₁, μ a b₂) \"acted-upon-by `a`\". `-/</span>\n<span class=\"kd\">@[protect_proj]</span>\n<span class=\"kd\">class</span> <span class=\"n\">is_rel_action</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mix</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"n\">b₂</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/--  This lemma shortens the name and makes explicit/implicit arguments that I imagine would appear</span>\n<span class=\"sd\">in normal use. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mix</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_rel_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">μ</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_rel_action.mix</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">bb</span>\n\n<span class=\"sd\">/--  An example, exponentiation by a fixed natural number is monotone on `ℝ≥0`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.nnreal_pow_mono</span> <span class=\"o\">:</span> <span class=\"n\">is_rel_action</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mix</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">canonically_ordered_semiring.pow_le_pow_of_le_left</span> <span class=\"n\">xy</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--  An example, exponentiation by a fixed `pnat` is strictly monotone on `ℝ≥0`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat.nnreal_pow_strict_mono</span> <span class=\"o\">:</span> <span class=\"n\">is_rel_action</span> <span class=\"n\">pnat</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n.val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mix</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">pow_lt_pow_of_lt_left</span> <span class=\"n\">xy</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">p.property</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--  The previous lemma can now be used for the natural numbers that are positive. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.nnreal_pow_strict_mono_of_pos</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"n\">pnat</span> <span class=\"n\">using</span> <span class=\"n\">n0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mix</span> <span class=\"n\">pnat.nnreal_pow_strict_mono</span> <span class=\"n\">_</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- This is really closer to my intended application. -/</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">left</span>\n\n<span class=\"sd\">/--  Assume that the action is by left-multiplication and the relation is an arbitrary preorder</span>\n<span class=\"sd\">on the group. -/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">is_rel_action</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n<span class=\"kn\">include</span> <span class=\"n\">ρ</span>\n\n<span class=\"sd\">/--  You get that multiplication on the left is monotone. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">mix</span> <span class=\"n\">ρ</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">left</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">right</span>\n\n<span class=\"sd\">/--  If you start assuming that the action is by right-multiplication... -/</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">is_rel_action</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n<span class=\"kn\">include</span> <span class=\"n\">ρ</span>\n\n<span class=\"sd\">/--  ... then you get that multiplication on the right is monotone. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">mix</span> <span class=\"n\">ρ</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">right</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">lo</span>\n</code></pre></div>",
        "id": 235308741,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618908242
    },
    {
        "content": "<p>Is this close to the concept of a congruence relation?</p>",
        "id": 235313710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618910754
    },
    {
        "content": "<p>I do not know: congruence relation, for me, evokes congruence modulo an integer.  I will google for it!</p>",
        "id": 235313854,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618910820
    },
    {
        "content": "<p>I guess <code>μ : α → β → β</code> is just an indexed family of functions <code>β → β</code></p>",
        "id": 235313857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618910823
    },
    {
        "content": "<p>My only source is this wikipedia page:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Congruence_relation\">https://en.wikipedia.org/wiki/Congruence_relation</a></p>\n<p>From that page, it seems that there is an underlying \"equivalence\" going about.  In the context in which I would like to apply this, the relation would be more an order relation.  However, if the <code>r</code> in <code>is_rel_action</code> <em>is</em> an equivalence, then it may be very close!</p>\n<p>Thanks for the pointer, Kevin!</p>",
        "id": 235314382,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618911062
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_con\">docs#add_con</a> (see the documentation there, or the module docstring in <code>group_theory.congruence</code>)</p>",
        "id": 235318423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618913212
    },
    {
        "content": "<p>But it looks different, like how smul differs from mul.</p>",
        "id": 235318952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618913526
    },
    {
        "content": "<p>Thanks Kevin!  It does look very close, indeed!</p>\n<p>I will see what I can recycle from <code>add_con</code>.  For the intended application, it appears that it might work for one of left (or right) multiplication, but not the other, I think.</p>\n<p>It might still be neat to have a lemma establishing exactly the relationship between the two: something like if <code>\\mu</code> is left-multiplication and <code>r</code> is an equivalence, then we get an <code>add_con</code> (or something, hopefully close to this, but correct!).</p>",
        "id": 235319231,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618913675
    },
    {
        "content": "<p>Kevin, this compiles and should be saying that you can get a <code>is_rel_action</code> out of a <code>con</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.congruence</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_con_rel</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">con</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">c.r</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mix</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">bb</span><span class=\"o\">,</span> <span class=\"n\">c.mul'</span> <span class=\"o\">(</span><span class=\"n\">con.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">bb</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 235328353,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618918892
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 235335088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618921958
    },
    {
        "content": "<p>Ok, this should complete the relationship between <code>is_rel_action</code> and <code>con</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_con_rel</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">con</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">c.r</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mix</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">bb</span><span class=\"o\">,</span> <span class=\"n\">c.mul'</span> <span class=\"o\">(</span><span class=\"n\">con.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">bb</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_con_rel'</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">con</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">c.r</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mix</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">bb</span><span class=\"o\">,</span> <span class=\"n\">c.mul'</span> <span class=\"n\">bb</span> <span class=\"o\">(</span><span class=\"n\">con.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_con_rel_converse</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">setoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">setoid.r</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">setoid.r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">con</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">setoid.r</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">iseqv</span><span class=\"o\">,</span>\n  <span class=\"n\">mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">wx</span> <span class=\"n\">yz</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">r1</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lo.mix</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">yz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">r2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lo.mix</span> <span class=\"n\">h'</span> <span class=\"n\">_</span> <span class=\"n\">wx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>or, more succintly,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">con_rel</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">con</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">c.r</span> <span class=\"bp\">∧</span> <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">c.r</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨{</span> <span class=\"n\">mix</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">bb</span><span class=\"o\">,</span> <span class=\"n\">c.mul'</span> <span class=\"o\">(</span><span class=\"n\">con.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">bb</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">mix</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">bb</span><span class=\"o\">,</span> <span class=\"n\">c.mul'</span> <span class=\"n\">bb</span> <span class=\"o\">(</span><span class=\"n\">con.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">con_rel_converse</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">setoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">setoid.r</span> <span class=\"bp\">∧</span> <span class=\"n\">lo.is_rel_action</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">setoid.r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">con</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">setoid.r</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">iseqv</span><span class=\"o\">,</span>\n  <span class=\"n\">mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">wx</span> <span class=\"n\">yz</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">lo.mix</span> <span class=\"n\">h.1</span> <span class=\"n\">_</span> <span class=\"n\">yz</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lo.mix</span> <span class=\"n\">h.2</span> <span class=\"n\">_</span> <span class=\"n\">wx</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 235338120,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618923187
    }
]