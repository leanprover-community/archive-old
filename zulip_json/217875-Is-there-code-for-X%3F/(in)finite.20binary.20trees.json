[
    {
        "content": "<p>What is the conventional way to define a type of binary trees that may be infinite? A naive way produces only finite trees:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span>\n</code></pre></div>\n<p>The following should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Tree</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It essentially says: given a path (list of bools - left/right choices) in the tree, function <code>f</code> returns <code>tt</code> iff the node at the given path is a pair. Proof <code>h</code> asserts that <code>nil</code> has no child nodes.</p>\n<p>The problem is that this definition is hard to work with and nontrivial to come up with for more complicated data structures.</p>",
        "id": 282128517,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652371276
    },
    {
        "content": "<p>A coinductive definition would work I suppose. Can you use a W type in your application?</p>",
        "id": 282132559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652372666
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfunctor.M\">docs#pfunctor.M</a></p>",
        "id": 282138917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652375184
    },
    {
        "content": "<p>Ok, seems like I need to study M-types and polynomial functors to better understand how they work.</p>",
        "id": 282151653,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652380163
    }
]