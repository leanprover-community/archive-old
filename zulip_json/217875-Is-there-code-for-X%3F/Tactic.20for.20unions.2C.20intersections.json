[
    {
        "content": "<p>Is there a tactic that will solve things like: <code>(X ∪ Z ∪ Y) \\ (X ∩ Z ∩ Y) = (X ∪ Y ∪ Z) \\ (X ∩ Y ∩ Z)</code>? I wrote a rather long proof of it, which hopefully wasn't necessary...</p>",
        "id": 214444422,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603567050
    },
    {
        "content": "<p>You could see if <code>mfld_set_tac</code>, written by <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, will work.  You might need to import some of the manifolds files to get access to it.</p>",
        "id": 214444481,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603567105
    },
    {
        "content": "<p>Is this what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Z</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Z</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span> <span class=\"bp\">∪</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">∩</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">finish</span>\n</code></pre></div>",
        "id": 214444682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603567328
    },
    {
        "content": "<p>It seems that <code>finish</code> can take care of a lot of these small facts about sets.</p>",
        "id": 214444689,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603567344
    },
    {
        "content": "<p>cf. <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Simple.20set.20theory.20nonsense/near/212441928\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Simple.20set.20theory.20nonsense/near/212441928</a></p>",
        "id": 214444707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603567385
    },
    {
        "content": "<p>Awesome, I had not heard of <code>finish</code></p>",
        "id": 214444712,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603567391
    },
    {
        "content": "<p>When that doesn't work, it can be useful to use <code>ext, simp</code> to turn things into a theorem of logic. (And then later use <code>squeeze_simp</code> to remove a non-terminal <code>simp</code>.)</p>",
        "id": 214444771,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603567445
    },
    {
        "content": "<p>In the conversation linked above you will find an example which finish can't solve, but for which <code>tidy</code>works.</p>",
        "id": 214444774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603567455
    },
    {
        "content": "<p>Actually, <code>mfld_set_tac</code> does exactly this :). Heres the code:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/cae77dc794ad18c1bc6ed361b7902aa9b1fb2fda/src/data/equiv/local_equiv.lean#L88\">https://github.com/leanprover-community/mathlib/blob/cae77dc794ad18c1bc6ed361b7902aa9b1fb2fda/src/data/equiv/local_equiv.lean#L88</a><br>\nand basically it's <code>ext, split; simp</code> using a simp-set that contains a few extra set lemmas.</p>",
        "id": 214444986,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603567729
    },
    {
        "content": "<p>Another proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Z</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Z</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span> <span class=\"bp\">∪</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">∩</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.union_left_comm</span><span class=\"o\">,</span> <span class=\"n\">set.union_comm</span><span class=\"o\">,</span> <span class=\"n\">set.inter_left_comm</span><span class=\"o\">,</span> <span class=\"n\">set.inter_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p>Mario's pointed out that <code>simp</code> puts things into a normal form, and these <code>left_comm</code> lemmas are useful for this purpose.</p>",
        "id": 214445000,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603567765
    },
    {
        "content": "<p>On the other hand, if I already have a proof written out, will replacing it by simply <code>by finish</code> make Lean take longer to check the proof?</p>",
        "id": 214445074,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603567869
    },
    {
        "content": "<p>Well, that depends on your proof <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> but yes, probably.</p>",
        "id": 214445128,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603567928
    },
    {
        "content": "<p>I would argue that one should prioritize speed of human comprehension over speed of computer comprehension, and writing <code>by finish</code> for a trivial lemma is the right way to get human comprehension!</p>",
        "id": 214445215,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603568081
    },
    {
        "content": "<p>I wonder if the lemmas in the <code>simp only</code> proof I gave should be added to <code>mfld_set_tac</code> (I've never used this tactic,  so I don't know if that's in scope)</p>",
        "id": 214445290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603568205
    },
    {
        "content": "<p>Also, you might consider the <code>simp only</code> proof because it says \"this lemma follows by commutativity of unions and intersections\", is only one line, and appears to be orders of magnitude faster than <code>finish</code>. (But like <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  says, writing <code>by finish</code> is a great way to say \"the proof is trivial\"! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 214445379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603568317
    },
    {
        "content": "<p>Hmm... I wrote an even longer proof for <code>(X \\ Y) ∪ (Y \\ Z) ∪ (Z \\ X) = (X ∪ Y ∪ Z) \\ (X ∩ Y ∩ Z)</code>, for that one <code>finish</code> is not enough...</p>",
        "id": 214445485,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603568461
    },
    {
        "content": "<p>tidy?</p>",
        "id": 214445492,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603568473
    },
    {
        "content": "<p><code>ext, simp, tauto!</code> works</p>",
        "id": 214445576,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603568581
    },
    {
        "content": "<p>There doesn't seem to be a <code>comm_ring</code> instance on <code>boolean_algebra</code>.  But if there were, would <code>by ring</code> solve this?</p>",
        "id": 214445582,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603568587
    },
    {
        "content": "<p>It should!</p>",
        "id": 214445593,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603568611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Tactic.20for.20unions.2C.20intersections/near/214445576\">said</a>:</p>\n<blockquote>\n<p><code>ext, simp, tauto!</code> works</p>\n</blockquote>\n<p>nonterminal simp! :(</p>",
        "id": 214445607,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603568631
    },
    {
        "content": "<p>It's left as an exercise to the reader to <code>squeeze_simp</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 214445658,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603568668
    },
    {
        "content": "<p>I am introducing an alternate meaning of the emoji <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> to refer to squeezing :)</p>",
        "id": 214445706,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603568749
    },
    {
        "content": "<p>I guess it's too much to ask for a tactic proof of <code>|X\\Y| + |Y\\Z| + |Z\\X| = |X\\Z| + |Z\\Y| + |Y\\X|</code>? (where <code>|X|</code> is a <code>local notation</code> for <code>X.card</code>) <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> I wrote a very long proof of that...</p>",
        "id": 214445778,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603568816
    },
    {
        "content": "<p>There was an oddly similar question discussed here before</p>",
        "id": 214445798,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603568860
    },
    {
        "content": "<p>I can't figure out how to search for it but it was to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">[</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">[</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[a, b) \\cup [b, c) \\cup [c, a) = [a, c) \\cup [b, a) \\cup [c, b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 214446056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603569222
    },
    {
        "content": "<p>Sort of similar... although that one generalizes to n&gt;3, whereas mine doesn't readily.</p>",
        "id": 214446152,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603569343
    },
    {
        "content": "<p>Right, because there is a multiplicity problem.</p>",
        "id": 214446203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603569369
    },
    {
        "content": "<p>Wait, isn't yours also true for n&gt;3 (if we use one cyclic order and the reverse cyclic order)?<br>\nBut it's no longer \"equivalent\" to the interval version</p>",
        "id": 214446309,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603569495
    },
    {
        "content": "<p>Why isn't there a comm_ring instance on <code>set X</code>?</p>",
        "id": 214446575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603569817
    },
    {
        "content": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></munder><msub><mi>χ</mi><msub><mi>X</mi><mi>i</mi></msub></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>χ</mi><msub><mi>X</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo>∑</mo><msub><mi>χ</mi><msub><mi>X</mi><mi>i</mi></msub></msub><mo>−</mo><mo>∑</mo><msub><mi>χ</mi><msub><mi>X</mi><mi>i</mi></msub></msub><msub><mi>χ</mi><msub><mi>X</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo>∑</mo><msub><mi>χ</mi><msub><mi>X</mi><mi>i</mi></msub></msub><mo>−</mo><mo>∑</mo><msub><mi>χ</mi><msub><mi>X</mi><mi>i</mi></msub></msub><msub><mi>χ</mi><msub><mi>X</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></munder><msub><mi>χ</mi><msub><mi>X</mi><mi>i</mi></msub></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>χ</mi><msub><mi>X</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\sum_{i\\in \\mathbb{Z}/3}\\chi_{X_i}(1-\\chi_{X_{i+1}})\n&amp;=\\sum\\chi_{X_i}-\\sum\\chi_{X_i}\\chi_{X_{i+1}}\\\\\n&amp;=\\sum\\chi_{X_i}-\\sum\\chi_{X_i}\\chi_{X_{i-1}}\\\\\n&amp;=\\sum_{i\\in \\mathbb{Z}/3}\\chi_{X_i}(1-\\chi_{X_{i-1}})\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.632029999999999em;vertical-align:-3.5660149999999993em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.066015em;\"><span style=\"top:-6.066015em;\"><span class=\"pstrut\" style=\"height:3.050005em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.808995em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">Z</span></span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.516005em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32808571428571426em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20252142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.291765em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.2000100000000002em;\"><span class=\"pstrut\" style=\"height:3.050005em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.299995000000001em;\"><span class=\"pstrut\" style=\"height:3.050005em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5660149999999993em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.066015em;\"><span style=\"top:-6.066015em;\"><span class=\"pstrut\" style=\"height:3.050005em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32808571428571426em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20252142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.291765em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.2000100000000002em;\"><span class=\"pstrut\" style=\"height:3.050005em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32808571428571426em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20252142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.291765em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.299995000000001em;\"><span class=\"pstrut\" style=\"height:3.050005em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.808995em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">Z</span></span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.516005em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32808571428571426em;\"><span style=\"top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20252142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.291765em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5660149999999993em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 214446651,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603569889
    },
    {
        "content": "<p>and maybe the above can be automated after rewriting using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator_finset_sum\">docs#set.indicator_finset_sum</a></p>",
        "id": 214446881,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603570182
    },
    {
        "content": "<p>Oh right, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  , it just doesn't have the internal version like <code>(X ∪ Y ∪ Z) \\ (X ∩ Y ∩ Z)</code></p>",
        "id": 214447283,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603570614
    },
    {
        "content": "<p>A slow proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">indicate</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">indicate</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">indicate</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">indicate</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">count_eq</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">count</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">count</span><span class=\"o\">,</span> <span class=\"n\">indicate</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_sdiff</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Z</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hz</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_rot</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span> <span class=\"bp\">∪</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span> <span class=\"bp\">∪</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">count_eq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">count</span><span class=\"o\">,</span> <span class=\"n\">indicate</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_add_distrib</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sum_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_id</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">key</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">union_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214447915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603571476
    },
    {
        "content": "<p>A more satisfying proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">disj₁</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">disjoint_iff</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_inter</span><span class=\"o\">],</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">disj₂</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">disjoint_iff</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_inter</span><span class=\"o\">],</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">union_rot_sdiff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">union_assoc</span><span class=\"o\">],</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_rot</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">\\</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">union_rot_sdiff</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">card_disjoint_union</span> <span class=\"o\">(</span><span class=\"n\">disj₁</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">card_disjoint_union</span> <span class=\"o\">(</span><span class=\"n\">disj₁</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n       <span class=\"n\">card_disjoint_union</span> <span class=\"o\">(</span><span class=\"n\">disj₂</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">card_disjoint_union</span> <span class=\"o\">(</span><span class=\"n\">disj₂</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214449004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603572892
    },
    {
        "content": "<p>These are great <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  ... I guess the second one has fewer exotic imports</p>",
        "id": 214450171,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603574443
    }
]