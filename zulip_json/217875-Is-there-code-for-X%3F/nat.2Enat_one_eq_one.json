[
    {
        "content": "<p>akin to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.nat_zero_eq_zero\">docs#nat.nat_zero_eq_zero</a></p>",
        "id": 266360222,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640796469
    },
    {
        "content": "<p><code>nat.zero</code> is a valid term though, and the lemma says it's equal to the numeral <code>0</code>; <code>nat.one</code> isn't, so I'm not sure what lemma you're expecting here?</p>",
        "id": 266385966,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640818471
    },
    {
        "content": "<p>the same sort of issue that required <code>nat_zero_eq_zero</code> was happening to me with 1; I still haven't figured out exactly what it was but <code>convert</code> fixed it (or maybe it was some weird metavariables, I'm not sure)</p>",
        "id": 266391160,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640823798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat.2Enat_one_eq_one/near/266391160\">said</a>:</p>\n<blockquote>\n<p>the same sort of issue that required <code>nat_zero_eq_zero</code> was happening to me with 1; I still haven't figured out exactly what it was but <code>convert</code> fixed it (or maybe it was some weird metavariables, I'm not sure)</p>\n</blockquote>\n<p>Out of interest, what was the issue? The issue which requires <code>nat_zero_eq_zero</code> is that <code>nat.zero</code> can be written as well as <code>0</code>, but there's no such thing as <code>nat.one</code></p>",
        "id": 266392469,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640825346
    },
    {
        "content": "<p>somewhere in <a href=\"https://github.com/leanprover-community/mathlib/pull/11128/files\">here</a> (in data/nat/cast.lean), <code>exact map_one f</code> (or even the term mode; usually elaboration only breaks in one of the two!) wasn't working for some of these goals. in <code>ext_nat'</code>, the same happens with <code>f 0</code>, but this is fixed with nat_zero_eq_zero</p>",
        "id": 266392911,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640825896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat.2Enat_one_eq_one/near/266392911\">said</a>:</p>\n<blockquote>\n<p>somewhere in <a href=\"https://github.com/leanprover-community/mathlib/pull/11128/files\">here</a> (in data/nat/cast.lean), <code>exact map_one f</code> (or even the term mode; usually elaboration only breaks in one of the two!) wasn't working for some of these goals. in <code>ext_nat'</code>, the same happens with <code>f 0</code>, but this is fixed with nat_zero_eq_zero</p>\n</blockquote>\n<p>In <code>ext_nat'</code> the <code>nat.zero</code> appears because of the use of the term <code>nat.rec</code>, and so <code>nat_zero_eq_zero</code> fixes it</p>",
        "id": 266393358,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640826408
    },
    {
        "content": "<p>does <code>induction</code> usually fix this? I've never seen this come up before</p>",
        "id": 266393372,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640826446
    },
    {
        "content": "<p>The things in that file seem to work for me?</p>",
        "id": 266393377,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640826450
    },
    {
        "content": "<p>yeah I ended up finding ways round it, but it wasn't trivial</p>",
        "id": 266393384,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640826466
    },
    {
        "content": "<p>there's still also a fair few <code>@</code>s that I don't get the need for in there</p>",
        "id": 266393391,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640826482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat.2Enat_one_eq_one/near/266393372\">said</a>:</p>\n<blockquote>\n<p>does <code>induction</code> usually fix this? I've never seen this come up before</p>\n</blockquote>\n<p>I expect so, the specific issue is that <code>nat.rec</code> caused the issue, because nat is defined as an inductive type and the numeral <code>0</code> is built on top of that; it's the interaction between using auto-generated recursors and numeral notation that is creating an issue</p>",
        "id": 266393439,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640826510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat.2Enat_one_eq_one/near/266393391\">said</a>:</p>\n<blockquote>\n<p>there's still also a fair few <code>@</code>s that I don't get the need for in there</p>\n</blockquote>\n<p>For the one on line 322, it can't infer that you want to talk about <code>R</code>, since neither the goal type or the given arguments are enough to infer it</p>",
        "id": 266393540,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640826634
    },
    {
        "content": "<p>Similarly <code>refine ext_nat' f g _,</code> gives a bunch of new goals</p>",
        "id": 266393551,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640826649
    },
    {
        "content": "<p>shouldn't out_param stop this? as only R is such that [ring_hom_class F _ R], and that instance is there</p>",
        "id": 266393634,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640826764
    },
    {
        "content": "<p>or does it not think that deeply</p>",
        "id": 266393636,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640826768
    },
    {
        "content": "<p>That I can't help you with, sorry!</p>",
        "id": 266393657,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640826827
    }
]