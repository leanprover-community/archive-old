[
    {
        "content": "<p>Do we have something like this ? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202031687,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593122881
    },
    {
        "content": "<p>You need a lemma whose name contains \"congr\".</p>",
        "id": 202032023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593123126
    },
    {
        "content": "<p>This is not a riddle, that's all I can say at first sight.</p>",
        "id": 202032039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593123143
    },
    {
        "content": "<p>Now I'll look at mathlib.</p>",
        "id": 202032052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593123154
    },
    {
        "content": "<p>Oh, you got parentheses wrong</p>",
        "id": 202032114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593123219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Equal.20within.20s.20imply.20same.20limit.20within.20s/near/202032114\">said</a>:</p>\n<blockquote>\n<p>Oh, you got parentheses wrong</p>\n</blockquote>\n<p>Where ?</p>",
        "id": 202032215,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593123284
    },
    {
        "content": "<p>The forall is binding too much.</p>",
        "id": 202032244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593123302
    },
    {
        "content": "<p>Oh yeah</p>",
        "id": 202032305,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593123349
    },
    {
        "content": "<p>There is no point in having all this right of the colon anyway.</p>",
        "id": 202032387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593123387
    },
    {
        "content": "<p>Indeed</p>",
        "id": 202032574,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593123504
    },
    {
        "content": "<p>It seems this lemma doesn't exist yet, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.congr'\">docs#filter.tendsto.congr'</a> does.</p>",
        "id": 202032980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593123828
    },
    {
        "content": "<p>Do you want the answer or do you want to try to finish using this hint only?</p>",
        "id": 202033266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593124028
    },
    {
        "content": "<p>The proof I have is 72 characters long.</p>",
        "id": 202033321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593124067
    },
    {
        "content": "<p>My PC just crashed, but yeah I've seen this one and I'm trying to deduce mine</p>",
        "id": 202033682,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593124276
    },
    {
        "content": "<p>I have this : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">tendsto_congr&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">univ_sets</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">univ_inter</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202034233,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593124728
    },
    {
        "content": "<p>I think I'm going too deep in the definition unfolding</p>",
        "id": 202034297,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593124786
    },
    {
        "content": "<p>And the first line is useless, I should have removed it</p>",
        "id": 202034439,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593124912
    },
    {
        "content": "<p>Your proof doesn't work here. Are you using an old mathlib?</p>",
        "id": 202034513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593124978
    },
    {
        "content": "<p>For the purpose of this conversation, old probably means older than <a href=\"https://github.com/leanprover-community/mathlib/commit/d287d34590761dc6237c7b21d9427580b2d339c4\">https://github.com/leanprover-community/mathlib/commit/d287d34590761dc6237c7b21d9427580b2d339c4</a>.</p>",
        "id": 202034566,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593125036
    },
    {
        "content": "<p>I definitely underestimated update frequency then <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 202034643,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593125100
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_stats.html\">https://leanprover-community.github.io/mathlib_stats.html</a></p>",
        "id": 202034657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593125124
    },
    {
        "content": "<p>HUGE lockdown peak x)</p>",
        "id": 202034722,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593125169
    },
    {
        "content": "<p>Of course!</p>",
        "id": 202034742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593125200
    },
    {
        "content": "<p>I was in another file with one more <code>open</code>, but it works now :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">mean_value</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">tendsto_congr&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">univ_sets</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">univ_inter</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202034934,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593125389
    },
    {
        "content": "<p>Well, I think it should at least</p>",
        "id": 202034990,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593125418
    },
    {
        "content": "<p>No, it doesn't work here. Did you update mathlib?</p>",
        "id": 202035974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593126229
    },
    {
        "content": "<p><code>leanproject up</code> ?</p>",
        "id": 202036305,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593126527
    },
    {
        "content": "<p>Well I've just run <code>leanproject up</code> and this definitely compile :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">mean_value</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">tendsto_congr&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">univ_sets</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">univ_inter</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202078365,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593170852
    },
    {
        "content": "<p>The main trick you're missing in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.mem_inf_sets_of_right\">docs#filter.mem_inf_sets_of_right</a> . One could argue this is relying on internal details of <code>nhds_within</code>, and the <code>nhds_within</code> API is lacking.</p>",
        "id": 202078827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593171142
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tendsto_congr&#39;</span> <span class=\"o\">(</span><span class=\"n\">eventually_eq_iff_exists_mem</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">self_mem_nhds_within</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf</span>\n</code></pre></div>\n\n\n<p>I am cheating because this won't work for you, as I have somewhere in <code>filter/basic.lean</code> the lemma</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eventually_eq_iff_exists_mem</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">eventually_iff_exists_mem</span>\n</code></pre></div>",
        "id": 202079336,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593171511
    },
    {
        "content": "<p>Spoilers!</p>",
        "id": 202079583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593171740
    },
    {
        "content": "<p>Well even <code>filter.eventually_iff_exists_mem</code> doesn't exist for me, should it ?</p>",
        "id": 202079626,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593171796
    },
    {
        "content": "<p>Not so much because it doesn't work with current mathlib :)</p>",
        "id": 202079635,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593171806
    },
    {
        "content": "<p>AH</p>",
        "id": 202079643,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593171819
    },
    {
        "content": "<p>Anatole, do you want to see a short solution that actually work, or do you want to keep trying?</p>",
        "id": 202079710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593171846
    },
    {
        "content": "<p>No, it doesn't exist either. But it is not hard to prove. It's just to illustrate that having basic API (which is currently missing) helps a lot to prove further statements.</p>",
        "id": 202079715,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593171853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Equal.20within.20s.20imply.20same.20limit.20within.20s/near/202079710\">said</a>:</p>\n<blockquote>\n<p>Anatole, do you want to see a short solution that actually work, or do you want to keep trying?</p>\n</blockquote>\n<p>I'll take it, I like to learn by imitating x)</p>",
        "id": 202079751,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593171918
    },
    {
        "content": "<p><code>λ h, tendsto.congr' $ mem_inf_sets_of_right (eventually_principal.mpr h)</code></p>",
        "id": 202079776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593171938
    },
    {
        "content": "<p>Guess I should train to use term-mode too</p>",
        "id": 202079777,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593171939
    },
    {
        "content": "<p>But again the correct solution is add lots of tiny lemmas that are easy to find.</p>",
        "id": 202079820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593171963
    },
    {
        "content": "<p>After the third line of your solution, you need to stop and think: there should be a lemma here. Then type <code>extract_goal</code>, do some cleanup, prove and use.</p>",
        "id": 202079906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593172065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  there is a serious issue with precedences for the eventually_eq notation.</p>",
        "id": 202080010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593172144
    },
    {
        "content": "<p>Anatole, the issue is that <code>eventually_eq</code> and <code>eventually_le</code> are <em>very</em> recent and still lack of lot of lemmas. Even <code>eventually</code> and <code>frequently</code> are not so old and still lack lemmas. If you unfold all see to basic filter stuff, involving only membership and lattices operations on filters, then all the lemmas are there. But we need a lot of plumbing.</p>",
        "id": 202080278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593172351
    },
    {
        "content": "<p>Wow tidy is powerful</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">tendsto_congr&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mem_inf_sets_of_right</span><span class=\"o\">,</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202080520,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593172571
    },
    {
        "content": "<p>But I don't think that's what you were hoping me to do</p>",
        "id": 202080538,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593172591
    },
    {
        "content": "<p><code>tidy?</code> will tell you how it proved it</p>",
        "id": 202080591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593172655
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">tendsto_congr&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mem_inf_sets_of_right</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202080675,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593172710
    },
    {
        "content": "<p>x)</p>",
        "id": 202080681,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593172715
    },
    {
        "content": "<p>Here is your plumbing exercise:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eventually_eq_nhds_within_iff</span>  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"err\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eventually_eq_nhds_within_of_eq_on</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eq_on</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_congr</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Make sure you understand the choices of binders. The second and third proofs should be one line long terms. The first one will probably be longer, which means it should probably be split further.</p>",
        "id": 202081600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593173463
    },
    {
        "content": "<p>Hey, I got shorter than you  <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">tendsto_congr&#39;</span> <span class=\"o\">(</span><span class=\"n\">mem_inf_sets_of_right</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 202082145,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593173763
    },
    {
        "content": "<p>Now it is not entirely clear why <code>by exact h</code> can't be replaced by <code>h</code> here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 202082185,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593173802
    },
    {
        "content": "<p>For readability, you can use</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">tendsto_congr&#39;</span> <span class=\"err\">$</span> <span class=\"n\">mem_inf_sets_of_right</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 202082532,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593174064
    },
    {
        "content": "<p>The fact that <code>by exact</code> is needed shows Lean elaboration has trouble. You're not being nice to Lean, it has to unfold many definition in the right order to get there. This is why you need plumbing.</p>",
        "id": 202082597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593174119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Equal.20within.20s.20imply.20same.20limit.20within.20s/near/202080010\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>  there is a serious issue with precedences for the eventually_eq notation.</p>\n</blockquote>\n<p>What exactly do you mean? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 202083451,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593174786
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Equal.20within.20s.20imply.20same.20limit.20within.20s/near/202081600\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Equal.20within.20s.20imply.20same.20limit.20within.20s/near/202081600</a> is autonomous. The first statement needs unexpected parentheses.</p>",
        "id": 202083592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593174883
    },
    {
        "content": "<p>And I know I saw other examples yesterday.</p>",
        "id": 202083604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593174898
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">g</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">eventually_eq</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n</code></pre></div>\n\n\n<p>works in this case.</p>",
        "id": 202086680,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593176704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Equal.20within.20s.20imply.20same.20limit.20within.20s/near/202079777\">said</a>:</p>\n<blockquote>\n<p>Guess I should train to use term-mode too</p>\n</blockquote>\n<p>If you concentrate on proving and tactic mode then you will slowly realise which proofs have \"content\" (e.g. they use high-powered tactics) and which proofs are literally just \"intro, apply, cases, exact\" which are really just ways to make a function piece by piece. For these \"basic\" proofs it's a good exercise to turn it into term mode (because you learn some weird tricks sometimes). After a while you can write hybrid proofs, where the intro/apply stuff is in term mode, and the occasional high-powered tactic like <code>rw</code> is just done by briefly dropping into tactic mode with <code>by rw ...</code></p>",
        "id": 202091808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593179199
    },
    {
        "content": "<p>I've been busy IRL since yesterday afternoon, but here is the plumbing <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> . I could shorten the first, especially if I finally start to learn <code>rcases</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but I'll work on this later, cause my parents are exploiting me right now x) </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eventually_eq_nhds_within_iff</span>  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"err\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">eventually_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eventually_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eventually_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_within</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_sets_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"n\">hu</span> <span class=\"n\">hau</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hau</span> <span class=\"k\">with</span> <span class=\"n\">hau</span> <span class=\"n\">hus</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hxs</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hus</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hx</span> <span class=\"n\">hxs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hu</span> <span class=\"n\">hau</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"n\">htsub</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"n\">ht</span> <span class=\"n\">hta</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hta</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">hxt</span> <span class=\"n\">hxs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">htsub</span> <span class=\"n\">hxt</span> <span class=\"n\">hxs</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eventually_eq_nhds_within_of_eq_on</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eq_on</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_inf_sets_of_right</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_congr</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tendsto_congr&#39;</span> <span class=\"err\">$</span> <span class=\"n\">eventually_eq_nhds_within_of_eq_on</span> <span class=\"n\">hfg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf</span>\n</code></pre></div>",
        "id": 202188999,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593268945
    },
    {
        "content": "<p>Indeed you need to learn about <code>rintros</code>/<code>rcases</code>. But actually you are not using any tactic here. After the rewrite, everything you wrote has completely straightforward translation to term mode. You can also group your <code>rw</code> in one tactic invocation.</p>",
        "id": 202202766,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593288220
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eventually_eq_nhds_within_iff</span>  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"err\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eventually_eq</span><span class=\"o\">,</span> <span class=\"n\">eventually_iff</span><span class=\"o\">,</span> <span class=\"n\">eventually_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_nhds_within</span><span class=\"o\">,</span> <span class=\"n\">mem_nhds_sets_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hau</span><span class=\"o\">,</span> <span class=\"n\">hus</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hxs</span><span class=\"o\">,</span> <span class=\"n\">hus</span> <span class=\"bp\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxs</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hau</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n         <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">htsub</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hta</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hta</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">hxt</span><span class=\"o\">,</span> <span class=\"n\">hxs</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">htsub</span> <span class=\"n\">hxt</span> <span class=\"n\">hxs</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202202827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593288260
    },
    {
        "content": "<p>This is exactly your proof, but without wasting too much space.</p>",
        "id": 202202840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593288297
    },
    {
        "content": "<p>Note also:</p>\n<ul>\n<li>nobody is interested in seeing this proof since the statement is obvious. mathlib style in this case is to compress the proof.</li>\n<li>actually you don't loose any information. You can still move your cursor and see the tactic state. Note that the tactic state is update when you move your cursor from left to right in the <code>rw</code> line but also in the exact line.</li>\n<li>you still miss intermediate lemmas that could be useful.</li>\n</ul>",
        "id": 202202947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593288439
    },
    {
        "content": "<p>Elaborating on the third point: don't you find it weird that you had to use the definition of neighborhoods in this proof? Don't you feel the lemma should be more general than that?</p>",
        "id": 202203159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593288806
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eventually_eq_inf_principal_iff</span>  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"n\">F</span> <span class=\"err\">⊓</span> <span class=\"err\">𝓟</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eventually_eq</span><span class=\"o\">,</span> <span class=\"n\">eventually_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_inf_principal</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eventually_eq_nhds_within_iff</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"err\">ᶠ</span><span class=\"o\">[</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"err\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">eventually_eq_inf_principal_iff</span>\n</code></pre></div>",
        "id": 202203209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593288852
    }
]