[
    {
        "content": "<p>Does this already exist somewhere? and if not, what would be a nice way to prove it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter.eq_principal_of_finite_mem</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266154735,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640592478
    },
    {
        "content": "<p>In an ultrafilter, for every subset s of alpha, either s is in or its complement is in. That sounds useful. Is the pullback of an ultrafilter along an injection an ultrafilter again?</p>",
        "id": 266155051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640592868
    },
    {
        "content": "<p>Maybe you don't want to promote s to a type though</p>",
        "id": 266155068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640592909
    },
    {
        "content": "<p>The proof I had in mind (but didn't want to write) was to say there exists a minimal finite set in the ultrafilter, and so long as that finite set has cardinality greater than one, there's a minimal-er one.</p>",
        "id": 266155131,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640592983
    },
    {
        "content": "<p>A consequence of the \"t is in or t.compl is in\" is that for a finite collection of subsets, either one is in or the intersection of the complements is in</p>",
        "id": 266155136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640592990
    },
    {
        "content": "<p>And now apply with the elements of your s</p>",
        "id": 266155166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640593053
    },
    {
        "content": "<p>You can do it by <code>finset.induction</code>: prove that if <code>s \\in f</code> then there exists <code>x</code> such that <code>{x} \\in f</code>. If <code>s \\cup {a} \\in f</code>, then either <code>{a} \\in f</code> (and we are done) or <code>s \\in f</code> and apply the IH</p>",
        "id": 266155622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640593565
    },
    {
        "content": "<p>That's nice, and hopefully the right induction principle is there</p>",
        "id": 266155674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640593653
    },
    {
        "content": "<p>actually <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite.induction_on\">docs#finite.induction_on</a> is a bit more convenient here</p>",
        "id": 266155676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640593658
    },
    {
        "content": "<p>Actually, you can do this without induction by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ultrafilter.finite_bUnion_mem_iff\">docs#ultrafilter.finite_bUnion_mem_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bUnion_of_singleton\">docs#set.bUnion_of_singleton</a></p>",
        "id": 266155943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640594014
    },
    {
        "content": "<p>you could strengthen the theorem to say <code>\\exists x \\in s, (f : filter α) = principal {x}</code> too</p>",
        "id": 266156260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640594345
    },
    {
        "content": "<p>There should also be a route using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.argmin_on\">docs#function.argmin_on</a> I expect Mario's suggestion will be more efficient but <code>function.argmin_on</code> may allow you to express the proof you had in mind more directly.</p>",
        "id": 266158924,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640597309
    },
    {
        "content": "<p>I guess it would start something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter.eq_principal_of_finite_mem</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">F.nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h.to_finset</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.finite.coe_to_finset</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]⟩,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">function.argmin_on</span> <span class=\"n\">finset.card</span> <span class=\"n\">nat.lt_wf</span> <span class=\"n\">F</span> <span class=\"n\">hF</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc.</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266158947,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640597351
    }
]