[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I presume I'm just missing imports, but which ones?</p>",
        "id": 231571374,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616551194
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_noetherian_pi\">docs#is_noetherian_pi</a> ?</p>",
        "id": 231571940,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616551569
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.noetherian</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Doesn't work</p>",
        "id": 231571987,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616551604
    },
    {
        "content": "<p>Is finite dimensional map even a class?</p>",
        "id": 231572659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616552197
    },
    {
        "content": "<p>Most of the lemmas about it in linear_algebra.finite_dimensional take <code>finite_dimensional K V</code> as a typeclass argument, so I assume that's how it's meant to be used</p>",
        "id": 231572712,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616552281
    },
    {
        "content": "<p>Right. I got confused because the API docs just lists it as a def</p>",
        "id": 231572835,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616552379
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_noetherian_pi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This works but it's weird that there's no nicer way - why is it that I need to look at the implemention of finite_dimensional and look through noetherian lemmas to get a linear algebra result</p>",
        "id": 231572923,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616552447
    },
    {
        "content": "<p>Does it work if you replace fin n with a type with a Fintype instance?</p>",
        "id": 231573052,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616552532
    },
    {
        "content": "<p>I mean, it shouldn't. But might be worth checking anyway</p>",
        "id": 231573105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616552585
    },
    {
        "content": "<p>Yup it doesn't work</p>",
        "id": 231573200,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616552657
    },
    {
        "content": "<p>Sounds like a missing instance <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 231573521,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616552913
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But this works...</p>",
        "id": 231574042,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616553348
    },
    {
        "content": "<p>Oooh... The mystery deepens</p>",
        "id": 231574126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616553400
    },
    {
        "content": "<p>Seems like <code>local attribute [-instance] real.semiring real.ring</code> \"fixes\" it and <code>apply_instance</code> works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">real.semiring</span> <span class=\"n\">real.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 231585521,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1616563360
    },
    {
        "content": "<p>Here's the original failure and the case for <code>field K</code> minimised</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"c1\">-- These both find `finite_dimensional.finite_dimensional_self`</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- But this fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>If I turn on <code>set_option pp.all</code>, the goal for <code>finite_dimensional ℝ ℝ</code> is like so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">finite_dimensional.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span> <span class=\"n\">real.field</span> <span class=\"n\">real.add_comm_group</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.field</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>and for <code>is_noetherian ℝ ℝ</code> it's </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">is_noetherian.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span> <span class=\"n\">real.semiring</span> <span class=\"n\">real.add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.semiring</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and as the instance it found for <code>finite_dimensional ℝ ℝ</code> uses a <code>finite_dimensional</code> lemma, and not a <code>is_noetherian</code> lemma, I guessed that  maybe the short circuit instances are causing issues, so I added <code>local attribute [-instance] real.semiring real.ring</code> and then the instance search worked.</p>",
        "id": 231585878,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1616563800
    },
    {
        "content": "<p>Just getting rid of <code>real.ring</code> is enough even</p>",
        "id": 231586228,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1616564069
    },
    {
        "content": "<p>hm, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 231586268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616564126
    },
    {
        "content": "<p>The only difference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"n\">i</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">real.semiring</span> <span class=\"n\">real.add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">real.semiring</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">finite_dimensional.finite_dimensional_self</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_42</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_43</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">real.semiring</span> <span class=\"n\">real.add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">real.semiring</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">finite_dimensional.finite_dimensional_self</span> <span class=\"bp\">?</span><span class=\"n\">x_42</span> <span class=\"bp\">?</span><span class=\"n\">x_43</span>\n<span class=\"o\">(</span><span class=\"n\">works</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231586461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616564306
    },
    {
        "content": "<p>So what's the fix in mathlib? Or should I be saying  <code>local attribute [-instance] real.ring</code></p>",
        "id": 231728852,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616630614
    },
    {
        "content": "<p>Alright, now I've additionally used the import analysis.convex.topology and the local attribute fixes no longer work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.convex.topology</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">real.semiring</span> <span class=\"n\">real.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What am I meant to do with this now?</p>",
        "id": 231746204,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616646317
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">real.nondiscrete_normed_field</span> <span class=\"n\">real.normed_field</span> <span class=\"n\">real.semiring</span> <span class=\"n\">real.ring</span>\n</code></pre></div>",
        "id": 231746345,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616646474
    },
    {
        "content": "<p>I think there's probably an issue somewhere with <code>is_R_or_C</code></p>",
        "id": 231746389,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616646492
    },
    {
        "content": "<p>Ah. It might have to do with <code>real.linear_ordered_field</code></p>",
        "id": 231746513,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616646616
    },
    {
        "content": "<p>It's so bizarre to me that mathlib is set up so that I can't show R^m is finite dimensional out of the box!</p>",
        "id": 231746682,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616646806
    },
    {
        "content": "<p>I don't know enough about diamond discovery to figure out what's wrong here, will have to wait for the real sleuths</p>",
        "id": 231746801,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616646943
    },
    {
        "content": "<p>Whatever is going on, I doubt the troubles you're having here are intentional. Something needs to be fixed; maybe some instances need to be put in locales?</p>",
        "id": 231747705,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616647915
    },
    {
        "content": "<p>yeah, those <code>local attribute [-instance]</code> lines are definitely not a proper solution. It looks like a lean bug</p>",
        "id": 231747862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616648060
    },
    {
        "content": "<p>For a mathlib workaround, you can just declare <code>instance {m : ℕ} : finite_dimensional ℝ (fin m → ℝ)</code></p>",
        "id": 231748016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616648230
    },
    {
        "content": "<p>It seems this issue is still not solved in mathlib master. I think this is a very serious issue. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> are you suggesting we put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_noetherian_pi</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finite_dimensional.finite_dimensional_self</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>somewhere? It feels like the underlying issue will get more opportunities to strike elsewhere if we ignore it.</p>",
        "id": 235844934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619186450
    },
    {
        "content": "<p>I don't think it's a great solution but it should help for the time being</p>",
        "id": 235845402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619186627
    },
    {
        "content": "<p>I don't know what's wrong in lean and I'm not especially motivated to try to patch typeclass inference</p>",
        "id": 235845598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619186691
    },
    {
        "content": "<p>If we add the instance, we should probably replace <code>fin m</code> by an arbitrary fintype.</p>",
        "id": 235845778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619186755
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- non-dependent version of `is_noetherian_pi` -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_noetherian_pi'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian_pi</span>\n</code></pre></div>",
        "id": 235846971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619187190
    },
    {
        "content": "<p>Then <code>apply_instance</code> can close the original goal</p>",
        "id": 235847004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619187206
    },
    {
        "content": "<p>Did you check that it closes the original goal?</p>",
        "id": 235847150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619187250
    },
    {
        "content": "<p>Because this thread seems to show that it doesn't always work as expected...</p>",
        "id": 235847202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619187271
    },
    {
        "content": "<p><del>Huh, I guess I screwed up</del></p>",
        "id": 235847215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619187276
    },
    {
        "content": "<p>Yes, it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"sd\">/-- non-dependent version of `is_noetherian_pi` -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_noetherian_pi'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian_pi</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- works fine</span>\n</code></pre></div>",
        "id": 235847321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619187325
    },
    {
        "content": "<p>I've seen something very similar for all the <code>dfinsupp</code> instances, where it can't seem to work out how to provide <code>M : ι → Type*</code> when it's a constant function</p>",
        "id": 235847497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619187394
    },
    {
        "content": "<p>This doesn't seem to be enough</p>",
        "id": 235847877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619187540
    },
    {
        "content": "<p>As in, that example fails for you, or there's a wider use case that still fails?</p>",
        "id": 235847958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619187570
    },
    {
        "content": "<p>I have a hard time minimizing...</p>",
        "id": 235848550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619187798
    },
    {
        "content": "<p>I returned to this but gave up on true minimization. It seems to be a really subtle elaboration order issue. The next piece of code works only if you uncomment the specialized instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.times_cont_diff</span>\n\n<span class=\"sd\">/-- non-dependent version of `is_noetherian_pi`, because typeclass inference struggles to infer `M` in the non-dependent case. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_noetherian_pi'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian_pi</span>\n\n<span class=\"c1\">--instance {m : ℕ} : finite_dimensional ℝ (fin m → ℝ) :=</span>\n<span class=\"c1\">--by apply_instance  -- works fine</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">smooth_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smooth_surrounding</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">q</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">smooth_at</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 235875147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619197502
    },
    {
        "content": "<p>The failing lemma can be reduced to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">smooth_fails</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smooth_at</span> <span class=\"n\">W</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 235877913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619198646
    },
    {
        "content": "<p>Some more investigation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.times_cont_diff</span>\n\n<span class=\"sd\">/-- non-dependent version of `is_noetherian_pi`, because typeclass inference struggles to infer `M` in the non-dependent case. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_noetherian_pi'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian_pi</span>\n\n<span class=\"c1\">-- if this is an instance the original works</span>\n<span class=\"kd\">def</span> <span class=\"n\">missing</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- works fine</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">smooth_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smooth_fails</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">smooth_at</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">missing</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">W</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smooth_ok1</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">smooth_at</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">missing</span> <span class=\"bp\">$</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">W</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smooth_ok2</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">smooth_at</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">missing</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">W</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 235878979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619199107
    }
]