[
    {
        "content": "<p>Do we have anything resembling the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.order.lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_le_of_add_le_two_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_add_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">hab</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">two_mul</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_mul_le_mul_left</span> <span class=\"n\">this</span> <span class=\"n\">zero_lt_two</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_right</span> <span class=\"n\">hba</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">two_mul</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_mul_le_mul_left</span> <span class=\"n\">this</span> <span class=\"n\">zero_lt_two</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this the correct set of typeclasses? Or can it be made to work with <code>smul</code> instead of <code>mul</code>?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> (the context is <a href=\"https://github.com/leanprover-community/mathlib/pull/17743\">#17743</a>) and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> (this is order stuff)</p>",
        "id": 315122095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670702389
    },
    {
        "content": "<p>It reminds me of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_le_add_iff_of_ge\">docs#add_le_add_iff_of_ge</a></p>",
        "id": 315123098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670703093
    },
    {
        "content": "<p>Probably the correct thing to prove is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">min_le_max_of_mul_le_mul</span> <span class=\"o\">[</span><span class=\"n\">not_sure</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_mul_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 315123219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670703197
    },
    {
        "content": "<p>Obviously the follow-up is the n-ary versions</p>",
        "id": 315123310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670703254
    },
    {
        "content": "<p>I think the key property you want is <code>a ^ 2 ≤ b ^ 2 → a ≤ b</code>. Then the proof is <code>(min a b) ^ 2 ≤ a * b ≤ c * d ≤ (max c d) ^ 2</code>.</p>",
        "id": 315123312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670703256
    },
    {
        "content": "<p>Indeed, if I prove <code>(h : a + b ≤ c + d) : min a b ≤ max c d</code> first them my lemmas falls out as special cases</p>",
        "id": 315123821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670703663
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_of_two_nsmul_le_two_nsmul</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">two_nsmul</span><span class=\"o\">,</span> <span class=\"n\">two_nsmul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_mul_le_mul_left</span> <span class=\"n\">h</span> <span class=\"n\">zero_lt_two</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_le_max_of_add_le_add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_add_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">hcd</span> <span class=\"n\">hdc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">hcd</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">hab</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_right</span> <span class=\"n\">hcd</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_two_nsmul_le_two_nsmul</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">hdc</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">hab</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">hdc</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_two_nsmul_le_two_nsmul</span> <span class=\"n\">this</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">hcd</span> <span class=\"n\">hdc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">hcd</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">add_le_add_right</span> <span class=\"n\">hba</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_right</span> <span class=\"n\">hcd</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_two_nsmul_le_two_nsmul</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">hdc</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">add_le_add_right</span> <span class=\"n\">hba</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">hdc</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_two_nsmul_le_two_nsmul</span> <span class=\"n\">this</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_le_of_add_le_two_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_add_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">min_le_max_of_add_le_add</span> <span class=\"o\">(</span><span class=\"n\">h.trans_eq</span> <span class=\"bp\">$</span> <span class=\"n\">two_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_max_of_add_le_two_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_add_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">min_le_max_of_add_le_add</span> <span class=\"o\">((</span><span class=\"n\">two_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans_le</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 315124090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670703843
    },
    {
        "content": "<p>Can you first prove <code>a ^ 2 ≤ b ^ 2 → a ≤ b</code> as I suggested above?</p>",
        "id": 315124187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670703950
    },
    {
        "content": "<p>I doubt it, I expect we don't have any proof that can be additivized here without some new typeclasses</p>",
        "id": 315124316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670704028
    },
    {
        "content": "<p>We sure do. <code>linear_order</code> + monotonicity of multiplication is already enough.</p>",
        "id": 315124338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670704055
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_pow_le_pow\">docs#le_of_pow_le_pow</a> (which is definitely a misnomer!)</p>",
        "id": 315124423,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670704126
    },
    {
        "content": "<p>And of course you can generalise this to any strictly monotone function. So the real deal is <del>docs#strict_mono.reflect_le</del>. We only have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.reflect_lt\">docs#monotone.reflect_lt</a> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> .</p>",
        "id": 315124542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670704210
    },
    {
        "content": "<p>Edited the above to at least extract the lemma you asked for</p>",
        "id": 315124859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670704419
    },
    {
        "content": "<p>/me is writing a new proof</p>",
        "id": 315124913,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670704452
    },
    {
        "content": "<p>These look easy by contradiction</p>",
        "id": 315124923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670704466
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">min_le_of_add_le_two_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_add_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_imp_le_of_lt_imp_lt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_min_iff.1</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_max_of_add_le_two_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_add_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_imp_le_of_lt_imp_lt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">max_lt_iff.1</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315125823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670705255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.order.lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_le_max_of_add_le_add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_add_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_imp_le_of_lt_imp_lt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_lt_iff</span><span class=\"o\">,</span> <span class=\"n\">lt_min_iff</span><span class=\"o\">,</span> <span class=\"n\">lt_min_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315126200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670705536
    },
    {
        "content": "<p>Proving a conclusion <code>min a b &lt;= c</code> is annoying because you don't know which one will be the min. But having a hypothesis <code>c &lt; min a b</code> is really powerful because you can deduce c &lt; a and c &lt; b.</p>",
        "id": 315126303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670705640
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid.lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">preorder</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">strict_mono.nsmul</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">succ_nsmul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">hf.add</span> <span class=\"o\">(</span><span class=\"n\">strict_mono.nsmul</span> <span class=\"n\">n.succ_ne_zero</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">preorder</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">preorder</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">strict_mono.pow</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">pow_succ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">hf.mul'</span> <span class=\"o\">(</span><span class=\"n\">strict_mono.pow</span> <span class=\"n\">n.succ_ne_zero</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">strict_mono_pow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">strict_mono_id.pow</span> <span class=\"n\">hn</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">preorder</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">linear_order</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[to_additive le_of_nsmul_le_nsmul]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">le_of_pow_le_pow'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">strict_mono_pow</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le.1</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">min_le_max_of_mul_le_mul</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_pow_le_pow'</span> <span class=\"n\">two_ne_zero</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul'</span> <span class=\"n\">inf_le_left</span>\n  <span class=\"n\">inf_le_right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"bp\">$</span> <span class=\"n\">mul_le_mul'</span> <span class=\"n\">le_sup_left</span> <span class=\"n\">le_sup_right</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">linear_order</span>\n</code></pre></div>",
        "id": 315126357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670705658
    },
    {
        "content": "<p>This all follows what I said above.</p>",
        "id": 315126379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670705682
    },
    {
        "content": "<p>(btw I'm a bit horrified by the amount of imports I need to say \"give me basic algebraic order theory\". How come lattices not be imported by the algebraic order hierarchy?)</p>",
        "id": 315126540,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670705798
    },
    {
        "content": "<p>Kevin's proof also works under these assumptions (don't even need to assume <code>[covariant_class α α (*) (≤)] [covariant_class α α (swap (*)) (≤)]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.min_max</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_le_max_of_add_le_add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">min_le_iff</span><span class=\"o\">,</span> <span class=\"n\">le_max_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">h.1.1</span> <span class=\"n\">h.2.2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315128366,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670707192
    },
    {
        "content": "<p>Are the lt versions easy too, with either spelling?</p>",
        "id": 315128489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670707275
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zpow_strict_mono\">docs#zpow_strict_mono</a> already exists, so your name might need disambiguating somehow</p>",
        "id": 315128656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670707439
    },
    {
        "content": "<p>It's worrying that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zpow_strict_mono_left\">docs#zpow_strict_mono_left</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_strict_mono_left\">docs#pow_strict_mono_left</a> aren't analogous facts ...</p>",
        "id": 315128982,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670707685
    },
    {
        "content": "<p>I've been annoyed for a long at those names but it's really hard to come up with better names before you have all the lemmas.</p>",
        "id": 315129006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670707722
    },
    {
        "content": "<blockquote>\n<p>Are the lt versions easy too, with either spelling?</p>\n</blockquote>\n<p>If you mean this, it holds with <code>(&lt;)</code> in the covariant hypotheses replaced by <code>(≤)</code>, or under the cleaner assumption <code>linear_ordered_add_comm_monoid</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">min_lt_max_of_add_lt_add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">min_lt_iff</span><span class=\"o\">,</span> <span class=\"n\">lt_max_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_le_add</span> <span class=\"n\">h.1.1</span> <span class=\"n\">h.2.2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315129138,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670707810
    },
    {
        "content": "<p>(I think the (≤) version doesn't necessarily hold for <code>linear_ordered_add_comm_monoid</code> because you can consider absorptive addition on {0,1,2} then you'd have <code>1 + 1 = 2 + 2 = 2</code> but <code>2 ≰ 1</code>.)</p>",
        "id": 315129343,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670707962
    },
    {
        "content": "<p>Updated my snippet above to include the <code>&lt;</code> versions.</p>",
        "id": 315129641,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670708213
    },
    {
        "content": "<p>Is the mathlib4 tide past the natural place to PR these yet?</p>",
        "id": 315133838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670711767
    },
    {
        "content": "<p>Mostly not, but it's very close to the border.</p>",
        "id": 315138628,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670715318
    },
    {
        "content": "<p>Are you happy to PR the earlier mono lemmas?</p>",
        "id": 315138836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670715507
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17895\">#17895</a></p>",
        "id": 315196729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670760240
    }
]