[
    {
        "content": "<p>I'm struggling to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">valuation</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x.valuation</span>\n</code></pre></div>\n<p>It looks like it should be in the library, but <code>suggest</code> and <code>library_search</code> give me timeouts.</p>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_valuation.map_pow\">docs#add_valuation.map_pow</a> , but it wants an explicit valuation as an argument, whose target is supposed to be a <code>linear_ordered_add_comm_monoid_with_top</code>, which I don't think ℤ is. I would think the corresponding statement should be an API lemma somewhere in the padics folder.</p>",
        "id": 276538848,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1648155641
    },
    {
        "content": "<p>Yeah it looks like you're using <code>padic.valuation</code> which doesn't seem to have any API.</p>",
        "id": 276539611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648156064
    },
    {
        "content": "<p><code>add_valuation</code>s are valuations which behave \"correctly\" on 0; <code>padic.valuation</code> isn't a valuation (it's additive) but it doesn't behave correctly on 0 (v(0)=0) so it's not an add_valuation either.</p>",
        "id": 276539774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648156131
    },
    {
        "content": "<p>So what would be preferable?</p>\n<ol>\n<li>Write an API for <code>padic.valuation</code>.</li>\n<li>Change <code>padic.valuation</code> to be a well-behaved valuation (which would entail replacing the target by ℤ ∪ {∞}) and somehow set things up so one can use the general stuff.</li>\n</ol>",
        "id": 276540505,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1648156553
    },
    {
        "content": "<p>Do we not have the p-adic valuation as a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a> ?</p>",
        "id": 276541661,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648157177
    },
    {
        "content": "<p>No: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a> is a <em>multiplicative</em> map; this corresponds to the p-adic norm.<br>\nWe are talking about the <em>additive</em> valuation here.</p>",
        "id": 276542204,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1648157480
    },
    {
        "content": "<p>Yeah, I understand, but I seem to vaguely remember <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> constructing the p-adic valuation as a (multiplicative) valuation, and presumably that would have involved a way to go back and forth between the additive and multiplicative version. But I might be misremembering, because I can't seem to find the multiplicative p-adic valuation.</p>",
        "id": 276542489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648157665
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic.has_norm\">docs#padic.has_norm</a>; this is the multplicative valuation.</p>",
        "id": 276542883,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1648157932
    },
    {
        "content": "<p>I don't really remember getting anything closer to this than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicity.add_valuation\">docs#multiplicity.add_valuation</a>.</p>",
        "id": 276552944,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1648164610
    },
    {
        "content": "<p>I was just talking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic.valuation\">docs#padic.valuation</a> with Kevin yesterday. I think this should renamed to something like <code>padic.int_add_valuation</code> (since as pointed out above it's not a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a>).<br>\nI actually defined <code>padic.add_valuation</code> a couple of days ago (as an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_valuation\">docs#add_valuation</a> with values in <code>with_top Z</code>). I'll PR it now , and then <a href=\"https://github.com/leanprover-community/mathlib/pull/12914\">#12914</a> could be used to get the corresponding absolute value.</p>",
        "id": 276631227,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1648220438
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/12939\">#12939</a>.</p>",
        "id": 276644137,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1648225418
    },
    {
        "content": "<p>I would like to keep the version with values in the integers as an alternative, since I imagine trying to work with the condition that the valuation is even (say) is likely to be a bit painful when it is of type <code>with_top ℤ</code> instead of <code>ℤ</code>.</p>",
        "id": 277657402,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649015081
    },
    {
        "content": "<p>I'm not at all familiar with the area, but it feels rather messy that the definition of all this stuff around padic norms seems to expand to an <code>if</code> with a special case, rather than letting a with_bot handle the special cases somehow</p>",
        "id": 277664837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649025033
    },
    {
        "content": "<p>As long as <code>with_top \\Z</code> has whatever algebraic structure mimics <code>comm_group_with_zero</code>, then it should be natural enough to use without always translating to <code>\\Z</code>.  I assume we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group_with_top\">docs#add_comm_group_with_top</a> ?<br>\nEdit: it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_add_comm_group_with_top\">docs#linear_ordered_add_comm_group_with_top</a></p>",
        "id": 277665140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649025509
    },
    {
        "content": "<p>How would <code>even n</code> and <code>odd n</code> be defined for <code>n : with_top ℤ</code>?<br>\nI don't see a way around distinguishing cases here.<br>\n(Background: I want to formulate (and prove) a statement like \"a nonzero p-adic number is a square iff...\".)</p>",
        "id": 277774620,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649096836
    },
    {
        "content": "<p>If we generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/even\">docs#even</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/odd\">docs#odd</a> slightly, it would be possible.</p>",
        "id": 277774873,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649096963
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">odd'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">even'</span> <span class=\"n\">a</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">odd'</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 277775151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649097112
    },
    {
        "content": "<p>Of course, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span> would be both even and odd, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> ...</p>",
        "id": 277775239,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649097145
    },
    {
        "content": "<p>Note that there is already a more general proposal for <code>even</code>: <a href=\"https://github.com/leanprover-community/mathlib/pull/13037\">#13037</a>.</p>",
        "id": 277784231,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649101775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> does your PR also includes a generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/odd\">docs#odd</a> ?</p>",
        "id": 277788089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649103744
    },
    {
        "content": "<p>It seems that the answer is \"no\". But perhaps if all <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> needs is <code>even</code>, then that's okay.</p>",
        "id": 277788266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649103832
    },
    {
        "content": "<p><code>even</code> is sufficient for what I have in mind for now.</p>",
        "id": 277788419,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649103891
    },
    {
        "content": "<p>Is there something special about divisibility by 2 in this context?</p>",
        "id": 277792958,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649106035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/p-adic.20valuation/near/277657402\">said</a>:</p>\n<blockquote>\n<p>I would like to keep the version with values in the integers as an alternative, since I imagine trying to work with the condition that the valuation is even (say) is likely to be a bit painful when it is of type <code>with_top ℤ</code> instead of <code>ℤ</code>.</p>\n</blockquote>\n<p>I would vote for keeping both versions,  with some API relating them (same as for polynomials we have <code>nat_degree</code> with values in <code>ℕ</code> and <code>degree</code> with values in <code>with_bot ℕ</code>).</p>",
        "id": 277796277,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1649107721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  -- I don't know exactly what result Michael has in mind here, but the multiplicative group of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> odd has a very explicit description: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi><mo>×</mo></msubsup><mo>≅</mo><mi mathvariant=\"double-struck\">Z</mi><mo>×</mo><msubsup><mi mathvariant=\"double-struck\">F</mi><mi>p</mi><mo>×</mo></msubsup><mo>×</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>p</mi><mo>⋅</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_p^\\times \\cong \\mathbb{Z} \\times \\mathbb{F}_p^\\times \\times (1 + p \\cdot \\mathbb{Z}_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1544em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1544em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where the first component is the valuation, the second is the Teichmuller representative of the first nonzero coefficient in the Teichmuller expansion, and the rest is \"the rest\". By Hensel's lemma \"the rest\" consists of squares (since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is odd), so to test whether you have a square in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi><mo>×</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_p^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1544em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span></span></span></span> you need to do ensure that the valuation is even and that the part in the residue field is a square, which means you need to compute some Legendre symbol. You can generalize this in various ways, but I think the statement for squares is natural enough to be in mathlib.</p>",
        "id": 277797456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649108373
    },
    {
        "content": "<p>Adam, the PR above only deals with <code>even</code>.</p>\n<p>There has been a discussion about this in a different thread (General - even/odd, I think, but I'm on mobile now).  The conclusion was that <code>even</code> was \"more fundamental\".</p>\n<p>Besides, I am still not sure if I prefer <code>odd</code> to require also the existence of a <code>1</code>, making the two notions asymmetric, or whether it is better to define <code>odd = ¬even </code> and get the usual <code>2*n+1</code> only once you assume more.</p>",
        "id": 277825822,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649132246
    },
    {
        "content": "<p>Honestly, regardless of whether it is called <code>odd</code> or not, <code>¬even</code> is a much better concept than <code> ∃n, x=2*n+1</code>.</p>",
        "id": 277825954,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649132387
    },
    {
        "content": "<p>I also thought that introducing <code>is_square</code> at the same time as refactoring <code>even</code> was more than enough for a single PR!</p>",
        "id": 277826014,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649132427
    },
    {
        "content": "<p>Regarding using <code>with_top ℤ</code>, I very much like the option of keeping both.  One thing that I had not noticed earlier is that you cannot subtract one from a <code>degree</code>, since subtraction is not defined on the type.  Nevertheless, it is very useful to be able to talk about subtracting valuations!</p>",
        "id": 277826232,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649132751
    },
    {
        "content": "<p>Now at a computer: <a href=\"#narrow/stream/113488-general/topic/even.2Fodd/near/276156224\">this</a> is the chat and approximate location of the discussion relevant to what the PR contains.</p>",
        "id": 277836469,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649142935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"406490\">María Inés de Frutos Fernández</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/p-adic.20valuation/near/277796277\">said</a>:</p>\n<blockquote>\n<p>I would vote for keeping both versions,  with some API relating them (same as for polynomials we have <code>nat_degree</code> with values in <code>ℕ</code> and <code>degree</code> with values in <code>with_bot ℕ</code>).</p>\n</blockquote>\n<p>I completely agree with this -- we need a good API to go back and forth between the two notions.</p>\n<p>But the valuation theory situation in mathlib still bothers me for some reason. We have this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic.valuation\">docs#padic.valuation</a> as a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> which behaves as expected on nonzero elements and sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. But we don't have a version which is a homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo>:</mo><msubsup><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi><mo>×</mo></msubsup><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">v_p : \\mathbb{Q}_p^\\times \\to \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1544em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>. If we had such a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>, then we could define <code>padic.valuation</code> using <code>if h : x = 0 then 0 else v_p (units.mk0 x h)</code> (cf. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.mk0\">docs#units.mk0</a> ). In general it seems pretty strange to me that we can consider <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_valuation\">docs#add_valuation</a> on fields taking values in <code>with_top \\Z</code>, but we don't have anything that would let us work with a valuation of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>:</mo><msup><mi>K</mi><mo>×</mo></msup><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">v : K^\\times \\to \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>",
        "id": 277888086,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649169360
    },
    {
        "content": "<p>Choosing an orientation for <code>v_p</code> is like deciding whether your canonical Frobenii are going to be arithemetic Frobenii or geometric Frobenii</p>",
        "id": 277888512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649169519
    },
    {
        "content": "<p>Why? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">v_p(p) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 277888584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649169556
    },
    {
        "content": "<p>No, it really is not, is it.</p>",
        "id": 277888589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649169560
    },
    {
        "content": "<p>Inversion on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>K</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">K^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> doesn't extend to a ring morphism</p>",
        "id": 277888620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649169580
    },
    {
        "content": "<p>The issue with defining valuations as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>:</mo><msup><mi>K</mi><mo>×</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">v : K^\\times \\to \\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> is that the theory for valuations on rings must involve the <code>top</code> from the very start, since you have have nonzero elements mapping to <code>top</code>. The field case is still an important special case, as one can prove that any valuation on a commutative ring arises from a valuation on the residue field of one of its primes. In this sense, it might be worthwhile to focus more on developing the theory for valued fields where one can have a nice picture using valuations of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>:</mo><msup><mi>K</mi><mo>×</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">v : K^\\times  \\to \\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span>.</p>",
        "id": 277889326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649169857
    },
    {
        "content": "<p>Why can't we have a predicate <code>is_isomorphic_to_top_of Gamma</code>?</p>",
        "id": 277889458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649169915
    },
    {
        "content": "<p>Yeah! I think that's a very good idea.</p>",
        "id": 277889519,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649169946
    },
    {
        "content": "<p>Is it called <code>is_top</code>? What's the corresponding naming convention for localisations? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization\">docs#localization</a></p>",
        "id": 277889660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649169995
    },
    {
        "content": "<p>I assume you want some predicate saying that a <code>linear_ordered_comm_group_with_top</code> is isomorphic to <code>with_top \\Gamma</code>?</p>",
        "id": 277889762,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649170041
    },
    {
        "content": "<p>ha, <code>is_top</code> is taken!</p>",
        "id": 277889828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649170074
    },
    {
        "content": "<p>I wonder who took it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 277890149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649170189
    },
    {
        "content": "<p>Adam I think you're right. I have learnt a bunch about valuation theory recently. For the perfectoid project there were rings everywhere, we couldn't use this hack. But I remember skipping over a bunch of proofs because we didn't need them for the definition of a perfectoid space but would need to be able to build one jot of API, and valuation theory of fields was in the part which we skipped.</p>",
        "id": 277890999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649170512
    },
    {
        "content": "<p>Do you think there should be a <code>field_valuation K \\Gamma</code> typeclass? And then a bridge: if I have a ring R with <code>is_field R</code> and a monoid with zero <code>M</code>  then you give me a <code>field_valuation R Mˣ</code> and conversely if you give me a <code>field_valuation K \\Gamma</code> I'll return a <code>valuation K (with_zero \\Gamma)</code></p>",
        "id": 277891900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649170850
    },
    {
        "content": "<p>Yeah, that might be the way to go (sorry, I can't discuss this more right now, even though I would like to! I have to teach in 25mins.)</p>",
        "id": 277892313,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649171016
    },
    {
        "content": "<p>Or how about this: make <code>is_field</code> a class and then just make a more fieldy API contructors/eliminators but leave the implementation. Although I guess we don't seem to have an <code>is_group</code> predicate on monoids -- do we? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_group\">docs#is_group</a></p>",
        "id": 277902455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649174645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/p-adic.20valuation/near/277792958\">said</a>:</p>\n<blockquote>\n<p>Is there something special about divisibility by 2 in this context?</p>\n</blockquote>\n<p>If you are interested in squares (which I am right now because of the relation to quadratic Hilbert symbols), then yes. But of course, if you look at n-th powers more generally, then divisibility by n will be relevant.</p>",
        "id": 277930140,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649185974
    },
    {
        "content": "<p>I guess a better formulation of my question would have been: are you going to face a similar issue regarding \"valuation is divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>\" for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n &gt; 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>, and if so, is it worth giving special attention to the statement for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></p>",
        "id": 277937383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649189618
    },
    {
        "content": "<p>In this respect, I'd say no. On the other hand, divisibility by 2 is already  given special attention -- we don't have an analogue of <code>even</code> for divisibility by 3, say.</p>",
        "id": 277939598,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649190850
    }
]