[
    {
        "content": "<p>Let's say I have a finite type <code>α</code>. Is there a way to extract/select an element <code>x  : α</code>?<br>\nI want to prove a lemma of the sort \"Either <code>p x</code> holds, or we remove <code>x</code> from <code>α</code> and recursively try the procedure again. Because <code>α</code> is finite, the procedure must halt\"</p>",
        "id": 253596965,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631804791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439334\">@Jure Taslak (Slovenia)</span> Do you know the type is nonempty?</p>",
        "id": 253597158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631804879
    },
    {
        "content": "<p>I know that the following holds: <code>∃ x, p x</code> but I need a way to extract such an <code>x</code></p>",
        "id": 253598189,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631805279
    },
    {
        "content": "<p>Have you had a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/init/classical.html#classical.some\">https://leanprover-community.github.io/mathlib_docs/init/classical.html#classical.some</a> ?</p>",
        "id": 253598353,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631805334
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> if you know there is a unique element satisfying p</p>",
        "id": 253598406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631805356
    },
    {
        "content": "<p>Oh, it was finite!</p>",
        "id": 253598470,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631805370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439334\">@Jure Taslak (Slovenia)</span>  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a> helps in case of general types.</p>",
        "id": 253598547,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631805404
    },
    {
        "content": "<p>Aha this choose should do it, thank you.<br>\nEdit: aha, the issue is I don't know (and it might not be true) that the x is unique.</p>",
        "id": 253598609,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631805428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439334\">Jure Taslak (Slovenia)</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Selecting.20element.20from.20finite.20type/near/253596965\">said</a>:</p>\n<blockquote>\n<p>Let's say I have a finite type <code>α</code>. Is there a way to extract/select an element <code>x  : α</code>?<br>\nI want to prove a lemma of the sort \"Either <code>p x</code> holds, or we remove <code>x</code> from <code>α</code> and recursively try the procedure again. Because <code>α</code> is finite, the procedure must halt\"</p>\n</blockquote>\n<p>It sounds like you're in a proof, so you don't need classical at all, and can just use <code>rcases h</code> where <code>h : ∃ x, p x</code></p>",
        "id": 253598635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631805443
    },
    {
        "content": "<p>Yes, I was working with finite types in particular.</p>",
        "id": 253598664,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631805458
    },
    {
        "content": "<p>The problem is, I only have the exsistential quantifier and the rcases tactic gives me the error: \"induction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop\"</p>",
        "id": 253598951,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631805562
    },
    {
        "content": "<p>In that case, the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#choose\">tactic#choose</a> allows you to (noncomputably) get such an <code>x</code>.</p>",
        "id": 253599188,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631805670
    },
    {
        "content": "<p>It sounds like you might not be proving a lemma after all, but defining a value?</p>",
        "id": 253600403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631806126
    },
    {
        "content": "<p>Ok using choose works, but it indeed makes the lemma noncomputable.<br>\nBut since my type <code>α</code> is finite, there should be something like fintype.choose, which doesn't require a unique element satisfying <code>p x</code> right?</p>",
        "id": 253600473,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631806154
    },
    {
        "content": "<p>yes perhaps that is a better way to phrase it, I need a value, satisfying some predicate.</p>",
        "id": 253600552,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631806192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Selecting.20element.20from.20finite.20type/near/253600403\">said</a>:</p>\n<blockquote>\n<p>It sounds like you might not be proving a lemma after all, but defining a value?</p>\n</blockquote>\n<p>Probably defining a value in the course of proving a lemma.</p>",
        "id": 253601478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631806557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439334\">Jure Taslak (Slovenia)</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Selecting.20element.20from.20finite.20type/near/253600473\">said</a>:</p>\n<blockquote>\n<p>Ok using choose works, but it indeed makes the lemma noncomputable.<br>\nBut since my type <code>α</code> is finite, there should be something like fintype.choose, which doesn't require a unique element satisfying <code>p x</code> right?</p>\n</blockquote>\n<p>Lemmas can't be <code>noncomputable</code>. If lean is asking you to add the <code>noncomputable</code> keyword, then you should be in a <code>def</code>.</p>",
        "id": 253601731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631806644
    },
    {
        "content": "<p>I don't want things to be noncomputable, as I eventually want to use typeclasses to make lean compute some examples. But for that I need it to choose an element from a finite type.</p>",
        "id": 253602030,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631806752
    },
    {
        "content": "<p>My naive thinking is to take the underlying set and give it an arbitrary linear order, then take the max element. But perhaps there is a much easier way of doing it.</p>",
        "id": 253602417,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1631806887
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/trunc_sigma_of_exists\">docs#trunc_sigma_of_exists</a> and adjacent definitions</p>",
        "id": 253606299,
        "sender_full_name": "David Wärn",
        "timestamp": 1631808467
    },
    {
        "content": "<p>Nice find! That should maybe cross-reference <code>fintype.choose</code></p>",
        "id": 253608468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631809280
    }
]