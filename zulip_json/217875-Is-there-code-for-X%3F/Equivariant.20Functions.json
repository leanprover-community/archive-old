[
    {
        "content": "<p>Hi, im new here (just downloaded LEAN last week), is there already a theorem or proof related to Equivariant functions?<br>\nthis being  f(g(x)) = g (f(x)). Maybe there's already a theorem about it but i haven't found it.</p>\n<p>I want to see if i can check such a property given two functions they have such property.</p>",
        "id": 289382171,
        "sender_full_name": "Jorge Medina",
        "timestamp": 1657658289
    },
    {
        "content": "<p>Can you provide some <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with what you have in mind?</p>",
        "id": 289393328,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657664534
    },
    {
        "content": "<p>sure, something of the likes: </p>\n<p>Sure! <br>\nsomething like this: </p>\n<p>theorem Equivar (a : alfa) (h :alfa -&gt;beta) (g : Type  -&gt; Type) :  f(g(a)) =g (f (a)) :=<br>\nbegin ...</p>\n<p>--type of g, depends on whether its input is alfa o beta</p>\n<p>so then if i define two functions, prove if they have such property<br>\ndef blah : alfa -&gt; beta := something<br>\ndef bleh: type -&gt; type := else</p>",
        "id": 289396311,
        "sender_full_name": "Jorge Medina",
        "timestamp": 1657666657
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.commute\">docs#function.commute</a>?</p>",
        "id": 289397888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657667776
    },
    {
        "content": "<p>Or possibly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.semiconj\">docs#function.semiconj</a>, since it sounds like you're asking about two different <code>g</code>s</p>",
        "id": 289397966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657667866
    },
    {
        "content": "<p>That looks just like it! Thank you!<br>\none more question that occur to me would be, is it possible in Lean to show or prove if a particular set of functions have that property?<br>\nlike: <br>\nexample: fun1(fun2 x) = fun2(fun1 x) := <br>\nlike with a trivial example as:<br>\n def fun1 (x:R) := x <br>\n def fun2 (x:R):= x*0<br>\nis there tactics for that?</p>",
        "id": 289401083,
        "sender_full_name": "Jorge Medina",
        "timestamp": 1657670627
    },
    {
        "content": "<p>Can you write that as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>?</p>",
        "id": 289417507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657690570
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">):</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">boo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">this_commutes</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span> <span class=\"o\">,</span> <span class=\"n\">function.commute</span> <span class=\"n\">foo</span> <span class=\"n\">boo</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">boo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">boo</span> <span class=\"n\">foo</span> <span class=\"n\">x.</span>\n</code></pre></div>\n<p>I think I just managed to prove it there but from my understanding of lean. To prove that two functions commute I need to be able to  write f(b( x) = b (f (x)). And not write in reverse as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">):</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">boo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">this_commutes</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span> <span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">boo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">boo</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>  <span class=\"n\">function.commute</span> <span class=\"n\">foo</span> <span class=\"n\">boo</span>\n</code></pre></div>\n<p>right? or are these two equivalent?</p>",
        "id": 289450806,
        "sender_full_name": "Jorge Medina",
        "timestamp": 1657715254
    },
    {
        "content": "<p>Neither of those statements make sense. The first is saying that <code>foo</code> and <code>boo</code> commute for all <code>x</code>, but <code>x</code> isn't used anywhere! The second one is effectively the same as saying that <code>ℕ</code> is a natural.</p>",
        "id": 289451119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657715385
    },
    {
        "content": "<p>What you want is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">this_commutes</span> <span class=\"o\">:</span> <span class=\"n\">function.commute</span> <span class=\"n\">foo</span> <span class=\"n\">boo</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- your proof here</span>\n</code></pre></div>",
        "id": 289451274,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657715426
    }
]