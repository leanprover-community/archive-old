[
    {
        "content": "<p>Are there any lemmas to help me make progress on this goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.fold</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_associative</span> <span class=\"n\">α</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_commutative</span> <span class=\"n\">α</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">equiv.arrow_congr</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">equiv.arrow_congr</span> <span class=\"n\">g</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">is_associative.assoc</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">equiv.arrow_congr</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">equiv.arrow_congr</span> <span class=\"n\">g</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">is_commutative.comm</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]}⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.fold</span> <span class=\"o\">(</span><span class=\"n\">option.lift_or_get</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n            <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">∘</span> <span class=\"n\">g.symm</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.fold</span> <span class=\"o\">(</span><span class=\"n\">option.lift_or_get</span> <span class=\"o\">(</span><span class=\"n\">equiv.arrow_congr</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">equiv.arrow_congr</span> <span class=\"n\">g</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n            <span class=\"n\">none</span> <span class=\"n\">some</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Should those <code>is_associative</code> and <code>is_commutative</code> instances be in mathlib?</p>",
        "id": 214339680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603472928
    },
    {
        "content": "<p>I suppose a likely useful building block would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">option_congr</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">option.map</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">option.map</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>does that exist?</p>",
        "id": 214345302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603475806
    },
    {
        "content": "<p>Is there the automatic construction of a <code>equiv</code> of <code>set.inj_on</code>?</p>",
        "id": 214345888,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603476062
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set.image_of_inj_on\">docs#equiv.set.image_of_inj_on</a></p>",
        "id": 214358977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603483180
    },
    {
        "content": "<p>(open <code>data/equiv/basic</code>, search for <code>inj_on</code>)</p>",
        "id": 214359060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603483206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, can you explain the link between your question and mine?</p>",
        "id": 214359546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603483452
    },
    {
        "content": "<p>Since <code>option.some</code> is injective,  you have that (handwavy notation) <code>α ≃ option.some '' α</code>, then transitively with <code>β</code>, then identify <code>none</code> with each other.</p>",
        "id": 214360139,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603483777
    },
    {
        "content": "<p>Which is what your explicit structure does. I was wondering if there was shorthand for it.</p>",
        "id": 214360213,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603483805
    }
]