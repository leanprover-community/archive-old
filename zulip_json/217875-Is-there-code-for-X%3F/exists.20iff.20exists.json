[
    {
        "content": "<p>Is there a more concise way to prove the following? I would expect that there is a lemma for that, but <code>library_search</code> did not find anything.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hr</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hr</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287592525,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1656343072
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_congr\">docs#exists_congr</a> or <code>simp_rw h</code></p>",
        "id": 287592603,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656343095
    },
    {
        "content": "<p>There are also variants for nested existentials. See docs#exists₂_congr.  Each direction is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.imp\">docs#Exists.imp</a> (and variants docs#Exists₂.imp, etc...).</p>",
        "id": 287592783,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656343185
    },
    {
        "content": "<p>I had no idea that simp_rw is so powerful, thank you.</p>",
        "id": 287592942,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1656343238
    }
]