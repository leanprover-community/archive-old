[
    {
        "content": "<p>I might have forgotten how to search but I cannot find anything like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">le.to_submodule</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">submodule.of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does it already exist?</p>",
        "id": 318313032,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1672255466
    },
    {
        "content": "<p>you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.comap\">docs#submodule.comap</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.subtype\">docs#submodule.subtype</a></p>",
        "id": 318316356,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672257033
    },
    {
        "content": "<p>your <code>h</code> isn't even needed, and you will end up with the intersection of <code>p</code> and <code>p'</code> (as a submodule of <code>p'</code>)</p>",
        "id": 318316414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672257071
    }
]