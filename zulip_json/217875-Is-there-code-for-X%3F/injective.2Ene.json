[
    {
        "content": "<p>Dear All,</p>\n<p>I found myself needing the lemmas below, that I could not find in mathlib.  Of course, I could replace them by their proofs, when I need them, but it feels like these lemmas might be useful.  In particular, <code>injective.ne (a ≠ 0)</code> is used a lot in usual mathematical arguments, since rings have opposites (what an unnatural assumption).  Should the lemmas below be imported to mathlib?  Should there be a few general statements saying that homs (with appropriate assumptions) are injective if and only if they map non-zero elements to non-zero elements?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.injective.ne_of_inj_algebra_map</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.injective_int_real</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.eq_int_cast</span><span class=\"o\">,</span> <span class=\"n\">int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.injective.ne</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">polynomial.injective.ne_of_inj_algebra_map</span> <span class=\"n\">f0</span> <span class=\"n\">polynomial.injective_int_real</span>\n</code></pre></div>",
        "id": 221280031,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609408035
    },
    {
        "content": "<p>I usually use <code>mt f_inj.eq</code></p>",
        "id": 221281027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609409610
    },
    {
        "content": "<p>it seems easier to just use <code>mt</code> rather than make contrapositive versions of everything</p>",
        "id": 221281077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609409650
    },
    {
        "content": "<p>Thanks for the suggestion!  Let me internalize this and see how it works in the lemmas above!</p>",
        "id": 221281126,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609409740
    },
    {
        "content": "<p>I am missing something very basic here: I have been trying to get the contrapositive, but none of <code>mt h</code>, <code>mt h_inj</code>,<code>mt h_inj.eq</code>, <code>mt h.eq</code> works in the first lemma above.  After <code>unfold</code>ing <code>h</code>, I get the impression that Lean does not like the two variables implicit in <code>h</code>, but I have failed to give them explicitly, even with <code>@h [...]</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial.injective.ne_of_inj_algebra_map</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">function.injective</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mt</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n<span class=\"c1\">--type mismatch at application</span>\n<span class=\"c1\">--  mt h</span>\n<span class=\"c1\">--term</span>\n<span class=\"c1\">--  h</span>\n<span class=\"c1\">--has type</span>\n<span class=\"c1\">--  ∀ ⦃a₁ a₂ : R⦄, ⇑(algebra_map R A) a₁ = ⇑(algebra_map R A) a₂ → a₁ = a₂</span>\n<span class=\"c1\">--but is expected to have type</span>\n<span class=\"c1\">--  ?m_1 → ?m_2</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221283400,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609412666
    },
    {
        "content": "<p>What you've written can't be right because <code>mt</code> is expecting an input which is a proof of P -&gt; Q, and you're giving it <code>@h</code> which is much more complicated. Do you just need brackets around the (@h ...)?</p>",
        "id": 221283574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609412929
    },
    {
        "content": "<p><code>mt</code> is a function so will eat the next term it sees as its input -- function application has super-high binding power or priority or whatever it's called -- the BIDMAS thing.</p>",
        "id": 221283603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609412983
    },
    {
        "content": "<p>\"precedence\" maybe?</p>",
        "id": 221283656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413026
    },
    {
        "content": "<p>Ok, this is part of the issue!  The other part is that I probably gave the wrong inputs to <code>h</code>.  I will fiddle with this a little longer!</p>\n<p>Thanks!</p>",
        "id": 221283712,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609413122
    },
    {
        "content": "<p>Just <code>apply mt</code> and then pick up the pieces maybe?</p>",
        "id": 221283737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609413157
    },
    {
        "content": "<p>ok, I feel very clumsy, but what's below works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial.injective.ne_of_inj_algebra_map</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mt</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_false</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with <code>show_term</code> and some compressing, this is what it becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial.injective.ne_of_inj_algebra_map</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f0</span> <span class=\"o\">(</span><span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">not_false</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221283847,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609413345
    },
    {
        "content": "<p>that looks odd... you shouldn't need <code>not_false</code></p>",
        "id": 221284154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413825
    },
    {
        "content": "<p>that's the identity function</p>",
        "id": 221284157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413838
    },
    {
        "content": "<p>I think <code>f0</code> should be the last argument to <code>mt</code></p>",
        "id": 221284195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413851
    },
    {
        "content": "<p>does <code>mt (map_injective (algebra_map R A) h) f0</code> work?</p>",
        "id": 221284207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413878
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 221284234,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609413948
    },
    {
        "content": "<p>I may be making my life complicated by combining the injectivity of <code>h</code>and the injectivity of the induced map on <code>polynomial R</code>, though.</p>",
        "id": 221284313,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414005
    },
    {
        "content": "<p>Oh, the <code>{{}}</code> is getting in the way</p>",
        "id": 221284315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414010
    },
    {
        "content": "<p>maybe <code>(map_injective (algebra_map R A) h).eq_iff.1</code> works?</p>",
        "id": 221284347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414062
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_iff.1</span><span class=\"o\">,</span>\n\n<span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 221284395,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414098
    },
    {
        "content": "<p>.2</p>",
        "id": 221284399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414113
    },
    {
        "content": "<p>oh hey, <code>injective.ne</code> is a thing</p>",
        "id": 221284408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414127
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 221284410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414129
    },
    {
        "content": "<p>yes, I was using <code>injective.ne</code> in my original proof.</p>",
        "id": 221284415,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414146
    },
    {
        "content": "<p>still <code>mt (injective_proof).eq_iff.2 f0</code> I mean</p>",
        "id": 221284424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414169
    },
    {
        "content": "<p>ok if <code>injective.ne</code> exists already then <code>(injective_proof).ne f0</code> is better</p>",
        "id": 221284486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414222
    },
    {
        "content": "<p>injective_proof of the map on rings, right?  what is called <code>h</code>, to be clear?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial.injective.ne_of_inj_algebra_map</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_iff.2</span> <span class=\"n\">f0</span><span class=\"o\">,</span> <span class=\"c1\">-- does not work</span>\n<span class=\"c1\">--type mismatch at application</span>\n<span class=\"c1\">--  mt h.eq_iff.mpr</span>\n<span class=\"c1\">--term</span>\n<span class=\"c1\">--  h.eq_iff.mpr</span>\n<span class=\"c1\">--has type</span>\n<span class=\"c1\">--  ?m_1 = ?m_2 → ⇑(algebra_map R A) ?m_1 = ⇑(algebra_map R A) ?m_2</span>\n<span class=\"c1\">--but is expected to have type</span>\n<span class=\"c1\">--  map (algebra_map R A) f = map (algebra_map R A) 0 → ?m_1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221284520,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414272
    },
    {
        "content": "<p>But looking at your theorem, it looks like it's just saying <code>injective (algebra_map R A) -&gt; injective (map (algebra_map R A))</code></p>",
        "id": 221284531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414295
    },
    {
        "content": "<p>.1 then</p>",
        "id": 221284584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414323
    },
    {
        "content": "<p>I just try it both ways and see which one lean likes</p>",
        "id": 221284590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414345
    },
    {
        "content": "<p>you can see in the error that the arrow is going the wrong way</p>",
        "id": 221284599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414365
    },
    {
        "content": "<p>Yes, the theorem should be saying that is the map on coefficients is injective, then the map on polynomials is injective.</p>",
        "id": 221284605,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414381
    },
    {
        "content": "<p>then why not prove that?</p>",
        "id": 221284623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414398
    },
    {
        "content": "<p>and use <code>injective.ne</code> or <code>injective.eq_iff</code> or whatever on the result</p>",
        "id": 221284631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414418
    },
    {
        "content": "<p>What if you start with <code>contrapose! f0</code>?</p>",
        "id": 221284680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609414454
    },
    {
        "content": "<p>Yes, I am happy with this.  I was wondering whether the lemmas above are something that is good to have in mathlib, that's all!<br>\nI am happy to learn new ways to prove stuff, though!</p>",
        "id": 221284685,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414476
    },
    {
        "content": "<p>Do we have the theorem about <code>injective (algebra_map R A) -&gt; injective (map (algebra_map R A))</code>? That's the version that looks good for mathlib</p>",
        "id": 221284695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414501
    },
    {
        "content": "<p>this stuff with negations in it looks too specialized</p>",
        "id": 221284707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414517
    },
    {
        "content": "<p>with <code>contrapose! f=0</code>, this is the state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">A</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"n\">f0</span><span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 221284767,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414570
    },
    {
        "content": "<p>Isn't this a cleaner state?</p>",
        "id": 221284786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609414620
    },
    {
        "content": "<p>oh, <code>map_injective</code> is literally the theorem I said</p>",
        "id": 221284789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414627
    },
    {
        "content": "<p>Yes, and it is also the one whose contrapositive I was trying to prove!</p>",
        "id": 221284792,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414647
    },
    {
        "content": "<p>There should be a theorem that a function is injective iff <code>f x = 0 -&gt; x = 0</code> and variations on that</p>",
        "id": 221284844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414699
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial.injective.ne_of_inj_algebra_map</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span>  <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">map_injective</span> <span class=\"n\">_</span>  <span class=\"n\">h</span> <span class=\"n\">f0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221284852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609414729
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.injective_iff\">docs#ring_hom.injective_iff</a></p>",
        "id": 221284861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414767
    },
    {
        "content": "<p>Ah, thanks for <code>ring_hom.injective_iff</code>!</p>",
        "id": 221284924,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609414843
    },
    {
        "content": "<p>Cleaner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">map_injective</span> <span class=\"n\">_</span>  <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f0</span><span class=\"o\">])</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221284936,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609414880
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"n\">f0</span>\n</code></pre></div>",
        "id": 221284990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609414956
    },
    {
        "content": "<p>So, if I wanted to use the proof with <code>simpa</code> in the middle of another proof, how should I do to avoid a \"non-terminal <code>simp</code>\"?</p>",
        "id": 221285054,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415045
    },
    {
        "content": "<p><code>have : map (algebra_map R A) f ≠ 0 := by simpa using (map_injective (algebra_map R A) h).ne f0</code></p>",
        "id": 221285068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609415068
    },
    {
        "content": "<p>ok, thanks!</p>",
        "id": 221285069,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415080
    },
    {
        "content": "<p>for some reason, I do not like <code>have</code>, but this is just me!</p>",
        "id": 221285075,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415092
    },
    {
        "content": "<p><code>apply theorem foo bar (show map (algebra_map R A) f ≠ 0, by simpa using (map_injective (algebra_map R A) h).ne f0)</code></p>",
        "id": 221285090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609415124
    },
    {
        "content": "<p>Thanks!  I will learn to use <code>show</code>!</p>",
        "id": 221285158,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415187
    },
    {
        "content": "<p>That's funny because <code>have</code> is the only tactic we constantly use on paper. I still dream of getting to the point where, as in Isabelle, a (nontrivial) Lean proof would only be a sequence of <code>have : ..., by auto</code>.</p>",
        "id": 221285161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609415202
    },
    {
        "content": "<p>you may not need <code>show</code> depending on how much context lean has in <code>theorem foo bar _</code></p>",
        "id": 221285175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609415235
    },
    {
        "content": "<p>I <em>think</em> with <code>have</code>, but when I write lean arguments, I find that it slows down quite a bit and <code>refine</code> works <em>much</em> better!</p>",
        "id": 221285180,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415253
    },
    {
        "content": "<p>ok, I will practice with and without <code>show</code>.</p>",
        "id": 221285230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415298
    },
    {
        "content": "<p>with refine, <code>refine foo bar _, {simpa ...}, ...</code></p>",
        "id": 221285236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609415318
    },
    {
        "content": "<p>Thank you all for the suggestions!  Even though many of these bits and pieces were already in my mind, seeing them come together in this simple example is really useful!</p>",
        "id": 221285262,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415360
    },
    {
        "content": "<p>I am starting to understand the difference between <code>refine</code> and <code>apply</code>.  If I understand correctly, the use of the underscore may make a difference in the last suggestion <code>refine foo bar _, {simpa ...}, ...</code>, right?</p>",
        "id": 221285354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415453
    },
    {
        "content": "<p>e.g. <code>apply foo bar _, {simpa ...}, ...</code> may not generate the goal to be solved with <code>{simpa ...}</code>, correct?</p>",
        "id": 221285380,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609415485
    },
    {
        "content": "<p><code>refine</code> is cooler than <code>apply</code> because it knows the goals of every underscore. <code>apply</code> is just <code>refine</code> without underscores and it doesn't always work because of (a) the apply bug and (b) <code>apply F (by simp)</code> doesn't always work because Lean might not know what it's supposed to be proving by <code>simp</code> because of elaboration issues. <code>refine F (by simp) _ _ _</code> will work.</p>",
        "id": 221285852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609416114
    }
]