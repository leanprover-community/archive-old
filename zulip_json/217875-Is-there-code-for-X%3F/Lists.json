[
    {
        "content": "<p>I'm trying to get a sense of the built in methods associated to the list type. I know the basic stack methods for it.</p>\n<ul>\n<li>concatenate is ++</li>\n<li>(a :: l) is push</li>\n</ul>\n<p>Now, do the following operations need to be defined by hand?</p>\n<ul>\n<li>delete the ith entry</li>\n<li>add in x : T in the ith entry</li>\n<li>get the ith entry</li>\n<li>splice the list </li>\n<li>length of the list</li>\n</ul>",
        "id": 298062400,
        "sender_full_name": "Topologic",
        "timestamp": 1662762333
    },
    {
        "content": "<p>I'm assuming you mean Lean 3.  If so, you can enter <code>list.</code> in the <a href=\"https://leanprover-community.github.io/mathlib_docs/index.html\">mathlib docs</a> and lots will come up, much of it in <a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/list/basic.html\"><code>init.data.list.basic</code></a> which should be available automatically without imports.  Edit: There are more definitions in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/defs.html\">data.list.defs</a> (which you will need mathlib for).</p>",
        "id": 298064338,
        "sender_full_name": "Jason Rute",
        "timestamp": 1662763534
    },
    {
        "content": "<p>If Lean 4, then you can enter <code>List.</code> into Lean 4 and you should get an autocomplete with many functions.  Or look at the code in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/List\">src/Init/Data/List</a></p>",
        "id": 298064959,
        "sender_full_name": "Jason Rute",
        "timestamp": 1662763907
    },
    {
        "content": "<p>And I think you will find that all the operations you want are already defined or can be done in a standard way with other operations (especially in Lean 3 + mathlib).</p>",
        "id": 298066318,
        "sender_full_name": "Jason Rute",
        "timestamp": 1662764737
    },
    {
        "content": "<p>It might also help to mention your use case.  Operations on the \"ith\" element will be linear in <code>i</code>.  If you are using this for mathematical theorems it doesn't matter, but if you are using them for computing (say meta-programming in Lean 3 or regular programming in Lean 4), it could add up.  If you plan to iterate over all the elements in the list, then operations like <code>list.map</code> and <code>list.foldl</code> are good choices (or just plain recursion) even in mathematical definitions and theorems.</p>",
        "id": 298068875,
        "sender_full_name": "Jason Rute",
        "timestamp": 1662766734
    }
]