[
    {
        "content": "<p>This is probably a really dumb question, but I can't find any information in the docs on definitional lemmas for the complex or real inner products. I need to compute the inner product of two constant vectors. Can you help me with this?</p>",
        "id": 257100156,
        "sender_full_name": "The Leanest",
        "timestamp": 1633976537
    },
    {
        "content": "<p>It's better if you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 257100405,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633976677
    },
    {
        "content": "<p>Your space gets <code>inner_product</code> space structure from some instance. You should figure out which instance do you use, then look for lemmas below the definition of this instance.</p>",
        "id": 257101720,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633977396
    },
    {
        "content": "<p>If they do not exist, then you should add them (and PR).</p>",
        "id": 257101745,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633977415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448090\">@The Leanest</span> Do you want something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 257102458,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633977817
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ! How does this work under the hood i.e. what ways is it extensible in?</p>",
        "id": 257102596,
        "sender_full_name": "The Leanest",
        "timestamp": 1633977878
    },
    {
        "content": "<p>What do you mean by extensible? Do you want to define an <code>inner_product</code> instance for another type?</p>",
        "id": 257112474,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633983834
    },
    {
        "content": "<p>I mean to support tensor products of the complex vector type in my code</p>",
        "id": 257112738,
        "sender_full_name": "The Leanest",
        "timestamp": 1633983982
    },
    {
        "content": "<p>I've already run into issues, actually: how do you show <code>has_scalar</code> on a <code>euclidean_space complex (fin 2)</code>?</p>",
        "id": 257112772,
        "sender_full_name": "The Leanest",
        "timestamp": 1633984005
    },
    {
        "content": "<p>It should already be there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 257113706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633984587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448090\">The Leanest</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Definitional.20lemmas.20for.20.E2.9F.AA.2C.20.E2.9F.AB_.E2.84.82/near/257112738\">said</a>:</p>\n<blockquote>\n<p>I mean to support tensor products of the complex vector type in my code</p>\n</blockquote>\n<p>We have tensor products of vector spaces (actually two flavors: <code>algebra/tensor_product</code> for the tensor product of two spaces, or <code>algebra/pi_tensor_product</code> for an indexed family of spaces), but I don't think instances of inner product spaces are defined on either of them yet.</p>",
        "id": 257114162,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1633984831
    },
    {
        "content": "<p>Indeed, grepping for <code>inner_product_space.*⊗</code> doesn't produce anything. This would be a great thing to add to mathlib!</p>",
        "id": 257114405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633985005
    }
]