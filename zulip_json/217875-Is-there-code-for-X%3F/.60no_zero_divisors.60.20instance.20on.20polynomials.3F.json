[
    {
        "content": "<p>Dear All,</p>\n<p>is the instance below already in mathlib?  I could not find it and I imagine that it would belong to mathlib.</p>\n<p>Note that the proof is a (slightly shortened) version of the relevant proof in the implication <code>integral_domain R ==&gt; integral_domain (polynomial R)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.definitions</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">no_zero_divisors</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">leading_coeff_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">leading_coeff_eq_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">leading_coeff_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">leading_coeff_mul</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230979812,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616133144
    },
    {
        "content": "<p>I am trying to do the same for the <code>mv_polynomial</code> case, but, copying the already present relevant lemma, and using weaker assumptions, I get an error that, to me, seems unrelated: does anyone know what is going on?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_finset_rename</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_finset_rename</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span>\n    <span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">finset.subset_union_left</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">})</span> <span class=\"n\">p</span> <span class=\"bp\">*</span>\n<span class=\"c1\">-- error under the union symbol:</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">σ : Type u_2,</span>\n<span class=\"cm\">_inst_1 : comm_semiring R,</span>\n<span class=\"cm\">_inst_2 : no_zero_divisors R,</span>\n<span class=\"cm\">s : finset σ,</span>\n<span class=\"cm\">p : mv_polynomial {x // x ∈ s} R,</span>\n<span class=\"cm\">t : finset σ,</span>\n<span class=\"cm\">q : mv_polynomial {x // x ∈ t} R,</span>\n<span class=\"cm\">h : ⇑(rename coe) p * ⇑(rename coe) q = 0,</span>\n<span class=\"cm\">ᾰ : {x // x ∈ s},</span>\n<span class=\"cm\">x : ?m_1</span>\n<span class=\"cm\">⊢ has_union (finset σ)</span>\n<span class=\"cm\">Additional information:</span>\n<span class=\"cm\">/home/damiano/Matematica/Lean/mathlib_PRs/src/algebra/mwe.lean:13:4: context: switched to simple application elaboration procedure because failed to use expected type to elaborate it, error message</span>\n<span class=\"cm\">  too many arguments</span>\n<span class=\"cm\">-/</span>\n    <span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">finset.subset_union_right</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">})</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">rename_injective</span> <span class=\"n\">_</span> <span class=\"n\">subtype.val_injective</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial.integral_domain_fintype</span> <span class=\"n\">R</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">],</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">subtype.val</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230990570,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616143217
    },
    {
        "content": "<p>I would assume that if that proof is used in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.integral_domain\">docs#polynomial.integral_domain</a>, then we don't have the weaker result you're looking for yet.</p>",
        "id": 230990609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616143237
    },
    {
        "content": "<p>You want <code>classical,</code> there</p>",
        "id": 230990672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616143278
    },
    {
        "content": "<p>Eric, thanks for your confirmation!  I think that Jakob is already in the process of adding this instance.</p>",
        "id": 230990674,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616143279
    },
    {
        "content": "<p>Eric, indeed: classical works!  Now, of course the error is that I actually have to take care of removing the unnecessary hypotheses!</p>\n<p>Thanks a lot!</p>",
        "id": 230991113,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616143556
    }
]