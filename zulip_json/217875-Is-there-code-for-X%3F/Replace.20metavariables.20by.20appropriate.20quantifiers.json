[
    {
        "content": "<p>When Lean provides a property with some metavariables, is there a simple automatic way to replace the property by a quantified version with no metavariables?</p>\n<p>Here is a concrete example. I have the definition of the image of  a set,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"kd\">theorem</span><span class=\"bp\">.</span><span class=\"n\">direct_image</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>and I want to apply this the followaing way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span>  <span class=\"kd\">theorem</span><span class=\"bp\">.</span><span class=\"n\">direct_image</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean can infer x and A, but not  f, so we get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">''</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with some metavariable. I would love to get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">H2bis</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>Is there an automatic way to go from H2 to H2bis (or to get directly H2bis)?</p>",
        "id": 242178836,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1623316612
    },
    {
        "content": "<p>Often this is a sign that you are over using implicit arguments, and you should have just made <code>f</code> an explicit argument in the first place, so that it was possible to specify it here</p>",
        "id": 242181647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623318266
    },
    {
        "content": "<p>While opinions vary, mathlib probably suffers a lot from this.</p>",
        "id": 242181693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623318292
    },
    {
        "content": "<p>You can use @ at the call site to make all arguments explicit.</p>",
        "id": 242181752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623318331
    },
    {
        "content": "<p>But this is slightly stinky.</p>",
        "id": 242181855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623318366
    }
]