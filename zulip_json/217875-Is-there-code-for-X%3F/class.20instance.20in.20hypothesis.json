[
    {
        "content": "<p>Is it possible to have the lean type system recognize class instances in hypotheses? In tactic mode I have the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">V</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Profile</span> <span class=\"n\">V</span> <span class=\"n\">X</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">nonempty</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>Clearly, the hypothesis <code>d</code> has the required information. How can I make it accessible via tactic mode? Variables <code>a</code> through <code>d</code> were achieved through <code>intros</code> on a Pi type. Thanks!</p>",
        "id": 222663066,
        "sender_full_name": "Chase Norman",
        "timestamp": 1610581266
    },
    {
        "content": "<p><code>apply_instance</code> will close that goal, as I think will <code>assumption</code></p>",
        "id": 222663227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610581401
    },
    {
        "content": "<p>Unfortunately, this is not a goal. It is an error that arises when I attempt to use a function that requires a <code>nonempty fintype</code> as input.</p>",
        "id": 222663393,
        "sender_full_name": "Chase Norman",
        "timestamp": 1610581541
    },
    {
        "content": "<p>is there a way that I can have it surface these errors as a goal instead of failing?</p>",
        "id": 222663461,
        "sender_full_name": "Chase Norman",
        "timestamp": 1610581578
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 222663528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610581647
    },
    {
        "content": "<p>(at a guess, you're looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#resetI\">tactic#resetI</a>)</p>",
        "id": 222663618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610581702
    },
    {
        "content": "<p>You might be able to use <code>@</code> in front of that function and supply the instance manually.</p>",
        "id": 222663627,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610581707
    },
    {
        "content": "<p>introsI was exactly what I was looking for, thanks!</p>",
        "id": 222663989,
        "sender_full_name": "Chase Norman",
        "timestamp": 1610581958
    },
    {
        "content": "<p>In general, the type class system knows about everything \"before the colon\" (in a theorem statement) but doesn't know about things which appear after the colon, or which show up later. The <code>...I</code> tactics are a way of inserting stuff which shows up in other ways, into the type class system.</p>",
        "id": 222666351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610583665
    }
]