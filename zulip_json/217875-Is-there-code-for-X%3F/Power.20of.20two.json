[
    {
        "content": "<p>How can I state that a natural is a power of two? For context, I'm defining <a href=\"https://en.wikipedia.org/wiki/Sharkovskii%27s_theorem\">Sharkovskii's ordering of the natural numbers</a>.</p>",
        "id": 274478905,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646698895
    },
    {
        "content": "<p>Membership in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.powers\">docs#submonoid.powers</a>?</p>",
        "id": 274479025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646698990
    },
    {
        "content": "<p>Sounds pretty remote to me.</p>",
        "id": 274479042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646699017
    },
    {
        "content": "<p><code>n ∈ submonoid.powers (2 : ℕ)</code></p>",
        "id": 274479115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646699051
    },
    {
        "content": "<p>This is likely going to be noncomputable, I presume?</p>",
        "id": 274479147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646699079
    },
    {
        "content": "<p>It's a Prop?</p>",
        "id": 274479155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646699088
    },
    {
        "content": "<p>Do you mean \"not decidable\"?</p>",
        "id": 274479171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646699096
    },
    {
        "content": "<p>I mean, it's trivial to write a suitable <code>decidable</code> instance</p>",
        "id": 274479207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646699121
    },
    {
        "content": "<p>(my resulting def would be noncomputable)</p>",
        "id": 274479208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646699123
    },
    {
        "content": "<p>But yes, probably such a decidable instance doesn't yet exist. Write one, and play the \"how general can I make this\" game?</p>",
        "id": 274479227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646699147
    },
    {
        "content": "<p>And do we have any glue between this and prime factorization? In particular, I want to easily access the exponent of <code>2</code> (using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_val_nat\">docs#padic_val_nat</a> I presume) and the odd part.</p>",
        "id": 274479484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646699337
    },
    {
        "content": "<p><del>do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.log2\">docs#nat.log2</a>?</del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.log\">docs#nat.log</a></p>",
        "id": 274479911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646699631
    },
    {
        "content": "<p><code>2 ^ nat.log n 2 = n</code> is maybe a better condition for you</p>",
        "id": 274479993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646699681
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">nat.decidable_mem_powers</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">submonoid.powers</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submonoid.mem_powers_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_pow</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">submonoid.mem_powers_iff</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">nat.log</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submonoid.mem_powers_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">nat.log</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.log_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274481655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646700903
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 274508829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646727539
    },
    {
        "content": "<p>I'm sure you can make that less awful!</p>",
        "id": 274509574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646728197
    },
    {
        "content": "<p>Indeed! I managed to merge the <code>1</code> and <code>n + 2</code> cases.</p>",
        "id": 274526764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646738237
    },
    {
        "content": "<p>It's possible the proof is easier with <code>nat.clog</code>, I didn't try</p>",
        "id": 274527398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646738511
    },
    {
        "content": "<p>Or with <code>nat.log n x = nat.clog n x</code>!</p>",
        "id": 274527461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646738523
    },
    {
        "content": "<p>Sorry, I'm sticking to <code>padic_val_nat</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.mem_submonoid_powers_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">submonoid.powers</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">padic_val_nat</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">one_pow</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">padic_val_nat_pow_self</span> <span class=\"n\">le_add_self</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274527533,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646738552
    },
    {
        "content": "<p>Do we have anywhere that <code>padic_val_nat = nat.log</code>? Or do they diverge at 0?</p>",
        "id": 274527585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646738578
    },
    {
        "content": "<p>Hint: <code>padic_val_nat 2 9 = 0</code></p>",
        "id": 274527651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646738612
    }
]