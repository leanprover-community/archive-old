[
    {
        "content": "<p>There's <code>docs#exists_forall_deriv_within_Icc_eq_of_lipschitz_of_continuous</code> in analysis.ODE.picard_lindelof, which of course is very nice. It seems to me that we need a bunch of weaker variants of these, e.g. for time-independent ODEs, equation being cont_diff, etc. Do these exist or should I make a couple of these?</p>",
        "id": 296431842,
        "sender_full_name": "Winston Yin",
        "timestamp": 1661973007
    },
    {
        "content": "<p>For example, I have already written one for time-independent <code>cont_diff</code> ODEs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_forall_deriv_within_Ioo_eq_of_cont_diff</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">proper_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">t₀</span> <span class=\"bp\">=</span> <span class=\"n\">x₀</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">metric.ball</span> <span class=\"n\">t₀</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 296434337,
        "sender_full_name": "Winston Yin",
        "timestamp": 1661973976
    },
    {
        "content": "<p>I've made a PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/16348\">#16348</a>) for some corollaries to the existence theorem of ODE solutions. It seems easier to me to write the very long hypotheses of the theorem as a single existential <code>is_picard_lindelof</code>. Using the corollaries, it is shown that time-independent cont_diff ODEs have solutions in an open interval. Comments welcome!</p>",
        "id": 296702561,
        "sender_full_name": "Winston Yin",
        "timestamp": 1662067562
    },
    {
        "content": "<p>You might as well make <code>is_picard_lindelof</code> a structure; it will not be a Prop but you can wrap a <code>nonempty</code> around it. The main advantage would be that when filling in the <code>is_picard_lindelof</code> hypothesis, people can be clear about which condition they're proving by using the <code>{ field := proof, ... }</code> syntax.</p>",
        "id": 296708515,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662070647
    },
    {
        "content": "<p>Such a structure already exists, i.e. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/picard_lindelof\">docs#picard_lindelof</a>. Are you suggesting that the hypothesis <code>(h : is_picard_lindelof ...)</code> be replaced by <code>(h : nonempty (picard_lindelof E))</code>?</p>",
        "id": 296709725,
        "sender_full_name": "Winston Yin",
        "timestamp": 1662071312
    },
    {
        "content": "<p>Oh it exists. But you can't wrap picard_lindelof inside nonempty because your conclusions use some data fields of picard_lindelof. So maybe define is_picard_lindelof as a structure and <del>have picard_lindelof extend it</del>?</p>",
        "id": 296711358,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662072426
    },
    {
        "content": "<p>No, <code>extends</code> is not correct way to do it, you need to state that <code>to_fun, t_min, t₀, t_max, x₀</code> satisfy the <code>nonempty (is_picard_lindelof _ _ _ _ _)</code> predicate. Also beware that <code> t₀, C, R</code> have different types in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_forall_deriv_within_Icc_eq_of_lipschitz_of_continuous\">docs#exists_forall_deriv_within_Icc_eq_of_lipschitz_of_continuous</a> than in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/picard_lindelof\">docs#picard_lindelof</a>.</p>",
        "id": 296711952,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662072817
    },
    {
        "content": "<blockquote>\n<p>Also beware that  t₀, C, R have different types in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_forall_deriv_within_Icc_eq_of_lipschitz_of_continuous\">docs#exists_forall_deriv_within_Icc_eq_of_lipschitz_of_continuous</a> than in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/picard_lindelof\">docs#picard_lindelof</a>.</p>\n</blockquote>\n<p>Yes, for <code>is_picard_lindelof</code> I've followed the typing in <code>docs#exists_forall_deriv_within_Icc_eq_of_lipschitz_of_continuous</code>.</p>",
        "id": 296715933,
        "sender_full_name": "Winston Yin",
        "timestamp": 1662075662
    },
    {
        "content": "<p><code>is_picard_lindelof</code> as a structure would include fields <code>L, C, R</code>, yes? Don't we run into the same problem that we cannot satisfy the <code>L</code> field by <code>obtain</code>ing a Lipschitz constant <code>L</code> from some <code>∃ L</code>?</p>",
        "id": 296716324,
        "sender_full_name": "Winston Yin",
        "timestamp": 1662076024
    },
    {
        "content": "<p>What I mean is, when the goal is <code>ℝ</code> for, say, the Lipschitz constant, we want to get it from a theorem like <code>cont_diff_at.exists_lipschitz_on_with</code>, but Lean wouldn't allow me to do <code>obtain ⟨L, ...⟩ := cont_diff_at.exists_lipschitz_on_with</code> because the goal is not a <code>Prop</code>.</p>",
        "id": 296716597,
        "sender_full_name": "Winston Yin",
        "timestamp": 1662076217
    },
    {
        "content": "<p>So in terms of user experience, when I see a goal like <code>nonempty (is_picard_lindelof ...)</code>, I'd be first tempted to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨{</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"bp\">...</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"bp\">...</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"bp\">...</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">etc</span> <span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>and I'd run into the problem with <code>Exists.elim</code> into a non-<code>Prop</code> goal. On the other hand, if I state <code>is_picard_lindelof</code> as one predicate, I'd be more inclined to construct the <code>L, C, R</code> first, then do <code>refine ⟨L, C, R, _⟩</code>, naturally avoiding this problem.</p>",
        "id": 296718795,
        "sender_full_name": "Winston Yin",
        "timestamp": 1662078155
    },
    {
        "content": "<p>Would somebody be interested to review this PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/16348\">#16348</a>)? It's got some review on the style but still needs comments on the maths.</p>",
        "id": 299870024,
        "sender_full_name": "Winston Yin",
        "timestamp": 1663722121
    },
    {
        "content": "<p>I'll try to find some time to look into it. Fyi there is a dedicated <code>PR reviews</code> stream which is better suited for pinging PRs</p>",
        "id": 299876899,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663728654
    },
    {
        "content": "<p>I didn’t know that! Thanks</p>",
        "id": 299877932,
        "sender_full_name": "Winston Yin",
        "timestamp": 1663729767
    }
]