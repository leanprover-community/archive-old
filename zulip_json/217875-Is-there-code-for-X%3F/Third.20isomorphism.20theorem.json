[
    {
        "content": "<p>I can't find the third isomorphism theorem for submodules or subgroups anywhere, do we not have this yet? (I need to show that <code>|M / S| * |S / T| = |M / T|</code>, assuming all these cardinalities are finite.)</p>",
        "id": 244935197,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625491370
    },
    {
        "content": "<p>Aren't we supposed to do this from lattice theory or something using <a href=\"https://github.com/leanprover-community/mathlib/blob/8ba94ab79b5d75bbb562665326666ea675c8ff88/src/linear_algebra/basic.lean#L2825\">https://github.com/leanprover-community/mathlib/blob/8ba94ab79b5d75bbb562665326666ea675c8ff88/src/linear_algebra/basic.lean#L2825</a> ?</p>",
        "id": 244936200,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1625491909
    },
    {
        "content": "<p>Oh wait, maybe that's the second.</p>",
        "id": 244936278,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1625491931
    },
    {
        "content": "<p>I believe that's the second :(</p>",
        "id": 244936658,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625492199
    },
    {
        "content": "<p>For subgroups:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"kd\">@[simp, to_additive quotient_add_group.map_coe]</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_coe</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T.normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient_group.map</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group.lift_mk'</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp, to_additive quotient_add_group.map_mk']</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_mk'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T.normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient_group.map</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.mk'</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group.lift_mk'</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T.normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hS</span> <span class=\"n\">hT</span>\n\n<span class=\"kd\">@[to_additive quotient_add_group.map_normal]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">map_normal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T.map</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.mk'</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">normal</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">conj_mem</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">induction_on'</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">subgroup.normal.conj_mem</span> <span class=\"n\">hT</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mk'_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_mul</span><span class=\"o\">,</span> <span class=\"n\">coe_inv</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The map from the isomorphism theorem for groups: `(G / S) / (T / S) → G / T`. -/</span>\n<span class=\"kd\">@[to_additive quotient_add_group.quotient_quotient_equiv_quotient_aux]</span>\n<span class=\"kd\">def</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">T.map</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">→*</span> <span class=\"n\">quotient</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">T.map</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">monoid_hom.id</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"n\">map_mk'</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.eq_one_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">@[simp, to_additive quotient_add_group.quotient_quotient_equiv_quotient_aux_coe]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux_coe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quotient_group.quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient_quotient_equiv_quotient_aux</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">quotient_group.map</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">monoid_hom.id</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group.lift_mk'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[to_additive quotient_add_group.quotient_quotient_equiv_quotient_aux_coe_coe]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux_coe_coe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient_quotient_equiv_quotient_aux</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quotient_group.quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group.lift_mk'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- Third isomorphism theorem for groups: `(G / S) / (T / S) ≃ G / T`. -/</span>\n<span class=\"kd\">@[to_additive quotient_add_group.quotient_quotient_equiv_quotient]</span>\n<span class=\"kd\">def</span> <span class=\"n\">quotient_quotient_equiv_quotient</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient_group.quotient</span> <span class=\"o\">(</span><span class=\"n\">T.map</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.mk'</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">≃*</span> <span class=\"n\">quotient_group.quotient</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_group.map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.mk'</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subgroup.le_comap_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.induction_on'</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.induction_on'</span> <span class=\"n\">x</span> <span class=\"bp\">$</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quotient_quotient_equiv_quotient_aux_coe_coe</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.map_coe</span><span class=\"o\">,</span>\n                <span class=\"n\">quotient_group.mk'_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.induction_on'</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quotient_group.map_coe</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.mk'_apply</span><span class=\"o\">,</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux_coe_coe</span><span class=\"o\">],</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">monoid_hom.map_mul</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quotient_group</span>\n</code></pre></div>",
        "id": 244938963,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625493468
    },
    {
        "content": "<p>For submodules, the <code>simp</code> lemmas seem to work a lot better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The map from the third isomorphism theorem for modules: `(M / S) / (T / S) → M / T`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">T.map</span> <span class=\"n\">S.mkq</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">quotient</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">liftq</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mapq</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">linear_map.id</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">mkq_apply</span><span class=\"o\">,</span> <span class=\"n\">mapq_apply</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk_eq_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux_mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S.quotient</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient_quotient_equiv_quotient_aux</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mapq</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">linear_map.id</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">liftq_apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"sd\">/-- Third isomorphism theorem for modules: `(M / S) / (T / S) ≃ M / T`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">quotient_quotient_equiv_quotient</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">T.map</span> <span class=\"n\">S.mkq</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">quotient</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">mapq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mkq</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_comap_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on'</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on'</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on'</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">quotient_quotient_equiv_quotient_aux</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">submodule</span>\n</code></pre></div>",
        "id": 244940573,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625494257
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8203\">#8203</a></p>",
        "id": 244942864,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625495435
    }
]