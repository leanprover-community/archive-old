[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 219089899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607353207
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 219091830,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607354073
    },
    {
        "content": "<p>it gives <code>f.to_int_linear_map</code>. I gave the <code>library_search</code> recipe to emphasize that it can be used to find data, not only proofs.</p>",
        "id": 219092101,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607354179
    },
    {
        "content": "<p>I'm surprised library search doesn't immediately find the \"default\" linear map, i.e. the trivial map.</p>",
        "id": 219092398,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607354312
    },
    {
        "content": "<p>Yeah, I didn't even try that because I made the same assumption as Adam</p>",
        "id": 219093283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607354727
    },
    {
        "content": "<p>It's true it's surprising that it doesn't give the zero map -- otherwise, <code>suggest</code> could have been helpful, as it gives several suggestions.  In fact,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>fails. It also doesn't find the zero map.</p>",
        "id": 219093758,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607354951
    },
    {
        "content": "<p>Probably because it's given by an instance <code>has_zero</code>, not a proper def.</p>",
        "id": 219093951,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607355021
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.to_int_linear_map\">docs#add_monoid_hom.to_int_linear_map</a></p>",
        "id": 219094894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607355448
    },
    {
        "content": "<p>What's going wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span> <span class=\"n\">N</span> <span class=\"bp\">→+</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.lmul'</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">⊗</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a''</span> <span class=\"o\">:=</span> <span class=\"n\">a'.to_int_linear_map</span><span class=\"o\">,</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219094995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607355490
    },
    {
        "content": "<p>imports?</p>",
        "id": 219095263,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607355618
    },
    {
        "content": "<p>Not sure, let's guess <code>algebra.algebra.basic</code>?</p>",
        "id": 219095285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607355630
    },
    {
        "content": "<p>If I pass the type parameters explicitly, I get a super nasty error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ιa</span> <span class=\"n\">ιb</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span> <span class=\"n\">N</span> <span class=\"bp\">→+</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.lmul'</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a''</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.to_int_linear_map</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">⊗</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">a'.to_int_linear_map</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"n\">_inst_20</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">_inst_20</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">)</span> <span class=\"n\">_inst_22</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">_inst_20</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">)</span> <span class=\"n\">_inst_22</span><span class=\"o\">))</span>\n    <span class=\"n\">N</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"n\">_inst_20</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">_inst_20</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">)</span> <span class=\"n\">_inst_22</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">_inst_20</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">)</span> <span class=\"n\">_inst_22</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_product.add_comm_monoid</span> <span class=\"n\">R</span> <span class=\"n\">_inst_20</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">_inst_20</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">)</span> <span class=\"n\">_inst_22</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">_inst_20</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">)</span> <span class=\"n\">_inst_22</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_add_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">)))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_product</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n       <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n       <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n    <span class=\"n\">N</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_add_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_product</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n          <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n          <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_product</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">))</span>\n             <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n             <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n          <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_add_monoid</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">N</span> <span class=\"n\">_inst_21</span><span class=\"o\">)))</span>\n</code></pre></div>\n</div></div>",
        "id": 219095385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607355688
    },
    {
        "content": "<p>It's the fact that <code>R</code> is a semiring and not a ring.</p>",
        "id": 219095924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607355923
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span> <span class=\"n\">N</span> <span class=\"bp\">→+</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.lmul'</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"n\">a'.to_int_linear_map</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219095952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607355936
    },
    {
        "content": "<p>But <code>add_monoid_hom.to_int_linear_map</code> doesn't even take <code>R</code> as an argument!</p>",
        "id": 219096001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607355959
    },
    {
        "content": "<p>Ah, I see the problem</p>",
        "id": 219096334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356105
    },
    {
        "content": "<p><code>haveI : add_comm_group (N ⊗[R] N) := infer_instance,</code> fails</p>",
        "id": 219096340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356107
    },
    {
        "content": "<p>Which it shouldn't, right?</p>",
        "id": 219096370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356119
    },
    {
        "content": "<p>Yeah, I think it's true that the tensor product of two semimodules over a semiring which just so happen to be abelian groups is again an abelian group.</p>",
        "id": 219096435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607356152
    },
    {
        "content": "<p>But I guess mathlib doesn't know this?</p>",
        "id": 219096455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607356166
    },
    {
        "content": "<p>One would have to track down where the <code>add_comm_group</code> on the tensor product comes from.</p>",
        "id": 219096637,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607356236
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.add_comm_group\">docs#tensor_product.add_comm_group</a></p>",
        "id": 219096793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356307
    },
    {
        "content": "<p>Right, so notice the <code>comm_ring R</code> assumption</p>",
        "id": 219096875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607356329
    },
    {
        "content": "<p>I think this can be relaxed to <code>comm_semiring</code></p>",
        "id": 219096912,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607356343
    },
    {
        "content": "<p>you just need either side to be an <code>add_comm_group</code> (as is basically clear from the next lines)</p>",
        "id": 219097030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356400
    },
    {
        "content": "<p>This is probably another instance of the \"Mathematicians never think about semirings\" thing...</p>",
        "id": 219097163,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607356461
    },
    {
        "content": "<p>the definition of <code>neg</code> will get more complicated though</p>",
        "id": 219097166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356466
    },
    {
        "content": "<p>Doesn't requiring just one side lead to multiple suitable instances for when both sides have neg?</p>",
        "id": 219097257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356526
    },
    {
        "content": "<p>yes</p>",
        "id": 219097266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356530
    },
    {
        "content": "<p>unless you use <code>choice</code> I guess</p>",
        "id": 219097275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356533
    },
    {
        "content": "<p>The easiest thing to do is probably </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">tensor_product.add_comm_group</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 219097324,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607356551
    },
    {
        "content": "<p>I mean, the instances will be non-defeq unless you define <code>neg</code> using choice</p>",
        "id": 219097387,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356569
    },
    {
        "content": "<p>If your goal is to prove <code>false</code> then it doesn't matter which definition you pick but in the real world you might care about the definition as well</p>",
        "id": 219097499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356629
    },
    {
        "content": "<p>My goal isn't to prove false, I just was cutting down my example</p>",
        "id": 219097531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356643
    },
    {
        "content": "<p>Can you get by with just a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>-linear map? Do you need negation for what you're actually working on?</p>",
        "id": 219097671,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607356693
    },
    {
        "content": "<p>Yes, negation is central to what I'm doing</p>",
        "id": 219097698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356705
    },
    {
        "content": "<p>I'm sort of skeptical that your original setup is really sensible, since if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is a ring that's an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra then it's also an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>⊗</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">R \\otimes \\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>-algebra</p>",
        "id": 219097708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356711
    },
    {
        "content": "<p>so wlog you could just assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring too, and save yourself the headaches</p>",
        "id": 219097732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356724
    },
    {
        "content": "<p>Yeah, I was considering just assuming <code>R</code> is a ring</p>",
        "id": 219097769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356745
    },
    {
        "content": "<p>I've ended up here because I was trying to extract some intermediate lemmas from my proof that currently just unfolds everything</p>",
        "id": 219097826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356775
    },
    {
        "content": "<p>But the intermediate states run into (semi)-issues that unfolding avoided</p>",
        "id": 219097858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356789
    },
    {
        "content": "<p>I think the reason I wanted <code>semiring R</code> is because <code>M</code> is _not_ necessarily a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> module</p>",
        "id": 219098035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356846
    },
    {
        "content": "<p>M?</p>",
        "id": 219098094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607356871
    },
    {
        "content": "<p>Ah heck, you're missing the context</p>",
        "id": 219098132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356885
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mul_general_aux</span> <span class=\"o\">{</span><span class=\"n\">ιa</span> <span class=\"n\">ιb</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ιa</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ιb</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ιa</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ιb</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">alternating_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">ιa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">alternating_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">ιb</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ιa</span> <span class=\"bp\">⊕</span> <span class=\"n\">ιb</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>is where my typeclasses are coming from. I need the same <code>R</code> for <code>M</code> and <code>N</code> to form the alternating_map</p>",
        "id": 219098249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607356926
    },
    {
        "content": "<p>I think the same logic applies, since you're mapping into N where you can subtract you might as well assume you can subtract in M too</p>",
        "id": 219098431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607357014
    },
    {
        "content": "<p>Sometimes it is useful to deal with <code>comm_semiring R</code>. E.g., it makes sense to deal with <code>fin n → \\R</code> as a semimodule over <code>nnreal</code>. Then the <code>submodule.span</code> is the cone generated by a set of vectors.</p>",
        "id": 219098537,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607357045
    },
    {
        "content": "<p>About the original example. Using <code>have : add_comm_group (N ⊗ N) := infer_instance</code> doesn't help because Lean immediately forgets the definition behind this <code>have</code>.</p>",
        "id": 219098719,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607357145
    },
    {
        "content": "<p>Sure, the intent of the <code>have</code> was just to check that the instance existed</p>",
        "id": 219098828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607357202
    },
    {
        "content": "<p>And in this case was a red herring because it didn't infer <code>[R]</code></p>",
        "id": 219098855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607357217
    },
    {
        "content": "<p>well, here is a suggestion</p>",
        "id": 219099662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607357573
    },
    {
        "content": "<p>The current definition of <code>neg</code> for the tensor product must actually involve multiplication by elements of R on one of the two factors</p>",
        "id": 219099721,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607357598
    },
    {
        "content": "<p>so we could replace it by an instance that uses <code>neg</code> for the same factor, and not have the other one</p>",
        "id": 219099888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607357636
    },
    {
        "content": "<p>logically I suppose it ought to be the left factor, because we have left modules</p>",
        "id": 219100556,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607357787
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">n1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">n1</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 219100594,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607357800
    },
    {
        "content": "<p>of course it won't be defeq to <code>neg n1 ⊗ₜ n2</code>, but that seems relatively unlikely to cause a problem</p>",
        "id": 219100698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607357842
    },
    {
        "content": "<p>I'm not so sure. E.g. <code>(-1) \\bu n</code> simplifies to <code>-n</code>.</p>",
        "id": 219100895,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607357924
    },
    {
        "content": "<p>Actually I guess this is a good thing...</p>",
        "id": 219100954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607357959
    },
    {
        "content": "<p>Not so sure about which part? that it wouldn't be a problem?</p>",
        "id": 219100986,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607357974
    },
    {
        "content": "<p>Yeah</p>",
        "id": 219101293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607358092
    },
    {
        "content": "<p>But it's not a problem. Forget what I said.</p>",
        "id": 219101316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607358102
    },
    {
        "content": "<p>I've relaxed the requirements of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.add_comm_group\">docs#tensor_product.add_comm_group</a> in <a href=\"https://github.com/leanprover-community/mathlib/issues/5305\">#5305</a></p>",
        "id": 219471206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607607017
    }
]