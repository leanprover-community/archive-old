[
    {
        "content": "<p>Do we have a variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nat.antidiagonal\">docs#finset.nat.antidiagonal</a> that produces a <code>k</code>-way split?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- When k=2 this is the \"same\" as finset.nat.antidiagonal -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">finset.nat.antidiagonal'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset.nat.mem_antidiagonal'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.nat.antidiagonal'</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 276971688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648541811
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/std_simplex\">docs#std_simplex</a>, which is pretty close.</p>",
        "id": 276971908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648541964
    },
    {
        "content": "<p>I was thinking something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.tuple</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.nat.antidiagonal'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse.bind</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ni</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">list.nat.antidiagonal'</span> <span class=\"n\">ni</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fin.cons</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">ni</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">list.nat.antidiagonal'</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"c1\">-- [![0, 0, 2], ![0, 1, 1], ![0, 2, 0], ![1, 0, 1], ![1, 1, 0], ![2, 0, 0]]</span>\n</code></pre></div>",
        "id": 276972533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648542337
    },
    {
        "content": "<p>Why not simply filtering out <code>fintype.pi_finset (λ _, range n)</code>?</p>",
        "id": 276972851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648542525
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 276973068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648542677
    },
    {
        "content": "<p>But I think one answer is \"that's way slower to compute\"</p>",
        "id": 276973202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648542765
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">fintype</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset.nat.antidiagonal'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pi_finset</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">range</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.nat.mem_antidiagonal'_iff</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.nat.antidiagonal'</span> <span class=\"n\">ι</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mem_filter.trans</span> <span class=\"o\">(</span><span class=\"n\">and_iff_right_of_imp</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mem_pi_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">nat.lt_succ_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">single_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h.le</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276973984,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648543229
    },
    {
        "content": "<p>Admittedly the proof is easier there</p>",
        "id": 276974002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648543242
    },
    {
        "content": "<p>Why do you care about computation?</p>",
        "id": 276974004,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648543244
    },
    {
        "content": "<p>We cared about it for <code>finset.nat.antidiagonal</code></p>",
        "id": 276974028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648543260
    },
    {
        "content": "<p>it seems sensible to be consistent</p>",
        "id": 276974035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648543264
    },
    {
        "content": "<p>Why did we care back then?</p>",
        "id": 276974056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648543276
    },
    {
        "content": "<p>It's entirely conceivable that norm_num would want to actually iterate over an antidiagonal?</p>",
        "id": 276974084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648543302
    },
    {
        "content": "<p>Note that <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> recently made stuff less computable in this area. <a href=\"https://github.com/leanprover-community/mathlib/pull/10891\">#10891</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/10930\">#10930</a></p>",
        "id": 276974173,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648543336
    },
    {
        "content": "<p>Well I only changed the definition of trunc? So I don't think I changed too much. Certainly it could be that the new definition is less computable in some sense? But the target of trunc is highly noncomputable anyway so I'm not sure I made any difference at all</p>",
        "id": 276982884,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648548498
    },
    {
        "content": "<p>PRd as <a href=\"https://github.com/leanprover-community/mathlib/pull/13031\">#13031</a></p>",
        "id": 276998019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648557307
    }
]