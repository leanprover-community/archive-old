[
    {
        "content": "<p>Do we have a name for the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The set of actions that leave elements in `s` unchanged -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">what_am_i</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The closest I can find is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.fixing_subgroup\">docs#intermediate_field.fixing_subgroup</a> which is an extremely special case with <code>M = E ≃ₐ[F] E</code> and unused requirements on <code>s</code></p>",
        "id": 271327878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644432276
    },
    {
        "content": "<p>It should be called something like the pointwise stabilizer of <code>s</code></p>",
        "id": 271328143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644432382
    },
    {
        "content": "<p>For a single element, it would be the stabilizer</p>",
        "id": 271328169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644432396
    },
    {
        "content": "<p>sUnion of stabilizer?</p>",
        "id": 271328428,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644432508
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11938\">#11938</a> adds the above as <code>fixing_submonoid</code> and <code>fixing_subgroup</code> but only because that matches the one I found already</p>",
        "id": 271328823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644432674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/elements.20of.20an.20action.20which.20fix.20a.20set/near/271328428\">said</a>:</p>\n<blockquote>\n<p>sUnion of stabilizer?</p>\n</blockquote>\n<p>More like <code>bInter</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">what_am_i_eq</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">mul_action.stabilizer</span> <span class=\"n\">M</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">what_am_i</span> <span class=\"n\">M</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Inter</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271329146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644432793
    },
    {
        "content": "<p>Right! Turn that smile upside down.</p>",
        "id": 271329191,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644432813
    },
    {
        "content": "<p>Perhaps this doesn't need a name</p>",
        "id": 271329195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644432816
    },
    {
        "content": "<p>The downside of the <code>⋂</code> approach is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Inter\">docs#set.Inter</a> (aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_Inf\">docs#set.has_Inf</a>) is definitionally not as nice as the original</p>",
        "id": 271348545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644441346
    },
    {
        "content": "<p>That makes me definitionally unhappy.</p>",
        "id": 271348722,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644441423
    },
    {
        "content": "<p>oh yeah I think I've been caught out by this before--is there a reason we couldn't change the <code>complete_lattice</code> instance or whatever to use the right-hand side of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_Inter\">docs#set.mem_Inter</a> as the definition?</p>",
        "id": 271354554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644444466
    },
    {
        "content": "<p>Yes, we get caught up in universe problems if we try to replace the <code>Inf</code> field of <code>complete_lattice</code> with <code>infi</code></p>",
        "id": 271354755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444542
    },
    {
        "content": "<p>ah</p>",
        "id": 271354826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644444571
    },
    {
        "content": "<p>We could treat set as a special case since it has special notation anyway, but that's probably stillnot worth it</p>",
        "id": 271354961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444618
    },
    {
        "content": "<p>There might be a middle ground where we have a <code>has_lawful_infi.{u} α</code> typeclass that provides infi in a particular universe and proves it's consistent with Inf</p>",
        "id": 271355086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444689
    },
    {
        "content": "<p>And then if we end up in a universe mess somewhere we can just conjure an instance built from the Inf.</p>",
        "id": 271355195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444741
    },
    {
        "content": "<p>But you could also argue that tweaking definitional equality isn't worth that trouble</p>",
        "id": 271355330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444809
    },
    {
        "content": "<p>Wait no I don't understand now--<code>set.Inter</code> is a standalone top-level definition so we could just change it, right?</p>",
        "id": 271355525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644444901
    },
    {
        "content": "<p>I see what I said above was wrong but it's a slightly different thing.</p>",
        "id": 271355561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644444920
    },
    {
        "content": "<p>Yes, we could change <code>set.Inter</code> but then <code>⨅</code> and <code>⋂</code> would no longer be two notations for the same thing</p>",
        "id": 271356955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644445602
    },
    {
        "content": "<p>Which is useful because it encourages us to generalize set lemmas to lattices</p>",
        "id": 271356999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644445633
    },
    {
        "content": "<p>The downside of the <code>⋂</code> approach is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Inter\">docs#set.Inter</a> (aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_Inf\">docs#set.has_Inf</a>) is definitionally not as nice as the original (<a href=\"#narrow/stream/113488-general/topic/Unpleasant.20definition.20for.20set.2EInter.20.2F.20infi/near/271348545\">new Zulip thread</a>)</p>",
        "id": 271404598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644484708
    }
]