[
    {
        "content": "<p>Hello, I'm very new to Lean so I'm having a hard time finding (and learning how to find) a specific function that might already exist in the mathlib.</p>\n<p>I'm trying to write a function that takes a sequence of integers and returns whether there are any duplicates. It feels like I should be able to leverage a set to make sure the elements in the sequence are unique, but I'm not sure how to get there. Could anyone help here? Or point me to a place where I can easily find what I'm looking for?</p>",
        "id": 300065878,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1663812392
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup\">docs#list.nodup</a></p>",
        "id": 300066079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663812638
    },
    {
        "content": "<p>Also, since we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup_decidable\">docs#list.nodup_decidable</a> this is computable assuming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span></span></span></span> is decidable in your underlying type (which is the case for integers)</p>",
        "id": 300066164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663812738
    },
    {
        "content": "<p>Also, this is for a list, as mentioned in the title of this thread. But in your message you said \"sequence\". What specifically do you want to do?</p>",
        "id": 300066207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663812801
    },
    {
        "content": "<p>A list also works! I'm really trying to make a function that returns whether <code>a \\ne b \\ne c \\ne d \\ne ...</code>. So I suppose order doesn't matter</p>",
        "id": 300066341,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1663812947
    },
    {
        "content": "<p>Hmm.... that doesn't really answer my question. order matters in lists. Maybe you want to use a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset\">docs#multiset</a> ? We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.nodup\">docs#multiset.nodup</a> but once you start going down that road you may as well use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset\">docs#finset</a></p>",
        "id": 300066468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663813068
    },
    {
        "content": "<p>Finset looks great. I have a background in programming so I'm a little confused how to construct a finset of <code>{a, b, c, d, ... }</code>. In a programming language I'd do something like <code>Set.of(1, 2, 3, 4, 4, 4)</code> and it'd remove the duplicates for me. Sounds like finset allows duplicates which will let me use <code>nodup</code>, but how can I create the finset in the first place?</p>",
        "id": 300066873,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1663813431
    },
    {
        "content": "<p>Here is a brief example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 300066966,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663813521
    },
    {
        "content": "<p>a finset is a multiset satisfying <code>nodup</code>.</p>",
        "id": 300066980,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663813553
    },
    {
        "content": "<p>So if you declare <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1,1,2,3\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">}</span></span></span></span> to be a finset, the duplicated will be \"removed\"</p>",
        "id": 300067026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663813579
    },
    {
        "content": "<p>OTOH: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 300067069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663813667
    },
    {
        "content": "<p>Oh, excellent. That's exactly what I was looking for. Thank you for your help and being patient with me</p>",
        "id": 300067238,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1663813823
    },
    {
        "content": "<p>No problem at all! I'm happy to help!</p>",
        "id": 300067253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663813850
    },
    {
        "content": "<p>You may want to work with some other constructors for finsets, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.insert\">docs#finset.insert</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter\">docs#finset.filter</a> etc.</p>",
        "id": 300067271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663813886
    },
    {
        "content": "<p>Okay, one more question about how to test things I've written.<br>\nRight now I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">are_unique</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">l.nodup</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">are_unique</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Lean is telling me the result from <code>#eval</code> is <code>#0</code> and it does not change when I change the elements of the set I give it. What's going on here?</p>",
        "id": 300068093,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1663814273
    },
    {
        "content": "<p>I expect it to say \"true\" in that case. And \"fasle\" in the case of something like <code>{2, 3, 3}</code></p>",
        "id": 300068228,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1663814388
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">@[derive decidable]</span>\n<span class=\"kd\">def</span> <span class=\"n\">are_unique</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">l.nodup</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">are_unique</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 300068245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663814399
    },
    {
        "content": "<p>What's happening here is that when you have a decidable proposition, you can coerce it to a boolean and that's what <code>(... : bool)</code> is doing. We also had to show decidability of your prop, which can be done automatically with the <code>derive</code> tag</p>",
        "id": 300068346,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663814467
    },
    {
        "content": "<p>Interesting. So <code>Prop</code> can't evaluate to true or false unless you tell it that it's decidable?</p>",
        "id": 300068617,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1663814634
    },
    {
        "content": "<p>If you can evaluate <code>riemann_hypothesis : Prop</code> to either <code>true</code> or <code>false</code>, please let us know ;)</p>",
        "id": 300068735,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663814704
    },
    {
        "content": "<p>ha! got it</p>",
        "id": 300069103,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1663814835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544521\">Alex Sweeney</span> has marked this topic as resolved.</p>",
        "id": 300072290,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663818063
    },
    {
        "content": "<p>BTW, there is an actual function for this: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.dedup\">docs#list.dedup</a></p>",
        "id": 300091021,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663831345
    }
]