[
    {
        "content": "<p>Is there a lemma in the library that says that a linear combination of elements of a submodule is still in the submodule ? I wanted to use that result when doing one of the lftcm2020 linear algebra exercises, but I only found submodule.sum_mem that works for a sum, and submodule.smul_mem that works for a scalar product. (There's a related result called finsupp.mem_span_iff_total that says that the span of a family if the set of its linear combinations, but you'd need to combine it with the fact that a submodule is the span of the family of all its elements. Also, it assumes that the base semiring is a ring for some reason, which I don't think is necessary.) Anyway, I ended up adding this in my local copy of module.lean :</p>\n<p>lemma linear_combination_mem {t : finset ι} {f : ι → M} (r : ι → R) :<br>\n    (∀ c ∈ t, f c ∈ p) → (∑ i in t, r i • f i) ∈ p :=<br>\nλ hyp, submodule.sum_mem _ (λ i hi, submodule.smul_mem  _ _ (hyp i hi))</p>\n<p>(Just after smul_mem_iff' on line 504. Here R is a semiring, M is a semimodule over R, ι is a type, p is a submodule of M.)</p>",
        "id": 204305100,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1595086776
    },
    {
        "content": "<p>I don't believe this lemma existed yet - the model solution uses a combination of <code>sum_mem</code> and <code>smul_mem</code> as in your proof for <code>linear_combination_mem</code>.</p>",
        "id": 204305895,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595088057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> this would be a helpful PR and if you golf it a bit by changing <code> : (∀ c ∈ t, f c ∈ p) →</code> to <code>(hyp : ∀ c ∈ t, f c ∈ p) :</code> and deleting <code>λ hyp, </code> (\"move as much as possible to the left of the colon\") then it looks mathlib-ready. Do you have push rights to non-master branches of mathlib? If you don't know, then you probably don't -- what is your github login?</p>",
        "id": 204306643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595089084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> Also, small tip: if you want syntax highlighting in your Zulip posts, then you can use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> like so</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">```</span>\n<span class=\"n\">lean</span> <span class=\"n\">code</span> <span class=\"n\">goes</span> <span class=\"n\">here</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 204308596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595091837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks !</p>",
        "id": 204309276,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1595092866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, do you mean something like this :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">linear_combination_mem</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span>  <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>My github login is smorel394, and I am pretty confident that I don't have push rights to anything.</p>",
        "id": 204309284,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1595092917
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> could Sophie have push rights to non-master branches of mathlib?</p>",
        "id": 204309331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595092967
    },
    {
        "content": "<p>Yes that looks great. A three line PR adding a missing lemma in an appropriate place is the best kind of PR. The maintainers have a better eye than I do however</p>",
        "id": 204309354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595093037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Linear.20combinations.20stay.20in.20a.20submodule/near/204309331\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> could Sophie have push rights to non-master branches of mathlib?</p>\n</blockquote>\n<p>Done</p>",
        "id": 204309408,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595093083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Thank ! I'll try to figure out the git stuff after dinner. (Scott told me about this page <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>, so I should be ok.)</p>",
        "id": 204309730,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1595093567
    }
]