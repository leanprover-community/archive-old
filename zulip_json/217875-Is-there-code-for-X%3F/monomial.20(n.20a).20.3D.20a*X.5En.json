[
    {
        "content": "<p>I see that there is a lemma <code>lemma X_pow_eq_monomial</code> to the effect that <code>monomial (n 1) = X^n</code>. Its proof is not entirely trivial, because <code>monomial (n 1)</code> is defined as a function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> to the coefficient ring <code>R</code>. Since I need that <code>monomial (n a)=a*X^n</code> for every <code>a  : R</code> I am wondering if this is an immediate consequence of the previous result or if at any rate a \"true\" proof is required, in which case I wonder if it wouldn't be better to generalize <code>lemma X_pow_eq_monomial</code> to take coefficients into account.</p>",
        "id": 214075914,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603297365
    },
    {
        "content": "<p>The other one is also there.</p>",
        "id": 214076398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603297557
    },
    {
        "content": "<p>Maybe <code>monomial_eq_mul_X_pow</code> or something like that?</p>",
        "id": 214076464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603297570
    },
    {
        "content": "<p>If you write the statement and try to prove it by <code>library_search</code>, does it work?</p>",
        "id": 214076504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603297591
    },
    {
        "content": "<p>No, I tried but it did not.</p>",
        "id": 214076545,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603297606
    },
    {
        "content": "<p>AH! found it.</p>",
        "id": 214076648,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603297641
    },
    {
        "content": "<p>But then I found another problem. THe above lemma appears twice, both in <code>monomial.lean</code> and in <code>polynomial.basic.lean</code></p>",
        "id": 214076715,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603297672
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git grep <span class=\"s2\">\"X.*=.*monomi\"</span>\nsrc/data/mv_polynomial/basic.lean:def X <span class=\"o\">(</span>n : σ<span class=\"o\">)</span> : mv_polynomial σ R :<span class=\"o\">=</span> monomial <span class=\"o\">(</span>single n <span class=\"m\">1</span><span class=\"o\">)</span> <span class=\"m\">1</span>\nsrc/data/mv_polynomial/basic.lean:lemma X_pow_eq_single : X n ^ <span class=\"nv\">e</span> <span class=\"o\">=</span> monomial <span class=\"o\">(</span>single n e<span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"m\">1</span> : R<span class=\"o\">)</span> :<span class=\"o\">=</span>\nsrc/data/mv_polynomial/basic.lean:    from calc <span class=\"o\">(</span>p * X n * monomial s a<span class=\"o\">)</span>.eval₂ f <span class=\"nv\">g</span> <span class=\"o\">=</span> <span class=\"o\">(</span>p * monomial <span class=\"o\">(</span>single n <span class=\"m\">1</span> + s<span class=\"o\">)</span> a<span class=\"o\">)</span>.eval₂ f g :\nsrc/data/polynomial/basic.lean:def X : polynomial R :<span class=\"o\">=</span> monomial <span class=\"m\">1</span> <span class=\"m\">1</span>\nsrc/data/polynomial/basic.lean:@<span class=\"o\">[</span>simp<span class=\"o\">]</span> lemma coeff_X_one : coeff <span class=\"o\">(</span>X : polynomial R<span class=\"o\">)</span> <span class=\"nv\">1</span> <span class=\"o\">=</span> <span class=\"m\">1</span> :<span class=\"o\">=</span> coeff_monomial\nsrc/data/polynomial/basic.lean:@<span class=\"o\">[</span>simp<span class=\"o\">]</span> lemma coeff_X_zero : coeff <span class=\"o\">(</span>X : polynomial R<span class=\"o\">)</span> <span class=\"nv\">0</span> <span class=\"o\">=</span> <span class=\"m\">0</span> :<span class=\"o\">=</span> coeff_monomial\nsrc/data/polynomial/basic.lean:lemma coeff_X : coeff <span class=\"o\">(</span>X : polynomial R<span class=\"o\">)</span> <span class=\"nv\">n</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"nv\">1</span> <span class=\"o\">=</span> n <span class=\"k\">then</span> <span class=\"m\">1</span> <span class=\"k\">else</span> <span class=\"m\">0</span> :<span class=\"o\">=</span> coeff_monomial\nsrc/data/polynomial/basic.lean:lemma monomial_eq_X_pow <span class=\"o\">(</span>n<span class=\"o\">)</span> : X^n <span class=\"o\">=</span> monomial n <span class=\"o\">(</span><span class=\"m\">1</span>:R<span class=\"o\">)</span> :<span class=\"o\">=</span>\nsrc/data/polynomial/coeff.lean:lemma C_mul_X_pow_eq_monomial <span class=\"o\">(</span>c : R<span class=\"o\">)</span> <span class=\"o\">(</span>n : ℕ<span class=\"o\">)</span> : C c * X^n <span class=\"o\">=</span> monomial n c :<span class=\"o\">=</span>\nsrc/ring_theory/power_series.lean:def X <span class=\"o\">(</span>s : σ<span class=\"o\">)</span> : mv_power_series σ R :<span class=\"o\">=</span> monomial R <span class=\"o\">(</span>single s <span class=\"m\">1</span><span class=\"o\">)</span> <span class=\"m\">1</span>\nsrc/ring_theory/power_series.lean:lemma X_def <span class=\"o\">(</span>s : σ<span class=\"o\">)</span> : X <span class=\"nv\">s</span> <span class=\"o\">=</span> monomial R <span class=\"o\">(</span>single s <span class=\"m\">1</span><span class=\"o\">)</span> <span class=\"m\">1</span> :<span class=\"o\">=</span> rfl\nsrc/ring_theory/power_series.lean:  <span class=\"o\">(</span>X s : mv_power_series σ R<span class=\"o\">)</span>^n <span class=\"o\">=</span> monomial R <span class=\"o\">(</span>single s n<span class=\"o\">)</span> <span class=\"m\">1</span> :<span class=\"o\">=</span>\nsrc/ring_theory/power_series.lean:lemma X_eq : <span class=\"o\">(</span>X : power_series R<span class=\"o\">)</span> <span class=\"o\">=</span> monomial R <span class=\"m\">1</span> <span class=\"m\">1</span> :<span class=\"o\">=</span> rfl\nsrc/ring_theory/power_series.lean:lemma X_pow_eq <span class=\"o\">(</span>n : ℕ<span class=\"o\">)</span> : <span class=\"o\">(</span>X : power_series R<span class=\"o\">)</span>^n <span class=\"o\">=</span> monomial R n <span class=\"m\">1</span> :<span class=\"o\">=</span>\n</code></pre></div>",
        "id": 214076738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603297682
    },
    {
        "content": "<p>It's somewhere halfway that list</p>",
        "id": 214076798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603297689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monomial.20(n.20a).20.3D.20a*X.5En/near/214076715\">said</a>:</p>\n<blockquote>\n<p>But then I found another problem. THe above lemma appears twice, both in <code>monomial.lean</code> and in <code>polynomial.basic.lean</code></p>\n</blockquote>\n<p>Then you can write a PR that deduplicates mathlib (-;</p>",
        "id": 214076875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603297717
    },
    {
        "content": "<p>Maybe one day the linter will catch this...</p>",
        "id": 214131835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603326894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monomial.20(n.20a).20.3D.20a*X.5En/near/214076875\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monomial.20(n.20a).20.3D.20a*X.5En/near/214076715\">said</a>:</p>\n<blockquote>\n<p>But then I found another problem. THe above lemma appears twice, both in <code>monomial.lean</code> and in <code>polynomial.basic.lean</code></p>\n</blockquote>\n<p>Then you can write a PR that deduplicates mathlib (-;</p>\n</blockquote>\n<p>I am quite embarrassed to say this, but since this would be my first PR, I'd need a bit of help. I've tried to follow the tuto on how to submit a PR, but I get stuck when I need to \"choose the branch that contains your commits.\"</p>",
        "id": 214155021,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603353762
    },
    {
        "content": "<p>Well, where did you make the changes you want to submit as a PR?</p>",
        "id": 214155073,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603353802
    },
    {
        "content": "<p>The general procedure is to check out mathlib master, create a new branch, make your changes, commit the changes, push the branch, and make a PR (github will helpfully tell you that you have recently pushed changes and help with making the PR)</p>",
        "id": 214155185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603353856
    },
    {
        "content": "<p>Haven't done them yet (only have them in mind). Are you saying that I need to modify the file while being on <code>master</code> on my PC and then commit?</p>",
        "id": 214155218,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603353876
    },
    {
        "content": "<p>you should <code>git checkout -b my_branch</code> while on master</p>",
        "id": 214155239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603353896
    },
    {
        "content": "<p>and then make the changes and push them using <code>git push -u origin my_branch</code></p>",
        "id": 214155275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603353920
    },
    {
        "content": "<p>OKOK; I have never created <code>my_branch</code> (I normally work on a different branch, by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> )</p>",
        "id": 214155294,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603353937
    },
    {
        "content": "<p>if you create the branch starting from another branch, then your branch and PR will include all the changes in that branch, which is probably not what you want</p>",
        "id": 214155380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603353985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> If you would like to be talked through your first PR in a video call, I have some time now</p>",
        "id": 214155494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603354065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monomial.20(n.20a).20.3D.20a*X.5En/near/214155494\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> If you would like to be talked through your first PR in a video call, I have some time now</p>\n</blockquote>\n<p>THanks so much! In 3 minutes?</p>",
        "id": 214155583,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603354109
    },
    {
        "content": "<p>Done (with Johan's help): <a href=\"https://github.com/leanprover-community/mathlib/issues/4734\">#4734</a></p>",
        "id": 214157580,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603355604
    }
]