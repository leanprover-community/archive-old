[
    {
        "content": "<p>Somewhat unbelievably I can't find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_fun_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does anyone see it?</p>",
        "id": 250576840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629862380
    },
    {
        "content": "<p>Looks like we have the non-dependent version <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_arrow_equiv_prod_arrow\">docs#equiv.sum_arrow_equiv_prod_arrow</a></p>",
        "id": 250577144,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629862853
    },
    {
        "content": "<p>Okay. I'll add it eventually.</p>",
        "id": 250577158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629862882
    },
    {
        "content": "<p>In fact, the same proof works with a tiny bit of effort, so I may try to just generalize.</p>",
        "id": 250577286,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629863090
    }
]