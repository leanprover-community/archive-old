[
    {
        "content": "<p>Do we have either this definition or some form of this theorem? It came up in <a href=\"https://github.com/leanprover-community/mathlib/issues/6208\">#6208</a>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">antitone</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">strict_mono</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">antitone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The proof I know is sketched in my review of the PR: you do a case split on whether the set <code>{n | \\forall m &gt; n, f m &lt; f n}</code> is finite or infinite. The Bolzano-Weierstrass theorem for R follows without too much trouble from this (because a monotonic bounded sequence converges) and this was the proof I learnt as an undergrad, however we seem to have some fancier proof of BW in mathlib. </p>\n<p>The reason it's relevant is that if furthermore f is injective then one can guarantee that <code>f ∘ φ</code> is strict mono or antimono, and deduce that if alpha is an infinite linearly ordered type then at least one of alpha and its order-dual must be not well-founded -- the naturals inject into any infinite type.</p>",
        "id": 226458241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613434641
    },
    {
        "content": "<p>I imagine <code>antitone</code> follows from some application of <code>order_dual</code></p>",
        "id": 226458276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613434683
    },
    {
        "content": "<p>Sure, but I still need a name for it because if I only have <code>f ∘ φ</code> then it's hard to get my hands on the order_dual unless you want the usual @ _-fest.</p>",
        "id": 226458376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613434751
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">antitone</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">antitone'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">monotone</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">):</span>\n  <span class=\"n\">antitone'</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">antitone</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 226458389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613434766
    },
    {
        "content": "<p>So I don't know if we have a name, but you can pick up all the existing lemmas by using that <code>antitone'</code> definition</p>",
        "id": 226458405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613434795
    },
    {
        "content": "<p>Sure, but if you don't define it then you'll just get the <code>@ _</code>-fest in the statement of the theorem.</p>",
        "id": 226458424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613434804
    },
    {
        "content": "<p>I agree - I'm just saying we have a full implementation, it just doesn't have a usable name  yet :)</p>",
        "id": 226458465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613434836
    },
    {
        "content": "<p>Anyway, I would be happy to have the example phrased in whatever way, the real question is whether it's there already.</p>",
        "id": 226458558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613434961
    },
    {
        "content": "<p>I added a version of this theorem in <a href=\"https://github.com/leanprover-community/mathlib/issues/6208\">#6208</a>, and used it again in <a href=\"https://github.com/leanprover-community/mathlib/issues/6226\">#6226</a>.</p>",
        "id": 226465596,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1613443923
    },
    {
        "content": "<p>If it turns out it does already exist, I'd be happy to use the existing form, but I don't think it does, and it saved me a lot of code in those two PRs.</p>",
        "id": 226465731,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1613444099
    },
    {
        "content": "<p>My formulation refers to a general relation, and so doesn't need antitone to be defined, but there are some good corollaries that could be defined using <code>monotone</code>, etc.</p>",
        "id": 226465938,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1613444398
    }
]