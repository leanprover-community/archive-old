[
    {
        "content": "<p>Does the following exist somewhere? Is there a better way to define it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sigma.basic</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigma.proj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sigma.proj_same</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sigma.proj</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sigma.proj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sigma.proj_ne</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sigma.proj</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sigma.proj</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_right_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h'.symm</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286971086,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1655843657
    },
    {
        "content": "<p>You want to project OUT of a sigma type <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span> !?!?</p>",
        "id": 286972647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655844516
    },
    {
        "content": "<p>I think that's just <code>pi.single x.1 x.2</code>?</p>",
        "id": 286996689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655864563
    },
    {
        "content": "<p>To expand on Eric's comment, I think it's indeed <code>λ x, pi.single x.1 x.2 a</code>.</p>",
        "id": 287021910,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1655887268
    }
]