[
    {
        "content": "<p>I'm composing <code>direct_sum.to_module</code> with  <code>dfinsupp.map_range</code>. Is there any way to simplify that? Here's what I'm doing. I have:</p>\n<ul>\n<li>a collection of spaces <code>V : ι → Type _</code>, each of which is a <code>module k (V i)</code>,</li>\n<li>a target space <code>W : Type _</code> as a <code>module k W</code>,</li>\n<li>a collection of linear maps <code>ρ : Π i : ι, V i →ₗ[k] V i</code>, and</li>\n<li>a collection of linear maps <code>φ : Π i : ι, V i →ₗ[k] W</code>.<br>\nWhat I need is that <code>∀ (v : direct_sum ι V), (direct_sum.to_module k ι W φ) (dfinsupp.map_range.linear_map ρ v) = direct_sum.to_module k ι W (λ i : ι, (φ i).comp (ρ i)) v</code>.</li>\n</ul>",
        "id": 242366243,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623427507
    },
    {
        "content": "<p>Is there something similar to <code>dfinsupp.map_range_comp</code> but for composing <code>to_module</code> and <code>map_range</code>?</p>",
        "id": 242366692,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623427700
    },
    {
        "content": "<p>Can you just make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? It would be much easier for me to digest!</p>",
        "id": 242378087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623432863
    },
    {
        "content": "<p>Your best bet is to unfold to_module</p>",
        "id": 242402529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623445229
    },
    {
        "content": "<p>There are lots of lemmas about dfinsupp, and it's a lot of effort for little gain to copy all the lemmas between the two</p>",
        "id": 242402658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623445299
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.to_module</span> <span class=\"n\">k</span> <span class=\"n\">ι</span> <span class=\"n\">W</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp.map_range.linear_map</span> <span class=\"n\">ρ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">direct_sum.to_module</span> <span class=\"n\">k</span> <span class=\"n\">ι</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 242422106,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623465144
    },
    {
        "content": "<p>After a bit a struggle, I was able to prove the above statement as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.to_module</span> <span class=\"n\">k</span> <span class=\"n\">ι</span> <span class=\"n\">W</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp.map_range.linear_map</span> <span class=\"n\">ρ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">direct_sum.to_module</span> <span class=\"n\">k</span> <span class=\"n\">ι</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">vv</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">direct_sum.to_module.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_map.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">direct_sum.to_module_lof</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">direct_sum.single_eq_lof</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">direct_sum.to_module</span> <span class=\"n\">dfinsupp.lsum</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It seems to me that it would be useful to include (some more general form of) this lemma in <code>data.dfinsupp</code>, as it is probably common to build a map by composing <code>lsum</code> (direct sum to module) with <code>map_range</code> (direct sum to direct sum).</p>",
        "id": 242425838,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623471157
    },
    {
        "content": "<p>Is there no lemma that says <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.map_range\">docs#dfinsupp.map_range</a> is lsum combined with <code>single</code>?</p>",
        "id": 242436568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623486818
    },
    {
        "content": "<p>Perhaps I could have used <code>dfinsupp.map_range_single</code>, but I've now moved on</p>",
        "id": 242440614,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623491467
    }
]