[
    {
        "content": "<p>Hi all, this is a problem that has come up a few times and has resulted in what feels like unnecessary work. </p>\n<p>I will have a goal of the form, say, $∃(x:A),…(c(x)=t)$ where $t$ may or may not have bound variables as well. I will have a term of type $∃(x:A),…(t=c(x))$. </p>\n<p>Lean will not accept that that term means I have proved the theorem, which means I have to unwind it all, seemingly unnecessarily. I cannot use rw because $x$ is bound. I can’t seem to get simp_rw to work either, but maybe I am not feeding it the right type of theorem.</p>\n<p>What is the generic solution to this problem?</p>",
        "id": 303371818,
        "sender_full_name": "Will Fourie",
        "timestamp": 1665472653
    },
    {
        "content": "<p>Or rather, is there a generic solution to this problem?</p>",
        "id": 303373667,
        "sender_full_name": "Will Fourie",
        "timestamp": 1665473674
    },
    {
        "content": "<p><code>simpa only [eq_comm] using your_proof_term</code></p>",
        "id": 303373926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665473781
    },
    {
        "content": "<p><code>simp_rw [@eq_comm _ _ t]</code> or <code>simp_rw [@eq_comm _ t] at your_proof_term</code> might also be useful intermediate steps.</p>",
        "id": 303375376,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665474480
    },
    {
        "content": "<p>When writing this, you can use <code>_</code> for the bound variables in <code>t</code>. You just have to specify one of the arguments of <code>eq_comm</code> enough so that it matches with <code>t</code>, but not with <code>c(x)</code> (or the other way around).</p>",
        "id": 303375563,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665474575
    },
    {
        "content": "<p>I suspected this was just me not knowing how to use the tactic properly. Thanks so much, both of you <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 303395939,
        "sender_full_name": "Will Fourie",
        "timestamp": 1665483076
    },
    {
        "content": "<p>Should eq_comm take explicit arguments?</p>",
        "id": 303496194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665513056
    },
    {
        "content": "<p>I think there is a whole bunch of basic propositional/predicate logic <code>iff</code>s that could use more explicit arguments. Examples:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/and.left_comm\">docs#and.left_comm</a> <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/imp.swap\">docs#imp.swap</a><br>\nI think explicit arguments are useful if the lemma might match multiple times, but you only want to rewrite some of them. An example of where I don't think the explicit argument is useful is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/or_true\">docs#or_true</a>, since I will want to rewrite all of them anyway (though I don't mind that the argument is explicit in this case).</p>",
        "id": 303505570,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665516568
    },
    {
        "content": "<p>The case for implicit arguments on <code>iff</code>s is less valid here, because we usually have one way lemmas with dot notation. So the only use for implicit arguments would be using in conjunction with <code>iff.trans</code> or similar, which is much rarer.</p>",
        "id": 303534869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665529782
    }
]