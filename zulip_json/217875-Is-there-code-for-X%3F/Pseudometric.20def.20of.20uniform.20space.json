[
    {
        "content": "<p>I'm wondering about the pseudometric definition of a uniform space:<br>\n<a href=\"https://en.wikipedia.org/wiki/Uniform_space#Pseudometrics_definition\">https://en.wikipedia.org/wiki/Uniform_space#Pseudometrics_definition</a></p>\n<p>I.e. the fact that any family of pseudometrics gives rise to a uniform space structure, and conversely, that any uniform space structure arises from some such family. (Of course, this converse is the more interesting direction!)</p>\n<p>I'm quite sure we don't have anything like this in mathlib, but I suppose it doesn't hurt to ask.</p>\n<p>Assuming we don't have this, let's also discuss how to formulate this in Lean.</p>",
        "id": 297797815,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662648491
    },
    {
        "content": "<p>That sounds like seminorms to me. I suggest writing a hom type <code>pseudo_metric</code> and its corresponding hom class that would be inserted under seminorms</p>",
        "id": 297803398,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1662650008
    },
    {
        "content": "<p>seminorms give pseudometrics, but they're not the same.</p>",
        "id": 297804560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662650312
    },
    {
        "content": "<p>we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pseudo_metric_space\">docs#pseudo_metric_space</a></p>",
        "id": 297804580,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662650317
    },
    {
        "content": "<p>No, I mean this is similar to how we treat families of seminorms.</p>",
        "id": 297804649,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1662650337
    },
    {
        "content": "<p>what do you mean by the \"corresponding hom class\" of a pseudo metric?</p>",
        "id": 297805003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662650417
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">topological</span> <span class=\"n\">vector</span> <span class=\"n\">space</span> <span class=\"n\">is</span> <span class=\"n\">locally</span> <span class=\"n\">convex</span> <span class=\"k\">if</span> <span class=\"n\">and</span> <span class=\"n\">only</span> <span class=\"k\">if</span> <span class=\"n\">its</span> <span class=\"n\">topology</span> <span class=\"n\">is</span> <span class=\"n\">induced</span> <span class=\"kd\">by</span> <span class=\"n\">a</span> <span class=\"n\">family</span> <span class=\"n\">of</span> <span class=\"n\">seminorms.</span>\n</code></pre></div>\n<p>is the normed world statement that's similar to yours (cf <a href=\"https://en.wikipedia.org/wiki/Seminorm\">Wikipedia</a>).</p>",
        "id": 297805028,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1662650429
    },
    {
        "content": "<p>Anyway, I don't think introducing a whole new type of pseudo-metrics is necessary. We can just talk about families of terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pseudo_metric_space\">docs#pseudo_metric_space</a></p>",
        "id": 297806498,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662650852
    },
    {
        "content": "<p>Why are you interested in this definition of uniform structures?</p>",
        "id": 297814971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662653211
    },
    {
        "content": "<p>Specifically, I have a situation with a (uniform) topological ring (satisfying some additional hypotheses which I won't spell out) and I would like to relate it to valuation theory. One reasonable first step is to consider such a family of pseudometrics which give the uniform structure. (The way such a thing is usually related to valuation theory in the literature is somewhat different, but I would like to see whether this approach would offer a cleaner formalization.)</p>",
        "id": 297819063,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662654464
    },
    {
        "content": "<p>We don‚Äôt need anything new to formulate this</p>",
        "id": 297823360,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662655771
    },
    {
        "content": "<p>yeah I agree.</p>",
        "id": 297823403,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662655788
    },
    {
        "content": "<p>The uniform space defined by a family of pseudo metrics is juste the infimum of the uniform spaces for each pseudo metric right ?</p>",
        "id": 297823539,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662655819
    },
    {
        "content": "<p>Yes, I think that's right.</p>",
        "id": 297823601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662655843
    },
    {
        "content": "<p>Actually a similar thing could have been done for seminorms, we just have to take the infimum of the topologies generated by each one individually. But we need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_seminorms\">docs#with_seminorms</a> because saying ¬´¬†this topology is generated by these seminorms¬†¬ª is extremely frequent, but I don‚Äôt think that is the case for pseudo metrics, is that right?</p>",
        "id": 297824340,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662656077
    },
    {
        "content": "<p>I think I remember seeing the proof of it in Bourbaki but I‚Äôm not home and my iPad has no battery left‚Ä¶</p>",
        "id": 297824851,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662656239
    },
    {
        "content": "<p>It is indeed in Bourbaki</p>",
        "id": 297825493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662656426
    },
    {
        "content": "<p>From wiki: <code>Bourbaki: General Topology Chapter IX ¬ß1 no. 4</code></p>",
        "id": 297825573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662656451
    },
    {
        "content": "<p>Oh but we almost have it, give me a few minutes</p>",
        "id": 297837350,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662660206
    },
    {
        "content": "<p>Okay maybe a bit more than a few minutes but it should definitely not be too hard</p>",
        "id": 297838405,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662660562
    },
    {
        "content": "<p>Ok so this is <strong><em>extremely</em></strong> ugly and impractical to use, but basically here is the proof : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.metrizable_uniformity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">‚®Ö</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"bp\">ùìë</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">nat.rec</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span>\n    <span class=\"o\">‚ü®</span><span class=\"n\">symmetrize_rel</span> <span class=\"n\">V.1</span><span class=\"o\">,</span> <span class=\"n\">symmetrize_mem_uniformity</span> <span class=\"n\">V.2</span><span class=\"o\">‚ü©</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">classical.some</span> <span class=\"bp\">$</span> <span class=\"n\">comp_symm_mem_uniformity_sets</span> <span class=\"n\">U.2</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"bp\">$</span> <span class=\"n\">comp_symm_mem_uniformity_sets</span> <span class=\"n\">U.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">‚ü©),</span>\n  <span class=\"k\">have</span> <span class=\"bp\">ùìë</span><span class=\"n\">_comp</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚óã</span> <span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"bp\">;</span>\n    <span class=\"o\">[</span><span class=\"n\">set</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n.succ</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"bp\">$</span> <span class=\"n\">comp_symm_mem_uniformity_sets</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd.2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"bp\">ùìë</span><span class=\"n\">_symmetric</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">symmetric_rel</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">symmetric_symmetrize_rel</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"bp\">$</span> <span class=\"n\">comp_symm_mem_uniformity_sets</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd.1</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"bp\">ùìë</span><span class=\"n\">_zero_V</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">symmetrize_rel_subset_self</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"bp\">ùìë</span><span class=\"n\">_decreasing'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">ùìë</span><span class=\"n\">_comp</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">subset_comp_self</span> <span class=\"n\">_</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">id_rel_subset</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">refl_mem_uniformity</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"bp\">$</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"bp\">ùìë</span><span class=\"n\">_decreasing</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">antitone</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">antitone_nat_of_succ_le</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span><span class=\"n\">_decreasing'</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"bp\">ùìë</span><span class=\"n\">_is_basis</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">filter.is_basis</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"bp\">‚àò</span> <span class=\"bp\">ùìë</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">‚ü©,</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">max</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">,</span> <span class=\"n\">subset_inter</span>\n      <span class=\"o\">(</span><span class=\"bp\">ùìë</span><span class=\"n\">_decreasing</span> <span class=\"n\">V</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span><span class=\"n\">_decreasing</span> <span class=\"n\">V</span> <span class=\"n\">_</span><span class=\"o\">)‚ü©‚ü©</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_max_iff</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"bp\">ùí∞</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">uniform_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">uniform_space.of_core</span> <span class=\"o\">(</span><span class=\"n\">uniform_space.core.mk_of_basis</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span><span class=\"n\">_is_basis</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter_basis</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintros</span> <span class=\"n\">r</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">refl_mem_uniformity</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">})</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintros</span> <span class=\"n\">r</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span> <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span><span class=\"n\">_symmetric</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ge</span><span class=\"o\">‚ü©})</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintros</span> <span class=\"n\">r</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span> <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span> <span class=\"bp\">ùìë</span><span class=\"n\">_comp</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">‚ü©</span> <span class=\"o\">})),</span>\n  <span class=\"k\">have</span> <span class=\"bp\">ùí∞</span><span class=\"n\">_basis</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">ùí∞</span> <span class=\"n\">V</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"bp\">‚àò</span> <span class=\"bp\">ùìë</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span><span class=\"n\">_is_basis</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">V_mem_</span><span class=\"bp\">ùí∞</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">V.1</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">ùí∞</span> <span class=\"n\">V</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">ùí∞</span><span class=\"n\">_basis</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">,</span> <span class=\"bp\">ùìë</span><span class=\"n\">_zero_V</span> <span class=\"n\">V</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">u_eq_</span><span class=\"bp\">ùí∞</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">‚®Ö</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">ùí∞</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_infi</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">V</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"n\">u</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">ùí∞</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">ùí∞</span><span class=\"n\">_basis</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ge_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">ùìë</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">infi_uniformity</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">filter.mem_infi_of_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">V_mem_</span><span class=\"bp\">ùí∞</span> <span class=\"o\">(‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"bp\">ùí∞</span><span class=\"n\">_exists_dist</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">pseudo_metric_space</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">ùí∞</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">d.to_uniform_space</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">ùí∞</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_countable_basis</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"bp\">‚àò</span> <span class=\"bp\">ùìë</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">countable</span> <span class=\"o\">:=</span> <span class=\"n\">to_countable</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"bp\">..ùí∞</span><span class=\"n\">_basis</span> <span class=\"n\">V</span> <span class=\"o\">},</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_countably_generated</span> <span class=\"o\">:=</span> <span class=\"n\">this.is_countably_generated</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">uniform_space.pseudo_metric_space</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">D</span> <span class=\"n\">hD</span> <span class=\"n\">using</span> <span class=\"bp\">ùí∞</span><span class=\"n\">_exists_dist</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">u_eq_</span><span class=\"bp\">ùí∞</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hD</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 297855180,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662666953
    },
    {
        "content": "<p>I will clean it and make a PR in the next few fays, which gives some time to discuss how we <em>should</em> state it to make it usable</p>",
        "id": 297855449,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662667038
    },
    {
        "content": "<p>(The reason it is so big is because it should be splitted in a lot of intermediate constructions, with each <code>have</code> being a lemma basically)</p>",
        "id": 297855585,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662667089
    },
    {
        "content": "<p>I was under the impression that there should be a \"canonical\" family of pseudometrics that does the job. Something like the collection of all pseudometrics for which the associated map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>√ó</mo><mi>X</mi><mo>‚Üí</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">X \\times X \\to\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> is uniformly continuous.</p>",
        "id": 297856269,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662667350
    },
    {
        "content": "<p>But what you have is also canonical, and doesn't involve a \"large\" family!</p>",
        "id": 297856759,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662667561
    },
    {
        "content": "<p>Oh, you are probably right, and I should have thought about it because I was thinking about a similar thing just a week ago while reviewing <a href=\"https://github.com/leanprover-community/mathlib/pull/15035\">#15035</a> (but I didn't take the time to write my thoughts yet, sorry <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ). Anyway, I will think about it between my lectures tomorrow (and of course not <em>during</em> the lectures, who would do that) and see if I can make it work</p>",
        "id": 297864384,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662670825
    }
]