[
    {
        "content": "<p>Dear All,</p>\n<p>I needed the two lemmas below about <code>finset</code> that are the direct analogue of the corresponding lemmas on <code>set</code>.  However, I was not able to find them.  Is there a reason that they are not there?  Should I make a PR to add them?</p>\n<p>Do you also want to golf the proofs?</p>\n<p>Thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subset_iff_inter_eq_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">subset.antisymm</span> <span class=\"o\">(</span><span class=\"n\">s.inter_subset_left</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subset_inter</span> <span class=\"o\">(</span><span class=\"n\">subset.refl</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">s.inter_subset_right</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subset_iff_inter_eq_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">inter_comm</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">subset_iff_inter_eq_left</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 233257887,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617675778
    },
    {
        "content": "<p>Both these and their <code>set</code> analogues should follow from something at the level of (semi)lattices, right? cf. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_eq_left\">docs#inf_eq_left</a></p>",
        "id": 233258243,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617676129
    },
    {
        "content": "<p>The set versions exist and they are <code>set.subset_iff_inter_eq_left</code>/<code>right</code>.  I will try to make the proof work with lattices, thanks!</p>",
        "id": 233258672,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617676557
    },
    {
        "content": "<p>... the statement looks like the one that I want, but I am unable to convince Lean that <code>≤ = ⊆</code> and that <code>⊓ =  ∩</code>.</p>",
        "id": 233258880,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617676770
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/6775\">#6775</a>, I changed a bunch of <code>finset</code> and <code>set</code> proofs to use lattice / (generalized) Boolean algebra versions instead; most of the time Lean is able to see that <code>≤</code> and <code>⊆</code> are defeq, but sometimes I have to use <code>show</code> and some other tricks. Looking at the examples there might help</p>",
        "id": 233261121,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617679061
    },
    {
        "content": "<p>Indeed, thanks!  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subset_iff_inter_eq_left</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inf_eq_left.symm</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊓</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now I am more doubtful: is this lemma worth a PR?</p>",
        "id": 233261703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617679607
    },
    {
        "content": "<p>(Maybe with the two sides of the iff exchanged, to match the lattice version?)</p>",
        "id": 233261755,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617679669
    },
    {
        "content": "<p>I think so, at least judging by the existence of the <code>set</code> versions.</p>",
        "id": 233261919,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617679807
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7053\">#7053</a></p>",
        "id": 233262769,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617680653
    },
    {
        "content": "<p>While placing these lemmas, I saw that the lattice instance is after a bunch of results that might also be proven via the lattice structure.  Should these lemmas be reproven using lattice inf/sup stuff?</p>",
        "id": 233262826,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617680730
    },
    {
        "content": "<p>(I have not checked which ones of these lemmas are needed to get the lattice instance, I simply placed the two new ones after the instance and wondered...)</p>",
        "id": 233262895,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617680803
    },
    {
        "content": "<p>I noticed something similar when I was preparing <a href=\"https://github.com/leanprover-community/mathlib/issues/6775\">#6775</a> and I wasn't sure either. It might be worth playing around with.</p>",
        "id": 233262991,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617680892
    },
    {
        "content": "<p>Ok, I will not do it in this PR, but, if this is something that should happen, I can add the comment</p>\n<p>-- TODO: check which ones of these results now follow from the lattice structure</p>\n<p>before the lemmas that might benefit from this.  Maybe even at the beginning of the file, although the file is quite long.</p>",
        "id": 233263106,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617681029
    },
    {
        "content": "<p>CI <del>successfully built the previous version</del> did not finish yet!</p>\n<p>However, I thought that it did and I added the <code>TODO</code> and I also flipped the iff's, since the subset side seems simpler than the side with the intersection and the equality.</p>",
        "id": 233268599,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617687073
    }
]