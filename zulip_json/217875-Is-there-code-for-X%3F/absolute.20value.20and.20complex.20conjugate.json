[
    {
        "content": "<p>I am confused about the right way to use absolute value and complex conjugate on the complex numbers. I need (some incarnation of) the inference below, but the proof I found seems messy and roundabout. Can someone tell me if there is a better way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">complex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">((</span><span class=\"n\">complex.abs</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex.sq_abs</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">complex.mul_conj</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">((</span><span class=\"n\">complex.abs</span> <span class=\"n\">w</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex.sq_abs</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">complex.mul_conj</span><span class=\"o\">],</span> <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291654017,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1659403492
    },
    {
        "content": "<p>one solution that people may frown upon a little would be this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">complex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">complex.mul_conj</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt_inj</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">norm_sq_nonneg</span>\n</code></pre></div>",
        "id": 291654428,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659403991
    },
    {
        "content": "<p>this is a bit brittle against API change though</p>",
        "id": 291654434,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659404003
    },
    {
        "content": "<p>I would do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">complex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">star_ring_end_apply</span><span class=\"o\">,</span> <span class=\"n\">complex.mul_conj</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">star_ring_end_apply</span><span class=\"o\">,</span> <span class=\"n\">complex.mul_conj</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_sq_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">norm_sq_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 291654538,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659404141
    },
    {
        "content": "<p>one that's less hacky: <code>simpa [complex.sq_abs, complex.mul_conj] using congr_arg (^ 2) h,</code></p>",
        "id": 291654579,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659404163
    },
    {
        "content": "<p>Yes invoking injectivity of square root seems wrong</p>",
        "id": 291654594,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659404201
    },
    {
        "content": "<p>By the way, I think we prefer <code>conj</code> over <code>star</code> (in order to sound more like what outsiders expect);  <code>open_locale complex_conjugate</code> precisely enables the <code>conj</code> notation.</p>",
        "id": 291654739,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1659404381
    },
    {
        "content": "<p>using <code>conj</code> also makes it possible to golf Anatole's proof to <code>simp_rw [mul_conj, complex.norm_sq_eq_abs, h]</code></p>",
        "id": 291655590,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659405541
    },
    {
        "content": "<p>I have this habit of trying <code>rw</code> before <code>simp</code> and I can't decide if it's good or not <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 291655977,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659405977
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 291657293,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1659407545
    }
]