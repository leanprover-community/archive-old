[
    {
        "content": "<p>Is there a way to express specifically, \"the smallest element of s\" where s is a set of natural numbers</p>",
        "id": 212321760,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601914314
    },
    {
        "content": "<p>There are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded.min\">docs#well_founded.min</a> (see also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lt_wf\">docs#nat.lt_wf</a>) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a>.</p>",
        "id": 212322592,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1601914664
    },
    {
        "content": "<p>so I have to import something for <code>.min</code> to work on <code>set \\N</code>, right? how do I figure out what to import</p>",
        "id": 212322934,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601914811
    },
    {
        "content": "<p>I might be wrong, but I don't think you can make it work with dot notation. I think you have to write <code>well_founded.min nat.lt_wf S S_nonempty</code></p>",
        "id": 212323048,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1601914877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/smallest.20element.20of.20a.20set.3F/near/212322934\">said</a>:</p>\n<blockquote>\n<p>how do I figure out what to import</p>\n</blockquote>\n<p>by asking here... and after a while you'll know the library well enough that you start answering these questions yourself (-;</p>\n<p>also <code>grep</code> helps me to find stuff quite often.</p>",
        "id": 212323627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601915127
    },
    {
        "content": "<p>ok. why does some stuff work with dot notation and some stuff not work with dot notation?</p>",
        "id": 212324402,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601915519
    },
    {
        "content": "<p>Roughly speaking: if <code>X</code> is of type <code>foo</code> (possibly with some arguments), then dot notation allows us to write <code>X.bar</code> as a shorthand for <code>foo.bar X</code>. So in order to write <code>S.min</code>, where <code>S</code> is a set, the declaration would have to be named <code>set.min</code></p>",
        "id": 212324971,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1601915819
    },
    {
        "content": "<p>hmm. why isn't a set of natural numbers a well-founded set? i guess because it is only relative to a particular relation</p>",
        "id": 212325242,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601915948
    },
    {
        "content": "<p>For more on dot notation see the end of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\">3.3.1</a> and <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html\">9.1</a> in TPiL. I think it finally clicked for me though after I read <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20confusion/near/157341136\">this thread</a>.</p>",
        "id": 212325387,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601916008
    },
    {
        "content": "<p>well, i'm used to it in the context of programming languages</p>",
        "id": 212325419,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601916030
    },
    {
        "content": "<p>the real question in my head is, why isn't <code>.min</code> a function on sets of integers, like it would be in a \"normal\" programming language</p>",
        "id": 212325455,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601916055
    },
    {
        "content": "<p>for some reason, i'm sure it's a good one, it doesn't just use the sane default of <code>&lt;</code> for the less-than relation</p>",
        "id": 212325605,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601916145
    },
    {
        "content": "<p>i read that thread but there's too many references to other concepts i don't get for me to really get it. which is ok... compared to a normal programming language there's just far more methods and far fewer classes, so their organization is kind of necessarily harder to get through</p>",
        "id": 212325861,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601916298
    },
    {
        "content": "<p>Do you mean <code>.min</code> a function on <code>finset</code>s of integers?</p>",
        "id": 212326240,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601916506
    },
    {
        "content": "<p>Because <code>your_min {x : Z | x &lt; 0}</code> is ...?</p>",
        "id": 212326303,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601916541
    },
    {
        "content": "<p>sorry, natural numbers, not integers</p>",
        "id": 212326338,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601916564
    },
    {
        "content": "<p>Well, I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.min'\">docs#finset.min'</a> would work for what you want.</p>",
        "id": 212326472,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601916634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> You can use <code>S.min</code> once you define <code>set.min</code>. But if you define <code>set.min</code> only for <code>S : set nat</code> then mathlib will not like it, because that definition is too restrictive. So you will have to come up with a definition of <code>set.min</code> that is sufficiently general that it covers all cases that one possibly would want to call <code>set.min</code>.</p>",
        "id": 212326536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601916677
    },
    {
        "content": "<p>i see. so it kind of tracks back to, there is no way to define a function that sometimes throws an error, or that is only defined on some subset of its input.</p>",
        "id": 212327295,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601917036
    },
    {
        "content": "<p>There is, using <code>option</code> or <code>subtype</code>.</p>",
        "id": 212327524,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601917135
    },
    {
        "content": "<p>Depends on what you want to do. Compare the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.min\">docs#finset.min</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.min'\">docs#finset.min'</a></p>",
        "id": 212327589,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601917163
    },
    {
        "content": "<p>ok i have to read up more to discuss this sufficiently intelligently</p>",
        "id": 212327653,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601917201
    },
    {
        "content": "<p>There is a nice example of getting the smallest <code>nat</code> in a set of <code>nat</code>s around line 127 of <code>C:\\Projects\\lean\\mathlib_ufm2\\archive\\imo\\imo1988_q6.lean</code>.</p>",
        "id": 212340706,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601923619
    },
    {
        "content": "<p><code>well_founded.not_lt_min nat.lt_wf S S_nonempty hk</code> it is</p>",
        "id": 212344004,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601925182
    },
    {
        "content": "<p>and after all that, reviewer complains that the simplest way to write this is to use the <code>is_least</code> predicate <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span> ( but thank you for pointing that out <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> )</p>",
        "id": 212364149,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601936778
    },
    {
        "content": "<p>I'm sorry for not telling this earlier. When I read the original question, I thought you were asking about a function that takes a set and returns its minimal element.</p>",
        "id": 212364357,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601936919
    },
    {
        "content": "<p>Probably we should ask for <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> every time.</p>",
        "id": 212364376,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601936937
    },
    {
        "content": "<p>sigh... yeah, i should have realized that the answer to these two questions would live in totally different sublibraries</p>",
        "id": 212364393,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601936960
    }
]