[
    {
        "content": "<p>Are the identity matrices and permutation matrices defined in mathlib?</p>",
        "id": 244292982,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624978010
    },
    {
        "content": "<p>The identity matrix is simply <code>1</code> in the correct type. I don't know about permutation matrices.</p>",
        "id": 244293146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624978071
    },
    {
        "content": "<p><code>perm.to_matrix</code> would be a good definition. I don't think it exists yet.</p>",
        "id": 244293356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624978143
    },
    {
        "content": "<p>At this moment you can compose <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pequiv.to_matrix\">docs#pequiv.to_matrix</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.to_pequiv\">docs#equiv.to_pequiv</a></p>",
        "id": 244293434,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624978184
    },
    {
        "content": "<p>See for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_permutation\">docs#matrix.det_permutation</a> for how this is used</p>",
        "id": 244293688,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624978267
    },
    {
        "content": "<p>How about anything related to permutation equivalence or similarity of matrices?</p>",
        "id": 244295529,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624978848
    },
    {
        "content": "<p>Where is the correspondence between matrices and linear maps?</p>",
        "id": 280731438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651317783
    },
    {
        "content": "<p><code>matrix/to_lin.lean</code>.</p>",
        "id": 280731548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651317937
    },
    {
        "content": "<p>Ugh, this is too horrible. I want to use the fact that invertible matrices over a ring with invariant basis number are square. However our definition of IBN is in terms of linear maps, not matrices. So fine, you say, let's use <code>matrix.to_lin'</code> and <code>linear_map.to_matrix'</code> to convert. However, these are set up as <code>R</code>-linear equivalences, and in order to have that, whoever wrote the file assumed the ring was commutative. This means that I can't cope with division rings. Now everything is fine, you can define <code>matrix.to_lin'</code> as an <em>additive</em> equivalence just fine when <code>R</code> is non-commutative (and it still plays well with composition/matrix multiplication). But it means that I need to rip out and rewrite <code>linear_algebra/matrix/to_lin.lean</code> to handle noncommutative rings... :-(</p>",
        "id": 280732805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651319844
    },
    {
        "content": "<p>Oh ****, it's even worse than that. Because we've set up the scalar action of a ring on functions to that ring by left multiplication (perfectly reasonably), if we want to convert a matrix to an <code>R</code>-linear map we need to use <code>matrix.vec_mul</code>, not <code>matrix.mul_vec</code>. Making that change at this point is too horrible to contemplate right now.</p>",
        "id": 280733872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651321439
    },
    {
        "content": "<p>I am going to go to sleep and hope that in the meantime someone says \"oh, I love doing refactors like that\".</p>",
        "id": 280734104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651321763
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_lin\">docs#matrix.to_lin</a> could be a made a linear map over a different ring</p>",
        "id": 280735957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651324459
    },
    {
        "content": "<p>We just need to get on with the bimodule / two-sided scalar actions refactor. Given a not-necessarily-commutative ring R, R is an R-R bimodule, and functions <code>X -&gt; R</code> are an R-R bimodule, and also has actions by matrices from the left and from the right. Acting by a matrix on the left gives a function <code>X -&gt; R</code> to <code>Y -&gt; R</code>, and this is linear with respect to the right action by R. Conversely on the other side.</p>",
        "id": 280763109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651363269
    },
    {
        "content": "<p>We need to admit to these facts in <code>linear_algebra/matrix/to_lin.lean</code>. :-)</p>",
        "id": 280763125,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651363290
    },
    {
        "content": "<p>A good challenge, I think, is proving that invertible matrices over a ring with invariant basis number are square. This is absolutely maths-trivial, but unspeakable in current mathlib.</p>",
        "id": 280763193,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651363389
    },
    {
        "content": "<p>I think we have all the pieces you need for the bimodules spelling already</p>",
        "id": 280763338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651363598
    },
    {
        "content": "<p>You can make <code>to_lin</code> a <code>(n → R) →ₗ [Rᵐᵒᵖ] (n → R)</code> today</p>",
        "id": 280763366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651363669
    },
    {
        "content": "<p>Note that it's not possible to have an action of <code>matrix m n R</code> on <code>n → R</code> (at least, not a <code>mul_action</code>), because rectangular matrices have a type incompatible with <code>has_mul</code></p>",
        "id": 280763489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651363898
    },
    {
        "content": "<p>I don't mind that we can't have matrices act by a <code>mul_action</code>.</p>",
        "id": 280768349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651372082
    },
    {
        "content": "<p>I've put up <a href=\"https://github.com/leanprover-community/mathlib/pull/13845\">#13845</a>, which illustrates the change I'd like: <code>matrix.square_of_invertible</code> to work without the commutativity assumption.</p>",
        "id": 280768392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651372130
    },
    {
        "content": "<p>I don't think having <code>to_lin'</code> produce a <code>(n → R) →ₗ [Rᵐᵒᵖ] (n → R)</code> is actually that helpful. Instead I want <code>to_lin</code> to use <code>vec_mul</code> instead of <code>mul_vec</code>, but I have no idea how much refactoring that will take.</p>",
        "id": 280768469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651372236
    },
    {
        "content": "<p>I guess there should just be two versions of <code>to_lin'</code>, one via the right action (giving an R-linear map) and one via the left action (giving an R^mop-linear map).</p>",
        "id": 280768487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651372273
    },
    {
        "content": "<p>My claim is that the one via the left action that we currently have is the map that people would expect to find, and that <code>→ₗ [Rᵐᵒᵖ]</code> is unhelpful only because we're missing generalizations elsewhere too</p>",
        "id": 280782784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651394885
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib/pull/13870\">#13870</a> does the bare beginnings of this refactor, for now just giving me what I need to proceed with some representation theory, and an extensive note explaining what will need to happen later.</p>",
        "id": 280824020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651454288
    }
]