[
    {
        "content": "<p>I started playing around with Lean, and I wonder if there is code for <a href=\"https://en.wiktionary.org/wiki/bilattice\">https://en.wiktionary.org/wiki/bilattice</a></p>",
        "id": 223649610,
        "sender_full_name": "Simon Marynissen",
        "timestamp": 1611326664
    },
    {
        "content": "<p>Nope, I don't think so.</p>",
        "id": 223649748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611326737
    },
    {
        "content": "<p>We have all sorts of lattices, but not two on the same object.</p>",
        "id": 223649790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611326752
    },
    {
        "content": "<p>That's unfortunate, It would be nice to use \\le\\_1 and \\le\\_2 for the orders. But I think \\le is reserved.</p>",
        "id": 223650069,
        "sender_full_name": "Simon Marynissen",
        "timestamp": 1611326862
    },
    {
        "content": "<p>\\le is reserved indeed, but you can definitely define new notations \\le\\1 and \\le\\2 and use that notation for your definition of bilattice.</p>",
        "id": 223678465,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611339347
    },
    {
        "content": "<p>Though - thinking about it - it might be inconvenient to apply lemmas about lattices for these structures, since lattices use the notation \\le.</p>",
        "id": 223678632,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611339422
    },
    {
        "content": "<p>Another approach is to do something similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite\">docs#opposite</a> (see module doc) to get two orders on the same type. However, with <code>opposite</code> we tend to not mix the two different operations, while in bilattices we definitely want to mix them. That might get inconvenient.<br>\nI think it's a tricky question how to do bilattices cleanly in mathlib.</p>",
        "id": 223679160,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611339647
    },
    {
        "content": "<p>Oh, a better idea: make  \\le\\1 and  similar local notation for \\le with a specific instance.<br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≤₁</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"n\">α</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">h1</span> <span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≤₁</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"n\">α</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">h2</span> <span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">⊓₁</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_inf.inf</span> <span class=\"n\">α</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">h1</span> <span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">⊔₂</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_sup.sup</span> <span class=\"n\">α</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">h2</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- etc.</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bilattice</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">example_axiom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊓₁</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">⊔₂</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"c1\">-- I don't know the actual axioms for bilattices</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">example_axiom</span> <span class=\"o\">[</span><span class=\"n\">bilattice</span> <span class=\"n\">α</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊓₁</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">⊔₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">bilattice.example_axiom</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 223686423,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611343383
    },
    {
        "content": "<p>I would think that a <code>bilattice</code> would be best modeled as just a bijection between two lattices, but also I don't really think we should create an API for them until someone has something they'd like to prove.</p>",
        "id": 223697920,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611348570
    },
    {
        "content": "<p>Oh, that is probably a better idea. I agree we shouldn't put them in mathlib until they are used, but I think it's good to think about whether our current API (about lattices) is future proof in the sense that we can define other concepts (bilattices) on top of them.</p>",
        "id": 223701661,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611350289
    },
    {
        "content": "<p>We need to be very careful when messing up with lattices because they are used a <em>lot</em>.</p>",
        "id": 223702098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611350518
    },
    {
        "content": "<p>Bilattices are used for semantics of logic programming. It would be nice to be able to use all the results for lattices. The question was not to ask support for it in mathlib.<br>\nWouldn't it make difficult to work with it if it is represented as a bijection between two lattices. What for example with structures that combine multiple different structures like for example topological groups or trilattices. In order to keep modularity I suppose we should not change lattices in any way.</p>",
        "id": 223755244,
        "sender_full_name": "Simon Marynissen",
        "timestamp": 1611416212
    },
    {
        "content": "<p>It'd be a bit of a pain, at least at first, to work with the bijection, but based on how much the syntax in mathlib is based on referring to THE &lt;-relation or THE lattice structure on a type, if you put both lattice structures on the same type, you'll have no way of distinguishing them, and it'll be intractable.</p>",
        "id": 223761352,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611424258
    },
    {
        "content": "<p>And if you want to talk about, say, <code>&lt;1</code> and <code>&lt;2</code>, with corresponding meets, joins, etc., you have to copy basically every statement you want about lattices for each separate lattice structure manually (or metaprogram this process)</p>",
        "id": 223761367,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611424291
    },
    {
        "content": "<p>There are already several well-developed APIs where you have multiple structures of the same kind on the same object in mathlib - but they're nearly always through some bijection - I believe the best term for this would be a \"type synonym\".</p>",
        "id": 223761442,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611424366
    },
    {
        "content": "<p>For instance, there is already a bilattice in mathlib, it's just not called that. There is a bijection between every lattice and its <code>order_dual</code>, which has its own lattice structure.</p>",
        "id": 223761527,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611424456
    }
]