[
    {
        "content": "<p>Does this exist?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_trans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_antisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list.sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">list.drop</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225050492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612373565
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le_of_sorted_of_le\">docs#list.nth_le_of_sorted_of_le</a> is close</p>",
        "id": 225053581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612374865
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6027\">#6027</a></p>",
        "id": 225054571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612375216
    },
    {
        "content": "<p>Two related lemmas that also seem missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.exists_i_lt_of_mem_take</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.exists_le_i_of_mem_drop</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.drop</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225056528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612375974
    },
    {
        "content": "<p>Maybe <code>mem_take_iff</code> and <code>mem_drop_iff</code> as well (or instead)?</p>",
        "id": 225057011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612376163
    },
    {
        "content": "<p>To avoid the sorry in the statement, use <code>x \\in l.nth i</code></p>",
        "id": 225057528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612376398
    },
    {
        "content": "<p>Is there a lemma to convert from <code>x ∈ l.nth i</code> to the <code>nth_le</code> version?</p>",
        "id": 225057657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612376441
    },
    {
        "content": "<p>and I think that the better way to expose this is <code>i &lt; k -&gt; (l.take k).nth i = l.nth i</code></p>",
        "id": 225057661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612376442
    },
    {
        "content": "<p>yes</p>",
        "id": 225057665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612376445
    },
    {
        "content": "<p>The statement I have above is the one I actually need if I want to reuse <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le_of_sorted_of_le\">docs#list.nth_le_of_sorted_of_le</a> in <a href=\"https://github.com/leanprover-community/mathlib/issues/6027\">#6027</a> instead of working from scratch</p>",
        "id": 225057819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612376502
    },
    {
        "content": "<p>It's not hard to go back and forth from nth to nth_le</p>",
        "id": 225057936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612376536
    },
    {
        "content": "<p>it might be worth making an <code>nth</code> version of that lemma though</p>",
        "id": 225057999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612376562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_take_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.index_of</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n</code></pre></div>",
        "id": 225058078,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612376591
    },
    {
        "content": "<p>that's a bit different, that's about searching in a list</p>",
        "id": 225058144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612376614
    },
    {
        "content": "<p>I think some combination of <code>nth_le_of_mem</code> with <code>nth_le_take'</code> gives things close to <code>mem_take_iff</code> as well</p>",
        "id": 225058171,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612376628
    },
    {
        "content": "<p>Here's the proof I came up with using <code>nth_le</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.exists_i_lt_of_mem_take</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.take</span><span class=\"o\">,</span> <span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k.zero_lt_succ</span><span class=\"o\">,</span> <span class=\"n\">l_tl.length.zero_lt_succ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">l_ih</span> <span class=\"n\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i.succ</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_lt_succ</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225058281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612376657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Halves.20of.20a.20sorted.20list.20are.20related/near/225058144\">said</a>:</p>\n<blockquote>\n<p>that's a bit different, that's about searching in a list</p>\n</blockquote>\n<p>I realise that, but we also have lemmas to convert between searching and nth, so it's an alternate approach to the original question</p>",
        "id": 225058291,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612376659
    },
    {
        "content": "<p>plus that version needs decidable eq</p>",
        "id": 225058302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612376667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Halves.20of.20a.20sorted.20list.20are.20related/near/225058281\">said</a>:</p>\n<blockquote>\n<p>Here's the proof I came up with using <code>nth_le</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.exists_i_lt_of_mem_take</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.take</span><span class=\"o\">,</span> <span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k.zero_lt_succ</span><span class=\"o\">,</span> <span class=\"n\">l_tl.length.zero_lt_succ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">l_ih</span> <span class=\"n\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i.succ</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_lt_succ</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.exists_i_lt_of_mem_take</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nth_le_of_mem</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lt_min_iff</span><span class=\"o\">,</span> <span class=\"n\">length_take</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm.1</span><span class=\"o\">,</span> <span class=\"n\">hm.2</span><span class=\"o\">,</span> <span class=\"n\">nth_le_take'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>an alternate, shorter proof</p>",
        "id": 225058723,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612376829
    },
    {
        "content": "<p>What does the proof for the <code>l.nth</code> version look like?</p>",
        "id": 225059201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612377008
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.exists_i_lt_of_mem_take'</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nth_le_of_mem</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lt_min_iff</span><span class=\"o\">,</span> <span class=\"n\">length_take</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm.1</span><span class=\"o\">,</span> <span class=\"n\">hm.2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nth_le_take'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nth_le_nth</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this is what I get</p>",
        "id": 225059633,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612377179
    },
    {
        "content": "<p>maybe there's a nicer way?</p>",
        "id": 225059651,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612377185
    },
    {
        "content": "<p>Which of <code>↑x = l.nth i</code>, <code>some x = l.nth i</code> and <code>x ∈ l.nth i</code> is simp-normal?</p>",
        "id": 225059737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612377225
    },
    {
        "content": "<p>For me the last one isn't, and the other two don't simplify?</p>",
        "id": 225060121,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612377368
    },
    {
        "content": "<p>I'll PR your first proof I think Bhavik</p>",
        "id": 225060632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612377579
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.exists_i_lt_of_mem_drop</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.drop</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nth_le_of_mem</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">length_drop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">nat.le_add_right</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">nat.add_lt_of_lt_sub_left</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">nth_le_drop'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>for the other one</p>",
        "id": 225060634,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612377580
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.nth_lt_length</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l.nth</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">list.nth_eq_some.1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.mem_take_nth</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span> <span class=\"bp\">↔</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list.nth_lt_length</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"o\">(</span><span class=\"n\">list.length_take_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">list.nth_take</span> <span class=\"n\">this</span><span class=\"o\">]⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">list.nth_take</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.mem_take_iff_nth</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.mem_iff_nth.trans</span> <span class=\"o\">(</span><span class=\"n\">exists_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">list.mem_take_nth</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.exists_i_lt_of_mem_take</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">list.mem_take_iff_nth.1</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">list.nth_eq_some.1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂.symm</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225060803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612377627
    },
    {
        "content": "<p>I feel like <code>k</code> should be implicit in <code>exists_i_lt_of_mem_take</code> as well</p>",
        "id": 225060994,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612377702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, at this point could you PR it?</p>",
        "id": 225061034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612377717
    },
    {
        "content": "<p>I don't think that one should be PR'd actually, it's just there to show how the other lemmas come together</p>",
        "id": 225061133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612377752
    },
    {
        "content": "<p>the proof is kind of uninteresting, it's just unpacking the other existentials and putting them back together. That can be done in a user proof</p>",
        "id": 225061229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612377805
    },
    {
        "content": "<p>My original plan was to PR <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>'s two lemmas as <code>nth_le_of_mem_drop</code> and <code>nth_le_of_mem_take</code></p>",
        "id": 225061234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612377808
    },
    {
        "content": "<p>To complement the existing <code>nth_le_of_mem</code></p>",
        "id": 225061289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612377831
    },
    {
        "content": "<p>The simp normal form is <code>o = some a</code>, although I prefer <code>a \\in o</code></p>",
        "id": 225061412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612377866
    },
    {
        "content": "<p>If you don't think those lemmas should be PR'd, are you saying your auxiliary ones should?</p>",
        "id": 225061475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612377888
    },
    {
        "content": "<p>yes, I think <code>mem_take_nth</code> is a nice lemma</p>",
        "id": 225061529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612377908
    },
    {
        "content": "<p>the one for drop is a bit more complicated</p>",
        "id": 225061607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612377938
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list.sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">list.drop</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">list.exists_i_lt_of_mem_take</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm₁</span><span class=\"o\">,</span> <span class=\"n\">hm₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">list.exists_i_lt_of_mem_drop</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn₁</span><span class=\"o\">,</span> <span class=\"n\">hn₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pairwise_iff_nth_le.mp</span> <span class=\"n\">ls</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hn₂</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hm₁</span> <span class=\"n\">hn₁</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>we don't need the transitivity assumption in your original lemma</p>",
        "id": 225061646,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612377952
    },
    {
        "content": "<p><code>list.nth_lt_length</code> seems like a confusing name given it looks like it contains <code>nth_lt</code>, perhaps <code>list.lt_length_of_mem_nth</code>?</p>",
        "id": 225061774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612377990
    },
    {
        "content": "<p>Actually I would argue that <code>nth_le</code> is the one with the bad name</p>",
        "id": 225061834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612378011
    },
    {
        "content": "<p>it doesn't even have an <code>le</code> in it</p>",
        "id": 225061874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612378029
    },
    {
        "content": "<p>@Bhavik, I copy-pasted those from the definition for <code>sorted</code> I thought, but I guess I screwed up</p>",
        "id": 225061895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612378035
    },
    {
        "content": "<p>having a definition be named the same as two other definitions separated by <code>_</code> leads to a whole lot of name clashes</p>",
        "id": 225062020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612378077
    },
    {
        "content": "<p>same thing with <code>list.filter_map</code></p>",
        "id": 225062061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612378083
    },
    {
        "content": "<p>Are you advocating a rename <code>nth_le</code> to <code>nth_lt</code> or even <code>nth_of_lt</code>?</p>",
        "id": 225062137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612378114
    },
    {
        "content": "<p>no, something in one word like <code>pnth</code> or something</p>",
        "id": 225062208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612378145
    },
    {
        "content": "<p>or <code>nth'</code></p>",
        "id": 225062243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612378160
    },
    {
        "content": "<p><code>nth_of_lt</code> would be much worse, because then you will be super confused reading things like <code>nth_of_lt_eq_self_of_lt</code></p>",
        "id": 225062407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612378208
    },
    {
        "content": "<p>What's wrong with this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_le_of_sorted_of_lt</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.sorted</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.pairwise_iff_nth_le.1</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sorted.rel_of_mem_take_of_mem_drop</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">list.sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.take</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">list.drop</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">iy</span><span class=\"o\">,</span> <span class=\"n\">hiy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nth_le_of_mem</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ix</span><span class=\"o\">,</span> <span class=\"n\">hix</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nth_le_of_mem</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nth_le_take'</span><span class=\"o\">,</span> <span class=\"n\">nth_le_drop'</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nth_le_of_sorted_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.lt_add_right</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hix</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hix.left</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225064855,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612379175
    },
    {
        "content": "<p>I guess that is golfed if <code>list.exists_i_lt_of_mem_take</code> exists.</p>",
        "id": 225065064,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612379276
    },
    {
        "content": "<p>that looks good to me, I was answering the Y instead of the X in eric's <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> question</p>",
        "id": 225065124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612379291
    },
    {
        "content": "<p>I've updated the PR to use <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>'s approach. Feel free to edit the PR description to include a <code>Co-authored-by</code> line.</p>",
        "id": 225065982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612379664
    }
]