[
    {
        "content": "<p>Is this true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inf_Sup_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Naively I'd expect it to follow from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_sup_right\">docs#inf_sup_right</a>, but that perhaps presupposes a recursion principle on <code>set</code>. We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr_inf_le_inf_Sup\">docs#supr_inf_le_inf_Sup</a> which states this as an inequality, but I can't tell whether the stronger statement is false or just missing.</p>",
        "id": 227622365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614182646
    },
    {
        "content": "<p>This is not true: If <code>s</code> is a basis of a vector space, and <code>b</code> is a 1-dimensional subspace which is not the span of any member of this basis, that would give a contradiction.</p>",
        "id": 227623116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614182854
    },
    {
        "content": "<p>Sorry, to be more precise <code>s</code> should be the set of spans of members of a basis.</p>",
        "id": 227623259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614182895
    },
    {
        "content": "<p>(the lattice here being the lattice of subspaces of the vector space)</p>",
        "id": 227623481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614182992
    },
    {
        "content": "<p>Oh, I guess i meant <code>complete_distrib_lattice</code>?</p>",
        "id": 227623497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614182998
    },
    {
        "content": "<p><code>inf_Sup_eq</code></p>",
        "id": 227623622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614183025
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_Sup_eq\">docs#inf_Sup_eq</a></p>",
        "id": 227623635,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614183028
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Sup_inf_eq\">docs#Sup_inf_eq</a></p>",
        "id": 227623663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614183043
    },
    {
        "content": "<p>Yep, just found it</p>",
        "id": 227623671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614183046
    },
    {
        "content": "<p>The name doesn't match the pattern that <code>inf_sup_right</code> led me to expect</p>",
        "id": 227623824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614183088
    },
    {
        "content": "<p>The actual motivation for my question was for whether this statement is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">independent</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">independent</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think this one is, but I was only able to prove a weaker statement in <a href=\"https://github.com/leanprover-community/mathlib/issues/6405\">#6405</a></p>",
        "id": 227636803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614187189
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span>, since I think you added <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a></p>",
        "id": 227637528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614187425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/inf_Sup_right/near/227622365\">said</a>:</p>\n<blockquote>\n<p>Is this true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inf_Sup_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Naively I'd expect it to follow from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_sup_right\">docs#inf_sup_right</a>, but that perhaps presupposes a recursion principle on <code>set</code>. We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr_inf_le_inf_Sup\">docs#supr_inf_le_inf_Sup</a> which states this as an inequality, but I can't tell whether the stronger statement is false or just missing.</p>\n</blockquote>\n<p>This is only true in a <code>complete_distrib_lattice</code>, or for directed <code>s</code> in an upper continuous lattice (we don't have a definition for upper continuous, but it's implied by <code>compactly_generated</code>)</p>",
        "id": 227638823,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614187859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/inf_Sup_right/near/227636803\">said</a>:</p>\n<blockquote>\n<p>The actual motivation for my question was for whether this statement is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">independent</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">independent</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think this one is, but I was only able to prove a weaker statement in <a href=\"https://github.com/leanprover-community/mathlib/issues/6405\">#6405</a></p>\n</blockquote>\n<p>I'm not sure what conditions are necessary for this... it feels like the proof I'm imagining requires inducting on some kind of Steinitz exchange property</p>",
        "id": 227639356,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614188038
    },
    {
        "content": "<p>I guess another question to ask would be \"if its not true, should <code>independent</code> be redefined such that it is?\"</p>",
        "id": 227641044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614188631
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 227641325,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614188717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/inf_Sup_right/near/227641044\">said</a>:</p>\n<blockquote>\n<p>I guess another question to ask would be \"if its not true, should <code>independent</code> be redefined such that it is?\"</p>\n</blockquote>\n<p>I can check the literature (by which I mean my one book on lattice theory, which I downloaded like a month and a half ago), but I'm pretty sure that's the default phrasing for all lattices.</p>",
        "id": 227641544,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614188794
    },
    {
        "content": "<p>In order to get the exchange property I'm thinking of, I think what's required is a geometric lattice (as that would correspond to the lattice of closed sets on a matroid), and while we don't have that defined right now, <code>[is_compactly_generated α] [is_modular_lattice α]</code> would suffice.</p>",
        "id": 227641887,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614188927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/inf_Sup_right/near/227641544\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/inf_Sup_right/near/227641044\">said</a>:</p>\n<blockquote>\n<p>I guess another question to ask would be \"if its not true, should <code>independent</code> be redefined such that it is?\"</p>\n</blockquote>\n<p>I can check the literature (by which I mean my one book on lattice theory, which I downloaded like a month and a half ago), but I'm pretty sure that's the default phrasing for all lattices.</p>\n</blockquote>\n<p>Yeah, Calugareanu's Lattice Concepts in Module Theory defines <code>independent</code> this way for complete lattices in general, and then proves facts about it assuming more conditions on the lattices.</p>",
        "id": 227642534,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614189195
    },
    {
        "content": "<p>Outline of proof: <code>complete_lattice.independent_iff_finite</code> lets you reduce everything to finsets, and then you can move one element over at a time using <code>disjoint.disjoint_sup_right_of_disjoint_sup_left</code></p>",
        "id": 227643817,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614189670
    },
    {
        "content": "<p>This should let you show that <code>disjoint (Sup x) (Sup y)</code> where <code>x</code> and <code>y</code> are finsets is equivalent to <code>disjoint (Sup \\emptyset) (Sup (x \\cup y))</code></p>",
        "id": 227644443,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614189917
    },
    {
        "content": "<p>which is true</p>",
        "id": 227644454,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614189920
    },
    {
        "content": "<p>I have this vague idea that this sort of thing is the whole point of matroids (moving things one at a time , eg to prove that all bases of a fdvs have the same size)</p>",
        "id": 227660403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614196211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> that's right -- this is the so-called \"exchange\" axiom.</p>",
        "id": 227660986,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614196463
    },
    {
        "content": "<p>Does lean have matroids?</p>\n<p>For full context, the statement I was vaguely hoping to prove was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.direct_sum_module</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">direct_sum.collapse</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">direct_sum.to_module</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">submodule.of_le</span> <span class=\"o\">(</span><span class=\"n\">le_supr</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- This makes `S` an internal direct sum. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">direct_sum.collapse_injective</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice.independent</span> <span class=\"bp\">$</span> <span class=\"n\">set.range</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.collapse</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 227739552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614245249
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> is working on matroids but was having problems with finiteness type class issues</p>",
        "id": 227740972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614246040
    },
    {
        "content": "<p>We have matroids, but unfortunately none of their connections with linear algebra or lattices yet. For what it’s worth, here’s the repository: <a href=\"https://github.com/e45lee/lean-matroids\">https://github.com/e45lee/lean-matroids</a> </p>\n<p>Messy, WIP, etc.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, the type class issues have cropped up here and there, but aren’t getting in our way too much. Things are progressing well.</p>",
        "id": 227764160,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1614258775
    },
    {
        "content": "<p>With the help of clues left by <span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span>, who may or may not have read this thread, I was able to show essentially the above in <a href=\"https://github.com/leanprover-community/mathlib/issues/9214\">#9214</a>, as <code>independent_iff_dfinsupp_lsum_ker</code>. However, the approach that Hanting took works only for <code>add_comm_group M</code> and not <code>add_comm_monoid  M</code> as it involves constructions via subtraction. Is it even true for <code>add_comm_monoid M</code>?</p>",
        "id": 254718812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632495864
    }
]