[
    {
        "content": "<p>Is ring tactics make use of the fact that the ring has characteristic p?</p>",
        "id": 235262411,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618873195
    },
    {
        "content": "<p>no</p>",
        "id": 235262551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873246
    },
    {
        "content": "<p>For example if given the fact that a ring has characteristic p, then the tactic will rewrite all \"-\" to \"+\" and rewrite the integer appeared in the expression to [0,p-1]</p>",
        "id": 235262599,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618873266
    },
    {
        "content": "<p>I don't even know if we have any examples of characteristic p fields in mathlib where p is not a variable</p>",
        "id": 235262713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873308
    },
    {
        "content": "<p>Oh ok. How can I implement such tactics? Any suggestions?</p>",
        "id": 235262765,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618873324
    },
    {
        "content": "<p>If p is a variable then that will do more harm than good</p>",
        "id": 235262789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873343
    },
    {
        "content": "<p>Ok I mean p is a constant, not a variable</p>",
        "id": 235262804,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618873359
    },
    {
        "content": "<p>right. who does that?</p>",
        "id": 235262822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873370
    },
    {
        "content": "<p>plus the typeclass problem could be tricky - it has to discover this char p fact somehow</p>",
        "id": 235262920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873418
    },
    {
        "content": "<p>Ask the user to provide that information explicitly</p>",
        "id": 235263014,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618873449
    },
    {
        "content": "<p>Do you have an example?</p>",
        "id": 235263031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873461
    },
    {
        "content": "<p>That is used a lot, for example, some basic properties of Weierstrass equations in char 2 or 3 case</p>",
        "id": 235263072,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618873492
    },
    {
        "content": "<p>What I would suggest is something similar to our faux-grobner basis proof method: use <code>ring</code> to prove that your polynomial is equal to a multiple of 2 or 3, then rewrite with <code>2 = 0</code></p>",
        "id": 235263125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873521
    },
    {
        "content": "<p>In fact this might even just be a special case of grobner basis</p>",
        "id": 235263327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873616
    },
    {
        "content": "<p>Currently I just use ring tactics and manually identify which integers I need to rewrite to make both sides equal, then I write a simple lemma to produce such identities</p>",
        "id": 235263374,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618873654
    },
    {
        "content": "<p>Do you have an example?</p>",
        "id": 235263397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873667
    },
    {
        "content": "<p>Please wait a moment; let me extract a piece of code</p>",
        "id": 235263467,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618873698
    },
    {
        "content": "<p>It should be possible to do this in ~2 lines without a lemma</p>",
        "id": 235263470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618873700
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">weierstrass_equation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">a3</span> <span class=\"n\">a4</span> <span class=\"n\">a6</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weierstrass_equation.b2</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_equation</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">E.a1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">E.a2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weierstrass_equation.b4</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_equation</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">E.a4</span> <span class=\"bp\">+</span> <span class=\"n\">E.a1</span><span class=\"bp\">*</span><span class=\"n\">E.a3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weierstrass_equation.b6</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_equation</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">E.a3</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">E.a6</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weierstrass_equation.b8</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_equation</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">E.a1</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">E.a6</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">E.a2</span><span class=\"bp\">*</span><span class=\"n\">E.a6</span> <span class=\"bp\">-</span> <span class=\"n\">E.a1</span><span class=\"bp\">*</span><span class=\"n\">E.a3</span><span class=\"bp\">*</span><span class=\"n\">E.a4</span> <span class=\"bp\">+</span> <span class=\"n\">E.a2</span><span class=\"bp\">*</span><span class=\"n\">E.a3</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">E.a4</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weierstrass_equation.disc</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_equation</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"bp\">-</span><span class=\"n\">E.b2</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">E.b8</span> <span class=\"bp\">-</span> <span class=\"mi\">8</span><span class=\"bp\">*</span><span class=\"n\">E.b4</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">27</span><span class=\"bp\">*</span><span class=\"n\">E.b6</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span><span class=\"bp\">*</span><span class=\"n\">E.b2</span><span class=\"bp\">*</span><span class=\"n\">E.b4</span><span class=\"bp\">*</span><span class=\"n\">E.b6</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weierstrass_equation.is_model_of_char_2_j_non_zero</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_equation</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">E.a1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">E.a3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">E.a4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_char_is_zero</span>\n<span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_char.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">char_p.int_cast_eq_zero_iff</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- unused in this example but you got the point</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cong_char_is_eq</span>\n<span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_char.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">char_p.int_coe_eq_int_coe_iff</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int.modeq.modeq_iff_dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">weierstrass_equation.disc_of_model_of_char_2_j_non_zero</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_equation</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">E.is_model_of_char_2_j_non_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hchar2</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">E.disc</span> <span class=\"bp\">=</span> <span class=\"n\">E.a6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">weierstrass_equation.disc</span>\n  <span class=\"n\">weierstrass_equation.b2</span>\n  <span class=\"n\">weierstrass_equation.b4</span>\n  <span class=\"n\">weierstrass_equation.b6</span>\n  <span class=\"n\">weierstrass_equation.b8</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.2</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- here I imagine a tactic 'ring_char_p hchar2' should do all the tricks</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_pow</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_char_is_zero</span> <span class=\"n\">hchar2</span> <span class=\"mi\">432</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_char_is_zero</span> <span class=\"n\">hchar2</span> <span class=\"mi\">64</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_char_is_zero</span> <span class=\"n\">hchar2</span> <span class=\"mi\">48</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_char_is_zero</span> <span class=\"n\">hchar2</span> <span class=\"mi\">12</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">-</span><span class=\"n\">E.a6</span> <span class=\"bp\">=</span> <span class=\"n\">E.a6</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">E.a6</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">E.a6</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_char_is_zero</span> <span class=\"n\">hchar2</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235265010,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618874673
    },
    {
        "content": "<p>In this example I need to manually find out all integer constants 432,64,48,12 and rewrites all of them to zero. I imagine there could be an automatic way to do this.</p>",
        "id": 235265097,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618874756
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">weierstrass_equation.disc_of_model_of_char_2_j_non_zero</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">weierstrass_equation</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">E.is_model_of_char_2_j_non_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hchar2</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">E.disc</span> <span class=\"bp\">=</span> <span class=\"n\">E.a6</span> <span class=\"o\">:=</span>\n<span class=\"n\">sub_eq_zero.1</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ring_char.spec</span> <span class=\"n\">K</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">hchar2</span><span class=\"o\">),</span> <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">E.a6</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">E.a2</span> <span class=\"bp\">+</span> <span class=\"mi\">24</span> <span class=\"bp\">*</span> <span class=\"n\">E.a2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">32</span> <span class=\"bp\">*</span> <span class=\"n\">E.a2</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">216</span> <span class=\"bp\">*</span> <span class=\"n\">E.a6</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">weierstrass_equation.disc</span><span class=\"o\">,</span> <span class=\"n\">weierstrass_equation.b2</span><span class=\"o\">,</span> <span class=\"n\">weierstrass_equation.b4</span><span class=\"o\">,</span>\n      <span class=\"n\">weierstrass_equation.b6</span><span class=\"o\">,</span> <span class=\"n\">weierstrass_equation.b8</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.2</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235266590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618875770
    },
    {
        "content": "<p><del>I didn't prove 2=0 but I'm sure you have theorems for that</del></p>",
        "id": 235266628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618875813
    },
    {
        "content": "<p>Do we have a typeclass for <code>ring_char K = 2</code>? If so, could we add a special case for that that says <code>bit0 x = 0</code> and <code>bit1 x = 1</code>?</p>",
        "id": 235266652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618875840
    },
    {
        "content": "<p>Which would knock out all the integer literals very quickly</p>",
        "id": 235266709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618875859
    },
    {
        "content": "<p>yeah it's <code>char_p K 2</code></p>",
        "id": 235266718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618875867
    },
    {
        "content": "<p>This wouldn't work for 3 though</p>",
        "id": 235266739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618875886
    },
    {
        "content": "<p>Do you think those lemmas would be a bad idea then?</p>",
        "id": 235266886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618875980
    },
    {
        "content": "<p>Because of the trick I just showed above, I don't find the need for a new decision procedure particularly pressing. <code>norm_fin</code> does a lot of similar reasoning but that's on <code>fin n</code>, not a ring of finite characteristic</p>",
        "id": 235266913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618875985
    },
    {
        "content": "<p>Reducing the constants is only one possible thing you can do here, and it's not particularly helpful to solving the goal</p>",
        "id": 235266958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618876018
    },
    {
        "content": "<p>what you actually want is to factor the polynomial into sums of multiples of things that you know are zero, which is what a grobner basis tactic would do</p>",
        "id": 235267029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618876054
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/116395-maths/topic/groebner.20basis.20algorithm\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/groebner.20basis.20algorithm</a></p>",
        "id": 235267366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618876263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/ring.20tactics.20for.20characteristic.20p.3F/near/235266886\">said</a>:</p>\n<blockquote>\n<p>Do you think those lemmas would be a bad idea then?</p>\n</blockquote>\n<p>It would fire on every subterm of every numeral, triggering a typeclass search that almost always fails. Sounds like a bad idea</p>",
        "id": 235269074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618877437
    },
    {
        "content": "<p>maybe as an opt in simp lemma</p>",
        "id": 235269108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618877464
    },
    {
        "content": "<p>I think they are great lemmas, but they shouldn't be in the default simp-set.</p>",
        "id": 235292511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618899180
    },
    {
        "content": "<p>Special case calculations for <code>p = 2</code> show up often enough that I think a bit of extra support for them doesn't hurt.</p>",
        "id": 235292618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618899263
    },
    {
        "content": "<p>For the <code>ring_char K = 3</code>, could you use <code>bit0 x = - x</code> and <code>bit1 x = 1 - x</code>?</p>\n<p>Or would the <code>bit1</code> lemma be undoing the good that <code>bit1</code> does?</p>",
        "id": 235293125,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618899638
    },
    {
        "content": "<p>Hah, I guess that would help! Together with <code>neg_neg</code> which will cancel all the negations.</p>",
        "id": 235293329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618899793
    },
    {
        "content": "<p>Ok, I just got myself confused with signs and <code>bit1</code>: is what I wrote correct for <code>bit1</code>?  [<code>bit1 x = 1 - x</code>]</p>",
        "id": 235293368,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618899830
    },
    {
        "content": "<p>This is like \"divisibility by 11\" in decimals: the alternating sign of the digits-mod-two is the remainder of division by 3.</p>",
        "id": 235293479,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618899882
    },
    {
        "content": "<p><code>bit1 x = 2x + 1 = -x + 1</code></p>",
        "id": 235293496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618899897
    },
    {
        "content": "<p>Ok, so I did get it right!  Thanks, Johan!</p>",
        "id": 235293533,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618899922
    },
    {
        "content": "<p>I would say that, by far, the most computations modulo a specific prime happen <code>mod 2</code> or <code>mod 3</code>.  Other primes are very often just \"generic\".</p>",
        "id": 235293602,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618899979
    },
    {
        "content": "<p>Sorry, but I think I don't quite understand your discussions. (Why are they only applicable for char 2 or 3 case? And why are there bit0, bit1, etc. Why do you need a Grobener basis algorithm?)</p>\n<p>What tactics I think, in its basic form, only reduces all integer literals appears in the expression. I assume it's easy to implement? Just traverse the whole expression, find all integer literals <code>m</code>, check that if it's in a ring whose characteristic is also an integer literal <code>n</code>, then replace <code>m</code> by <code>m%n</code>. Also it replaces all <code>A - m * B</code> by <code>A + ((-m)%n) * B</code>.</p>\n<p>Example: if R is a ring, say of characteristic 10 (characteristic of a ring is not necessarily a prime number), x is a variable in R. Then after providing all necessary information to the tactics, it should transform <code>34 * x^2 - 193 * x + 1720</code> into <code>4 * x^2 + 7 * x</code>.</p>",
        "id": 235330274,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618919793
    },
    {
        "content": "<p>A more advanced implementation also checks whether an integer literal <code>m</code> is a zero divisor, or is invertible, in a ring R whose characteristic is an integer literal <code>n</code>. Example: if R is a ring of characteristic 10, then it should transform <code>7*x=0</code> into <code>x=0</code> since 7 is invertible in R, transform <code>7*x\\neq 0</code> into <code>x\\neq 0</code>, etc.</p>",
        "id": 235330945,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618920119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> If you have the number <code>5</code> in Lean, how does Lean handle it? the way it works is that there is a binary system under the hood.<br>\nSo <code>5 = 2 * (2 * 1) + 1</code>. Now <code>bit0 x = x + x</code> and <code>bit1 x = x + x + 1</code>. So <code>5 = bit1 (bit0 1)</code>.</p>",
        "id": 235334480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618921709
    },
    {
        "content": "<p>In a specific characteristics, like <code>2</code> or <code>3</code>, we can have special simplification rules, that will turn <code>bit0 x</code> into <code>0</code> (when <code>p = 2</code>), etc...</p>",
        "id": 235334578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618921758
    },
    {
        "content": "<p>Namely, these rules:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">char_two</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">char_two_bit0</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bit0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">two_smul</span> <span class=\"n\">ℕ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">char_p.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">char_two_bit1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bit1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">char_two_bit0</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">char_two</span>\n</code></pre></div>",
        "id": 235335128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618921974
    },
    {
        "content": "<p>Right, and Damiano gave the rules for <code>p = 3</code>.</p>",
        "id": 235335676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618922196
    },
    {
        "content": "<p>But I agree with Mario that these lemmas should probably not be <code>@[simp]</code> globally.</p>",
        "id": 235335714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618922215
    },
    {
        "content": "<p>We can probably enable them with <code>open_locale char2</code></p>",
        "id": 235335768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618922238
    },
    {
        "content": "<p>The rules for <code>p = 3</code> aren't enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">char_three</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">char_three_bit0</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bit0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">two_smul</span> <span class=\"n\">ℕ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq_neg_iff_add_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">succ_nsmul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">char_p.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">char_three_bit1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bit1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">char_three_bit0</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">34</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>  <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">char_three</span>\n</code></pre></div>",
        "id": 235335946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618922313
    },
    {
        "content": "<p>Seems like a job for a norm_num plugin</p>",
        "id": 235335998,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618922346
    },
    {
        "content": "<p>A la norm_fin</p>",
        "id": 235336014,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618922352
    },
    {
        "content": "<p>For <code>p=3</code> you just need more lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">char_three_bit1_zero</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">]</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">char_three_bit1_one</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">]</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">char_three_bit1_two</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">bit1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 235338194,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618923218
    },
    {
        "content": "<p>Just a funny remark.</p>\n<p>If you add Gabriel's lemmas <em>after</em> Eric's <code>char_three_bit1</code>, they close the example.<br>\nIf you add Gabriel's lemmas <em>just before</em> Eric's <code>char_three_bit1</code>, they <em>do not</em> close the example.</p>",
        "id": 235342595,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618925040
    },
    {
        "content": "<p>Thank you for your replies. I'll try these suggestions.</p>\n<blockquote>\n<p>Seems like a job for a norm_num plugin</p>\n</blockquote>\n<p>I think this describes my idea best.</p>",
        "id": 235395641,
        "sender_full_name": "Jz Pan",
        "timestamp": 1618944769
    },
    {
        "content": "<p>My point is that reducing the numerals in a polynomial is not a particularly useful thing to do, unless you combine it with other things. In fact, factoring a polynomial sometimes requires writing the coefficients in an unnormalized way</p>",
        "id": 235405082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618948540
    },
    {
        "content": "<p>If you just want the polynomial to look good in the tactic state, then okay, but if you actually want to close the goal (which is what <code>ring</code> is trying to do) then you need to do more</p>",
        "id": 235405212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618948582
    },
    {
        "content": "<p>But if you are multiplying by <code>42</code> in a char 2 ring, then there are plenty situations where it helps if there is a cheap tactic that just cancels that term.</p>",
        "id": 235405252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618948606
    },
    {
        "content": "<p>maybe, but it still sounds strictly less powerful than this grobner basis approach</p>",
        "id": 235405331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618948650
    },
    {
        "content": "<p>which we currently have semi-automatic support for</p>",
        "id": 235405402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618948684
    },
    {
        "content": "<p>In particular, I want to point out that in <span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> 's first version they had to use this number cancelling tactic several times and still had to do some funky algebra afterward, while the factoring approach only requires one application: supply the magical witness coefficient <code>-(E.a6 * (1 + 6 * E.a2 + 24 * E.a2^2 + 32 * E.a2^3 + 216 * E.a6))</code> and then the problem is solved</p>",
        "id": 235405743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618948815
    },
    {
        "content": "<p>(By the way, I found that coefficient by asking mathematica)</p>",
        "id": 235405895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618948881
    },
    {
        "content": "<p>[Where is my emoji for cheating <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> ] /s</p>",
        "id": 235406470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618949125
    },
    {
        "content": "<p>The role of a true grobner tactic in lean would be to determine that coefficient and then replace itself with <code>ring_rw</code> using the coefficient</p>",
        "id": 235406670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618949220
    },
    {
        "content": "<p>(<code>ring_rw</code> doesn't exist yet either)</p>",
        "id": 235406758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618949275
    },
    {
        "content": "<p>OK I have the first working example of char 2 tactics, adapting the codes by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> .</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char_two_bit0</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bit0</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_char.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">char_p.cast_eq_zero</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char_two_bit1</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bit1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">char_two_bit0</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">char_two_bit0</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">char_two_bit1</span> <span class=\"n\">hchar</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">infer_type</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">loc.ns</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive.types</span> <span class=\"o\">(</span><span class=\"n\">texpr</span> <span class=\"n\">location</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.simp_char2</span> <span class=\"o\">(</span><span class=\"n\">hchar_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">hchar</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.i_to_expr</span> <span class=\"n\">hchar_</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">char_two_bit0</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">char_two_bit1</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ring_nf</span> <span class=\"o\">}</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp_char2</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235596552,
        "sender_full_name": "Jz Pan",
        "timestamp": 1619046943
    },
    {
        "content": "<p>may be good to make a simp-set for this! cf <a href=\"https://leanprover-community.github.io/extras/simp.html#more-advanced-features\">here</a></p>",
        "id": 235596756,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619047070
    },
    {
        "content": "<p>But there are some problems need to be fixed:</p>\n<ol>\n<li>the char assumption in the tactics is hard-coded as <code>hchar</code>. I tried <code>char_two_bit0 %%hchar, char_two_bit1 %%hchar</code> according to <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">this tutorial</a>, but Lean refused to accept my code, complains \"kernel failed to type check declaration 'tactic.interactive.simp_char2' this is usually due to a buggy tactic or a bug in the builtin elaborator\".</li>\n<li>I want it shows a proper error message when <code>(ring_char _ = 2) ← infer_type hchar</code> fails.</li>\n</ol>\n<p>How to fix them?</p>",
        "id": 235597125,
        "sender_full_name": "Jz Pan",
        "timestamp": 1619047291
    },
    {
        "content": "<p>Unfortunately you can't use antiquotations inside <code>`[...]</code>. You'll need to build the simp set by hand. There are many examples; the last time I did this was <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#elementwise\">tactic#elementwise</a>, so if it was me I'd start reconstructing how to do it from there. :-)</p>",
        "id": 235602618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619051313
    },
    {
        "content": "<p>For 2. just put <code>| fail \":-(\"</code> at the end of the line (before the comma)</p>",
        "id": 235602655,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619051340
    },
    {
        "content": "<p>(or maybe <code>failed</code>? I can never remember which one is which)</p>",
        "id": 235602672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619051351
    },
    {
        "content": "<p>Don't forget <code>failure</code></p>",
        "id": 235623807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619071035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/ring.20tactics.20for.20characteristic.20p.3F/near/235602618\">said</a>:</p>\n<blockquote>\n<p>Unfortunately you can't use antiquotations inside <code>`[...]</code>. You'll need to build the simp set by hand. There are many examples; the last time I did this was <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#elementwise\">tactic#elementwise</a>, so if it was me I'd start reconstructing how to do it from there. :-)</p>\n</blockquote>\n<p>Thanks for your comments. Now I try to build simp set manually, but I have a new problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n  <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">char_two_bit0</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">bit0</span><span class=\"o\">,</span>\n    <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ring_char.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">char_p.cast_eq_zero</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">char_two_bit1</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">bit1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">char_two_bit0</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">char_two_bit0</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">char_two_bit1</span> <span class=\"n\">hchar</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">infer_type</span><span class=\"o\">)</span>\n  <span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n  <span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n  <span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">loc.ns</span><span class=\"o\">)</span>\n  <span class=\"kn\">open</span> <span class=\"n\">interactive.types</span> <span class=\"o\">(</span><span class=\"n\">texpr</span> <span class=\"n\">location</span><span class=\"o\">)</span>\n\n  <span class=\"sd\">/--</span>\n<span class=\"sd\">  Experimental ring tactic for characteristic 2.</span>\n<span class=\"sd\">  FIXME: You must provide a `hchar2 : ring_char R = 2` hypothesis.</span>\n<span class=\"sd\">  -/</span>\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.ring_char2</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">hchar</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">hchar2</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">hchar</span> <span class=\"bp\">|</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"hchar2 : ring_char R = 2 is expected\"</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">simp_lemmas.mk</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">char_two_bit0</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">char_two_bit1</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">pow_one</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">ns</span> <span class=\"bp\">←</span> <span class=\"n\">loc.get_locals</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.simp_target</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.skip</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    -- tactic.repeat (do</span>\n<span class=\"cm\">      ret1 ← tactic.replace_at (</span>\n<span class=\"cm\">        λ e, do (a1, a2, a3) ← tactic.simplify s [] e, return (a1, a2)</span>\n<span class=\"cm\">      ) ns loc.include_goal,</span>\n<span class=\"cm\">      ret2 ← tactic.replace_at (</span>\n<span class=\"cm\">        tactic.ring.normalize tactic.transparency.reducible</span>\n<span class=\"cm\">      ) ns loc.include_goal,</span>\n<span class=\"cm\">      tactic.skip</span>\n<span class=\"cm\">    --  if ret1 || ret2 then tactic.skip else tactic.failed</span>\n<span class=\"cm\">    -- )</span>\n<span class=\"cm\">    -/</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hchar2</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ring_char2</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- error here</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>It doesn't work and complains that \"deep recursion was detected at 'level constraints' (potential solution: increase stack space in your system)\". What's the problem?</p>",
        "id": 235763732,
        "sender_full_name": "Jz Pan",
        "timestamp": 1619133800
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 235764290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619134220
    },
    {
        "content": "<p>Sorry, I have added all necessary codes now.</p>",
        "id": 235765367,
        "sender_full_name": "Jz Pan",
        "timestamp": 1619134968
    },
    {
        "content": "<p>I think I have found the problem, but note sure how to fix it: in fact if I replace the first example by <code>simp [hchar, char_two_bit0, char_two_bit1]</code> it will also fall into a deadloop.</p>",
        "id": 235765543,
        "sender_full_name": "Jz Pan",
        "timestamp": 1619135097
    },
    {
        "content": "<p>OK I fixed it by myself; replace these 3 lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">char_two_bit0</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">char_two_bit1</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">char_two_bit0</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">char_two_bit0</span> <span class=\"bp\">%%</span><span class=\"n\">hchar</span><span class=\"o\">),</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add</span> <span class=\"n\">char_two_bit0</span><span class=\"o\">,</span>\n    <span class=\"n\">char_two_bit1</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">char_two_bit1</span> <span class=\"bp\">%%</span><span class=\"n\">hchar</span><span class=\"o\">),</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add</span> <span class=\"n\">char_two_bit1</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>then it works.</p>",
        "id": 235765927,
        "sender_full_name": "Jz Pan",
        "timestamp": 1619135398
    },
    {
        "content": "<p>OK, now I'd like to share the <code>ring_charp</code> tactics I write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_char_is_zero_N</span>\n<span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_char.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">char_p.cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cong_char_is_eq_N'</span>\n<span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hleq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hpzero</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hpzero</span> <span class=\"n\">at</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hpzero</span> <span class=\"o\">:=</span> <span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">hpzero</span><span class=\"o\">,</span>\n  <span class=\"n\">zify</span> <span class=\"n\">at</span> <span class=\"n\">hpzero</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hdvd</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_char.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">zify</span> <span class=\"n\">at</span> <span class=\"n\">hleq</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hleq</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hdvd</span> <span class=\"n\">at</span> <span class=\"n\">hleq</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hpzero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hleq</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">c</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">hleq</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">@</span><span class=\"n\">char_p.cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">p</span><span class=\"o\">)],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cong_char_is_eq_N</span>\n<span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cong_char_is_eq_N'</span> <span class=\"n\">hp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hdvd</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">cong_char_is_eq_N'</span> <span class=\"n\">hp</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">hdvd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">char_specific</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">char_two_bit0</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">bit0</span><span class=\"o\">,</span>\n    <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ring_char.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">char_p.cast_eq_zero</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">char_two_bit1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">bit1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">char_two_bit0</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">char_two_bit0</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">char_two_bit1</span> <span class=\"n\">hchar</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">infer_type</span><span class=\"o\">)</span>\n  <span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n  <span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n  <span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">loc.ns</span><span class=\"o\">)</span>\n  <span class=\"kn\">open</span> <span class=\"n\">interactive.types</span> <span class=\"o\">(</span><span class=\"n\">texpr</span> <span class=\"n\">location</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">repeat_at_most</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.skip</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">repeat_at_most</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.skip</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ring_char_tactic_internal</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">simp_lemmas</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">pow_one</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.add_simp</span> <span class=\"bp\">``</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">ns</span> <span class=\"bp\">←</span> <span class=\"n\">loc.get_locals</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- FIXME: add a maximal repeat time since sometimes simp will change the goal randomly</span>\n    <span class=\"n\">repeat_at_most</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"n\">ret1</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.replace_at</span> <span class=\"o\">(</span>\n        <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.simplify</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">)</span>\n      <span class=\"o\">)</span> <span class=\"n\">ns</span> <span class=\"n\">loc.include_goal</span><span class=\"o\">,</span>\n      <span class=\"n\">ret2</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.replace_at</span> <span class=\"o\">(</span>\n        <span class=\"n\">tactic.ring.normalize</span> <span class=\"n\">tactic.transparency.reducible</span>\n      <span class=\"o\">)</span> <span class=\"n\">ns</span> <span class=\"n\">loc.include_goal</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">ret1</span> <span class=\"bp\">||</span> <span class=\"n\">ret2</span> <span class=\"k\">then</span> <span class=\"n\">tactic.skip</span> <span class=\"k\">else</span> <span class=\"n\">tactic.failed</span>\n    <span class=\"o\">),</span>\n    <span class=\"n\">when</span> <span class=\"n\">loc.include_goal</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.try</span> <span class=\"o\">(</span><span class=\"n\">tactic.triv</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.contradiction</span><span class=\"o\">)</span>\n\n  <span class=\"sd\">/--</span>\n<span class=\"sd\">  Experimental ring tactic for characteristic 2.</span>\n<span class=\"sd\">  FIXME: You must provide a `hchar2 : ring_char R = 2` hypothesis.</span>\n<span class=\"sd\">  -/</span>\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.ring_char2</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">hchar</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">hchar2</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">hchar</span> <span class=\"bp\">|</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"hchar2 : ring_char R = 2 is expected\"</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_simp_set</span> <span class=\"n\">ff</span> <span class=\"o\">[]</span> <span class=\"o\">[],</span> <span class=\"c1\">-- FIXME: this includes all default simp lemmas into it</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">char_two_bit0</span> <span class=\"bp\">%%</span><span class=\"n\">hchar</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">s.add</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">char_two_bit1</span> <span class=\"bp\">%%</span><span class=\"n\">hchar</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">s.add</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_char_tactic_internal</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"n\">loc</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar2</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ring_char2</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar2</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">39</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ring_char2</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">char_three_3_eq_0</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">dvd_char_is_zero_N</span> <span class=\"n\">hchar</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">char_three_4_eq_1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">cong_char_is_eq_N</span> <span class=\"n\">hchar</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">char_three_5_eq_2</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">cong_char_is_eq_N</span> <span class=\"n\">hchar</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">34</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">char_three_3_eq_0</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">char_three_4_eq_1</span> <span class=\"n\">hchar</span><span class=\"o\">,</span> <span class=\"n\">char_three_5_eq_2</span> <span class=\"n\">hchar</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"sd\">/--</span>\n<span class=\"sd\">  Experimental ring tactic for characteristic 3.</span>\n<span class=\"sd\">  FIXME: You must provide a `hchar3 : ring_char R = 3` hypothesis.</span>\n<span class=\"sd\">  -/</span>\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.ring_char3</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">hchar</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">hchar3</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">hchar</span> <span class=\"bp\">|</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"hchar3 : ring_char R = 3 is expected\"</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_simp_set</span> <span class=\"n\">ff</span> <span class=\"o\">[]</span> <span class=\"o\">[],</span> <span class=\"c1\">-- FIXME: this includes all default simp lemmas into it</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">char_three_3_eq_0</span> <span class=\"bp\">%%</span><span class=\"n\">hchar</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">s.add</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">char_three_4_eq_1</span> <span class=\"bp\">%%</span><span class=\"n\">hchar</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">s.add</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">char_three_5_eq_2</span> <span class=\"bp\">%%</span><span class=\"n\">hchar</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">s.add</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_char_tactic_internal</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"n\">loc</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar3</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">34</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ring_char3</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">char_p_a_plus_p_eq_a</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"o\">(</span><span class=\"n\">cong_char_is_eq_N</span> <span class=\"n\">hchar</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">repeat_n_times</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">func</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">func</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">func</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">repeat_n_times</span> <span class=\"n\">n</span> <span class=\"n\">func</span><span class=\"o\">)</span>\n\n  <span class=\"sd\">/--</span>\n<span class=\"sd\">  Experimental ring tactic for characteristic p for p an integer literal.</span>\n<span class=\"sd\">  FIXME: You must provide a `hchar : ring_char R = p` hypothesis.</span>\n<span class=\"sd\">  -/</span>\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.ring_charp</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">hchar</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">hchar</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">pp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">hchar</span> <span class=\"bp\">|</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"hchar : ring_char R = p is expected\"</span><span class=\"o\">,</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">pp.to_nat</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"p must be an integer literal\"</span><span class=\"o\">,</span>\n    <span class=\"n\">step</span> <span class=\"bp\">←</span> <span class=\"n\">norm_num.get_step</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_simp_set</span> <span class=\"n\">ff</span> <span class=\"o\">[]</span> <span class=\"o\">[],</span> <span class=\"c1\">-- FIXME: this includes all default simp lemmas into it</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">repeat_n_times</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">simp_lemmas</span><span class=\"o\">),</span> <span class=\"k\">do</span>\n      <span class=\"n\">char_p_a_plus_p_eq_a</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">char_p_a_plus_p_eq_a</span> <span class=\"bp\">%%</span><span class=\"n\">hchar</span> <span class=\"bp\">%%</span><span class=\"n\">n</span><span class=\"o\">),</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">char_p_a_plus_p_eq_a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">norm_num.derive'</span> <span class=\"n\">step</span><span class=\"o\">,</span>\n      <span class=\"n\">ss</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_eq_mp</span> <span class=\"n\">a2</span> <span class=\"n\">char_p_a_plus_p_eq_a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">ss.add</span><span class=\"o\">,</span>\n      <span class=\"n\">return</span> <span class=\"n\">ss</span>\n    <span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_char_tactic_internal</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"n\">loc</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">123567</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">51832</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ring_charp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">char_specific</span>\n</code></pre></div>\n<p>and they magically works, for example, <a href=\"https://gitee.com/acmepjz/my-lean-test/blob/master/gtm106/weierstrass_equation/models_by_characteristic.lean\">here</a><br>\nAn obvious problem is that <code>ring_charp</code> runs slow if the characteristic is large lol</p>",
        "id": 236386205,
        "sender_full_name": "Jz Pan",
        "timestamp": 1619548092
    }
]