[
    {
        "content": "<p>Is there an analogue of <code>or.elim</code> which eliminates into a type as opposed to a Prop?<br>\nNamely, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">or.elim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>but I would like something similar to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">or.elim'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 218230051,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606683359
    },
    {
        "content": "<p>Maybe this doesn't even make sense in lean?</p>",
        "id": 218230391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606683745
    },
    {
        "content": "<p>This requires the axiom of choice, but otherwise should exist I think?</p>",
        "id": 218230402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606683777
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/or.by_cases\">docs#or.by_cases</a></p>",
        "id": 218230474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606683857
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 218230514,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606683948
    }
]