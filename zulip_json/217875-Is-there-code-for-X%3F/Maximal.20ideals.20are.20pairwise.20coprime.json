[
    {
        "content": "<p>Does mathlib know that maximal ideals (<code>ideal.is_maximal</code>) are pairwise coprime? Context: I want to apply the Chinese Remainder Theorem (<code>ideal.quotient_inf_ring_equiv_pi_quotient</code>) to some maximal ideals. It would follow from this generalized lemma about coatoms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_coatom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">is_coatom</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">eq_top_or_eq_of_coatom_le</span> <span class=\"n\">ha</span> <span class=\"n\">le_sup_left</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">eq_top_or_eq_of_coatom_le</span> <span class=\"n\">hb</span> <span class=\"n\">le_sup_right</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">false.rec</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">sup_eq_right.mp</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sup_eq_left.mp</span> <span class=\"n\">h1</span><span class=\"o\">))),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221466268,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1609701565
    },
    {
        "content": "<p>I don't know the answer yet to whether we have the right version for the CRT, but I do know that the coatom lemma should totally be PR'd. I just added atoms and coatoms, so the API's not all there</p>",
        "id": 221466502,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609701954
    },
    {
        "content": "<p>I could write that PR if you'd like, but if you do it, I think it only needs <code>[semilattice_sup_top]</code>, and there should also be a version for <code>is_atom</code>.</p>",
        "id": 221466611,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609702104
    },
    {
        "content": "<p>Sure, I can do it</p>",
        "id": 221466766,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1609702328
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5596\">#5596</a></p>",
        "id": 221468208,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1609704200
    }
]