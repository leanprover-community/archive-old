[
    {
        "content": "<p>Do we have something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_sq_of_between_squares</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_square</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 280888501,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651505020
    },
    {
        "content": "<p>We do, but it's stated for monotone functions</p>",
        "id": 280889934,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651505705
    },
    {
        "content": "<p>... with the caveat that in the specific case of <code>^2</code> and <code>\\Z</code>, you don't actually need the function to be monotone</p>",
        "id": 280890239,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651505847
    },
    {
        "content": "<p>The correct generality is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_order\">docs#succ_order</a>, but we don't yet have it there</p>",
        "id": 280890246,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651505851
    },
    {
        "content": "<p>... with the caveat that in the specific case of <code>^2</code> and <code>\\Z</code>, you don't actually need the function to be monotone</p>",
        "id": 280890247,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651505851
    },
    {
        "content": "<p>specifically, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.ne_of_lt_of_lt_nat\">docs#monotone.ne_of_lt_of_lt_nat</a> is roughly what you want</p>",
        "id": 280890471,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651505945
    },
    {
        "content": "<p>oh wait, it's on <code>int</code></p>",
        "id": 280890712,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651506037
    },
    {
        "content": "<p>It looks like I still have to distinguish cases according to the sign of <code>b</code> and then I'll have to provide proof that squaring is monotone (which it isn't on <code>int</code> ...).</p>",
        "id": 280890784,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651506073
    },
    {
        "content": "<p>Not sure this will give something much shorter than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.parity</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_sq_of_between_squares</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">¬</span> <span class=\"n\">is_square</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_two</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁'</span> <span class=\"o\">:=</span> <span class=\"n\">abs_lt_abs_of_sq_lt_sq</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂'</span> <span class=\"o\">:=</span> <span class=\"n\">abs_lt_abs_of_sq_lt_sq</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">abs_eq_self.mpr</span> <span class=\"n\">hb</span> <span class=\"n\">at</span> <span class=\"n\">h₁'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_eq_self.mpr</span> <span class=\"o\">(</span><span class=\"n\">int.le_add_one</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h₂'</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">abs_eq_neg_self.mpr</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_le</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h₁'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb''</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_not_le</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_eq_neg_self.mpr</span> <span class=\"n\">hb''</span> <span class=\"n\">at</span> <span class=\"n\">h₂'</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280891031,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651506181
    },
    {
        "content": "<p>You can generalize to even functions monotone on <code>Ici 0</code></p>",
        "id": 280891859,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651506507
    },
    {
        "content": "<p>Yes, but I want it for squares and on all of ℤ. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 280892045,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651506598
    },
    {
        "content": "<p>The question is rather whether what is in mathlib leads to a simpler proof than doing it directly.</p>",
        "id": 280892137,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651506625
    },
    {
        "content": "<p>My point is that if you generalize, you will notice that we're missing <code>monotone_on.ne_of_lt_of_lt_int</code> which is a valuable addition.</p>",
        "id": 280892776,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651506907
    }
]