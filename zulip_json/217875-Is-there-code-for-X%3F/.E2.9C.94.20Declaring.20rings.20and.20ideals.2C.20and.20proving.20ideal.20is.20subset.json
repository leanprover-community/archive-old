[
    {
        "content": "<p>I have two questions. Firstly am I defining R, I and J correctly? I want R to be a ring and I,J to be ideals of R. <br>\nSecondly how to I show that an ideal is a subset of R. I can see why it won't work as R is a type and doesn't implement <code>has_mem</code> or any other set operations. I remember seeing a example in this situation with <code>set_of</code> and <code>trivial</code>, is that the way to go...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">I</span> <span class=\"bp\">⊆</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 312889475,
        "sender_full_name": "Ben",
        "timestamp": 1669741499
    },
    {
        "content": "<p>There is a specific type for ideals of a ring, its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal\">docs#ideal</a>, so you should use <code>variables (I  J : ideal R)</code></p>",
        "id": 312889826,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669741590
    },
    {
        "content": "<p>This is essentially a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set\">docs#set</a> of R, that is closed under the addition and scalar multiplication operations (you should think of <code>set R</code> as a subset of the elements of R)</p>",
        "id": 312890180,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669741684
    },
    {
        "content": "<p>Ah yes <code>ideal</code> is not a class, it's a function between types. Still don't fully understand what and how <code>[...]</code> works yet...</p>",
        "id": 312891972,
        "sender_full_name": "Ben",
        "timestamp": 1669742187
    },
    {
        "content": "<p>As for <code>set R</code> I understand it just a set of elements of type R so could be <code>{}</code>, <code>{1}</code> etc... Is there a <code>full_set R</code> type which is set that contains all the possible inhabitants of R?</p>",
        "id": 312892419,
        "sender_full_name": "Ben",
        "timestamp": 1669742318
    },
    {
        "content": "<p>One good rule of thumb is that anything in <code>[]</code> should be essentially unique. So we only ever consider one ring structure on a type at a time, or topology or whatever, but we may have many different ideals or types floating around.</p>",
        "id": 312892708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669742400
    },
    {
        "content": "<p>There is an element <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.univ\">docs#set.univ</a> of the type <code>set R</code> that is the set containing all elements of the type yes, but this is an element, not a type itself</p>",
        "id": 312892973,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669742465
    },
    {
        "content": "<p>Nice, didn't know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.univ\">docs#set.univ</a>, that's good to know. In retrospect what I was trying to prove was trivial. But it was helpful in the larger thing I was trying to prove. Final code works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.mem_univ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 312897360,
        "sender_full_name": "Ben",
        "timestamp": 1669743672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 312897370,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669743676
    },
    {
        "content": "<p>Note that you can prove it in just one step with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subset_univ\">docs#set.subset_univ</a></p>",
        "id": 312899541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669744265
    }
]