[
    {
        "content": "<p>Do we have the equivalence <code>finset α ≃ set α</code> for <code>fintype α</code>?</p>",
        "id": 286732152,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655675960
    },
    {
        "content": "<p>Similarly for <code>α →₀ β</code> and <code>α → β</code></p>",
        "id": 286732324,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655676175
    },
    {
        "content": "<p>The one for finsupp is definitely there... I don't know about the <code>finset</code> one, but certainly all the simp lemmas are around, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.finite.of_fintype</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.finite_to_set_to_finset</span><span class=\"o\">],</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.finite.coe_to_finset</span><span class=\"o\">]}</span>\n</code></pre></div>",
        "id": 286732504,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655676477
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.equiv_fun_on_fintype\">docs#finsupp.equiv_fun_on_fintype</a></p>",
        "id": 286732553,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655676502
    },
    {
        "content": "<p>The \"right\" way to go from a <code>set</code> to a <code>finset</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset\">docs#set.to_finset</a> though it needs a number of decidability assumptions to work (not that this equivalence could ever be computable -- you'd need some bundled <code>set</code> that included a <code>decidable_pred</code> instance for the membership test).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A.to_finset</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.coe_to_finset</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 286733811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655678426
    },
    {
        "content": "<p>Thhis works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A.to_finset</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 286734019,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655678775
    },
    {
        "content": "<p>The <code>ext, dsimp, simp</code> dance probably means we're missing a lemma there..</p>",
        "id": 286734028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655678796
    },
    {
        "content": "<p><code>[∀ (S : set α) t, decidable (t ∈ S)]</code> is an extremely strong assumption, though. If <code>α</code> has cardinality at least two I'm pretty sure it's equivalent to <code>[∀ p, decidable p]</code>.</p>",
        "id": 286734274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655679251
    },
    {
        "content": "<p>Fair enough... I'll go back to my classical cave where I can actually choose stuff.</p>",
        "id": 286734291,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655679309
    },
    {
        "content": "<p>Yes, you can embed any proposition into <code>set α</code> for a nontrivial <code>α</code>.</p>",
        "id": 286734292,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655679315
    },
    {
        "content": "<p>Not necessarily nontrivial/card at least two:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">decidable.is_false</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">decidable.is_true</span> <span class=\"n\">hp</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286742116,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655690773
    },
    {
        "content": "<p>Any idea where this could go?</p>",
        "id": 286751288,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655702333
    },
    {
        "content": "<p>The equivalence? Just below <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset\">docs#set.to_finset</a> ?</p>",
        "id": 286752837,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655704258
    },
    {
        "content": "<p>By the way, I'm thinking about renaming <code>finsupp.equiv_fun_on_fintype</code> to <code>fintype.finsupp_equiv_fun</code></p>",
        "id": 286759517,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655710470
    },
    {
        "content": "<p>Seems like a much more straightforward name</p>",
        "id": 286759525,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655710477
    },
    {
        "content": "<p>Do we have support for that? (pun intended)</p>",
        "id": 286759542,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655710486
    },
    {
        "content": "<p>I would even be happy with <code>finsupp_equiv_fun</code></p>",
        "id": 286761510,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655711799
    }
]