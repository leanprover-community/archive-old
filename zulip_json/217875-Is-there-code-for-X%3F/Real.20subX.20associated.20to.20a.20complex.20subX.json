[
    {
        "content": "<p>I am curious about whether mathlib has the infrastructure needed for one of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/continuous_function/stone_weierstrass.lean#L33-35\">TODOs</a> on Stone-Weierstrass, or whether it's still missing:</p>\n<blockquote>\n<p>Prove the complex version for self-adjoint subalgebras <code>A</code>, by separately approximating the real and imaginary parts using the real subalgebra of real-valued functions in <code>A</code> (which still separates points, by taking the norm-square of a separating function).</p>\n</blockquote>\n<p>Mathlib does know that a <code>ℂ</code>-vector space <code>E</code> is a <code>ℝ</code>-vector space: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.complex_to_real\">docs#module.complex_to_real</a>.  Moreover, any <code>ℂ</code>-submodule of <code>E</code> can also be considered as an <code>ℝ</code>-submodule of <code>E</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.restrict_scalars\">docs#submodule.restrict_scalars</a>.</p>\n<p>I don't see the corresponding results for algebras and subalgebras; are these indeed missing?</p>",
        "id": 242652651,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623701306
    },
    {
        "content": "<p>Possibly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.comap\">docs#subalgebra.comap</a>?</p>",
        "id": 242658656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623704572
    },
    {
        "content": "<p>But that's not really as good as the submodule def</p>",
        "id": 242658733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623704634
    },
    {
        "content": "<p>I'm still kind of reeling from this observation that I should be comapping and not restricting scalars.</p>",
        "id": 242658802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623704654
    },
    {
        "content": "<p>Ah, thanks!  What is this <code>comap</code> business, and why do we do it for algebras but not for modules?  (According to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.comap\">docs#subalgebra.comap</a></p>\n<blockquote>\n<p><code>comap R S A</code> is a type alias for A, and has an R-algebra structure defined on it when <code>algebra R S</code> and <code>algebra S A</code>. If S is an R-algebra and A is an S-algebra then <code>algebra.comap.algebra R S A</code> can be used to provide A with a structure of an R-algebra. Other than that, <code>algebra.comap</code> is now deprecated and replaced with <code>is_scalar_tower</code>.</p>\n</blockquote>",
        "id": 242658847,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623704687
    },
    {
        "content": "<p>Don't confuse <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.comap\">docs#subalgebra.comap</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgegra.comap'\">docs#subalgegra.comap'</a>!</p>",
        "id": 242658861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623704699
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.comap'\">docs#subalgebra.comap'</a></p>",
        "id": 242659253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623704931
    },
    {
        "content": "<p>So, for example, should I PR</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">algebra.complex_to_real</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">algebra.comap</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>by analogy with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.complex_to_real\">docs#module.complex_to_real</a>?</p>",
        "id": 242659541,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623705118
    },
    {
        "content": "<p>I think <code>comap</code> is just a duplicate of <code>restrict_scalars</code></p>",
        "id": 242659542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705119
    },
    {
        "content": "<p>And we should eliminate it</p>",
        "id": 242659591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705130
    },
    {
        "content": "<p>Right, and it's frustrating because ideally it would be nice to have <code>comap</code> defeq to <code>restrict_scalars</code> when both exist.</p>",
        "id": 242659638,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623705170
    },
    {
        "content": "<p>I'm pretty sure that instance you suggest forms a loop</p>",
        "id": 242659657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705186
    },
    {
        "content": "<p>Since C is an algebra over anything R is an algebra over</p>",
        "id": 242659677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705208
    },
    {
        "content": "<p>Why does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.complex_to_real\">docs#module.complex_to_real</a> not form a loop then?</p>",
        "id": 242659694,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623705229
    },
    {
        "content": "<p>And usually instances construct typeclasses for big types from small ones</p>",
        "id": 242659696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705231
    },
    {
        "content": "<p>Nevermind, I misread the argument order</p>",
        "id": 242659822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705297
    },
    {
        "content": "<p>Can I just rename <code>comap</code> to <code>restrict_scalars</code>?</p>",
        "id": 242659852,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623705318
    },
    {
        "content": "<p>I think that's a good idea</p>",
        "id": 242659871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705335
    },
    {
        "content": "<p>And I think <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> did too but didn't want to take on the work right now</p>",
        "id": 242659890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705353
    },
    {
        "content": "<p>Or rather, make <code>comap</code> into <code>restrict_scalars</code> (from the module setting) with a bit of decoration on top.</p>",
        "id": 242659897,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623705358
    },
    {
        "content": "<p>I think remove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.comap\">docs#algebra.comap</a> replacing all uses with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars\">docs#restrict_scalars</a>, and rename <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.comap\">docs#subalgebra.comap</a> to <code>restrict_scalars</code></p>",
        "id": 242660089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623705467
    },
    {
        "content": "<p>It seems <code>comap</code> comes from Kenny, <a href=\"https://github.com/leanprover-community/mathlib/issues/536\">#536</a>; <code>restrict_scalars</code> came from Sébastien, <a href=\"https://github.com/leanprover-community/mathlib/issues/1716\">#1716</a>, and perhaps no one noticed the duplication.</p>",
        "id": 242661239,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623706073
    },
    {
        "content": "<p>Thanks for bringing this up <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I think it would be awesome good citizenry to eliminate <code>algebra.comap</code>unify <code>subalgebra.comap</code> with <code>restrict_scalars</code> (and I guess ideally, also rename <code>subgalgebra.comap'</code> to <code>subalgebra.comap</code>).</p>",
        "id": 242706463,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1623748329
    },
    {
        "content": "<p>I have a small dangling PR that is distantly related <a href=\"https://github.com/leanprover-community/mathlib/issues/7807\">#7807</a> but I think you can ignore it since it's mostly just a doc string.</p>",
        "id": 242706535,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1623748391
    },
    {
        "content": "<p>Oh and also: it would be awesome to have Stone-Weierstrass for ℂ!</p>",
        "id": 242706798,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1623748549
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7949\">#7949</a></p>",
        "id": 242741807,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623767661
    }
]