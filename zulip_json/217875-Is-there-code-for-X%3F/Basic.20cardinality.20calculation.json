[
    {
        "content": "<p>How would I prove that <code>{n:ℕ | n=5}.to_finset.card = 1</code> ? From the mathlib docs it didn't seem obvious what the definition of .card is</p>",
        "id": 212935697,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1602365891
    },
    {
        "content": "<p><code>simp</code> does the job:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212935882,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366162
    },
    {
        "content": "<p>By the way, did you know you can do <code>{5}</code> rather than <code>{n : ℕ | n = 5}</code>?</p>",
        "id": 212935908,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602366194
    },
    {
        "content": "<p>By the way, you can use <code>squeeze_simp</code> to see what lemmas <code>simp</code> used to solve the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--squeeze_simp,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.card_singleton</span><span class=\"o\">,</span> <span class=\"n\">set.set_of_eq_eq_singleton</span><span class=\"o\">,</span> <span class=\"n\">set.to_finset_card</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212935914,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Basic.20cardinality.20calculation/near/212935908\">said</a>:</p>\n<blockquote>\n<p>By the way, did you know you can do <code>{5}</code> rather than <code>{n : ℕ | n = 5}</code>?</p>\n</blockquote>\n<p>Indeed, <code>simp</code> was using <code>set_of_eq_eq_singleton {a : α} : {n | n = a} = {a}</code> to turn <code>{n : ℕ | n = 5}</code> into <code>{5}</code>, as lemmas about singleton sets are defined using that notation.</p>",
        "id": 212936002,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366318
    },
    {
        "content": "<p>OK thanks... <code>simp</code> does that but how about <code>{n:ℕ | n=5 ∨ n=6}.to_finset.card = 2</code></p>",
        "id": 212936007,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1602366331
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_eq_succ\">docs#finset.card_eq_succ</a>? (Not a library I know well, though.)</p>",
        "id": 212936229,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602366641
    },
    {
        "content": "<p><code>{n : ℕ | n = 5 ∨ n = 6}.to_finset</code> won't work. If you see the definition of <code>set.to_finset</code> the issue becomes clear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">set.to_finset</span> <span class=\"c1\">-- set.to_finset : Π (s : set ?M_1) [_inst_1 : fintype ↥s], finset ?M_1</span>\n</code></pre></div>\n\n<p><code>set.to_finset</code> needs an instance of <code>fintype ↥s</code> which cannot be inferred in this case.</p>",
        "id": 212936232,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366655
    },
    {
        "content": "<p>In the first case the instance could be inferred because <code>{n : ℕ | n = 5} = {5}</code> and there is an instance for <code>fintype ↥{x}</code>.</p>",
        "id": 212936256,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366699
    },
    {
        "content": "<p>You could provide the instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>but using a different notation is better (because Lean can then infer things):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212936385,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366903
    },
    {
        "content": "<p><code>{5, 6} = {n : ℕ | n = 5 ∨ n = 6 ∨ false} =  {n : ℕ | n = 5 ∨ n = 6}</code></p>",
        "id": 212936399,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366933
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212936484,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602367043
    },
    {
        "content": "<p>Again, I'd recommend using <code>squeeze_simp</code> and see which lemmas where used. In VSCode you can press F12 to jump to the definition.</p>",
        "id": 212936531,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602367087
    },
    {
        "content": "<p>That reduced the goal to <code>{6}.to_finset.val.card + 1 = 2</code> it seems... so now if I prove <code>{6]}.to_finset.val.card = 1</code> we may be getting somewhere</p>",
        "id": 212936553,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1602367151
    },
    {
        "content": "<p>This is true by reflexivity. <code>{6}.to_finset.val.card</code> reduces to <code>1</code>.</p>",
        "id": 212936565,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602367190
    },
    {
        "content": "<p>I removed <code>change _ = 1 + 1</code>, as it wasn't necessary. Then the goal becomes <code>{6}.to_finset.val.card + 1 = 2</code> and again, <code>{6}.to_finset.val.card + 1</code> reduces to <code>2</code>. They are literally the same term!</p>",
        "id": 212936618,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602367233
    },
    {
        "content": "<p>Ah okay, this worked... <code>example : ({5, 6} : set ℕ).to_finset.card = 2 :=begin refl end</code> Thanks  <span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> and <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 212936800,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1602367544
    },
    {
        "content": "<p>Also -- <code>example : ({5, 6} : set ℕ).to_finset.card = 2 := rfl</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 212937000,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602367833
    },
    {
        "content": "<p>I'd been wondering about the difference between <code>refl</code> and <code>rfl</code>... Also, this is a bit shorter: <code>example : ({5, 6} : finset ℕ).card = 2 :=\nrfl\n</code></p>",
        "id": 212937981,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1602369482
    },
    {
        "content": "<p><code>refl</code> is a tactic and <code>rfl</code> is a lemma, if you are in the mood for this kind of abstract nonsense.</p>",
        "id": 212938023,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602369526
    },
    {
        "content": "<p>So <code>exact rfl</code> is the same as <code>refl</code></p>",
        "id": 212938036,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602369579
    },
    {
        "content": "<p>and <code>by refl</code> or <code>begin refl end</code> are the same as <code>rfl</code></p>",
        "id": 212938041,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602369599
    },
    {
        "content": "<p>(modulo some subtleties that other people will probably jump in to explain!)</p>",
        "id": 212938085,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602369627
    },
    {
        "content": "<p><code>refl</code> (the tactic) is <em>slightly</em> stronger than <code>rfl</code> (the term) because <code>rfl</code> will only prove goals of the form <code>A = A</code>, whereas <code>refl</code> will close any goal of the form <code>R A A</code> if <code>R</code> is a binary relation such that there's a proof of \"for all x, R x x\" which has been tagged with the <code>refl</code> tag (tactics can look through the library for lemmas and tags, term mode proofs can't). In practice most of the time <code>refl</code> is used to prove <code>A = A</code> (at least for me) but occasionally I use it to prove <code>x &lt;= x</code> or <code>P &lt;-&gt; P</code></p>",
        "id": 212938259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602370022
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[refl]</span> <span class=\"kd\">lemma</span> <span class=\"n\">R.refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"mi\">37</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212938384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602370243
    },
    {
        "content": "<p>or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">@[refl]</span> <span class=\"kd\">lemma</span> <span class=\"n\">R.refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"mi\">37</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212938456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602370364
    },
    {
        "content": "<p>Are the following instances already in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">emptyc.fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">insert.fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">emb</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">↪</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert_of_mem</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">insert.fintype._match_1</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩}</span> <span class=\"bp\">∪</span> <span class=\"n\">finset.map</span> <span class=\"n\">emb</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">insert.fintype._match_1</span><span class=\"o\">,</span> <span class=\"n\">hy_1</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212939359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602371903
    },
    {
        "content": "<p>This makes it so the following can find a <code>fintype</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212939501,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602372242
    },
    {
        "content": "<p>Yeah, they're both in <code>data.set.finite</code> as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.fintype_empty/src\">src#set.fintype_empty</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.fintype_insert/src\">src#set.fintype_insert</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n<p>(I found them by going to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype\">docs#fintype</a>, expanding the \"Instances\" and scrolling down to <code>set.*</code>.)</p>",
        "id": 212941374,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602375935
    },
    {
        "content": "<p>It seems that <code>rfl</code> (and <code>begin refl end</code>) can do some arithmetic too! For instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 212944500,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1602382591
    },
    {
        "content": "<p>I might be wrong, but <code>rfl</code> is a special term, as in it is specially interpreted by the parser / elaborator.</p>",
        "id": 212948236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602390468
    },
    {
        "content": "<p>as seen from the fact that if you write <code>rfl</code> for something that are not defeq, you get a special error message.</p>",
        "id": 212948274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602390495
    },
    {
        "content": "<p>For the most part it's just a term, but theorems of the form <code>theorem foo : A = B := rfl</code> (where the rhs can only be the literal token <code>rfl</code>) are used to mark definitional simp lemmas. It's a little restrictive but I think the idea is to substitute for some <code>computation foo : A ~&gt; B</code> that doesn't otherwise have syntax in lean</p>",
        "id": 212949958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602394249
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 213608863,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1602879283
    }
]