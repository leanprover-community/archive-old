[
    {
        "content": "<p>I had to prove this goal, and I proved it in the very manual way you see below because I failed to use more advanced tactics.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">-- this is a minimal import, but feel free to import anything else you like</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n.succ</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-↑</span><span class=\"n\">n.succ</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">inv_mul'</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_pos.mpr</span> <span class=\"n\">n.succ_pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I tried to throw various tactics at it, like <code>simp</code>, <code>ring</code>, <code>field_simp</code>, <code>norm_num</code>. They all failed to make meaningful progress. Do we have another tool I did not think about, that would have helped here?</p>",
        "id": 288558811,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1657040356
    },
    {
        "content": "<p>A somewhat principled way to go for such goals is to use <code>field_simp</code> and then <code>ring</code> (or <code>linarith</code>), unfortunately <code>field_simp</code> needs a bit of help</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">-- this is a minimal import, but feel free to import anything else you like</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n.succ</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-↑</span><span class=\"n\">n.succ</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">n.cast_add_one_ne_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288559821,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1657040817
    },
    {
        "content": "<p>Thanks! I knew about the general idea of field_simp then ring, but I did not inspect very much the result of that to see what went wrong. I will keep in mind that telling field_simp that some things are not zero can help.</p>",
        "id": 288591935,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1657055087
    }
]