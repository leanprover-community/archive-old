[
    {
        "content": "<p>If <code>L : subgroup G</code> then <code>quotient L</code> is defined to be the quotient (in the sense of core Lean) of G by the equivalence relation \"we're in the same left coset of L\". However I could not find the <code>equiv</code> between <code>quotient L</code> and the type of left cosets of <code>L</code> in <code>G</code>, and indeed I could not even find this type. Are these things not there or am I looking in the wrong places?</p>",
        "id": 246575196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626782857
    },
    {
        "content": "<p>By \"I cannot find this type\" do you mean that you can't work out how to state the isomorphism you're looking for?</p>",
        "id": 246575688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626783136
    },
    {
        "content": "<p>I think <code>{s // ∃ a, s = left_coset a L}</code> is the type you need?</p>",
        "id": 246575913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626783266
    },
    {
        "content": "<p>Definitely golfable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">the_equiv</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">quotient_group.quotient</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.mk</span> <span class=\"n\">s.prop.some</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">q</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">}))</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">set_like.mem_coe</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">quotient_group.eq_class_eq_left_coset</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">quotient_group.eq_class_eq_left_coset</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">eq.congr_right</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.eq.mpr</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.some_spec.symm</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.ind'</span> <span class=\"bp\">$</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.sound'</span><span class=\"o\">,</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">quotient_group.left_rel</span> <span class=\"n\">setoid.r</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">set_like.mem_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mem_left_coset_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h.some_spec</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mem_own_left_coset</span> <span class=\"n\">L.to_submonoid</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246577628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626784412
    },
    {
        "content": "<p><code>map_mul</code> left as an exercise to the reader</p>",
        "id": 246577648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626784428
    },
    {
        "content": "<p>I PR'd a variant of the first half of this as <a href=\"https://github.com/leanprover-community/mathlib/issues/8382\">#8382</a></p>",
        "id": 246697900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626860510
    }
]