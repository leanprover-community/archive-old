[
    {
        "content": "<p>Hi! Is there a search engine (web or cli based) for symbols and types, such as hoogle for haskell? I find it hard and time consuming searching in the API by hand, especially if you are new to lean. For example, searching for \"\\N -&gt; \\Z\" should find \"neg_of_nat\", and searching \"neg\" should also find \"neg_of_nat\".</p>",
        "id": 258765858,
        "sender_full_name": "Mario Morgenthum",
        "timestamp": 1634932784
    },
    {
        "content": "<p>There's <code>#find</code> which should work for that first case</p>",
        "id": 258766185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634932903
    },
    {
        "content": "<p>And the online docs have a search bar, it takes a little while to start autosuggesting.</p>",
        "id": 258766299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634932941
    },
    {
        "content": "<p>From within a random file I had open:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"c\">/-</span><span class=\"cm\"> gives:</span>\n<span class=\"cm\">linarith.linexp.zfind: ℕ → linarith.linexp → ℤ</span>\n<span class=\"cm\">nat.gcd_b: ℕ → ℕ → ℤ</span>\n<span class=\"cm\">nat.gcd_a: ℕ → ℕ → ℤ</span>\n<span class=\"cm\">linarith.comp.coeff_of: linarith.comp → ℕ → ℤ</span>\n<span class=\"cm\">int.sub_nat_nat: ℕ → ℕ → ℤ</span>\n<span class=\"cm\">zmod.val_min_abs: Π {n : ℕ}, zmod n → ℤ</span>\n<span class=\"cm\">int.nat_bitwise: (bool → bool → bool) → ℕ → ℕ → ℤ</span>\n<span class=\"cm\">int.neg_of_nat: ℕ → ℤ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 258766473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634933027
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">suggest</span>\n<span class=\"c\">/-</span><span class=\"cm\"> gives:</span>\n<span class=\"cm\">Try this: exact int.of_nat</span>\n<span class=\"cm\">Try this: exact int.neg_of_nat</span>\n<span class=\"cm\">Try this: exact int.neg_succ_of_nat</span>\n<span class=\"cm\">Try this: refine nat.gcd_a _</span>\n<span class=\"cm\">Try this: refine nat.gcd_b _</span>\n<span class=\"cm\">Try this: refine int.sub_nat_nat _</span>\n<span class=\"cm\">Try this: refine linarith.comp.coeff_of _</span>\n<span class=\"cm\">Try this: refine int.nat_bitwise _ _</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 258766645,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634933096
    },
    {
        "content": "<p>Nice, first use case is covered :) but the search bar in the online docs is still searching for \"neg\"</p>",
        "id": 258767505,
        "sender_full_name": "Mario Morgenthum",
        "timestamp": 1634933444
    },
    {
        "content": "<p>But #find really helps, especially searching by pattern matching - really cool :)</p>",
        "id": 258768504,
        "sender_full_name": "Mario Morgenthum",
        "timestamp": 1634933913
    },
    {
        "content": "<p>Once the online docs loads, it will be fast</p>",
        "id": 258769734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634934469
    },
    {
        "content": "<p>But as soon as you click a result, it has to start the loading all over again</p>",
        "id": 258769818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634934500
    },
    {
        "content": "<p>So open two tabs, get the search loaded in one, then use the other to actually perform the search</p>",
        "id": 258769887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634934537
    },
    {
        "content": "<p><code>find</code> and <code>suggest</code> are already way better in Lean4.</p>",
        "id": 258796492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634953729
    }
]