[
    {
        "content": "<p>I'm having a bit troubles with factorisations/multiplicity. Could somebody help me proving the statement below, which just says that I can write the factorisation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">q \\in \\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mi>a</mi><msup><mi>r</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">q =a r^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> for any prime factor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.local_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">r</span><span class=\"o\">):</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Proof:</span>\n  <span class=\"c1\">-- Write the factorisation of `q = r^n * r_1^n_1 * ... * r_m ^ n_m`</span>\n  <span class=\"c1\">-- and set `a := r_1^n_1 * ... * r_m ^ n_m`.</span>\n  <span class=\"c1\">-- By definition it should be obvious that `¬(r ∣ a)`.</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks for the help.</p>\n<p>For context, I am working with local rings and want to say that for any prime ideal <code>I</code> we have <code>char(R⧸I) = r^n</code> where <code>r := char(R⧸M)</code>. So roughly this boils down to the following statement which is a direct corollary of the above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">local_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n<span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"o\">(</span><span class=\"n\">local_ring.residue_field</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"o\">(</span><span class=\"n\">local_ring.maximal_ideal</span> <span class=\"n\">R</span><span class=\"o\">):=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Proof:</span>\n  <span class=\"c1\">-- Set `r := ring_char (local_ring.residue_field R)` and</span>\n  <span class=\"c1\">-- use the above example to get `q = a*r^n`.</span>\n  <span class=\"c1\">-- Since `¬(r ∣ a)` we have that `(a:R⧸M) ≠ 0` so `(a:R) ∉ M`.</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281598104,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1652014898
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime.pow_dvd_iff_le_factorization\">docs#nat.prime.pow_dvd_iff_le_factorization</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_factorization_dvd\">docs#nat.pow_factorization_dvd</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_succ_factorization_not_dvd\">docs#nat.pow_succ_factorization_not_dvd</a> should get you there</p>",
        "id": 281598782,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652015887
    },
    {
        "content": "<p>I find the last two of those are the most hlepful</p>",
        "id": 281598982,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652016165
    },
    {
        "content": "<p>oh, also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factorization_div\">docs#nat.factorization_div</a></p>",
        "id": 281599007,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652016209
    },
    {
        "content": "<p>The following proof works, using a couple of auxiliary lemmas that I've PR'd at <a href=\"https://github.com/leanprover-community/mathlib/pull/14031\">#14031</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pow_factorization_le</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n.factorization</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_dvd</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_factorization_dvd</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">div_pow_factorization_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n.factorization</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">nat.div_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"n\">prime.pos</span> <span class=\"n\">pp</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_of_dvd</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_factorization_dvd</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.factorization_eq_zero_of_non_prime</span> <span class=\"n\">n</span> <span class=\"n\">pp</span><span class=\"o\">,</span> <span class=\"n\">hn.ne'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_dvd_div_pow_factorization</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n.factorization</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.prime.dvd_iff_one_le_factorization</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">div_pow_factorization_ne_zero</span> <span class=\"n\">p</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n    <span class=\"n\">nat.factorization_div</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_factorization_dvd</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp.factorization</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">):</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">q.factorization</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"bp\">/</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">not_dvd_div_pow_factorization</span> <span class=\"n\">hr</span> <span class=\"n\">h</span> <span class=\"n\">hq</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_factorization_dvd</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281606763,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652026809
    },
    {
        "content": "<p>Also, just to note that you can drop the assumption <code>(h : r ∣ q)</code> and instead insert the following line at the start of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 281608427,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652029224
    },
    {
        "content": "<p>Thank you <span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span>, especially <code>nat.pow_factorization_dvd</code> really helped to get going. And the full solution is amazing and <span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> , much apprechiated!</p>",
        "id": 281612080,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1652034638
    }
]