[
    {
        "content": "<p>Is there an easy way to define the grid graph of adjacency of <code>fin n × fin n</code>?</p>",
        "id": 254038434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632139561
    },
    {
        "content": "<p>I guess you could define <code>d</code> on <code>fin n</code> and then define <code>d</code> on the product to be the sum, and ask for d=1</p>",
        "id": 254043551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632142122
    },
    {
        "content": "<p>Yes, that's what I'm thinking too (except for what <code>d = 1</code> means <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>",
        "id": 254045217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632142829
    },
    {
        "content": "<p>Is this what you're looking for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">grid_graph</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">i.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">j.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">i.2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">j.2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">abs_sub_comm</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 254063671,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632149990
    },
    {
        "content": "<p>The graph, yes exactly! The way it is written, no, that's exactly what I'm trying to avoid.</p>",
        "id": 254084312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632157920
    },
    {
        "content": "<p>Do we have a <code>has_dist</code> instance for the taxicab norm like that?</p>",
        "id": 254705701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632491001
    },
    {
        "content": "<p>Oh yeah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a> with p=1</p>",
        "id": 254706029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632491128
    },
    {
        "content": "<p>Although I doubt that works for <code>fin </code>...</p>",
        "id": 254706184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632491186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> What are your secret criteria?</p>\n<p>Is it that you're actually asking for the box product (often known as the cartesian product) of simple graphs?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">box_product</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">G.adj</span> <span class=\"n\">p.1</span> <span class=\"n\">q.1</span> <span class=\"bp\">∧</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">q.2</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">q.1</span> <span class=\"bp\">∧</span> <span class=\"n\">H.adj</span> <span class=\"n\">p.2</span> <span class=\"n\">q.2</span><span class=\"o\">),</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">or_comm</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">simple_graph.adj_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>There isn't a path graph yet, but if it had vertex type <code>fin n</code> you'd be set.</p>",
        "id": 254755265,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632510057
    }
]