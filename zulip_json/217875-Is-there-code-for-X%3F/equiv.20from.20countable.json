[
    {
        "content": "<p>How can I get an equivalence from the integers to any infinite countable type? The only way I can find so far is through <code>cardinal</code>, which makes it look like we're missing API.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.countable.defs</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nonempty_equiv_of_countable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 314944032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670606982
    },
    {
        "content": "<p><del>not an answer, but there are typos above. Some <code>α</code>s should be <code>β</code>s.</del></p>",
        "id": 314944512,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670607086
    },
    {
        "content": "<p>You can get there with<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/denumerable.eqv\">docs#denumerable.eqv</a> <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/denumerable.of_encodable_of_infinite\">docs#denumerable.of_encodable_of_infinite</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable.of_countable\">docs#encodable.of_countable</a><br>\nbut using cardinal is probably easier.</p>",
        "id": 314947959,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670608132
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.countable.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mk_eq_aleph_0</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">ℵ₀</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk_le_aleph_0.antisymm</span> <span class=\"bp\">$</span> <span class=\"n\">aleph_0_le_mk</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nonempty_equiv_of_countable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.exact</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">cardinal.mk_eq_aleph_0</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">cardinal.mk_eq_aleph_0</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 314950281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670608817
    },
    {
        "content": "<p>Beware, this proof sneakily unifies universes.</p>",
        "id": 315045139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670663889
    },
    {
        "content": "<p>Even accounting for this, cardinals win.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nonempty_equiv_of_countable</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">nonempty_encodable</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">nonempty_encodable</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">denumerable.of_encodable_of_infinite</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">denumerable.of_encodable_of_infinite</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">denumerable.eqv</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">denumerable.eqv</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nonempty_equiv_of_countable'</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cardinal.eq.1</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"n\">cardinal.mk_eq_aleph_0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span>\n <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv.ulift.symm.trans</span> <span class=\"bp\">$</span> <span class=\"n\">e.trans</span> <span class=\"n\">equiv.ulift</span>\n</code></pre></div>",
        "id": 315046146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670664429
    }
]