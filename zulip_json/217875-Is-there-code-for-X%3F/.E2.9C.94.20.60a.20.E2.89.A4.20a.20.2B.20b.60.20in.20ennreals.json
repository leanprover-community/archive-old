[
    {
        "content": "<p>Sorry, I feel like I'm spamming, but I'm stuck on another obvious thing it seems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 316758957,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671460843
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/self_le_add_right\">docs#self_le_add_right</a></p>",
        "id": 316759167,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671460909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 316759336,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671460942
    },
    {
        "content": "<p>Ups, thanks! why is it it doesn't come up with <code>simp</code> and friends?</p>",
        "id": 316759391,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671460958
    },
    {
        "content": "<p>I think it's rare that <code>simp</code> can solve inequalities. <del>Maybe <code>linarith</code>?</del> (doesn't work with <code>import data.real.ennreal</code>)</p>",
        "id": 316759629,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671461037
    },
    {
        "content": "<p>Noted, thanks!</p>",
        "id": 316759792,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671461086
    },
    {
        "content": "<p>I think the real question is why didn't <code>library_search</code> work!</p>",
        "id": 316760575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671461308
    },
    {
        "content": "<p>It is weird because <code>example {T : Type} (a b : T) [canonically_ordered_add_monoid T] := by library_search</code> succeeds and <code>example : canonically_ordered_add_monoid ennreal := by library_search</code> also succeeds at finding the instance.</p>",
        "id": 316761423,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671461568
    },
    {
        "content": "<p>Along the same line, I sometime must do <code>apply add_le_add_right _ _,</code> instead of simply <code>apply add_le_add_right</code> and I don't really get why.</p>",
        "id": 316779106,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671466442
    },
    {
        "content": "<p>mmh, wait, I don't think it even applies: it opens up a new goal.</p>",
        "id": 316779294,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671466482
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">covariant_class</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">has_add.add</span><span class=\"o\">)</span> <span class=\"n\">has_le.le</span>\n</code></pre></div>",
        "id": 316779396,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671466511
    },
    {
        "content": "<p>Yeah, it's not the right lemma I think. <br>\nSo, where can I find a  <code>ennreal.add_le_add_right</code> ?</p>",
        "id": 316779702,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671466612
    },
    {
        "content": "<p>Do you mean a <code>self_le_add_right</code>?</p>",
        "id": 316779804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671466649
    },
    {
        "content": "<p>Oh, maybe not.</p>",
        "id": 316779886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671466677
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 316780033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671466714
    },
    {
        "content": "<p>No, this time I mean <del><code>a ≤ b -&gt; a + c ≤ a + c</code></del> <code>a ≤ b -&gt; a + c ≤ b + c</code></p>",
        "id": 316780042,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671466715
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>(corrected)</p>",
        "id": 316780192,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671466762
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/real/ennreal.lean#L92\">https://github.com/leanprover-community/mathlib/blob/master/src/data/real/ennreal.lean#L92</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: why are the two covariant instances necessary? why aren't they inferred?</span>\n<span class=\"kd\">instance</span> <span class=\"n\">covariant_class_mul_le</span> <span class=\"o\">:</span> <span class=\"n\">covariant_class</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">canonically_ordered_comm_semiring.to_covariant_mul_le</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">covariant_class_add_le</span> <span class=\"o\">:</span> <span class=\"n\">covariant_class</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ordered_add_comm_monoid.to_covariant_class_left</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span>\n</code></pre></div>",
        "id": 316780369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671466809
    },
    {
        "content": "<p>Surely you don't mean <code>a + c &lt;= a + c</code>?</p>",
        "id": 316780470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671466844
    },
    {
        "content": "<p>I agree with the confusion expressed by this comment... but the one you need is<br>\n<code>ordered_add_comm_monoid.to_covariant_class_right (M : Type u_1) [ordered_add_comm_monoid M] :\ncovariant_class M M (function.swap has_add.add) has_le.le</code><br>\nso I guess that's why it doesn't work?</p>",
        "id": 316780551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671466867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>What is the question?</p>",
        "id": 316780582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671466882
    },
    {
        "content": "<p>sorry, that was very stupid of me</p>",
        "id": 316780776,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671466948
    },
    {
        "content": "<p>mmh, but it still gets me trouble if I just <code>apply</code> it in a less minimal context<br>\n<strong>edit</strong> but if I feed it the <code>c</code> parameter it's happy.</p>",
        "id": 316781280,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671467104
    },
    {
        "content": "<p>Am I witnessing <code>ennreal</code> papercuts or just being a bit dense?</p>",
        "id": 316781499,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671467172
    },
    {
        "content": "<p>I think you're just witnessing the <code>apply</code> bug. <code>refine</code> is better in this situation.</p>",
        "id": 316782437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671467460
    },
    {
        "content": "<p>And a <code>library_search</code> bug</p>",
        "id": 316782955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671467604
    },
    {
        "content": "<p>OK, I've got another one I can't figure out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.neg_to_ereal_le_to_ereal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 317092160,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671605069
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.neg_to_ereal_le_to_ereal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ereal.neg_le</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">],</span> <span class=\"n\">positivity</span> <span class=\"c\">/-</span><span class=\"cm\"> or ereal.coe_ennreal_nonneg a -/</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">ereal.coe_ennreal_nonneg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 317096220,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671607223
    },
    {
        "content": "<p>Thanks! I hadn't spotted <code>theorem ereal.coe_ennreal_nonneg</code> and didn't know about <code>positivity</code>!</p>",
        "id": 317097437,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671607823
    }
]