[
    {
        "content": "<p>Do we have this anywhere? Is it true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.quot</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">setoid.r</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">quotient.mk'</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 270455042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643834973
    },
    {
        "content": "<p>It's roughly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.lift_on'_mk'\">docs#quotient.lift_on'_mk'</a>, but the other way around, somehow.</p>",
        "id": 270456292,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643835513
    },
    {
        "content": "<p>Can't find it</p>",
        "id": 270456990,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643835786
    },
    {
        "content": "<p>Got it</p>",
        "id": 270457010,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643835795
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">setoid.r</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">quotient.mk'</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.induction_on'</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 270457064,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643835815
    },
    {
        "content": "<p>Is it worth having or does it belong to the too-trivial-to-be-stated realm?</p>",
        "id": 270457126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643835841
    },
    {
        "content": "<p>It isn't more trivial than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.lift_on_mk\">docs#quotient.lift_on_mk</a></p>",
        "id": 270457242,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643835879
    },
    {
        "content": "<p>Okay, great <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 270457288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643835901
    },
    {
        "content": "<p>Should <code>lift_on</code> just be marked <code>simp</code> so that it unfolds to <code>lift</code> (same for the primed versions)?</p>",
        "id": 270463130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643838382
    }
]