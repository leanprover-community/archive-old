[
    {
        "content": "<p>`import ring_theory.coprime.lemmas<br>\nopen_locale big_operators</p>\n<p>variables {R : Type<em>} {I : Type</em>} [comm_semiring R] {p : I → R} [decidable_eq I] {s : finset I}</p>\n<p>lemma exists_sum_eq_one_iff_pairwise_coprime' :<br>\n  (∃ μ : I → R, ∑ i in s, μ i * ∏ j in s \\ {i}, p j = 1) ↔ pairwise (is_coprime on λ i : s, p i) :=<br>\nsorry`</p>\n<p>I'm working on the classification of finitely generated modules over a PID and at some point I needed this lemma. It looks like it hasn't been proven yet and I'm not planning to work on it soon - so does anyone want to try proving it ?</p>\n<p>(Note that <code>is_coprime a b</code> is defined as the existence of a relation <code>a * u + b * v = 1</code> so this should be true even with a <code>comm_semiring R</code>. A way to prove i could be to do the product of all the relations <code>is_coprime (p i) (p j)</code> as <code>_ = 1</code> and then develop the product - this gives a sum of 2^(s.card*(s.card-1)/2) terms that are all multiples of a  <code>∏ j in s \\ {i}, p j</code>)</p>",
        "id": 273500334,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1646060021
    },
    {
        "content": "<p>See explanations at <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 273500588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646060161
    },
    {
        "content": "<p>Bumping as this got buried</p>",
        "id": 275215247,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1647252689
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.coprime.lemmas</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">subsingleton</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[nontriviality, simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_coprime_subsingleton</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subsingleton</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_sum_eq_one_iff_pairwise_coprime'</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">is_coprime</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">exists_const</span><span class=\"o\">,</span> <span class=\"n\">is_coprime_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">true_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">finset.induction_on</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pairwise</span><span class=\"o\">],</span><span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">finset.induction_on</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pairwise</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>doesn't hold for subsets of size &lt; 2. do you just want to deal with that using <code>2 ≤ fintype.card s</code>?</p>",
        "id": 275222205,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647256697
    },
    {
        "content": "<p>aa there's no <code>card_induction</code> for <code>finset</code>s :(</p>",
        "id": 275222812,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647257163
    },
    {
        "content": "<p>Would <code>induction h : s.card</code> be that induction principle?</p>",
        "id": 275224957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647258770
    },
    {
        "content": "<p>hmm, I'm trying this and it's not working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_sum_eq_one_iff_pairwise_coprime'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">is_coprime</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">exists_const</span><span class=\"o\">,</span> <span class=\"n\">is_coprime_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">true_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat.le_induction</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275225349,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647259031
    },
    {
        "content": "<p>I feel like there's some trick, like adding a variable <code>n</code> and making it so that <code>n = s.card</code></p>",
        "id": 275225386,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647259065
    },
    {
        "content": "<p>ah, yeah, that's it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_sum_eq_one_iff_pairwise_coprime'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">is_coprime</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">exists_const</span><span class=\"o\">,</span> <span class=\"n\">is_coprime_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">true_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">s.card</span> <span class=\"k\">with</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_value</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">n.le_induction</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275225516,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647259140
    },
    {
        "content": "<p>can we get <code>induction</code> to do this automatically?</p>",
        "id": 275225535,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647259149
    },
    {
        "content": "<p>(also, this isn't as nice as that would be - I'd want something like prove something for all finsets of card 2, and then get given  <code>s</code> such that it holds and then I have to prove it for <code>insert k s</code>. but it's workable)</p>",
        "id": 275225950,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647259402
    },
    {
        "content": "<p>Thanks ! I'll look at this.</p>\n<p>I don't mind much having it only for size &gt;= 2, as size 0 is false (I noticed it earlier but it looks like I accidentally deleted the hypothesis) and size 1 is trivial. Maybe we could do a lemma with just s nonempty as prerequisite by treating size 1 separately ?</p>",
        "id": 275226036,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1647259459
    },
    {
        "content": "<p>oh, I'm dumb, yes size 1 holds too. there's a nonempty induction principle too, which is nice</p>",
        "id": 275226121,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647259534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Coprimeness.20of.20products.20from.20pairwise.20coprimeness/near/275225535\">said</a>:</p>\n<blockquote>\n<p>can we get <code>induction</code> to do this automatically?</p>\n</blockquote>\n<p>I'm not sure you can use <code>nat.le_induction</code> with <code>induction</code>, but if you were able to, then the <code>h :</code> syntax is what does that automatically.</p>",
        "id": 275226163,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647259562
    },
    {
        "content": "<p>I don't have any more time for this today, but this should be roughly half of the work done, hopefully the rest is routine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.coprime.lemmas</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">subsingleton</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[nontriviality, simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_coprime_subsingleton</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subsingleton</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pairwise_insert</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s.cons</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_sum_eq_one_iff_pairwise_coprime'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">is_coprime</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">exists_const</span><span class=\"o\">,</span> <span class=\"n\">is_coprime_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">true_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h.cons_induction</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">clear'</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pairwise</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">finset.sdiff_self</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_empty</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n               <span class=\"n\">exists_apply_eq_apply</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">true_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.mem_singleton</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">h</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span><span class=\"n\">is_coprime</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">function.on_fun</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">pairwise_insert</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275228450,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647261054
    },
    {
        "content": "<p>(note that there's a <code>set.pairwise_insert</code> so it should be easy to prove <code>pairwise_insert</code> from that. also, it should probably be called <code>pairwise_cons</code>! maybe both should exist)</p>",
        "id": 275228517,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647261103
    }
]