[
    {
        "content": "<p>It seems that this should be an existing theorem but I can't find it. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mem_span_finset\">docs#mem_span_finset</a> seems relevant but I'm not sure how to use it, since I don't have a <code>finset</code> but <code>set.range v</code> instead. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 288128114,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1656658145
    },
    {
        "content": "<p>That ought to be straightforward via <code>rw H, apply sum_mem, intro i, apply subset_span</code></p>",
        "id": 288129376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656659062
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.subset_span\">docs#submodule.subset_span</a></p>",
        "id": 288129419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656659093
    },
    {
        "content": "<p>One could even make this into an if and only if :)</p>",
        "id": 288228135,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1656712682
    },
    {
        "content": "<p>What statement are you thinking of?</p>",
        "id": 288231159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656715140
    },
    {
        "content": "<p>There are <code>mem_span_iff_total</code> and <code>span_image_eq_map_total</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp.html\">docs#linear_algebra.finsupp</a> which should pretty much do the job.</p>",
        "id": 288234516,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1656718526
    },
    {
        "content": "<p>To take this up again, does anybody know some nice code to express an element in <code>span</code> as some sort of sum ? For example something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_span_iff_sum_coeff</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">coef</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coef</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>MWE preample</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>            <span class=\"c1\">-- definiert `ℝ`</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>          <span class=\"c1\">-- definiert `module ℚ (fin 2 → ℚ)`</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>       <span class=\"c1\">-- Importiert Matrix/Vektor-Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.default</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.finprod</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>\n<p>Backwards direction is okay (as above, although I don't get <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's suggestion with <code>sum_mem</code> to work), but in the forward direction I'm getting hung up on different finiteness options (<code>fin n →</code> vs <code>→₀</code>, <code>∑</code> vs <code>∑ᶠ</code> vs <code>finsupp.total</code> and similar stuff)</p>\n<p>The main application for me is to show that some sets of vectors are generating a vector space (maybe there's a better way to do that, too?) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_span_iff_sum_coeff</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 308366304,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1667819052
    },
    {
        "content": "<p>Try <code>span.repr</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp.html#span.repr\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp.html#span.repr</a></p>",
        "id": 308380038,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1667824796
    },
    {
        "content": "<p>or maybe <code>submodule.mem_span_finset</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp.html#mem_span_finset\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp.html#mem_span_finset</a></p>",
        "id": 308380486,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1667824995
    },
    {
        "content": "<p>I would guess that you want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_range_eq_supr\">docs#submodule.span_range_eq_supr</a></p>",
        "id": 308389856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667828377
    },
    {
        "content": "<p>Thanks for the help, both of you! I ended up using mainly <code>mem_span_iff_total</code>,  and with a bit more knowledge of how <code>fin n</code> and <code>finset</code> play together (which I don't have), your suggestions seem very useful, too.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>MWE</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.default</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_span_iff_sum_coeff</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">coef</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coef</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finsupp.mem_span_image_iff_total</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">coef</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">coef</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finsupp.total_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsupp.sum_fintype</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finsupp.mem_span_image_iff_total</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">coef</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- put `lift coef to fin n →₀ R using ⟨fintype.of_finite ↥(function.support coef)⟩,`</span>\n    <span class=\"c1\">-- here to use `(coef : fin n → R)` in the statement.</span>\n\n    <span class=\"n\">use</span> <span class=\"n\">coef</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">finsupp.total_apply</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">finsupp.sum_fintype</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 308444319,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1667844447
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.range_total\">docs#finsupp.range_total</a> seems to be the really useful lemma here</p>",
        "id": 308499350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667867509
    }
]