[
    {
        "content": "<p>What's the mechanism in Lean that inserts automatic coercions for functions?  Here's an example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>Lean inserts a coercion arrow, so it's actually <code>function.injective ⇑f</code>.</p>\n<p>(Is this something can be enabled for other types?  I'd imagine you give a type and a coercion function, and then when you pass an argument to a function that doesn't have the expected type, the expected type's coercion function is inserted.)</p>",
        "id": 210566284,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600458005
    },
    {
        "content": "<p>There is a minimal amount of documentation of this feature in this file: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/coe.lean\">https://github.com/leanprover-community/lean/blob/master/library/init/coe.lean</a></p>",
        "id": 210566587,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600458181
    },
    {
        "content": "<p>An example application: if a structure <code>B</code> extends another structure <code>A</code>, you cannot pass something of type <code>B</code> to a function expecting something of type <code>A</code>, but it would be convenient if Lean automatically inserted the <code>B.to_A</code> function.</p>",
        "id": 210566656,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600458208
    },
    {
        "content": "<p>Also <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes</a></p>",
        "id": 210566692,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600458240
    },
    {
        "content": "<p>I think in Lean 2 a coercion from an extended structure to the original structure was automatically generated. <br>\nIn Lean 3 / mathlib almost all extending of structures actually happens on classes, so that feature is not very applicable.</p>",
        "id": 210566846,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600458318
    },
    {
        "content": "<p>The basic usage is that if you define</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>then a coercion from <code>B</code> to <code>A</code> is automatically inserted.</p>",
        "id": 210566983,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600458386
    },
    {
        "content": "<p>Also look at the variants <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_fun\">docs#has_coe_to_fun</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_sort\">docs#has_coe_to_sort</a></p>",
        "id": 210567063,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600458435
    },
    {
        "content": "<p>What's nice about <code>has_coe_to_fun</code> is that the coercion is able to direct the type it gets coerced to, but <code>has_coe</code> cannot, so it sometimes needs some help with explicit type annotations.</p>\n<p>I've noticed that classes are used to do this sort of polymorphism, but not everything can be a class because there aren't always good parameters to attach them to.</p>",
        "id": 210567066,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600458438
    },
    {
        "content": "<p>I was imagining, in certain cases, being able to define your own <code>has_coe_to_fun</code>-like thing where the thing being coerced can specify some of the type variables in the coercion.</p>",
        "id": 210567234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600458516
    },
    {
        "content": "<p>Should I take it that somewhere deep in the elaborator, Lean 3 knows about <code>has_coe_to_fun</code> and will automatically insert coercions?</p>",
        "id": 210567469,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600458622
    },
    {
        "content": "<p>Yeah, <code>has_coe</code>, <code>has_coe_to_fun</code> and <code>has_coe_to_sort</code> are hard-coded somewhere in the elaborator in C++.</p>",
        "id": 210568927,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600459376
    },
    {
        "content": "<p>Assuming for a moment it makes sense to have structures with no parameters, is there any way to get this coercion to work? The class resolution trace says \"failed is_def_eq\", which I think is because it's not able to solve for the universe variables -- there's no way to tell <code>has_coe</code> that <code>has_coe (B a) A.{v}</code> does not exist for <code>v</code> not equal to <code>u</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">X&#39;</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">B_to_A&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- &quot;A.X b&quot; is not ok, since cannot coerce b to be of type A</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- OK</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">to_A</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- OK</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 210570144,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600459994
    },
    {
        "content": "<p>This would work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">X&#39;</span> <span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_coe_to_A</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">⇧</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"n\">has_coe_to_A</span><span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_A</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"err\">⇧</span><span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>It'd be nice if the <code>⇧</code> could be automatically inserted.</p>",
        "id": 210570746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600460354
    },
    {
        "content": "<p>I haven't looked at your example closely, but I thought that Lean no longer hesitates to use an instance even if it would mean assigning a universe level metavariable.</p>",
        "id": 210571000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600460488
    },
    {
        "content": "<p>With the first setup, here's a pair where the only difference is whether both universes are explicitly given:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>  <span class=\"c1\">-- not OK</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>",
        "id": 210571564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600460837
    },
    {
        "content": "<p>Did I imagine that? It does quite look like that is what is going wrong</p>",
        "id": 210571566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600460838
    },
    {
        "content": "<p>I guess I was thinking of <a href=\"#narrow/stream/144837-PR-reviews/topic/.233221.20remove.20universe.20annotations.20in.20category_theory/near/202266781\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.233221.20remove.20universe.20annotations.20in.20category_theory/near/202266781</a> but it seems that nobody really knows what happened there.</p>",
        "id": 210571983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600461120
    },
    {
        "content": "<p>That's amusing no one really knows what happened -- I guess I should take closer look at the category theory library to see what it's doing that might help class resolution out.  Do you think that this <code>B_to_A</code> coercion should work in principle?</p>",
        "id": 210572882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600461674
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> for your comments and for helping me understand auto-coercions better.  I didn't realize that <code>has_coe.coe</code> was automatically inserted, probably because in my application (the simple graphs API) it didn't obviously work so I didn't think to inspect the class resolution trace.</p>\n<p>Would it be possible or reasonable to make it so that class resolution will use an instance to solve for universe metavariables in the special case that they are unconstrained by the type variables?  The underlying assumption is that no one would ever define any other instances, so, using the language of logic programming, it's seems safe to take a closed-world assumption here.</p>\n<p>The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> from above is supposed to represent a structure that is not naturally a class (i.e., mathematical objects that are not referred to by synecdoche) that has a notion of sub-object -- and from the perspective of objects that <em>are</em> referred to by synecdoche (i.e., pretty much algebraic object in mathlib), it's a bundled structure.  Everything I've been going on about with the synecdoche problem this summer seems like it would be resolved if this <code>has_coe</code> instance would work.</p>\n<p>In the meantime, I've reorganized the <code>simple_graphs2</code> branch, which has been a test-bed for experimenting with different approaches, to use a custom coercion class and coercion arrow that is specifically for coercion to simple graphs.  This enforces that the universe is a function of the type being coerced.</p>\n<p>The arrow is <a href=\"https://github.com/leanprover-community/mathlib/blob/simple_graphs2/src/combinatorics/simple_graph/basic.lean#L101\">defined here</a>.  It's not so bad <a href=\"https://github.com/leanprover-community/mathlib/blob/simple_graphs2/src/combinatorics/simple_graph/subgraph.lean#L262\">putting the arrow where it's needed</a>, but it would just be a little more convenient not having to place the arrows at all.</p>\n<p>(The way this differs from what I was doing before is that, before you'd essentially have to prove all your generic theorems with respect to types that have a <code>has_coe_to_simple_graph</code> instance.  It was ok, but it always felt awkward, and it made some constructions more difficult than they needed to be, I think.  Recently I gained some confidence that structures with unconstrained universe variables would be OK, and it does seem to work out fine for simple graphs.)</p>",
        "id": 210786721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600715546
    },
    {
        "content": "<p>I didn't want to break convention with coercion arrows, but something I noticed is that if it instead were a postfix operation</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">postfix</span> <span class=\"bp\">`</span> <span class=\"err\">↟</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">max_plus</span>\n</code></pre></div>\n\n\n<p>then you can write stuff like <code>G↟.adj</code> rather than <code>(↟G).adj</code></p>",
        "id": 210786838,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600715637
    },
    {
        "content": "<p>(It's reminiscent of how in Pascal, they used a postfix pointer dereferencing operator.  Using C-like notation, you can do <code>x*.foo</code> rather than needing a separate <code>x-&gt;foo</code>.)</p>",
        "id": 210787073,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600715742
    },
    {
        "content": "<p>Another reason not defining it this way, beyond convention, is that using this postfix arrow along with generalized field access notation means it can't be seamlessly be replaced by <code>has_coe</code>, due to the fact that the field access notation needs to be able to determine the name of the type to resolve.  Still, it seems like nice notational hack to consider.</p>",
        "id": 210787976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600716184
    },
    {
        "content": "<p>I think generally we want to coerce objects only to other objects of the same universe (or at least, a universe determined by the object in question). I don't know how hard it is to change the type-class mechanism to incorporate your suggestion<br>\nWhy doesn't <code>has_coe (simple_graph_on V) simple_graph</code>, or any of your other examples, work? It looks like the universe of the target is the same (or at least determined) by the coerced object. <br>\nAlso, I would encourage you to not add too many coercions. The coercions from <code>simple_graph_on</code> and <code>of_edge_set'</code> should probably just be named operations. The former is very similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.bundled\">docs#category_theory.bundled</a> whose constructor is also not a coercion.<br>\nI feel strongly that we should not have a dedicated global notation to coerce specifically to <code>simple_graph</code>.</p>",
        "id": 210798517,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600721661
    },
    {
        "content": "<p>The issue with <code>has_coe (simple_graph_on V) simple_graph</code> is that Lean can figure out the universe for <code>simple_graph_on V</code>, so then it would know how to coerce to <code>simple_graph.{u}</code> for <code>V : Type u</code>, but then class inference can't make the leap that this instance should be used, because all it knows is that it needs a <code>simple_graph.{v}</code> for some <code>v</code>.  I assume it's because someone might later introduce an instance like <code>has_coe (simple_graph_on V) simple_graph.{u+1}</code>, even though we know this is highly unlikely.</p>\n<p>I agree I don't need <code>of_edge_set'</code> to have a coercion -- it's only there to show that two ways of defining subgraphs are equivalent and it should only be a local instance -- but it's useful having <code>simple_graph_on</code> being coerceable.  There are many cases where you'd like ready access to the vertex type for rewriting, so it's worth making things like <code>path_graph</code> be a <code>simple_graph_on</code> rather than a <code>simple_graph</code> when possible -- and ideally you wouldn't need to pervasively clutter code with casts to the <code>simple_graph</code> type.  One place it's useful is in working with <a href=\"https://github.com/leanprover-community/mathlib/blob/simple_graphs2/src/combinatorics/simple_graph/walks.lean#L344\">walks in a graph as homomorphisms</a> <code>↟(path_graph length) →g G</code>, where the vertex type is <code>fin (length + 1)</code>.  In any case, there are only really two types right now where it's convenient to have a coercion to <code>simple_graph</code>: <code>simple_graph_on</code> and <code>subgraph</code>.  There probably wouldn't ever be many more than this.</p>\n<p>I also agree that there shouldn't be a dedicated global notation for coercing to simple graphs.  I'm hoping <code>has_coe</code> will work and then it can be removed entirely.  But if not, then I can revert to the method I was previously using without too many changes, or I can just give the tree arrow as local notation.  (An audacious proposal is for this to be a special coercion notation that is overloaded for specific coercion destinations. Like how <code>::</code> is overloaded.)</p>",
        "id": 210804450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600724792
    }
]