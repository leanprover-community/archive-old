[
    {
        "content": "<p>If I know the derivative of a function is 0 everywhere is there a succinct way to conclude its <code>fderiv</code> is 0 everywhere? I can do it as follows</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">fderiv</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf&#39;</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">x_1</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x_1</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span> <span class=\"n\">x_1</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fderiv_deriv</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But that seems pretty annoying. Is there a one line way to do this? The reason I am interested is that I would like to use <code>is_const_of_fderiv_eq_zero</code> from #analysis.calculus.mean_value which requires that <code>fderiv \\R f = 0</code> but I only know that <code>deriv f = 0</code>.</p>",
        "id": 204011965,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594846667
    },
    {
        "content": "<p><code>deriv</code> is by definition an <code>fderiv</code>! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv\">docs#deriv</a></p>",
        "id": 204012642,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594847034
    },
    {
        "content": "<p>Oh, sorry, you know this, and you want to know if there's a lemma shortening your proof.</p>",
        "id": 204012784,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594847108
    },
    {
        "content": "<p>Yeah, the problem is that <code>deriv</code> is <code>fderiv</code> at 1. So if I know that <code>deriv f</code> is 0 everywhere then I only by definition know that <code>fderiv f x 1</code> is 0 for any <code>x</code>. In one dimension this implies that <code>fderiv</code> is 0 eveywhere, but I was wondering if mathlib has some lemma like this already or if my proof above is necessary</p>",
        "id": 204013016,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594847232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">fderiv</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf&#39;</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">deriv_fderiv</span><span class=\"o\">,</span> <span class=\"n\">hf&#39;</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 204013207,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594847316
    },
    {
        "content": "<p>The idea is to rewrite <code>fderiv</code> in terms of <code>deriv</code>, then replace the deriv by <code>0</code>, and let <code>simp</code> do all the cleaning.</p>",
        "id": 204013273,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594847358
    },
    {
        "content": "<p>ah, that makes sense. It's easier than writing <code>deriv</code> in terms of <code>fderiv</code> I guess</p>",
        "id": 204013443,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594847440
    },
    {
        "content": "<p>There are formulas to go both directions. If you know that <code>deriv</code> is <code>0</code>, it is a better idea to rewrite <code>fderiv</code> in terms of <code>deriv</code> to deduce that it is also <code>0</code>.</p>",
        "id": 204013690,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594847567
    }
]