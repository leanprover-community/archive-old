[
    {
        "content": "<p>I am having a hard time working with limits in mathlib. For example, how would I write the fact that a real number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> is a limit of a sequence of rationals?</p>",
        "id": 293924944,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660751710
    },
    {
        "content": "<p>This is true by definition ;) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">‚Ñö</span> <span class=\"n\">abs</span><span class=\"o\">,</span> <span class=\"n\">real.mk</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">a</span><span class=\"o\">‚ü©‚ü©,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293926282,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660752069
    },
    {
        "content": "<p>I don't know if we have such a lemma though</p>",
        "id": 293926312,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660752077
    },
    {
        "content": "<p>Besides, one should probably use filters as opposed to sequences</p>",
        "id": 293926400,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660752104
    },
    {
        "content": "<p>Yes, I realised that my question was a bit stupid since it is actually how the reals are defined in mathlib...</p>\n<p>Ok, so what I have in mind is: how to prove the following lemma using the fact that reals are limits of sequence of rationals?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñö</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 293928173,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660752617
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_inducing.extend_unique\">docs#dense_inducing.extend_unique</a> the other day</p>",
        "id": 293931226,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660753634
    },
    {
        "content": "<p><del>Oh and we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rational_cau_seq_pkg\">docs#rational_cau_seq_pkg</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion.dense_inducing\">docs#abstract_completion.dense_inducing</a> !</del> See below for a better solution using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.dense_embedding_coe_real\">docs#rat.dense_embedding_coe_real</a> directly.</p>",
        "id": 293931849,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660753822
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_inducing.extend_eq\">docs#dense_inducing.extend_eq</a> (for the first approach)</p>",
        "id": 293931970,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660753857
    },
    {
        "content": "<p>But was your point that you want to do this explicitly via limits of sequences of rational for pedagogical reasons?</p>",
        "id": 293932648,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660754066
    },
    {
        "content": "<p>Sorry? extend_eq seems just asserting the constructed <code>extend</code> is actually an extension. I can't see how it helps...</p>",
        "id": 293932679,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660754076
    },
    {
        "content": "<p>These results looks great but still very powerful for the purpose. Surely, there is a way to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.lim_eq\">docs#continuous.lim_eq</a> and the fact that <code>x</code> is a limit a sequence of rationals? And, as suggested by <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> , I certainly need to know more about using limits in mathlib so having a proof using limits would make me even more happy <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>In fact, I don't know even how to simply state the fact that the real <code>x</code> is the limit of rational numbers using filters.</p>",
        "id": 293933015,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660754166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>  If you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_inducing.extend_unique\">docs#dense_inducing.extend_unique</a> you get that extension of some function (in this case, the identity) on the rationals is equal to some other function (in our case, <code>f</code>), but then you need to know that the extension of the identity on rationals is the identity on the reals. Hence <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_inducing.extend_eq\">docs#dense_inducing.extend_eq</a>.</p>",
        "id": 293933284,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660754263
    },
    {
        "content": "<p>The identity function on the reals is also a continuous function that is identity on the rationals. So both it and <code>f</code> equals <code>extend</code>, so they're equal.</p>",
        "id": 293933576,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660754342
    },
    {
        "content": "<p>This says the real number <code>x</code> is the limit of some sequence of rational numbers.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñö</span><span class=\"o\">),</span> <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 293933810,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660754407
    },
    {
        "content": "<p>I admit I didn't think of this argument and thought something is missing when I saw <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_inducing.extend_unique\">docs#dense_inducing.extend_unique</a> the first time ...</p>",
        "id": 293933865,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660754424
    },
    {
        "content": "<p>But do you need this for <em>pedagogical purposes</em>? That is, are you trying to teach something to students with this? If not, I would encourage going the abstract route; it's frequently the way to go.</p>",
        "id": 293934480,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660754619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Real.20as.20limit.20of.20sequence.20of.20rationals/near/293933810\">said</a>:</p>\n<blockquote>\n<p>This says the real number <code>x</code> is the limit of some sequence of rational numbers.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñö</span><span class=\"o\">),</span> <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks. Do you need some special code to make the <code>ùìù</code> works? I get <code>unknown identifier 'ùìù'</code> on my side.</p>",
        "id": 293934687,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660754690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Real.20as.20limit.20of.20sequence.20of.20rationals/near/293934480\">said</a>:</p>\n<blockquote>\n<p>But do you need this for <em>pedagogical purposes</em>? That is, are you trying to teach something to students with this? If not, I would encourage going the abstract route; it's frequently the way to go.</p>\n</blockquote>\n<p>Indeed. Let's say I'll do both <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 293934758,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660754723
    },
    {
        "content": "<p>Guys, you should stop frightening Xavier now.</p>",
        "id": 293934823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660754748
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.rat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñö</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rat.dense_embedding_coe_real.dense.equalizer</span> <span class=\"n\">h1</span> <span class=\"n\">continuous_id</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">q</span> <span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h2</span> <span class=\"n\">q</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 293934846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660754756
    },
    {
        "content": "<p>For <code>ùìù</code>, use <code>open_locale topological_space</code></p>",
        "id": 293935090,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660754847
    },
    {
        "content": "<p>Well, I guess that answer the question but I am still going to need a little time to process that answer.</p>\n<p>Anyway, thanks everybody. I think I have enough to produce three different proofs of the lemma now.</p>",
        "id": 293935135,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660754862
    },
    {
        "content": "<p>BTW, this fails for some reason...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.compare_reals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñö</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">rational_cau_seq_pkg.induction_on</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293935441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660754970
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">pseudo_metric_space.to_uniform_space</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">is_absolute_value.uniform_space</span> <span class=\"n\">abs</span>\n</code></pre></div>",
        "id": 293935482,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660754983
    },
    {
        "content": "<p>Xavier, you can make it easier to decipher by stating both the assumption and the conclusion in a more convenient way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"bp\">‚àò</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"n\">rat.dense_embedding_coe_real.dense.equalizer</span> <span class=\"n\">h1</span> <span class=\"n\">continuous_id</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 293935586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660755010
    },
    {
        "content": "<p>This means that <code>simp</code> and <code>simpa</code> in my first snippet are only used to bridge that gap.</p>",
        "id": 293935678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660755039
    },
    {
        "content": "<p>Adam, this sounds pretty bad. It means then when we refactored to introduce <code>pseudo_metric_space</code> we created some bad diamond. But it should move to another thread.</p>",
        "id": 293935835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660755104
    },
    {
        "content": "<p>I'll repost in general</p>",
        "id": 293935882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660755122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, in <code> rat.dense_embedding_coe_real.dense.equalizer</code>, I think I see where the part <code>rat.dense_embedding_coe_real</code> comes from, but I cannot find to which function  the part <code>dense.equalizer</code>  relates to.</p>",
        "id": 293977203,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660770868
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_range.equalizer\">docs#dense_range.equalizer</a></p>",
        "id": 293978113,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660771317
    },
    {
        "content": "<p>If you have it open in VS Code, you should be able to hover over the pieces to see what the declaration is.</p>",
        "id": 293978194,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660771340
    },
    {
        "content": "<p>It's also using the fact that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_embedding\">docs#dense_embedding</a> extends <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_inducing\">docs#dense_inducing</a>, which has a field <code>dense</code> that says the map has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_range\">docs#dense_range</a>. Do you know about dot notation in Lean, and how that works?</p>",
        "id": 293978518,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660771496
    },
    {
        "content": "<p>Thanks for the explanation. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Real.20as.20limit.20of.20sequence.20of.20rationals/near/293978518\">said</a>:</p>\n<blockquote>\n<p>Do you know about dot notation in Lean, and how that works?</p>\n</blockquote>\n<p>Well, I thought I did. Maybe I'll have to think about it a bit more to understand what happens here.</p>",
        "id": 293978990,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660771729
    },
    {
        "content": "<p>This is the dot notation unfolded:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dense_range.equalizer</span> <span class=\"o\">(</span><span class=\"n\">dense_inducing.dense</span> <span class=\"o\">(</span><span class=\"n\">dense_embedding.to_dense_inducing</span> <span class=\"n\">rat.dense_embedding_coe_real</span><span class=\"o\">))</span> <span class=\"n\">h1</span> <span class=\"n\">continuous_id</span> <span class=\"n\">h2</span>\n</code></pre></div>\n<p>Note that with dot notation, the explicit map <code>dense_embedding.to_dense_inducing</code> can be omitted because the structure <code>dense_embedding</code> extends <code>dense_inducing</code> and <code>dense_inducing.dense</code> is one of the fields of the latter.</p>",
        "id": 293979832,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660772151
    },
    {
        "content": "<p>So, <code>rat.dense_embedding_coe_real</code> is a <code>dense_embedding</code> which we can plug into <code>dense_inducing.dense</code> (because Lean sees this <code>.dense</code> as a field of <code>dense_embedding</code> also, as described above). This results in <code>rat.dense_embedding_coe_real.dense : dense_range (coe : ‚Ñö ‚Üí ‚Ñù)</code>, which we can then plug into <code>dense_range.equalizer</code>.</p>",
        "id": 293980209,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660772344
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 293980216,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660772350
    },
    {
        "content": "<p>It does. Thanks a lot <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 293980354,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1660772404
    },
    {
        "content": "<p>FYI you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.dense_range_cast\">docs#rat.dense_range_cast</a> to get your <code>dense_range</code> proof without needing to go through the embedding</p>",
        "id": 294187362,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660867210
    }
]