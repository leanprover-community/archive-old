[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq_add_of_sub_eq</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>In the code above, I am looking for a tactic or a combination of tactics to get h3 checked.</p>",
        "id": 262348181,
        "sender_full_name": "Shi You",
        "timestamp": 1637600763
    },
    {
        "content": "<p>Can you post fully working code? The way to fill in the sorry might depend on the type of x. If I post your code into VS Code I get an error about not knowing what x is. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 262348515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637600908
    },
    {
        "content": "<p>if you want a guess, try <code>have h3 : x = 2 - x, convert h2, ring,</code></p>",
        "id": 262348601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637600957
    },
    {
        "content": "<p>But <code>linarith</code> might just solve this goal instantly without h2 or h3, depending on the type of x.</p>",
        "id": 262348641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637600988
    },
    {
        "content": "<p>or maybe <code>omega</code>. I need more clues.</p>",
        "id": 262348764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637601040
    },
    {
        "content": "<p>Here is the full code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq_add_of_sub_eq</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262348819,
        "sender_full_name": "Shi You",
        "timestamp": 1637601064
    },
    {
        "content": "<p>That's not the full code because if I post that into VS Code I get an error saying that Lean doesn't know what <code>x</code> is. Read this link <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 262348895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637601093
    },
    {
        "content": "<p>x is rational</p>",
        "id": 262348933,
        "sender_full_name": "Shi You",
        "timestamp": 1637601109
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">â„š</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 262349029,
        "sender_full_name": "Shi You",
        "timestamp": 1637601139
    },
    {
        "content": "<p>Then my guess earlier works, right?</p>",
        "id": 262349230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637601242
    },
    {
        "content": "<p>Yes, thx</p>",
        "id": 262349313,
        "sender_full_name": "Shi You",
        "timestamp": 1637601263
    },
    {
        "content": "<p><code>ring</code> can only prove results of the form <code>X = Y</code> when X and Y simplify to the same thing. It can't prove results of the form \"if f(A,B)=0 then g(A,B)=0\". Here you're lucky that we can use <code>convert</code>.</p>",
        "id": 262349462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637601343
    },
    {
        "content": "<p>what about checking h4 from h3. I guess there should be a tactic handling equation manipulation.</p>",
        "id": 262349737,
        "sender_full_name": "Shi You",
        "timestamp": 1637601464
    },
    {
        "content": "<p><code>linarith</code> proves the main goal immediately, you don't need any of this stuff</p>",
        "id": 262349858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637601511
    },
    {
        "content": "<p>It might also prove your subgoals</p>",
        "id": 262349874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637601519
    },
    {
        "content": "<p>I'm not at lean right now but my guess is <code>have h3 : x = 2 -  x, conv_lhs {rw h2}, ring</code> would also work</p>",
        "id": 262350090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637601615
    },
    {
        "content": "<p>Thx, that's very helpful</p>",
        "id": 262350097,
        "sender_full_name": "Shi You",
        "timestamp": 1637601619
    },
    {
        "content": "<p>If <code>linarith</code> doesn't give you h4 from h3 then you could rewrite the theorem that says 2*x=x+x -- you can look up its name with <code>library_search</code>. After you've rewritten that, you can use <code>library_search</code> again to deduce x+x=2 from x=2-x, this is bound to be a special case of a result in the library</p>",
        "id": 262350451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637601813
    },
    {
        "content": "<p>It checks everything indeed</p>",
        "id": 262352955,
        "sender_full_name": "Shi You",
        "timestamp": 1637603040
    }
]