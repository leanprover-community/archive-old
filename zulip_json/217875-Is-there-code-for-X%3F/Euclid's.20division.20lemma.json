[
    {
        "content": "<p>Is there a proof of \"Euclid's division lemma\" in mathlib? I couldn't find one. <br>\nI started something, I think it would be like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">int.to_pos</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int.of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int.neg_succ_of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">euclid_division</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_ne_zero</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int.to_pos</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r.val</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does this exists already under a different name?</p>",
        "id": 313365795,
        "sender_full_name": "Ben",
        "timestamp": 1669925148
    },
    {
        "content": "<p>I think that <code>#reduce int.to_pos (-3)</code> does not give the result you expect.</p>",
        "id": 313366404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669925308
    },
    {
        "content": "<p>You probably want <code>int.nat_abs</code>.</p>",
        "id": 313366439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669925320
    },
    {
        "content": "<p>I think that the lemma you are looking for is somewhere close to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.mod\">docs#int.mod</a>.</p>",
        "id": 313366592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669925378
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.div_add_mod\">docs#int.div_add_mod</a></p>",
        "id": 313366810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669925451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euclid's.20division.20lemma/near/313366439\">said</a>:</p>\n<blockquote>\n<p>You probably want <code>int.nat_abs</code>.</p>\n</blockquote>\n<p>Ah yes that is better, I forgot about the how <code>-0</code> isn't covered.  <code>#eval (int.to_pos (-3))</code> would then return <code>2</code>. <code>int.nat_abs</code> was what I was looking for <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 313373842,
        "sender_full_name": "Ben",
        "timestamp": 1669927649
    }
]