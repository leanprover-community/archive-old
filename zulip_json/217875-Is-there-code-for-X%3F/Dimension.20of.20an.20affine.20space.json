[
    {
        "content": "<p>There doesn't seem to be anything about the dimension of an affine space. Is it missing or are we meant to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.finrank\">docs#finite_dimensional.finrank</a>?</p>",
        "id": 285606750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654816105
    },
    {
        "content": "<p>Right now, we just refer to the dimension of the underlying space. Not sure if we should consider adding dimension for affine spaces</p>",
        "id": 285607090,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654816399
    },
    {
        "content": "<p>Okay, but how do I talk about the dimension of an affine subspace then? Do I talk about the dimension of its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_subspace.direction\">docs#affine_subspace.direction</a>?</p>",
        "id": 285607208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654816523
    },
    {
        "content": "<p>That sounds very reasonable to me</p>",
        "id": 285607224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654816545
    },
    {
        "content": "<p>Is there a precedent or am I the first one caring about the dimension of an affine subspace?</p>",
        "id": 285607289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654816578
    },
    {
        "content": "<p>(Looking through his code) I'm guessing <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> thought about this a bit and chose to go with just using the dimension of the underlying space</p>",
        "id": 285607352,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654816652
    },
    {
        "content": "<p>It's not too awkward the way it is right now. If we were to add affine space dimensions then all the API would have to be ported over, and most results are really just results about the underlying spaces</p>",
        "id": 285607536,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654816828
    },
    {
        "content": "<p>Yes, using dimensions of underlying spaces (and <code>direction</code> in the subspace case) avoids the need for extra API by allowing all the API for dimension and <code>finrank</code> to be used directly. Strictly there is an argument for a definition of dimension for affine subspaces in order to give the empty affine subspace dimension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> (using the dimension of the <code>direction</code> gives it dimension 0, like affine subspaces with a single point), but I doubt that would be particularly useful in practice.</p>",
        "id": 285608436,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1654817675
    },
    {
        "content": "<p>Also everything we currently have about dimensions in affine spaces is for the finite-dimensional case only (<code>finrank</code> instead of <code>rank</code>), but no doubt some of it could be generalized to infinite dimensions if desired.</p>",
        "id": 285608726,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1654817942
    },
    {
        "content": "<p>It's time to add an abstract notion of dimension using matroids and/or combinatorial geometries.</p>",
        "id": 285622994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654828342
    },
    {
        "content": "<p>I would certainly be interested in this! We had an external matroid project, by <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> if I remember correctly?</p>",
        "id": 285639605,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654845409
    },
    {
        "content": "<p>What's the status on closure operators?</p>",
        "id": 285682607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654870983
    },
    {
        "content": "<p>I'm quite unhappy with the current API, and I think we should have interior operators to help dualize results.</p>",
        "id": 285737403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654898401
    },
    {
        "content": "<p>I would like closure operators to be galois connections in the special case of <code>β = subtype p</code> where <code>p : α → Prop</code>.</p>",
        "id": 285737856,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654898740
    }
]