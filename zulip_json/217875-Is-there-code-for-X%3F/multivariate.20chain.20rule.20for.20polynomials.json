[
    {
        "content": "<p>Is there any form of multivariate chain rule for polynomials in mathlib? We have the analytic version <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fderiv_at.comp\">docs#has_fderiv_at.comp</a> which is stated using composition of linear maps. </p>\n<p>Here are two versions of 2-variable chain rule in a polynomial ring over a polynomial ring R[X][X], and I'll use Y to refer to the second X. For <code>p : R[X][X]</code> and <code>q : R[X]</code>, <code>eval q p</code> means plugging <code>Y := q(X)</code> into <code>p(X,Y)</code>; <code>p.derivative</code> is the derivative w.r.t. Y, and <code>p.sum $ λ n r, C r.derivative * X ^ n</code> is the derivative w.r.t. X; I wonder if there's a more idiomatic spelling for the latter. It's very much like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map\">docs#polynomial.map</a> but with <code>f := derivative</code> a linear_map instead of a ring_hom.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.derivative</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">derivative</span> <span class=\"bp\">=</span>\n  <span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r.derivative</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">q.derivative</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">q</span> <span class=\"n\">p.derivative</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">derivative</span> <span class=\"bp\">=</span>\n  <span class=\"n\">eval</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">p.sum</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">r.derivative</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">q.derivative</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">q</span> <span class=\"n\">p.derivative</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 311515747,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669091158
    },
    {
        "content": "<p>and here are statements using genuine <code>mv_polynomial</code>s. Are there better suggestions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.pderiv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial.C</span> <span class=\"n\">R</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">derivative</span> <span class=\"bp\">=</span>\n  <span class=\"n\">p.vars.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">derivative</span> <span class=\"bp\">*</span> <span class=\"n\">eval₂</span> <span class=\"n\">polynomial.C</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">pderiv</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial.C</span> <span class=\"n\">R</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">derivative</span> <span class=\"bp\">=</span>\n  <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">derivative</span> <span class=\"bp\">*</span> <span class=\"n\">eval₂</span> <span class=\"n\">polynomial.C</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">pderiv</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 311517028,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669092229
    },
    {
        "content": "<p>I just saw this - I'm wondering the same thing i.e. if it's possible to map the linear map <code>derivative</code> across a polynomial</p>",
        "id": 311903385,
        "sender_full_name": "David Ang",
        "timestamp": 1669235491
    },
    {
        "content": "<p>Notice that there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.map_range.linear_map\">docs#finsupp.map_range.linear_map</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial\">docs#polynomial</a> is a wrapper around finsupp.</p>",
        "id": 311903861,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669235754
    }
]