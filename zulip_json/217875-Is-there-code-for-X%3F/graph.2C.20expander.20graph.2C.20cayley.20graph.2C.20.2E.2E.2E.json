[
    {
        "content": "<p>Hi, I am currently writing a paper that contains ideas including expander graph, Cayley graph, expander codes ... So I would like to use this opportunity to develop some lean code along this direction. Is there any suggested code related to graphs, such as expander graph, Cayley graph?</p>\n<p>Also, since the proof in this context often contains 2 parts. One part on construction, the other part on proof. Is there some \"template\" (i.e. some other problem with similar 2 part format) I could refer to?</p>",
        "id": 248461272,
        "sender_full_name": "david",
        "timestamp": 1628160255
    },
    {
        "content": "<p>Graph theory is at baby stage in mathlib right now. Some of us are doing stuff related to them, but no Cayley or expander graph as far as I know.<br>\nThe 2 parts proofs you are talking about are ubiquitous, so I don't really know what to point you to.</p>",
        "id": 248464359,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628162766
    },
    {
        "content": "<p>Thank you! Sorry, I am a beginner, so I'm still navigating. Can you point to any example that you wrote or any example you found easy for a beginner to digest?</p>",
        "id": 248473566,
        "sender_full_name": "david",
        "timestamp": 1628168576
    },
    {
        "content": "<p>Can you expand a little on what you mean by \"a two part proof\", perhaps with an example?</p>",
        "id": 248473829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628168699
    },
    {
        "content": "<p>I was originally thinking about some combinatorial construction, but while writing, I realized maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.sorted_merge_sort\">docs#list.sorted_merge_sort</a> would serve as an example, where part1 = construct the algorithm and part2 = proof the algorithm actually sort correctly. I will first try to understand it. Thanks!</p>",
        "id": 248475861,
        "sender_full_name": "david",
        "timestamp": 1628169740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"423824\">@david</span> Here's a quick attempt at formalizing the definitions of Schreier graphs and Cayley graphs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">digraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">symmetric_subset</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">schreier_graph</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">X</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">schreier_graph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edge_mem</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">schreier_graph</span> <span class=\"n\">G</span> <span class=\"n\">S</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edges</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edge_gen</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">schreier_graph</span> <span class=\"n\">G</span> <span class=\"n\">S</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edges</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edge_comm</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">symmetric_subset</span> <span class=\"n\">G</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">schreier_graph</span> <span class=\"n\">G</span> <span class=\"n\">S</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edges</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">schreier_graph</span> <span class=\"n\">G</span> <span class=\"n\">S</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edges</span> <span class=\"n\">y</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">schreier_graph</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">sym</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">schreier_graph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cayley_graph</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">schreier_graph</span> <span class=\"n\">G</span> <span class=\"n\">S</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cayley_graph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edge_mem</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">cayley_graph</span> <span class=\"n\">G</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edges</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_iff</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">cayley_graph</span> <span class=\"n\">G</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edges</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">cayley_graph</span> <span class=\"n\">G</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edges</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cayley_graph</span>\n</code></pre></div>",
        "id": 248562022,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628219195
    },
    {
        "content": "<p>They're directed graphs (with a definition similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a>) with edges labeled by group elements from a generating set.</p>",
        "id": 248562127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628219298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thank you that was extremely helpful!</p>",
        "id": 248576647,
        "sender_full_name": "david",
        "timestamp": 1628232064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"430458\">@David</span> your description of an argument being a construction and a proof just looks like a definition and a proof in Lean. The way to learn this software is to dive in and formalise some mathematics. See if you can prove some basic lemmas from your paper using the definitions which Kyle haa provided and feel free to ask in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a>  if you have any problems</p>",
        "id": 248577951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628233293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> was also interested in Cayley graphs, perhaps she has some things too?</p>",
        "id": 248617528,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1628259916
    }
]