[
    {
        "content": "<p>Could <code>ext</code> be made to reduce this goal to \"for all m and n, f(m \\otimes_t n) = m \\otimes_t n\"? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"c1\">-- no applicable extensionality rule found for tensor_product</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 295725371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661701898
    },
    {
        "content": "<p>Should this be a thing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">linear_map.ker</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sub_eq_zero.1</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">submodule.mem_top</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"c1\">-- i ♥ defeq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tensor_product.span_tmul_eq_top</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">submodule.span_le</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sub_eq_zero.2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- my use case</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.id</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 295727608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661703059
    },
    {
        "content": "<p>I almost felt dirty writing that first proof; I abuse defeq, making the proof unreadable to a beginner. Am I a bad person?</p>",
        "id": 295727672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661703118
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.ext\">docs#tensor_product.ext</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.ext'\">docs#tensor_product.ext'</a>? The first one seems to have a discussion on why the <code>ext</code> isn't on (although I don't know what <code>compr2</code> does - I assume it's equivalent to what's written), and the primed is the version you have here</p>",
        "id": 295728491,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661703578
    },
    {
        "content": "<p>Oh I see, so I'm just supposed to apply them manually? I'll take the experts' word for it :-)</p>",
        "id": 295730959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661705108
    },
    {
        "content": "<p>I think it's usually added as a local attribute in files where it is important</p>",
        "id": 295752980,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1661716839
    },
    {
        "content": "<p>The <code>compr₂</code> version means that it chains for nested tensor products</p>",
        "id": 295758224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661721615
    }
]