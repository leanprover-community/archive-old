[
    {
        "content": "<p>What's the idiomatic way to say that a functor commutes with finite (co)limits?<br>\nI would like to be able to formulate the following definition in lean:<br>\n<a href=\"https://stacks.math.columbia.edu/tag/0034\">https://stacks.math.columbia.edu/tag/0034</a></p>",
        "id": 220016805,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608054915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> any hints?</p>",
        "id": 220016809,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608054920
    },
    {
        "content": "<p>My usual go-to is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fin_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">preserves_limits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 220016959,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608054975
    },
    {
        "content": "<p>I should let you know that I'm trying to define flat functors as well</p>",
        "id": 220017011,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055001
    },
    {
        "content": "<p>in this branch: <a href=\"https://github.com/leanprover-community/mathlib/tree/flat\">https://github.com/leanprover-community/mathlib/tree/flat</a></p>",
        "id": 220017030,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055009
    },
    {
        "content": "<p>I also suspect it might be nice to have abbreviations for <code>preserves_terminal</code>, <code>preserves_binary_products</code> etc</p>",
        "id": 220017095,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055040
    },
    {
        "content": "<p>in particular if you want to assume that <code>F</code> preserves finite limits the assumption you need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">ùí•</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">fin_category</span> <span class=\"n\">J</span> <span class=\"bp\">ùí•</span><span class=\"o\">],</span>\n      <span class=\"bp\">@</span><span class=\"n\">preserves_limits_of_shape</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">J</span> <span class=\"bp\">ùí•</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 220017173,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055072
    },
    {
        "content": "<p>which is ugly!</p>",
        "id": 220017242,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055093
    },
    {
        "content": "<p>Yeah....</p>",
        "id": 220017255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608055099
    },
    {
        "content": "<p>but the definition of having finite limits is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">has_finite_limits</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">ùí•</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">fin_category</span> <span class=\"n\">J</span> <span class=\"bp\">ùí•</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">has_limits_of_shape</span> <span class=\"n\">J</span> <span class=\"bp\">ùí•</span> <span class=\"n\">C</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 220017393,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055168
    },
    {
        "content": "<p>so we could just hide this like that and not have to worry about the ugliness in practice</p>",
        "id": 220017419,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055186
    },
    {
        "content": "<p>Why do we need to tell lean about the small_category instance explicitly?</p>",
        "id": 220017521,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608055216
    },
    {
        "content": "<p>I think it's a general thing about registering new instances inside binders</p>",
        "id": 220017608,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055262
    },
    {
        "content": "<p>Oh ok.</p>",
        "id": 220017630,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608055270
    },
    {
        "content": "<p>Thanks. I'll play around with this for a bit.</p>",
        "id": 220017662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608055284
    },
    {
        "content": "<p>As in, you could alternatively do <code>Œ† (J : Type v) [ùí• : small_category J] , by exactI Œ† [fin_category J], ...</code></p>",
        "id": 220017693,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055296
    },
    {
        "content": "<p>You might be able to sneak in a cunning <code>by exactI</code> after <code>[small_category J]</code></p>",
        "id": 220017699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608055298
    },
    {
        "content": "<p>yeah that</p>",
        "id": 220017734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608055311
    },
    {
        "content": "<p>I think they're both unfortunate though</p>",
        "id": 220017810,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608055328
    },
    {
        "content": "<p>Fair point</p>",
        "id": 220017831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608055335
    },
    {
        "content": "<p>Yeah I agree.</p>",
        "id": 220017833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608055335
    }
]