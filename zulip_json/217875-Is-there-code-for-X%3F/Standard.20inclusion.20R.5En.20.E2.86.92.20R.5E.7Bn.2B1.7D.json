[
    {
        "content": "<p>What is the best way of defining the standard inclusion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> (meaning adding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> as the last component) as a linear map? Thank you!</p>",
        "id": 252647847,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631202295
    },
    {
        "content": "<p>is the unbundled version <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.snoc\">docs#fin.snoc</a> (<code>fin.snoc v 0</code>)?</p>",
        "id": 252648169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631202433
    },
    {
        "content": "<p>Stupid related question (on your answer): why \"unbundled\"?</p>",
        "id": 252648280,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631202485
    },
    {
        "content": "<p>\"unbundled\" meaning \"without any proof that it is linear\"</p>",
        "id": 252648314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631202510
    },
    {
        "content": "<p>because <code>fin.snoc</code> isn't (defined as) a linear map.</p>",
        "id": 252648317,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631202513
    },
    {
        "content": "<p>Crystal clear, thanks.</p>",
        "id": 252648382,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631202549
    },
    {
        "content": "<p>To be precise what I'm looking for is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 252649221,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631202861
    },
    {
        "content": "<p>And to be honest I am having troubles in understand what <code>fin.snoc</code> does...</p>",
        "id": 252649587,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631202959
    },
    {
        "content": "<blockquote>\n<p>Adding an element at the end of an n-tuple, to get an n+1-tuple. The name snoc comes from cons (i.e., adding an element to the left of a tuple) read in reverse order.</p>\n</blockquote>",
        "id": 252649736,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1631202994
    },
    {
        "content": "<p>I would hope you can build it  from <code>(fin n → R) →ₗ[R] (fin n → R) × (fin 1 → R)</code> (which is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.inl\">docs#linear_map.inl</a>), and then maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.coprod\">docs#linear_map.coprod</a></p>",
        "id": 252650296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631203128
    },
    {
        "content": "<p>I'd be tempted to just build it by hand!</p>",
        "id": 252651820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631203654
    },
    {
        "content": "<p>Yes, with basis it should be easy, using <code>fin.cast_succ</code>. I am surprised that nobody needed it, but maybe it is too specific for mathlib :)</p>",
        "id": 252652210,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631203813
    },
    {
        "content": "<p>The version that inserts zero at the start instead of the end might be more likely to exist</p>",
        "id": 252653198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631204215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Standard.20inclusion.20R.5En.20.E2.86.92.20R.5E.7Bn.2B1.7D/near/252651820\">said</a>:</p>\n<blockquote>\n<p>I'd be tempted to just build it by hand!</p>\n</blockquote>\n<p>Yes, I agree - we should probably have <code>fin.snoc_zero_zero</code> and <code>fin.snoc_zero_add</code> lemmas that say <code>fin.snoc 0 0 = 0</code> and <code>fin.snoc (v + w) 0 = fin.snoc v 0 + fin.snoc w 0</code></p>",
        "id": 252653431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631204328
    },
    {
        "content": "<p>Then the final step of bundling the map becomes easy</p>",
        "id": 252653475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631204354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Standard.20inclusion.20R.5En.20.E2.86.92.20R.5E.7Bn.2B1.7D/near/252653475\">said</a>:</p>\n<blockquote>\n<p>Then the final step of bundling the map becomes easy</p>\n</blockquote>\n<p>it's not very hard anyways</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">fin.snoc</span> <span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"n\">fin.last_cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"n\">fin.last_cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 252653721,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1631204457
    },
    {
        "content": "<p>I think it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.std_basis</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">basis.constr</span> <span class=\"o\">(</span><span class=\"n\">pi.basis_fun</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi.basis_fun</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 252654209,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631204641
    },
    {
        "content": "<p>I will warn that when I was using <code>snoc</code> I hated the stupid thing</p>",
        "id": 252654316,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631204669
    },
    {
        "content": "<p><code>cons</code> is much better behaved</p>",
        "id": 252654328,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631204676
    },
    {
        "content": "<p>obviously it's mathematically weird to insert at the start but it's a much more pleasant lean experience</p>",
        "id": 252654436,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631204720
    },
    {
        "content": "<p>Using <code>noncomputable</code> seems a bit extreme for something so trivial!</p>",
        "id": 252654532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631204762
    },
    {
        "content": "<p>It's always interesting to see how math people and CS people think differently. Of course adding <code>0</code> at the end (or at the beginning) is totally trivial, but if I want a linear map my brain immediately say \"of course you can do it, it is a free module, so just say where the standard basis should go\". And somehow I feel it's better to check that this really just a <code>0</code> somewhere rather than checking that adding a <code>0</code> is linear :)</p>",
        "id": 252655004,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631204958
    },
    {
        "content": "<p>By the way, are you sure it's really what you need? I'm asking because in <a href=\"https://github.com/leanprover-community/mathlib/issues/8898\">#8898</a> I am doing a Gauss pivot-like argument, with an induction on the dimension to reduce a matrix. At first, I tried precisely with an embedding of <code>fin n</code> in <code>fin (n+1)</code> like you're doing, but in the end it was much nicer when using a sum type <code>fin n ⊕ unit</code> (because it avoids all casts, all nat inequalities, and things on the two components are distinguished definitionally by the kernel), and doing a reindexing at the very end of the argument.</p>",
        "id": 252655851,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631205307
    },
    {
        "content": "<p><code>fin.snoc</code> and <code>fin.cons</code> are both really awkward to use because they handle the case of a dependent function. I should finish that <code>finvec</code> PR some day...</p>",
        "id": 252658592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631206446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Standard.20inclusion.20R.5En.20.E2.86.92.20R.5E.7Bn.2B1.7D/near/252655851\">said</a>:</p>\n<blockquote>\n<p>By the way, are you sure it's really what you need? I'm asking because in <a href=\"https://github.com/leanprover-community/mathlib/issues/8898\">#8898</a> I am doing a Gauss pivot-like argument, with an induction on the dimension to reduce a matrix. At first, I tried precisely with an embedding of <code>fin n</code> in <code>fin (n+1)</code> like you're doing, but in the end it was much nicer when using a sum type <code>fin n ⊕ unit</code> (because it avoids all casts, all nat inequalities, and things on the two components are distinguished definitionally by the kernel), and doing a reindexing at the very end of the argument.</p>\n</blockquote>\n<p>I am not sure. I want to prove that a commutative ring satisfies <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strong_rank_condition\">docs#strong_rank_condition</a>. In practice it is enough to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> does not embed in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, and the first step of the proof I want to formalize is to consider the composition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>→</mo><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">R^{n+1} \\to R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> with the inclusion.</p>",
        "id": 252667319,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631210039
    },
    {
        "content": "<p>Maybe I can just prove that the strong rank condition is equivalent to the nonexistence of an injective morphism <code>((fin n ⊕ unit )→ R) → (fin n → R)</code></p>",
        "id": 252667642,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631210166
    },
    {
        "content": "<p>Probably as easily provable for any sum type where the other side isn't trivial</p>",
        "id": 252669600,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631210914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Standard.20inclusion.20R.5En.20.E2.86.92.20R.5E.7Bn.2B1.7D/near/252653721\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Standard.20inclusion.20R.5En.20.E2.86.92.20R.5E.7Bn.2B1.7D/near/252653475\">said</a>:</p>\n<blockquote>\n<p>Then the final step of bundling the map becomes easy</p>\n</blockquote>\n<p>it's not very hard anyways</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">fin.snoc</span> <span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"n\">fin.last_cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"n\">fin.last_cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Do you see an easy way to generalize this to the inclusion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup><mo>→</mo><msup><mi>R</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">R^n \\to R^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&lt;</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n &lt; m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>?</p>",
        "id": 252693848,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631220843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_sum_fin_equiv\">docs#fin_sum_fin_equiv</a> to obtain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>a</mi></msup><mo>→</mo><msup><mi>R</mi><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^a \\to R^{a+b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 252696490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631221844
    },
    {
        "content": "<p>How about defining an R-alg hom R^S -&gt; R^T for every injection S -&gt; T?</p>",
        "id": 252697029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631222043
    },
    {
        "content": "<p>Indeed my question is rather how to do this correctly in mathlib. I see a lot of ways of doing it by hand with different degree of generality. What I need is that the map is injective, linear and the last component of any element of the image is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> (the last component or more generally any component whose index is not in the (image of) the first set).</p>",
        "id": 252697778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631222323
    },
    {
        "content": "<p>I ended up doing it with in some generality in <a href=\"https://github.com/leanprover-community/mathlib/issues/9128\">#9128</a>. Not sure it's the best way...</p>",
        "id": 252805284,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631288187
    }
]