[
    {
        "content": "<p>Is there a clean way to do the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">c</span> <span class=\"bp\">‚â§</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(if there are additional typeclass assumptions needed that's totally fine!). In the case of functions to the reals, I know I can take a ball around c and get the results, but I imagine there's a more mathlib-friendly way of doing this in general</p>",
        "id": 266222615,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640655422
    },
    {
        "content": "<p>Ah, found the first one, it's <code>le_of_tendsto</code> once I have more assumptions on <code>l</code></p>",
        "id": 266222810,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640655714
    },
    {
        "content": "<p>What about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.is_bounded_under_le\">docs#filter.tendsto.is_bounded_under_le</a> for the second one?</p>",
        "id": 266223029,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1640655993
    },
    {
        "content": "<p>Perfect, thank you!</p>",
        "id": 266223197,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640656219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> has marked this topic as resolved.</p>",
        "id": 266223198,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640656222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> has marked this topic as unresolved.</p>",
        "id": 266223617,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640656804
    },
    {
        "content": "<p>Actually I realised my case for the second is a little different, what I actually need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">ennreal.of_real</span> <span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">ennreal.of_real</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266223678,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640656822
    },
    {
        "content": "<p>Perhaps I am meant to go via the filter of sets which are below infty in ennreal?</p>",
        "id": 266223789,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640656969
    },
    {
        "content": "<p>E.g., if you prove that <code>‚àÉ d : real, ennreal.of_real c &lt; ennreal.of_real d</code> (<code>d = max 0 c + 1</code> works; <code>data.real.ennreal</code> can have helper lemmas), then you can use <code>h‚ÇÅ.eventually (gt_mem_nhds hd)</code>.</p>",
        "id": 266224168,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640657461
    },
    {
        "content": "<p>Works great, thank you!</p>",
        "id": 266224446,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640657842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> has marked this topic as resolved.</p>",
        "id": 266224448,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640657844
    }
]