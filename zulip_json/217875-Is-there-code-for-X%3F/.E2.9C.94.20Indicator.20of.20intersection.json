[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inter_indicator_mul\">docs#set.inter_indicator_mul</a> is what I want. Still having trouble with the naming scheme because I would have expected this one to be called something containing <code>indicator_inter</code> as well :-(</p>\n<p>Thanks again!</p>",
        "id": 278407413,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649506806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> has marked this topic as resolved.</p>",
        "id": 278407422,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649506817
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inter_indicator_mul\">docs#set.inter_indicator_mul</a> looks more applied than it needs to be</p>",
        "id": 278408208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649507921
    },
    {
        "content": "<p>Agreed, this proof that I needed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.indicator_inter_one</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indicator</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.indicator</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">t.indicator</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">set.inter_indicator_mul</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>should not need to go through <code>ext</code>, is that what you mean?</p>",
        "id": 278408307,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649508102
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 278412870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649514810
    }
]