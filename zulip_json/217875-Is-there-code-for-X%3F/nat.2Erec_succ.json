[
    {
        "content": "<p>Is this builtin to mathlib or lean somewhere?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">rec_succ</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">zero_f</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">succ_f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">C</span> <span class=\"n\">zero_f</span> <span class=\"n\">succ_f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ_f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">C</span> <span class=\"n\">zero_f</span> <span class=\"n\">succ_f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>In general, it seems like if I have an inductive <code>rec</code> operating on a object of a known constuctor, I should be able to unfold it one level.</p>",
        "id": 209647356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599746723
    },
    {
        "content": "<p>( I needed this for a proof about a deliberately awkward def in <a href=\"#narrow/stream/113489-new-members/topic/recursive.20let.20in/near/209644962\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/recursive.20let.20in/near/209644962</a>)</p>",
        "id": 209647619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599746805
    },
    {
        "content": "<p>This is the L rule for some Greek letter L</p>",
        "id": 209648514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599747109
    },
    {
        "content": "<p><code>dsimp</code> should apply it for example</p>",
        "id": 209649024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599747148
    },
    {
        "content": "<p>Ahh, there's a hidden <code>nat.add_one</code> that I also needed</p>",
        "id": 209652191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599747716
    }
]