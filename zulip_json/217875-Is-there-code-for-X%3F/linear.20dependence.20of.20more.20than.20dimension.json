[
    {
        "content": "<p>If I have k vectors in a vector space with dimension &lt;k, they're linearly dependent - what's the closest thing in mathlib to this?</p>",
        "id": 199646286,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591203485
    },
    {
        "content": "<p>What kind of statement would you like?</p>",
        "id": 199646483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591203583
    },
    {
        "content": "<p>Some sort of <code>lc</code> that is nonzero, but whose sum evaluates to <code>0</code>, via <code>lc.total</code>?</p>",
        "id": 199646576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591203611
    },
    {
        "content": "<p>I haven't touched this part of the library since the refactor last year... so maybe everything is different now.</p>",
        "id": 199646613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591203635
    },
    {
        "content": "<p>I think <code>lc</code> is maybe gone, but there is now <code>finsupp.total</code>?</p>",
        "id": 199646672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591203664
    },
    {
        "content": "<p>I'd be happy with that, <code>¬ linear_independent R v</code> would be fine too</p>",
        "id": 199646755,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591203713
    },
    {
        "content": "<p>I think this would work <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp.html#finsupp.total\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp.html#finsupp.total</a></p>",
        "id": 199648295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591204411
    },
    {
        "content": "<p>I don't see how to relate this to the dimension though</p>",
        "id": 199648523,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591204525
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/basis.html#exists_subset_is_basis\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/basis.html#exists_subset_is_basis</a></p>",
        "id": 199648530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591204529
    },
    {
        "content": "<p>If your family is lin.indep, use <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> to extend it to a basis</p>",
        "id": 199648562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591204548
    },
    {
        "content": "<p>After that, use the def of dimension to get a contradiction</p>",
        "id": 199648594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591204561
    },
    {
        "content": "<p>Ah I see, thanks</p>",
        "id": 199648690,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591204590
    },
    {
        "content": "<p>Are you using <code>[finite_dimensional K V]</code>?</p>",
        "id": 199648725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591204603
    },
    {
        "content": "<p>Or do you want to prove it using cardinals and infinite dimensional spaces?</p>",
        "id": 199648830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591204656
    },
    {
        "content": "<p><code>is_basis.le_span</code> looks okay.</p>",
        "id": 199648859,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591204672
    },
    {
        "content": "<p>I'm in a finite dimensional space</p>",
        "id": 199648959,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591204708
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis.le_span\">docs#is_basis.le_span</a></p>",
        "id": 199649016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591204737
    },
    {
        "content": "<p>That looks harder than using the definition of dimension I think... (to me at least, before trying)</p>",
        "id": 199649247,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591204846
    },
    {
        "content": "<p>But there's actually a non trivial theorem here right? You need the fact that two bases have the same cardinality.</p>",
        "id": 199649711,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591205120
    },
    {
        "content": "<p>I don't think so, my new basis that Johan suggests to construct is bigger than the dimension, which contradicts the definition of dimension directly</p>",
        "id": 199649803,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591205171
    },
    {
        "content": "<p>The dimension is the cardinality of the smallest basis, so having one bigger isn't obviously a contradiction.</p>",
        "id": 199650052,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591205301
    },
    {
        "content": "<p>I would be inclined to use <code>dim_le_injective</code> plus something</p>",
        "id": 199650166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591205357
    },
    {
        "content": "<p>I think it probably needs to be made into a lemma</p>",
        "id": 199650369,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591205432
    },
    {
        "content": "<p><code>linear_independent</code> is already basically saying that the associated linear map is injective</p>",
        "id": 199650407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591205447
    },
    {
        "content": "<p>but maybe the API isn't quite in place for this</p>",
        "id": 199650423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591205452
    },
    {
        "content": "<p>Anyways yeah, there should be a lemma like <code>dim_span</code> with an inequality in the conclusion</p>",
        "id": 199650613,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591205535
    },
    {
        "content": "<p>What's with <code>dim_span</code> anyways? Shouldn't it be a statement about <code>cardinal.mk ι</code>?</p>",
        "id": 199650646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591205555
    },
    {
        "content": "<p>I know they're the same, but if we went to the effort to use a family then it seems like we should talk about the cardinality of the family (i.e. the indexing set) and not the image of the family, right?</p>",
        "id": 199650780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591205622
    },
    {
        "content": "<p>I think the refactor into families was pretty painful</p>",
        "id": 199650899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591205662
    },
    {
        "content": "<p>So in some places they might have chosen to avoid extra refactor</p>",
        "id": 199650942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591205683
    },
    {
        "content": "<p>What we need is <code>linear_independent.le_dim</code></p>",
        "id": 199650991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591205703
    },
    {
        "content": "<p>Where is <code>dim_span</code>?</p>",
        "id": 199651064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591205748
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/dimension.html#dim_span\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/dimension.html#dim_span</a></p>",
        "id": 199651075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591205758
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 199651146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591205776
    },
    {
        "content": "<p><code>dim_finsupp</code> (or better, <code>dim_free</code> once we have that language) also looks like a missing lemma</p>",
        "id": 199651923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591206163
    },
    {
        "content": "<p>oh maybe it's hiding elsewhere</p>",
        "id": 199651989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591206195
    },
    {
        "content": "<p>Interesting that <code>noncomputable</code> doesn't show up in the docs</p>",
        "id": 199652109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591206246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/linear.20dependence.20of.20more.20than.20dimension/near/199652109\">said</a>:</p>\n<blockquote>\n<p>Interesting that <code>noncomputable</code> doesn't show up in the docs</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> </p>\n<p>We could typeset all the declarations that don't have the <code>noncomputable</code> tag in some faded gray... [/jk]</p>",
        "id": 199653985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591207119
    },
    {
        "content": "<p>I vote for yellow-black danger stripes, these are surprisingly easy to do in CSS:<br>\n<a href=\"/user_uploads/3121/VEsBw9cKhjE164hCWw5bOrqH/noncomputable_bg.png\">noncomputable_bg.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VEsBw9cKhjE164hCWw5bOrqH/noncomputable_bg.png\" title=\"noncomputable_bg.png\"><img src=\"/user_uploads/3121/VEsBw9cKhjE164hCWw5bOrqH/noncomputable_bg.png\"></a></div>",
        "id": 199655229,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591207589
    },
    {
        "content": "<p>Upon reflection it's not quite <code>noncomputable</code> that I care about, but rather \"naked <code>choice</code>\"</p>",
        "id": 199655292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591207621
    },
    {
        "content": "<p>or arguably other bad things like equality at <code>Type</code>, though that's even harder to detect</p>",
        "id": 199655316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591207633
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp_vector_space.html#equiv_of_dim_eq_dim\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/finsupp_vector_space.html#equiv_of_dim_eq_dim</a> was the declaration that jumped out at me as odd</p>",
        "id": 199655333,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591207646
    },
    {
        "content": "<p>Similar to Bhavik's question, what's the proper way to state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo>∈</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>d</mi></msup><mo separator=\"true\">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>N</mi><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i \\in \\mathbb{R}^d, i = 1, \\ldots, N, v_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> linearly dependent?</p>",
        "id": 208878607,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599076461
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">V</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">lin_dep</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 208879138,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599076743
    },
    {
        "content": "<p>Like so?</p>",
        "id": 208879173,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599076753
    },
    {
        "content": "<p>That seems to be the canonical way, also used in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_dependent_iff\">docs#linear_dependent_iff</a></p>",
        "id": 208946269,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599128371
    }
]