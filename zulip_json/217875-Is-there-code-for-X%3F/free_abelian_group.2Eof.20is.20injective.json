[
    {
        "content": "<p>This strikes me as an obviously true statement, but it seems difficult to prove.</p>\n<p><code>free_abelian_group.of x</code> is defined as <code>abelianization.of $ free_group.of x</code>, where we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.of.inj\">docs#free_group.of.inj</a>.</p>\n<p>Obviously <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abelianization.of\">docs#abelianization.of</a> is not injective, but it should be injective on the range of <code>free_group.of</code>, right?</p>",
        "id": 217128283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605702739
    },
    {
        "content": "<p>Yes</p>",
        "id": 217128487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605702886
    },
    {
        "content": "<p>The image is a basis as a Z-module. If this fact is in mathlib, you can use that to prove injectivity</p>",
        "id": 217128535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605702924
    },
    {
        "content": "<p>The image of <code>abelianization.of</code> or of <code>free_group.of</code>? (or both?)</p>",
        "id": 217128631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605702969
    },
    {
        "content": "<p>The free <em>abelian</em> group</p>",
        "id": 217128657,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605702989
    },
    {
        "content": "<p>(which happens to be the abelianization of the free group)</p>",
        "id": 217128676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605703007
    },
    {
        "content": "<p>So the map from X to the free abelian group generated by X is injective</p>",
        "id": 217128699,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605703025
    },
    {
        "content": "<p>The abelianization map from a group to its abelianization is almost never injective</p>",
        "id": 217128733,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605703067
    },
    {
        "content": "<p>If \"The image is a basis as a Z-module\" is in mathlib, it's hiding in another file somewhere</p>",
        "id": 217128804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605703120
    },
    {
        "content": "<p>(it's injective if and only if your original group was already abelian <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 217128805,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605703121
    },
    {
        "content": "<p>You can still use it though, using the universal prop of the free abelian geoup</p>",
        "id": 217128842,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605703152
    },
    {
        "content": "<p>I.e. take the free Z-module on X, say M, which comes with an injective map f : X -&gt; M. Now lift f to a map from the free abelian group on X, say F, to a map of abelian groups F -&gt; M. The universal prop says that the composition with g : X -&gt; F is just f, which in injective, so g must be injective too</p>",
        "id": 217129162,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605703390
    },
    {
        "content": "<p>(sorry for the bad typesetting, I'm on mobile)</p>",
        "id": 217129179,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605703409
    },
    {
        "content": "<p>I think your closing injectiveness argument may be missing from mathlib too - is it this one? <a href=\"https://github.com/leanprover-community/mathlib/compare/flat-module#diff-0dc822e485488f721fc8ef8bd0401825688b5e8b6e30d48decc73024f66e472cR37-R56\">https://github.com/leanprover-community/mathlib/compare/flat-module#diff-0dc822e485488f721fc8ef8bd0401825688b5e8b6e30d48decc73024f66e472cR37-R56</a></p>\n<p><code>(f : α → β) (e : β ≃ γ) : function.injective (e ∘ f) ↔ function.injective f</code></p>",
        "id": 217129635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605703712
    },
    {
        "content": "<p>I'm just saying that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f \\circ g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is injective then so is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>. Is this not mathlib?!</p>",
        "id": 217130218,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605704051
    },
    {
        "content": "<p>That one is</p>",
        "id": 217130274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605704095
    },
    {
        "content": "<p>That statement isn't true?</p>",
        "id": 217130732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605704365
    },
    {
        "content": "<p>g needs to be only injective over the range of <code>f</code></p>",
        "id": 217130760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605704385
    },
    {
        "content": "<p>You're reading it backwards</p>",
        "id": 217130779,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605704400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> you're turning into a true category theorist! (who never remember the order of function composition)</p>",
        "id": 217131038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605704521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/free_abelian_group.2Eof.20is.20injective/near/217130274\">said</a>:</p>\n<blockquote>\n<p>That one is</p>\n</blockquote>\n<p>Found it, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.of_comp\">docs#function.injective.of_comp</a></p>",
        "id": 217131220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605704609
    },
    {
        "content": "<p>Don't worry though, it gets much worse when you start thinking about concatenation of paths when defining fundamental groups, and how to reconcile that with monodromy actions</p>",
        "id": 217131223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605704612
    },
    {
        "content": "<p>In Freitag-Kiehl, the appendix on the fundamental group, covering groups always act on the right. I was initially surprised by this convention but things work out great with it.</p>",
        "id": 217131650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605704882
    },
    {
        "content": "<p>I think if you always define fundamental groups as automorphism groups of fibre/fiber functors, you will never get confused <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 217131787,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605704947
    },
    {
        "content": "<p>In mathlib, however... we don't have right actions</p>",
        "id": 217131788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605704947
    }
]