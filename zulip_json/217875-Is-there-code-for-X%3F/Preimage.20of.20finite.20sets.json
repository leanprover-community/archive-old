[
    {
        "content": "<p>Hi everyone. I'm looking for the statement that the preimage under an <em>injective map</em> of a finite subset is finite, using <code>finset</code>. So, approximately something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"err\">↑</span><span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Does mathlib have anything close to this?</p>",
        "id": 199987783,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591468845
    },
    {
        "content": "<p>There is indeed no mention of <code>comap</code> in <code>finset.lean</code>.</p>",
        "id": 199989322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591471307
    },
    {
        "content": "<p><code>finset.lean</code> has <code>map</code> and <code>image</code> but no <code>comap</code>. This would be a neat little PR unless I have completely missed something.</p>",
        "id": 199989434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591471445
    },
    {
        "content": "<p><code>finset.lean</code> must have been written by a <a href=\"https://github.com/leanprover-community/mathlib/blob/e48c2af4f2f92c2331a912c588610db73085939d/src/data/finset.lean#L4\">bunch of amateurs</a></p>",
        "id": 199989464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591471529
    },
    {
        "content": "<p>Oh golly there is not even <code>multiset.comap</code></p>",
        "id": 199989601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591471746
    },
    {
        "content": "<p>Yeah this is all a bit crazy. <code>finset.map</code> is defined only for embeddings, when it could be defined in general; <code>finset.comap</code>, which does need embeddings, is missing. <code>multiset.map</code> is correctly defined for all maps. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  if it was decided that <code>finset.map</code> was worth writing over 20 lemmas for in the special case where the map was an embedding, would the same apply for <code>multiset.comap</code> and <code>finset.comap</code>?</p>",
        "id": 199989750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591471991
    },
    {
        "content": "<p>Does something like this exist?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- WRONG</span>\n</code></pre></div>\n\n\n<p>Presumably this would be enough...</p>",
        "id": 199989757,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591472020
    },
    {
        "content": "<p>That's not true unless f is surjective</p>",
        "id": 199989800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591472044
    },
    {
        "content": "<p>Kevin, are you missing <a href=\"https://github.com/leanprover-community/mathlib/blob/e48c2af4f2f92c2331a912c588610db73085939d/src/data/finset.lean#L1225\">https://github.com/leanprover-community/mathlib/blob/e48c2af4f2f92c2331a912c588610db73085939d/src/data/finset.lean#L1225</a>?</p>",
        "id": 199989803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591472053
    },
    {
        "content": "<p>Oh ovbiously... I should take an intersection with the image (and I don't know how to do that...)</p>",
        "id": 199989808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591472074
    },
    {
        "content": "<p>We're going the other way Patrick (I think)</p>",
        "id": 199989809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591472089
    },
    {
        "content": "<p>Aah but I see what you're saying. That's a <code>map</code> with no injectivity assumption</p>",
        "id": 199989830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591472147
    },
    {
        "content": "<p>Just to be clear Adam, the issue is not how to define the function, the issue is whether it is already in mathlib</p>",
        "id": 199989875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591472188
    },
    {
        "content": "<p>Yeah I know... I've just haven't used finsets before so it is an issue for me :)</p>",
        "id": 199989887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591472224
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.preimage\">docs#finset.preimage</a></p>",
        "id": 199989892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591472253
    },
    {
        "content": "<p>So it is there, but in <code>set.finite</code>, and it's called <code>preimage</code> not <code>comap</code>.</p>",
        "id": 199989954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591472352
    },
    {
        "content": "<p>While we're here, is there something like this? (which should have been what I wrote above):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"err\">↑</span><span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 199990225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591472787
    },
    {
        "content": "<p>This you'll need the axiom of choice for.</p>",
        "id": 199990350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591473023
    },
    {
        "content": "<p>I'm happy with that...</p>",
        "id": 199990356,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591473035
    },
    {
        "content": "<p>Oh -- you can do better than <code>f '' set.univ</code> -- we have <code>image f</code>.</p>",
        "id": 199990369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591473092
    },
    {
        "content": "<p>Which namespace is that in?</p>",
        "id": 199990418,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591473135
    },
    {
        "content": "<p>Or am I missing some import?</p>",
        "id": 199990424,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591473165
    },
    {
        "content": "<p>oh sorry! It's called <code>range f</code></p>",
        "id": 199990482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591473247
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.range\">docs#set.range</a></p>",
        "id": 199990495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591473282
    },
    {
        "content": "<p>Thanks! I updated the code.</p>",
        "id": 199990506,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591473309
    },
    {
        "content": "<p>It's easier to use because you don't have to prove that <code>x \\in univ</code>.</p>",
        "id": 199990511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591473321
    },
    {
        "content": "<p>It wouldn't surprise me if this is not in the library, and my idea for how to do it is kind of a horrible mess.</p>",
        "id": 199990570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591473378
    },
    {
        "content": "<p>It's not slick, and I don't know enough of the library to quickly fill in the sorry's, but here is a sketch -- is this what you had in mind?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"err\">↑</span><span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">F</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">U</span> <span class=\"n\">ha</span> <span class=\"n\">ind</span> <span class=\"n\">sur</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- from sur</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- from sur</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ind</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">G</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">insert</span> <span class=\"n\">s</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_insert</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199991091,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591474122
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sur</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]},</span>\n</code></pre></div>",
        "id": 199991359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591474590
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">sur</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 199991428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591474722
    },
    {
        "content": "<p>I don't know whether this <code>apply sur</code> is mathlib-approved, but <code>X \\sub Y</code> is sugar for <code>forall a, a \\in X -&gt; a \\in Y</code> so you can just <code>apply sur</code>  like a function</p>",
        "id": 199991439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591474776
    },
    {
        "content": "<p>You beat me to it :)<br>\nI got this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"err\">↑</span><span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">F</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">U</span> <span class=\"n\">ha</span> <span class=\"n\">ind</span> <span class=\"n\">sur</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sur</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span>  <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">sur</span> <span class=\"n\">a</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ind</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">G</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">insert</span> <span class=\"n\">s</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_insert</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199991443,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591474788
    }
]