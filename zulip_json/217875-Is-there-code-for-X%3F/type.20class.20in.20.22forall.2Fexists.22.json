[
    {
        "content": "<p>Why is Lean unable to infer <code>add_comm_monoid M</code> for <code>module R M</code> in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">],</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 242079675,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623250902
    },
    {
        "content": "<p>In the same vein, how can I say \"there exists some type M with a module structure over R such that...\"?</p>",
        "id": 242079821,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623250952
    },
    {
        "content": "<p>Oops might've been the wrong stream. My apologies</p>",
        "id": 242080100,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251056
    },
    {
        "content": "<p>Class inference is  used to have <code>[monoid M]</code> when you already have <code>[group M]</code>, or similarly. What you are saying looks a little weird mathematically. What are trying to do?</p>",
        "id": 242080176,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623251085
    },
    {
        "content": "<p>Is your question: every module is an additive monoid, why can't Lean figure this out?</p>",
        "id": 242080331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251159
    },
    {
        "content": "<p>If you want to prove your proposition (why it is a <code>def</code>?), you can say <code>use R</code>. Then the goals are solved by <code>apply_instance</code>.</p>",
        "id": 242080407,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623251176
    },
    {
        "content": "<p>The problem is, some things are modules over several rings. But they should be an additive monoid in a unique way, otherwise Lean gets confused.</p>",
        "id": 242080454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251201
    },
    {
        "content": "<p>So that's why we write <code>[add_comm_monoid M] [module R M]</code> (and <code>[module R M]</code> doesn't work if Lean can't find <code>add_comm_monoid M</code>)</p>",
        "id": 242080542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251241
    },
    {
        "content": "<p>I'll clarify my confusion</p>",
        "id": 242080717,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251294
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test2</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>(Suppose I'm just trying to define some predicate on R and M)</p>",
        "id": 242080866,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251352
    },
    {
        "content": "<p>Lean is able to infer <code>add_comm_monoid M</code> before it infers <code>module R M</code></p>",
        "id": 242080936,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251381
    },
    {
        "content": "<p>But in the <code>test</code> above, when <code>(M : Type _) [add_comm_monoid M] [module R M]</code> are in the body of the definition behind an <code>exists</code>, Lean is no longer inferring <code>add_comm_monoid M</code> for the purpose of <code>module R M</code></p>",
        "id": 242081102,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251437
    },
    {
        "content": "<p>What are you trying to say mathematically?</p>",
        "id": 242081185,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1623251475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> ok, I see. Write <code>by exactI</code> before <code>[module R M]</code></p>",
        "id": 242081269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251515
    },
    {
        "content": "<p>The problem is that Lean at certain points freezes the type class instance cache for performance reasons.</p>",
        "id": 242081392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251559
    },
    {
        "content": "<p>And <code>[add_comm_monoid M]</code> is not in the cache when <code>[module R M]</code> needs it.</p>",
        "id": 242081449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251580
    },
    {
        "content": "<p>I think the cache gets frozen after the <code>:</code>. So with existential statements, you need to reset the cache manually. You can do this using <code>by exactI</code>.</p>",
        "id": 242081543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251620
    },
    {
        "content": "<p>What I'm actually trying to do: define the notion of the decomposability of a group representation, so that if a vector space V is a representation (of a group, over a field, etc), it is decomposable if there exist V1 and V2 with <code>V = V1 \\oplus V2</code></p>",
        "id": 242081578,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251635
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 242081616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/type.20class.20in.20.22forall.2Fexists.22/near/242081578\">said</a>:</p>\n<blockquote>\n<p>What I'm actually trying to do: define the notion of the decomposability of a group representation, so that if a vector space V is a representation (of a group, over a field, etc), it is decomposable if there exist V1 and V2 with <code>V = V1 \\oplus V2</code></p>\n</blockquote>\n<p>I would use <code>V1 V2 : subrepresentation V</code> for that, I think.</p>",
        "id": 242081760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251694
    },
    {
        "content": "<p>Let me try <code>exactI</code></p>",
        "id": 242081761,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251694
    },
    {
        "content": "<p>For the definition I would use subreps. But then add a lemma that if <code>V = V1 \\oplus V2</code> for random nontrivial reps V1 and V2, then of course <code>V</code> is decomposable.</p>",
        "id": 242081874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251742
    },
    {
        "content": "<p>Using subreps in the definition saves you all the trouble of <code>\\exists (a type) [that is a monoid], by exactI [and a module]</code></p>",
        "id": 242081979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251780
    },
    {
        "content": "<p>Sorry, I wrote <code>true</code> earlier to simplify things. But I meant to write some Prop that depends on M itself</p>",
        "id": 242081993,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251786
    },
    {
        "content": "<p>So write <code>by exactI \\exist [module R M], blabla</code></p>",
        "id": 242082049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623251811
    },
    {
        "content": "<p>I'll try to rephrase in terms of subreps</p>",
        "id": 242082114,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623251836
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/type.20class.20in.20.22forall.2Fexists.22\">#general &gt; type class in \"forall/exists\"</a></p>",
        "id": 242175801,
        "sender_full_name": "Notification Bot",
        "timestamp": 1623314764
    }
]