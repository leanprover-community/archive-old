[
    {
        "content": "<p>Do we have anything like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_nonneg_iff_forall_nonneg</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">xi</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">pi.single</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_eq_single_of_mem</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"n\">hji</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">pi.single_eq_same</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.single_eq_of_ne</span> <span class=\"n\">hji</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finset.sum_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Maybe for <code>dfinsupp</code> or <code>finsupp</code> if not for <code>pi</code>?</p>",
        "id": 265746582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640128703
    },
    {
        "content": "<p>what is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_nonneg\">docs#finset.sum_nonneg</a>?</p>",
        "id": 265766700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640149433
    },
    {
        "content": "<p>ah right, that gives you only one direction</p>",
        "id": 265766755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640149463
    },
    {
        "content": "<p>I don't think we have this result</p>",
        "id": 265766793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640149528
    },
    {
        "content": "<p>Can you think of a good name for it?  The quantification over the pi type isn't something I've seen much of, and I don't know how to name that part</p>",
        "id": 265787194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640167930
    }
]