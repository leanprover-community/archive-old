[
    {
        "content": "<p>Let <code>i : { x : ℕ // ∃ (h : p x), q x }</code> for some propositions <code>p</code> and <code>q</code> over <code>ℕ</code>.<br>\nIs there a way to extract an instance <code>i' : { x : ℕ // p x }</code> from this (allowing <code>classical</code>)?<br>\nOr else, is there a nice way of getting to <code>i'</code> starting with just <code>∃ (h : p x), q x</code>?</p>",
        "id": 221132252,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609246749
    },
    {
        "content": "<p>Your second question is missing the binder that introduces <code>x</code></p>",
        "id": 221132977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609247491
    },
    {
        "content": "<p>But I think the answer to the first is simply <code>let \\&lt;i', hi'\\&gt; := i in \\&lt;i', let \\&lt;hp, hq\\&gt; := hi' in hp\\&gt;</code></p>",
        "id": 221133138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609247635
    },
    {
        "content": "<p>You have to destructure the two parts separately, rather than using <code>let \\&lt;i', hp, hq\\&gt; := i</code> which will give an error about elimination not being into prop</p>",
        "id": 221133253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609247721
    },
    {
        "content": "<p>(<code>\\&lt;</code> is the vs-code input shortcut)</p>",
        "id": 221133325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609247765
    },
    {
        "content": "<p>I think, <code>⟨i, i.2.snd⟩</code> should work.</p>",
        "id": 221472559,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609710091
    }
]