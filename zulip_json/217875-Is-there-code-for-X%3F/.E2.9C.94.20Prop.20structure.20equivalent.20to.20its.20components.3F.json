[
    {
        "content": "<p>I have a <code>structure</code> that is actually just a <code>Prop</code>,  just done to have dot notation for named properties. Basically</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_prop</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>p q : Prop</code>. Is there a built-in rewrite lemma <code>my_prop ↔ p ∧ q</code>? The proof is trivial, just <code>split;  exact λ h, ⟨h.1, h.2⟩</code> works in this case, but I couldn't figure out if there is an idiomatic way to do this. This came up because I was running into typeclass inference problems, in particular the system could infer <code>decidable p</code> and <code>decidable p</code> but couldn't infer <code>decidable my_prop</code>. Maybe having a <code>Prop</code> structure is a bad idea?</p>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- long statement</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- long statement</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- infer_instance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- infer_instance</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">my_prop</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">my_prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">my_prop</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n     <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"c1\">-- is this the right way to do this?</span>\n</code></pre></div>",
        "id": 294588061,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1661121849
    },
    {
        "content": "<p>Tag your structure with <code>@[mk_iff]</code></p>",
        "id": 294588073,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661121881
    },
    {
        "content": "<p>Also, the correct way to transfer decidability afterwards is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_of_iff\">docs#decidable_of_iff</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_of_iff'\">docs#decidable_of_iff'</a>. You explicitly <strong>should not</strong> rewrite.</p>",
        "id": 294588111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661121951
    },
    {
        "content": "<p>Hmm, what is the actual proof then? Does <code>@[mk_iff]</code> create an additional lemma?</p>",
        "id": 294588201,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1661122056
    },
    {
        "content": "<p>I can't find any additional lemma, is what I am trying to tell you</p>",
        "id": 294588251,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1661122114
    },
    {
        "content": "<p><code>my_prop_iff</code> is the lemma.</p>",
        "id": 294588255,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661122139
    },
    {
        "content": "<p>Perfect. Thanks!</p>",
        "id": 294588365,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1661122281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> has marked this topic as resolved.</p>",
        "id": 294588376,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661122303
    }
]