[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cont_of_cau_is_cau</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xn</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_cau_seq</span> <span class=\"n\">abs</span> <span class=\"n\">xn</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">is_cau_seq</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">xn</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mapply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xn</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">abs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">abs</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">xn</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">xn_val</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">cont_of_cau_is_cau</span><span class=\"o\">,</span>\n<span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cont_lim_eq_lim_cont</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xn</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">abs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">lim</span> <span class=\"err\">$</span> <span class=\"n\">mapply</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">xn</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">lim</span> <span class=\"n\">xn</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 194529418,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587191868
    },
    {
        "content": "<p>You should use <code>filter.tendsto</code> if possible.</p>",
        "id": 194531527,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587195836
    },
    {
        "content": "<p>Most lemmas about continuity etc. are written in terms of <code>tendsto</code>, <code>filter.cauchy</code> etc</p>",
        "id": 194531571,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587195870
    },
    {
        "content": "<p><code>cau_seq</code> is an \"implementation detail\" of the current definition of real numbers. IMO using it in <code>complex.exponential</code> is an unfortunate leak of the internal API.</p>",
        "id": 194531629,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587195981
    },
    {
        "content": "<p>It would be nice to redefine <code>exp</code>, <code>sin</code>, <code>cos</code> for any normed banach algebra instead.</p>",
        "id": 194531645,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587196028
    },
    {
        "content": "<p>If you use <code>filter.tendsto</code>, then there is a <code>continuous.tendsto</code> and <code>tendsto.comp</code>.</p>",
        "id": 194531653,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587196077
    },
    {
        "content": "<p>Let me expand Yury's answer a bit. As he wrote, <code>cau_seq</code> and <code>is_cau_seq</code> are not meant for end-users, they are intermediate notions used to build the topology on real and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span>-adic  numbers. But of course, once you have a metric space (or more generally a uniform space) we do have Cauchy sequences in them, the predicate is named <code>cauchy_seq</code>. In order to get you started I proved your first lemma, but this is almost certainly not what you really wanted (here I mean in maths, nothing to do with Lean). For instance the statement suggested by the name is not at all what your Leaned. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cont_of_cau_is_cau</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xn</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">xn</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚àò</span> <span class=\"n\">xn</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">limx</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">xn</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">cauchy_seq_tendsto_of_complete</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚àò</span> <span class=\"n\">xn</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n    <span class=\"k\">from</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span> <span class=\"n\">limx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cauchy_seq_of_tendsto_nhds</span> <span class=\"bp\">_</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194535023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587201705
    },
    {
        "content": "<p>If you are afraid of filters, you can define the notation <code>local notation f ` ‚ü∂ ` limit := tendsto f at_top (ùìù limit)</code> that you'll find in a couple of files in mathlib (written by people before they started loving filters)</p>",
        "id": 194535072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587201779
    },
    {
        "content": "<p>We have something similar as a <code>localized</code> notation in locale <code>filter</code> (!) defined in <code>normed_space/basic</code>.</p>",
        "id": 194568014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587250813
    },
    {
        "content": "<p>But it uses <code>nhds</code> for both filters.</p>",
        "id": 194568018,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587250838
    },
    {
        "content": "<p>And we have <code>local notation</code> for limits <code>at_top</code> in <code>topology/sequences</code></p>",
        "id": 194568115,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587250995
    },
    {
        "content": "<blockquote>\n<p>but this is almost certainly not what you really wanted (here I mean in maths, nothing to do with Lean). For instance the statement suggested by the name is not at all what your Leaned.<br>\nHmm I'm not sure I understand why. </p>\n</blockquote>\n<p>I'll try writing a different definition for exp. If I can prove the theorems I want about it (right now i'm looking for x &lt; exp x), I'll then tackle the question of proving it equal to the old one .</p>",
        "id": 194575280,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587264325
    },
    {
        "content": "<p>How are you going to define <code>exp</code>?</p>",
        "id": 194613276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587323494
    },
    {
        "content": "<p>For the normed Banach algebra definition, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>&lt;</mo><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding=\"application/x-tex\">x&lt;e^x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span> doesn't make sense because there will be no ordering on the elements (for example the complexes is a normed Banach algebra). In Lean we have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">add_one_le_exp_of_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"n\">x</span>\n<span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exp_pos</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 194613875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587324289
    },
    {
        "content": "<p>There's a freebie PR out there -- <code>x + 1 ‚â§ real.exp x</code> is true for all real numbers, not just non-negative ones.</p>",
        "id": 194613894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587324339
    }
]