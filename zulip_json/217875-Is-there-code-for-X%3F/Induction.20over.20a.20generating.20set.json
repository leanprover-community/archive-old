[
    {
        "content": "<p>If I have can show that <code>sx</code> is a generating set of a monoid <code>X</code>, is there an induction principle that can take something like <code>∀ x ∈ sx, p x</code>, <code>p 1</code>, and <code>∀ x y, p x → p y → p (x * y)</code> to  produce <code>∀ x, p x</code>? (and the same for algebras, rings, etc...)</p>",
        "id": 211744898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601464543
    },
    {
        "content": "<p>I ended up building one myself for a special case in <a href=\"https://github.com/leanprover-community/mathlib/issues/4335\">#4335</a>, but the approach strikes me as obviously generalizable, and therefore likely to already exist.</p>",
        "id": 211745160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601464691
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.dense_induction\">docs#submonoid.dense_induction</a></p>",
        "id": 211749856,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601467854
    },
    {
        "content": "<p>I don't think using \"dense\" is a good idea here. I think \"generating\" would be clearer.</p>",
        "id": 211760252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601473193
    },
    {
        "content": "<p>Is there an equivalent for subrings and subalgebras?</p>",
        "id": 211761417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601473660
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.closure_induction\">docs#subring.closure_induction</a></p>",
        "id": 211761716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601473802
    },
    {
        "content": "<p>Also, the assumption is a little bit too strong, in <code>∀ (x y : M), p x → p y → p (x * y)</code> one could also require that <code>x</code> belongs to <code>s</code>.</p>",
        "id": 211761889,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1601473865
    },
    {
        "content": "<p><del>Should <code>dense_induction</code> be renamed to <code>closure_induction</code> to match?</del></p>",
        "id": 211762493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601474139
    },
    {
        "content": "<p>Nevermind, I see that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.closure_induction\">docs#submonoid.closure_induction</a> already exists</p>",
        "id": 211763487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601474232
    }
]