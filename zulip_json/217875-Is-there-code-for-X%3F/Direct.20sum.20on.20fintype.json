[
    {
        "content": "<p>We have constructions <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.equiv_fun_on_fintype\">docs#finsupp.equiv_fun_on_fintype</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.linear_equiv_fun_on_fintype\">docs#finsupp.linear_equiv_fun_on_fintype</a>, etc, giving an equivalence, for <code>[fintype ι]</code>, of <code>ι → F</code> with its finitely-supported subtype.</p>\n<p>I couldn't find the equivalence for the more general situation of a varying family <code>Π i, E i</code>.  Is it indeed missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.module</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.linear_equiv_fun_on_fintype</span> <span class=\"n\">R</span> <span class=\"n\">F</span> <span class=\"n\">ι</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 257001744,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633917399
    },
    {
        "content": "<p><code>git grep fintype</code> in <code>algebra/direct_sum</code> gives no results.</p>",
        "id": 257004152,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633919928
    },
    {
        "content": "<p>So, you'll have to define it yourself.</p>",
        "id": 257004187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633919980
    },
    {
        "content": "<p>It should probably be defined for <code>dfinsupp</code> too / instead</p>",
        "id": 257034447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633943215
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9664\">#9664</a></p>",
        "id": 257096160,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633974216
    }
]