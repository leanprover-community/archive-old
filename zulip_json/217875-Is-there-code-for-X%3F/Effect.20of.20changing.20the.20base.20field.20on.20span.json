[
    {
        "content": "<p>Is there anything in mathlib saying something like the following? If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>⊂</mo><msup><mi>R</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R \\subset R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are rings, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> module and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> generates <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> module then it also generates <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> module.</p>",
        "id": 206169584,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596733849
    },
    {
        "content": "<p>Do you want R' to be an R-algebra or do you want R to be a subring of R'? Do you want to not be asked that question :-/</p>",
        "id": 206204452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596752914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Effect.20of.20changing.20the.20base.20field.20on.20span/near/206204452\">said</a>:</p>\n<blockquote>\n<p>Do you want R' to be an R-algebra or do you want R to be a subring of R'? Do you want to not be asked that question :-/</p>\n</blockquote>\n<p>Either way might be okay.</p>",
        "id": 206205083,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596753379
    },
    {
        "content": "<p>Again, we need to generalize <code>is_algebra_tower</code> to <code>is_scalar_tower</code></p>",
        "id": 206211205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596758061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> What do you think about this? Maybe we should work on this? We need something like it to prove the primitive element theorem I think (and probably for other stuff we'll want to do).</p>",
        "id": 206217013,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596764765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Effect.20of.20changing.20the.20base.20field.20on.20span/near/206211205\">said</a>:</p>\n<blockquote>\n<p>Again, we need to generalize <code>is_algebra_tower</code> to <code>is_scalar_tower</code></p>\n</blockquote>\n<p>Thanks! That's helpful to know.</p>",
        "id": 206217022,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596764801
    },
    {
        "content": "<p>Actually, if I understand <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/pull.20back.20an.20R.20module.20along.20.60S.20-.3E.2B*.20R.60\">this thread</a>, this is already being worked on? Is that correct?</p>",
        "id": 206217116,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596764948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Effect.20of.20changing.20the.20base.20field.20on.20span/near/206217013\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> What do you think about this? Maybe we should work on this? We need something like it to prove the primitive element theorem I think (and probably for other stuff we'll want to do).</p>\n</blockquote>\n<p>It doesn't sound too hard to bash this directly, but I could be wrong. If you can isolate the result that we need, then I'll take a stab at it.</p>",
        "id": 206217253,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596765146
    },
    {
        "content": "<p>Since <span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> also needs <code>is_scalar_tower</code> for <a href=\"https://github.com/leanprover-community/mathlib/issues/3688\">#3688</a> and asked my help, I can take a stab at <code>is_scalar_tower</code> right now.</p>",
        "id": 206236210,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1596790626
    },
    {
        "content": "<p>My plan: introduce <code>is_scalar_tower G M N</code> as a typeclass with a field <code>smul_assoc : ∀ (x : R) (y : M) (z : N), (x • y) • z = x • (y • z)</code>, then define <code>is_algebra_tower</code> as an abbreviation (along the lines of <code>semimodule</code> vs. <code>module</code> vs. <code>vector_space</code>).</p>",
        "id": 206236371,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1596790794
    },
    {
        "content": "<p>Is there an instance that people would like to see in the PR, or just introduce the typeclass?</p>",
        "id": 206236496,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1596790868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Effect.20of.20changing.20the.20base.20field.20on.20span/near/206217116\">said</a>:</p>\n<blockquote>\n<p>Actually, if I understand <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/pull.20back.20an.20R.20module.20along.20.60S.20-.3E.2B*.20R.60\">this thread</a>, this is already being worked on? Is that correct?</p>\n</blockquote>\n<p>nah I always say it needs to be done but then I never 'ave the time to do it</p>",
        "id": 206236686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596791042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Effect.20of.20changing.20the.20base.20field.20on.20span/near/206236496\">said</a>:</p>\n<blockquote>\n<p>Is there an instance that people would like to see in the PR, or just introduce the typeclass?</p>\n</blockquote>\n<p>I think you can look at the instances in algbera_tower</p>",
        "id": 206236737,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596791065
    },
    {
        "content": "<p>but I guess you could also just introduce the typeclass and let other people fill in the instances</p>",
        "id": 206236746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596791084
    },
    {
        "content": "<p>By the way, for now, Thomas has proved the case of this that we actually needed at the moment.</p>",
        "id": 206237179,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596791487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> I think this typeclass offers a solution to the problem I whinged about in the very long \"algebra is not scaling for me\" thread</p>",
        "id": 206240392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596794270
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3717\">#3717</a> created.</p>",
        "id": 206241583,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1596795350
    }
]