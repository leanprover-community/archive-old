[
    {
        "content": "<p>Hi,<br>\nDo we have basic results about projection maps in linear algebra (i.e. linear maps T such that T^2 = T), such as equivalences between different definitions (every element in the range being fixed, being diagonalisable with 0-1 eigenvalues)?<br>\nSpecifically I need the result that the trace of a projection is the dimension of the range, which I couldn't find but would follow easily from these equivalences.</p>",
        "id": 261442346,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1636929997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> I think this mostly doesn't exist yet (but would be good to have!). The closest I can find is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.is_compl_equiv_proj\">docs#submodule.is_compl_equiv_proj</a>, proving that projection maps are in natural correspondence with internal direct sum decompositions of a vector space.  If you can't be bothered building up a full theory, you could probably get the fact you need from this directly :)</p>",
        "id": 261449848,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636940953
    },
    {
        "content": "<p>How much do we have about direct sums of linear maps? In particular do we have that the matrix corresponding to a direct sum of linear maps is block-diagonal, and do we have a good dictionnary between internal and external direct sums?</p>",
        "id": 261566895,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637014139
    },
    {
        "content": "<p>Are you talking about a linear map of direct sums formed by a separate linear map for each piece?</p>",
        "id": 261567113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637014231
    },
    {
        "content": "<p>(If so, that's sort of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_module\">docs#direct_sum.to_module</a>, but you have to post-compose with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.lof\">docs#direct_sum.lof</a> yourself)</p>",
        "id": 261567196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637014274
    },
    {
        "content": "<blockquote>\n<p>and do we have a good dictionnary between internal and external direct sums?</p>\n</blockquote>\n<p>Currently the approach we've been taking is \"an internal direct sum is just an external direct sum of submodules\"</p>",
        "id": 261567262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637014313
    },
    {
        "content": "<p>We have almost no API for internal direct sums of modules beyond <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.submodule_is_internal\">docs#direct_sum.submodule_is_internal</a> and the things near it</p>",
        "id": 261567356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637014356
    },
    {
        "content": "<p>Nevermind, it seems <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> added a bunch of useful API <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 261567500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637014426
    },
    {
        "content": "<p>Thanks, I'll look that up. And do you know if we have translations with block-diagonal matrices, which I think would be needed to show that the trace is additive under direct sum.</p>",
        "id": 261568099,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637014698
    },
    {
        "content": "<p>Not sure what you mean by translation, but you probably want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.block_diagonal'\">docs#matrix.block_diagonal'</a> since the unprimed version will only work with a direct sum of copies of the same module</p>",
        "id": 261568362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637014852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> Are you sure you want to work with matrices?  Linear algebra is often easier if you don't :)</p>",
        "id": 261568403,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637014882
    },
    {
        "content": "<p>I'd prefer not to but trace is currently defined in terms of matrices, so I guess I don't really have the choice</p>",
        "id": 261568553,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637014955
    },
    {
        "content": "<p>Unless we have a basis-free definition of trace that I'm not aware of?</p>",
        "id": 261568603,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637014985
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.trace\">docs#linear_map.trace</a>, but is what you're saying that the only way to prove something about the trace is to go to a basis?</p>",
        "id": 261568902,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637015159
    },
    {
        "content": "<p>Working back from your question yesterday about projection maps, I think perhaps what you need here is that trace of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.prod_map\">docs#linear_map.prod_map</a> of two endomorphisms is the sum of their traces?</p>",
        "id": 261569072,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637015237
    },
    {
        "content": "<p>And while you're at it, the same result for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.map_range.linear_map\">docs#dfinsupp.map_range.linear_map</a></p>",
        "id": 261569216,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637015312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Projection.20maps/near/261568902\">said</a>:</p>\n<blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.trace\">docs#linear_map.trace</a>, but is what you're saying that the only way to prove something about the trace is to go to a basis?</p>\n</blockquote>\n<p>It looks to me like we don't really have the choice, since the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.trace\">docs#linear_map.trace</a> is by picking a basis and taking the trace of the corresponding matrix. And we seem to have very few lemmas about the trace of a linear map, so I feel like the matrix definition is pretty much unavoidable. That being said it would be very cool to have a true basis-free definition of trace using the isomorphism <code>Hom(V,W)=V*⊗ W</code> and evaluation map.</p>",
        "id": 261569932,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637015698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Projection.20maps/near/261569072\">said</a>:</p>\n<blockquote>\n<p>Working back from your question yesterday about projection maps, I think perhaps what you need here is that trace of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.prod_map\">docs#linear_map.prod_map</a> of two endomorphisms is the sum of their traces?</p>\n</blockquote>\n<p>Right, that's exactly what I'd need for the trace of projection maps (or actually I guess an internal version of that)</p>",
        "id": 261570163,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637015854
    },
    {
        "content": "<p>I think the thing to do here is to fill this <code>sorry</code> so that nobody else has to drop down to matrices again unless they want to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.contraction</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.trace</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trace_eq_contract</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">linear_map.trace</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∘ₗ</span> <span class=\"o\">(</span><span class=\"n\">dual_tensor_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">contract_left</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261618434,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637056743
    },
    {
        "content": "<p>(And also prove that <code>dual_tensor_hom R M M</code> is an equiv subject to the relevant hypothesis and thus get a formula for trace in terms of its inverse and contraction.)</p>",
        "id": 261618927,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637057029
    },
    {
        "content": "<p>I'll try to tackle that!</p>",
        "id": 261692577,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637090368
    },
    {
        "content": "<p>Is there a lemma for linear maps agreeing iff they agree on a basis?</p>",
        "id": 261692645,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637090399
    },
    {
        "content": "<p>Yup, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.ext\">docs#basis.ext</a></p>",
        "id": 261692837,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637090483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Projection.20maps/near/261618434\">said</a>:</p>\n<blockquote>\n<p>I think the thing to do here is to fill this <code>sorry</code> so that nobody else has to drop down to matrices again unless they want to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.contraction</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.trace</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trace_eq_contract</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">linear_map.trace</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∘ₗ</span> <span class=\"o\">(</span><span class=\"n\">dual_tensor_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">contract_left</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>PR'd! <a href=\"https://github.com/leanprover-community/mathlib/issues/10372\">#10372</a></p>",
        "id": 261832167,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1637175767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329754\">Antoine Labelle</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Projection.20maps/near/261832167\">said</a>:</p>\n<blockquote>\n<p>PR'd! <a href=\"https://github.com/leanprover-community/mathlib/issues/10372\">#10372</a></p>\n</blockquote>\n<p>This looks great. I just left some review remarks but overall this is really great.</p>",
        "id": 261848731,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637182973
    },
    {
        "content": "<p>Seems to fill a nice number of lemma holes elsewhere too</p>",
        "id": 261849634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637183393
    }
]