[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cofinite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>What is the idiomatic Lean way to say this? Maybe <code>cofinite</code> should be replaced by some \"neighbourhood of infinty\" filter? Are all these concepts proved to be equivalent somewhere? I'm thinking about <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis/near/196926867\" title=\"#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis/near/196926867\">the questions Heather Macbeth set her class</a>.</p>",
        "id": 197070552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135371
    },
    {
        "content": "<p>You want this: <a href=\"https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html#filter.nat.cofinite_eq_at_top\" title=\"https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html#filter.nat.cofinite_eq_at_top\">https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html#filter.nat.cofinite_eq_at_top</a></p>",
        "id": 197070668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589135491
    },
    {
        "content": "<p>I do, but I also think I want the equivalence in my question (with cofinite replaced by <code>at_top</code> if necessary)</p>",
        "id": 197070851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135654
    },
    {
        "content": "<p>ooh bingo, <code>library_search</code></p>",
        "id": 197070868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135675
    },
    {
        "content": "<p>related: <a href=\"https://www.codewars.com/kata/reviews/5ea1f38e014f0c0001ec7c70/groups/5ea612e99de75200013c0854\" title=\"https://www.codewars.com/kata/reviews/5ea1f38e014f0c0001ec7c70/groups/5ea612e99de75200013c0854\">https://www.codewars.com/kata/reviews/5ea1f38e014f0c0001ec7c70/groups/5ea612e99de75200013c0854</a></p>",
        "id": 197071003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589135775
    },
    {
        "content": "<p>Once I changed <code>cofinite</code> to <code>at_top</code>, <code>library_search</code> kicked in. <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/metric_space/basic.html#metric.tendsto_at_top\" title=\"https://leanprover-community.github.io/mathlib_docs/topology/metric_space/basic.html#metric.tendsto_at_top\"><code>metric.tendsto_at_top</code></a></p>",
        "id": 197071018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135796
    },
    {
        "content": "<p>Before the change, I can't get any tactic to give me a clue (and I didn't know the name of the <code>at_top</code> filter when I wrote the original post).</p>",
        "id": 197071112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135889
    },
    {
        "content": "<p><code>at_top</code> is I think the more canonical way to write this, but <code>cofinite</code> is also a fine filter. I hope the equality is proven somewhere</p>",
        "id": 197071138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589135902
    },
    {
        "content": "<p>Yes, Reid's first link is the proof</p>",
        "id": 197071156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135916
    },
    {
        "content": "<p>that should be a simp lemma, I think</p>",
        "id": 197071198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589135937
    }
]