[
    {
        "content": "<p>I was wondering where in the category theory library should the construction of a base change functor go?</p>",
        "id": 273326498,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1645863086
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.over</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.pullbacks</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u‚ÇÄ</span> <span class=\"n\">v‚ÇÄ</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÄ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÄ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The `pullback_functor` on objects-/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">pullback_functor_obj</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">over.mk</span> <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pullback</span> <span class=\"n\">g</span> <span class=\"n\">E.hom</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Consider the cone over the diagram     X ----&gt; Y &lt;---- E‚ÇÅ.left</span>\n\n<span class=\"cm\">                     pullback.snd          h.left</span>\n<span class=\"cm\">  pullback g E‚ÇÄ.hom -------------&gt; E‚ÇÄ.left -----&gt; E‚ÇÅ.left</span>\n<span class=\"cm\">        |                                           |</span>\n<span class=\"cm\">        | pullback.fst                              |</span>\n<span class=\"cm\">        V                                           |</span>\n<span class=\"cm\">        X ----------------------------------------&gt; Y</span>\n\n<span class=\"cm\">The universal property of `pullback g E‚ÇÅ.hom` gives the below definition</span>\n<span class=\"cm\">-/</span>\n<span class=\"sd\">/-- The `pullback_functor` on morphisms, as a morphism in the category-/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">pullback_functor_map_mk_map</span> <span class=\"o\">{</span><span class=\"n\">E‚ÇÄ</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">E‚ÇÄ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">E‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">pullback_functor_obj</span> <span class=\"n\">g</span> <span class=\"n\">E‚ÇÄ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">pullback_functor_obj</span> <span class=\"n\">g</span> <span class=\"n\">E‚ÇÅ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">:=</span>\n<span class=\"n\">limits.pullback.lift</span> <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">pullback</span> <span class=\"n\">g</span> <span class=\"n\">E‚ÇÄ.hom</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pullback.snd</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h.left</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pullback.condition</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">],</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">over.w</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">})</span>\n\n<span class=\"sd\">/-- The `pullback_functor` on morphisms -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">pullback_functor_map</span> <span class=\"o\">(</span><span class=\"n\">E‚ÇÄ</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">E‚ÇÄ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">E‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pullback_functor_obj</span> <span class=\"n\">g</span> <span class=\"n\">E‚ÇÄ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">pullback_functor_obj</span> <span class=\"n\">g</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"o\">:=</span>\n<span class=\"n\">over.hom_mk</span> <span class=\"o\">(</span><span class=\"n\">pullback_functor_map_mk_map</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">limits.pullback.lift_fst</span><span class=\"o\">]</span> <span class=\"o\">})</span>\n\n<span class=\"sd\">/-- Pullback as a functor between over categories -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pullback_functor</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">over</span> <span class=\"n\">Y</span> <span class=\"bp\">‚•§</span> <span class=\"n\">over</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">over.mk</span> <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pullback</span> <span class=\"n\">g</span> <span class=\"n\">E.hom</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">pullback_functor_map</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">g</span> <span class=\"bp\">`^*`</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"n\">pullback_functor</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 273326569,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1645863173
    },
    {
        "content": "<p>I would also like to show that <code>pullback_functor (terminal.from Y) : C/* ‚•§ C/*</code> is the same as <code>Y √ó - : C ‚•§ C</code>, I don't see <code>C/* ‚•§ C</code> proven anywhere though</p>",
        "id": 273327121,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1645864060
    },
    {
        "content": "<p>I think it should be added in <code>src/category_theory/limits/shapes/pullbacks.lean</code>.<br>\nNote that the map could also be<br>\n<code>over.hom_mk (pullback.map _ _ _ _ i.left (ùüô _) (ùüô _) (by simp) (by simp)) (by simp)</code> but that doesn't matter a lot.</p>\n<p>Also it might be worth it to add <code>over.map f ‚ä£ base_change f</code> into <code>src/category_theory/adjunction/over.lean</code>. Feel free to steal <a href=\"https://github.com/leanprover-community/mathlib/blob/d35373fa08b988d5a125b067ff36d30d3e8731d3/src/category_theory/adjunction/over.lean#L50-L59\">these</a> if you want.</p>\n<p>This functor <code>C/* ‚•§ C</code> should just be <code>over.forget</code>. The other way <code>C ‚•§ C/*</code> is <code>category_theory.star</code>, but we only know that they are adjoint and I don't think we know the equivalence for terminal objects.</p>",
        "id": 273327777,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645864851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/base.20change.20.2F.20pullback/near/273327777\">said</a>:</p>\n<blockquote>\n<p>I think it should be added in <code>src/category_theory/limits/shapes/pullbacks.lean</code>.<br>\nNote that the map could also be<br>\n<code>over.hom_mk (pullback.map _ _ _ _ i.left (ùüô _) (ùüô _) (by simp) (by simp)) (by simp)</code> but that doesn't matter a lot.</p>\n<p>Also it might be worth it to add <code>over.map f ‚ä£ base_change f</code> into <code>src/category_theory/adjunction/over.lean</code>. Feel free to steal <a href=\"https://github.com/leanprover-community/mathlib/blob/d35373fa08b988d5a125b067ff36d30d3e8731d3/src/category_theory/adjunction/over.lean#L50-L59\">these</a> if you want.</p>\n<p>This functor <code>C/* ‚•§ C</code> should just be <code>over.forget</code>. The other way <code>C ‚•§ C/*</code> is <code>category_theory.star</code>, but we only know that they are adjoint and I don't think we know the equivalence for terminal objects.</p>\n</blockquote>\n<p>Thanks! About the last point - they are equivalent and I have just written up a proof. I will try to get back to you on the other points later</p>",
        "id": 273329071,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1645866679
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.over</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.polynomial.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u‚ÇÄ</span> <span class=\"n\">v‚ÇÄ</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">endofunctor</span>\n<span class=\"kn\">open</span> <span class=\"n\">limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÄ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÄ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_terminal</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">over_terminal</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">If category `C` has a terminal object then</span>\n<span class=\"cm\">`C` and `over ‚ä§_ C` (the overcategory of the terminal object)</span>\n<span class=\"cm\">are equivalent categories via the forgetful functor.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The inverse to the functor forgetting from the over category of the terminal object.</span>\n<span class=\"sd\">This leads to an equivalence in `is_equivalence_forget`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">forget_inverse</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">over</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">over.mk</span> <span class=\"o\">(</span><span class=\"n\">terminal.from</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">over.hom_mk</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- On objects, the identity on `over ‚ä§_ C` is equal to the composition with `forget_inverse` -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">unit_iso_obj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">‚âÖ</span> <span class=\"o\">(</span><span class=\"n\">over.forget</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">forget_inverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_to_iso</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">})</span>\n\n<span class=\"sd\">/-- The identity on `over ‚ä§_ C` is naturally isomorphic to the composition with `forget_inverse` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">unit_iso</span> <span class=\"o\">:</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">over.forget</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">forget_inverse</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat_iso.of_components</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">unit_iso_obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The precomposition with the `forget_inverse` is naturally isomorphic to the identity on C -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">counit_iso</span> <span class=\"o\">:</span> <span class=\"n\">forget_inverse</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">over.forget</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚âÖ</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat_iso.of_components</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">iso.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The forgetful functor `over ‚ä§_ C ‚Üí C` is an equivalence, with inverse `forget_inverse` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_equivalence_forget</span> <span class=\"o\">:</span> <span class=\"n\">is_equivalence</span> <span class=\"o\">(</span><span class=\"n\">over.forget</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_equivalence.mk</span> <span class=\"n\">forget_inverse</span> <span class=\"n\">unit_iso</span> <span class=\"n\">counit_iso</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">We show that `pullback_functor (terminal.from Y) : C/* ‚•§ C/*`</span>\n<span class=\"cm\">is the same as `Y √ó - : C ‚•§ C`, in the sense that the following</span>\n<span class=\"cm\">commutes</span>\n\n<span class=\"cm\">  C/* ‚•§ C/*</span>\n<span class=\"cm\">   |      |</span>\n<span class=\"cm\">   |      | forget</span>\n<span class=\"cm\">   V      V</span>\n<span class=\"cm\">   C  ‚•§  C</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">over_terminal</span>\n<span class=\"kd\">end</span> <span class=\"n\">endofunctor</span>\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 273329128,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1645866748
    },
    {
        "content": "<p><del>oh i should change it to <code>category.star</code></del> <del>wait no star doesn't seem like the right thing here</del> aha they are the same thing</p>",
        "id": 273329160,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1645866820
    },
    {
        "content": "<p>oh i see by \"dont know\" you meant \"we don't have it in the library\"</p>",
        "id": 273329167,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1645866841
    },
    {
        "content": "<p>Yeah. By we I meant mathlib : )<br>\n I think <code>forget_inverse</code> should still be kept since that is the one people think of when considering the functor <code>C ‚•§ over ‚ä§_ C</code>.<br>\nAnd it does not require that <code>C</code> has products. But a natural isomorphism should be useful.</p>",
        "id": 273329313,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645867080
    },
    {
        "content": "<p><code>pullback.map</code> is a great idea!</p>",
        "id": 273337114,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1645877406
    }
]