[
    {
        "content": "<p>I was expecting for find something called <code>map</code> or <code>comap</code> that, given an <code>R</code>-module and a ring homomorphism from <code>S</code> to <code>R</code>, produced an <code>S</code>-module.</p>",
        "id": 205888585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534373
    },
    {
        "content": "<p>Anyone know where this is?</p>",
        "id": 205888587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534377
    },
    {
        "content": "<p>this will require generalizing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_algebra_tower\">docs#is_algebra_tower</a></p>",
        "id": 205888619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596534409
    },
    {
        "content": "<p>Why is that?</p>",
        "id": 205888739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534490
    },
    {
        "content": "<p>That should only be about situations involving 3 rings. I only have two.</p>",
        "id": 205888768,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534534
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/bf43bffe6224560988775e29358d47e986bf0e6a#diff-426ea95b17d30988bbc8eb5e8dfbec76R225\">https://github.com/leanprover-community/mathlib/commit/bf43bffe6224560988775e29358d47e986bf0e6a#diff-426ea95b17d30988bbc8eb5e8dfbec76R225</a></p>",
        "id": 205888773,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596534539
    },
    {
        "content": "<p>the generalization is noting that in the definition we only need the transitive <code>has_scalar</code> instances</p>",
        "id": 205888803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596534569
    },
    {
        "content": "<p>Perfect! I was just looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_semimodule/src\">src#ring_hom.to_semimodule</a>, and wondering why what I wanted wasn't right there. :-)</p>",
        "id": 205888814,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534580
    },
    {
        "content": "<p>what you proposed would make a scalar tower involving the two rings and the module</p>",
        "id": 205888819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596534586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, is that commit part of some PR?</p>",
        "id": 205888823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534589
    },
    {
        "content": "<p>so to properly use it, we would need to generalize <code>is_algebra_tower</code></p>",
        "id": 205888834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596534600
    },
    {
        "content": "<p>oh, I see, you're doing it right now.</p>",
        "id": 205888908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534641
    },
    {
        "content": "<p>cf. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_algebra_tower.comap/src\">src#is_algebra_tower.comap</a></p>",
        "id": 205888914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596534645
    },
    {
        "content": "<p>Okay. I just added <code>ulift.semimodule_equiv</code>, giving the R-linear equivalence between <code>ulift M</code> and <code>M</code>.</p>",
        "id": 205888935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534668
    },
    {
        "content": "<p>I was going to add the other equivalence, between M-as-a-<code>ulift R</code>-module, comapped via <code>ulift.ring_equiv</code> back to an R-module, and <code>M</code> itself.</p>",
        "id": 205888978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534716
    },
    {
        "content": "<p>but I won't :-)</p>",
        "id": 205888982,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/pull.20back.20an.20R.20module.20along.20.60S.20-.3E.2B*.20R.60/near/205888908\">said</a>:</p>\n<blockquote>\n<p>oh, I see, you're doing it right now.</p>\n</blockquote>\n<p>Yes, but I got sidetracked by trying to generalize the category of modules to take separate universe variables for the ring and the module. However, I'm afraid this doesn't work with the way concrete categories are set up.</p>",
        "id": 205889043,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596534748
    },
    {
        "content": "<p>Which is a shame, because I'd expect that all this <code>ulift</code>-juggling really shouldn't be necessary if we had these separate variables</p>",
        "id": 205889081,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596534792
    },
    {
        "content": "<p>Yes, I had a look at that a few days ago as well, and was sad. :-)</p>",
        "id": 205889190,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596534889
    },
    {
        "content": "<p>Is there an intrinsic reason for requiring <code>large_category</code> and putting <code>C : Type (u+1)</code> everywhere? Will something break if we releax it to <code>category</code> and <code>C : Type v</code>? My understanding of concrete categories and universe issues is very limited.</p>",
        "id": 205889317,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596534993
    },
    {
        "content": "<p>As far as I can recall right now, this was just done for simplicity, because most of the concrete categories are large categories.</p>",
        "id": 205894709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596539833
    },
    {
        "content": "<p>Before universe inference worked as well as it does now, this probably saved a bunch of universe annotations.</p>",
        "id": 205894732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596539853
    },
    {
        "content": "<p>But it may be that we can make it more flexible now at no cost.</p>",
        "id": 205894738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596539863
    },
    {
        "content": "<p>But I think we'd have to just try.</p>",
        "id": 205894744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596539868
    },
    {
        "content": "<p>I tried it, and the result is <a href=\"https://github.com/leanprover-community/mathlib/issues/3687\">#3687</a></p>",
        "id": 205897708,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596542438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/pull.20back.20an.20R.20module.20along.20.60S.20-.3E.2B*.20R.60/near/205889043\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/pull.20back.20an.20R.20module.20along.20.60S.20-.3E.2B*.20R.60/near/205888908\">said</a>:</p>\n<blockquote>\n<p>oh, I see, you're doing it right now.</p>\n</blockquote>\n<p>Yes, but I got sidetracked by trying to generalize the category of modules to take separate universe variables for the ring and the module. However, I'm afraid this doesn't work with the way concrete categories are set up.</p>\n</blockquote>\n<p>I'd say it's not worth trying to support this. You'll end up paying the universe tax too many times.</p>",
        "id": 205901104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596544950
    },
    {
        "content": "<p>If you support this then you have no choice but to also support the case of <code>u</code>-modules over a <code>v</code>-ring where <code>u &lt; v</code>, which is not an object of interest.</p>",
        "id": 205901167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596545004
    },
    {
        "content": "<p>I'm note sure I understand what you mean. The non-category linear algebra section of mathlib supports this, and as far as I know it's not an issue.</p>",
        "id": 205901642,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596545304
    },
    {
        "content": "<p>I can think of some examples of this, e.g. of G is a group with universe v acting trivially on Z, then when you consider Z as a module over the group algebra...</p>",
        "id": 205901901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596545484
    },
    {
        "content": "<p>It does support it but I claim it's in fact basically useless</p>",
        "id": 205902020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596545575
    },
    {
        "content": "<p>Here is the next iteration of R-Mod vs Ab:</p>\n<ul>\n<li>R-Mod is a symmetric monoidal category in a way compatible with being an abelian category</li>\n<li>Ab is a symmetric monoidal category in a way compatible with being an abelian category</li>\n<li><span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> Let's exploit the equivalence between Ab and Z-Mod to reduce the second statement to the first one!</li>\n<li>Treat <code>Ab.{v}</code> as <code>v</code>-modules over the <code>0</code>-ring Z</li>\n<li>Oh no, <code>v</code>-modules over a <code>u</code>-ring is only a symmetric monoidal category for <code>v &gt;= u</code> (because the unit is <code>u</code>-sized not <code>v</code>-sized) and we have no way to express this in Lean.</li>\n</ul>",
        "id": 205902342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596545784
    },
    {
        "content": "<p>So now one could say \"well technically, we could make <code>max v u</code>-modules over a <code>u</code>-ring into a symmetric monoidal category\" by using <code>ulift R</code> as the unit object (while probably breaking universe inference because <code>v</code> does not appear on its own anywhere)</p>",
        "id": 205902596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596545931
    },
    {
        "content": "<p>but now this is an even worse situation than just assuming the rings and modules are in the same universe, because when <code>v = u</code> you have these stupid <code>ulift</code>s that won't just disappear</p>",
        "id": 205902750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596546006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/3867\">#3867</a> went off my radar due to holidays. Sorry for that. What do you think of Reid's comments above <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> ?</p>",
        "id": 208083020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598443959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/pull.20back.20an.20R.20module.20along.20.60S.20-.3E.2B*.20R.60/near/208083020\">said</a>:</p>\n<blockquote>\n<p>What do you think of Reid's comments above <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> ?</p>\n</blockquote>\n<p>I certainly see the problem and I don't have a good solution. Personally, I believe that there is a possible compromise where we have independent universe variables but constrain them to be equal whenever we want to use that <code>Module R</code> is monoidal (indeed, this is exactly what <a href=\"https://github.com/leanprover-community/mathlib/issues/3687\">#3687</a> does at the moment).</p>",
        "id": 208084888,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1598445231
    }
]