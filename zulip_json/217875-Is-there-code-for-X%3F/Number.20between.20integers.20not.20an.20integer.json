[
    {
        "content": "<p>I just proved this lemma about how a value between consecutive integers m and m+1 is not an integer. But, I'm not sure which file it should go into. Here is the proof for further details:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">num_btw_integers_not_integer</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">n0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">this</span> <span class=\"n\">h₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248926155,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1628554991
    },
    {
        "content": "<p>Any suggestions?</p>",
        "id": 248926198,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1628555037
    },
    {
        "content": "<p>I would put in in the first file that imports the two files that you are importing. You can use <code>leanproject</code> to generate a graph of the import structure.</p>\n<p>Minor comments:</p>\n<ul>\n<li>I would rewrite the statement as <code>\\forall n : \\Z, a \\ne n</code>. In other words, put the <code>n</code> argument after the assumptions <code>h</code> and <code>h_0</code>. That looks more natural to me.</li>\n<li>I would also swap <code>h_0</code> and <code>h</code>, I think.</li>\n<li>The name should be <code>ne_int_cast_of_lt_of_lt</code> or more verbose <code>ne_int_cast_of_lt_int_of_int_lt</code> or something like that.</li>\n</ul>",
        "id": 248938582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628568870
    },
    {
        "content": "<p>here's a simpler proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">num_btw_integers_not_integer</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">h₀</span> <span class=\"o\">(</span><span class=\"n\">int.lt_add_one_iff.1</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248938996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628569471
    },
    {
        "content": "<p>This is a special case of the typeclass <code>succ_order</code> I'm defining. See here <a href=\"https://github.com/leanprover-community/mathlib/issues/8082\">#8082</a>.</p>",
        "id": 248944542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628576782
    },
    {
        "content": "<p><code>ne_int_cast_of_lt_of_lt_succ</code>  might be a better name. What name does your PR use?</p>",
        "id": 248949464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628581526
    },
    {
        "content": "<p>This lemma applies to the rationals.</p>",
        "id": 248950197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628582162
    }
]