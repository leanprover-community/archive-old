[
    {
        "content": "<p>Are these in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_on</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">L1</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">filter.map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">map_mono</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">le_rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">tendsto</span> <span class=\"n\">φ</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">γ</span> <span class=\"n\">φ</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">map_mono</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">tendsto_id</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">L3</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_within_at</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">filter.map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">map_mono</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">le_rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">L4</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_within_at</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">tendsto</span> <span class=\"n\">φ</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">γ</span> <span class=\"n\">φ</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">map_mono</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">tendsto_id</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(I'm not happy about the way universes look in <code>L2</code> and <code>L4</code>.)</p>",
        "id": 317411893,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671728875
    },
    {
        "content": "<p>I would try to make a helpful comment about universes but your code doesn't compile for me as it stands and I don't know enough about topology to fix it up (I might be missing an <code>open</code> or an <code>open_locale</code> or something)</p>",
        "id": 317413921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671729436
    },
    {
        "content": "<p>I was going to first figure out what you were unhappy about and then suggest that you don't use <code>variables</code> but instead put all the types in your statement -- this sometimes makes a difference.</p>",
        "id": 317414025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671729466
    },
    {
        "content": "<p>(Added missing import.) The same issue came up with explicit parameters, having all of <code>α</code>, <code>β</code> and <code>γ</code> be <code>Type*</code> fails with a universe error. Which I guess I don't really have to care about, I just want to exploit a proof of convergence that I have to show that a function is continuous without resorting to sequential continuity.</p>",
        "id": 317415245,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671729826
    },
    {
        "content": "<p>The only lemma lokking like this that I found in mathlib is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_iff_ultrafilter\">docs#filter.tendsto_iff_ultrafilter</a></p>",
        "id": 317416654,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671730265
    },
    {
        "content": "<p>For L2 and L4, you should probably first prove the direct implication where gamma can be in any universe.</p>",
        "id": 317420292,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1671731363
    },
    {
        "content": "<p>Oh the issue is that gamma and alpha need to be in the same universe?</p>",
        "id": 317420394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671731401
    },
    {
        "content": "<p>(Well, they are so trivial that maybe then don't need a separate lemma).</p>",
        "id": 317420465,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1671731412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Continuity.20from.20filters/near/317420292\">said</a>:</p>\n<blockquote>\n<p>For L2 and L4, you should probably first prove the direct implication where gamma can be in any universe.</p>\n</blockquote>\n<p>Yes, the direct implication works generally. What puzzles me is that additional restrictions on universes should make the reverse implication more difficult.</p>",
        "id": 317420630,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671731471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Continuity.20from.20filters/near/317420465\">said</a>:</p>\n<blockquote>\n<p>(Well, they are so trivial that maybe then don't need a separate lemma).</p>\n</blockquote>\n<p>(Agreed, all 4 equivalences are basically true by definition anyway, they are just useful to me as rw lemmas.)</p>",
        "id": 317421074,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671731622
    },
    {
        "content": "<p>This came up in the perfectoid project and probably in other places too. If <code>φ : γ → α</code> with gamma and alpha in different universes, then <code>phi</code> factors as a surjection to <code>delta</code> followed by an injection <code>delta-&gt;alpha</code> and you can assume that <code>delta</code> is in the same universe as <code>alpha</code>. You can then apply <code>L2</code> for <code>delta</code>. Is this enough to deduce it for <code>gamma</code> in a different universe? That was the kind of trick we played in the perfectoid repo. You need to be careful though -- if you want the if and only if then you might need that the universe of gamma is &gt;= the universe of alpha. For example the lemma is probably not true if you allow <code>gamma : Sort u</code> as then gamma can be a proposition, which will presumably not be good enough to prove continuous_at (remember that Lean is implicitly claiming that infinitely many lemmas are true, with u and v being any choice of universe variable).</p>",
        "id": 317421241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671731672
    },
    {
        "content": "<p>Ah! I think I'm slowly getting it, writing <code>∀ {γ : Type*}</code> does not quantify over the universe, and I was reading this in my head as <code>∀ {u} {γ : Type u}</code> which makes no sense.</p>",
        "id": 317421949,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671731920
    },
    {
        "content": "<p>Right! If you can prove a theorem involving two universes u and v then you're actually proving infinitely many theorems, or one theorem with \"for all u, v\" at the very beginning (and as you point out, you're not allowed to quantify over universes in the middle of a statement)</p>",
        "id": 317429136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671734296
    },
    {
        "content": "<p>One general approach to such things is to use <code>max u v</code> as the universe level of gamma, although (at least in lean3) you may need to tell lean explicitly what the universes are when you use the lemma. (Is this better in lean4?)</p>",
        "id": 317448253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671741672
    },
    {
        "content": "<p>For L2 and L4, you want gamma to be at a universe level at least as large as that of alpha, and the only way to say this is using max.</p>",
        "id": 317448414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671741729
    },
    {
        "content": "<p>The reverse implication would then involve a ulift, not just an id.</p>",
        "id": 317448455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671741759
    },
    {
        "content": "<p>Putting universes aside, I'm surprised you need these at all, do you have an example use? Anyways, it looks like you would be interested by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_iff_ultrafilter\">docs#filter.tendsto_iff_ultrafilter</a></p>",
        "id": 317623866,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671821023
    },
    {
        "content": "<p>My example is that I had a proof of <code>tendsto_locally_uniformly_on (deriv ∘ F) (deriv f) φ U</code> from <code>tendsto_locally_uniformly_on F f φ U</code> and <code>∀ᶠ n in φ, differentiable_on ℂ (F n) U</code>, from before I learned about the type aliases for uniform convergence, and I figured that it would make sense to state that <code>deriv</code> is continuous from <code>{f : ℂ →ᵤ[compacts U] ℂ | differentiable_on ℂ f U}</code> to itself. And being lazy I tried to deduce the continuity from the convergence.</p>",
        "id": 317640858,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671829307
    },
    {
        "content": "<p>But I don't see how considering all finer filters matter here? Can't you just apply your previous lemma to the identity (from <code>{f : ℂ →ᵤ[compacts U] ℂ | differentiable_on ℂ f U}</code> to itself)?</p>",
        "id": 317645658,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671832065
    },
    {
        "content": "<p>And use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_id\">docs#filter.tendsto_id</a></p>",
        "id": 317645840,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671832167
    },
    {
        "content": "<p>Yes sure, the proof of my stupid lemma is <code>λ h, h id (𝓝[s] a) tendsto_id</code> but figuring this out took me a while (I am still mostly flying blind whenever there are filters involved).</p>",
        "id": 317652391,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671836108
    },
    {
        "content": "<p>Sorry, I didn't mean to make it sound like a triviality, and I should have read your message better (I even missed that you had seen <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_iff_ultrafilter\">docs#filter.tendsto_iff_ultrafilter</a>!). I was just curious as to wether it was really more convenient or \"only\" more familiar looking because of the similarity with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seq_continuous\">docs#seq_continuous</a></p>",
        "id": 317656135,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671838740
    },
    {
        "content": "<p>My instinct says that we don't need these in mathlib, but on the other hand filters <em>do</em> take a while to get used to and these lemmas may be good to have exactly because they may seem more instinctive to quite a lot of people.</p>",
        "id": 317656408,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671838939
    },
    {
        "content": "<p>Well for people used to working with sequential characterizations, but who feel guilty about it because not all spaces have first countable topology, there is a temptation to see filters together with indexed families like \"sequences but without such pathologies\" and those lemmas then feel useful. My first instinct when not finding them in mathlib was to think that maybe they were not true and that I was missing something essential, rather than to figure that they were too close to the definitions to be useful.</p>",
        "id": 317657458,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1671839892
    },
    {
        "content": "<p>Yeah I can get why these statements seem more natural than thinking of the identity as an family in <code>X</code> indexed by <code>X</code>, which always feels like you're cheating somehow. So maybe let's wait one or two days after Christmas to gather more opinions about this.<br>\nMy concern isn't at all that they are too close to the definitions (this isn't a problem at all in mathlib), it is that while it may look like a sensible thing to apply it can really only make a proof harder. It's like saying that a sequence converges if and only if all subsequences do: it's true, but can't really help since among all of these subsequences you still have your first sequence, so you could have gone straight to it.<br>\nBut again, the mere fact that people may look for these statement could be a sufficient argument to put them in mathlib, maybe with a docstring explaining how you can skip them.</p>",
        "id": 317740871,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671895847
    }
]