[
    {
        "content": "<p>Do we have anything that be used to make this proof shorter?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.prod</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span> <span class=\"n\">M₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₃</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₃</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coprod_map_prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">submodule.prod</span> <span class=\"n\">S</span> <span class=\"n\">S'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">linear_map.coprod</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">S'.map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set_like.coe_injective</span> <span class=\"bp\">$</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">submodule.mem_sup</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">exists_and_distrib_left</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">and_assoc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245184410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625666454
    },
    {
        "content": "<p>I suspect a variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mem_sup\">docs#submodule.mem_sup</a> that expressed the RHS as a sum would help</p>",
        "id": 245186941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625667473
    },
    {
        "content": "<p>A term-mode-like proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coprod_map_prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">submodule.prod</span> <span class=\"n\">S</span> <span class=\"n\">S'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">linear_map.coprod</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">S'.map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_sup</span><span class=\"o\">,</span> <span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">linear_map.coprod_apply</span><span class=\"o\">,</span> <span class=\"n\">mem_prod</span><span class=\"o\">,</span> <span class=\"n\">prod.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mem_map_of_mem</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">mem_map_of_mem</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n         <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245189847,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625668504
    },
    {
        "content": "<p>I think this was the lemma I wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_sup</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set_like.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_sup</span><span class=\"o\">,</span> <span class=\"n\">set.mem_add</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245192369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625669409
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8220\">#8220</a> adds <code>coprod_map_prod</code> and <code>coe_sup</code>. <code>coe_supr</code> is probably not far out of reach, but I didn't care enough to try.</p>",
        "id": 245201259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625672748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> maybe you are on holiday already, but which of the lemma you added here and  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_coprod_prod\">docs#map_coprod_prod</a> should we keep?</p>",
        "id": 250382944,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629739220
    },
    {
        "content": "<p>That link doesn't seem to work and the search page fails on mobile (I'm on holiday, but happy to do things that don't require lean access)</p>",
        "id": 250392689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629743599
    },
    {
        "content": "<p>Oops sorry <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_coprod_prod\">docs#linear_map.map_coprod_prod</a>, its the same lemma as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.coprod_map_prod\">docs#linear_map.coprod_map_prod</a>, just the new one has a nicer proof I suppose?</p>",
        "id": 250392912,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629743697
    },
    {
        "content": "<p>The naming convention is confusing me a lot though</p>",
        "id": 250393237,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629743835
    },
    {
        "content": "<p>Ouch, did I introduce that for other subobjects too?</p>",
        "id": 250393774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629744107
    },
    {
        "content": "<p>Can we make a linter to catch this type of thing?</p>",
        "id": 250393848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629744135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> yes I found this with a \"duplicate lemma finder\" metaprogram!</p>",
        "id": 250401169,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629747595
    },
    {
        "content": "<p>How many others did you find?</p>",
        "id": 250401305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629747655
    },
    {
        "content": "<p>Hard to say, some are still false positives but 30-50 maybe?</p>",
        "id": 250401712,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629747858
    },
    {
        "content": "<p>Just picked some that seemed easyish to fix up first in <a href=\"https://github.com/leanprover-community/mathlib/tree/alexjbest/dedup/1\">branch#alexjbest/dedup/1</a>. But some are a bit subtle to choose which versions are better</p>",
        "id": 250401858,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629747943
    }
]