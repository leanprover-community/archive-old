[
    {
        "content": "<p>Does this exist? Could it be a simp lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">he.to_matrix</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">he.repr</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_basis.to_matrix_apply</span><span class=\"o\">,</span> <span class=\"n\">is_basis.equiv_fun_apply</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218428932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606833122
    },
    {
        "content": "<p>Or perhaps the unapplied form, <code>(he.to_matrix v)ᵀ = (λ i, he.repr (v i))</code></p>",
        "id": 218429236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606833246
    },
    {
        "content": "<p><code>funext (λ _, rfl)</code> also closes <code>(he.to_matrix v)ᵀ i = he.repr (v i)</code></p>",
        "id": 218431403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606834281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, is adding <code>linear_map.to_matrix_transpose_apply</code> and <code>basis.to_matrix_transpose_apply</code> sensible?</p>",
        "id": 218456728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606844631
    },
    {
        "content": "<p>Adding the one-argument/row version sounds good, especially because <code>he.repr (v i)</code> has some simp lemmas too.</p>",
        "id": 218491724,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606861924
    },
    {
        "content": "<p>Should this be a simp lemma then?</p>",
        "id": 218491819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606861974
    },
    {
        "content": "<p>I don't know. Shouldn't give too many problems I expect, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_lin_apply\">docs#matrix.to_lin_apply</a> is not <code>simp</code> either.</p>",
        "id": 218491995,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606862077
    },
    {
        "content": "<p>So I'll go with whatever you think best</p>",
        "id": 218492014,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606862092
    },
    {
        "content": "<p>I've no idea what's best, I've not touched these APIs before and was just struggling though a proof in <a href=\"https://github.com/leanprover-community/mathlib/issues/5124\">#5124</a></p>",
        "id": 218493085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606862831
    },
    {
        "content": "<p>(these now exist as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_matrix_transpose_apply\">docs#linear_map.to_matrix_transpose_apply</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis.to_matrix_transpose_apply\">docs#is_basis.to_matrix_transpose_apply</a>)</p>",
        "id": 218822130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607082167
    }
]