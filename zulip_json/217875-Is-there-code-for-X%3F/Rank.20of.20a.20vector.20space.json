[
    {
        "content": "<p>After the <code>basis</code> refactor, what is the right way to say that the dimension of the vector space of <code>n x n</code> matrices over <code>\\R</code> is <code>n x n</code>? Before, I had the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- An n × n matrix has some finite basis of cardinality n ^ 2</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span>\n            <span class=\"o\">(</span><span class=\"n\">is_basis</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n            <span class=\"o\">(</span><span class=\"n\">finset.card</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s_basis</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional.exists_is_basis_finset</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finite_dimensional.finrank_eq_card_finset_basis</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.finrank_matrix</span><span class=\"o\">,</span> <span class=\"n\">fintype.card</span><span class=\"o\">,</span> <span class=\"n\">finset.card_fin</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- An m × n matrix has some finite basis of cardinality m * n</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span>\n            <span class=\"o\">(</span><span class=\"n\">is_basis</span> <span class=\"n\">ℝ</span>\n              <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n            <span class=\"o\">(</span><span class=\"n\">finset.card</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s_basis</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional.exists_is_basis_finset</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finite_dimensional.finrank_eq_card_finset_basis</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.finrank_matrix</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.card</span><span class=\"o\">,</span> <span class=\"n\">finset.card_fin</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238244940,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620702444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 238245203,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620702671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Can't you write <code>findim (matrix (fin m) (fin n) ℝ) = m * n</code>?</p>",
        "id": 238248450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620705654
    },
    {
        "content": "<p>Yes, but that doesn't state that there is some finset with finset.card or fintype with fintype.card that could form a basis.</p>",
        "id": 238248548,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620705741
    },
    {
        "content": "<p>Hmm, but that's not specific to matrices. So we should prove that as a general lemma.</p>",
        "id": 238248932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620706126
    },
    {
        "content": "<p>If you are finite dimensional:</p>\n<ul>\n<li>Then there exists a <code>finset</code> that is a basis</li>\n<li>Any two bases have the same <code>fintype.card</code></li>\n<li>Any basis has cardinality <code>findim</code></li>\n</ul>",
        "id": 238249072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620706212
    },
    {
        "content": "<p>I hope that some of those are already in mathlib, but I haven't used this part much...</p>",
        "id": 238249093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620706234
    },
    {
        "content": "<p>Yes, is there such a lemma? My examples above are from an offshoot repo that showcases mathlib with simple undergrad examples</p>",
        "id": 238249095,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620706237
    },
    {
        "content": "<p>While we're here, what's the right way to say that an <code>add_comm_group</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> is finite and free as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-module, i.e. isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Z^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n\\geq0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>?</p>",
        "id": 238265434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620719319
    },
    {
        "content": "<p>We need to turn <code>finite_free</code> from LTE into a typeclass predicate on <code>R</code>-modules, and build some API around it.</p>",
        "id": 238266484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Rank.20of.20a.20vector.20space/near/238248548\">said</a>:</p>\n<blockquote>\n<p>Yes, but that doesn't state that there is some finset with finset.card or fintype with fintype.card that could form a basis.</p>\n</blockquote>\n<p>These kinds of results can (still) be found in <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/finite_dimensional.html\"><code>finite_dimensional.lean</code></a>. I did have to rename/adapt them slightly, but there should be nothing missing.</p>\n<p>So <code>exists_is_basis_finset</code> is now <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.finset_basis\">docs#finite_dimensional.finset_basis</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.finrank_eq_card_finset_basis\">docs#finite_dimensional.finrank_eq_card_finset_basis</a> is still the same.</p>",
        "id": 238269952,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620721772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Rank.20of.20a.20vector.20space/near/238249072\">said</a>:</p>\n<blockquote>\n<p>If you are finite dimensional:</p>\n<ul>\n<li>Then there exists a <code>finset</code> that is a basis</li>\n<li>Any two bases have the same <code>fintype.card</code></li>\n<li>Any basis has cardinality <code>findim</code></li>\n</ul>\n</blockquote>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.finset_basis\">docs#finite_dimensional.finset_basis</a></li>\n<li>For potentially infinite-dimensional spaces: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mk_eq_mk_of_basis\">docs#mk_eq_mk_of_basis</a> (we have that the map from cardinals to naturals is injective for <code>fintype</code>s, right?)</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.finrank_eq_card_basis\">docs#finite_dimensional.finrank_eq_card_basis</a> and/or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.finrank_eq_card_finset_basis\">docs#finite_dimensional.finrank_eq_card_finset_basis</a> (the latter being useful if your index set is already a <code>finset</code>)</li>\n</ul>",
        "id": 238270390,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620721965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Rank.20of.20a.20vector.20space/near/238265434\">said</a>:</p>\n<blockquote>\n<p>While we're here, what's the right way to say that an <code>add_comm_group</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> is finite and free as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-module, i.e. isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Z^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n\\geq0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>?</p>\n</blockquote>\n<p>At the moment you can say something like <code>Σ (n : ℕ), basis (fin n) ℤ Λ</code> like the conclusion for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.basis_of_pid\">docs#submodule.basis_of_pid</a>.</p>\n<p>The <code>finite_free</code> typeclass sounds like a very good idea though!</p>",
        "id": 238270587,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620722047
    },
    {
        "content": "<p>Updated examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">MnR</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n\n<span class=\"c1\">-- An n × n matrix has some finite basis of cardinality n ^ 2</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"c1\">-- Why isn't there a nice coe_to_sort on finset?</span>\n            <span class=\"o\">(</span><span class=\"n\">finset.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s_basis</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional.finset_basis</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finite_dimensional.finrank_eq_card_finset_basis</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.finrank_matrix</span><span class=\"o\">,</span> <span class=\"n\">fintype.card</span><span class=\"o\">,</span> <span class=\"n\">finset.card_fin</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- An m × n matrix has some finite basis of cardinality m * n</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span>\n            <span class=\"o\">(</span><span class=\"n\">finset.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s_basis</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional.finset_basis</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finite_dimensional.finrank_eq_card_finset_basis</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.finrank_matrix</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.card</span><span class=\"o\">,</span> <span class=\"n\">finset.card_fin</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238271563,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620722518
    },
    {
        "content": "<blockquote>\n<p>-- Why isn't there a nice coe_to_sort on finset?</p>\n</blockquote>\n<p><span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 238271664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620722556
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7575\">#7575</a></p>",
        "id": 238272574,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620723005
    },
    {
        "content": "<p>Should <code>finset</code> be <code>set_like</code>?</p>",
        "id": 238274313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620723769
    },
    {
        "content": "<p>It wasn't originally what I was trying to do when I created <code>set_like</code>, but is maybe still appropriate</p>",
        "id": 238274365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620723789
    }
]