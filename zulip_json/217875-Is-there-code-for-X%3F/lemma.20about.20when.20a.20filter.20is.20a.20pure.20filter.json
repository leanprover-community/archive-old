[
    {
        "content": "<p>I am looking for a lemma of the form f ≤ pure x  ∧ f.ne_bot → f = pure x. I can't seem to find anything of this sort. Is it just plain missing?</p>",
        "id": 277699995,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649061981
    },
    {
        "content": "<p>I think you'd expect it to be stated as <code>example {X} (x : X) : is_atom (pure x : filter X)</code>, but library_search can't solve this so I guess it's missing?</p>",
        "id": 277702449,
        "sender_full_name": "David Wärn",
        "timestamp": 1649063169
    },
    {
        "content": "<p>I think it's missing, but here is a proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_pure_iff_or</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">empty_mem_iff_bot.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">empty_mem_iff_bot.not.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm_iff</span><span class=\"o\">,</span> <span class=\"n\">iff_self_and</span><span class=\"o\">,</span> <span class=\"n\">le_pure_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">pure_le_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">haf</span> <span class=\"n\">s</span> <span class=\"n\">hsf</span><span class=\"o\">,</span> <span class=\"n\">by_contra</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">inter_mem</span> <span class=\"n\">haf</span> <span class=\"n\">hsf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">singleton_inter_eq_empty.mpr</span> <span class=\"n\">has</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_pure_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_pure_iff_or</span><span class=\"o\">,</span> <span class=\"n\">or_iff_left</span> <span class=\"o\">(</span><span class=\"n\">ne_bot.ne</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)]</span>\n</code></pre></div>",
        "id": 277704087,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1649064054
    },
    {
        "content": "<p>It's basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ultrafilter.unique\">docs#ultrafilter.unique</a> applied to <code>pure</code>.<br>\nIn an old version of mathlib I have lying around, it's literally <code>ultrafilter_unique ultrafilter_pure</code> but <code>is_ultrafilter</code> seems not to have survived some refactor.</p>",
        "id": 277706724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649065580
    },
    {
        "content": "<p>Oh, that is a lot nicer!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_pure_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">ultrafilter.unique</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 277710803,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1649068012
    },
    {
        "content": "<p>OK. Should I open a PR to add le_pure_iff_eq to mathlib or should I just stick with ultrafilter.unique?</p>",
        "id": 277718098,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649072598
    },
    {
        "content": "<p>I think that could be a lemma, but please also the <code>is_atom</code> spelling.</p>",
        "id": 277718213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649072646
    },
    {
        "content": "<p>Should this go under filter.ultrafilter?</p>",
        "id": 277718301,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649072713
    },
    {
        "content": "<p>Not sure what <code>is_atom</code> is about.</p>",
        "id": 277718374,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649072757
    },
    {
        "content": "<p>An atom in an order is something which is not minimum but just above the minimum.</p>",
        "id": 277718500,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649072827
    },
    {
        "content": "<p>Interesting. First time seeing that terminology.</p>",
        "id": 277718857,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649073061
    },
    {
        "content": "<p>If something is getting connected to <code>is_atom</code> it should be <code>ultrafilter</code> itself</p>",
        "id": 277718880,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649073076
    },
    {
        "content": "<p>Hmm... <code>filter</code> does not seem to have a <code>order_bot</code> instance.</p>",
        "id": 277739091,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649082618
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.complete_lattice\">docs#filter.complete_lattice</a></p>",
        "id": 277739174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649082654
    },
    {
        "content": "<p>Bernd, if Lean is asking you to provide such an instance then it probably tried to look for it too soon (eg. before understanding which type you want to consider filters on). This often come from using <code>apply</code> instead of <code>refine</code>. If this is not enough hint you should post a mwe.</p>",
        "id": 277739458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649082781
    },
    {
        "content": "<p>OK. I'm running into problems when I try do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_atom'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_atom</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 277739469,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649082785
    },
    {
        "content": "<p>Try replacing <code>↑f</code> by <code>(f : filter \\a)</code></p>",
        "id": 277739542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649082828
    },
    {
        "content": "<p>Ah, that magically worked.</p>",
        "id": 277739681,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649082896
    },
    {
        "content": "<p>Doing <code>f.to_filter</code> also works. How come it gets confused with ↑f?</p>",
        "id": 277739865,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649082982
    },
    {
        "content": "<p>This used to work until about 8 or 10 months ago, from my experience. I think elaboration changed a bit?</p>",
        "id": 277740127,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649083108
    },
    {
        "content": "<p>How could lean guess the type of ↑f?</p>",
        "id": 277740285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649083171
    },
    {
        "content": "<p>There would be many coercions from <code>ultrafilter X</code> to many different types.</p>",
        "id": 277740331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649083191
    },
    {
        "content": "<p><code>↑</code> means \"insert an invisible function (aka, coercion) to some other type here\"</p>",
        "id": 277740338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649083194
    },
    {
        "content": "<p>That would be ambiguous on paper too.</p>",
        "id": 277740473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649083233
    },
    {
        "content": "<p>From the fact that the only coercion <code>ultrafilter ? → filter ?</code> is the coercion <code>ultrafilter α → filter α</code>.</p>",
        "id": 277740504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649083245
    },
    {
        "content": "<p>Oh wait, that does not apply here.</p>",
        "id": 277740587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649083270
    },
    {
        "content": "<p>Yaël, you're adding information that is not provided to Lean here</p>",
        "id": 277740593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649083272
    },
    {
        "content": "<p>There is not real context to disambiguate it though.</p>",
        "id": 277740596,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649083273
    },
    {
        "content": "<p>You're telling lean: I'm going to prove that \"you know what I mean by f\" is an atom.</p>",
        "id": 277740658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649083297
    },
    {
        "content": "<p>What I have in mind is the case of <code>set</code> and <code>finset</code>. <code>convex ℝ s</code> for <code>s : finset E</code> used to work, but now it doesn't.</p>",
        "id": 277740700,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649083315
    },
    {
        "content": "<p>What's the quickest way of turning <code>¬g = ⊥</code> into <code>g.ne_bot</code>? I am having a suprisingly hard time trying to make this conversion.</p>",
        "id": 277755267,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649088865
    },
    {
        "content": "<p><code>rw ← ne.def</code>?</p>",
        "id": 277755443,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649088956
    },
    {
        "content": "<p><code>by squeeze_simp</code> should give you the answer.</p>",
        "id": 277755450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649088960
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne.def\">docs#ne.def</a></p>",
        "id": 277755491,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649088964
    },
    {
        "content": "<p>Anne, this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.ne_bot\">docs#filter.ne_bot</a></p>",
        "id": 277755553,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649088999
    },
    {
        "content": "<p>ne.def does not turn it into ne_bot though.</p>",
        "id": 277755577,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649089013
    },
    {
        "content": "<p>You just want <code>\\&lt;h\\&gt;</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.ne_bot.mk\">docs#filter.ne_bot.mk</a>)</p>",
        "id": 277755663,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649089055
    },
    {
        "content": "<p>It seems I have to chain ne.def and then ne_bot_iff, which seems roundabout.</p>",
        "id": 277755687,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649089068
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">f.ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 277755699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649089075
    },
    {
        "content": "<p>there are the proofs in both directions</p>",
        "id": 277755778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649089090
    },
    {
        "content": "<p>I think that will be a good thing to add to mathlib's filter.basic.</p>",
        "id": 277755831,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649089114
    },
    {
        "content": "<p><code>filter.ne_bot</code> is just a structure with one constructor so the proof you want is <code>⟨h⟩</code></p>",
        "id": 277755850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649089120
    },
    {
        "content": "<p>Hmm... should we add the following simp lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.ne_bot_of_ne_bot</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">F.ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 277756158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649089254
    },
    {
        "content": "<p>Yes please.</p>",
        "id": 277756204,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649089274
    },
    {
        "content": "<p>Well, my question is whether it should be a  simp lemma.</p>",
        "id": 277756240,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649089289
    },
    {
        "content": "<p>I can add it to my PR about ultrafilter.is_atom</p>",
        "id": 277756241,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649089290
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.ne_bot_iff\">docs#filter.ne_bot_iff</a></p>",
        "id": 277756296,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649089319
    },
    {
        "content": "<p>yeah I just saw that too</p>",
        "id": 277756354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649089332
    },
    {
        "content": "<p>Everything is already there</p>",
        "id": 277756387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649089353
    },
    {
        "content": "<p>Yeah, but I need to convert f ≠ ⊥ to ¬ (f =  ⊥), which is getting painful.</p>",
        "id": 277756495,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649089397
    },
    {
        "content": "<p>you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne.def\">docs#ne.def</a></p>",
        "id": 277756524,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649089407
    },
    {
        "content": "<p>It's annoying because the simp normal form of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\ne b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> is <code>\\not a = b</code>,  but that filter lemma uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">a \\ne \\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⊥</span></span></span></span></p>",
        "id": 277756591,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649089436
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.ne_bot_iff_ne_bot</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">F.ne_bot</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F.ne_bot</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 277756913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649089526
    },
    {
        "content": "<p>But again, I don't know whether that should really be a simp lemma.</p>",
        "id": 277756995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649089548
    },
    {
        "content": "<p>Given that its use is a literal constructor application, I would say no.</p>",
        "id": 277757333,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649089637
    },
    {
        "content": "<p>But most of the filter lemmas that use this have <code>filter.ne_bot</code> as a typeclass assumption</p>",
        "id": 277757821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649089851
    },
    {
        "content": "<p>Made of PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/13171\">https://github.com/leanprover-community/mathlib/pull/13171</a></p>",
        "id": 277762915,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649091852
    },
    {
        "content": "<p>I just realised, why do we have this as opposed to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_zero\">docs#ne_zero</a>?</p>",
        "id": 277762963,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649091871
    }
]