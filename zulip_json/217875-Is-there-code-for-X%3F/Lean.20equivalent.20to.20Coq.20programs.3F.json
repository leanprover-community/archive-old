[
    {
        "content": "<p>Long story short I am in a situation where I need to convert at will between an inductive type parametrized with <code>a * (b * c)</code> and with <code>(a * b) * c</code>, and thus need to code the Lean equivalent of a Program. Does Lean have a mechanism for this?</p>",
        "id": 281458826,
        "sender_full_name": "Quarrie",
        "timestamp": 1651852470
    },
    {
        "content": "<p>Can you maybe give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to elaborate a bit more on what you mean?</p>",
        "id": 281461461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651853819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> In Coq, I can prove two non-defeq types to be equal using the Program feature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Require</span> <span class=\"n\">Import</span> <span class=\"n\">Program.</span>\n<span class=\"n\">Require</span> <span class=\"n\">Import</span> <span class=\"n\">Arith.</span>\n\n<span class=\"n\">Parameter</span> <span class=\"n\">Matrix</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span>\n<span class=\"n\">Parameter</span> <span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n.</span>\n\n<span class=\"n\">Program</span> <span class=\"n\">Definition</span> <span class=\"n\">id_eq</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_.</span>\n\n<span class=\"n\">Next</span> <span class=\"n\">Obligation.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.add_comm.</span>\n<span class=\"n\">Defined.</span>\n\n<span class=\"n\">Next</span> <span class=\"n\">Obligation.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.add_comm.</span>\n<span class=\"n\">Defined.</span>\n\n<span class=\"n\">Next</span> <span class=\"n\">Obligation.</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">id_eq_obligation_1.</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">id_eq_obligation_2.</span>\n  <span class=\"n\">elim_eq_rect.</span>\n  <span class=\"n\">reflexivity.</span>\n<span class=\"n\">Defined.</span>\n</code></pre></div>",
        "id": 281486958,
        "sender_full_name": "Quarrie",
        "timestamp": 1651867130
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Definition</span> <span class=\"n\">coerce_matrix</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">A.</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">Nat.add_comm.</span>\n  <span class=\"n\">exact</span> <span class=\"n\">A.</span>\n<span class=\"n\">Defined.</span>\n\n<span class=\"n\">Lemma</span> <span class=\"n\">id_eq'</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">coerce_matrix</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Proof.</span>\n  <span class=\"n\">intros.</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coerce_matrix.</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">eq_rect_r.</span>\n  <span class=\"n\">elim_eq_rect.</span>\n  <span class=\"n\">reflexivity.</span>\n<span class=\"n\">Qed.</span>\n</code></pre></div>",
        "id": 281487414,
        "sender_full_name": "Quarrie",
        "timestamp": 1651867364
    },
    {
        "content": "<p>(Code here is courtesy of Robert Rand)</p>",
        "id": 281487433,
        "sender_full_name": "Quarrie",
        "timestamp": 1651867377
    },
    {
        "content": "<p>In Lean, I have run into a similar issue where due to the equal types not being definitionally equal I need to prove them equal and then create an identity associator</p>",
        "id": 281487482,
        "sender_full_name": "Quarrie",
        "timestamp": 1651867428
    },
    {
        "content": "<p>I have this working definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_form</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">inner_product_space</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tpow</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">E</span> <span class=\"c1\">-- This is not ideal, but not dealing with the concept of zero is faster for prototyping than doing it idiomatically</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">tpow</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">reserve</span> <span class=\"kd\">postfix</span> <span class=\"bp\">`^`</span> <span class=\"o\">:</span> <span class=\"mi\">100000</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">v</span><span class=\"bp\">`^`</span> <span class=\"o\">:=</span> <span class=\"n\">tpow</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">tensor_product_family</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">AA</span> <span class=\"n\">BB</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">AA</span><span class=\"bp\">^</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">BB</span><span class=\"bp\">^</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(((</span><span class=\"n\">AA</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">BB</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">space_product_associative</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">prod</span> <span class=\"n\">a</span><span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">space_product_generates_add_comm_monoids</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">add_comm_monoid</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 281487536,
        "sender_full_name": "Quarrie",
        "timestamp": 1651867449
    },
    {
        "content": "<p>And I try to add this line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">element_product_associative</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">prod_t</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 281487561,
        "sender_full_name": "Quarrie",
        "timestamp": 1651867464
    },
    {
        "content": "<p>Which predictably throws the following type error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">quarrie</span><span class=\"bp\">/</span><span class=\"n\">Git</span><span class=\"bp\">/</span><span class=\"n\">mathlib_testing</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tensor_product.lean</span><span class=\"o\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span><span class=\"mi\">115</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">prod_t</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">b</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">prod_t</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">prod_t</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">tpow</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tpow</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281487591,
        "sender_full_name": "Quarrie",
        "timestamp": 1651867489
    },
    {
        "content": "<p>Try <code>==</code> instead of <code>=</code></p>",
        "id": 281487979,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651867693
    },
    {
        "content": "<p>Here's my best attempt at translating that Coq code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">Matrix</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">id_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.add_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coerce_matrix</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">A</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">id_eq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">coerce_matrix</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coerce_matrix</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">cast_eq_iff_heq</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">id_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281488101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651867792
    },
    {
        "content": "<p>Note lean doesn't even let me state <code>id_eq</code> with <code>=</code>, because the terms don't have the same type</p>",
        "id": 281488189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651867823
    },
    {
        "content": "<p>Related, you might be interested in <a href=\"https://github.com/leanprover-community/mathlib/pull/10255\">#10255</a> which defines tensor powers as <code>⨂[R] i : fin n, M</code> (in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_tensor_product\">docs#pi_tensor_product</a>)</p>",
        "id": 281488282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651867892
    }
]