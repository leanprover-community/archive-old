[
    {
        "content": "<p>Hi, I am trying to represent a left coset. I have seen on it paper using the notation g H. What is the best way to represent the <code>{gh : h an element of H} for g in G.</code> type? I optimistically tried g • H (• = scalar multiplication) but it didn't like it as <code>has_smul T (subgroup T)</code> doesn't exist :(</p>",
        "id": 305222784,
        "sender_full_name": "Ben",
        "timestamp": 1666294142
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 305223031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666294222
    },
    {
        "content": "<p>These \"pointwise\" instances are in the \"pointwise\" locale. You will need to use <code>open_locale pointwise</code></p>",
        "id": 305223207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666294310
    },
    {
        "content": "<p>Ah that it awesome, I was close with smul! Is there a good place to read about what the <code>open_locale pointwise</code> line does?</p>",
        "id": 305224548,
        "sender_full_name": "Ben",
        "timestamp": 1666294847
    },
    {
        "content": "<p>Hmm... You can always do a <code>grep</code> for <code>pointwise</code> to find all instances in the pointwise locale. I don't know if we have a convenient place in the docs that describes these, unfortunately.</p>",
        "id": 305224987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666295025
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib/data/set/pointwise\">file#data/set/pointwise</a> is a good place to start</p>",
        "id": 305225077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666295051
    },
    {
        "content": "<p>If you mean \"What does <code>open_locale</code> do?\" then it must be mentioned somewhere in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>.</p>",
        "id": 305225179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666295095
    },
    {
        "content": "<p>I don't think tpil describes <code>open_locale</code> unfortunately. I hope I'm wrong.</p>",
        "id": 305225312,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666295154
    },
    {
        "content": "<p>Anyway, in mathlib we have some things like notations, instances, etc., that we only want to activate <em>sometimes</em>. In those cases, we put them behind a <code>locale</code>, and \"activate\" the notation/instances/... in a given locale with this <code>open_locale</code> command. So doing <code>open_locale pointwise</code> will \"activate\" all the instances and notations that were specified to be in the <code>pointwise</code> locale.</p>",
        "id": 305225538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666295248
    },
    {
        "content": "<p>Awesome, the next thing I want to represent is <code>g • H • g⁻¹</code>. Lean doesn't seem to like right smul, would it be the same as <code>g⁻¹  •  (g • H: set G)</code> though?</p>",
        "id": 305225653,
        "sender_full_name": "Ben",
        "timestamp": 1666295298
    },
    {
        "content": "<p>No, you want <code>op g⁻¹ • g • H</code> or <code>(op g)⁻¹ • g • H</code>.</p>",
        "id": 305225750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666295341
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#localized%20notation\">https://leanprover-community.github.io/mathlib_docs/commands.html#localized%20notation</a></p>",
        "id": 305225775,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666295353
    },
    {
        "content": "<p>Ah, that's another issue altogether, and it has to do with left/right actions.</p>",
        "id": 305225776,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666295353
    },
    {
        "content": "<p>tpil is pure lean I thinnk, and <code>open_locale</code> is defined in mathlib</p>",
        "id": 305225859,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666295377
    },
    {
        "content": "<p>Ya because smul requires \"scalar\" -&gt; item -&gt; item, not item -&gt; \"scalar\" -&gt; item, right?</p>",
        "id": 305226091,
        "sender_full_name": "Ben",
        "timestamp": 1666295464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Left.20coset.20notation/near/305225750\">said</a>:</p>\n<blockquote>\n<p>No, you want <code>op g⁻¹ • g • H</code> or <code>(op g)⁻¹ • g • H</code>.</p>\n</blockquote>\n<p>Ah okay , what is op and where does it come from?</p>",
        "id": 305226197,
        "sender_full_name": "Ben",
        "timestamp": 1666295515
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite.group\">docs#mul_opposite.group</a> I think?</p>",
        "id": 305226279,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666295535
    },
    {
        "content": "<p><del>it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite.op\">docs#opposite.op</a></del></p>",
        "id": 305226339,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666295563
    },
    {
        "content": "<p>yeah but the group structure?</p>",
        "id": 305226381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666295579
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite.op\">docs#mul_opposite.op</a>, rather</p>",
        "id": 305226407,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666295591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Left.20coset.20notation/near/305226091\">said</a>:</p>\n<blockquote>\n<p>Ya because smul requires \"scalar\" -&gt; item -&gt; item, not item -&gt; \"scalar\" -&gt; item, right?</p>\n</blockquote>\n<p>More or less. The more complete answer is that if we were having \"right\" actions alongside \"left\" actions, we would need to duplicate all the theory. So it's much easier to talk about actions without sides, and then let <code>G</code> act on <code>G</code> by <code>a • b = a * b</code>, and <code>Gᵐᵒᵖ</code> act on <code>G</code> by <code>a • b = b * unop a</code>.</p>",
        "id": 305226598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666295659
    },
    {
        "content": "<p>Compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mul.to_has_smul\">docs#has_mul.to_has_smul</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mul.to_has_opposite_smul\">docs#has_mul.to_has_opposite_smul</a></p>",
        "id": 305226772,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666295731
    },
    {
        "content": "<p>This is <strong>really</strong> where <code>•</code> acquires its \"left taste\".</p>",
        "id": 305226855,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666295762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 305228162,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666296290
    },
    {
        "content": "<p>There's also <code>open_locale coset</code>, but I don't recall what it makes available</p>",
        "id": 305235532,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666299006
    },
    {
        "content": "<p>I think you might want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conj_act\">docs#conj_act</a>, as <code>conj_act.to_conj g • H</code></p>",
        "id": 306195321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666775252
    }
]