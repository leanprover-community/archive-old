[
    {
        "content": "<p>Perhaps I'm not using <code>library_search</code> correctly but I couldn't find this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Try this: exact (inv_mul_eq_iff_eq_mul₀ hnz).symm</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- failed</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnt</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 268630904,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1642644074
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnt</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">ennreal.inv_mul_cancel</span><span class=\"o\">,</span> <span class=\"n\">ennreal.mul_inv_cancel</span><span class=\"o\">,</span> <span class=\"n\">hnt</span><span class=\"o\">,</span> <span class=\"n\">hnz</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 268633469,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642646606
    },
    {
        "content": "<p>Lol thanks. I was noticing a lot of  stuff in the <code>ennreal</code> library that was duplicating lemmas that would automatically be shown for <code>real</code> by type class inference, perhaps we can add this to the list?</p>",
        "id": 268633723,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1642646855
    },
    {
        "content": "<p>I don't understand what you mean by <code>automatically</code>. What's an example of such a lemma? For this example, ennreal is not a <code>group_with_zero</code> because <code>group_with_zero.inv_zero</code> and <code>group_with_zero.mul_inv_cancel</code> are not true. It is a <code>monoid_with_zero</code>.</p>",
        "id": 268634265,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642647391
    },
    {
        "content": "<p>Yeah I was just wondering if <code>ennreal</code> was part of a more specific class that derives this (like <code>monoid_with_zero_and_top</code> or something), but clearly it isn't. In this case I'd assume we would want to add this lemma to <code>src/data/real/ennreal.lean</code>?</p>",
        "id": 268634895,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1642647854
    }
]