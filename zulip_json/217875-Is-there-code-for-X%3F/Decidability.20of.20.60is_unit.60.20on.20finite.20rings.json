[
    {
        "content": "<p>The following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"n\">a.val</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>but this does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"bp\">==&gt;</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Shouldn't there be a decidability instance catching basically any predicate on a finite structure like <code>zmod 8</code>?</p>",
        "id": 286533053,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655494061
    },
    {
        "content": "<p>Does it work for <code>fin 8</code>?</p>",
        "id": 286533554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655494347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Decidability.20of.20.60is_unit.60.20on.20finite.20rings/near/286533554\">said</a>:</p>\n<blockquote>\n<p>Does it work for <code>fin 8</code>?</p>\n</blockquote>\n<p>No, it gives the same error.</p>",
        "id": 286535163,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655495398
    },
    {
        "content": "<p>The following does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"n\">a.val</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">ha.unit</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm a bit confused now...</p>",
        "id": 286535847,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655495837
    },
    {
        "content": "<p>one way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">is_unit</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 286536095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655495979
    },
    {
        "content": "<p>Probably a better way would be to write an instance for <code>decidable (is_unit x)</code> on a finite type, but where to put it?</p>",
        "id": 286536245,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655496045
    },
    {
        "content": "<p>What I actually need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.legendre_symbol.zmod_char</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">zmod</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ₈</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>for which your suggestion to use <code>unfold is_unit</code> does not seem to work.</p>",
        "id": 286536363,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655496123
    },
    {
        "content": "<p>It does with <code>dec_trivial!</code>, though.</p>",
        "id": 286536434,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655496165
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ₈</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_unit</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286536477,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655496204
    },
    {
        "content": "<p>Off-topic fun fact: did you know that <code>zmod_char</code> is a substring of <code> category_theory.limits.multiequalizer.category_theory.limits.multicospan_index.snd_pi_map.category_theory.limits.has_equalizer</code>?</p>",
        "id": 286536490,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655496213
    },
    {
        "content": "<p>The search window is always good for surprises...</p>",
        "id": 286536582,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655496256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Decidability.20of.20.60is_unit.60.20on.20finite.20rings/near/286536245\">said</a>:</p>\n<blockquote>\n<p>Probably a better way would be to write an instance for <code>decidable (is_unit x)</code> on a finite type, but where to put it?</p>\n</blockquote>\n<p>In <code>algebra.group.units</code> near the definition of <code>is_unit</code>?</p>",
        "id": 286536967,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655496516
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 286537550,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655496907
    },
    {
        "content": "<p>I'm trying to write this decidability instance for <code>is_unit</code>. But I'm running into the problem that I cannot get <code>[fintype Mˣ]</code> from <code>[monoid M] [fintype M]</code> automatically. Is this a gap in mathlib?</p>",
        "id": 286538071,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655497200
    },
    {
        "content": "<p>You will also need <code>decidable_eq M</code></p>",
        "id": 286538168,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655497255
    },
    {
        "content": "<p>It works with that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.units</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 286538308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655497330
    },
    {
        "content": "<p>OK, so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_unit</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fintype.decidable_exists_fintype</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In which file should this go? <code> algebra.group.units</code> does not know about <code>fintype</code>s.<br>\nBut <code>data.fintype.basic</code> knows about units, so perhaps this would be a good location.</p>",
        "id": 286538708,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655497561
    },
    {
        "content": "<p>Perhaps near <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_units\">docs#fintype.card_units</a> ?</p>",
        "id": 286538799,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655497606
    },
    {
        "content": "<p>.</p>",
        "id": 286543268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655500111
    },
    {
        "content": "<p>It might be worth changing that to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)],</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">id</span>\n</code></pre></div>\n<p>Which both applies more generally, and can go in an earlier file.</p>",
        "id": 286543269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655500111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Decidability.20of.20.60is_unit.60.20on.20finite.20rings/near/286536490\">said</a>:</p>\n<blockquote>\n<p>Off-topic fun fact: did you know that <code>zmod_char</code> is a substring of <code> category_theory.limits.multiequalizer.category_theory.limits.multicospan_index.snd_pi_map.category_theory.limits.has_equalizer</code>?</p>\n</blockquote>\n<p>So is <code>zero_le_three</code> :P</p>",
        "id": 286558358,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655512819
    },
    {
        "content": "<p>Someone really needs to rename those instances</p>",
        "id": 286558361,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655512827
    },
    {
        "content": "<p>I think the long names are funny but it's not clear to me that they need to be renamed. Bytes are cheap and the names are descriptive.</p>",
        "id": 286640556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655543588
    },
    {
        "content": "<p>I don't think of putting <code>category_theory</code> three times in the name as very descriptive, Kevin.</p>",
        "id": 286640618,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655543653
    },
    {
        "content": "<p>The problem is that autogenerated names apply the namespace to every atom rather than just once at the end. I guess this is a conservative behavior to avoid mixing up different namespaces, but empirically most declarations use stuff from a single namespace, and people think of namespaces as, well... spaces, not as a step you keep jumping on and off from.</p>",
        "id": 286640722,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655543855
    },
    {
        "content": "<p>I see, you're right in that it can be trimmed a bit ;-)</p>",
        "id": 286640789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655543952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Decidability.20of.20.60is_unit.60.20on.20finite.20rings/near/286640556\">said</a>:</p>\n<blockquote>\n<p>I think the long names are funny but it's not clear to me that they need to be renamed. Bytes are cheap and the names are descriptive.</p>\n</blockquote>\n<p>At some point we're also going to run into names &gt;100 chars long, making them unusable because of the liner. I think the cosine rule is close already</p>",
        "id": 286642325,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655546282
    },
    {
        "content": "<p>We can also teach the linter to ignore lines with &lt;= 2 spaces in or something like that, it already ignores lines containing a <code>http</code>.</p>",
        "id": 286644166,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655548770
    },
    {
        "content": "<p>Names of instances don't really matter, it's just funny when they pop up in the documentation search for totally unrelated things.</p>",
        "id": 286645346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655550351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Decidability.20of.20.60is_unit.60.20on.20finite.20rings/near/286543269\">said</a>:</p>\n<blockquote>\n<p>It might be worth changing that to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)],</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">id</span>\n</code></pre></div>\n<p>Which both applies more generally, and can go in an earlier file.</p>\n</blockquote>\n<p>I have now added this in <code>algebra.group.units</code>:  <a href=\"https://github.com/leanprover-community/mathlib/pull/14873\">#14873</a>. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 286926978,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655823777
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14873\">#14873</a> is now green. Would it make sense to label this as <code>easy</code>?</p>",
        "id": 286971797,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655844076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Decidability.20of.20.60is_unit.60.20on.20finite.20rings/near/286645346\">said</a>:</p>\n<blockquote>\n<p>Names of instances don't really matter, it's just funny when they pop up in the documentation search for totally unrelated things.</p>\n</blockquote>\n<p>They do matter at times, particularly when you want to use said instances to define other instances</p>",
        "id": 286994281,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655861641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Can <a href=\"https://github.com/leanprover-community/mathlib/pull/14873\">#14873</a> be merged now, or is there more to be done?</p>",
        "id": 287248963,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656018248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Can you push this onto the merge queue?</p>",
        "id": 287511826,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656274459
    },
    {
        "content": "<p>I'll let <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> make the call; it looks fine to me</p>",
        "id": 287511868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656274518
    }
]