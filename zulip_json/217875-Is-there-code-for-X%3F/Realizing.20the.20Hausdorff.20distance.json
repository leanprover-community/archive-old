[
    {
        "content": "<p>Do we know that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/emetric.Hausdorff_edist\">docs#emetric.Hausdorff_edist</a> is realized when the two sets are (seq) compact? I'm pretty sure this is true. Context is <a href=\"https://github.com/leanprover-community/mathlib/pull/11458\">#11458</a></p>",
        "id": 275742466,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647560022
    },
    {
        "content": "<p>I can't find it (it should be easy to prove for compact sets). <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ?</p>",
        "id": 275742828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647560270
    },
    {
        "content": "<p>Btw Sébastien I'm proving a bunch of ball lemmas in <a href=\"https://github.com/leanprover-community/mathlib/pull/11458\">#11458</a> and I would appreciate some help in finishing off stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.hausdorff_distance</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">thickening_thickening</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">thickening</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">thickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">thickening</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">thickening_cthickening</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">thickening</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">cthickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">thickening</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">cthickening_thickening</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cthickening</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">thickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cthickening</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">cthickening_cthickening</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cthickening</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">cthickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cthickening</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 275747194,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647564097
    },
    {
        "content": "<p>One inclusion is obvious, but is the other one true? If <code>a</code> and <code>b</code> are at distance <code>&lt; ε + δ</code>, is there a <code>c</code> at distance <code>&lt; ε</code> from <code>a</code> and <code>&lt; δ</code> from <code>b</code>? This hurts my brain...</p>",
        "id": 275749388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647566269
    },
    {
        "content": "<p>Yeah the reverse inequality should not always hold. If you thicken <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo><mo>⊂</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\{0\\}\\subset\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> by 3/4 you get {0} again, the same if you do it twice, but if you thicken by 3/2 you get {-1,0,1}.</p>",
        "id": 275749462,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647566324
    },
    {
        "content": "<p>So this is wrong as well, right? <code>ball a ε + ball b δ = ball (a + b) (ε + δ)</code><br>\nWhat's the correct generality to salvage my results? I want them over a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-module anyway.</p>",
        "id": 275749597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647566409
    },
    {
        "content": "<p>Surely <code>normed_field</code> is enough?</p>",
        "id": 275750022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647566809
    },
    {
        "content": "<p>Oh, better, <code>module ℝ E</code>. How does that sound?</p>",
        "id": 275750073,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647566871
    },
    {
        "content": "<p><code>module ℝ E</code> should work. p-adic fields are problematic as the norm function takes discrete values.</p>",
        "id": 275750179,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647566949
    },
    {
        "content": "<p>I swear <code>module ℚ E</code> should be enough, but I don't know which one is more practical.</p>",
        "id": 275750306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647567084
    },
    {
        "content": "<p>Well p-adic fields are Q-modules; it depends on what norm you put on E.</p>",
        "id": 275750380,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647567139
    },
    {
        "content": "<p>(Not just discrete values; due to the nonarchimedean triangle inequality, thickening the r-ball by r you get the r-ball again (for p-adic fields).)<br>\n(the nonarchimedean triangle inequality says ||x+y|| &lt;= max(||x||,||y||))</p>",
        "id": 275750426,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647567194
    },
    {
        "content": "<p>What are those spaces and how can I conjure them</p>",
        "id": 275750461,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647567243
    },
    {
        "content": "<p>so I think <code>module ℝ E</code> is not enough and you need <code>normed_space</code> which says how the smul interacts with the norm.</p>",
        "id": 275750635,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647567416
    },
    {
        "content": "<p>I think <code>normed_space ℚ E</code> works for the two lemmas starting with <code>thickening</code> but not the two starting with <code>cthickening</code> (which should work however if E is complete). ℚ can be replaced with any <code>normed_field</code> with values of norm function dense in <code>ℝ</code>, I believe. <code>normed_space ℝ E</code>should work for all four.</p>",
        "id": 275751081,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647567980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Realizing.20the.20Hausdorff.20distance/near/275750461\">said</a>:</p>\n<blockquote>\n<p>What are those spaces and how can I conjure them</p>\n</blockquote>\n<p>The field of p-adic numbers is defined to be the completion of ℚ equipped with the norm ||a/b|| = base^(v(b)-v(a)), where v(a) is the number of times p divides a, for a in ℤ, and base &gt; 1 a real number usually taken to be p. (ℚ equipped with that norm is already a field satisfying the nonarchimedean triangle inequality, we don't need completion for this purpose.)</p>",
        "id": 275751285,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647568210
    },
    {
        "content": "<p>You may want to read <a href=\"https://en.wikipedia.org/wiki/Ostrowski%27s_theorem\">https://en.wikipedia.org/wiki/Ostrowski%27s_theorem</a> (do we have this in mathlib?)</p>",
        "id": 275751427,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647568403
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Ostrowski.20theorems.20formalized.20in.20Lean.203\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Ostrowski.20theorems.20formalized.20in.20Lean.203</a> but I don't think it made it to mathlib</p>",
        "id": 275751991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647568932
    },
    {
        "content": "<p>For a proof with <code>normed_space</code>, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_space.sphere_nonempty\">docs#normed_space.sphere_nonempty</a></p>",
        "id": 275880903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647652774
    }
]