[
    {
        "content": "<p>Is there something like <code>finset.induction_on</code> for <code>fintype</code>?</p>",
        "id": 208401637,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598653873
    },
    {
        "content": "<p>There isn't a notion of <code>has_insert</code> for <code>fintype</code>, but you could use <code>finset.induction_on</code> to prove things about <code>finset.univ</code></p>",
        "id": 208405501,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598657612
    },
    {
        "content": "<p>I see. Isn't there a way to proof something for an empty type then show that if it holds for a type with <code>n</code> elements it holds for a type with <code>n + 1</code> elements? Something like induction on <code>fintype.card</code>?</p>",
        "id": 208407614,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598660592
    },
    {
        "content": "<p>It's not even true that if something holds for a type with <code>n</code> elements then it holds for another type with <code>n</code> elements</p>",
        "id": 208407654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598660643
    },
    {
        "content": "<p>I guess the inductive step could be if it holds for every type with <code>n</code> elements, then it holds for every type with <code>n+1</code> elements--this is just induction on the cardinality</p>",
        "id": 208407754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598660785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60fintype.2Einduction_on.60/near/208407654\">said</a>:</p>\n<blockquote>\n<p>It's not even true that if something holds for a type with <code>n</code> elements then it holds for another type with <code>n</code> elements</p>\n</blockquote>\n<p>Not sure about that, at least in a scenario where _all_ we know about the type is its cardinality. Then <code>α β : Type</code> with the same cardinality are pretty much indistinguishable.</p>",
        "id": 208408631,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598662016
    },
    {
        "content": "<p>And yes, essentially, I would like to have induction on the cardinality. However, with <code>set n := fintype.card α with hn, induction n</code> the <code>induction</code> tactic fails to create a new goal and with <code>let n := fintype.card α, induction n</code> the meaning of <code>n = 0</code> or <code>n = k + 1</code> in the induction branches (apparently) gets lost.</p>",
        "id": 208408734,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598662198
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- The goal here is:</span>\n    <span class=\"c1\">-- `⊢ (let n : ℕ := fintype.card α in ∃ (k : ℕ) (H : k &gt; 0), f^[k] a = a) 0`</span>\n    <span class=\"c1\">-- Even the `sorry` tactic fails...</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208408851,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598662323
    },
    {
        "content": "<p>Also, its not the first time I end up with a goal of the form <code>(let something = something in ...)</code> and I have no clue what it's supposed to mean. Does it mean I did something wrong or I just don't know how to handle such goals?</p>",
        "id": 208408869,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598662405
    },
    {
        "content": "<p>I just realized that the term <code>(let n : ℕ := fintype.card α in ∃ (k : ℕ) (H : k &gt; 0), f^[k] a = a) 0</code> in the goal is not even well typed... I am pretty sure this isn't supposed to happen, at least, it feels really weird.</p>",
        "id": 208408974,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598662624
    },
    {
        "content": "<p>This may be a problem with the <code>induction</code> tactic I feel. Shouldn't it fail like in <code>set n := fintype.card α with hn, induction n</code> instead of creating an ill-typed goal?</p>",
        "id": 208409127,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598662915
    },
    {
        "content": "<p>Well, after messing around in term mode a bit, I arrived at the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- The hypothesis `nh` is useless.</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208409566,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598663531
    },
    {
        "content": "<p>The example below is way more readable and generates the same goals.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- The hypothesis `nh` is useless.</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208409658,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598663669
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 208413039,
        "sender_full_name": "Chris Wong",
        "timestamp": 1598669132
    },
    {
        "content": "<p>You should not induct on a let bound variable</p>",
        "id": 208413953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598670579
    },
    {
        "content": "<p><code>induction</code> was apparently not built to handle it</p>",
        "id": 208413960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598670593
    },
    {
        "content": "<p>To do this kind of thing you should do <code>generalize hn : fintype.card α = n, induction n</code></p>",
        "id": 208414012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598670625
    },
    {
        "content": "<p>Actually this induction will be useless the IH will never apply</p>",
        "id": 208414027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598670674
    },
    {
        "content": "<p>One example of induction on the cardinality of a <code>fintype</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_geometry.exists_unique_dist_eq_of_affine_independent/src\">src#euclidean_geometry.exists_unique_dist_eq_of_affine_independent</a> (where the key part starting the induction is</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">generalize&#39;</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">generalizing</span> <span class=\"n\">ι</span> <span class=\"o\">},</span>\n</code></pre></div>\n\n\n<p>and then later it has to compute the cardinality of a subtype <code>{x // x ≠ i}</code> to apply the induction hypothesis).</p>",
        "id": 208427769,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1598697594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60fintype.2Einduction_on.60/near/208413953\">said</a>:</p>\n<blockquote>\n<p>You should not induct on a let bound variable</p>\n</blockquote>\n<p>What is the difference between induction on a let bound variable and induction on the <code>generalize'</code> created <code>n</code>? Is it the <code>generalizing ι</code>?</p>",
        "id": 208438693,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598714165
    },
    {
        "content": "<p>Also, shouldn't <code>induction</code> throw an error instead of producing an ill-typed goal? Sounds like a bug to me.</p>",
        "id": 208438713,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1598714196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> Compare the proof states after each. The variable created by <code>set</code> is a let bound variable, i.e. it appears in the context as <code>x : t := val</code> instead of the usual <code>x : t</code>. When this gets reverted, the state ends up being different than what <code>induction</code> was expecting and it misapplies the recursion theorem.</p>",
        "id": 208450297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598729931
    },
    {
        "content": "<p>Are you sure it's ill typed? I think it's just not useful</p>",
        "id": 208450306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598729951
    },
    {
        "content": "<p>I've seen these <code>let</code> expressions applied to arguments before and never really understood what was going on. Does it mean something other than applying the body of the <code>let</code> expression?</p>",
        "id": 208450375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598730027
    },
    {
        "content": "<p>also, yes this is a bug in <code>induction</code>, but unfortunately there are very few tactics that handle let bound variables correctly. I recall Jannis mentioned this in his <a href=\"https://limperg.de/posts/2020-08-19-lean-metaprogramming.html#local-definitions\">review of lean 3 metaprogramming</a></p>",
        "id": 208450380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598730037
    },
    {
        "content": "<p>It could be that I was running into the same bug.</p>",
        "id": 208450393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598730065
    },
    {
        "content": "<p>What I usually do is reformulate the statement by hand in a way that tactics can't mess it up, e.g., explicitly quantifying over a variable <code>n : nat</code> with a hypothesis <code>n = fintype.card ι</code> or whatever</p>",
        "id": 208450406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598730113
    },
    {
        "content": "<p>and then manually apply to <code>_ rfl</code> in the final theorem</p>",
        "id": 208450451,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598730127
    },
    {
        "content": "<p>Ah, you know what I think it did just revert, expect a pi, and try to use that as the motive</p>",
        "id": 208450454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598730133
    },
    {
        "content": "<p>it's not always pretty, but it works</p>",
        "id": 208450456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598730137
    },
    {
        "content": "<p>That's what <code>generalize</code> does</p>",
        "id": 208450466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598730153
    },
    {
        "content": "<p>Usually you only need to write out the induction hyp explicitly if some occurrences of the variable are not being inducted</p>",
        "id": 208450490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598730204
    }
]