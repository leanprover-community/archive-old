[
    {
        "content": "<p>I find lemmas like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prod.fintype</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but oddly not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Did I just not search well enough? Or does this not hold because function equality is not extensional?</p>",
        "id": 267879208,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642085521
    },
    {
        "content": "<p><code>pi.fintype</code> should exist; and  <code>A \\to B</code> is defeq to <code>\\pi A, B</code></p>",
        "id": 267879341,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642085572
    },
    {
        "content": "<p>Ah, indeed, but it requires decidable equality: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html#pi.fintype\">https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html#pi.fintype</a>.</p>\n<p>Guess I’ll add that condition to my theorems for now and worry later about whether that’s a problem or not.</p>",
        "id": 267879451,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642085634
    },
    {
        "content": "<blockquote>\n<p>Ah, indeed, but it requires decidable equality:</p>\n</blockquote>\n<p>This is mildly surprising, does anybody know why?</p>",
        "id": 267883441,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642087193
    },
    {
        "content": "<p>It all comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.pi.cons\">docs#multiset.pi.cons</a></p>",
        "id": 267883711,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642087296
    },
    {
        "content": "<p>I never really understood the return type of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.pi\">docs#finset.pi</a> either. The design of this bit of the library is quite obscure to me...</p>",
        "id": 267884053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642087439
    },
    {
        "content": "<p>Oddly, I don’t have this constraint on <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html#fintype.card_set\">https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html#fintype.card_set</a> (which is about <code>α → Prop</code>)</p>",
        "id": 267884863,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642087798
    },
    {
        "content": "<p>Yeah because this is classical already</p>",
        "id": 267884943,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642087825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fintype.20arrow/near/267883441\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah, indeed, but it requires decidable equality:</p>\n</blockquote>\n<p>This is mildly surprising, does anybody know why?</p>\n</blockquote>\n<p><code>fintype</code> without decidable equality is a weird thing to begin with.<br>\nI don't see how to go about enumerating the functions from <code>α</code> to <code>bool</code> without having decidable equality on <code>α</code>.</p>",
        "id": 267890210,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642090084
    },
    {
        "content": "<p>Ah, that's what I was missing. The enumerating part is easy and doesn't require decidable equality, but then you need to make an if-then-else to get a function.</p>",
        "id": 267898429,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642093290
    }
]