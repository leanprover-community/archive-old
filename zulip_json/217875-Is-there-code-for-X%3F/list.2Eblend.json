[
    {
        "content": "<p>Does this function exist already? If not, what's the appropriate name?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.blend_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">prev</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">prev</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">prev</span><span class=\"bp\">++</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">list.blend_aux</span> <span class=\"o\">(</span><span class=\"n\">prev</span><span class=\"bp\">++</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.blend</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.blend_aux</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>Basically: given <code>f : α → list α → β</code>, map <code>f</code> over a list <code>l</code> such that for each <code>e</code> in <code>l</code>, we compute <code>f e l'</code> where <code>l'</code> is <code>l</code> with <code>e</code> removed.</p>",
        "id": 258773982,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634936444
    },
    {
        "content": "<p>Use case: imagine you have a list of hypotheses <code>l</code>. You want so simplify each hypothesis <code>h</code> using all of the other hypotheses as simp rules, but you don't want to use <code>h</code> itself as a simp rule since that will just produce <code>true</code>. So if <code>f: expr → list expr → expr</code>is \"simplify an expr using these exprs as simp rules,\" we want to do <code>l.blend f</code>.</p>",
        "id": 258774664,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634936773
    },
    {
        "content": "<p>For having roamed the <code>list</code> files recently, pretty sure we don't.</p>",
        "id": 258786002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634943273
    },
    {
        "content": "<p>I recently needed something slightly more general with <code>f : list A -&gt; A -&gt; list A</code>, where the arguments represent a prefix of the list, the next element, and the suffix.</p>",
        "id": 258796417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634953591
    },
    {
        "content": "<p>Then <code>blend</code> comes from concatenating the prefix and suffix.</p>",
        "id": 258796422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634953607
    },
    {
        "content": "<p>That could be called <code>map_with_prefix_suffix</code>? Your version could be called <code>map_with_complement</code>?</p>",
        "id": 258796438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634953650
    }
]