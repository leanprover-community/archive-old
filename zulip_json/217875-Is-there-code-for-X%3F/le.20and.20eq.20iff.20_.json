[
    {
        "content": "<p>A natural way to state many inequalities is: <code>a ≤ b</code> and <code>a = b</code> only if <code>P</code>. E.g., distance is nonnegative and equals zero only if the points are equal.<br>\nThen we use simple inequalities to prove another one by transitivity: <code>a ≤ b ≤ c</code>. In a paper, after a proof like this one can say \"so, if <code>a = c</code>, then we have <code>a = b = c</code>, thus <code>P</code> and <code>Q</code>\".</p>",
        "id": 270862916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644114528
    },
    {
        "content": "<p>How can we translate this into Lean?</p>",
        "id": 270862930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644114559
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">le_with_eq</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270863006,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644114646
    },
    {
        "content": "<p>Then we can have <code>le_with_eq.le</code> to get the inequality.</p>",
        "id": 270863013,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644114661
    },
    {
        "content": "<p>And <code>le_with_eq.trans</code>/<code>le_with_eq.trans_le</code>/<code>has_le.le.trans_le_with_eq</code></p>",
        "id": 270863032,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644114698
    },
    {
        "content": "<p>(1) I'm not sure whether this is worth a new definition, it might be easier to just state this as two separate lemmas. But I don't mind having it...<br>\n(2) <code>le_with_eq.trans_le p q = p.le.trans q</code>?<br>\n(3) I think in many cases <code>p</code> is equivalent with <code>a = b</code><br>\n(4) You probably want multiple versions of trans, like <code>le_with_eq.trans_same: le_with_eq a b p -&gt; le_with_eq b c p -&gt; le_with_eq a c p</code></p>",
        "id": 270950982,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1644225628
    },
    {
        "content": "<p>Isn't that basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_least\">docs#is_least</a>?</p>",
        "id": 270951219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644225773
    }
]