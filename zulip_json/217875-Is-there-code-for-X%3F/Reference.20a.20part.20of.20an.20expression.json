[
    {
        "content": "<p>After unfolding/simplifying expressions, sometimes I end up with a very large and complicated expression appearing in multiple assumptions and in the goal. What I usually do is <code>generalize h : copy_pasted_large_expression = x</code> and then <code>rw h at h1 h2 h3 ...</code>. Is it possible to avoid copying and pasting? Can we somehow describe the location of the expression we want to reference? For example, given an assumption like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I would like to be able to reference <code>g x y</code> by describing its location inside the type of assumption <code>h</code> (something like an expression path, taking left/right choices while descending the function application/lambda expressions). It is probably possible to write a tactic, but is there something like this already in Lean/mathlib?</p>",
        "id": 275705170,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647541358
    },
    {
        "content": "<p>I'm not aware of anything like that atm</p>",
        "id": 275706946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647542206
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to play around with?</p>",
        "id": 275713066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647545090
    },
    {
        "content": "<p>I guess it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275713524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647545291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> IIRC you once wrote some cute trick to extract the LHS of an equation from the equation. Do you remember what I'm talking about?</p>",
        "id": 275713571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647545312
    },
    {
        "content": "<p>Does this do what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>  <span class=\"c1\">-- doesn't show `:= g x y` without this!?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">G_expr</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">G_expr</span> <span class=\"n\">G_expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">G_expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275713792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647545423
    },
    {
        "content": "<p>Here lean fills out the <code>_</code> for you, which is presumably the bit you didn't want to copy-paste</p>",
        "id": 275713857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647545453
    },
    {
        "content": "<p>You can use <code>conv</code> mode to locate a particular expression, then there could be a <code>conv</code> tactic (maybe <code>generalize_goal</code>?) that would do the rest?</p>",
        "id": 275713936,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647545498
    },
    {
        "content": "<blockquote>\n<p>Here lean fills out the _ for you, which is presumably the bit you didn't want to copy-paste</p>\n</blockquote>\n<p>I'm really surprised that it works.</p>",
        "id": 275720241,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647548449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Reference.20a.20part.20of.20an.20expression/near/275713571\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> IIRC you once wrote some cute trick to extract the LHS of an equation from the equation. Do you remember what I'm talking about?</p>\n</blockquote>\n<p>Yes vaguely but I don't know how to find it. It involved some similar <code>let</code> with <code>_</code> as body trick.</p>",
        "id": 275739711,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647558080
    },
    {
        "content": "<p>Maybe <a href=\"#narrow/stream/113489-new-members/topic/Accessing.20LHS.20.2F.20RHS.20from.20equation/near/197149683\">this</a>?</p>",
        "id": 275742268,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647559871
    },
    {
        "content": "<p>Oh that's not what I was thinking of, but also good! Maybe what Kevin was thinking of</p>",
        "id": 275743406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647560692
    },
    {
        "content": "<p>I'm thinking of something more like (probably essentially the same as) what Eric wrote</p>",
        "id": 275743460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647560750
    },
    {
        "content": "<p>I tried to take <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ’s suggestion and re-do it using <code>conv</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">G_expr</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">G_expr</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but unfortunately, I get  (with <code>set_option trace.app_builder true</code> on)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">app_builder</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">an</span> <span class=\"bp\">'</span><span class=\"n\">eq'</span><span class=\"bp\">-</span><span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">unification</span> <span class=\"n\">constraint</span> <span class=\"n\">for</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">argument</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It does work if I manually specify <code>G_expr</code>’s type; after</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">G_expr</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">G_expr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>I get a goal state of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">G_expr</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">G_expr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Oh, and oddly, I cannot use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">G_expr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">G_expr</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>– maybe <code>find</code> prevents the unification from escaping?</p>",
        "id": 275838819,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647625560
    },
    {
        "content": "<p>Fun, because of this problem(?) of <code>find</code> hiding the side-effects from unification, I can prove <code>false</code>, or at least believe I am proving it, until the end of the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">≠</span> <span class=\"n\">ff</span><span class=\"o\">),</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this worth fixing?</p>",
        "id": 275841879,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647626916
    },
    {
        "content": "<p>ha, yeah, you might be able to trick the tactic monad but you can't trick the kernel :-)</p>",
        "id": 275842118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647627029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> That seems worth looking into to me. I'm not sure whether it's a bug or a known limitation that the metavariables for the let binding don't get instantiated (I think that's the word).</p>",
        "id": 275847077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647629550
    },
    {
        "content": "<p>I remember there being some nasty state bugs last time I looked at the find tactic</p>",
        "id": 275874477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647645921
    },
    {
        "content": "<p>Namely that if I tried to preserve the state properly in the lean code, the VM would crash</p>",
        "id": 275874536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647645963
    }
]