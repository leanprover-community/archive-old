[
    {
        "content": "<p>If I have an involutive function <code>f : A -&gt; A</code> where there is no <code>a</code> st <code>f a = a</code>, then I can argue that  <code>sum a \\in finset.univ A, g a</code> can be rewritten into <code>sum a \\in half_of_univ, g a + g (f a)</code>. How would I begin to formalize this?</p>",
        "id": 218159067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606560962
    },
    {
        "content": "<p>I ran into this problem in 2018 and I think there ended up being a lemma in mathlib which could help.</p>",
        "id": 218159536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606561760
    },
    {
        "content": "<p>I'm thinking of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_involution\">docs#finset.prod_involution</a> which probably isn't much help for you. It's related, but probably not enough.</p>",
        "id": 218159618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606561905
    },
    {
        "content": "<p>Now that I have vs code to hand to type stuff, I think an auxiliary lemma that would be enough is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.involutive</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 218159721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606562109
    },
    {
        "content": "<p>As a mathematician my immediate instinct would be to be summing over equivalence classes. <code>half_of_univ</code> could be the noncomputable <code>out</code> or whatever it's called. You'll have to do something to choose the x.</p>",
        "id": 218159727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606562151
    },
    {
        "content": "<p>Right, that set is the image of the noncomputable injection that you get from the surjection from alpha to alpha/~</p>",
        "id": 218159777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606562190
    },
    {
        "content": "<p>the noncomputable injection gives you an isomorphism alpha = q x bool where q is the quotient.</p>",
        "id": 218159796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606562268
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_involution\">docs#finset.sum_involution</a>  looks like it has everything I need</p>",
        "id": 218159835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606562292
    },
    {
        "content": "<p>the definition of the equivalence associated to an involution is in TPIL near the end</p>",
        "id": 218159840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606562305
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/search.html?q=involution\">https://leanprover.github.io/theorem_proving_in_lean/search.html?q=involution</a> gives nothing</p>",
        "id": 218159853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606562344
    },
    {
        "content": "<p>it's in the bit about quotients at the very end</p>",
        "id": 218159861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606562381
    },
    {
        "content": "<p>oh I misremembered, it's making unordered pairs from ordered pairs. Section 11.4.</p>",
        "id": 218159918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606562445
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_cancels_of_partition_cancels\">docs#finset.sum_cancels_of_partition_cancels</a> is also close to what I want</p>",
        "id": 218160224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606563025
    }
]