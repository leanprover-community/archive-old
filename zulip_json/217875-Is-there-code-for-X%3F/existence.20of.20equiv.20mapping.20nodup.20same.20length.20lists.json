[
    {
        "content": "<p>Is there a theorem or set of theorems in mathlib that would help to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">l1.length</span> <span class=\"bp\">=</span> <span class=\"n\">l2.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">l1.nodup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">l2.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">l1.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">l2</span>\n</code></pre></div>",
        "id": 321749589,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1673926934
    },
    {
        "content": "<p>Title should read \"equiv\" not \"function\". Not sure how to change it.</p>",
        "id": 321749966,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1673927340
    },
    {
        "content": "<p>I couldn't find anything precisely matching your description. The closest I found is you might be able to compose two usages of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup.nth_le_equiv_of_forall_mem_list\">docs#list.nodup.nth_le_equiv_of_forall_mem_list</a>.</p>",
        "id": 321791494,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673949562
    },
    {
        "content": "<p>Maybe there is something that connects equiv.perm and list.perm that you could use.</p>",
        "id": 321817643,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673958275
    },
    {
        "content": "<p>Here's a crude proof of a slight generalization of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.equiv.fintype</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">l1.length</span> <span class=\"bp\">=</span> <span class=\"n\">l2.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">l1.nodup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">l2.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">l1.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l1</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">l1</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.length</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">list.eq_nil_of_length_eq_zero</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l2</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.length</span><span class=\"o\">,</span> <span class=\"n\">add_left_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.nodup_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">h2.2</span> <span class=\"n\">l2</span> <span class=\"n\">h1</span> <span class=\"n\">h3.2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"n\">f.trans</span> <span class=\"o\">(</span><span class=\"n\">equiv.swap</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.map</span><span class=\"o\">,</span> <span class=\"n\">equiv.coe_trans</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">equiv.swap_apply_right</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">list.map_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">equiv.swap_apply_of_ne_of_ne</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h3.1</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">list.mem_map</span><span class=\"o\">,</span> <span class=\"n\">embedding_like.apply_eq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hz</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hf</span><span class=\"o\">],</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hz</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 321849521,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673967302
    },
    {
        "content": "<p>Interesting, wasn't expecting an inductive proof using <code>equiv.swap</code>. Was thinking of a proof using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.mk_compl_eq_mk_compl_finite\">docs#cardinal.mk_compl_eq_mk_compl_finite</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup.nth_le_equiv_of_forall_mem_list\">docs#list.nodup.nth_le_equiv_of_forall_mem_list</a> will be helpful there.</p>",
        "id": 321884780,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673976364
    },
    {
        "content": "<p>Just spitballing here, what's wrong with an explicit construction here? I'm hitting a roadblock in proving, I feel like I forgot to capture some edge case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l1</span> <span class=\"k\">then</span> <span class=\"n\">l2.nth_le</span> <span class=\"o\">(</span><span class=\"n\">l1.index_of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">list.index_of_lt_length.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">h1.le</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l2</span> <span class=\"k\">then</span> <span class=\"n\">l1.nth_le</span> <span class=\"o\">(</span><span class=\"n\">l2.index_of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">list.index_of_lt_length.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">h1.ge</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n</code></pre></div>",
        "id": 321901210,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673981263
    },
    {
        "content": "<p>Yeah I feel like there might even be a \"minimal equiv\", which does what it has to do on <code>l1</code>, closes every chain x1 -&gt; x2 -&gt; x3 -&gt; ... -&gt; xn by sending xn to x1, and then is the identity away from l1 union l2 (but Yakov I think that your code as it stands has problems with l1=[1] and l2=[2] because it sends 1 to 2 and also 2 to 2)</p>",
        "id": 321904367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673982234
    },
    {
        "content": "<p>I'm pretty sure I saw a PR linking <code>list.perm</code> to <code>equiv.perm</code></p>",
        "id": 321907190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673983019
    },
    {
        "content": "<p>Thank you for all of the suggestions. I'm thinking through how to proceed.</p>",
        "id": 321977699,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1674021141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/existence.20of.20equiv.20mapping.20nodup.20same.20length.20lists/near/321791494\">said</a>:</p>\n<blockquote>\n<p>I couldn't find anything precisely matching your description. The closest I found is you might be able to compose two usages of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup.nth_le_equiv_of_forall_mem_list\">docs#list.nodup.nth_le_equiv_of_forall_mem_list</a>.</p>\n</blockquote>\n<p>I'm not sure I understand what this theorem says. What would <code>l</code> and <code>α</code>be in this instance? Is <code>α = ℕ</code>? If so, can a <code>list</code> be infinite and hold all of the elements of <code>ℕ</code>?</p>",
        "id": 322198370,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1674102740
    },
    {
        "content": "<p>No, lists can't be infinite. This lemma can be used to give a bijection between l1 and l2 but there's still more work to do after that.</p>",
        "id": 322218866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674115629
    },
    {
        "content": "<p>Ok. Thank you.</p>",
        "id": 322220459,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1674116241
    },
    {
        "content": "<p>Would the rest consist of getting a bijection between (ℕ - l1) and (ℕ - l2) and then somehow combining the two bijections?</p>",
        "id": 322221110,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1674116501
    },
    {
        "content": "<p>Right, but there's already a full proof above, written after Anne's suggestion</p>",
        "id": 322221753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674116708
    },
    {
        "content": "<p>I was just curious if it could be made more succinct.</p>",
        "id": 322222028,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1674116794
    },
    {
        "content": "<p>That's an NP hard problem but the answer is probably \"yes\".</p>",
        "id": 322222660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674117023
    }
]