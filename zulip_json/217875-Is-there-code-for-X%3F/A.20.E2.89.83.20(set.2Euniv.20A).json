[
    {
        "content": "<p>I can't find any of these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 243776789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624537456
    },
    {
        "content": "<p>They all fall out as something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n      <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype.ext</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 243780332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624539014
    },
    {
        "content": "<p>Did you see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.subtype_univ_equiv\">docs#equiv.subtype_univ_equiv</a> ?</p>",
        "id": 243780668,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1624539193
    },
    {
        "content": "<p>Or even better, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set.univ\">docs#equiv.set.univ</a></p>",
        "id": 243780759,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1624539239
    },
    {
        "content": "<p>That's exactly what I wanted, thanks</p>",
        "id": 243781611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624539613
    },
    {
        "content": "<p>Unfortunately the definition doesn't work in my proof unless I make it reducible...</p>",
        "id": 243781644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624539627
    },
    {
        "content": "<p>Ah, the reason was because I needed the equiv to unfold to coe during typeclass search, which only happens if its reducible. The fix was easy - add a <code>letI</code> that does that unfolding. Thanks again, that let me tie up <a href=\"https://github.com/leanprover-community/mathlib/issues/8070\">#8070</a></p>",
        "id": 243782871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624540214
    }
]