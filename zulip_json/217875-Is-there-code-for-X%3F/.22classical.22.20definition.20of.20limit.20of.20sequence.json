[
    {
        "content": "<p>I usually do limits in the traditional sense (formalising my own \"for all epsilon exists N\" definition) when teaching 1st years. But in my course I'm working with PhD students so I don't see why I can't do the proper filter approach for a change (in fact I will probably do both). So I need the bridge. Presumably we have the following (I made no attempt to golf because I am expecting people to tell me a bunch of tricks I'm missing):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span> <span class=\"n\">x</span> <span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"c1\">-- do we have this in some form?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_limit_iff_tendsto</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto</span> <span class=\"n\">a</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">X</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_iff_exists_Ioo_subset</span> <span class=\"n\">at</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hX</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">hxl</span><span class=\"o\">,</span> <span class=\"n\">hly</span><span class=\"o\">‚ü©,</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">set</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hŒµ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hŒµ_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"n\">lt_min</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">mem_at_top_sets</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_lt</span> <span class=\"n\">at</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hŒµ1</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hŒµ2</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">tendsto_nhds</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">set.Ioo</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">Œµ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">is_open_Ioo</span><span class=\"o\">)</span> <span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_at_top_sets</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224420519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611883693
    },
    {
        "content": "<p>Then all my 20 line proofs turn into things like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_limit</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_limit_iff_tendsto</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto.add</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_limit</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_limit_iff_tendsto</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto.mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224420784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611883961
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_at_top\">docs#metric.tendsto_at_top</a></p>",
        "id": 224421095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611884247
    },
    {
        "content": "<p>gaargh there was more than one <code>tendsto_at_top</code> and I didn't scroll down far enough! Thanks!</p>",
        "id": 224421823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611884901
    },
    {
        "content": "<p>the topology ones were all referring to <code>at_top</code> on the target, and the metric one has it on the source.</p>",
        "id": 224421976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611885035
    }
]