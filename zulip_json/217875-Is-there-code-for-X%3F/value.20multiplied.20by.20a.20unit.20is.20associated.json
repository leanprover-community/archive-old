[
    {
        "content": "<p>Do we not have (something like) these anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">associated_mul_unit</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">associated</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u'</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">u'</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">associated_unit_mul</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">associated</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">associated_mul_unit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hu</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255030441,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1632741385
    },
    {
        "content": "<p>I can't find it. In general, the API around associated is somewhat weak. (Wouldn't <code>associated_mul_unit</code> be more nicely expressed as <code>(associated.mk u rfl).symm</code>?)</p>",
        "id": 255031488,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632741909
    },
    {
        "content": "<p>The first lemma golfs to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">associated_mul_unit</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">associated</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">units.mul_inv_cancel_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255034463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632743526
    },
    {
        "content": "<p>One thing I've done a lot is change this sort of <code>obtain ... exact ...</code> style in my proofs to <code>let ... in ...</code>. Is there any advantages/disadvantages to this?</p>",
        "id": 255037125,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632744774
    },
    {
        "content": "<p>I don't think that works with <code>rfl</code> as a pattern</p>",
        "id": 255037981,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1632745199
    },
    {
        "content": "<p>ahh I didn't notice the <code>rfl</code></p>",
        "id": 255039029,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632745727
    }
]