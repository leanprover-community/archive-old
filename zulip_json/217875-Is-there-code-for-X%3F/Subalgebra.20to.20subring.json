[
    {
        "content": "<p>We have that coercing a subalgebra to a set factors through coercing to a subring: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_to_subring</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">S.to_subring</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It seems like we don't have the same for coercing to sort instead of set -- would this be a good addition? And should it be marked with simp? <br>\nThe same proof should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_to_subring'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S.to_subring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 288445055,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1656964336
    },
    {
        "content": "<p>This is an equality of types so it always makes me uneasy: my instinct would be that we should have an <code>equiv</code>. However <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> claimed the last time this came up that \"this sort of thing was everywhere in category theory\" or some such thing, so now I'm no longer sure.</p>",
        "id": 288447150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656965924
    },
    {
        "content": "<p>Under what circumstance would this lemma be useful?</p>",
        "id": 288450934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656968945
    },
    {
        "content": "<p>Kevin is right to worry; usually rewriting by an equality of types is not going to do you any favors</p>",
        "id": 288450966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656968979
    },
    {
        "content": "<p>Thanks for your opinions! That makes sense that one wants to be cautious about equality of types (it seems that they would in fact be \"definitionally equal\" here).<br>\nIt also turned out not to help in the case where I thought it would.</p>",
        "id": 288452386,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1656970168
    },
    {
        "content": "<p>It's certainly useful for types to be defined as definitionally equal</p>",
        "id": 288454462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656971214
    },
    {
        "content": "<p>The point is that defeq types can be simplified by <code>dsimp</code>, and this usually helps with unification. And I indeed used this trick quite a lot for my order categories stuff.</p>",
        "id": 288459261,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656975789
    },
    {
        "content": "<p>For example, if you have <code>X : BoolAlg</code> and at some point you end up with <code>x</code> an element of <code>X</code> as a preorder, then <code>x : X.to_BoundedDistribLattice.to_DistribLattice.to_Lattice.to_SemilatticeSup.to_Preorder</code>. But actually <code>x : X</code> typechecks and this type is much easier to work with (notably for typeclass inference).</p>",
        "id": 288459494,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656976041
    }
]