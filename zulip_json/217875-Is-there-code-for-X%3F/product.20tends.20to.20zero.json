[
    {
        "content": "<p>I presume I'm just missing an import here, but <code>library_search</code> and <code>suggest</code> weren't helpful, how about <code>zulip</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">i</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233188285,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617636664
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_mul\">docs#tendsto_mul</a> might help?</p>",
        "id": 233188623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617636830
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.mul\">docs#filter.tendsto.mul</a></p>",
        "id": 233188815,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617636897
    },
    {
        "content": "<p>I had a go at that and it gives this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"n\">p.fst</span> <span class=\"bp\">*</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I think it's intended for product filters</p>",
        "id": 233188878,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617636924
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 233188894,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617636930
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.const_mul\">docs#filter.tendsto.const_mul</a></p>",
        "id": 233189061,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617636996
    },
    {
        "content": "<p>Or <code>mul_const</code> in this case?</p>",
        "id": 233189110,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617637029
    },
    {
        "content": "<p>Yup, <code>by simpa using tendsto.mul_const θ hi</code> does it. Thanks!</p>",
        "id": 233189183,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617637062
    },
    {
        "content": "<p>I love that the description of this stream is \"human powered library search\" :-)</p>",
        "id": 233189718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617637320
    },
    {
        "content": "<p>I bet gpt would have found a proof for this <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 233190055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617637455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group_with_zero</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Round two!</p>",
        "id": 233192138,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617638427
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.inv'\">docs#filter.tendsto.inv'</a> ?</p>",
        "id": 233192574,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617638606
    },
    {
        "content": "<p>Although maybe doesn't work here due to noncontinuous inv</p>",
        "id": 233192614,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617638621
    },
    {
        "content": "<p>Doesn't work here because the hypothesis target filter isn't a neighbourhood</p>",
        "id": 233192660,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617638643
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.inv_tendsto_zero\">docs#filter.tendsto.inv_tendsto_zero</a></p>",
        "id": 233193061,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617638816
    },
    {
        "content": "<p>I didn't actually look at it but the name sounds useful <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 233193091,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617638833
    },
    {
        "content": "<p>That one doesn't work but the one immediately before it does! :D</p>",
        "id": 233193153,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617638882
    },
    {
        "content": "<p>And finally, what's the nicer proof of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_at_top_at_top_of_monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_le.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">nat_ceil</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">le_nat_ceil</span> <span class=\"n\">x</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>My proof works but it's hard to believe that there's nothing cleaner</p>",
        "id": 233194744,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617639637
    },
    {
        "content": "<p>Are there lemmas about tendsto and order preserving maps?</p>",
        "id": 233195335,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617639948
    },
    {
        "content": "<p>The best I could find were <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_at_top_at_top_of_monotone\">docs#filter.tendsto_at_top_at_top_of_monotone</a> and things around that</p>",
        "id": 233195457,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617640011
    },
    {
        "content": "<p>Ooh actually I just found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_one_div_add_at_top_nhds_0_nat\">docs#tendsto_one_div_add_at_top_nhds_0_nat</a> which comes a lot closer to my original problem without needing to break it into bits</p>",
        "id": 233195716,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617640158
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_coe_nat_at_top_at_top\">docs#tendsto_coe_nat_at_top_at_top</a> is the exact example I was expecting to see earlier</p>",
        "id": 233198167,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617641483
    }
]