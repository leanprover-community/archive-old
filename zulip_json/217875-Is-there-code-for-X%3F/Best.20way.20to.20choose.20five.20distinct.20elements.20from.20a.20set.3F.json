[
    {
        "content": "<p>What is the best way to choose five distinct elements of a set of cardinality at least five? Is there anything easier than converting a fintype to a list and choosing, say, the first five elements of the list?</p>",
        "id": 219531898,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1607633289
    },
    {
        "content": "<p>In particular, we want to construct explicit permutations on this set (i.e., a 3-cycle)</p>",
        "id": 219532001,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607633353
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.exists_smaller_set\">https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.exists_smaller_set</a> but I'm not sure how much it helps in your case</p>",
        "id": 219532220,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607633477
    },
    {
        "content": "<p>It gives you a finset with 5 elements in it, which are certainly distinct</p>",
        "id": 219532275,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607633514
    },
    {
        "content": "<p>But I guess the question is how to get your hands on those 5 elements.</p>",
        "id": 219651431,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607715162
    },
    {
        "content": "<p>you could take the finset apart I guess.</p>",
        "id": 219655726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607717363
    },
    {
        "content": "<p>There is almost certainly a more elegant way to do it though. What do you mean by \"get your hands on\"?</p>",
        "id": 219655759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607717392
    },
    {
        "content": "<p>I guess maybe a list with nodup would be enough</p>",
        "id": 219659744,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607719496
    },
    {
        "content": "<p>then just take it apart, unless there's an officially sanctioned way</p>",
        "id": 219659968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607719605
    },
    {
        "content": "<p>This gives you a list without duplicates with at least 5 elements. I'm already planning to PR the first lemma soon.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span> <span class=\"n\">data.set.function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">list</span> <span class=\"n\">finset</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_finset_surj_on</span> <span class=\"o\">:</span> <span class=\"n\">surj_on</span> <span class=\"n\">to_finset</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">l.nodup</span><span class=\"o\">}</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"bp\">-</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"n\">using</span> <span class=\"n\">quot.ind</span> <span class=\"k\">with</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">to_finset_eq</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">to_finset_surj_on</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h1l</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1l</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">to_finset_card_of_nodup</span> <span class=\"n\">h1l</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219677142,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607731609
    },
    {
        "content": "<p>Extending that, here's how you can get 5 variables out of the list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">to_finset_surj_on</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h1l</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1l</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">to_finset_card_of_nodup</span> <span class=\"n\">h1l</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">⟩⟩⟩⟩⟩,</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">5</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219695541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607758064
    },
    {
        "content": "<p>Should there be a tactic that does this?</p>",
        "id": 219695605,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607758190
    },
    {
        "content": "<p>Well I should also mention this method:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_as_true</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">as_true</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">is_true</span> <span class=\"n\">h_c</span><span class=\"o\">),</span>  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">is_false</span> <span class=\"n\">h_c</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h_c</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">to_finset_surj_on</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h1l</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1l</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">to_finset_card_of_nodup</span> <span class=\"n\">h1l</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">to_as_true</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h1l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"n\">e</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nd</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You can almost do this with rcases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">to_finset_surj_on</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h1l</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1l</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">to_finset_card_of_nodup</span> <span class=\"n\">h1l</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">to_as_true</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">⟩⟩⟩⟩⟩,</span> <span class=\"o\">⟨⟩⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but it complains about not being able to match on <code>decidable.rec</code>, possibly it's not using <code>whnf</code> as much as it should</p>",
        "id": 219699263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607764505
    },
    {
        "content": "<p>(also I'm surprised to find that <code>to_as_true</code> is not proven)</p>",
        "id": 219699273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607764534
    }
]