[
    {
        "content": "<p>Do we have something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fin_range_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list.fin_range</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">fin.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">list.fin_range</span><span class=\"o\">,</span> <span class=\"n\">list.range_succ_eq_map</span><span class=\"o\">,</span> <span class=\"n\">list.pmap</span><span class=\"o\">,</span> <span class=\"n\">list.pmap_map</span><span class=\"o\">,</span> <span class=\"n\">list.map_pmap</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.fin_range_succ\">docs#list.fin_range_succ</a> doesn't exist</p>",
        "id": 263986176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638875600
    },
    {
        "content": "<p>Eh, this should be covered by <a href=\"https://github.com/leanprover-community/mathlib/tree/fin_range\">branch#fin_range</a></p>",
        "id": 263986223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638875640
    },
    {
        "content": "<p>If you wait two weeks, my locally listable orders PR will be out</p>",
        "id": 263986284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638875660
    },
    {
        "content": "<p>I did just make <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.range_sdiff_zero\">docs#finset.range_sdiff_zero</a> so i'd be quite surprised</p>",
        "id": 263986913,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638876022
    },
    {
        "content": "<p>Got there in the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.list.map_coe_fin_range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"bp\">=</span> <span class=\"n\">list.range</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">list.fin_range</span><span class=\"o\">,</span> <span class=\"n\">list.map_pmap</span><span class=\"o\">,</span> <span class=\"n\">fin.mk</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">list.pmap_eq_map</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">list.map_id</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.list.fin_range_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list.fin_range</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">fin.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list.map_injective_iff.mpr</span> <span class=\"n\">subtype.coe_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.map_cons</span><span class=\"o\">,</span> <span class=\"n\">list.map_coe_fin_range</span><span class=\"o\">,</span> <span class=\"n\">list.range_succ_eq_map</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">list.map_map</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">fin.succ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat.succ</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">list.map_map</span> <span class=\"n\">nat.succ</span> <span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"n\">list.map_coe_fin_range</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263995531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638881386
    },
    {
        "content": "<p>This is not fun <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 263995668,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638881451
    },
    {
        "content": "<p>This is far from the most not fun of the stuff I'm dealing with...</p>",
        "id": 263995729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638881489
    },
    {
        "content": "<p>Can you go through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.ext_le\">docs#list.ext_le</a>?</p>",
        "id": 263998821,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638883022
    },
    {
        "content": "<p>Maybe. It would be slightly less bad if <code>fin.coe_succ</code> were true by rfl</p>",
        "id": 264001267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638884099
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/10654\">#10654</a>, let's move golfing there</p>",
        "id": 264006812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638886462
    }
]