[
    {
        "content": "<p>How do I go between <code>finset.sum</code> to an explicit sum? I'd imagine it's just <code>simp</code>, using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_cons\">docs#finset.sum_cons</a> three times. But <code>simp</code> doesn't do it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v0</span><span class=\"o\">,</span> <span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">]</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">v3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 285175604,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654551521
    },
    {
        "content": "<p>Also, what tactic would do this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v3</span> <span class=\"bp\">=</span>\n<span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v0</span> <span class=\"bp\">-</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">v3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 285176561,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654552020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v3</span> <span class=\"bp\">=</span>\n<span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v0</span> <span class=\"bp\">-</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">v3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>hint</code> tactic suggests that you can't do this with one tactic.</p>",
        "id": 285183516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654556150
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v0</span><span class=\"o\">,</span> <span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">]</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">v3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_fin_eq_sum_range</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works. I knew about <code>finset.sum_range_succ</code> so could see that if I could translate into this I'd probably be done, and so I tried <code>rw finset.sum_range</code> and auto-complete found <code>finset.sum_fin_eq_sum_range</code> for me.</p>",
        "id": 285183955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654556435
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_succ\">docs#fin.sum_univ_succ</a></p>",
        "id": 285184549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654556753
    },
    {
        "content": "<p>We seem to get a question asking for that lemma every week or so!</p>",
        "id": 285184594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654556764
    },
    {
        "content": "<p>With the help above I was able to finish the proof. But it looks quite ugly and takes a few seconds to compile. I'm sure such as simple proposition can be proven easier. Can anyone give me advice on how to make this proof better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lin_indep</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"bp\">-</span><span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"bp\">-</span><span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"bp\">-</span><span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.linear_independent_iff</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">2</span><span class=\"o\">],</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">lin_indep</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span>  <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g0</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">...</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">hf</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g1</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">g0</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">g1</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">g3</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">g2</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g3</span><span class=\"o\">,</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">lin_indep</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">]</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n            <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v3</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"kd\">by</span>\n            <span class=\"kd\">begin</span>\n              <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_zero_eq_one</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_one_eq_two</span><span class=\"o\">,</span> <span class=\"n\">fintype.univ_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_eq_subtype_mk</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_zero</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">],</span>\n              <span class=\"n\">refl</span><span class=\"o\">,</span>\n            <span class=\"kd\">end</span>\n     <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v3</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n     <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"kd\">by</span>\n            <span class=\"kd\">begin</span>\n              <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_smul</span><span class=\"o\">],</span>\n              <span class=\"n\">abel</span><span class=\"o\">,</span>\n            <span class=\"kd\">end</span>\n     <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">]</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span>\n            <span class=\"kd\">begin</span>\n              <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_zero_eq_one</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_one_eq_two</span><span class=\"o\">,</span> <span class=\"n\">fintype.univ_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_eq_subtype_mk</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_zero</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">],</span>\n              <span class=\"n\">refl</span><span class=\"o\">,</span>\n            <span class=\"kd\">end</span>\n     <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285209232,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654584139
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">better_form</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">]</span> <span class=\"bp\">-</span> <span class=\"n\">fin.snoc</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">]))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vec_head</span><span class=\"o\">,</span> <span class=\"n\">vec_tail</span><span class=\"o\">,</span> <span class=\"n\">fin.snoc</span><span class=\"o\">,</span> <span class=\"n\">fin.tail</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">snoc_tail_lin_indep</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lin_indep</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"n\">fin.snoc</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">fintype.linear_independent_iff</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">lin_indep</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hli</span> <span class=\"o\">:</span>  <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n                  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">fin.cons</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">fin.init</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">lin_indep</span> <span class=\"n\">_</span> <span class=\"n\">hli</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">g0</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span>   <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">lin_indep</span> <span class=\"mi\">0</span><span class=\"o\">,</span>               <span class=\"n\">rw</span> <span class=\"n\">sub_zero</span> <span class=\"n\">at</span> <span class=\"n\">g0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">g1</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">lin_indep</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">g0</span> <span class=\"n\">at</span> <span class=\"n\">g1</span><span class=\"o\">,</span>  <span class=\"n\">rw</span> <span class=\"n\">sub_zero</span> <span class=\"n\">at</span> <span class=\"n\">g1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">lin_indep</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">g1</span> <span class=\"n\">at</span> <span class=\"n\">g2</span><span class=\"o\">,</span>  <span class=\"n\">rw</span> <span class=\"n\">sub_zero</span> <span class=\"n\">at</span> <span class=\"n\">g2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">g3</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">lin_indep</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">g2</span> <span class=\"n\">at</span> <span class=\"n\">g3</span><span class=\"o\">,</span>  <span class=\"n\">rw</span> <span class=\"n\">sub_zero</span> <span class=\"n\">at</span> <span class=\"n\">g3</span><span class=\"o\">,</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">g0</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">g1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">g2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">g3</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">smul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span>  <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span>\n          <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span>  <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span>\n          <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">4</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">5</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"n\">add_assoc</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hg</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lin_indep</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n<span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"bp\">-</span><span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"bp\">-</span><span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">better_form</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">snoc_tail_lin_indep</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">lin_indep</span>\n</code></pre></div>",
        "id": 285252355,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654609459
    },
    {
        "content": "<p>This is a bit better :)</p>",
        "id": 285252377,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654609467
    },
    {
        "content": "<p>The problem is ultimately in how you state the lemma - how you express <code>![v1-v2, v2-v3, v3 - v4, v4] </code>, basically.</p>",
        "id": 285252433,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654609490
    },
    {
        "content": "<p>On some level this is a computational algebra task, which Lean has no natural facility in. That's the comm and assoc stuff at the end. Everything else is really just... making sure you're using sensible defintions.</p>",
        "id": 285252667,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654609581
    },
    {
        "content": "<p>If you could express <code>![v1, v2, v3, v4]</code> as the image under a suitable linear map of <code>![v1-v2, v2-v3, v3 - v4, v4]</code> - bearing in mind that to use, say, <code>linear_independent.map'</code> you would have to define a map on<code>V</code> itself - this would be easier. But different expressions of <code>![v1-v2, v2-v3, v3 - v4, v4]</code>produce different difficulties.</p>",
        "id": 285252983,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654609716
    },
    {
        "content": "<p>In general, given an arbitrary linear combination of <code>![v1, v2, v3, v4]</code> and proving linear independence from the linear independence of the v_i is going to be very close to showing that some matrix is non-singular...</p>",
        "id": 285253223,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654609807
    },
    {
        "content": "<p>I note, by the way, that we don't seem to have something like <code>vec_update</code> or <code>vec_rotate</code> which makes this trickier to construct, as you can see.</p>",
        "id": 285253825,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654610054
    },
    {
        "content": "<p><code>vec_update</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.update\">docs#function.update</a></p>",
        "id": 285261871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654613281
    },
    {
        "content": "<p><code>vec_rotate</code> is composition with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_rotate\">docs#fin_rotate</a></p>",
        "id": 285261937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654613292
    },
    {
        "content": "<p>Aye. But we seem to have <code>vec_cons</code> despite having <code>fin.cons</code> also, unless I'm wrong?</p>",
        "id": 285305164,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654631565
    },
    {
        "content": "<p>I think the motivation is that the latter elaborates badly on non-dependent types. That may well be a concern for <code>update</code> too.</p>",
        "id": 285310537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654634356
    },
    {
        "content": "<p>Huh, makes sense.</p>",
        "id": 285310831,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654634493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Making.20.60finset.2Esum.60.20into.20an.20explicit.20sum/near/285310537\">said</a>:</p>\n<blockquote>\n<p>I think the motivation is that the latter elaborates badly on non-dependent types. That may well be a concern for <code>update</code> too.</p>\n</blockquote>\n<p>The issue was specifically that the <code>![1, 2, 3]</code> notation elaborated badly and didn't get pretty-printed correctly (even with type ascriptions etc.)</p>",
        "id": 285511151,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1654768793
    }
]