[
    {
        "content": "<p>Is there a way to flatten a <code>v : option (option nat))</code> into a <code>v' : option nat</code>?</p>",
        "id": 222316853,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610381002
    },
    {
        "content": "<p>that looks like something a monad does. And option is a monad.</p>",
        "id": 222316918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610381027
    },
    {
        "content": "<p>I think it's <code>option.join</code>.</p>",
        "id": 222317072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610381077
    },
    {
        "content": "<p>lol I found this with <code>library_search</code> and it looks like Yakov put it there last week.</p>",
        "id": 222317199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610381137
    },
    {
        "content": "<p>The general join for a monad is <code>mjoin</code>. So if you know you have a monad instance, you can just use that.</p>",
        "id": 222317351,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610381194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Flatten.20Option/near/222317199\">said</a>:</p>\n<blockquote>\n<p>lol I found this with <code>library_search</code> and it looks like Yakov put it there last week.</p>\n</blockquote>\n<p>How did you find it with <code>library_search</code>? I tried to do it that way too, but it didn't work out.</p>",
        "id": 222317370,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610381200
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mjoin\">docs#mjoin</a></p>",
        "id": 222317380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610381207
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">control.monad.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- try this: option.join</span>\n</code></pre></div>",
        "id": 222317772,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610381378
    },
    {
        "content": "<p>mjoin and option.join should do the same thing (that's proven), but there will like be more lemmas about how option.join works with option than the general mjoin</p>",
        "id": 222321883,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610382992
    },
    {
        "content": "<p>Lemmas like join_eq_some and join_eq_some</p>",
        "id": 222321921,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610383011
    },
    {
        "content": "<p>May I ask what the use case is? How will you use the output flattened option? It's likely that you can just bind on the original, and that might be more performant.</p>",
        "id": 222322032,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610383071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Flatten.20Option/near/222322032\">said</a>:</p>\n<blockquote>\n<p>May I ask what the use case is? How will you use the output flattened option? It's likely that you can just bind on the original, and that might be more performant.</p>\n</blockquote>\n<p>I'm merging one list onto another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `last` should override those positions in `first` where the value in `last` is not `empty`</span>\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">last.enum.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span> <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"k\">then</span> <span class=\"n\">e</span> <span class=\"k\">else</span> <span class=\"n\">mjoin</span> <span class=\"o\">(</span><span class=\"n\">first.nth</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>For some reason <code>option.join</code> is not available to me. Do I need to update my version of mathlib somehow?</p>",
        "id": 222323169,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610383553
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">last.zip_with</span> <span class=\"o\">(</span><span class=\"bp\">&lt;|&gt;</span><span class=\"o\">)</span> <span class=\"n\">first</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">merge</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [some 2, some 2, some 3, none]</span>\n</code></pre></div>",
        "id": 222324167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610383955
    },
    {
        "content": "<p>I used today's mathlib. Sure feel free to update. Are you working in mathlib itself or in a project with mathlib as a dependency?</p>",
        "id": 222327890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610385543
    },
    {
        "content": "<p>For those as clueless as me, the <code>&lt;|&gt;</code> comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/init/control/alternative.html#has_orelse\">has_orelse</a>.</p>",
        "id": 222338142,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610390100
    },
    {
        "content": "<p>Specifically, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.alternative\">docs#option.alternative</a></p>",
        "id": 222338335,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610390199
    },
    {
        "content": "<p>Which defines the <code>alternative</code> instance for <code>option</code> <del>as</del> equivalent to \"when given two options, if the first is <code>some</code> then that one, otherwise the second one.\"</p>",
        "id": 222338403,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610390245
    },
    {
        "content": "<p>You can also use <code>option.orelse</code> for the core function</p>",
        "id": 222338658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610390385
    },
    {
        "content": "<p>Where would I find theorems about <code>option</code>'s <code>alternative</code> and <code>or_else</code>. E.g. if I wanted to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">merge</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">list.repeat</span> <span class=\"n\">none</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>... I would need to show in some way that combining <code>none</code> with some <code>x</code> always yields <code>x</code>.</p>",
        "id": 222341414,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610391525
    },
    {
        "content": "<p>You can prove this by induction on <code>l</code>. Sorry, you can prove this by <code>ext</code> too.</p>",
        "id": 222342471,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610391934
    },
    {
        "content": "<p>Which goes like, for some <code>x ∈ merge ...</code> it is the same as the <code>x ∈ l</code></p>",
        "id": 222342740,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610392055
    },
    {
        "content": "<p>Which has to do which lemmas about how <code>zip_with</code> works.</p>",
        "id": 222342783,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610392071
    },
    {
        "content": "<p>then, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.none_orelse\">docs#option.none_orelse</a>. Note that it is tagged with simp. I expect that the simplifier would do most of the work for you.</p>",
        "id": 222342913,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610392135
    },
    {
        "content": "<p>You'd need to say <code>simp [list.eq_of_mem_repeat]</code>, since that's not tagged with simp at the moment (simp experts -- should it be?)</p>",
        "id": 222343088,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610392218
    }
]