[
    {
        "content": "<p>Do we have algorithms that decompose a number into the sum of four squares?</p>\n<p>The current proof of that theorem seems to use classical logic, but since everything in the proof involves a finite range of objects, I think the classical axioms can be gotton rid of, right?</p>",
        "id": 265472926,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1639909137
    },
    {
        "content": "<p>It's a finite search, so it should be too hard to write a slow algorithm.</p>",
        "id": 265473101,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639909346
    },
    {
        "content": "<p>Removing the classical axioms won't make it \"computational\" in any meaningful way - you need to convert it into a <code>def</code> for that</p>",
        "id": 265473648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639910160
    },
    {
        "content": "<p>What does the fact that a proof exists have to do with writing an algorithm to come up with these numbers? Aren't these two distinct questions?</p>",
        "id": 265477508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639916419
    },
    {
        "content": "<p>Well, a proof that the thing you're trying to calculate exists is a nice thing to have before wasting time on an algorithm to calculate something that doesn't</p>",
        "id": 265478094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639917303
    },
    {
        "content": "<p>Sure but you can get that proof from Wikipedia. Its formalisation doesn't help, it's an independent thing, is what I'm suggesting.</p>",
        "id": 265478611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639918179
    },
    {
        "content": "<p>Well, a constructive mathematician might expect a term of the type <code>∀ n : ℕ, ∃ a b c d : ℕ, a^2 + b^2 + c^2 + d^2 = n</code> to be a function that takes an <code>n : ℕ</code> as input and returns a quadruple <code>a b c d : ℕ</code> and a proof that they satisfy the equation.  So from that perspective a proof and an algorithm are just the same, and so you might guess that it's the use of classical reasoning that lets you say \"I can prove that <code>a b c d : ℕ</code> exist without working out what they are\".</p>",
        "id": 265479532,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639919456
    },
    {
        "content": "<p>But that's not what <code> ∃ x, p x</code> means in lean, you want <code>{ x // p x}</code> for that</p>",
        "id": 265479990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639919965
    },
    {
        "content": "<p>Sure, but I suspect this distinction trips up newcomers a lot and may have been at play in this question</p>",
        "id": 265480137,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639920205
    },
    {
        "content": "<p>The constructive mathematicians have gone off to use Coq and Agda a long time ago</p>",
        "id": 265480716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639921183
    },
    {
        "content": "<p>Generally proofs may not directly reveal a program. But given that here the search space is just the integers in [0, p-1]^4, we can easily write a program that enumerates them, and the non-computational proof can then be used to prove that the search always yields a value, I think?</p>",
        "id": 265484316,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1639926321
    },
    {
        "content": "<p>I don't think it's worth mathlib having the algorithm unless we have a less naive algorithm!</p>",
        "id": 265484911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639927148
    },
    {
        "content": "<p>Perhaps we should have a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enumerable\">docs#enumerable</a> types like 4-tuples of nat</p>",
        "id": 265484919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639927192
    },
    {
        "content": "<p>Which would be the API for the dumb algorithm</p>",
        "id": 265484965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639927215
    },
    {
        "content": "<p>You can just use <code>lex ℕ (lex ℕ (lex ℕ ℕ))</code>.</p>",
        "id": 265485010,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639927314
    },
    {
        "content": "<p>How does that help without the enumerable version of find?</p>",
        "id": 265485469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639927935
    },
    {
        "content": "<p><code> ℕ × ℕ × ℕ × ℕ</code> already has an enumerable instance</p>",
        "id": 265485512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639927982
    },
    {
        "content": "<p>Ah, that assumed an enumerablt version of <code>nat.find</code>, which is pretty easy to bodge together anyway.</p>",
        "id": 265485518,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639927990
    },
    {
        "content": "<p>Well yes, but the enumerating program will work regardless of the proof - you certainly don't need it to be constructive or even be formalized</p>",
        "id": 265485519,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639927991
    },
    {
        "content": "<p>My point is that if we had the tools to easily build such enumeration programs in a single line from an existential, then mathlib wouldn't need to provide the programs themselves</p>",
        "id": 265485578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639928062
    },
    {
        "content": "<p>Note that, unless we have bootstrapping problems, one possibility is to straight up generalize <code>nat.find</code> to take in an enumerable instance.</p>",
        "id": 265485677,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639928212
    },
    {
        "content": "<p>It's in core so that's a bad option</p>",
        "id": 265486055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639928832
    },
    {
        "content": "<p>Better would be to just add <code>encodable.find</code> next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable\">docs#encodable</a></p>",
        "id": 265486061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639928853
    },
    {
        "content": "<p>But it might exist already</p>",
        "id": 265486125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639928929
    },
    {
        "content": "<p>The non-naive algorithms I know involve factoring, so if we want a non-naive algorithm then probably we first want a non-naive factoring algorithm. Fortunately we have tons of theorems about number fields :D</p>",
        "id": 265486803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639929917
    },
    {
        "content": "<p>gnfs in lean when? ;b</p>",
        "id": 265487315,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639930650
    },
    {
        "content": "<p>The serious answer is to wait until Lean 4. Of course nothing needs verifying in this algorithm; who cares if it's bug-free, if it factors, it factors.</p>",
        "id": 265487557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639930986
    }
]