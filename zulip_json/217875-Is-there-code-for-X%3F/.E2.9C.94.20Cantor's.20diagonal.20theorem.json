[
    {
        "content": "<p>Is there a proof of Cantor's diagonal theorem?</p>",
        "id": 280569460,
        "sender_full_name": "Joseph O",
        "timestamp": 1651189091
    },
    {
        "content": "<p>Is this what you are looking for? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.cantor_injective\">docs#function.cantor_injective</a></p>",
        "id": 280569520,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1651189174
    },
    {
        "content": "<p>Yes I believe that's it</p>",
        "id": 280569761,
        "sender_full_name": "Joseph O",
        "timestamp": 1651189401
    },
    {
        "content": "<p>What does <code>Type*</code> mean?</p>",
        "id": 280570338,
        "sender_full_name": "Joseph O",
        "timestamp": 1651189970
    },
    {
        "content": "<p>Is it any different from <code>Type</code>?</p>",
        "id": 280571629,
        "sender_full_name": "Joseph O",
        "timestamp": 1651191052
    },
    {
        "content": "<p>Remember that <code>Type</code> is short for <code>Type 0</code>, whose type is <code>Type 1</code>, whose type is <code>Type 2</code>, whose type is ...</p>",
        "id": 280573088,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651192340
    },
    {
        "content": "<p><code>Type*</code> stands for <code>Type u</code> where <code>u</code> is a fresh universe level variable. In Lean 4 it's <code>Type _</code>.</p>",
        "id": 280573112,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651192375
    },
    {
        "content": "<p>(There's a small technicality, though, since <code>(A B : Type*)</code> means <code>(A : Type*) (B : Type*)</code>, so both <code>A</code> and <code>B</code> can be types in different type universes.)</p>",
        "id": 280573138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651192423
    },
    {
        "content": "<p>I didn't really realize that placeholders are filled per argument in general:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo.get_nat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.get_list</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.get_nat</span> <span class=\"bp\">=</span> <span class=\"n\">y.get_list.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"c1\">-- the type of test is ∀ (x : foo ℕ) (y : foo (list ℕ)), x.get_nat = y.get_list.length → true</span>\n</code></pre></div>",
        "id": 280573696,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651192931
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 280574131,
        "sender_full_name": "Joseph O",
        "timestamp": 1651193423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 280574165,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651193464
    }
]