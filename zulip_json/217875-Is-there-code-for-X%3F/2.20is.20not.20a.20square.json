[
    {
        "content": "<p>What's the slick way to prove that 2 is not a square?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>No luck with <code>library_search</code> (at least not with simple imports), <code>omega</code>, <code>norm_num</code>, ...</p>",
        "id": 275324475,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647313413
    },
    {
        "content": "<p>This is terrible. :-) I wanted to use <code>interval_cases</code>, but then couldn't find any of the lemmas I needed for that anyway...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.interval_cases</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.le_self_mul_pos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_add_self</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.le_self_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.le_self_mul_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.le_square</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_self_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">zero_lt_two</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.le_square</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h.le</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275326307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647315734
    },
    {
        "content": "<p>Surely the first three lemmas already exist somewhere???</p>",
        "id": 275326326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647315780
    },
    {
        "content": "<p>I found </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.range</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">this</span><span class=\"bp\">;</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which seems rather overkill.</p>",
        "id": 275326757,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647316366
    },
    {
        "content": "<p>Ah, that's basically the same as yours, using overkill instead of proving a lemma <code>nat.le_square</code>, and using <code>fin_cases</code> instead of <code>interval_cases</code>.</p>",
        "id": 275326800,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647316426
    },
    {
        "content": "<p>Ah, yes, <code>nlinarith</code>+<code>interval_cases</code> is slightly nicer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275326935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647316567
    },
    {
        "content": "<p>I think that's not embarrassing!</p>",
        "id": 275326968,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647316647
    },
    {
        "content": "<p>Yes! It's actually pretty good. The only problem with it is that I still don't have a good mental model of what <code>nlinarith</code> can and can't do, which makes it feel less \"reproducible\".</p>",
        "id": 275327322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647317027
    },
    {
        "content": "<p>And I hope someone will explain whether the extra lemmas I had to write exist or not. If they don't exist I should add them.</p>",
        "id": 275327395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647317069
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.squarefree</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">squarefree</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">nat.prime_iff.mp</span> <span class=\"n\">nat.prime_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">squarefree</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.is_unit_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275332955,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647324216
    },
    {
        "content": "<p>In my opinion, this is better as a way of proving that 43 is not a square, but worse as a way of proving that 2 is not a square.</p>",
        "id": 275333214,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647324536
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">nat.dvd_prime</span> <span class=\"n\">nat.prime_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"o\">(⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">]⟩:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">he</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 275333827,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647325324
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">monotone.ne_of_lt_of_lt_nat</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_left_strict_mono</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275334964,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647326713
    },
    {
        "content": "<p>I.e., no square lies between two consecutive squares</p>",
        "id": 275335299,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647327061
    },
    {
        "content": "<p>(Credit to whoever proved that 2 is not a cube here on zulip a while ago)</p>",
        "id": 275335409,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647327158
    },
    {
        "content": "<p>I thought of this approach but couldn't find <code>nat.pow_left_strict_mono</code>; here's golfed solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">monotone.ne_of_lt_of_lt_nat</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_left_strict_mono</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 275336036,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647327738
    },
    {
        "content": "<p>Also, it's clearly a trivial consequence of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/irrational_sqrt_two\">docs#irrational_sqrt_two</a>, but I feel like it would take some work to convince lean of that</p>",
        "id": 275341798,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647332862
    },
    {
        "content": "<p>Yeah we had all this out on the discord recently for sqrt(3) with Bhavik suggesting irrationality was a quick approach, but it never seemed to be quicker than the integral approaches</p>",
        "id": 275341935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647332951
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">qr</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">qr</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_rat_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">this.1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">nq</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sq</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">rat.sqrt_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">abs_mul_self</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275342446,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647333263
    },
    {
        "content": "<p>Yeah exactly</p>",
        "id": 275342972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647333569
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat.cast_coe_nat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sq_eq_sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_two</span><span class=\"o\">,</span> <span class=\"n\">real.sq_sqrt</span><span class=\"o\">],</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">zero_le_two</span><span class=\"o\">,</span> <span class=\"n\">k.cast_nonneg</span><span class=\"o\">,</span> <span class=\"n\">real.sqrt_nonneg</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275470725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647410876
    },
    {
        "content": "<p>This seems like a good <a href=\"http://codegolf.stackexchange.com\">codegolf.stackexchange.com</a> question</p>",
        "id": 275471028,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647411261
    },
    {
        "content": "<p>Here's a \"rational root theorem\" solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dvd.intro</span> <span class=\"n\">k</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">two_pos</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a good way to turn <code>k ∣ 2</code> into <code>k = 1 ∨ k = 2</code> by computing divisors?</p>",
        "id": 275471951,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647412458
    },
    {
        "content": "<p>same idea as <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/2.20is.20not.20a.20square/near/275333827\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/2.20is.20not.20a.20square/near/275333827</a> where I used 2 a prime</p>",
        "id": 275472400,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647413099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">nat.divisors</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275472509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647413227
    },
    {
        "content": "<p>Sounds like we need <code>dvd_cases</code></p>",
        "id": 275472528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647413278
    },
    {
        "content": "<p>(Warning, the performance scales <em>very badly</em> for larger values of <code>2</code>!)</p>",
        "id": 275472574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647413319
    },
    {
        "content": "<p>I got 43 to work this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.mem_divisors_of_dvd</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">m.divisors</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">43</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">nat.divisors</span> <span class=\"mi\">43</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.mem_divisors_of_dvd</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">43</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dvd.intro</span> <span class=\"n\">k</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">nat.divisors</span> <span class=\"mi\">43</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">43</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275472612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647413396
    },
    {
        "content": "<p>Proving that it's way too general to prove 2 is not a square <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275472678,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647413450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> But with a bit of <code>norm_num</code>, a <code>dvd_cases</code> should be able to be performant, right?</p>",
        "id": 275472954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647413824
    },
    {
        "content": "<p>I was thinking about how it could be implemented similarly to the <code>interval_cases</code> PR I haven't finished yet. (My course's final exam was today, so I should have time to get back to that!)</p>",
        "id": 275473160,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647414015
    },
    {
        "content": "<p>What are the rules of the game here? Are lemmas allowed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_not_square</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.mul_self_lt_mul_self_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">is_not_square</span> <span class=\"mi\">1</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">43</span> <span class=\"o\">:=</span> <span class=\"n\">is_not_square</span> <span class=\"mi\">6</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275473575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647414492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_not_square</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">monotone.ne_of_lt_of_lt_nat</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_left_strict_mono</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/2.20is.20not.20a.20square/near/275334964\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/2.20is.20not.20a.20square/near/275334964</a></p>",
        "id": 275474130,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647415097
    },
    {
        "content": "<p>I guess we should add support for <code>nat.sqrt</code> to norm_num so one doesn't even need to compute the constants:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">43</span> <span class=\"o\">:=</span> <span class=\"n\">is_not_square</span> <span class=\"o\">(</span><span class=\"n\">nat.sqrt</span> <span class=\"mi\">43</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275474398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647415399
    },
    {
        "content": "<p>I'm already writing it</p>",
        "id": 275474409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647415408
    },
    {
        "content": "<p>Just to say that two weeks ago this came up on the discord but with sqrt(3) and in particular it does happen \"in the wild\".</p>",
        "id": 275475502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647416476
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/pull/12735\">#12735</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.sqrt_norm_num</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_not_square</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.sqrt</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">nat.sqrt_eq'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">is_not_square</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">43</span> <span class=\"o\">:=</span> <span class=\"n\">is_not_square</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275477084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647417737
    }
]