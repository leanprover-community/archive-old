[
    {
        "content": "<p>Right now it seems that we have two ways of talking about the multiplicity of a prime in a natural: using <code>multiplicity</code> (via ring theory) or <code>n.factors.count p</code>. Is there a result linking the two values anywhere?</p>",
        "id": 266274930,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640710976
    },
    {
        "content": "<p>there's also <code>padic_val_nat</code></p>",
        "id": 266274949,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640710998
    },
    {
        "content": "<p>There's also gonna be <code>factorization: nat -&gt; nat -&gt;0 nat</code> soon, (cc <span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> ); I think we definitely need a unified API for this</p>",
        "id": 266275032,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640711058
    },
    {
        "content": "<p>And there will soon be <code>factorization</code></p>",
        "id": 266275045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640711071
    },
    {
        "content": "<p>Arf! Beat me to it</p>",
        "id": 266275060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640711082
    },
    {
        "content": "<p>I suggeseted a sort of \"elementary\" definition in <a href=\"https://tqft.net/mathlib/data/nat/mul_ind\">file#data/nat/mul_ind</a>, I can work on it if people think it's a good idea to supersede all these...</p>",
        "id": 266275078,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640711094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiplicity.20in.20the.20naturals/near/266275032\">said</a>:</p>\n<blockquote>\n<p>There's also gonna be <code>factorization: nat -&gt; nat -&gt;0 nat</code> soon, (cc <span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> ); I think we definitely need a unified API for this</p>\n</blockquote>\n<p>Isn't <code>factorization</code> just taking the list of factors as a multiset, then converting this to a finsupp?</p>",
        "id": 266275090,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640711106
    },
    {
        "content": "<p>And it seems that <code>padic_val_nat</code> is just a thin wrapper around <code>multiplicity</code></p>",
        "id": 266275255,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640711241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiplicity.20in.20the.20naturals/near/266275032\">said</a>:</p>\n<blockquote>\n<p>There's also gonna be <code>factorization: nat -&gt; nat -&gt;0 nat</code> soon, (cc <span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> ); I think we definitely need a unified API for this</p>\n</blockquote>\n<p>I'm not so sure we need an API to be honest, <code>n.factors</code> and <code>multiplicity</code> are pretty independently useful (the first when you want the list of prime factors and the second for general ring theory), it's just that when the two can be used to produce the same number, we should be able to show they're the same number and decide on a canonical way to talk about that number!</p>",
        "id": 266276124,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640712024
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_val_nat_eq_factors_count\">docs#padic_val_nat_eq_factors_count</a> seems to be proved by hand, so it seems not</p>",
        "id": 266276221,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640712123
    },
    {
        "content": "<p>i guess there's now a proof with that .trans <code>padic_val_nat eq multiplicity ...</code>, but probably not the right approach</p>",
        "id": 266276241,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640712160
    },
    {
        "content": "<p>Yeah, when I proposed <code>factorization</code> it was suggested that defining it as a <code>finsupp</code> would be useful since this makes that API available.</p>",
        "id": 266276356,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640712248
    },
    {
        "content": "<p>Hmm I see, thanks for pointing that one out! I think the best approach is to have a lemma at the end of <code>data/nat/prime</code> saying that the multiplicity and factor count coincide, and declaring that <code>multiplicity</code> should be used wherever possible (since it is defined for rings, not just for naturals.</p>",
        "id": 266276388,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640712296
    },
    {
        "content": "<p>In particular I'm suggesting deprecating lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le_factors_count_mul_left\">docs#nat.le_factors_count_mul_left</a> in favour of <code>multiplicity</code> versions of themselves</p>",
        "id": 266276414,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640712330
    },
    {
        "content": "<p>In a review a few days ago <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> suggested generalising <code>factorization</code> to a unique factorization monoid that also has a normalization function.</p>",
        "id": 266276495,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640712388
    },
    {
        "content": "<p>I think that would be a good idea too, but perhaps orthogonal to this concern?</p>",
        "id": 266276518,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640712413
    },
    {
        "content": "<p>even for <code>nat</code>, <code>multiplicity</code> is a pain to work with because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicity.finite_nat_iff\">docs#multiplicity.finite_nat_iff</a>, and pretty much every theorem being about <code>multiplicity.get ...</code> or requiring a <code>finite</code> argument, which quickly becomes longwinded</p>",
        "id": 266276560,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640712463
    },
    {
        "content": "<p>Fair point. Do you think we should prefer the <code>factors.count</code> version then?</p>",
        "id": 266276621,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640712488
    },
    {
        "content": "<p>I think that seems reasonable, or <code>factorization</code> once it's done. I also quite like the <code>padic_val_nat</code> API so I could try port some things over to there eventually, things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_val_nat.div\">docs#padic_val_nat.div</a> are quite nice</p>",
        "id": 266276666,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640712561
    },
    {
        "content": "<p>(and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_succ_padic_val_nat_not_dvd\">docs#pow_succ_padic_val_nat_not_dvd</a>, this is my favourite theorem)</p>",
        "id": 266276684,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640712591
    },
    {
        "content": "<p>Right, it looks like a good portion of those lemmas could be proved without mentioning padics and just live in <code>data/nat/prime</code> or something, and the padic version could be a one or two line corollary</p>",
        "id": 266276772,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640712622
    },
    {
        "content": "<p>I think the initial PR setting up the basics of <code>factorization</code> (<a href=\"https://github.com/leanprover-community/mathlib/pull/10540\">#10540</a>) should be ready to merge now.  As <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> suggested I've added a TODO note indicating that we want to straighten out <code>factors.count</code>, <code>padic_val_nat</code>, <code>multiplicity</code>,  and the material in <code>data/pnat/factors</code>.</p>",
        "id": 266605126,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641116433
    },
    {
        "content": "<p>I also have <a href=\"https://github.com/leanprover-community/mathlib/pull/10850\">#10850</a> which adds a few lemmas involving factorizations of coprime numbers, and <a href=\"https://github.com/leanprover-community/mathlib/pull/11167\">#11167</a> which proves that we can evaluate a multiplicative function <code>f n</code> by evaluating <code>f</code> at <code>p ^ k</code> over the factorization of <code>n</code>.</p>",
        "id": 266605258,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641116669
    },
    {
        "content": "<p>Currently working on merging <code>factors.count</code> into <code>factorization</code>. It seems like we've agreed <code>factorization</code> should be the normal form (for multiplicity in the naturals), so I'm moving lemmas which talk about <code>factors.count</code> into <code>factorization</code> and stating them in terms of the latter.</p>",
        "id": 267520364,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641859822
    },
    {
        "content": "<p>I've been working on PR <a href=\"https://github.com/leanprover-community/mathlib/pull/12301\">#12301</a> to make factorization more computable. I'm currently on the path of redefining <code>factorization</code> in terms of <code>padic_val_nat</code>. <br>\nIt strikes me as odd that <code>padic_val_nat</code> is defined in terms of <code>padic_val_rat</code> instead of the other way around: This way, to evaluate <code>padic_val_nat</code>, we first cast to a rational then take the multiplicity of both the numerator and denominator, then cast the result back to a nat from an int. The other way, we could just say <code>padic_val_nat</code> is the multiplicity as a total function, and <code>padic_val_rat</code> is the difference of the padic_val_nats of the abs of the numerator and denominator. Perhaps this could be switched?</p>",
        "id": 274216894,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1646451525
    },
    {
        "content": "<p>Plus we have a bunch of strange lemmas such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_val_nat_def\">docs#padic_val_nat_def</a>, which includes argument <code>[fact p.prime]</code> when all that's necessary is <code>p \\ne 0</code>.</p>",
        "id": 274217096,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1646451826
    },
    {
        "content": "<p>I'm perhaps a bit uncomfortable calling this function <code>padic_val_nat</code> at all, since wikipedia tells me this is a concept that's only for primes.</p>",
        "id": 274217168,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1646451895
    },
    {
        "content": "<p>Refactoring is fine, I guess. But have you considered using tactics for the computations? That will often be much faster than kernel computations.</p>",
        "id": 274223132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646460151
    },
    {
        "content": "<p>If there is a specific function on naturals you want computed, I can write a norm_num extension</p>",
        "id": 274224574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646462147
    }
]