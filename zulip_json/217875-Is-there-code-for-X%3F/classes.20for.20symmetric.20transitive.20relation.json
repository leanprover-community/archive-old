[
    {
        "content": "<p>Hey! I have a symmetric transitive relation on a type, and I'd like to get the partition of “the type minus the non-reflexive points”. Is there a most efficient way to do this? The plan so far is to get rid of the non-reflexive points manually in order to get an equivalence relation, then setoid, then get its classes, and take them back to the original type.</p>",
        "id": 274983587,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647009715
    },
    {
        "content": "<p>This sounds like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. What's the context?</p>",
        "id": 274985714,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647010632
    },
    {
        "content": "<p>I have a graph <code>G</code> on <code>V</code> and a subset <code>K</code> of <code>V</code>, I want to define the connected components of <code>V-K</code>. I feel like it's better to have everything living inside <code>V</code> (so that the connected components would be given by an element of <code>set (set V))</code> because <code>K</code> will vary, and I will want to say e.g. that if <code>C</code> is such a component for a given <code>K</code>, it still is connected for a smaller <code>K'</code>, hence contained in one of its components).</p>",
        "id": 274986002,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647010763
    },
    {
        "content": "<p>But you're right, maybe I'm looking at this the wrong way.</p>",
        "id": 274986061,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647010784
    },
    {
        "content": "<p>And I defined the equivalence as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">connected_outside</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">walk</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">disjoint</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">w.support.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274986920,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647011047
    },
    {
        "content": "<p>Yeah so I would advise you to take the reflexive closure of your aforementioned <code>connected_outside</code> and then all vertices in <code>K</code> will give singleton connected components.</p>",
        "id": 274991878,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647013467
    },
    {
        "content": "<p>And then get rid of them “by hand” ?</p>",
        "id": 274991990,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647013552
    },
    {
        "content": "<p>Why do you want to get rid of them?</p>",
        "id": 274992050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647013570
    },
    {
        "content": "<p>huh, good question, actually. The end goal is to define the ends of my graph.</p>",
        "id": 274992097,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647013595
    },
    {
        "content": "<p>It feels a bit wrong to keep them (“semantically”), but actually, I don't think it would necessarily mess with the construction. Thanks for <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>-ing me :)</p>",
        "id": 274992286,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647013702
    },
    {
        "content": "<p>Well adding singleton connected components is not going to change the number of infinite components :-)</p>",
        "id": 274992317,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1647013724
    },
    {
        "content": "<p>One thing you could do is to define connected components of a <em>sub</em>graph and the <code>-K</code> operation on subgraphs.</p>",
        "id": 274992391,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647013774
    },
    {
        "content": "<p>Right, I just figured they'd get discarded when dropping the finite components anyway, which simplifies business.</p>",
        "id": 274992416,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647013788
    },
    {
        "content": "<p>But yeah I think that what you just described works simply.</p>",
        "id": 274992500,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647013807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/classes.20for.20symmetric.20transitive.20relation/near/274992391\">said</a>:</p>\n<blockquote>\n<p>One thing you could do is to define connected components of a <em>sub</em>graph and the <code>-K</code> operation on subgraphs.</p>\n</blockquote>\n<p>I was about to make the same suggestion</p>",
        "id": 274992515,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1647013817
    },
    {
        "content": "<p>What would I gain from such a strategy? It seems it would add quite a few steps in the construction, _and_ induce a need for coercions later on, no? I guess the advantage is the possibility of generic/reusable constructions?</p>",
        "id": 274992858,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647014008
    },
    {
        "content": "<p>I haven't thought much about it, but both solutions seem doable. Maybe try them out and see?</p>",
        "id": 274993090,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647014127
    },
    {
        "content": "<p>I think I'll try and stick with the basic one for now. <br>\nI noticed it's much easier to have fewer constructions and lots of lemmas: you spend more time doing actual proofs and less time frustrated with not-so-easy boilerplate.<br>\nBut I'll keep the other approach in mind for later, possibly :)</p>",
        "id": 274993476,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647014295
    },
    {
        "content": "<p>I can also sell you this approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pull</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">G'.adj</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">G'.symm</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">G'.loopless</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pull</span> <span class=\"n\">subtype.val</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">lambda</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">\\</span><span class=\"n\">notin</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>Where the pullback operation is generic and not part of your specific construction. But that is a little like reinventing subgraphs in a less usable way, probably.</p>",
        "id": 274994187,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1647014496
    },
    {
        "content": "<p>(Or replacing <code>subtype.val</code> by however the canonical inclusion map from a set to the ambient type is called.)</p>",
        "id": 274994573,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1647014659
    },
    {
        "content": "<p>heh, that's neat</p>",
        "id": 274994576,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1647014661
    },
    {
        "content": "<p>I think that's a very usable way to do subgraphs so long as you don't want to compare them.</p>",
        "id": 274994694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647014735
    }
]