[
    {
        "content": "<p>What's the best way to define k-algebras generated by, say, 2 elements x and y? What should I use as x and y?</p>",
        "id": 246108813,
        "sender_full_name": "Winston Yin",
        "timestamp": 1626362052
    },
    {
        "content": "<p>You can add an assumption <code>subalgebra.adjoin {x,y} = \\top</code>. (Thanks for the fix, Eric!)</p>",
        "id": 246109197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626362226
    },
    {
        "content": "<p>Except <code>subalgebra.span</code> is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.adjoin\">docs#algebra.adjoin</a>. We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span\">docs#submodule.span</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.closure\">docs#monoid.closure</a> as names for the analogous things, so it's always confusing.</p>",
        "id": 246109283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626362278
    },
    {
        "content": "<p>You can also ask for a surjective morphism from the free algebra on <code>fin 2</code> or <code>bool</code> or any other type with two elements</p>",
        "id": 246109306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626362283
    },
    {
        "content": "<p>We probably don't have the equivalence between these two approaches, but that would be a nice PR</p>",
        "id": 246109374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626362314
    },
    {
        "content": "<p>You might even want an <code>alg_equiv</code> to <code>free_algebra R (fin 2)</code> depending on what you mean by 2 elements</p>",
        "id": 246109510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626362383
    },
    {
        "content": "<p><code>fin 2</code> is what I needed, thanks! In cases where x and y come from something else, I will use <code>alg_equiv</code>. Thanks!</p>",
        "id": 246109686,
        "sender_full_name": "Winston Yin",
        "timestamp": 1626362441
    },
    {
        "content": "<p>I'm not sure I understood the <code>algebra.adjoin</code> approach from Johan</p>",
        "id": 246109791,
        "sender_full_name": "Winston Yin",
        "timestamp": 1626362487
    },
    {
        "content": "<p><code>alg_equiv</code> with the free algebra is too strong if you just want something generated by two elements</p>",
        "id": 246109792,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626362488
    },
    {
        "content": "<p>You can also work with <code>mv_polynomial</code>, as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.finite_type.iff_quotient_mv_polynomial\">docs#algebra.finite_type.iff_quotient_mv_polynomial</a> and friends</p>",
        "id": 246110082,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1626362607
    },
    {
        "content": "<p>I'm assuming algebras need not be commutative in this case? If so, then polynomials aren't a good choice</p>",
        "id": 246110159,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626362640
    },
    {
        "content": "<p>Johan's approach lets you specify the generators more directly as <code>x y : X</code>, as opposed to using <code>F (free_algebra.ι R X 0)</code> and <code>F (free_algebra.ι R X 1)</code> (where <code>F</code> is the morphism Adam describes)</p>",
        "id": 246110300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626362688
    },
    {
        "content": "<p>Ah yes, I was thinking about the commutative case.</p>",
        "id": 246110315,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1626362698
    },
    {
        "content": "<p>Everyone always does!</p>",
        "id": 246110374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626362722
    },
    {
        "content": "<p>A lot of the mathematicians here read research papers where ring := <code>comm_ring</code></p>",
        "id": 246110819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626362897
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.free_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_generated_by</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">free_algebra.lift</span> <span class=\"n\">A</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 246110908,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626362944
    },
    {
        "content": "<p>Just a mild abuse of matrix notation</p>",
        "id": 246110944,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626362958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I agree that <code>ring = comm_ring</code> but in my mind <code>algebra</code> still implies potentially non-commutative.</p>",
        "id": 246111434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626363140
    },
    {
        "content": "<p>Wait... do noncommutative rings exist? I thought this was an open conjecture...</p>",
        "id": 246122368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626367624
    },
    {
        "content": "<p>They're parametrised by an H^2 IIRC</p>",
        "id": 246124162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626368395
    },
    {
        "content": "<p>and I guess examples are known when the H^2 is Q/Z so they must exist</p>",
        "id": 246124263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626368417
    },
    {
        "content": "<p>I don't even know what to say about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_semiring\">docs#non_unital_semiring</a> ...</p>",
        "id": 246126150,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626369259
    },
    {
        "content": "<p>Better known as a <code>rg</code>.</p>",
        "id": 246126493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626369396
    },
    {
        "content": "<p>You're still assuming associativity...</p>",
        "id": 246126544,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626369421
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_non_associative_semiring\">docs#non_unital_non_associative_semiring</a> ?</p>",
        "id": 246126898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626369570
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_non_assoc_semiring\">docs#non_unital_non_assoc_semiring</a></p>",
        "id": 246127061,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626369620
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_non_assoc_non_distrib_semiring\">docs#non_unital_non_assoc_non_distrib_semiring</a> (phew!)</p>",
        "id": 246127478,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626369787
    },
    {
        "content": "<p>Are all Cayley-Dickson constructions distributive?</p>",
        "id": 246127970,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626369992
    },
    {
        "content": "<p>I think that by the time it's non-distrib the operations may as well just be f1 and f2</p>",
        "id": 246128761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626370345
    }
]