[
    {
        "content": "<p>I want to use the following result and I don't know how to prove it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_mem</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_ne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>My problem seems to be the following: I have no idea what <code>{i, j}</code> really is in mathlib (some kind of finset I suppose). For example I don't know how to get anything from the statement <code>x ∈ {i, j}</code>. Can someone point me to some lemmas I can use with that?</p>",
        "id": 220042208,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1608066288
    },
    {
        "content": "<p>Well, my editor answered: when hovering with the mouse over the set, it showed info about <code>insert</code> :) . I often forget how useful those tips can be.</p>",
        "id": 220042911,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1608066668
    },
    {
        "content": "<p>In this case the tactics <code>tidy</code>  and <code>finish</code>  both prove this for you.</p>",
        "id": 220043146,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608066811
    },
    {
        "content": "<p>And a term mode proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_mem</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_ne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.eq_of_mem_singleton</span> <span class=\"bp\">$</span> <span class=\"n\">set.mem_of_mem_insert_of_ne</span> <span class=\"n\">h_mem</span> <span class=\"n\">h_ne</span>\n</code></pre></div>",
        "id": 220043322,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608066912
    },
    {
        "content": "<p>You can probably do <code>cases h_mem</code> on <code>h_mem : x \\in {i,j}</code>! It's not how you're supposed to deal with it -- there will be a proper API for it -- but under the hood it's probably something like <code>x = i \\or x = j</code> or maybe <code>x = i \\or x = j \\or x \\in emptyset</code> (it used to be this but they might have changed it)</p>",
        "id": 220043338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608066922
    },
    {
        "content": "<p><code>cases</code> did not work. That's why i wanted to know the name of the thing, to be able to find related functions, like <code>finset.mem_insert</code>. Now in my original proof I do <code>rw finset.mem_insert at h_mem, cases h_mem,</code> and continue with my buisness.</p>",
        "id": 220043702,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1608067109
    },
    {
        "content": "<p>The proof tidy finds is basically what kevin suggests, its</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h_mem</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">induction</span> <span class=\"n\">h_mem</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_ne</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h_ne</span> <span class=\"o\">},</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 220044441,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608067428
    },
    {
        "content": "<p>Ok, that's strange. It means that my example was in fact not representative of what happens in my bigger lemma, because cases does not work there. I'll try to understand the difference. Thanks!</p>",
        "id": 220044883,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1608067592
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_mem</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_ne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span>\n</code></pre></div>\n<p>That corresponds better to what I needed. The difference is finset vs set. <code>cases h_mem</code> does not work here.</p>",
        "id": 220045697,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1608067959
    },
    {
        "content": "<p>Aah yeah, for finset you have to use the API. probably it's still <code>insert i (insert j empty)</code> though</p>",
        "id": 220047081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608068731
    },
    {
        "content": "<p>yes, looks like that. It's all easy now that I know that it is called <code>insert</code>. Knowing what word to search in the documentation is the key :)</p>",
        "id": 220047313,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1608068861
    },
    {
        "content": "<p>Yeah, these things are hard to figure out because some of the notation is tricky to get to the bottom of. You just have to learn what's going on. Even if you can find where it's defined in the source code it might say some stuff about scoped this and some strange syntax or maybe it's all hard coded in the C++ or whatever</p>",
        "id": 220049029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608069755
    },
    {
        "content": "<p><code>{a, b, c}</code> notation is implemented in C++</p>",
        "id": 220201548,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608173178
    }
]