[
    {
        "content": "<p>Do we have anything close to a <code>finset.pi</code>-like definition for <code>finsupp</code>? Here's how far I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finsupp</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Given a finitely supported function `f : ι →₀ finset α`, one can define the finset</span>\n<span class=\"sd\">`f.pi` of all finitely supported functions whose value at `i` is in `f i` for all `i`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">f.support.pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_pi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">_root_.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">_root_.congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">hi</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finsupp</span>\n</code></pre></div>",
        "id": 265481430,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639922368
    },
    {
        "content": "<p>Wait a second -- if iota is infinite then for some i you have f i = empty (assuming 0=bot) so the set you're considering is also empty. Is that what you mean?</p>",
        "id": 265481600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639922531
    },
    {
        "content": "<p>Yes</p>",
        "id": 265481697,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639922728
    },
    {
        "content": "<p>Wait, no, you're misunderstanding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.has_zero\">docs#finset.has_zero</a>.</p>",
        "id": 265481711,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639922748
    },
    {
        "content": "<p><code>0 : finset α</code> is <strong>not</strong> the empty set, but <code>{0}</code>. By what seems to me like a lucky coincidence, linear algebra forced upon us a definition of <code>0 : finset α</code> which is precisely the one I want in this seemingly unrelated context.</p>",
        "id": 265481810,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639922856
    },
    {
        "content": "<p>I think that should be called finset.finsupp not finsupp.pi</p>",
        "id": 265481874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639922914
    },
    {
        "content": "<p>Because what you're doing is replacing the <code>A → B</code> (pi) in finset.pi with <code>A →₀ B</code> (finsupp)</p>",
        "id": 265481899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639922982
    },
    {
        "content": "<p>But... dot notation</p>",
        "id": 265481956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639923038
    },
    {
        "content": "<p>You could rename <code>finset.pi</code> to <code>pi.finset</code> to keep dot notation as <code>finsupp.finset</code></p>",
        "id": 265482033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639923185
    },
    {
        "content": "<p>Anyway, the sorried goal is false. Do you have any idea how to fix this?</p>",
        "id": 265482085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639923262
    },
    {
        "content": "<p>I see no <code>sorry</code> ;)</p>",
        "id": 265482107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639923311
    },
    {
        "content": "<p>Okay, I have excused myself now.</p>",
        "id": 265482197,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639923462
    },
    {
        "content": "<p>Can you add the statement of <code>mem_pi</code> that you want? <code>x ∈ finsupp.pi f ↔ _</code></p>",
        "id": 265482421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639923734
    },
    {
        "content": "<p>This is what I want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_pi</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">f.pi</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I'm thinking I need <code>finsupp.extend</code>, which apparently doesn't exist?</p>",
        "id": 265485609,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639928123
    },
    {
        "content": "<p>Ahah! <code>finsupp.map_domain</code> is what I want.</p>",
        "id": 265485834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639928460
    },
    {
        "content": "<p>Sorry, it's me again. I'm still stuck at the same place, but this time with a slightly different definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">vimport</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s.pi</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_finsupp</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">s.finsupp</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 265491516,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639936320
    },
    {
        "content": "<p>I need the injection <code>(Π (a : ι), a ∈ s → α) ↪ ι →₀ α</code> which adds zeroes outside of <code>s</code>.</p>",
        "id": 265491601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639936439
    },
    {
        "content": "<p>Isn't that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.on_finset\">docs#finsupp.on_finset</a>?</p>",
        "id": 265492332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639937447
    },
    {
        "content": "<p>Yeah, that's what I'm figuring out now. I'm working through it.</p>",
        "id": 265492356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639937495
    },
    {
        "content": "<p>However, it's not quite bundled in the way I want. Do you mind if I refactor <code>finsupp.on_finset</code> to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">on_finset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 265492485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639937658
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.mk\">docs#dfinsupp.mk</a> more similar?</p>",
        "id": 265493414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639938909
    },
    {
        "content": "<p>Yeah</p>",
        "id": 265494060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639939900
    },
    {
        "content": "<p>Should I just define <code>finsupp.mk</code>, then? I don't really know much this bit of the library, so it's hard to judge.</p>",
        "id": 265494102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639939935
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mk\">docs#finsupp.mk</a> already exists and is a constructor!</p>",
        "id": 265495826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639941996
    },
    {
        "content": "<p>Ah of course! How should I name it then?</p>",
        "id": 265495916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639942098
    },
    {
        "content": "<p>I think maybe <code>extend</code> is a good name after all</p>",
        "id": 265495936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639942150
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.extend\">docs#function.extend</a> similar?</p>",
        "id": 265495939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639942164
    },
    {
        "content": "<p>No...</p>",
        "id": 265495993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639942203
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator\">docs#set.indicator</a>?</p>",
        "id": 265496008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639942217
    },
    {
        "content": "<p>Why not <code>finsupp.indicator</code> after all.</p>",
        "id": 265496390,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639942703
    }
]