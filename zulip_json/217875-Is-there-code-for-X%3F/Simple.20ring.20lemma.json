[
    {
        "content": "<p>Is there no such lemma? Seems helpful on the way to cancel subtraction of negative things, particularly if <code>c</code> is negative:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">add_right_inj</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_mul_eq_neg_mul_symm</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203303861,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594232683
    },
    {
        "content": "<p>Are you aware of the <code>noncomm_ring</code> tactic?</p>",
        "id": 203305574,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1594233520
    },
    {
        "content": "<p>E.g.,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">noncomm_ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">noncomm_ring</span>\n</code></pre></div>",
        "id": 203305638,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1594233552
    },
    {
        "content": "<p>Also <code>rw [sub_eq_add_neg]</code> probably helps.</p>",
        "id": 203305737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594233608
    },
    {
        "content": "<p>Great:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">sub_neg_mul</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_neg_mul_symm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203306113,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594233854
    },
    {
        "content": "<p>Really, I have a larger term, but <code>noncomm_ring</code> is putting <code>(-1) •ℤ</code> in the term.</p>",
        "id": 203306259,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594233901
    },
    {
        "content": "<p>Why is <code>noncomm_ring</code> needed instead of <code>ring</code>?</p>",
        "id": 203306291,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594233919
    },
    {
        "content": "<p>Because <code>ring</code> only works with commutatve rings :-)</p>",
        "id": 203306346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594233955
    },
    {
        "content": "<p>I propose fixing this by renaming the <code>comm_ring</code> class to <code>ring</code> but not everyone agrees...</p>",
        "id": 203306513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594234050
    },
    {
        "content": "<p>shouldn't <code>simp</code> be able to do this one?</p>",
        "id": 203306817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594234198
    },
    {
        "content": "<p>What is the SNF?</p>",
        "id": 203306937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594234234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 203306945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594234238
    },
    {
        "content": "<p>Aah, with some help <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 203306972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594234255
    },
    {
        "content": "<p>I guess we finally took <code>sub_eq_add_neg</code> out of the default simp set</p>",
        "id": 203306976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594234257
    },
    {
        "content": "<p>This happened several months ago, I think.</p>",
        "id": 203307027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594234280
    },
    {
        "content": "<p>We could have a simp lemma going the other way now, which would solve this one but might make other AC addition proofs harder</p>",
        "id": 203307196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594234347
    },
    {
        "content": "<p>I think that \"move <code>-</code>-signs outwards, and merge with <code>+</code>, are reasonable simp-moves.</p>",
        "id": 203307295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594234400
    },
    {
        "content": "<p>I think we have all the simp-lemmas for <code>has_sub.sub</code> already, so the simp-set should stay confluent if we add <code>sub_eq_add_neg.symm</code>.</p>",
        "id": 203307358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594234441
    },
    {
        "content": "<p>(Did I just use the word \"confluent\"? Did I use it correctly? <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span>)</p>",
        "id": 203307463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594234485
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">add_neg</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 203307520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594234520
    },
    {
        "content": "<p>Here's my actual proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sub_neg_mul</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hAB&#39;&#39;&#39;&#39;</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">mul_right_inj&#39;</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_neg_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">mul_div_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">neg_mul_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">hAB&#39;&#39;&#39;&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203308972,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594235264
    },
    {
        "content": "<p>Sorry for the complicated statement. I'm still not great at knowing how to supply <code>*_assoc, *_comm</code> to simp when necessary</p>",
        "id": 203309056,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594235295
    },
    {
        "content": "<p>The <code>0.succ</code> is annoying. It's in a hypothesis that I have, after a simp and no <code>simp_rw (0.succ = 1) at hAB''''</code> removes the <code>.succ</code>.</p>",
        "id": 203309180,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594235366
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 203309420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594235489
    },
    {
        "content": "<p>what is <code>B</code>, what are the imports</p>",
        "id": 203309445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594235506
    },
    {
        "content": "<p>oh wait <code>B</code> is local</p>",
        "id": 203309526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594235537
    },
    {
        "content": "<p>I don't see <code>sub_neg_mul</code> though</p>",
        "id": 203309585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594235571
    },
    {
        "content": "<p>oh ignore me I'm being silly</p>",
        "id": 203309690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594235620
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 203309703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594235628
    },
    {
        "content": "<p>Yes, edited above</p>",
        "id": 203309801,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594235670
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_right_inj&#39;</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_right_inj</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203310051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594235821
    },
    {
        "content": "<p>That's amazing.</p>",
        "id": 203310286,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594235950
    },
    {
        "content": "<p>Somehow <code>    change ((0 : fin 2).succ : fin 2) with 1 at *</code> doesn't make the change in hypotheses I have that are of the form <code>hBA'''' : b * B 0 0 + d * B 0 0.succ = 0,</code></p>",
        "id": 203310454,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594236041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_right_inj&#39;</span> <span class=\"n\">hb</span><span class=\"o\">],</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">neg_div</span><span class=\"o\">,</span> <span class=\"n\">eq_neg_iff_add_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203310486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594236054
    },
    {
        "content": "<p>I don't know what <code>0.succ</code> is in that expression, but basically you have to match that expression syntactically on the lhs of the <code>change with</code></p>",
        "id": 203310681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594236156
    },
    {
        "content": "<p>It should be of type <code>fin 2</code>. Okay, I'll try to match it more precisely</p>",
        "id": 203310759,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594236201
    },
    {
        "content": "<p>alternatively, you can ignore what it says and just say what you want using plain <code>change</code> as in</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">change</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">hBA&#39;&#39;&#39;&#39;</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 203311414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594236524
    },
    {
        "content": "<p>On a similar hypothesis, trying your suggestion:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hAB&#39;&#39;</span><span class=\"o\">,</span>\n\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">type</span>\n  <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n  <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 203311690,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594236670
    },
    {
        "content": "<p><code>= 1</code> not <code>= 0</code></p>",
        "id": 203311743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594236708
    },
    {
        "content": "<p>I need this lemma, and if I can help make the <code>ring</code> command gain the capability to solve this, that would be great. I tried <code>library_search</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_mul_other_mul_self_cancel</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">z1</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">z1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">z2</span> <span class=\"bp\">*</span> <span class=\"n\">z1</span> <span class=\"bp\">=</span> <span class=\"n\">z2</span><span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 301157617,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664339927
    },
    {
        "content": "<p>My guess</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 301159039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664341389
    },
    {
        "content": "<p>Should be possible in two rewrites as well</p>",
        "id": 301546880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664492975
    }
]