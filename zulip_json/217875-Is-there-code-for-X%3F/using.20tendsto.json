[
    {
        "content": "<p>I'm trying to use <code>tendsto</code> and need some very basic lemmas and I'm wondering how to get them most easily:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n\n<span class=\"c1\">-- Is there some more direct way of proving this or</span>\n<span class=\"c1\">-- even this lemma somewhere in mathlib?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">unique_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">hB</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto.sub</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hAB</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"c1\">-- how to use tendsto_const_iff here?</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"n\">hAB</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sub_seq_tendsto</span> <span class=\"o\">{</span><span class=\"n\">an</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))):</span>\n <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any advice on how to solve the <code>sorry</code>s above?</p>",
        "id": 281614203,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1652037940
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_nhds_unique\">docs#tendsto_nhds_unique</a> should help (hopefully very directly) with the first one.</p>",
        "id": 281614407,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1652038261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kyt√∂l√§</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/using.20tendsto/near/281614407\">said</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_nhds_unique\">docs#tendsto_nhds_unique</a> should help (hopefully very directly) with the first one.</p>\n</blockquote>\n<p>perfect, thanks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">unique_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">hB</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281614497,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1652038399
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.comp\">docs#filter.tendsto.comp</a> with the second one, if you first prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>‚Å°</mo></mrow><mrow><mi>n</mi><mo>‚Üí</mo><mi mathvariant=\"normal\">‚àû</mi></mrow></msub><mn>2</mn><mi>n</mi><mo>=</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{n \\to \\infty} 2 n = \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">‚Üí</span><span class=\"mord mtight\">‚àû</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">‚àû</span></span></span></span> (something like <code>tendsto (Œª (n : ‚Ñï), 2*n) at_top at_top</code>).</p>",
        "id": 281614554,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1652038484
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.mul_at_top\">docs#filter.tendsto.mul_at_top</a> for that</p>",
        "id": 281614623,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652038581
    },
    {
        "content": "<p>You don't need all those parentheses. You can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">unique_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">a</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hB</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">a</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_unique</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span>\n</code></pre></div>",
        "id": 281615025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652039166
    },
    {
        "content": "<p>Thanks I will write less parentheses...</p>\n<p>For the second one, I can't quite get it to work yet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sub_seq_tendsto</span> <span class=\"o\">{</span><span class=\"n\">an</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">an</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">A</span><span class=\"o\">)):</span>\n <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">an</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">htop</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">tendsto.mul_at_top</span> <span class=\"n\">two_pos</span> <span class=\"n\">h2</span> <span class=\"n\">tendsto_id</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto.comp</span> <span class=\"n\">h</span> <span class=\"n\">htop</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>rw</code>, that should solve the proof of <code>htop</code> complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tendsto.mul_at_top</span> <span class=\"n\">two_pos</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">two_pos</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>",
        "id": 281615939,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1652040564
    }
]