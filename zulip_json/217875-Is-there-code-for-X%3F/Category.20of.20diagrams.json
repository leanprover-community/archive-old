[
    {
        "content": "<p>I'm looking for some construction of \"the category of diagrams\" along the following lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.eq_to_hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.whiskering</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.essential_image</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">diagram</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">small_cat</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">diagram</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X.J</span><span class=\"o\">‚ü©</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">diagram</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X.small_cat</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">diagram</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚•§</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">X.F.ess_image</span> <span class=\"bp\">‚•§</span> <span class=\"n\">Y.F.ess_image</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">Y.F.to_ess_image</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">X.F.to_ess_image</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">diagram</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">functor.id</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">functor.id</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span>  <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">diagram</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">f.i</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">g.i</span><span class=\"o\">,</span>\n  <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">f.j</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">g.j</span><span class=\"o\">,</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span>\n    <span class=\"n\">functor.associator</span> <span class=\"n\">f.i</span> <span class=\"n\">g.i</span> <span class=\"n\">_</span> <span class=\"bp\">‚â™‚â´</span>\n    <span class=\"n\">iso_whisker_left</span> <span class=\"n\">f.i</span> <span class=\"n\">g.comm</span> <span class=\"bp\">‚â™‚â´</span>\n    <span class=\"o\">(</span><span class=\"n\">functor.associator</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">‚â™‚â´</span>\n    <span class=\"n\">iso_whisker_right</span> <span class=\"n\">f.comm</span> <span class=\"n\">g.j</span> <span class=\"bp\">‚â™‚â´</span>\n    <span class=\"n\">functor.associator</span> <span class=\"n\">_</span> <span class=\"n\">f.j</span> <span class=\"n\">g.j</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">category_theory.functor.ext</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">category_theory.functor.ext</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n    <span class=\"n\">recover</span><span class=\"o\">,</span>\n    <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">category_theory.functor.ext</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">category_theory.functor.ext</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n    <span class=\"n\">recover</span><span class=\"o\">,</span>\n    <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">category_theory.functor.ext</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">category_theory.functor.ext</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n    <span class=\"n\">recover</span><span class=\"o\">,</span>\n    <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">diagram</span>\n</code></pre></div>\n<p>And while I'm asking, I also don't really understand why <code>recover</code> is necessary in the last few proofs (I get an error if these lines are removed).<br>\nFinally, if someone has any ideas about how to make this construction less \"evil\" (due to the use of <code>category_theory.functor.ext</code>), that would also be helpful!</p>",
        "id": 228314196,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614636160
    },
    {
        "content": "<p>Isn't this construction just inherently 'evil'? There's a 2-category of diagrams that wouldn't be.</p>",
        "id": 228324459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614640853
    },
    {
        "content": "<p>Yeah, youre right.</p>",
        "id": 228324553,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614640888
    },
    {
        "content": "<p>I just never imagined that something so mundane like the category of diagrams should really be a 2-category.</p>",
        "id": 228324792,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614641015
    },
    {
        "content": "<p>But I guess whenever you need to talk about commuting diagrams of functors,  you're forced into 2-categories.</p>",
        "id": 228324979,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614641111
    }
]