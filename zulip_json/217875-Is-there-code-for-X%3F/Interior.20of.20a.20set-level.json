[
    {
        "content": "<p>Do we something along those lines?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ordered.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I am not sure about the correct typeclasses.</p>",
        "id": 262941648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638124177
    },
    {
        "content": "<p>A possible simplification (if indeed my <code>foo</code> is true):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ordered.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.2</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_le</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">F</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.2</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2</span><span class=\"o\">}),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">set.preimage_mono</span> <span class=\"n\">foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">preimage_interior_subset_interior_preimage</span> <span class=\"o\">(</span><span class=\"n\">hf.prod_mk</span> <span class=\"n\">hg</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262942089,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638124792
    },
    {
        "content": "<p>Ah, indeed <code>foo</code> is true.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.2</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subset_interior_iff_subset_of_open</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.2</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hp.le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_open_lt_prod</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262942235,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638124941
    },
    {
        "content": "<p>And in fact we have a more elaborate pre-build lemma next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_lt_prod\">docs#is_open_lt_prod</a>, namely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_lt\">docs#is_open_lt</a>, which is basically what you originally asked for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">interior_le</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subset_interior_iff_subset_of_open</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hp.le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_open_lt</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262942379,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638125158
    },
    {
        "content": "<p>Uh, I knew about <code>is_open_lt</code> but I couldn't get it to work in this case <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 262942633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638125479
    }
]