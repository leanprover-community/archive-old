[
    {
        "content": "<p>Working on the flt-project I need to prove something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hn</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">n.pred</span><span class=\"o\">,</span> <span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">hn</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n  <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((⟨</span><span class=\"n\">n.pred</span><span class=\"o\">,</span> <span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>I can do it by hand, but later I will need a similar result with 4 terms, and this is already annoying enough... Does anyone see a smart way of doing it? Note that I don't care about the definition of <code>f</code>, I only need a function <code>f : fin n → ℤ</code> such that the example is true (but I cannot change the RHS).</p>",
        "id": 303449967,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665498459
    },
    {
        "content": "<p>Is there a reason you work with <code>fin</code> in the first place, and not sum over <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.range\">docs#finset.range</a>?</p>",
        "id": 303451436,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665498838
    },
    {
        "content": "<p>I think it's irrelevant, <code>f</code> can be defined on <code>ℕ</code> and one can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range\">docs#finset.sum_range</a>. In my application I have at some point to use <code>fin</code> because I need to identify the LHS with a linear combination of element of a basis, but I think I can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range\">docs#finset.sum_range</a> also for that.</p>",
        "id": 303453015,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665499205
    },
    {
        "content": "<p>The current proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hn</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">n.pred</span><span class=\"o\">,</span> <span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">hn</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n  <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((⟨</span><span class=\"n\">n.pred</span><span class=\"o\">,</span> <span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnotmem</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">n.pred</span><span class=\"o\">,</span> <span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">univ.erase</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">mem_erase.2</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">nat.pred_eq_succ_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">insert_erase</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">sum_insert</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">insert_erase</span> <span class=\"n\">hnotmem</span><span class=\"o\">,</span>\n    <span class=\"n\">sum_insert</span><span class=\"o\">],</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">univ.erase</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">erase</span>\n    <span class=\"o\">(⟨</span><span class=\"n\">n.pred</span><span class=\"o\">,</span> <span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">hn</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">sum_const_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hn2</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"o\">⟨</span><span class=\"n\">n.pred</span><span class=\"o\">,</span> <span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H.1</span><span class=\"o\">,</span> <span class=\"n\">H.2</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">heq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">heq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">erase_subset_erase</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">erase_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">not_mem_erase</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>That's not that bad, but still...</p>",
        "id": 303455179,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665499823
    },
    {
        "content": "<p>(I can of course remove a lot of <code>linarith</code>, but that's not important)</p>",
        "id": 303455356,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665499890
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.range_filter_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne_and_eq_iff_right</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">and_iff_right_of_imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h2.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hn</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n.pred</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">hn</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n.pred</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2n</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">n.pred</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3n</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4n</span> <span class=\"o\">:</span> <span class=\"n\">n.pred</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ite_smul</span><span class=\"o\">,</span> <span class=\"n\">sum_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_filter</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">ne_and_eq_iff_right</span> <span class=\"n\">h2n</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.range_filter_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h3n</span><span class=\"o\">,</span> <span class=\"n\">h4n</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 303456040,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665500079
    },
    {
        "content": "<p>This can be repeated with more than 2 terms relatively easily. You just have to show linearly many assumptions <code>i &lt; n</code> and quadratically many assumptions <code>i ≠ j</code></p>",
        "id": 303456862,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665500338
    },
    {
        "content": "<p>Oooh, very nice!!</p>",
        "id": 303456876,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665500342
    },
    {
        "content": "<p>Here is an example with 3 terms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n.pred</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">hn</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n.pred</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2n</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">n.pred</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5n</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">n.pred</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3n</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6n</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4n</span> <span class=\"o\">:</span> <span class=\"n\">n.pred</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ite_smul</span><span class=\"o\">,</span> <span class=\"n\">sum_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_filter</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">and_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">ne_and_eq_iff_right</span> <span class=\"n\">h12</span><span class=\"o\">,</span> <span class=\"n\">ne_and_eq_iff_right</span> <span class=\"n\">h5n</span><span class=\"o\">,</span> <span class=\"n\">ne_and_eq_iff_right</span> <span class=\"n\">h2n</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.range_filter_eq</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303458095,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665500666
    },
    {
        "content": "<p>Let me make sure I can use a function <code>f : ℕ → ℤ</code>, but thanks a lot!</p>",
        "id": 303458662,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665500836
    },
    {
        "content": "<p>It should not be too hard to adapt this argument to <code>fin</code>, it will just get a whole lot uglier.</p>",
        "id": 303458740,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665500859
    }
]