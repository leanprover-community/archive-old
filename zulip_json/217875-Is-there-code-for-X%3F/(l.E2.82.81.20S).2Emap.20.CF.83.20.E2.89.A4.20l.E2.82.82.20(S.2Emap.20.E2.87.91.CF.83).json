[
    {
        "content": "<p>Much to my annoyance I'm stuck on both of these, although I can prove that each implies the other.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.filter_basis</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">K</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">σ</span> <span class=\"bp\">≤</span>\n<span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- they're equal but I can do ≥</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"n\">σ</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">K</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">σ</span> <span class=\"bp\">≤</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- this is</span>\n  <span class=\"c1\">-- an iff but the other way is easy</span>\n\n  <span class=\"c1\">-- Note we have `intermediate_field.gi`</span>\n</code></pre></div>\n<p>The Galois insertion info:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- α is set L or set M</span>\n  <span class=\"c1\">-- β is intermediate_field L or intermediate_field M</span>\n  <span class=\"c1\">-- l is `adjoin K`</span>\n  <span class=\"c1\">-- u is `coe`</span>\n</code></pre></div>\n<p>I don't know if there's a general statement about Galois insertions. Here there are two involved.</p>",
        "id": 266287385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640721352
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.adjoin_map\">docs#intermediate_field.adjoin_map</a> what you are looking for?</p>",
        "id": 266287717,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640721592
    },
    {
        "content": "<p>Yes, this is what he is looking for</p>",
        "id": 266288117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640721840
    },
    {
        "content": "<p>But the Galois connection magic he is asking for is also interesting, I think we still miss the relevant lemma.</p>",
        "id": 266288179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640721873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.map\">docs#intermediate_field.map</a> part of a Galois connection?</p>",
        "id": 266289727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640723286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I wrote what I think is a bit of Galois connection magic that mathlib is missing, together with a sample application (I could have used your example if you had answered my previous message).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">galois_connection.eq_l</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">rfl</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">le_rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">((</span><span class=\"n\">H</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">h.le_u_l</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">galois_connection.eq_u</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">u</span> <span class=\"n\">y</span>  <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">rfl</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">H</span> <span class=\"bp\">$</span> <span class=\"n\">u</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">h.l_u_le</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">le_rfl</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gc_magic</span>\n  <span class=\"o\">{</span><span class=\"n\">lYX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rXY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lYX</span> <span class=\"n\">rXY</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lWZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rZW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hZW</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lWZ</span> <span class=\"n\">rZW</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lWY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rYW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hWY</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lWY</span> <span class=\"n\">rYW</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lZX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rXZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXZ</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lZX</span> <span class=\"n\">rXZ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rXY</span> <span class=\"bp\">∘</span> <span class=\"n\">rYW</span> <span class=\"bp\">=</span> <span class=\"n\">rXZ</span> <span class=\"bp\">∘</span> <span class=\"n\">rZW</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lWZ</span> <span class=\"bp\">∘</span> <span class=\"n\">lZX</span> <span class=\"bp\">=</span> <span class=\"n\">lWY</span> <span class=\"bp\">∘</span> <span class=\"n\">lYX</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hZW.eq_l</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n  <span class=\"n\">lWY</span> <span class=\"o\">(</span><span class=\"n\">lYX</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"bp\">↔</span> <span class=\"n\">lYX</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">rYW</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hWY</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">rXY</span> <span class=\"o\">(</span><span class=\"n\">rYW</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hXY</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">rXY</span> <span class=\"o\">(</span><span class=\"n\">rYW</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hXY</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">rXZ</span> <span class=\"o\">(</span><span class=\"n\">rZW</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"n\">rXY</span> <span class=\"o\">(</span><span class=\"n\">rYW</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rXZ</span> <span class=\"o\">(</span><span class=\"n\">rZW</span> <span class=\"n\">w</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">w</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">lZX</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">rZW</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hXZ</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">subgroup</span> <span class=\"n\">set</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We can now reprove: -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">monoid_hom.map_closure</span>\n\n<span class=\"sd\">/-- The image by a group morphism of the subgroup generated by a set is the subgroup generated by</span>\n<span class=\"sd\">the image of this set. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">closure</span> <span class=\"bp\">=</span> <span class=\"n\">closure</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">gc_magic</span> <span class=\"n\">set.image_preimage</span> <span class=\"o\">(</span><span class=\"n\">gc_map_comap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subgroup.gi</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gc</span> <span class=\"o\">(</span><span class=\"n\">subgroup.gi</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gc</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 266293050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640726035
    },
    {
        "content": "<p>Note that I don't use <code>galois_connection.eq_u</code> and I was too lazy to derive it using the previous one and <code>order_dual</code>.</p>",
        "id": 266293121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640726070
    },
    {
        "content": "<p>Those lemmas prove that both sides of a Galois adjunction are characterized by their universal property, this bit already seems to be missing. But the part I really like is <code>gc_magic</code>.</p>",
        "id": 266293172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640726126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> do you know whether this is already somewhere?</p>",
        "id": 266293293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640726215
    },
    {
        "content": "<p><code>gc_magic</code> looks new to me, I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.composw\">docs#galois_connection.composw</a> was the only lemma I found about more than one connection</p>",
        "id": 266293322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640726247
    },
    {
        "content": "<p>If <code>eq_u</code> and <code>eq_l</code> exist, I know where to find them.</p>",
        "id": 266293348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640726277
    },
    {
        "content": "<p>Do they exist as <code>l_eq</code>?</p>",
        "id": 266293423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640726315
    },
    {
        "content": "<p>No.</p>",
        "id": 266293447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640726342
    },
    {
        "content": "<p>And I should indeed rename those lemmas, I switched sides after naming them.</p>",
        "id": 266293458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640726357
    },
    {
        "content": "<p>What about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.is_least_l\">docs#galois_connection.is_least_l</a> ?</p>",
        "id": 266293480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640726393
    },
    {
        "content": "<p>It should certainly help</p>",
        "id": 266293544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640726421
    },
    {
        "content": "<p>But indeed those specific lemmas eem to be missing, maybe because you're meant to go through the lemma I just gave + the correct <code>is_least</code>/<code>is_greatest</code> lemma (which don't seem to exist either? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>",
        "id": 266293669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640726530
    },
    {
        "content": "<p>At least it would help if it had correct binders <span aria-label=\"angry\" class=\"emoji emoji-1f620\" role=\"img\" title=\"angry\">:angry:</span></p>",
        "id": 266293688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640726559
    },
    {
        "content": "<p>I don't think the \"correct <code>is_least</code>/<code>is_greatest</code> lemma\" can exist. Here we also need to use that the set appearing in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.is_least_l\">docs#galois_connection.is_least_l</a> is upward closed.</p>",
        "id": 266295490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640728320
    },
    {
        "content": "<p>Here's another way to show <code>gc_magic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">gc_magic</span>\n  <span class=\"o\">{</span><span class=\"n\">lYX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rXY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lYX</span> <span class=\"n\">rXY</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lWZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rZW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hZW</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lWZ</span> <span class=\"n\">rZW</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lWY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rYW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hWY</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lWY</span> <span class=\"n\">rYW</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lZX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rXZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXZ</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lZX</span> <span class=\"n\">rXZ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rXY</span> <span class=\"bp\">∘</span> <span class=\"n\">rYW</span> <span class=\"bp\">=</span> <span class=\"n\">rXZ</span> <span class=\"bp\">∘</span> <span class=\"n\">rZW</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lWZ</span> <span class=\"bp\">∘</span> <span class=\"n\">lZX</span> <span class=\"bp\">=</span> <span class=\"n\">lWY</span> <span class=\"bp\">∘</span> <span class=\"n\">lYX</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hXZ.compose</span> <span class=\"n\">hZW</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_least_l.unique</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">hXY.compose</span> <span class=\"n\">hWY</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_least_l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266297044,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640729476
    },
    {
        "content": "<p>This is nice but less fun in my opinion.</p>",
        "id": 266297466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640729760
    },
    {
        "content": "<p>The proofs are ultimately the same; they're both an easy case of a general category theory fact. <code>is_least_l</code> characterises the left side of a Galois connection already.</p>",
        "id": 266297683,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640729953
    },
    {
        "content": "<p>Yes, I understand.</p>",
        "id": 266297695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640729970
    },
    {
        "content": "<p>But I like the <code>calc</code> block</p>",
        "id": 266297704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640729985
    },
    {
        "content": "<p>Actually the result is even closer to be already here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l_comm_of_u_comm</span>\n  <span class=\"o\">{</span><span class=\"n\">lYX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">uXY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lYX</span> <span class=\"n\">uXY</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lWZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">uZW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hZW</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lWZ</span> <span class=\"n\">uZW</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lWY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">uYW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hWY</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lWY</span> <span class=\"n\">uYW</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lZX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">uXZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXZ</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lZX</span> <span class=\"n\">uXZ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">uXY</span> <span class=\"bp\">∘</span> <span class=\"n\">uYW</span> <span class=\"bp\">=</span> <span class=\"n\">uXZ</span> <span class=\"bp\">∘</span> <span class=\"n\">uZW</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lWZ</span> <span class=\"bp\">∘</span> <span class=\"n\">lZX</span> <span class=\"bp\">=</span> <span class=\"n\">lWY</span> <span class=\"bp\">∘</span> <span class=\"n\">lYX</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hXZ.compose</span> <span class=\"n\">hZW</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">l_unique</span> <span class=\"o\">(</span><span class=\"n\">hXY.compose</span> <span class=\"n\">hWY</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h.symm</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266298657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640730959
    },
    {
        "content": "<p>And if we go for an applied version and commute some equality we get to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l_comm_of_u_comm</span>\n  <span class=\"o\">{</span><span class=\"n\">lYX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">uXY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lYX</span> <span class=\"n\">uXY</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lWZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">uZW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hZW</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lWZ</span> <span class=\"n\">uZW</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lWY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">uYW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hWY</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lWY</span> <span class=\"n\">uYW</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">lZX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">uXZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hXZ</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">lZX</span> <span class=\"n\">uXZ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">uXZ</span> <span class=\"o\">(</span><span class=\"n\">uZW</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">uXY</span> <span class=\"o\">(</span><span class=\"n\">uYW</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lWZ</span> <span class=\"o\">(</span><span class=\"n\">lZX</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lWY</span> <span class=\"o\">(</span><span class=\"n\">lYX</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hXZ.compose</span> <span class=\"n\">hZW</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">l_unique</span> <span class=\"o\">(</span><span class=\"n\">hXY.compose</span> <span class=\"n\">hWY</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 266298802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640731116
    },
    {
        "content": "<p>Maybe I'm starting to like that way of telling the story.</p>",
        "id": 266298825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640731171
    },
    {
        "content": "<p>Fun fact: X and Z only need preorders here.</p>",
        "id": 266299205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640731580
    },
    {
        "content": "<p>Clearly I'm having way too much fun with this stuff. I should stop and go to bed.</p>",
        "id": 266299254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640731671
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11114\">#11114</a>. I still kept my <code>le_eq</code> and <code>u_eq</code> lemmas just in case they turn out to be useful for something else. Concerning applications, I only replaced the subgroup proof.</p>",
        "id": 266299556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640732007
    },
    {
        "content": "<p>This is really nice. Thanks!</p>",
        "id": 266301684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640734281
    }
]