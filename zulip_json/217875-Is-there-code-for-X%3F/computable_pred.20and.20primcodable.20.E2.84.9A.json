[
    {
        "content": "<p>I was wondering if anyone had proved an analogous result to 'primrec_pred.comp' for computable_pred (I tried but I keep running into decidability problems). Also, why isn't the definition of 'computable_pred' the same as 'primrec_pred' but replacing 'primrec' with 'computable' everywhere? Lastly, I was wondering if anyone has shown primcodable ℚ,  or done anything about computable functions on the rationals?</p>",
        "id": 265145819,
        "sender_full_name": "Keji Neri",
        "timestamp": 1639656432
    },
    {
        "content": "<p>primrec_pred and computable_pred are almost identical.  The only difference is that one of them bundles the decidable_pred instance, the other one doesn't.  But it doesn't make a difference since that instance is a singleton anyhow.</p>",
        "id": 265149388,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639658503
    },
    {
        "content": "<p>To prove <code>primrec_pred.comp</code> you can use <code>casesI</code> to access the type class instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.halting</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">computability</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">primcodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">primcodable</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">computable_pred.comp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">computable_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">computable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">computable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"c1\">-- ....</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265149956,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639658844
    },
    {
        "content": "<p>Thank you very much <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 265153659,
        "sender_full_name": "Keji Neri",
        "timestamp": 1639660733
    }
]