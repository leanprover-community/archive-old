[
    {
        "content": "<p>Does mathlib have the construction, given an additive group homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">Z</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">f:\\mathbb{Z}\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f(n)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, of the induced homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>f</mi><mo stretchy=\"true\">^</mo></mover><mo>:</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\widehat f:\\mathbb{Z}/n \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1288799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9344399999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.33334em);margin-left:0.33334em;top:-3.69444em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 242926640,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623870103
    },
    {
        "content": "<p>I can't find anything like that. I would have guessed it would be easy using a <code>ring_equiv</code> between <code>zmod n</code> and <code>ideal.quotient (ideal.span ({n} : set ℤ))</code>, but it turns out we don't have it either... (<a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60.28ideal.2Espan.20.7Bd.7D.29.2Equotient.60.20is.20.60zmod.20d.60/near/241950260\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60.28ideal.2Espan.20.7Bd.7D.29.2Equotient.60.20is.20.60zmod.20d.60/near/241950260</a>)</p>",
        "id": 242945145,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1623878524
    },
    {
        "content": "<p>I'm surprised there's not a <code>zmod.lift</code> with that definition</p>",
        "id": 242946330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623879267
    },
    {
        "content": "<p>I will need the equiv soon, so I'll see if I can define it and <code>zmod.lift</code> today.</p>",
        "id": 242980359,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623913653
    },
    {
        "content": "<p>Anne, this isn't much but I was going to work on it too, and I already made the ℤ-version of it, so here's a tiny tiny part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">a.nat_abs</span> <span class=\"bp\">≃+*</span> <span class=\"n\">ideal.quotient</span> <span class=\"o\">(</span><span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ideal.span</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">a.nat_abs</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">ideal.span_singleton_eq_span_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">int.associated_nat_abs</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">&lt;</span><span class=\"n\">ℕ</span><span class=\"bp\">-</span><span class=\"n\">version</span><span class=\"bp\">&gt;</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242988326,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623919426
    },
    {
        "content": "<p>Thank you very much! I just finished the <code>add_equiv</code> part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">lift</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">quotient_add_group</span>\n<span class=\"kn\">open</span> <span class=\"n\">zmod</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod.coe_add_eq_sub_n_or_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_coe</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_add</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_succ</span><span class=\"o\">,</span> <span class=\"n\">int.nat_cast_eq_coe_nat</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_lt.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mod_eq_sub_mod</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_eq_of_lt</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_sub</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n        <span class=\"n\">int.coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.sub_lt_right_iff_lt_add</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat.add_lt_add</span> <span class=\"n\">a.2</span> <span class=\"n\">b.2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_lt.mp</span> <span class=\"o\">(</span><span class=\"n\">lt_of_not_ge</span> <span class=\"n\">h</span><span class=\"o\">)),</span> <span class=\"n\">int.coe_nat_add</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The map from `zmod n` induced by `f : ℤ →+ A` that maps `n` to `0`. -/</span>\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">zmod.lift</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">zmod.coe_add_eq_sub_n_or_self</span><span class=\"o\">],</span>\n         <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.map_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_gmultiples_iff_dvd</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">add_subgroup.gmultiples</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_subgroup.gsmul_mem</span> <span class=\"n\">_</span> <span class=\"n\">mem_gmultiples</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- `ℤ` modulo multiples of `n : ℕ` is `zmod n`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">quotient_gmultiples_equiv_zmod</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">add_subgroup.gmultiples</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">≃+</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">int.cast_add_hom</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">int.cast_add_hom</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">int_coe_zmod_eq_zero_iff_dvd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">mem_gmultiples_iff_dvd.mp</span> <span class=\"n\">hx</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">mk'</span> <span class=\"o\">(</span><span class=\"n\">add_subgroup.gmultiples</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quot.induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_sub_mem.mpr</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lift_quot_mk</span><span class=\"o\">,</span> <span class=\"n\">int.coe_cast_add_hom</span><span class=\"o\">,</span> <span class=\"n\">mem_gmultiples_iff_dvd</span><span class=\"o\">,</span>\n           <span class=\"bp\">←</span> <span class=\"n\">int_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">,</span> <span class=\"n\">int.cast_sub</span><span class=\"o\">,</span> <span class=\"n\">int_cast_zmod_cast</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">quotient_add_group.mk'_apply</span><span class=\"o\">,</span> <span class=\"n\">lift_mk</span><span class=\"o\">,</span> <span class=\"n\">int.coe_cast_add_hom</span><span class=\"o\">,</span>\n           <span class=\"n\">int_cast_zmod_cast</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">quotient_add_group.lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">lift</span>\n</code></pre></div>",
        "id": 242990116,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623920523
    },
    {
        "content": "<p>So it only remains to connect <code>gmultiples n</code> to <code>ideal.span {n}</code> and then add the <code>mul</code> parts of the equiv.</p>",
        "id": 242990191,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623920564
    },
    {
        "content": "<p><code>coe_add_eq_sub_...</code> looks like something we will already have proved for fin?</p>",
        "id": 242994507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623923245
    },
    {
        "content": "<p>I tried grepping for various permutations of <code>coe</code>, <code>add</code>, <code>sub</code> and <code>mod</code> with no luck, any idea where to look?</p>",
        "id": 242994973,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623923529
    },
    {
        "content": "<p>I think it's not there after all</p>",
        "id": 242998083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623925622
    },
    {
        "content": "<p><code>coe_add_eq_ite</code> is probably a better name</p>",
        "id": 242998111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623925648
    },
    {
        "content": "<p>I have the <code>add_equiv</code>s and <code>ring_equiv</code>s finished too, without needing a <code>lift</code>. Should I keep <code>coe_add_eq_ite</code> if I don't need it anymore?</p>",
        "id": 242999521,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623926478
    },
    {
        "content": "<p>I think it's a nice lemma to have anyway, although maybe we should state it in terms of nat instead of int and make it be about <code>fin</code></p>",
        "id": 243000258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623926984
    },
    {
        "content": "<p>To match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.coe_add\">docs#fin.coe_add</a></p>",
        "id": 243000276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623926998
    },
    {
        "content": "<p>The specialization to <code>ℤ</code> and <code>zmod</code> is not completely trivial so I'll keep that one too: since <code>zmod 0 = ℤ</code> not <code>fin 0</code> you need to push around a few casts.</p>",
        "id": 243000440,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623927092
    },
    {
        "content": "<p>Final question: I needed a few small imports (<code>ring_theory.int.basic</code> and <code>group_theory.quotient_group</code>), those should be fine to add to <code>data.zmod.basic</code>, right?</p>",
        "id": 243001385,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623927722
    },
    {
        "content": "<p>I'm wary of doing that without first moving <code>fin.comm_ring</code> somewhere more fundamental</p>",
        "id": 243001627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623927893
    },
    {
        "content": "<p>OK, then they'll live in a new file <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 243001739,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623927962
    },
    {
        "content": "<p><code>section universal_property</code> looks like it was intended to contain this new <code>lift</code>, but I can't work out which of the definitions actually in that section is being considered the universal property</p>",
        "id": 243001995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623928155
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 243002000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623928160
    },
    {
        "content": "<p>Taking the composition with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.cast_hom\">docs#zmod.cast_hom</a> is \"mathematically\" the same thing as applying our new <code>zmod.lift</code>, except that it's phrased for rings with characteristic <code>m</code> rather than groups.</p>",
        "id": 243004260,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623929592
    },
    {
        "content": "<p>PR number one finally built on my machine: <a href=\"https://github.com/leanprover-community/mathlib/issues/7975\">#7975</a></p>",
        "id": 243008454,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623932196
    },
    {
        "content": "<p>PR number two: <a href=\"https://github.com/leanprover-community/mathlib/issues/7976\">#7976</a></p>",
        "id": 243014226,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623935367
    },
    {
        "content": "<p>It would be nice to see if we can hook this and our group presentation API (the required lift also comes from the universal property of the group presentation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>a</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>a</mi><mi>n</mi></msup><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\langle a | a^n \\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span></p>",
        "id": 243025031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623939855
    },
    {
        "content": "<p>Ah yes, that would be a very slick way to do it. I can't find much in mathlib though about presentations / the free group, for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.free_group_unit_equiv_int\">docs#free_group.free_group_unit_equiv_int</a> is just a bijection, not an isomorphism.</p>",
        "id": 243042838,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623946367
    },
    {
        "content": "<p>It looks like we already have a proof that any function from free_group is a homomorphism, so making the isomorphism is just a case of remembering to bundle everything</p>",
        "id": 243045316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623947438
    },
    {
        "content": "<p>(eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.map_mul\">docs#free_group.map_mul</a>)</p>",
        "id": 243045400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623947477
    }
]