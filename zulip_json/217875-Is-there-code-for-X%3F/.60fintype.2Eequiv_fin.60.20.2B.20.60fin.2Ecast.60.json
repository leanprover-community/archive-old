[
    {
        "content": "<p>It would be nice to turn a proof <code>h : fintype.card ι = n</code> into an equiv <code>ι ≃ fin n</code>. The best I can do right now is <code>((fintype.equiv_fin ι).out).trans (fin.cast h).to_equiv</code>. Does this exist somewhere? Or should I add a new definition <code>fintype.equiv_fin_of_card_eq</code>?</p>",
        "id": 233835692,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617980370
    },
    {
        "content": "<p>Can you give the mwe?</p>",
        "id": 233837543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617980685
    },
    {
        "content": "<p>It feels like you should be using <code>trunc.map</code> instead of <code>trunc.out</code> to keep it computable</p>",
        "id": 233837742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617980725
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">fin.cast</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span>\n</code></pre></div>",
        "id": 233837846,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617980748
    },
    {
        "content": "<p>(In this instance I don't care too much about computability since <code>ι</code> was already noncomputable.)</p>",
        "id": 233837975,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617980769
    },
    {
        "content": "<p>Right, so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.trans</span> <span class=\"o\">(</span><span class=\"n\">fin.cast</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233838219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617980829
    },
    {
        "content": "<p>Sure, but it's probably confusing to have <code>equiv_fin</code> return <code>trunc</code> but <code>equiv_fin_of_card_eq</code> be noncomputable</p>",
        "id": 233838383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617980869
    },
    {
        "content": "<p>So something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fintype.equiv_fin_of_card_eq</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.trans</span> <span class=\"o\">(</span><span class=\"n\">fin.cast</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">fintype.equiv_fin_of_card_eq'</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical.dec_eq</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin_of_card_eq</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 233838754,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617980946
    },
    {
        "content": "<p>(With docstrings pointing to each other and the existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a>.)</p>",
        "id": 233838927,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617980987
    },
    {
        "content": "<p>I think that we should</p>\n<ul>\n<li>upgrade <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.nonempty_equiv_of_card_eq\">docs#fintype.nonempty_equiv_of_card_eq</a> to a computable <code>fintype.trunc_equiv_of_card_eq</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.exists_equiv_fin\">docs#fintype.exists_equiv_fin</a>;</li>\n<li>add noncomputable <code>fintype.equiv_of_card_eq</code> and a particular case <code>fintype.equiv_fin_of_card_eq</code>.</li>\n</ul>",
        "id": 233842247,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617981775
    },
    {
        "content": "<p>I'll go ahead and make the PR doing the things listed above. How about renaming <code>fintype.equiv_fin</code> to <code>fintype.trunc_equiv_fin</code>?</p>",
        "id": 233842764,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617981975
    },
    {
        "content": "<p>That seems like the obvious consequence</p>",
        "id": 233842806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981990
    },
    {
        "content": "<p>I think we use trunc as a suffix elsewhere?</p>",
        "id": 233842848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617982011
    },
    {
        "content": "<p>There're two defs in equiv.perm.sign with trunc results, but I forget their names</p>",
        "id": 233842927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617982047
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.trunc_swap_factors\">docs#equiv.perm.trunc_swap_factors</a></p>",
        "id": 233843008,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617982084
    },
    {
        "content": "<p>I'm wrong</p>",
        "id": 233843033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617982086
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.trunc_swap_factors\">docs#equiv.perm.trunc_swap_factors</a></p>",
        "id": 233843069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617982097
    },
    {
        "content": "<p>Apparently there are 64 instances of <code>trunc_</code> as a prefix and 64 of <code>_trunc</code> as a suffix.</p>",
        "id": 233843173,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617982149
    },
    {
        "content": "<p>But many of the <code>_trunc</code> are <code>_truncate_</code></p>",
        "id": 233843246,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617982195
    },
    {
        "content": "<p>So I'm going for <code>trunc_</code>.</p>",
        "id": 233843381,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617982230
    },
    {
        "content": "<p>I wanted to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">trunc_equiv_of_card_eq</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv.trans</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">trunc_equiv_fin_of_card_eq</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">equiv.symm</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">trunc_equiv_fin</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but the <code>&lt;$&gt;</code>s give an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">equiv.trans</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">trunc_equiv_fin_of_card_eq</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">trunc_equiv_fin_of_card_eq</span> <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">trunc.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))}</span> <span class=\"o\">(</span><span class=\"n\">equiv.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fintype.card.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">trunc.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))}</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fintype.card.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233845472,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617982947
    },
    {
        "content": "<p>That's annoying, that <code>&lt;$&gt;</code> doesn't work for different universes.</p>",
        "id": 233845805,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617983091
    },
    {
        "content": "<p>Is <code>fintype.equiv_fin</code> unavoidable using <code>classical.choice</code> (in a computable way), or is that just a bug that <a href=\"https://github.com/leanprover-community/mathlib/issues/7315\">#7315</a> will fix</p>",
        "id": 233846040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617983186
    },
    {
        "content": "<p>If so, I'm wary of introducing the non-computable variants, because they encourage people to use the axiom of choice in their proofs just to save a few characters:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- in a context with a goal in `Prop`</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.trunc_equiv_fin.nonempty</span><span class=\"o\">,</span> <span class=\"c1\">-- AC-free</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.trunc_equiv_fin</span><span class=\"o\">,</span>  <span class=\"c1\">-- AC, which we end up encouraging by adding this definition</span>\n</code></pre></div>",
        "id": 233846229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617983278
    },
    {
        "content": "<p>How is the first line AC free?</p>",
        "id": 233846320,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617983308
    },
    {
        "content": "<p>Well, assuming <code>trunc_equiv_fin</code> can be made choice-free</p>",
        "id": 233846385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617983343
    },
    {
        "content": "<p><del>Nothing in the implementation (<a href=\"https://github.com/leanprover-community/mathlib/blob/aa1fa0b2ba0739deaec3fe65f42640998120bc80/src/data/fintype/basic.lean#L201-L218\">https://github.com/leanprover-community/mathlib/blob/aa1fa0b2ba0739deaec3fe65f42640998120bc80/src/data/fintype/basic.lean#L201-L218</a>) screams axiom of choice to me</del></p>",
        "id": 233846626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617983432
    },
    {
        "content": "<p>Nevermind, <code>lt_trichotomy</code>is part of the proof</p>",
        "id": 233846953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617983570
    },
    {
        "content": "<p>Created <a href=\"https://github.com/leanprover-community/mathlib/issues/7136\">#7136</a></p>",
        "id": 233851011,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617985160
    }
]