[
    {
        "content": "<p>Do we have a result that expresses the <code>n</code>th roots of unity as <code>exp (2 * π * I * (↑(i : ℕ) / n)</code> over the obvious choice of <code>i</code>?</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.mem_roots_of_unity\">docs#complex.mem_roots_of_unity</a> is obviously close, but I want it as an equality of finsets.</p>\n<p>My attempt was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.roots_of_unity</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exp_two_pi_mul_div_inj_on</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">set.Iio</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inj_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">exp_eq_exp_iff_exists_int</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_right_inj'</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">int.eq_coe_or_neg</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">},</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hk</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hi.not_le</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">self_le_add_left</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">eq_sub_iff_add_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hj.not_le</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">self_le_add_left</span> <span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">real.pi_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">complex.ext_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The nth roots of `1 : ℂ` are all of the form `exp (2 * π * I * (↑(i : ℕ) / n)` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_of_unity_to_finset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">polynomial.nth_roots_finset</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n      <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n        <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin.ext</span> <span class=\"bp\">$</span> <span class=\"n\">exp_two_pi_mul_div_inj_on</span> <span class=\"n\">n</span> <span class=\"n\">i.prop</span> <span class=\"n\">j.prop</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.exists_iff</span><span class=\"o\">,</span> <span class=\"n\">polynomial.mem_nth_roots_finset</span><span class=\"o\">,</span> <span class=\"n\">pnat.pos</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_map</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">function.embedding.coe_fn_mk</span><span class=\"o\">,</span> <span class=\"n\">exists_true_left</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_mk</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">exp_ne_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">ℂ</span><span class=\"bp\">ˣ</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">is_unit.mk0</span> <span class=\"n\">_</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">complex.mem_roots_of_unity</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_root_.mem_roots_of_unity</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">units.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">units.coe_eq_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">complex</span>\n</code></pre></div>\n<p>Is there a faster way to get there via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_cyclic\">docs#is_cyclic</a> and showing that <code>exp (2 * π * I / n)</code> is the generator of the group?</p>",
        "id": 305046551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666215555
    },
    {
        "content": "<p>If you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.image\">docs#finset.image</a> you don't have to prove it's injective right? We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_injective_of_lt_order_of\">docs#pow_injective_of_lt_order_of</a>  but you need to first show that the order_of exp(2πI/n) is n.</p>",
        "id": 305048368,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666216529
    },
    {
        "content": "<p>Hasn't that been done yet???</p>",
        "id": 305048512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666216579
    },
    {
        "content": "<p>Actually I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root\">docs#is_primitive_root</a> can simply be defined to be <code>order_of ζ = k</code>.</p>",
        "id": 305048642,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666216651
    },
    {
        "content": "<p>I don't remember, but I think I used stuff like that when I did things with Chebyshev polynomials. Those things have later been generalised. So maybe those ingredients didn't survive. But the bare result about <code>e ^ (2pi i / n)</code> is probably still there.</p>",
        "id": 305048665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666216665
    },
    {
        "content": "<p>Indeed we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.not_iff\">docs#is_primitive_root.not_iff</a> but not the version without <code>not</code> on both sides ...  but you may use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.eq_order_of\">docs#is_primitive_root.eq_order_of</a> for the direction you want.</p>",
        "id": 305049092,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666216839
    },
    {
        "content": "<p>there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.unique\">docs#is_primitive_root.unique</a> somewhere</p>",
        "id": 305050642,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666217680
    },
    {
        "content": "<p>oh that different nvm</p>",
        "id": 305050661,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666217694
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.order_of\">docs#is_primitive_root.order_of</a></p>",
        "id": 305050720,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666217724
    },
    {
        "content": "<p>At least, its proof through the <code>order_of</code> spelling would be much shorter.</p>",
        "id": 305050745,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666217738
    },
    {
        "content": "<blockquote>\n<p>If you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.image\">docs#finset.image</a> you don't have to prove it's injective right? </p>\n</blockquote>\n<p>Sure, but then you end up needing to prove it's injective downstream if you want to talk about <code>finset.sum</code> or similar</p>",
        "id": 305051211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666218002
    },
    {
        "content": "<p>Indeed and I think the problem arises earlier, because finset.image requires decidable_eq ℂ. But if you're satisfied with a multiset then <a href=\"http://multiset.map\">multiset.map</a> should be good enough.</p>",
        "id": 305051625,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666218208
    },
    {
        "content": "<p>Surely we have that as a (noncomputable) instance?</p>",
        "id": 305051746,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666218257
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.decidable_eq\">docs#complex.decidable_eq</a> <span aria-label=\"exploding head\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"exploding head\">:exploding_head:</span></p>",
        "id": 305051825,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666218297
    },
    {
        "content": "<p><code>image</code> would be easier, but only because it puts off proving other helpful results. But both would work here</p>",
        "id": 305051853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666218314
    },
    {
        "content": "<p>Thanks for the suggestions <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> , this is certainly better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exp_two_pi_mul_div_inj_on</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">set.Iio</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inj_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"n\">units.mk0</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">exp_ne_zero</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">order_of_units</span><span class=\"o\">,</span> <span class=\"n\">units.coe_mk0</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">is_primitive_root_exp</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">ne_zero_of_lt</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_order_of.symm</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">pow_injective_of_lt_order_of</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hi.trans_eq</span> <span class=\"n\">this.symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj.trans_eq</span> <span class=\"n\">this.symm</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">units.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">units.coe_mk0</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">exp_nat_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n    <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_right_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305058679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666222409
    },
    {
        "content": "<p>shouldn't there be glue between nth_roots_finset and roots_of_unity.to_finset?</p>",
        "id": 305059108,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666222733
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/roots_of_unity.fintype\">docs#roots_of_unity.fintype</a> already exists, but  I don't think you can use <code>to_finset</code> in a sensible way</p>",
        "id": 305066829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666229653
    }
]