[
    {
        "content": "<p>It seems that the following are not in mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.bit0_mod_bit0</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.bit1_mod_bit0</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Their counterparts <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bit0_div_bit0\">docs#nat.bit0_div_bit0</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bit1_div_bit0\">docs#nat.bit1_div_bit0</a> do exist, however.</p>\n<p>These lemmas are useful, e.g., for proving things like <code>(bit1 (bit0 (bit1 n))) % 8 = 5</code> for <code>n : nat</code>.<br>\nAre there objections to adding them to mathlib?</p>",
        "id": 297228893,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662385307
    },
    {
        "content": "<p>My proof for the second one looks a bit longer than necessary:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit1_mod_bit0</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">bit0</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- `∀ m n : ℕ, bit0 m * n = bit0 (m * n)` seems to be missing...</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1_add</span><span class=\"o\">,</span> <span class=\"n\">bit0_eq_two_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bit0_eq_two_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1_div_bit0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">h₂.trans</span> <span class=\"n\">h₁.symm</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Suggestions for improvements are welcome!</p>",
        "id": 297240799,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662390271
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover-community/mathlib/pull/16396\">#16396</a>.<br>\nI have tagged the lemmas <code>@[simp]</code>, since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bit0_div_bit0\">docs#nat.bit0_div_bit0</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bit1_div_bit0\">docs#nat.bit1_div_bit0</a> are, but this may be debatable.</p>",
        "id": 297277776,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662411905
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16396\">#16396</a> would have been a great <a href=\"https://github.com/leanprover-community/mathlib/pull/16384\">#16384</a></p>",
        "id": 297278231,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662412323
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16384\">#16384</a> was sniped by the bot lmfao</p>",
        "id": 297279315,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662413375
    },
    {
        "content": "<p>I would write them the other way around, so that it reads as a distributivity law.</p>",
        "id": 297279422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662413443
    },
    {
        "content": "<p>The advantage of this direction is that it is compatible with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bit0_mod_two\">docs#nat.bit0_mod_two</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bit1_mod_two\">docs#nat.bit1_mod_two</a>.</p>",
        "id": 297341458,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662460206
    },
    {
        "content": "<p>One could also argue that the rhs is simpler, since it contains one fewer function application...</p>",
        "id": 297341549,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662460248
    },
    {
        "content": "<p>Plus, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bit0_div_bit0\">docs#nat.bit0_div_bit0</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bit1_div_bit0\">docs#nat.bit1_div_bit0</a> have the corresponding direction.</p>",
        "id": 297341646,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662460306
    }
]