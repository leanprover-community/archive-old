[
    {
        "content": "<p>I should be the one answering this question, but just to make sure: do we have anything that look like Bolzano-Weirstrass? Specifically, do we know that every sequence with values in <code>Icc a b</code> has a convergent subsequence? <a href=\"https://github.com/leanprover-community/mathlib/blob/33764abc51cbd699d43976085513444216639670/src/topology/sequences.lean#L21-L22\" title=\"https://github.com/leanprover-community/mathlib/blob/33764abc51cbd699d43976085513444216639670/src/topology/sequences.lean#L21-L22\">https://github.com/leanprover-community/mathlib/blob/33764abc51cbd699d43976085513444216639670/src/topology/sequences.lean#L21-L22</a> is not too encouraging, but there may be more elementary places to look at. I didn't find anything in metric spaces.</p>",
        "id": 192596854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585777457
    },
    {
        "content": "<p>This might not be what you're looking for but infinite ramsey <a href=\"https://github.com/b-mehta/combinatorics/blob/extras/src/inf_ramsey.lean\" title=\"https://github.com/b-mehta/combinatorics/blob/extras/src/inf_ramsey.lean\">which I proved here</a> implies that any sequence in a linear order has a monotone subsequence which would help with a big part of BW</p>",
        "id": 192598508,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585778616
    },
    {
        "content": "<p>Thanks, but I think I'll try a more direct path.</p>",
        "id": 192639938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585819468
    },
    {
        "content": "<p>However I realize I have no idea how to do some very basic proof step in Lean. How do I define a sequence by induction in the middle of a proof? It doesn't seem possible to use the equation compiler in a <code>let</code>.</p>",
        "id": 192640018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585819543
    },
    {
        "content": "<p>I had this exact question! For me, the right thing to use was Reid's crec construction</p>",
        "id": 192653204,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585828283
    },
    {
        "content": "<p>I think just <code>nat.rec_on</code> should be okay most of the time.</p>",
        "id": 192654782,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585829098
    },
    {
        "content": "<p>Thanks Bhavik, this crec looks promising. And <a href=\"#narrow/stream/116395-maths/topic/Inductive.20construction\" title=\"#narrow/stream/116395-maths/topic/Inductive.20construction\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Inductive.20construction</a> is the thread I should have been looking for. Chris <code>nat.rec_on</code> is not good enough here (or at least it's hugely inconvenient).</p>",
        "id": 192679488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585840310
    },
    {
        "content": "<p><code>crec</code> is for when the type of the sequence you are constructing requires a partial proof of correctness of earlier parts of the sequence. It's a pretty advanced tool and doesn't sound like what you are describing, which is just how to write recursive functions in a proof</p>",
        "id": 192682293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585841115
    },
    {
        "content": "<p>do you have an example?</p>",
        "id": 192682367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585841150
    },
    {
        "content": "<p>Ok, maybe this discussion is too abstract.</p>",
        "id": 192682721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585841286
    },
    {
        "content": "<p>Could you please prove:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>without using a special trick that would bypass the recursive definition issue.</p>",
        "id": 192682804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585841323
    },
    {
        "content": "<p>The proof I have on paper is: set f(0)=0 and then, assuming f(n-1) is defined, set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><mi>ψ</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(n) := \\psi(f(n-1)) + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>",
        "id": 192683806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585841674
    },
    {
        "content": "<p>Option 1: equation compiler hacks</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">example</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">a_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">example</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 192685679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842388
    },
    {
        "content": "<p>Option 2: <code>nat.rec_on</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">ih</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">)],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">h_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192685846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842469
    },
    {
        "content": "<p>Option 3: local def</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">foo</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">a_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 192686062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842549
    },
    {
        "content": "<p>Option 1 says: <code>invalid match/convoy expression, expected type is not known</code>. But this is using an old Lean+mathlib (frozen in early January)</p>",
        "id": 192686083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585842556
    },
    {
        "content": "<p>It works for me but you can see if this works</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">example</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">a_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">example</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 192686199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842600
    },
    {
        "content": "<p>Same error.</p>",
        "id": 192686377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585842655
    },
    {
        "content": "<p>This version should always work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">example</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">a_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">example</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 192686380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842656
    },
    {
        "content": "<p>But option 2 works (option 3 is not good, it relies on having everything needed before starting a proof).</p>",
        "id": 192686616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585842745
    },
    {
        "content": "<p>Thank you very much.</p>",
        "id": 192686632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585842751
    },
    {
        "content": "<p>I really really think we should have a tactic helping to setup this.</p>",
        "id": 192686658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585842763
    },
    {
        "content": "<p>I think the best option is option 3</p>",
        "id": 192686687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842772
    },
    {
        "content": "<p>Option 1 is just an obfuscated version of option 3</p>",
        "id": 192686716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842783
    },
    {
        "content": "<p>because lean extracts the def into its own function anyway</p>",
        "id": 192686741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842796
    },
    {
        "content": "<p>Option 3 is not viable in general. We want to be able to build a sequence in the middle of a complicated proof. Extracting the required context for an auxiliary def could be a mess.</p>",
        "id": 192686821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585842835
    },
    {
        "content": "<p>Even if you are in the middle of the proof, you can just collect the hypotheses that are currently active and put them as parameters to the recursive function. This is what lean does (note that <code>_example._match_1</code> in the first case has a psi argument)</p>",
        "id": 192686886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842850
    },
    {
        "content": "<p>We need a tactic handling this, and all the cases that Bhavik and Reid were interested in.</p>",
        "id": 192686923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585842863
    },
    {
        "content": "<p>The <code>abstract</code> tactic does this for you</p>",
        "id": 192686938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842870
    },
    {
        "content": "<p>it's not an editor plugin though</p>",
        "id": 192686987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585842890
    },
    {
        "content": "<p>What is the abstract tactic?</p>",
        "id": 192687064,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585842922
    },
    {
        "content": "<p>Here is a version of option 2 which abstracts the definition after constructing it. Note that in the latter two goals the function has the name <code>foo._aux_1</code>, and this name lives on after the def is done</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">abstract</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">ih</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">)],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">h_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span>\n<span class=\"c1\">-- def foo._aux_1 : (ℕ → ℕ) → ℕ → ℕ :=</span>\n<span class=\"c1\">-- λ (ψ : ℕ → ℕ) (n : ℕ), nat.rec_on n 0 (λ (n ih : ℕ), ψ ih + 1)</span>\n</pre></div>",
        "id": 192687857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843128
    },
    {
        "content": "<p>I don't see how it helps. Now you have the auxiliary definition when you no longer need it, right?</p>",
        "id": 192688008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843196
    },
    {
        "content": "<p>What it doesn't give you is the nice parsing with an equation compiler that <code>def</code> provides</p>",
        "id": 192688185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843259
    },
    {
        "content": "<p>What it is accomplishing that other tactics don't usually do is the creation of a definition in the global environment based on a term stuck in a local context</p>",
        "id": 192688258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843301
    },
    {
        "content": "<p>But we don't want a def at all. We want to construct a sequence during a proof and then throw it away.</p>",
        "id": 192688260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843302
    },
    {
        "content": "<p>We do want a def, because a def has equations and stuff that you want recursive functions to have</p>",
        "id": 192688360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843328
    },
    {
        "content": "<p>If the recursion is small enough, like in this example, option 2 is tolerable, but the function is this big expression that makes things harder to see</p>",
        "id": 192688472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843379
    },
    {
        "content": "<p>That's why we need a tactic.</p>",
        "id": 192688610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843439
    },
    {
        "content": "<p>For bigger recursive functions the equation compiler packs up the recursor behind a constant and you only unfold it through <code>dsimp</code> or <code>rw</code> and it automatically refolds the recursive call into the constant</p>",
        "id": 192688673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843450
    },
    {
        "content": "<p>Just like we needed the <code>choose</code> tactic. The tactic will need to both create the function and the correct properties in the context.</p>",
        "id": 192688724,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843481
    },
    {
        "content": "<p>It can't be in the local context because defeq matters here</p>",
        "id": 192688807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843515
    },
    {
        "content": "<p>the function is supposed to definitionally unfold a certain way</p>",
        "id": 192688860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843532
    },
    {
        "content": "<p>How does <code>abstract</code> help with that?</p>",
        "id": 192688999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843572
    },
    {
        "content": "<p>It creates a def for the call to the recursor</p>",
        "id": 192689030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843588
    },
    {
        "content": "<p>and then that def now satisfies the requisite defeq lemmas</p>",
        "id": 192689075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843605
    },
    {
        "content": "<p>Just for the record, I needed to construct a sequence in the middle of the proof of Baire theorem, with complicated assumptions for which it wouldn't make sense to pull them out of the proof, and I used <code>nat.rec_on</code> (see <a href=\"https://github.com/leanprover-community/mathlib/blob/a88356ff00b46ca1ea498c282e14c245e1424f79/src/topology/metric_space/baire.lean#L129\" title=\"https://github.com/leanprover-community/mathlib/blob/a88356ff00b46ca1ea498c282e14c245e1424f79/src/topology/metric_space/baire.lean#L129\">https://github.com/leanprover-community/mathlib/blob/a88356ff00b46ca1ea498c282e14c245e1424f79/src/topology/metric_space/baire.lean#L129</a>). It worked perfectly well, but if you see a better way to refactor it I am interested. I also used it to prove completeness of the set of compact subsets for the Hausdorff distance, see <a href=\"https://github.com/leanprover-community/mathlib/blob/a88356ff00b46ca1ea498c282e14c245e1424f79/src/topology/metric_space/closeds.lean#L126\" title=\"https://github.com/leanprover-community/mathlib/blob/a88356ff00b46ca1ea498c282e14c245e1424f79/src/topology/metric_space/closeds.lean#L126\">https://github.com/leanprover-community/mathlib/blob/a88356ff00b46ca1ea498c282e14c245e1424f79/src/topology/metric_space/closeds.lean#L126</a>. So, this comes up pretty often in analysis, and a nice tactic would definitely be useful.</p>",
        "id": 192689160,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585843643
    },
    {
        "content": "<p>I should mention that <code>abstract</code> is very rarely used and somewhat \"raw\". Some more work needs to go into it to make it more generally useful</p>",
        "id": 192689178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843650
    },
    {
        "content": "<p>Mario, why can't you do that in a tactic if <code>abstract</code> can do it?</p>",
        "id": 192689217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843669
    },
    {
        "content": "<p>you can, work is needed</p>",
        "id": 192689239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843678
    },
    {
        "content": "<p>abstract is doing the equivalent of taking a term and copying it into a new def</p>",
        "id": 192689336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843705
    },
    {
        "content": "<p>Is <code>abstract</code> written in Lean or C++?</p>",
        "id": 192689398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843738
    },
    {
        "content": "<p>the only smarts it has is identifying which variables from the current context need to be in the new def to make it typecheck</p>",
        "id": 192689406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843741
    },
    {
        "content": "<p>It's a relatively small lean wrapper around some C++</p>",
        "id": 192689435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843755
    },
    {
        "content": "<p>So we need to change Lean, right?</p>",
        "id": 192689583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843804
    },
    {
        "content": "<p>actually, I stand corrected, almost all of the smarts is in lean</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">abstract</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">suffix</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zeta_reduce</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">fail_if_no_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">type</span> <span class=\"err\">←</span> <span class=\"k\">if</span> <span class=\"n\">zeta_reduce</span> <span class=\"k\">then</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">zeta</span> <span class=\"k\">else</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">is_lemma</span> <span class=\"err\">←</span> <span class=\"n\">is_prop</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n   <span class=\"n\">m</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">],</span>\n   <span class=\"n\">tac</span><span class=\"o\">,</span>\n   <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">num_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;abstract tactic failed, there are unsolved goals&quot;</span><span class=\"o\">),</span>\n   <span class=\"n\">set_goals</span> <span class=\"n\">gs</span><span class=\"o\">,</span>\n   <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n   <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"k\">if</span> <span class=\"n\">zeta_reduce</span> <span class=\"k\">then</span> <span class=\"n\">zeta</span> <span class=\"n\">val</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n   <span class=\"n\">c</span>   <span class=\"err\">←</span> <span class=\"n\">mk_aux_decl_name</span> <span class=\"n\">suffix</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span>   <span class=\"err\">←</span> <span class=\"n\">add_aux_decl</span> <span class=\"n\">c</span> <span class=\"n\">type</span> <span class=\"n\">val</span> <span class=\"n\">is_lemma</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">e</span>\n</pre></div>",
        "id": 192689635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843821
    },
    {
        "content": "<p>the C++ core bit is <code>add_aux_decl</code> at the end</p>",
        "id": 192689658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843834
    },
    {
        "content": "<p>Is there hope then?</p>",
        "id": 192689807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585843899
    },
    {
        "content": "<p>This still isn't really what you are after since it does nothing to make writing recursive functions easy. It doesn't call the equation compiler, and it doesn't even generate a regular equation for the term which breaks <code>dsimp [foo._aux_1]</code></p>",
        "id": 192689938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843951
    },
    {
        "content": "<p>I think some of the new apis in community lean can help with this</p>",
        "id": 192689979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585843974
    },
    {
        "content": "<p>Ok, this definitely seems to be above my tactic writing skills. Let's say Sébastien, Bhavik and I would be very grateful if some expert could make this dream true.</p>",
        "id": 192690066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585844031
    },
    {
        "content": "<p>I think the best option is to make option 1 have nicer syntax and skip the hackery, like so</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">in</span> <span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">a_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192690292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844127
    },
    {
        "content": "<p>No, this is still assuming you know everything needed upfront.</p>",
        "id": 192690589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585844243
    },
    {
        "content": "<p>No, it can be in the middle of a proof too</p>",
        "id": 192690616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844257
    },
    {
        "content": "<p>It might be a bit messy to exit and re-enter tactic mode but I do this all the time when I want to use <code>match</code></p>",
        "id": 192690722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844287
    },
    {
        "content": "<p>Here's a horrible idea:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">a_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>That <code>let foo ... end</code> is just a named <code>match</code></p>",
        "id": 192690939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844394
    },
    {
        "content": "<p>in the middle of a proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"kn\">end</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hψ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">a_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">},</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">n_ih</span> <span class=\"o\">(</span><span class=\"n\">hψ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192691164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844481
    },
    {
        "content": "<p>we could also steal Coq's notation and call it <code>fix</code> instead</p>",
        "id": 192691429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844581
    },
    {
        "content": "<p>I swear I tried this <code>let</code> + <code>|</code> thing.</p>",
        "id": 192691600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585844650
    },
    {
        "content": "<p>It doesn't work</p>",
        "id": 192691623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844666
    },
    {
        "content": "<p>it's  a proposed syntax</p>",
        "id": 192691634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844672
    },
    {
        "content": "<p>conveniently unused as of now</p>",
        "id": 192691654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844681
    },
    {
        "content": "<p>Oh ok.</p>",
        "id": 192691656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585844682
    },
    {
        "content": "<p>I'm more interested in whether this solves your problems</p>",
        "id": 192691754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844736
    },
    {
        "content": "<p>But really this looks too much like programming. My dreamed tactic would open a goal for <code>foo 0</code>, a goal for <code>foo n+1</code>, just like induction does, and then give me all the required lemmas and definitional equalities.</p>",
        "id": 192691925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585844788
    },
    {
        "content": "<p>You can do that today</p>",
        "id": 192691948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844798
    },
    {
        "content": "<p>just define a function by <code>induction</code></p>",
        "id": 192691972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844806
    },
    {
        "content": "<p>If you are defining a function and want all the lemmas to look nice, I think there is a decent argument that you should write the function in term mode like this, so that you actually have to write down what the lemmas look like</p>",
        "id": 192692123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844879
    },
    {
        "content": "<p>For example, did you know that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">equations</span>\n<span class=\"c1\">-- foo.equations._eqn_1 : foo 0 = 0</span>\n<span class=\"c1\">-- foo.equations._eqn_2 : ∀ (n : ℕ), foo (n + 1) = 1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">equations</span>\n<span class=\"c1\">-- foo&#39;.equations._eqn_1 : foo&#39; 0 = 0</span>\n<span class=\"c1\">-- foo&#39;.equations._eqn_2 : ∀ (n : ℕ), foo&#39; (nat.succ n) = 1</span>\n</pre></div>\n\n\n<p>produce different equation lemmas?</p>",
        "id": 192692268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844937
    },
    {
        "content": "<p>the equation compiler uses the way you write the cases as a cue for how to state the lemmas</p>",
        "id": 192692349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585844970
    },
    {
        "content": "<p>I'm struggling to figure out what the UI for an equation compiler tactic would be. I guess something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">equation_compile</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"o\">{</span> <span class=\"c\">/-</span><span class=\"cm\"> P 0 -/</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c\">/-</span><span class=\"cm\"> P (n+1) -/</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n<p>but all the pieces seem to be placed badly</p>",
        "id": 192693143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585845326
    },
    {
        "content": "<p>I'm not sure actually.</p>",
        "id": 192693845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585845658
    },
    {
        "content": "<p>I have a variation on this question that is also related to handling finite stuff. Here is my new challenge:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span>  <span class=\"n\">finite</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 193682245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586643089
    },
    {
        "content": "<p>The math proof is an obvious strong induction, apply assumption <code>h</code> to the part of the sequence that is already constructed.</p>",
        "id": 193682328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586643241
    },
    {
        "content": "<p>I should have posted that in the new members stream using a pseudonym <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 193702718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586682501
    },
    {
        "content": "<p>MWE?</p>",
        "id": 193703005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586682972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span>  <span class=\"n\">finite</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 193703026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586683031
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_beta</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ih</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ih</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- I give up</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span>  <span class=\"n\">finite</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">h</span>\n    <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">finite_range</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on_beta</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hmn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hmn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 193703821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586684579
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/nat.2Estrong_rec_on_beta/near/193709204\" title=\"#narrow/stream/113489-new-members/topic/nat.2Estrong_rec_on_beta/near/193709204\">Sorry filled in here</a></p>",
        "id": 193709288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691221
    }
]