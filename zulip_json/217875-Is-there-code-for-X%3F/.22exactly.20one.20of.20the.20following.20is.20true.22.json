[
    {
        "content": "<p>Hi, Is there a preferred way of saying \"exactly one of the following conditions is true\" in lean? Thank you.</p>",
        "id": 309149064,
        "sender_full_name": "learnreal",
        "timestamp": 1668155905
    },
    {
        "content": "<p>This is how I would state it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃!</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>If you want it to be \"more\" computable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">l.all</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">l</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proof that both definitions are the same</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃!</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">l.all</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"n\">by_cases</span> <span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">iff_true</span> <span class=\"n\">P</span> <span class=\"n\">at</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">bool.to_bool_not</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span> <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"mi\">0</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.all_iff_forall</span><span class=\"o\">,</span> <span class=\"n\">bool.bnot_iff_not</span><span class=\"o\">,</span> <span class=\"n\">bool.of_to_bool_iff</span><span class=\"o\">],</span>\n        <span class=\"n\">rintro</span> <span class=\"n\">P</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">list.mem_iff_nth</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rintro</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">iff_true</span> <span class=\"n\">P</span> <span class=\"n\">at</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hP</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.all_iff_forall</span><span class=\"o\">,</span> <span class=\"n\">bool.bnot_iff_not</span><span class=\"o\">,</span> <span class=\"n\">bool.of_to_bool_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">rintro</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">list.mem_iff_nth</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"n\">trivial</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">iff_false</span> <span class=\"n\">at</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n        <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">],</span> <span class=\"n\">rintro</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">nat.succ_inj'</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">],</span> <span class=\"n\">rintro</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">h₂</span> <span class=\"o\">}}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 309153837,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668158049
    },
    {
        "content": "<p>I don't think there is an already existing preferred way though, so it might depend a lot on your use case, what sort of statement are you trying to make?</p>",
        "id": 309157249,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668159513
    },
    {
        "content": "<p>Thank you for the suggestion. Let me try how this goes.</p>",
        "id": 309164622,
        "sender_full_name": "learnreal",
        "timestamp": 1668162431
    },
    {
        "content": "<p>I was trying to learn lean using some basic geometry. I was trying to model \"\\for C: circle P:point, exactly one of the following is true: P is in C, P is on C, P is out side C\"</p>\n<p>Still struggling to model this in general, but specifically about the \"exactly one\" part. Please let me know if there is a better way of saying this than suggested above.</p>",
        "id": 309164840,
        "sender_full_name": "learnreal",
        "timestamp": 1668162534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span>, your \"more computable\" spelling requires <code>open_locale classical</code> which feels less computable</p>",
        "id": 309165961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668162976
    },
    {
        "content": "<p>I would guess this definition is more practical:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tfax</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">tfax</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 309166429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668163194
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tfax</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">l.count</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 309171956,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668165467
    },
    {
        "content": "<p>That feels way more awkward to prove when the number of items in the list is known in advance</p>",
        "id": 309182027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668169607
    },
    {
        "content": "<p>Which if this is anythink like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.tfae\">docs#list.tfae</a>, it almost always will be</p>",
        "id": 309182092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668169634
    },
    {
        "content": "<p>Thank you all. It works for me. Need to figure out which is \"better\" for proofs.</p>",
        "id": 310835906,
        "sender_full_name": "learnreal",
        "timestamp": 1668782309
    }
]