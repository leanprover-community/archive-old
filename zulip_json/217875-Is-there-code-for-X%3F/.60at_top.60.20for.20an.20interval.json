[
    {
        "content": "<p>Does this exist somewhere?  (\"The <code>at_top</code> filter for an interval <code>Ioo a b</code> comes from <code>ùìù[Iio b] b</code>.\")</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">at_top</span> <span class=\"bp\">=</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span><span class=\"o\">[</span><span class=\"n\">Iio</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ü®</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">to_subtype</span> <span class=\"o\">(</span><span class=\"n\">dense</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">‚â•</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">z</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®</span><span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Ioo_mem_nhds_within_Iio</span> <span class=\"o\">(</span><span class=\"n\">right_mem_Ioc</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hx</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hz</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hts</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxt</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">Iio</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem_nhds_within_Iio_iff_exists_Ioo_subset&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hay</span><span class=\"o\">,</span> <span class=\"n\">hyb</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">dense</span> <span class=\"o\">(</span><span class=\"n\">max_lt_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">‚ü©</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max_lt_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hay</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hyb</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hts</span> <span class=\"o\">(</span><span class=\"n\">hxt</span> <span class=\"bp\">‚ü®</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hay</span><span class=\"o\">)</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">‚ü©</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(Golfing also welcome. )</p>",
        "id": 208990320,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599148998
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.order_top.at_top_eq\">docs#filter.order_top.at_top_eq</a></p>",
        "id": 208994729,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599150733
    },
    {
        "content": "<p>I found this by asking myself \"what's the generalization of the theorem?\"</p>",
        "id": 208994821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599150772
    },
    {
        "content": "<p>oh wait that's different from what you're asking for I guess</p>",
        "id": 208994919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599150820
    },
    {
        "content": "<p>Yes, I'm not sure it's relevant.</p>",
        "id": 208995189,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599150929
    },
    {
        "content": "<p>Can you explain how you thought it would apply here?</p>",
        "id": 208995255,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599150959
    },
    {
        "content": "<p>I thought it was <code>at_top</code> for <code>Icc a b</code></p>",
        "id": 208997258,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599151827
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4043\">#4043</a></p>",
        "id": 209149194,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599261306
    }
]