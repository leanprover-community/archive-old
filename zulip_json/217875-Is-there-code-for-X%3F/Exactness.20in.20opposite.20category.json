[
    {
        "content": "<p>If we have <code>[exact f g]</code>, do we have <code>[exact g.op f.op]</code> in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.homology.exact</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">exact.op</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_equalizers</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_images</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_equalizers</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_images</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"n\">exact.w</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">congr_arg</span> <span class=\"n\">quiver.hom.op</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">eq1</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 271016331,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1644256388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> were you thinking about this recently?</p>",
        "id": 271017407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644256791
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">$</span> <span class=\"n\">rg</span> <span class=\"s2\">\"exact g.op f.op\"</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">exact_seq.lean</span>\n<span class=\"mi\">101</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span> <span class=\"o\">:=</span>\n<span class=\"mi\">280</span><span class=\"o\">:</span>  <span class=\"k\">have</span> <span class=\"n\">hgf</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 271018988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644257337
    },
    {
        "content": "<p>who needs library-search when you have ripgrep</p>",
        "id": 271019034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644257360
    }
]