[
    {
        "content": "<p>Do we have something like this anywhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_of_measure_ne_zero_of_ae</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">S</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᵐ</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ.restrict</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht₁</span> <span class=\"o\">:</span> <span class=\"n\">μ.restrict</span> <span class=\"n\">S</span> <span class=\"n\">t</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">ht₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">eventually_iff_exists_mem.mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_nonempty_iff_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">inter_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bot_eq_empty</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">inf_eq_inter</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">disjoint_iff</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">sdiff_eq_self_iff_disjoint</span><span class=\"o\">,</span> <span class=\"n\">diff_eq_compl_inter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">measure.restrict_apply₀</span> <span class=\"o\">(</span><span class=\"n\">null_measurable_set.of_null</span> <span class=\"n\">ht₁</span><span class=\"o\">),</span> <span class=\"n\">ht₁</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hst</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">ht₂</span> <span class=\"n\">x</span> <span class=\"n\">hx₂</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291636799,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1659389834
    },
    {
        "content": "<p>The key lemma is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.ae_restrict_ne_bot\">docs#measure_theory.ae_restrict_ne_bot</a></p>",
        "id": 291647356,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659397188
    },
    {
        "content": "<p>Then you can apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually.exists\">docs#filter.eventually.exists</a></p>",
        "id": 291647436,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659397222
    },
    {
        "content": "<p>Oh and if you want the fact that <code>x ∈ S</code> you also need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ae_restrict_mem\">docs#ae_restrict_mem</a></p>",
        "id": 291647739,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659397460
    },
    {
        "content": "<p>Oh but my proof needs <code>S</code> to be measurable</p>",
        "id": 291648844,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659398367
    },
    {
        "content": "<p>Ok here's a proof without assuming that <code>S</code> is measurable : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_of_measure_ne_zero_of_ae</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">S</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᵐ</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ.restrict</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">measure.restrict_apply_self</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">frequently_ae_mem_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hS.and_eventually</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291650488,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659399727
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> this is exactly what I wanted. I just tried quite hard and I can even find a way to golf this :-)</p>",
        "id": 291678102,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1659428152
    },
    {
        "content": "<p>I just made this a PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/15812\">#15812</a></p>",
        "id": 291690786,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1659436285
    }
]