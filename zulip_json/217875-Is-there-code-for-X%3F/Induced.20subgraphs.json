[
    {
        "content": "<p>I would like to pass to the induced subgraph of a graph. The following example attempts to take the subgraph of a triangle induced by two vertices:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.subgraph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">K3</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">simple_graph.subgraph.top</span> <span class=\"o\">:</span> <span class=\"n\">K3.subgraph</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">simple_graph.subgraph.induce</span> <span class=\"o\">(</span><span class=\"n\">simple_graph.subgraph.top</span> <span class=\"o\">:</span> <span class=\"n\">K3.subgraph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The final <code>#check</code> results in the error <code>unknown identifier 'simple_graph.subgraph.induce'</code>. What am I missing here?</p>",
        "id": 289912605,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658104841
    },
    {
        "content": "<p>First, two simplifications:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.subgraph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">K3</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">K3.subgraph</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The definition of <code>⊤ : simple_graph (fin 3)</code> is the complete graph on the given vertex type, and <code>⊤ : K3.subgraph</code> is the graph as a subgraph of itself (the documentation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.subgraph.top\">docs#simple_graph.subgraph.top</a> ought to mention that this is the preferred way to write it).</p>",
        "id": 289913679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658106631
    },
    {
        "content": "<p>I'm getting a different error from <code>unknown identifier 'simple_graph.subgraph.induce'</code>. Maybe you have an older mathlib? This was added a week or two ago.</p>",
        "id": 289913693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658106669
    },
    {
        "content": "<p>Heh, I downloaded mathlib on Monday or Tuesday. Is it easy to update?</p>",
        "id": 289913743,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658106735
    },
    {
        "content": "<p>The error I'm getting is from the fact that <code>fin 2</code> is a type, not a <code>set (fin 3)</code>.  One way to do what I think you want is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">simple_graph.subgraph.induce</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">K3.subgraph</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 289913744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658106736
    },
    {
        "content": "<p>This <code>{0, 1}</code> ends up being a <code>set (fin 3)</code></p>",
        "id": 289913754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658106770
    },
    {
        "content": "<p>That's weird that you have this error if you got mathlib last week -- it was added on July 7th (<a href=\"https://github.com/leanprover-community/mathlib/pull/14034\">#14034</a>)</p>",
        "id": 289913812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658106844
    },
    {
        "content": "<p>Yeah, I get the same error with your <code>#check simple_graph.subgraph.induce (⊤ : K3.subgraph) {0, 1}</code></p>",
        "id": 289913875,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658106988
    },
    {
        "content": "<p>By the way, you probably don't want it, but I just thought I'd mention that another way to do induced graphs, if you want to get a <code>simple_graph</code> rather than a subgraph, is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">K3.induce</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(I'm not quite sure why it needs the <code>set (fin 3)</code> type ascription hint here. Edit: oh, it's probably the argument order for <code>simple_graph.induce</code>)</p>",
        "id": 289913885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658107020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"450749\">Dustin Mixon</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Induced.20subgraphs/near/289913743\">said</a>:</p>\n<blockquote>\n<p>Heh, I downloaded mathlib on Monday or Tuesday. Is it easy to update?</p>\n</blockquote>\n<p>Did you create a project using <code>leanproject</code>? I think you can do <code>leanproject upgrade-mathlib</code>.</p>",
        "id": 289913890,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658107048
    },
    {
        "content": "<p>I just upgraded, and I'm getting the same errors. Here's the error I get for your <code>simple_graph</code> alternative:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">induce'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">simple_graph.induce'</span>\n  <span class=\"n\">K3</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289914013,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658107240
    },
    {
        "content": "<p>Anyway, once you get mathlib working, you can make use of dot notation for <code>simple_graph.subgraph.induce</code> and write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">K3.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>for short. This is the way it was intended to be written, but you don't have to.</p>",
        "id": 289914022,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658107265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450749\">@Dustin Mixon</span> When you upgrade mathlib, do you see this line?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">87</span><span class=\"n\">fc68283f9b2139606540086d135bd5ab95b8ad</span>\n</code></pre></div>\n<p>Does it have the same revision as this?</p>",
        "id": 289914089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658107414
    },
    {
        "content": "<p>Oh, another thing, after you upgraded, did you restart Lean in VS Code or whatever editor you're using?</p>",
        "id": 289914151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658107501
    },
    {
        "content": "<p>I don't see any line like that. I just put <code>leanproject upgrade-mathlib</code> in the terminal, and it downloaded (and installed) a component called 'lean' and then gave me some warnings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">installing</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">configuring</span> <span class=\"n\">_user_local_packages</span> <span class=\"mi\">1</span>\n<span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">leanpkg</span> <span class=\"n\">configurations</span> <span class=\"n\">not</span> <span class=\"n\">specifying</span> <span class=\"bp\">`</span><span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">\"src\"</span><span class=\"bp\">`</span> <span class=\"n\">are</span> <span class=\"n\">deprecated.</span>\n<span class=\"n\">configuring</span> <span class=\"n\">_user_local_packages</span> <span class=\"mi\">1</span>\n<span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">leanpkg</span> <span class=\"n\">configurations</span> <span class=\"n\">not</span> <span class=\"n\">specifying</span> <span class=\"bp\">`</span><span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">\"src\"</span><span class=\"bp\">`</span> <span class=\"n\">are</span> <span class=\"n\">deprecated.</span>\n<span class=\"n\">configuring</span> <span class=\"n\">_user_local_packages</span> <span class=\"mi\">1</span>\n<span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">leanpkg</span> <span class=\"n\">configurations</span> <span class=\"n\">not</span> <span class=\"n\">specifying</span> <span class=\"bp\">`</span><span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">\"src\"</span><span class=\"bp\">`</span> <span class=\"n\">are</span> <span class=\"n\">deprecated.</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">dustin.mixon</span><span class=\"bp\">/.</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n</code></pre></div>\n<p>I also restarted VS Code. I don't know how to restart Lean in VS Code.</p>",
        "id": 289914237,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658107660
    },
    {
        "content": "<p>Stepping back (it's something I should have asked), how did you create your Lean project?</p>",
        "id": 289914301,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658107755
    },
    {
        "content": "<p>(To restart Lean without restarting VS Code, you can do ctrl-shift-P, then \"Lean: Restart\", but restarting VS Code is sufficient.)</p>",
        "id": 289914364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658107835
    },
    {
        "content": "<p>Not sure what you mean by a Lean project. To write the above lean code, I opened VS Code, made a new file, and saved it as a <code>.lean</code> file in <code> /Users/dustin.mixon/my_project/src</code>.</p>",
        "id": 289914496,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658108043
    },
    {
        "content": "<p>I just restarted Lean as you suggested, and I'm still getting the same errors.</p>",
        "id": 289914528,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658108133
    },
    {
        "content": "<p>Hmm, maybe you're asking how I installed everything in the first place. I just followed these instructions: <a href=\"https://leanprover-community.github.io/install/macos.html#m1-macs--apple-silicon\">https://leanprover-community.github.io/install/macos.html#m1-macs--apple-silicon</a></p>",
        "id": 289914749,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658108462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"450749\">Dustin Mixon</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Induced.20subgraphs/near/289914496\">said</a>:</p>\n<blockquote>\n<p>Not sure what you mean by a Lean project. To write the above lean code, I opened VS Code, made a new file, and saved it as a <code>.lean</code> file in <code> /Users/dustin.mixon/my_project/src</code>.</p>\n</blockquote>\n<p>If I understand you correctly, you created the folder <code>my_project</code> yourself and just put a <code>.lean</code> file there, right? You need to create a lean project with some additional support files. <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a></p>",
        "id": 289914803,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658108528
    },
    {
        "content": "<p>If you do <code>leanproject new my_project</code> when you're in <code>/Users/dustin.mixon</code>, it will create the <code>my_project</code> folder for you, then you can open that folder in VS Code</p>",
        "id": 289914818,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658108573
    },
    {
        "content": "<p>It works!! Thanks so much!</p>",
        "id": 289915033,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658108908
    },
    {
        "content": "<p>Do I really need to prove that an induced subgraph is induced, or is the proof already lurking somewhere? Here's what I'm up against:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.subgraph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">K3</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n<span class=\"kd\">def</span> <span class=\"n\">K2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">K3.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">:</span> <span class=\"n\">K2.is_induced</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290128546,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658249474
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 290130814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658250355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450749\">@Dustin Mixon</span> That seems to be a glaring oversight <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 290131205,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658250510
    },
    {
        "content": "<p>Feel free to open a PR with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">induce_top_is_induced</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_induced</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>You can put it at the end of the <code>induce</code> section in <code>combinatorics/simple_graph/subgraph.lean</code>.</p>",
        "id": 290131636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658250687
    },
    {
        "content": "<p>I'm confused. I checked your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.subgraph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">K3</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n<span class=\"kd\">def</span> <span class=\"n\">K2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">K3.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">:</span> <span class=\"n\">K2.is_induced</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and got the error <code>simplify tactic failed to simplify</code>. Am I doing something wrong?</p>",
        "id": 290136296,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658252888
    },
    {
        "content": "<p>Yes, it's because <code>simp</code> won't unfold the definition of <code>K2</code> for you. You probably could fix it using <code>simp [K2] { contextual := tt }</code> or by adding <code>@[reducible]</code> to the definition of <code>K2</code>.</p>\n<p>Another way is to use the lemma directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">:</span> <span class=\"n\">K2.is_induced</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">simple_graph.subgraph.induce_top_is_induced</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(I'm not completely certain why the <code>apply</code> is needed here. It's getting around some elaboration oddity.)</p>",
        "id": 290141254,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658255381
    },
    {
        "content": "<p>Here's another lemma that would be useful to add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">induce_is_induced_of_is_induced</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">G'.is_induced</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">G'.verts</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G'.induce</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_induced</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">induce_verts</span><span class=\"o\">,</span> <span class=\"n\">induce_adj</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hv</span> <span class=\"n\">hw</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">hv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290141880,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658255669
    }
]