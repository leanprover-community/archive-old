[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.lift\">docs#complex.lift</a> doesn't exist</p>",
        "id": 244135291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624882639
    },
    {
        "content": "<p>But does this really exist? You can chose both <code>I</code> and <code>-I</code>, no? I mean, if you take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">A=\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>, is the <em>canonical</em> map the identity or its opposite?</p>",
        "id": 244135467,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624882738
    },
    {
        "content": "<p>I've replaced the word \"canonical\" with \"unique\"</p>",
        "id": 244135503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624882763
    },
    {
        "content": "<p>For a given <code>I'</code> there is a unique map</p>",
        "id": 244135511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624882770
    },
    {
        "content": "<p>Ah sure, once the <code>I'</code> is chosen I agree.</p>",
        "id": 244135525,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624882782
    },
    {
        "content": "<p>I was able to define this as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">complex.lift</span> <span class=\"o\">(</span><span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">I'</span> <span class=\"bp\">*</span> <span class=\"n\">I'</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">alg_hom.mk'</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map.comp</span> <span class=\"n\">complex.re_lm</span> <span class=\"bp\">+</span>\n                <span class=\"o\">(</span><span class=\"n\">linear_map.to_span_singleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">I'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">complex.im_lm</span><span class=\"o\">),</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.map_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.map_add</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">change</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"bp\">*</span> <span class=\"n\">x₂</span> <span class=\"bp\">-</span> <span class=\"n\">y₁</span> <span class=\"bp\">*</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"bp\">*</span> <span class=\"n\">y₂</span> <span class=\"bp\">+</span> <span class=\"n\">y₁</span> <span class=\"bp\">*</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">I'</span> <span class=\"bp\">=</span>\n             <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">y₁</span> <span class=\"bp\">•</span> <span class=\"n\">I'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"n\">x₂</span> <span class=\"bp\">+</span> <span class=\"n\">y₂</span> <span class=\"bp\">•</span> <span class=\"n\">I'</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_mul_smul</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">smul_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">algebra.commutes</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ring_hom.map_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">algebra.smul_def</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">y₁</span> <span class=\"n\">x₂</span><span class=\"o\">],</span>\n      <span class=\"n\">abel</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">I'</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_one</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">linear_map.map_smul</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I suspect there's a shorter way</p>",
        "id": 244135818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624882940
    },
    {
        "content": "<p>Have you looked around <a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/minpoly\">https://leanprover-community.github.io/mathlib_docs/field_theory/minpoly</a>?</p>",
        "id": 244136125,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624883130
    },
    {
        "content": "<p>I can't find lifts of morphisms, though.</p>",
        "id": 244136168,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624883157
    },
    {
        "content": "<p>You could define a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_basis\">docs#power_basis</a> on the complex numbers, then you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_basis.lift\">docs#power_basis.lift</a> :P</p>",
        "id": 244136279,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624883198
    },
    {
        "content": "<p>Something with <code>splitting_field.lift</code> maybe also works?</p>",
        "id": 244136307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624883215
    },
    {
        "content": "<p>(Not sure how seriously to take my suggestion.)</p>",
        "id": 244136328,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624883225
    },
    {
        "content": "<p><del>You should be able to do this with extension of scalars, though you might need to fill in some gaps to get it to work.</del> Wait sorry, that's not what you want.</p>",
        "id": 244136378,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624883250
    },
    {
        "content": "<p>Well, I really think it is a good suggestion, after all the setting is very much field-extension-ish.</p>",
        "id": 244136390,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624883261
    },
    {
        "content": "<p>My suspicion is that we probably do already have this somewhere, but inside some other construction that needed it</p>",
        "id": 244136945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624883536
    },
    {
        "content": "<p>It's very similar to the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zsqrtd.lift\">docs#zsqrtd.lift</a> that we already have</p>",
        "id": 244136956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624883549
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/8107\">#8107</a>, would appreciate any golfing suggestions</p>",
        "id": 244142323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624886171
    },
    {
        "content": "<p>I think the morally correct way to do <a href=\"https://github.com/leanprover-community/mathlib/issues/8107\">#8107</a> is to use a more general construction, i.e. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_basis.lift\">docs#power_basis.lift</a> (viewing <code>ℂ</code> as <code>adjoin ℝ I</code>) or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/splitting_field.lift\">docs#splitting_field.lift</a> (viewing <code>ℂ</code> as <code>splitting_field (X * X + 1 : polynomial R)</code>). I am quite sure though that we don't have the equiv form anywhere.</p>",
        "id": 244147072,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624888242
    },
    {
        "content": "<p>Do we have a proof that <code>minpoly ℝ (I : ℂ) = X * X + 1</code>?</p>",
        "id": 244148409,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624888814
    },
    {
        "content": "<p>Once we have the value of <code>minpoly ℝ I</code>, then <code>power_basis.lift_equiv</code> from <a href=\"https://github.com/leanprover-community/mathlib/issues/8110\">#8110</a> is exactly what we're looking for.</p>",
        "id": 244152625,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624890451
    },
    {
        "content": "<p>Those definitions sound like they won't unfold nearly as cleanly</p>",
        "id": 244158516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624892728
    },
    {
        "content": "<p>True, <code>unfold</code>ing <code>power_basis.lift</code> will give you some ugly term involving <code>basis.constr</code>. But it should pass very well through <code>simp</code>, or at least once you add a simp lemma stating <code>complex.lift I' hI I = I'</code>. (After all, the alg_hom is uniquely specified by what it does on <code>I = pb.gen</code>.)</p>",
        "id": 244171236,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624897999
    },
    {
        "content": "<p>Would you argue that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zsqrtd.lift\">docs#zsqrtd.lift</a> should be implemented using that machinery too?</p>",
        "id": 244173758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624899289
    },
    {
        "content": "<p>Looking at it mathematically, yes, I would prefer that. There is nothing in <code>zsqrtd.lift</code> that does not work for <code>adjoin_root</code> or <code>algebra.adjoin</code>. Implementation-wise, there might be an argument that we should try and keep zsqrtd-based definitions computable. For complex numbers that's counterargument is not so convincing though :)</p>",
        "id": 244175263,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624899916
    },
    {
        "content": "<p>Playing devil's advocate, perhaps we should have a <code>power_basis</code> API for taking this style of \"universal property\" over a single generator and constructing a power basis</p>",
        "id": 244175748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624900125
    },
    {
        "content": "<p>At any rate, I'll try to golf the proofs in <a href=\"https://github.com/leanprover-community/mathlib/issues/8107\">#8107</a> with the lemma in <a href=\"https://github.com/leanprover-community/mathlib/issues/8109\">#8109</a> so that I can more convincingly try to argue \"it's shorter to just prove it directly\".</p>",
        "id": 244176139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624900311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/The.20unique.20.60.E2.84.82.20.E2.86.92.E2.82.90.5B.E2.84.9D.5D.20A.60.20given.20a.20square.20root.20of.20-1/near/244175748\">said</a>:</p>\n<blockquote>\n<p>Playing devil's advocate, perhaps we should have a <code>power_basis</code> API for taking this style of \"universal property\" over a single generator and constructing a power basis</p>\n</blockquote>\n<p>Hmm, that sounds like a good idea actually. I'll have to think if \"lift given by one element ↔ power basis\" is true in full generality, but that should definitely be morally correct.</p>",
        "id": 244177014,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624900697
    },
    {
        "content": "<p>Here's level 2 of this game:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.quaternion</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">quaternion</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">quaternion_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">](</span><span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift_aux</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">c₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span><span class=\"n\">c₁</span><span class=\"o\">,</span><span class=\"n\">c₂</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">q.re</span> <span class=\"bp\">+</span> <span class=\"n\">q.im_i</span> <span class=\"bp\">•</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">q.im_j</span> <span class=\"bp\">•</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">q.im_k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">],</span> <span class=\"n\">abel</span> <span class=\"o\">},</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>That sorry looks very nasty, especially since all the surrounding simps use up lots of time</p>",
        "id": 244272418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624969929
    },
    {
        "content": "<p>I solved this in <a href=\"https://github.com/pygae/lean-ga/blob/46e5be3c97c4f99085a8452ca2213f53d2f17bf9/src/for_mathlib/data/quaternion.lean#L144-L159\">https://github.com/pygae/lean-ga/blob/46e5be3c97c4f99085a8452ca2213f53d2f17bf9/src/for_mathlib/data/quaternion.lean#L144-L159</a>, but I needed a substantial number of helper lemmas</p>",
        "id": 244303347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624981788
    }
]