[
    {
        "content": "<p>I just wrote several lemmas involving sums and products over <code>finset.range(m)\\finset.range(n)</code> and now I am thinking that maybe those exist somewhere. Is there a type for the natural numbers j verifying  n &lt;= j &lt; m? Even if there is no such type, is there a file with lemmas like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod_range_sdiff_offset</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">finset.range</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 219586015,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1607682133
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.range'\">docs#list.range'</a>, perhaps? I guess that's not quite there either</p>",
        "id": 219586302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607682268
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Ico\">docs#set.Ico</a>?</p>",
        "id": 219586346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607682311
    },
    {
        "content": "<p>Thanks for giving me the Ico idea : I just found algebra.big_operators.intervals</p>",
        "id": 219587147,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1607682873
    },
    {
        "content": "<p>my lemma above looks similar to <code>finset.prod_Ico_eq_prod_range</code></p>",
        "id": 219587177,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1607682889
    },
    {
        "content": "<p>and apparently there is a <code>finset.Ico</code>. The finset part of mathlib really is the scary part to me. it feels like there are 100 different types and that making them interact is not that easy</p>",
        "id": 219587354,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1607682990
    },
    {
        "content": "<p>I have been worrying on and off about these lemmas for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>a</mi></mrow><mi>b</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=a}^b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2887179999999998em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9890079999999999em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span></span></span></span> for years now, and my current gut feeling is that <code>finset.Ico</code> works great and summing/prodding over that finset should be the default way to express stuff.</p>",
        "id": 219604334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607692647
    }
]