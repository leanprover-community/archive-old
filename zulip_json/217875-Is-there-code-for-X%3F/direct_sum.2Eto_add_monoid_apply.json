[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"c1\">-- or decidable whatever</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→+</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">direct_sum.to_add_monoid_apply</span> <span class=\"o\">:</span>\n  <span class=\"n\">direct_sum.to_add_monoid</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">dfinsupp.sum</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I was expecting the proof to be <code>rfl</code>.</p>",
        "id": 234577805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618434907
    },
    {
        "content": "<p>Background: I'm defining gradings on rings and I'm trying to do some test cases, e.g. a polynomial ring is nat-graded, a mv_polynomial ring is graded by something I've not worked out yet, a monoid ring is graded by the monoid etc.</p>",
        "id": 234578540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618435225
    },
    {
        "content": "<p>Not sure why the library wasn't set up in a way that this was <code>rfl</code>, but here are two possible proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">direct_sum.to_add_monoid</span><span class=\"o\">,</span> <span class=\"n\">dfinsupp.lift_add_hom</span><span class=\"o\">,</span> <span class=\"n\">dfinsupp.sum_add_hom_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dfinsupp.sum_add_hom_apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 234578552,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618435226
    },
    {
        "content": "<p>mv_polynomial should be <code>sigma \\to nat</code>-graded?</p>",
        "id": 234578955,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1618435411
    },
    {
        "content": "<p>Thanks to both of you! This chat rocks :-)</p>",
        "id": 234579106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618435475
    },
    {
        "content": "<p>I'm loving the docstring of <code>sum_add_hom_apply</code> too</p>",
        "id": 234579205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618435524
    },
    {
        "content": "<p>I think the API is that way because duplicating every dfinsupp lemma to direct_sum would be a massive time sink</p>",
        "id": 234579700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618435720
    },
    {
        "content": "<p>And it's not defeq because <code>dfinsupp.sum</code> has awful decidability requirements that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.sum_add_hom\">docs#dfinsupp.sum_add_hom</a> avoids</p>",
        "id": 234579782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618435765
    },
    {
        "content": "<p>I think I might be partially to blame for the friction here</p>",
        "id": 234579915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618435826
    },
    {
        "content": "<p>Yes I noticed this! That's why I went classical -- I couldn't figure out why I suddenly needed extra decidability hypotheses. The only clues I could find were in that \"docstring\" :-)</p>",
        "id": 234580159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618435951
    },
    {
        "content": "<p>I played with examples graded rings a little in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.is_homogeneous.homogeneous_submodule.gcomm_monoid\">docs#mv_polynomial.is_homogeneous.homogeneous_submodule.gcomm_monoid</a></p>",
        "id": 234580166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618435952
    },
    {
        "content": "<p>Note the <code>gmonoid</code> API was designed with the (external) direct sum of tensor powers in mind, which is why it needs glue for submodules</p>",
        "id": 234580503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618436091
    },
    {
        "content": "<p>I think that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.comm_semiring\">docs#direct_sum.comm_semiring</a> is what I should be putting a grading on (to test the definition). Did you need commutative?</p>",
        "id": 234580964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618436328
    },
    {
        "content": "<p>Aah, got it: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.semiring\">docs#direct_sum.semiring</a></p>",
        "id": 234581050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618436385
    }
]