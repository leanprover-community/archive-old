[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.product\"><code>finset.product</code></a> takes two <code>finsets</code> and creates a <code>finset</code> of all tuples over them.<br>\nIs there an inverse to this? I.e. a function that takes a <code>finset</code> over tuples and splits it into two?</p>",
        "id": 224503359,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611940152
    },
    {
        "content": "<p>what two?</p>",
        "id": 224503664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611940282
    },
    {
        "content": "<p>you could do <code>finset.image prod.fst s</code></p>",
        "id": 224503723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611940311
    },
    {
        "content": "<p>If you want it to be an inverse to <code>finset.product</code> it's not possible though because <code>finset.product s empty = empty</code> so there is no first projection</p>",
        "id": 224503901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611940373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inverse.20.60finset.2Eproduct.60/near/224503664\">said</a>:</p>\n<blockquote>\n<p>what two?</p>\n</blockquote>\n<p>Say we have <code>{(1, A), (3, B), (3, C), (5, C)}</code> I would want the output to be <code>({1, 3, 5}, {A, B, C})</code>.</p>",
        "id": 224504148,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611940470
    },
    {
        "content": "<p>I think a better example of Mario's point is that <code>{(1, A), (2, B)} --your_fun--&gt; ({1, 2}, {A, B}) --finset.product--&gt; {(1, A), (2, A), (1, B), (2, B)}</code></p>",
        "id": 224504198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611940497
    },
    {
        "content": "<p>So the thing you're looking for cannot be a two-sided inverse</p>",
        "id": 224504225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611940508
    },
    {
        "content": "<p>I guess <code>(s.image prod.fst, s.image prod.snd)</code> would work, but it doesn't feel nice.</p>",
        "id": 224504319,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611940549
    },
    {
        "content": "<p>If <a href=\"https://github.com/leanprover-community/mathlib/issues/5829\">#5829</a> goes in and appropriate follow-up PRs made, <del>then that could be changed to  be spelt <code>finset.product.symm s</code>, since that's a left-inverse to <code>finset.product</code></del> edit: that's not true, because finset.product is a function of two arguments, and that PR is about single-argument functions</p>",
        "id": 224504550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611940634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inverse.20.60finset.2Eproduct.60/near/224504319\">said</a>:</p>\n<blockquote>\n<p>I guess <code>(s.image prod.fst, s.image prod.snd)</code> would work, but it doesn't feel nice.</p>\n</blockquote>\n<p>I don't understand what's not nice about this</p>",
        "id": 224504900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611940800
    },
    {
        "content": "<p>Actually my point is that it can't even be a one-sided inverse because <code>s * empty = empty</code>, so a function <code>f</code> satisfying <code>f (s * t) = s</code> doesn't exist</p>",
        "id": 224505424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611941029
    },
    {
        "content": "<p>The reverse inverse definitely doesn't work because not all sets are rectangles</p>",
        "id": 224505518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611941059
    }
]