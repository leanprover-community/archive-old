[
    {
        "content": "<p>I have a field of characteristic <code>p</code> where <code>p</code> is either a prime or zero. I need the fact that <code>zmod p</code> is an integral domain. Is there an easy way of doing this?</p>",
        "id": 253941657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1632054343
    },
    {
        "content": "<p>I don't know what a nice way to express prime or zero for naturals is, you could say that the ideal generated in Z is prime but thats a bit OTT.<br>\nDoes this work for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_domain</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">field.to_euclidean_domain</span> <span class=\"c1\">--not really needed tbh</span>\n<span class=\"kd\">instance</span> <span class=\"n\">zmod_zero.euclidean_domain</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_domain</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">int.euclidean_domain</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bleh</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_domain</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fact.mk</span> <span class=\"o\">(</span><span class=\"n\">h.resolve_left</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n    <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253942418,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632055095
    },
    {
        "content": "<p>The problem is <code>bleh</code> isn't an instance. I guess you need <code>h</code> to be wrapped in <code>fact</code></p>",
        "id": 253942483,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1632055199
    },
    {
        "content": "<p>Yeah exactly, seeing as the condition =0 or prime isn't as common as just prime it seems unlikely you'll ever have tc search find it automatically anyway</p>",
        "id": 253942565,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632055276
    },
    {
        "content": "<p>I also guess you will want two distinct instances anyway.</p>",
        "id": 253942577,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632055294
    },
    {
        "content": "<p>You could make <code>instance {K : Type*} [field K] {p : ℕ} [char_p K p] : integral_domain (zmod p)</code> but that seems like a dangerous instance, but maybe you can make it a local instance for your context?</p>",
        "id": 253943334,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632056069
    },
    {
        "content": "<p>This is a job for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_char\">docs#exp_char</a></p>",
        "id": 253952939,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632066052
    },
    {
        "content": "<p>I think that <code>exp_char</code> file needs more documentation. I don't really understand what it's for.</p>",
        "id": 253958068,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1632071197
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> who added it</p>",
        "id": 254029239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632134484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  what exactly do you think needs more documentation?</p>",
        "id": 254259578,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1632250746
    }
]