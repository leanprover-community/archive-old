[
    {
        "content": "<p>I have a list <code>xs</code> and an element <code>x ∈ xs</code>. What is the best way to get the first element of <code>xs</code>: create a local <code>inhabited</code> instance and use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.head\">docs#list.head</a>, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.head'\">docs#list.head'</a> and prove it returns <code>some</code>, or something else?</p>",
        "id": 241748261,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623057085
    },
    {
        "content": "<p>In other words, does the following already exist:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.head_of_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 241748476,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623057223
    },
    {
        "content": "<p>You can use <code>list.exists_cons_of_ne_nil</code> to get it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">get_head</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.exists_cons_of_ne_nil</span> <span class=\"o\">(</span><span class=\"n\">list.ne_nil_of_mem</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 241760697,
        "sender_full_name": "Pontus Sundqvist",
        "timestamp": 1623064783
    },
    {
        "content": "<p>Unfortunately, that would make the definition noncomputable. :(</p>",
        "id": 241760946,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623064920
    },
    {
        "content": "<p>Oddly, <code>list.last</code> does exist in that shape</p>",
        "id": 241762581,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1623065822
    },
    {
        "content": "<p>I use list.nth_le 0 (length_pos proof based on the fact that there is an element in it)</p>",
        "id": 241772584,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623070929
    }
]