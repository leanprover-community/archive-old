[
    {
        "content": "<p><code>zero_ne_one</code> is the correct lemma to use. Don't worry about the scaring <code>mul_zero_one_class</code>: mathlib is full of absurdly general notions, that are useful because of formalization, but are usually ridiculous in mathematics. The point is that Lean is able to realize by itself that a <code>ring</code> is also a <code>mul_zero_one_class</code>.</p>\n<p>The error comes from the fact that when you write <code>have h2 := zero_ne_one</code> Lean cannot figure out which ring (or to which <code>mul_zero_one_class</code> to be precise) you are talking about (if you only look at this line this is completely impossible). You can just write <code>exact zero_ne_one h1</code> and should work.</p>",
        "id": 310177297,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668510615
    },
    {
        "content": "<p>The difference is that now <code>h1</code> is <code>0 = 1</code> <em>in <code>R</code></em>, so Lean can guess the ring to use in <code>zero_ne_one</code>.</p>",
        "id": 310177414,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668510678
    },
    {
        "content": "<p>At yes I see the inference won't work with just <code>have h2</code>. Works now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 310177815,
        "sender_full_name": "Ben",
        "timestamp": 1668510842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 310177833,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668510846
    }
]