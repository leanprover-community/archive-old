[
    {
        "content": "<p>What's the canonical spelling of the product of a sequence of non-commutative elements?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod'</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n</code></pre></div>\n<p>Would it make sense to introduce notation for this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∏⃑`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"bp\">`</span> <span class=\"n\">l</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">list.prod</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">∏⃑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230244050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615734417
    },
    {
        "content": "<p>Do people do this?</p>",
        "id": 230246204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615736717
    },
    {
        "content": "<p>Write that notation(which I largely made up), or take the product of a sequence of non-commutative elements?</p>",
        "id": 230246227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615736744
    },
    {
        "content": "<p>It would allow stating things like <code>star (∏⃑ i in l, f i) = ∏⃑ i in l.reverse, star (f i)</code>, for instance (the n-ary <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_mul\">docs#star_mul</a>)</p>",
        "id": 230246331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615736834
    },
    {
        "content": "<p>Noncommutative finite products. You can state a lemma but does anyone want to use it? If people do then fair enough</p>",
        "id": 230246628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615737232
    },
    {
        "content": "<p>The motivation was making the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/clifford_algebra.involute_prod_map_ι\">docs#clifford_algebra.involute_prod_map_ι</a> more readable</p>",
        "id": 230246782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615737381
    },
    {
        "content": "<p>The lemma itself primarily exists as a \"look human, this definition is the one you would hand-wave\", rather than actually being useful in a proof</p>",
        "id": 230246808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615737429
    },
    {
        "content": "<p>Which makes it all the more useful to have some sort of reasonable notation for it</p>",
        "id": 230246821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615737460
    },
    {
        "content": "<p>Right. My feeling is just that <code>list.prod</code> is a CS thing, lists are everywhere in computer science, but in maths we often just use sets</p>",
        "id": 230246893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615737531
    },
    {
        "content": "<p>If you need it then you could give it one of  those fish notations that we don't use in maths :-) <code>&gt;=&gt;-&gt;</code> or whatever</p>",
        "id": 230247127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615737643
    },
    {
        "content": "<p>Yeah, I'm not tied to <code>list</code> specifically here. Just something like <code>take the product of f(i) from i = 0 to n</code> would be enough, for non-commutative <code>f(i)</code></p>",
        "id": 230247323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615737696
    },
    {
        "content": "<p>Summing over <code>finset.range</code> doesn't work for that</p>",
        "id": 230247344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615737703
    },
    {
        "content": "<p>I guess I'm saying that one has to draw a line somewhere when making an API and I usually draw the line before anything involving <code>list.prod</code>. But if you want it then all I ask is that you don't steal a notation mathematicians might want to use for something else</p>",
        "id": 230247546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615737752
    },
    {
        "content": "<p>I don't understand what Kevin is saying. Certainly we want product of lists of elements in non-commutative groups.</p>",
        "id": 230252489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615739808
    },
    {
        "content": "<p>I guess I just live in a commutative world.</p>",
        "id": 230253201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615740117
    },
    {
        "content": "<p>By the way, Bourbaki answers Eric's question on Page 3 of their chapter 1 of algebra .</p>",
        "id": 230253412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615740198
    },
    {
        "content": "<p>In that they introduce notation?</p>",
        "id": 230253516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615740270
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/7IIL1bT9VuVhSR_Dlx1WQRUK/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7IIL1bT9VuVhSR_Dlx1WQRUK/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7IIL1bT9VuVhSR_Dlx1WQRUK/image.png\"></a></div>",
        "id": 230253689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615740474
    },
    {
        "content": "<p>Note for Kevin: as you can see from the very bottom of the page, this comes before defining associativity of a composition law. The definition of commutativity comes two sections later...</p>",
        "id": 230253757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615740539
    },
    {
        "content": "<p>If I'm reading that correctly, that implies that we should probably just reuse the finset notation, perhaps via a <code>has_sum</code> class?</p>",
        "id": 230253780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615740593
    },
    {
        "content": "<p>I'm not claiming anything regarding mathlib, I try to convince Kevin this isn't computer science.</p>",
        "id": 230253830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615740622
    },
    {
        "content": "<p>well, it's possibly computer science if we use <code>list</code>s, the Bourbaki definition is closer to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod'</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">s.sort</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n</code></pre></div>",
        "id": 230254026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615740865
    },
    {
        "content": "<p>Which hides the lists under the API</p>",
        "id": 230254047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615740901
    },
    {
        "content": "<p>They assume <code>ι</code> is finite and equipped with a linear order.</p>",
        "id": 230255067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615741831
    },
    {
        "content": "<p>I have seen the description below of the fundamental group of a (connected, orientable) surface of genus <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> fairly often, so I would welcome a \"non-commutative product\"!</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>g</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi_1(S_g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> = (free group on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">2g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> generators <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>g</mi></msub><mo separator=\"true\">,</mo><msub><mi>b</mi><mi>g</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_1, b_1,\\ldots , a_g, b_g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>) / <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∏</mo><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\prod  [a_i, b_i] </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 230258448,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615745611
    },
    {
        "content": "<p>OK I'm now sold on the idea.</p>",
        "id": 230260832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615748397
    },
    {
        "content": "<p>Here's the most computer sciency way I can think of to state \"associativity\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ls.map</span> <span class=\"n\">list.prod</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mjoin</span> <span class=\"n\">ls</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 230261843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615749475
    },
    {
        "content": "<p>(It looks like this lemma is missing from mathlib BTW)</p>",
        "id": 230261893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615749497
    },
    {
        "content": "<p>This is definitely on the list of things I found a strange commutativity assumption when looking through mathlib. I would claim that if pressed most mathematicians would define a product of x1 to xn via a list and not only in the commutative setting via some counting of how many times xi appears like it is done in mathlib. There are results in mathlib which would be true for arbitrary rings if the product notation would be defined via lists instead.</p>",
        "id": 230262235,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615749874
    },
    {
        "content": "<p>Actually, forget what I said above, this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.prod_join\">docs#list.prod_join</a> (just using join as opposed to mjoin)</p>",
        "id": 230262607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615750284
    },
    {
        "content": "<p>This is a fight I lost many years ago. I never really understood why.</p>",
        "id": 230265265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615753106
    },
    {
        "content": "<p>We could definitely use more API to make working with big operators over lists more convenient. Right now everything is in terms of finsets only because no one has put in the work to duplicate the lemmas for lists and multisets.</p>",
        "id": 230270012,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615758015
    },
    {
        "content": "<p>The fight I lost a long time ago was to start with the non-commutative case and deduce the commutative case from there.</p>",
        "id": 230270275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615758350
    },
    {
        "content": "<p>We had to make some sacrifices. In analysis we did it properly. I wanted to do differentiable functions of one variable but lots of people wanted to do it properly. As a result we have a very impressive and robust theory of topological vector spaces, all manner of integrals, and we just proved FTC and can now integrate sin(x) from 0 to pi and can prove the sphere is a manifold. I am <em>only too aware of how impressive this is</em> but it does not sell our prover. In algebra we just got on with making a pile of commutative algebra and then all of a sudden we had schemes, and, a year later, perfectoid spaces. Now we need to go back and refactor stuff but it put Lean on the map. It's swings and roundabouts maybe?</p>",
        "id": 230275872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615761413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Products.20of.20non-commutative.20monoids/near/230270275\">said</a>:</p>\n<blockquote>\n<p>The fight I lost a long time ago was to start with the non-commutative case and deduce the commutative case from there.</p>\n</blockquote>\n<p>Is it really too late? I remember back then being skeptical of taking the Coq version as gospel, but obviously our current approach is terrible. :-)</p>",
        "id": 230299299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615788592
    },
    {
        "content": "<p>No surely it's not too late. I would imagine that it's just some plumbing at the bottom. I would propose <code>ideal</code> meaning \"left ideal\" in the non-commutative case.</p>",
        "id": 230300515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615789779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I think Patrick was referring to <code>big_operators</code>, not <code>ideal</code>.</p>",
        "id": 230301387,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615790637
    },
    {
        "content": "<p>But yes, I'd be happy if <code>ideal</code> meant \"left ideal\".</p>",
        "id": 230301440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615790658
    },
    {
        "content": "<p>I don't know how it is in other areas, but I feel that it is more standard to have <code>ideal</code> mean two-sided ideal.</p>",
        "id": 230301444,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615790670
    },
    {
        "content": "<p>A few days ago I made a list collecting the changes that I thought would be needed for mathlib with respect to commutativity. Feel free to comment or expand: <a href=\"https://github.com/leanprover-community/mathlib/projects/10\">https://github.com/leanprover-community/mathlib/projects/10</a></p>",
        "id": 230304341,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615793553
    },
    {
        "content": "<p>I think the first step (which probably is also helpful in the commutative setting) would be to get R-S bimodules into mathlib. Then one could use this to split the uses of left ideal and two-sided ideal in the noncommutative setting (independent of which one gets to be called ideal). Note that bi-ideal is not a term used for this structure (googling said it is used for something else). I would think that in most cases in mathlib now, the correct generalisation is to replace commutative ideal by two-sided ideal.</p>",
        "id": 230304613,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615793780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> Thanks for doing this!</p>",
        "id": 230304658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615793828
    }
]