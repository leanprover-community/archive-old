[
    {
        "content": "<p>Where does this lemma belong? Do we already have it? Or maybe it is highly generalisable in ways I'm unaware of?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">filter.complex_tendsto_iff_real_tendsto</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">‚àò</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®(</span><span class=\"n\">complex.continuous_re.tendsto</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">complex.continuous_of_real.tendsto</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 249381894,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1628872167
    },
    {
        "content": "<p>I think this should be a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inducing.tendsto_nhds_iff\">docs#inducing.tendsto_nhds_iff</a>, but I can't find the fact that <code>coe : ‚Ñù ‚Üí ‚ÑÇ</code> is an inducing (it's even an embedding actually)</p>",
        "id": 249383333,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1628873012
    },
    {
        "content": "<p>Oooh, could we cook that up then?</p>",
        "id": 249383533,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1628873112
    },
    {
        "content": "<p>You should be able to get it from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.isometry_of_real\">docs#complex.isometry_of_real</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometry.closed_embedding\">docs#isometry.closed_embedding</a> and then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closed_embedding.to_embedding\">docs#closed_embedding.to_embedding</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/embedding.to_inducing\">docs#embedding.to_inducing</a></p>",
        "id": 249384281,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1628873534
    },
    {
        "content": "<p>(Sorry I don't have access to Lean right now so I can't give you the complete proof)</p>",
        "id": 249384871,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1628873867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.complex_tendsto_iff_real_tendsto</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">‚àò</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">complex.isometry_of_real.closed_embedding.to_embedding.tendsto_nhds_iff.symm</span>\n</code></pre></div>",
        "id": 249386599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628874819
    },
    {
        "content": "<p>Just following what Anatole already said.</p>",
        "id": 249386687,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628874853
    },
    {
        "content": "<p>Perhaps we should have <code>complex.closed_embedding_of_real</code>, <code>complex.embedding_of_real</code>, <code>complex.inducing_of_real</code>, etc.</p>",
        "id": 249386976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628875029
    },
    {
        "content": "<p>Oh wow! You gotta love dot notation.</p>",
        "id": 249387134,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1628875103
    },
    {
        "content": "<p>I am not knowledgeable enough to decide, but yeah we needed <code>complex_tendsto_iff_real_tendsto</code>. What should I do then? PR that lemma?</p>",
        "id": 249387382,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1628875233
    },
    {
        "content": "<p>My inclination is to define the topological things I mentioned above, and use <code>complex.inducing_of_real.tendsto_nhds_iff</code>, but maybe another maintainer who is more involved with the analysis folder can chime in. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ?</p>",
        "id": 249387575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628875327
    },
    {
        "content": "<p>I agree with Adam, I think the best is to add the topological statements like <code>complex.inducing_of_real</code> and then you can just use <code>complex.inducing_of_real.tendsto_nhds_iff</code> directly</p>",
        "id": 249389522,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1628876321
    },
    {
        "content": "<p>I think stop at <code>embedding</code>, since we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/embedding.tendsto_nhds_iff\">docs#embedding.tendsto_nhds_iff</a>.</p>",
        "id": 249389560,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1628876349
    },
    {
        "content": "<p>We could also add <code>closed_embedding.tendsto_nhds_iff</code> and <code>isometry.tendsto_nhds_iff</code>.</p>",
        "id": 249389608,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628876384
    },
    {
        "content": "<p>I think that's cleaner and less complex-specific.</p>",
        "id": 249392097,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1628877531
    },
    {
        "content": "<p>By the way, why is <code>isometry</code> a predicate while <code>inducing</code>, <code>embedding</code>, <code>closed_embedding</code>, <code>open_embedding</code>, <code>uniform_inducing</code>, <code>uniform_embedding</code> are all structures?</p>",
        "id": 249527583,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1629056702
    },
    {
        "content": "<p>There's both, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometric\">docs#isometric</a> for the bundled version.</p>",
        "id": 249529094,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629059210
    },
    {
        "content": "<p>Ah! Okay</p>",
        "id": 249529159,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1629059300
    },
    {
        "content": "<p>Or maybe I'm misunderstanding your question?  Actually I don't understand why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inducing\">docs#inducing</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">inducing</span> <span class=\"o\">[</span><span class=\"n\">tŒ±</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tŒ≤</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"o\">:</span> <span class=\"n\">tŒ±</span> <span class=\"bp\">=</span> <span class=\"n\">tŒ≤.induced</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inducing</span> <span class=\"o\">[</span><span class=\"n\">tŒ±</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tŒ≤</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">tŒ±</span> <span class=\"bp\">=</span> <span class=\"n\">tŒ≤.induced</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 249529172,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629059347
    },
    {
        "content": "<p>I think it's so that you use dot notation</p>",
        "id": 249529181,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629059383
    },
    {
        "content": "<p>But you can use dot notation with predicates.</p>",
        "id": 249529189,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1629059403
    },
    {
        "content": "<p>Maybe it's to then extend it by <code>embedding</code>?</p>",
        "id": 249529229,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1629059415
    },
    {
        "content": "<p>Then you have several Prop fields</p>",
        "id": 249529232,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1629059430
    },
    {
        "content": "<p>Can you really use dot notation with predicates? I'm thinking e.g. of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inducing.continuous_iff\">docs#inducing.continuous_iff</a></p>",
        "id": 249529293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629059532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Eg, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometry.dist_eq\">docs#isometry.dist_eq</a></p>",
        "id": 249529297,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629059557
    },
    {
        "content": "<p>Cool! TIL</p>",
        "id": 249529308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629059585
    },
    {
        "content": "<p>There's a lot of it in topology, perhaps.  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open.inter\">docs#is_open.inter</a></p>",
        "id": 249529318,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629059617
    },
    {
        "content": "<p>Oh right. I guess I knew about the <code>is_open</code> stuff.</p>",
        "id": 249529362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629059647
    }
]