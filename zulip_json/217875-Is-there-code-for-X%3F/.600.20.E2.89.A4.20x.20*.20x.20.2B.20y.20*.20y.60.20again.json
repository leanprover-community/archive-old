[
    {
        "content": "<p>In about 80 minutes I'm going live on Twitch. Are we still not able to prove <code>0 ≤ x * x + y * y</code> with a tactic? I am going to add 0 &lt;= <code>x*x</code> and 0 &lt;= <code>y*y</code> into the local context and use linarith.</p>",
        "id": 199756976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591281826
    },
    {
        "content": "<p>The <code>nlinarith</code> PR is still waiting for some test files, I think</p>",
        "id": 199758654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591282483
    },
    {
        "content": "<p>It's not only about test files. I was realized that the Coq version is actually doing a lot more than advertised, and doing the same requires modifications to linarith. So it's not clear what will happen. What is clear is that nothing will happen during Rob's vacations.</p>",
        "id": 199758953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591282586
    },
    {
        "content": "<p>I thought I added some test suggestions to the PR</p>",
        "id": 199808942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591305100
    },
    {
        "content": "<p>Re: <a href=\"https://github.com/leanprover-community/mathlib/issues/2637\">#2637</a> and the \"needs tests\" flag -- I posted some tests in the issue, hoping that it was something to work on. I want all of these to be easier:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">norm_nonneg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_nonneg</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_self_nonneg</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">norm_eq_zero_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_eq_zero_iff&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mul_self_nonneg</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mul_self_nonneg</span><span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">norm_nonpos_right</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">norm_eq_zero_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">norm_nonpos_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">norm_nonpos_right</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>What do I do next?</p>",
        "id": 199875703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591363788
    },
    {
        "content": "<p>How do I clear this \"needs tests\" flag? I hadn't realised that this was the hold-up.</p>",
        "id": 199875790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591363809
    },
    {
        "content": "<p>As Patrick explained above, it might not be the only hold up</p>",
        "id": 199876391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591364061
    },
    {
        "content": "<p>I'm specifically asking about how to remove the flag</p>",
        "id": 199919856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591383330
    },
    {
        "content": "<p>I am not in a hurry</p>",
        "id": 199919874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591383339
    },
    {
        "content": "<p>Just click on the \"set/edit/choose label\" thing above it.</p>",
        "id": 199920052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591383426
    },
    {
        "content": "<p>I was wondering if I was expected to formalise the examples in some test directory which I knew nothing about, that's what I meant.</p>",
        "id": 199928128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591387860
    },
    {
        "content": "<p>Aah, yes, you could add some lean files in <code>test/</code> (next to <code>src/</code>)</p>",
        "id": 199928296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591387955
    },
    {
        "content": "<p>Usually it's just <code>test/[name-of-tactic].lean</code>.</p>",
        "id": 199964442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591434038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , I have two more tests for <code>nlinarith</code>, in case you end up collating them:<br>\n<a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis/near/197345103\">https://leanprover.zulipchat.com/#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis/near/197345103</a><br>\n<a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis/near/197351762\">https://leanprover.zulipchat.com/#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis/near/197351762</a></p>",
        "id": 200111497,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591629061
    }
]