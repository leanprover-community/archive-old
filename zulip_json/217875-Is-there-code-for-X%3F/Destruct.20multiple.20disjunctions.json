[
    {
        "content": "<p>Suppose I have a number of disjunctions (or some other inductive type) are hypotheses in my context. Is there a tactic that will case split on all of them and give the appropriate number of subgoals? Is there some <code>rcases</code> magic that will do this?</p>\n<p>Here is a silly example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">q1</span> <span class=\"n\">q2</span> <span class=\"n\">c11</span> <span class=\"n\">c12</span> <span class=\"n\">c21</span> <span class=\"n\">c22</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h11</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"n\">q1</span> <span class=\"bp\">→</span> <span class=\"n\">c11</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"n\">q2</span> <span class=\"bp\">→</span> <span class=\"n\">c12</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h21</span> <span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"n\">q1</span> <span class=\"bp\">→</span> <span class=\"n\">c21</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h22</span> <span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"n\">q2</span> <span class=\"bp\">→</span> <span class=\"n\">c22</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">h11</span> <span class=\"n\">h12</span> <span class=\"n\">h21</span> <span class=\"n\">h22</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">q1</span> <span class=\"bp\">∨</span> <span class=\"n\">q2</span> <span class=\"bp\">→</span> <span class=\"n\">c11</span> <span class=\"bp\">∨</span> <span class=\"n\">c12</span> <span class=\"bp\">∨</span> <span class=\"n\">c21</span> <span class=\"bp\">∨</span> <span class=\"n\">c22</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">h11</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">h12</span><span class=\"o\">]</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">h21</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">h22</span><span class=\"o\">]</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>I would be much happier if I didn't have to write <code>cases h2</code> twice.</p>",
        "id": 212710060,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602172159
    },
    {
        "content": "<p>It would be nice if, in this case, I could write something along the lines of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rcases</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"bp\">|</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"bp\">|</span><span class=\"n\">h2</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 212710576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602172344
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">q1</span> <span class=\"bp\">∨</span> <span class=\"n\">q2</span> <span class=\"bp\">→</span> <span class=\"n\">c11</span> <span class=\"bp\">∨</span> <span class=\"n\">c12</span> <span class=\"bp\">∨</span> <span class=\"n\">c21</span> <span class=\"bp\">∨</span> <span class=\"n\">c22</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"bp\">|</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- 4 goals here</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212711942,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1602172889
    },
    {
        "content": "<p>okay, sure that works for this example. But my actual assumptions are a bit more complicated than this.</p>",
        "id": 212712001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602172918
    },
    {
        "content": "<p><code>rcases h1 with h1 | h1; rcases h2 with h2 | h2,</code></p>",
        "id": 212712104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602172947
    },
    {
        "content": "<p>Yeah that's exactly what I'm looking for. Didn't think of using <code>;</code> thanks!</p>",
        "id": 212712196,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602172985
    },
    {
        "content": "<p>Another way to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hp1</span><span class=\"bp\">|</span><span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"n\">hq1</span><span class=\"bp\">|</span><span class=\"n\">hq12</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n</code></pre></div>",
        "id": 212752698,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602193235
    },
    {
        "content": "<p>That's a nice trick!</p>",
        "id": 212752940,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602193404
    },
    {
        "content": "<p>This is now supported as of <a href=\"https://github.com/leanprover-community/mathlib/issues/4569\">#4569</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">q1</span> <span class=\"bp\">∨</span> <span class=\"n\">q2</span> <span class=\"bp\">→</span> <span class=\"n\">c11</span> <span class=\"bp\">∨</span> <span class=\"n\">c12</span> <span class=\"bp\">∨</span> <span class=\"n\">c21</span> <span class=\"bp\">∨</span> <span class=\"n\">c22</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">⟨</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">⟩</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"bp\">|</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">q1</span> <span class=\"bp\">∨</span> <span class=\"n\">q2</span> <span class=\"bp\">→</span> <span class=\"n\">c11</span> <span class=\"bp\">∨</span> <span class=\"n\">c12</span> <span class=\"bp\">∨</span> <span class=\"n\">c21</span> <span class=\"bp\">∨</span> <span class=\"n\">c22</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"bp\">|</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>in addition to the already supported <code>rintros (h1 | h1) (h2 | h2),</code> form that was mentioned</p>",
        "id": 212952956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602400530
    }
]