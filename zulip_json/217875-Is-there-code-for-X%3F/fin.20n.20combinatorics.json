[
    {
        "content": "<p>I find <code>fin n</code> combinatorics much easier if I do maps from <code>fin i</code> to <code>fin j</code> assuming <code>h : j = i + 1</code> rather than going to <code>fin (i+1)</code> directly. Here is a definition and some lemmas about a function called \"delta^p\" in Riehl-Verity. I can use it to define group cohomology. Do we have it already in mathlib? If not, where does it go?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span> <span class=\"c1\">-- yes all 1800 lines of it</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">fin</span>\n\n<span class=\"sd\">/-- The function dsending enoted `δᵖ` by Riehl-Verity, sending`t` to `t` if `t&lt;p` and</span>\n<span class=\"sd\">  `t.succ` otherwise.`-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">delta</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- fin.succ_above expects p : fin i.succ for some reason</span>\n<span class=\"o\">⟨</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ht.trans</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.succ_lt_succ</span> <span class=\"n\">ht</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">delta_eval</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">delta</span> <span class=\"n\">hj</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">delta_comm_apply</span>  <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">j.succ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">delta</span> <span class=\"n\">hk</span> <span class=\"n\">q.succ</span> <span class=\"o\">(</span><span class=\"n\">delta</span> <span class=\"n\">hj</span> <span class=\"n\">p</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">delta</span> <span class=\"n\">hk</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">delta</span> <span class=\"n\">hj</span> <span class=\"n\">q</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">delta_eval</span><span class=\"o\">],</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">delta_comm_apply.symm</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">j.succ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q_succ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">q_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">delta</span> <span class=\"n\">hk</span> <span class=\"n\">p.succ</span> <span class=\"o\">(</span><span class=\"n\">delta</span> <span class=\"n\">hj</span> <span class=\"n\">q_succ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">delta</span> <span class=\"n\">hk</span> <span class=\"n\">q_succ</span> <span class=\"o\">(</span><span class=\"n\">delta</span> <span class=\"n\">hj</span> <span class=\"n\">p</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">delta_comm_apply</span> <span class=\"n\">hj</span> <span class=\"n\">hk</span> <span class=\"n\">hpq</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">fin</span>\n</code></pre></div>",
        "id": 265638194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640051180
    },
    {
        "content": "<p>We have the simplicial identities in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebraic_topology.simplex_category/src\">src#algebraic_topology.simplex_category</a></p>",
        "id": 265639135,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640052090
    },
    {
        "content": "<p>Ok I don't know how to use the file linkifier</p>",
        "id": 265639340,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640052248
    },
    {
        "content": "<p>Anyway, your first def looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ_above\">docs#fin.succ_above</a> maybe?</p>",
        "id": 265639355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640052271
    },
    {
        "content": "<p>Except that uses <code>fin (n+1)</code> which seems like you don't like.</p>",
        "id": 265639405,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640052344
    },
    {
        "content": "<p>so, it's that combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cast\">docs#fin.cast</a></p>",
        "id": 265641178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640054326
    },
    {
        "content": "<p>The simplex category work is not general enough because it ignores the case n=0!</p>",
        "id": 265663718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640078678
    },
    {
        "content": "<p>Is this evidence I'm doing something wrong? The abstract delta-ism and sigma-ism works fine for it</p>",
        "id": 265663851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640078767
    },
    {
        "content": "<p>Are you doing augmented simplicial objects?</p>",
        "id": 265664955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640079448
    },
    {
        "content": "<p>I'm just copying the definition of group cohomology from Cassels-Froehlich</p>",
        "id": 265668523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640081712
    },
    {
        "content": "<p>It's on the <code>group-cohomology</code> branch. Right now i am not at all sure if I want to use the simplex category at all -- why obfuscate?</p>",
        "id": 265668736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640081826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fin.20n.20combinatorics/near/265663851\">said</a>:</p>\n<blockquote>\n<p>Is this evidence I'm doing something wrong? The abstract delta-ism and sigma-ism works fine for it</p>\n</blockquote>\n<p>Yes I think so</p>",
        "id": 265694098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640098896
    },
    {
        "content": "<p>Well actually no because as far as I can see you don't actually use the case n=0</p>",
        "id": 265694672,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640099189
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">std_resn_complex</span> <span class=\"o\">:</span> <span class=\"n\">chain_complex</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">group_ring</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">chain_complex.of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Module.of</span> <span class=\"o\">(</span><span class=\"n\">group_ring</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">group_ring</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">G</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">d_squared</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265694758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640099246
    },
    {
        "content": "<p>Somehow I thought it would be useful. The concrete model for group cohomology H^n is cocycles over coboundaries. When n=0 you want it to be 0-cocycles over 0-coboundaries, but to have 0-coboundaries you need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>-cochains</p>",
        "id": 265697460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640100416
    },
    {
        "content": "<p>Your chain complex is indexed by <code>ℕ</code> though right? so you don't have (-1)-anything</p>",
        "id": 265698437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640100928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you can use a <code>Nat</code>-indexed complex,</p>",
        "id": 265698441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640100932
    },
    {
        "content": "<p>Besides, if you define something like this at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>, you will probably get annoyed later on if and when you go to work with Tate cohomology (which can be defined using a specific <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-indexed complex)</p>",
        "id": 265698898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640101155
    }
]