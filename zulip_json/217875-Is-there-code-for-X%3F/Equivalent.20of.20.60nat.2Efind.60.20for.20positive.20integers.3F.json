[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> that gives the smallest natural number satisfying some given satisfied predicate (and hence the smallest element of a given inhabited <code>set ℕ</code>).  Is there a corresponding thing for positive integers?  Or, if there's not something replicating that specific functionality, is there a nice way to prove that every set of positive integers has a minimal element?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 264616375,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639306214
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.conditionally_complete_linear_order\">docs#int.conditionally_complete_linear_order</a> so you can use <code>⨆</code>.</p>",
        "id": 264616397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639306303
    },
    {
        "content": "<p>I feel like I'm doing something in a laborious way that should be simple. Is there a trick I've missed here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">bdd_below_iff_subset_Ici</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">hS_pos</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">Inf</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">int.cInf_mem</span> <span class=\"n\">hS</span> <span class=\"n\">this</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">cInf_le</span> <span class=\"n\">this</span> <span class=\"n\">hx</span><span class=\"o\">)],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264617986,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639308397
    },
    {
        "content": "<p>That sounds right, though.</p>",
        "id": 264618147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639308665
    },
    {
        "content": "<p><del>Are you just trying to prove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bdd_below\">docs#bdd_below</a>  S there?</del></p>",
        "id": 264618159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639308705
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 264618310,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639308890
    },
    {
        "content": "<p>It golfs a little to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hS_pos</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Inf</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">int.cInf_mem</span> <span class=\"n\">hS</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cInf_le</span> <span class=\"n\">this</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264618405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639309049
    },
    {
        "content": "<p>Or even:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">int.exists_least_of_bdd</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hS_pos</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">⟩</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.exists_least_of_bdd\">docs#int.exists_least_of_bdd</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.least_of_bdd\">docs#int.least_of_bdd</a> seem like exactly what you want.</p>",
        "id": 264618490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639309193
    },
    {
        "content": "<p>That's great, thank you!</p>",
        "id": 264618558,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639309277
    },
    {
        "content": "<p>I found that by spotting <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.cInf_eq_least_of_bdd\">docs#int.cInf_eq_least_of_bdd</a>  which was in the same file as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.conditionally_complete_linear_order\">docs#int.conditionally_complete_linear_order</a></p>",
        "id": 264618827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639309613
    },
    {
        "content": "<p>Now, my first reaction is to want to PR (some version of) this, because the statement is a simple and obvious thing expressed in elementary language while the proof you've arrived at is rather less obvious.  But from previous experience I know that my calibration on what's worth PRing is not quite  dialled in yet <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  What do you reckon to this?</p>",
        "id": 264619124,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639310094
    },
    {
        "content": "<p>Part of my thinking on this is that a lot of newcomers to mathlib are likely to run into elementary stuff like this fairly quickly, and aren't going to find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.conditionally_complete_linear_order\">docs#int.conditionally_complete_linear_order</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.least_of_bdd\">docs#int.least_of_bdd</a> and aren't going to work out the neat concise proof that you landed on.</p>",
        "id": 264620383,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639311770
    },
    {
        "content": "<p>Well your version is just a special case of the general version with <code>0 &lt; _</code> instead of <code>x ≤ _</code>.</p>",
        "id": 264620388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639311779
    },
    {
        "content": "<p>I think if you had the general statement, you could then use library_search</p>",
        "id": 264620402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639311799
    },
    {
        "content": "<p>The other problem is the difference between <code>∃ x ∈ S, p x</code> (aka <code> ∃ x, ∃ h : x ∈ S, p x</code>) and <code>∃ x, x ∈ S ∧ p x</code>, since it would be ridiculous to state every lemma in both versions</p>",
        "id": 264620469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639311871
    },
    {
        "content": "<p>I wrote <code>hS_pos</code> in that way because when I originally tried <code>(hS_pos : ∀ x ∈ S, 0 ≤ x)</code> I got <code>failed to synthesize type class instance for</code> ... <code>has_mem ℕ (set ℤ)</code> (because <code>0</code> was interpreted as <code>0 : ℕ</code>).</p>",
        "id": 264620936,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639312471
    },
    {
        "content": "<p>I've tried generalising to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and still <code>library_search</code> can't find a solution.  Was there a different version you were thinking of?</p>",
        "id": 264620961,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639312543
    },
    {
        "content": "<p>Yes, library search should be able to find:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 264621010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639312569
    },
    {
        "content": "<p>Except it seems it can't...</p>",
        "id": 264621035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639312660
    },
    {
        "content": "<p>Ah right, it can't because it takes two steps</p>",
        "id": 264621091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639312702
    },
    {
        "content": "<p>I think ultimately the solution is to make it easier for someone who knows about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find_x\">docs#nat.find_x</a> to find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.least_of_bdd\">docs#int.least_of_bdd</a></p>",
        "id": 264621211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639312885
    },
    {
        "content": "<p>The existential you have isn't a very good way to find definitions</p>",
        "id": 264621218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639312897
    },
    {
        "content": "<p>Perhaps we should rename <code>int.least_of_bdd</code> and <code>nat.find_x</code> to be more similar; if nothing else, there's no equivalent of <code>nat.find</code> without the subtyping</p>",
        "id": 264621312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639313025
    },
    {
        "content": "<p>That would be a good solution.  If the user knows about <code>int.exists_least_of_bdd</code> then from an exploratory <code>have := int.exists_least_of_bdd _ _</code>library search can close the goal, and from there it's obvious what needs to be filled in.</p>",
        "id": 264621527,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639313335
    },
    {
        "content": "<p>This is what the <code>least_of_bdd</code> API would look like if we rewrote it in the <code>nat.find</code> style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hinh</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Analog to `nat.find` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">least_of_bdd'</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">EX</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">elt</span><span class=\"o\">,</span> <span class=\"n\">Helt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Hinh</span> <span class=\"k\">in</span>\n  <span class=\"k\">match</span> <span class=\"n\">elt</span><span class=\"o\">,</span> <span class=\"n\">le.dest</span> <span class=\"o\">(</span><span class=\"n\">Hb</span> <span class=\"n\">_</span> <span class=\"n\">Helt</span><span class=\"o\">),</span> <span class=\"n\">Helt</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">Hn</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Hn</span><span class=\"o\">⟩</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat.find</span> <span class=\"n\">EX</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Analog to `nat.find_spec` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">least_of_bdd_spec</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">least_of_bdd'</span> <span class=\"n\">b</span> <span class=\"n\">Hb</span> <span class=\"n\">Hinh</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.find_spec</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- Analog to `nat.find_min'` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">least_of_bdd_min'</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">least_of_bdd'</span> <span class=\"n\">b</span> <span class=\"n\">Hb</span> <span class=\"n\">Hinh</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">le.dest</span> <span class=\"o\">(</span><span class=\"n\">Hb</span> <span class=\"n\">_</span> <span class=\"n\">hz</span><span class=\"o\">),</span> <span class=\"n\">hz</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">add_le_add_left</span>\n  <span class=\"o\">(</span><span class=\"n\">int.coe_nat_le.2</span> <span class=\"bp\">$</span> <span class=\"n\">nat.find_min'</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Analog to `nat.find_x` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">least_of_bdd_x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">lb</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">lb</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">least_of_bdd'</span> <span class=\"n\">b</span> <span class=\"n\">Hb</span> <span class=\"n\">Hinh</span><span class=\"o\">,</span> <span class=\"n\">least_of_bdd_spec</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">least_of_bdd_min'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">int</span>\n</code></pre></div>\n<p>(all I did was break the existing definition into four pieces)</p>",
        "id": 264621543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639313389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, it looks like you were involved in the <code>least_of_bdd</code> definitions; do you think the refactor above is sensible, or would you prefer that <code>nat.find</code> be changed to align with the current <code>int.least_of_bdd</code>?</p>",
        "id": 264621694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639313530
    }
]