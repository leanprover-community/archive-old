[
    {
        "content": "<p>If I have <code>A B : intermediate_field K L</code> and <code>A â‰¤ B</code>, what's the idiomatic way to construct an algebra hom (over <code>K</code>) from <code>A</code> to <code>B</code>? I don't see an analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.inclusion\">docs#subalgebra.inclusion</a></p>",
        "id": 259249355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635345603
    },
    {
        "content": "<p>Does just using <code>subalgebra.inclusion</code> work?</p>",
        "id": 259249482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635345640
    },
    {
        "content": "<p>I think they might be defeq</p>",
        "id": 259249497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635345646
    },
    {
        "content": "<p>Oh maybe</p>",
        "id": 259249532,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635345660
    },
    {
        "content": "<p>Which isn't to say it's not worth adding the def you describe</p>",
        "id": 259249632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635345696
    },
    {
        "content": "<p>Maybe after adding <code>to_subalgebra</code>s</p>",
        "id": 259249692,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635345719
    },
    {
        "content": "<p>As types <code>coe_sort A.to_subalgebra</code> and <code>coe_sort A</code> are defeq</p>",
        "id": 259252216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635346646
    },
    {
        "content": "<p>But you're right, the elaborator may need help</p>",
        "id": 259252243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635346656
    }
]