[
    {
        "content": "<p>I'm having problems finding a good proof of the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I somehow can't find a statement of the form <code>example  {n : ℕ} {a : fin n.succ} : a ≤ n</code>.<br>\nThere is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.is_le\">docs#fin.is_le</a>, but this coerces <code>a</code> to a natural number.<br>\nThere is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.le_last\">docs#fin.le_last</a>, but then I need to convert between <code>n : fin n.succ</code> and <code>fin.last n</code>, which are apparently not defeq.</p>",
        "id": 298652820,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663097216
    },
    {
        "content": "<p>Hm, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.coe_nat_eq_last\">docs#fin.coe_nat_eq_last</a>, which would deal with this latter issue.</p>",
        "id": 298652862,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663097233
    },
    {
        "content": "<p>So my proof is now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">ha</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_of_le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">fin.le_last</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.coe_nat_eq_last</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">),}</span>\n</code></pre></div>\n<p>but I have the feeling that there should be a simpler one.</p>",
        "id": 298653563,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663097473
    },
    {
        "content": "<p>Next question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span>  <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.pred</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.pred_lt\">docs#order.pred_lt</a>, but this requires a <code>[no_min_order α]</code> instance. (For natural numbers, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pred_lt\">docs#nat.pred_lt</a>, but this is not directly applicable either.)</p>",
        "id": 298657058,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663098758
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.pred_lt_of_not_is_min\">docs#order.pred_lt_of_not_is_min</a> for the statement about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.pred\">docs#order.pred</a>. There should be some lemma relating it to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.pred\">docs#fin.pred</a>.</p>",
        "id": 298657297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663098845
    },
    {
        "content": "<p>I just noticed that <code>a.pred h</code> is a of type <code>fin n</code> and not <code>fin n.succ</code>, so there is an additional coercion involved, which makes applying <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.pred_lt_of_not_is_min\">docs#order.pred_lt_of_not_is_min</a> not completely straightforward...</p>",
        "id": 298657769,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663099032
    },
    {
        "content": "<p>Is there a \"better\" <code>pred</code> here that takes values in the <em>same</em> <code>fin _</code>?</p>",
        "id": 298657867,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663099072
    },
    {
        "content": "<p><del>file#order/succ_pred/fin</del> <a href=\"https://tqft.net/mathlib/data/fin/succ_pred\">file#data/fin/succ_pred</a></p>",
        "id": 298657974,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663099097
    },
    {
        "content": "<p>so in some ways it's <code>order.pred</code></p>",
        "id": 298658091,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663099140
    },
    {
        "content": "<p>we don't seem to have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_min_iff_eq_zero\">docs#is_min_iff_eq_zero</a> for canonically ordered blah blahs though</p>",
        "id": 298658249,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663099195
    },
    {
        "content": "<p>oh we do but it overuses defeq, yuck</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.succ_pred</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">order.pred</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">order.pred_lt_of_not_is_min</span> <span class=\"bp\">$</span> <span class=\"n\">not_is_min_iff_ne_bot.mpr</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 298658601,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663099322
    },
    {
        "content": "<p>[Yes, this is where I'm stuck now.] No longer, thanks.</p>",
        "id": 298658645,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663099325
    },
    {
        "content": "<p>Another question: Is there a version of <code>fin.find</code> that looks for the <em>largest</em> index of an entry satisfying a property?</p>",
        "id": 298659441,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663099570
    },
    {
        "content": "<p>Related: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find_greatest\">docs#nat.find_greatest</a></p>",
        "id": 298661104,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663100323
    },
    {
        "content": "<p>OK, perhaps I can use that. But it is getting late...</p>",
        "id": 298661778,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663100609
    },
    {
        "content": "<p>It seems what you want is <a href=\"https://github.com/leanprover-community/mathlib/pull/15916/files#diff-05cc1779d317dc6fb520b3d425eef32f509ae0d074654cca957610cd168616f1R572-R574\">in an open PR</a>: you may use <code>top_le_iff</code> if you have <code>last n.succ</code> instead of <code>n</code>.<br>\nBy the way, you shouldn't usually leave a substitutable equality like <code>ha : a = n</code> among the hypotheses.</p>",
        "id": 298673580,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663106052
    },
    {
        "content": "<p>There's <code>zify</code> to change slightly annoying questions about naturals to less annoying questions about integers which are &gt;= 0. Maybe we need an <code>nify</code> tactic to change annoying questions about <code>fin n</code> to less annoying questions about <code>nat</code>? I feel like the answer to the first question in this thread should be <code>nify, linarith</code></p>",
        "id": 298714164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663139170
    },
    {
        "content": "<p>The idea is that <code>nify</code> changes the local context to <code>a b : nat, a &lt; n.succ, b &lt; n.succ, a &lt;= b, ...</code></p>",
        "id": 298714355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663139284
    },
    {
        "content": "<p>Oh, maybe this is problematic because the tactic doesn't know that the coercion from nat to fin n.succ and back sends n to n</p>",
        "id": 298714559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663139392
    },
    {
        "content": "<p>But that's also linarith</p>",
        "id": 298714617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663139410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Order.20on.20.60fin.20n.2Esucc.60/near/298673580\">said</a>:</p>\n<blockquote>\n<p>By the way, you shouldn't usually leave a substitutable equality like <code>ha : a = n</code> among the hypotheses.</p>\n</blockquote>\n<p>The example was extracted from the middle of a proof, I guess just before doing <code>rw ha</code>...</p>",
        "id": 298745441,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663152705
    }
]