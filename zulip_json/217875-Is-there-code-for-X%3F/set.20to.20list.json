[
    {
        "content": "<p>Is there a function in mathlib to take a <code>set</code> to a <code>list</code>?</p>",
        "id": 272555391,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645319633
    },
    {
        "content": "<p>How would it do that? What if the set is infinite?</p>",
        "id": 272555443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645319663
    },
    {
        "content": "<p>an infinite list?</p>",
        "id": 272555466,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645319710
    },
    {
        "content": "<p>Patrick, what do you want to do with the list you get?</p>",
        "id": 272555483,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645319744
    },
    {
        "content": "<p>So not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list\">docs#list</a> but rather a function <code>ℕ → α</code>?</p>",
        "id": 272555494,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645319758
    },
    {
        "content": "<p>I have a function to extract the set of atoms from a prop formula, now I want to write one that determines if the formula is a tautology by iterating over its atoms.</p>",
        "id": 272555577,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645319870
    },
    {
        "content": "<p>I'm not sure if this is enough context, I can add the other definitions if it helps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">all_val</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">formula</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">fm</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">fm</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"n\">fm</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">all_val</span> <span class=\"n\">as</span> <span class=\"n\">fm</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">tt</span><span class=\"o\">))</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">all_val</span> <span class=\"n\">as</span> <span class=\"n\">fm</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">ff</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">is_tauto</span> <span class=\"o\">(</span><span class=\"n\">fm</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">all_val</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">fm</span><span class=\"o\">)</span> <span class=\"n\">fm</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272555665,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645319988
    },
    {
        "content": "<p>If you have a proof that your set is finite, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.induction_on\">docs#set.finite.induction_on</a></p>",
        "id": 272555669,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645319999
    },
    {
        "content": "<p>Oh. Ok. That might work.</p>",
        "id": 272555729,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645320032
    },
    {
        "content": "<p>Your update is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.update\">docs#function.update</a></p>",
        "id": 272555736,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645320043
    },
    {
        "content": "<p>Oh. Cool.</p>",
        "id": 272555757,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645320081
    },
    {
        "content": "<p>Can I inductively prove the set is finite by saying that the empty list and singleton is finite, and if two sets are finite then their union is finite?</p>",
        "id": 272555958,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645320344
    },
    {
        "content": "<p>I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">iff</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">atoms</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">atoms</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">imp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">iff</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">atoms</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272556053,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645320427
    },
    {
        "content": "<p>You can. You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset\">docs#finset</a> too, you'll just need to add <code>@[derive decidable_eq]</code> above <code>inductive formula : Type</code></p>",
        "id": 272556184,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645320593
    },
    {
        "content": "<p>For your specific question, check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.union\">docs#set.finite.union</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite_empty\">docs#set.finite_empty</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite_singleton\">docs#set.finite_singleton</a></p>",
        "id": 272556248,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645320632
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 272556374,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645320767
    }
]