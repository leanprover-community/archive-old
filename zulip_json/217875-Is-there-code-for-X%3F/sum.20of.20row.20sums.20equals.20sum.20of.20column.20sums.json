[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n\n<span class=\"sd\">/-- sum of row sums equals sum of column sums -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">summable_snd_of_summable_fst</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_rows</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_cols</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_col_row</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is I hope true; furthermore it should be an iff, and should also be equivalent to <code>summable (λ ab : α × β, F ab.1 ab.2)</code>. Do we have this? Note that some kind of nonnegativity is needed; the grid</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">...</span>\n<span class=\"mi\">0</span>   <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">...</span>\n<span class=\"mi\">0</span>   <span class=\"mi\">0</span>   <span class=\"mi\">3</span>  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>has all row sums and column sums finite therefore convergent, and sum of row sums is 0 but sum of column sums diverges.</p>",
        "id": 280032084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650871824
    },
    {
        "content": "<p>I would imagine a proof goes via a <code>has_sum</code> version of that statement, assuming one can exist</p>",
        "id": 280033900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650873024
    },
    {
        "content": "<p>Can you map it to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integral_integral_swap\">docs#measure_theory.integral_integral_swap</a> ? This sounds essentially like Fubini for the counting measure.</p>",
        "id": 280034707,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1650873494
    },
    {
        "content": "<p>You have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tsum_comm\">docs#ennreal.tsum_comm</a> and all the lemmas that are used in its proof.</p>",
        "id": 280045015,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1650879575
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_comm'\">docs#tsum_comm'</a>  is fairly close</p>",
        "id": 280045294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650879747
    },
    {
        "content": "<p>(The advantage of working with <code>ennreal</code> is that all sums are well defined there).</p>",
        "id": 280045308,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1650879756
    },
    {
        "content": "<p>Working in ennreal is half of the story. Then for the glue to nnreal I think you need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">summable_iff_coe_sum_lt_infty</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and then I think I can simplify some arguments in LTE. Do we have this?</p>",
        "id": 280315418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651046227
    },
    {
        "content": "<p>I am have learnt how to dance between <code>nnreal</code> and <code>real</code> because of LTE but now I need to learn a new dance and this is one of the steps.</p>",
        "id": 280315628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651046383
    },
    {
        "content": "<p>is this some sort of theorem about <code>with_top</code> of something? For nnreal (but maybe not for real?), <code>summable</code> is registering where some failure occurs in the <code>with_top</code> monad or some such nonsense.</p>",
        "id": 280316083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651046593
    },
    {
        "content": "<p>If all this turns out to be nonsense then this isn't an issue for me -- we have sorry-free code in LTE which at some point involves quite a brute force proof that a series converges (as part of a definition of an inverse function), and I'm trying to figure out if there's some conceptual thing behind it.</p>",
        "id": 280316226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651046698
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_sum_coe</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>seems to help</p>",
        "id": 280317597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651047617
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tsum_coe_ne_top_iff_summable\">docs#ennreal.tsum_coe_ne_top_iff_summable</a>  and all the lemmas around for the glue you're looking for.</p>",
        "id": 280317853,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1651047807
    },
    {
        "content": "<p>For instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tsum_coe_eq\">docs#ennreal.tsum_coe_eq</a></p>",
        "id": 280317878,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1651047835
    },
    {
        "content": "<p>or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.has_sum_coe\">docs#ennreal.has_sum_coe</a></p>",
        "id": 280317931,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1651047861
    },
    {
        "content": "<p>yeah, I can now move from ennreal to nnreal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"c1\">-- don't need it but maybe useful?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.summable_of_coe_sum_eq</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">summable</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ennreal.tsum_coe_ne_top_iff_summable</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ennreal.tsum_coe_ne_top_iff_summable</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.has_sum_snd_of_has_sum_fst</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">summable.has_sum_iff</span> <span class=\"n\">ennreal.summable</span><span class=\"o\">,</span> <span class=\"n\">summable.has_sum_iff</span> <span class=\"n\">ennreal.summable</span><span class=\"o\">,</span>\n    <span class=\"n\">ennreal.tsum_comm</span> <span class=\"o\">]</span>\n\n<span class=\"sd\">/-- sum of row sums equals sum of column sums -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal.summable_snd_of_summable_fst</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_rows</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_cols</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_col_row</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h_col_row</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ennreal.has_sum_coe</span><span class=\"o\">,</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext1</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ennreal.coe_tsum</span> <span class=\"o\">(</span><span class=\"n\">h_rows</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">ennreal.has_sum_snd_of_has_sum_fst</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ennreal.has_sum_coe</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">ext1</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ennreal.coe_tsum</span> <span class=\"o\">(</span><span class=\"n\">h_cols</span> <span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280337720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651059950
    },
    {
        "content": "<p>I've still got to get to <code>real</code> though!</p>",
        "id": 280337812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651060000
    },
    {
        "content": "<p>You also have glue between <code>nnreal</code> and <code>real</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal.summable_coe_of_nonneg\">docs#nnreal.summable_coe_of_nonneg</a> and neighbors.</p>",
        "id": 280338896,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1651060632
    }
]