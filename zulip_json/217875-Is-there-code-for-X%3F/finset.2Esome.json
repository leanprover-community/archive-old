[
    {
        "content": "<p>I'm trying to show that the type of atoms of <code>finset α</code> is equivalent to <code>α</code>. This is true because the atoms are precisely the singletons. To make this work, I need to extract an element out of a nonempty <code>finset</code>. Can this be made computable? Do we have it? <code>finset.some</code> doesn't exist.</p>",
        "id": 272241442,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645094522
    },
    {
        "content": "<p>I expect we cannot make this computable as long as <code>finset.nonempty</code> is a <code>Prop</code>.</p>",
        "id": 272241662,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645094659
    },
    {
        "content": "<p>Why not? It should just be a <code>quotient.lift</code> out of <code>subtype.val</code> right?</p>",
        "id": 272241696,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645094697
    },
    {
        "content": "<p>That's what I think too. You can do induction on the finset, which is the difference with <code>set</code>.</p>",
        "id": 272241762,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645094751
    },
    {
        "content": "<p>Wait no, I thought you wanted to extract an element from the atoms. Yeah, this is going to be noncomputable.</p>",
        "id": 272241884,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645094821
    },
    {
        "content": "<p>I do,  but I thought this could be computable more generally.</p>",
        "id": 272241931,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645094865
    },
    {
        "content": "<p><code>(finset.univ : finset (fin 2)).filter (λ i, (i = 0 ∧ ¬ riemann_hypothesis) ∨ (i = 1 ∧ riemann_hypothesis))</code>.</p>",
        "id": 272241947,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645094875
    },
    {
        "content": "<p>Eheh, I had in mind finsets that were themselves made computably.</p>",
        "id": 272242078,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645094943
    },
    {
        "content": "<p>(Depending on the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nonempty\">docs#finset.nonempty</a> this is a full Brouwer-style counterexample showing it is indeed noncomputable for finsets with &gt; 1 elements.)</p>",
        "id": 272242090,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645094949
    },
    {
        "content": "<p>So how do I get the element out of an atom, precisely? Will that also work for <code>set</code>?</p>",
        "id": 272242242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645095055
    },
    {
        "content": "<p>You can do it if you make \"<code>s</code> is an atom\" contain data (like <code>{ x // x ∈ s}</code>). <br>\nIf it is a proposition, we can get a similar counterexample to Anne's, by taking the set of minimal elements of Anne's set (which will always be a singleton) (EDIT: oh wait, Anne's set is already a singleton)</p>",
        "id": 272242420,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645095155
    },
    {
        "content": "<p>With <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.lift_on\">docs#quot.lift_on</a> it should be possible right? Since taking the head of an list of elements of the underlying multiset will always return the same element.</p>",
        "id": 272242488,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645095215
    },
    {
        "content": "<p>I expect you will need the decidability of <code>(∈ s)</code> at some point...</p>",
        "id": 272242609,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645095311
    },
    {
        "content": "<p>Showing there exists a finset containing all elements of <code>{ x | (x = 0 ∧ ¬ RH) ∨ (x = 1 ∧ RH) }</code> is noncomputable. But given such a finset you can extract an element without problems.</p>",
        "id": 272242643,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645095346
    },
    {
        "content": "<p>ah, I see what you mean... Yeah, I think you're right.</p>",
        "id": 272242711,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645095377
    },
    {
        "content": "<p>In other words, the decidability lives in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a>.</p>",
        "id": 272242720,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645095382
    },
    {
        "content": "<p>Unfortunately I don't have the luxury of changing the meaning of an atom. I have to work with <code>{a // is_atom a}</code> because I'm proving <a href=\"https://en.wikipedia.org/wiki/Birkhoff's_representation_theorem\">Birkhoff's representation theorem</a> in the form of <code>FinBoolAlgᵒᵖ ≌ Fintype</code> and <code>atoms</code> is one of the functors. <code>atoms (finset α) ≃ α</code> is the unit (or counit? I never know).</p>",
        "id": 272242792,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645095431
    },
    {
        "content": "<p>Basically to do this computably you have to show <code>∀ (xs ys : list α), is_atom (xs : finset α) → is_atom (ys : finset α) → head xs = head ys → xs = ys</code>, then you should be able to define <code>head</code> on multisets that are atoms via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.lift\">docs#quot.lift</a>, then you restrict this to finsets (which are defined as a subtype of multisets).</p>",
        "id": 272242992,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645095535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Do you have a proof that atoms have cardinality 1? If so, here's a sloppily-proved definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">multiset.from_atom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">multiset.card</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.nil_perm.mp</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">injection</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.perm_nil.mp</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">injection</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a_hd</span> <span class=\"o\">::</span> <span class=\"n\">a_tl</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b_hd</span> <span class=\"o\">::</span> <span class=\"n\">b_tl</span> <span class=\"o\">:=</span> <span class=\"n\">multiset.coe_eq_coe.mpr</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">ext</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">multiset.card</span> <span class=\"o\">(</span><span class=\"n\">b_hd</span> <span class=\"o\">::</span> <span class=\"n\">b_tl</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.length_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n  <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span> <span class=\"n\">m</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset.from_atom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.val.from_atom</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 272288420,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645116957
    },
    {
        "content": "<p>As far as I know, there's no way to generically extract an element from an arbitrary nonempty finset: if there is more than one element, which one do you choose?</p>\n<p>But if there's precisely one element, then you can dig into the underlying list and extract it computably.</p>",
        "id": 272288589,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645117027
    },
    {
        "content": "<p>I have a draft at <a href=\"https://github.com/leanprover-community/mathlib/pull/10865\">#10865</a></p>",
        "id": 272288659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645117058
    },
    {
        "content": "<p>I see you have <code>is_atom_iff</code>, so that plugs into <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_eq_one\">docs#finset.card_eq_one</a></p>",
        "id": 272288994,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645117193
    },
    {
        "content": "<p>You can also do <code>finset.from_atom</code> more directly by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.choose\">docs#finset.choose</a></p>",
        "id": 272291422,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1645118116
    },
    {
        "content": "<p>Or you define an arbitrary linear order on the underlying type because it's finite (as seen as the subtype of things in the finset), and sort on those and pick the first one</p>",
        "id": 272309558,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645125653
    }
]