[
    {
        "content": "<p>Hi! I'm looking for a way to give proof of a similar statement here <a href=\"#narrow/stream/113488-general/topic/Easiest.20way.20to.20do.20casework.20on.20factors.20of.20.20nat/near/303342058\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Easiest.20way.20to.20do.20casework.20on.20factors.20of.20.20nat/near/303342058</a></p>\n<p>But my case is for <code>int</code>. Is there any lemma that deals with symmetry here? And do we have something like <code>int.divisors</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">10</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>  <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any hint welcome! Thank you in advance!</p>",
        "id": 304211334,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1665845787
    },
    {
        "content": "<p>You may use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.coe_nat_dvd_right\">docs#int.coe_nat_dvd_right</a> applied to n=10, apply the method in the other thread to get <code>n.nat_abs = 1,2,5,10</code>, then rewrite by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.nat_abs_eq_iff\">docs#int.nat_abs_eq_iff</a>, then I imagine <code>simp</code> will get you there.</p>",
        "id": 304222083,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665851558
    },
    {
        "content": "<p>And if simp doesn't do it, maybe tauto will</p>",
        "id": 304223202,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665852331
    },
    {
        "content": "<p>Thank you guys <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>! My simp or tauto cannot close that final goal, probably because my mathlib is a little bit old.</p>\n<p>The last step just needs a bunch of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/declarations-about-codeorcode\">docs#declarations-about-codeorcode</a>.</p>\n<p>But I found that finish can do the job! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">10</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>  <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">int.coe_nat_dvd_right</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_div</span> <span class=\"o\">:</span> <span class=\"n\">nat.divisors</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">quot.mk</span> <span class=\"n\">_</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">],</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.mem_divisors.trans</span> <span class=\"o\">(</span><span class=\"n\">and_iff_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)),</span> <span class=\"n\">h_div</span><span class=\"o\">],</span>\n    <span class=\"n\">change</span> <span class=\"n\">n.nat_abs</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.mem_cons_iff</span><span class=\"o\">,</span> <span class=\"n\">list.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">int.nat_abs_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_succ</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">int.coe_nat_bit0</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_bit1</span><span class=\"o\">],</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 304225394,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1665853720
    }
]