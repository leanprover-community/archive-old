[
    {
        "content": "<p>I need to use an \"ascending chain condition\".  Poking around, I see we have a large body of excellent stuff on orders so I'm a bit surprised that we seem to have everything except how I usually think about this. Do we have anything like <code>wf_iff_satisfies_acc</code> somewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.well_founded</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.preorder_hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.order_iso_nat</span>\n\n<span class=\"sd\">/-- I see we have `rel_embedding.well_founded_iff_no_descending_seq` but can we have this too?</span>\n<span class=\"sd\">Can we at least have a comment including the phrase \"ascending chain\" somewhere? -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">satisfies_acc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→ₘ</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">m</span>\n\n<span class=\"sd\">/-- So that we could then add this. Or does this already exists and I can't find it? -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wf_iff_satisfies_acc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">satisfies_acc</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 220437104,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608331535
    },
    {
        "content": "<p>In addition, do we have anything along the lines of these (which I need):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Do we already have this? Is it sufficiently more useful than `inv_image.wf` to introduce? -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">well_founded_of_embedding</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₘ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"sd\">/-- Surely this property has an \"official\" name; what is it? -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_sup_compact</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"sd\">/-- Do we already have this? -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sup_compact_of_wf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_sup_compact</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 220437236,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608331623
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> did some things in this direction a while ago</p>",
        "id": 220456193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608357964
    },
    {
        "content": "<p>Thanks, maybe I'll see if I can turn some of this into a PR and ping him on that.</p>",
        "id": 220466225,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608377872
    },
    {
        "content": "<p>PR 1 of 2 <a href=\"https://github.com/leanprover-community/mathlib/pull/5434\">https://github.com/leanprover-community/mathlib/pull/5434</a></p>",
        "id": 220470864,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608386265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you mind taking a look at <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> ?</p>",
        "id": 220471839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608387821
    },
    {
        "content": "<p>I now have (disgusting) proofs of the above modulo the following two results:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sup_sup_Sup_eq_Sup_union</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">⊔</span> <span class=\"n\">Sup</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_Sup_mem</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>I don't suppose we have these somewhere?</p>",
        "id": 220479638,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608399487
    },
    {
        "content": "<p>What are the assumptions on the order?</p>",
        "id": 220479763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608399727
    },
    {
        "content": "<p>In this case, <code>complete_lattice</code>.</p>",
        "id": 220479764,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608399740
    },
    {
        "content": "<p>Isn't subsets of a set a complete lattice?</p>",
        "id": 220479772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608399757
    },
    {
        "content": "<p>My code snippets are supposed to flow into each other but it's possible I've screwed up.</p>",
        "id": 220479773,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608399760
    },
    {
        "content": "<p>Hmm, am I being dense?</p>",
        "id": 220479789,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608399786
    },
    {
        "content": "<p>I think finite_Sup_mem is false for subsets of a set</p>",
        "id": 220479795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608399796
    },
    {
        "content": "<p>Union of two sets might not be either one</p>",
        "id": 220479799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608399823
    },
    {
        "content": "<p>Oh sorry, I am being dense.</p>",
        "id": 220479844,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608399862
    },
    {
        "content": "<p>Thanks, no wonder this was such a useful lemma!</p>",
        "id": 220479845,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608399870
    },
    {
        "content": "<p>Right, I'm done for the day but I'll pick this up tomorrow. Apologies for the nonsense.</p>",
        "id": 220479848,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608399882
    },
    {
        "content": "<p>True for total orders</p>",
        "id": 220479851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608399897
    },
    {
        "content": "<p>I think <code>is_sup_compact</code> needs some additional assumptions too, e.g. it's false for the set of finite subsets of a type. Edit: ignore this --- just saw it was a <code>def</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 220480106,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608400425
    },
    {
        "content": "<p>Looking at the PR, it looks like there is quite a bit of work to do in uniting <code>preorder_hom</code> and <code>rel_hom</code>.</p>",
        "id": 220480149,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608400471
    },
    {
        "content": "<p>I'm confident the only outright error is the one Kevin identified since I have sorry-free proofs of everything except <code>is_sup_compact_iff</code> (which I actually don't even need).</p>",
        "id": 220480229,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608400662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ascending.20chain.20conditions/near/220480149\">said</a>:</p>\n<blockquote>\n<p>Looking at the PR, it looks like there is quite a bit of work to do in uniting <code>preorder_hom</code> and <code>rel_hom</code>.</p>\n</blockquote>\n<p>Yes, there seem to be basically no bridges between these two except the tiny scraps I have introduced.</p>",
        "id": 220480282,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608400714
    },
    {
        "content": "<p>There's also work that you should look at in <code>order_iso_nat</code></p>",
        "id": 220480300,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608400797
    },
    {
        "content": "<p>You mean the file <code>order_iso_nat.lean</code>?</p>",
        "id": 220480360,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608400828
    },
    {
        "content": "<p>Yes</p>",
        "id": 220480361,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608400833
    },
    {
        "content": "<p>which proves well-founded iff no strictly-ascending-chains</p>",
        "id": 220480364,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608400840
    },
    {
        "content": "<p>Yes, I actually used that.</p>",
        "id": 220480370,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608400864
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/5434/files#diff-99300ada126e52bba4dacab69467bb0ec9c644b4334bd73fcb07d32e5d8d9535R66\">https://github.com/leanprover-community/mathlib/pull/5434/files#diff-99300ada126e52bba4dacab69467bb0ec9c644b4334bd73fcb07d32e5d8d9535R66</a></p>",
        "id": 220480381,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608400888
    },
    {
        "content": "<p>I see</p>",
        "id": 220480383,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608400894
    },
    {
        "content": "<p>Darn, gotta run. Visitors arrived. Apologies.</p>",
        "id": 220480431,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608400956
    },
    {
        "content": "<p>We should fill out the connections between <code>preorder_hom</code> and <code>rel_hom</code>, or else refactor <code>preorder_hom</code> to use <code>rel_hom</code> and porting the <code>preorder_hom</code> API to that new definition, but I'm ok with getting a PR or two on ACC and DCC first.</p>",
        "id": 220480504,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608401088
    },
    {
        "content": "<p>I would probably guess that ACC and DCC should be instances you can place on a <code>partial_order</code> rather than just props</p>",
        "id": 220480644,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608401394
    },
    {
        "content": "<p>and you can define DCC either through using a different kind of <code>rel_hom</code>in the definition, or just ACC of the order dual.</p>",
        "id": 220480693,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608401436
    },
    {
        "content": "<p>I now have a second PR here with some of the other results I'd like to use: <a href=\"https://github.com/leanprover-community/mathlib/pull/5446\">https://github.com/leanprover-community/mathlib/pull/5446</a></p>\n<p>The proofs are a total mess and so should be ignored (though this time they have the advantage of not requiring any <code>false</code> lemmas). However I would be grateful for feedback on whether it looks like I'm taking things in a useful direction in terms of what I'm defining and proving.</p>\n<p>Unfortunately as usual I'm in a hurry and must now run off but I will have some time tomorrow and will pay careful attention to any remarks others may have to offer.</p>",
        "id": 220528133,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1608484305
    },
    {
        "content": "<p>Since I now want to use the result, I've decided to revive this previously-abandoned PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/5434\">https://github.com/leanprover-community/mathlib/pull/5434</a></p>",
        "id": 233380412,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617739613
    },
    {
        "content": "<p>Good luck! <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 233380468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739643
    },
    {
        "content": "<p>Thanks :D</p>",
        "id": 233380478,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617739648
    },
    {
        "content": "<p>I'm afraid I rebased rather than merged master to resolve a merge conflict so I've blown away the branch history but what I understood to be the most contentious issue was the new typeclass which I have removed.</p>",
        "id": 233380520,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617739677
    }
]