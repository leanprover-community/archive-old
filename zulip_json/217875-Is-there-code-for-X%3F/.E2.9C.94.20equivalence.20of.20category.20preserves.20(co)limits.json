[
    {
        "content": "<p>Do we have \"equivalence of category preserves (co)limits\" somewhere? In particular do we have <code>preserves_limit (parallel_pair f 0) F </code>?</p>\n<p>I attempt the following, but stucked at proving uniqueness.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.preserves.shapes.kernels</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">is_equivalence</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">i</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">preserves_limit</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">preserves</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">functor.map_cone_map_cone_inv</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv.hom</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">hc.lift</span> <span class=\"o\">(</span><span class=\"n\">functor.map_cone_inv</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n    <span class=\"n\">fac'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">functor.map_cone_π_app</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">functor.map_comp</span><span class=\"o\">,</span> <span class=\"n\">hc.fac'</span><span class=\"o\">,</span>\n        <span class=\"bp\">←</span> <span class=\"n\">functor.map_cone_π_app</span><span class=\"o\">,</span> <span class=\"n\">cone_morphism.w</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">uniq'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"n\">eq1</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274680461,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1646829254
    },
    {
        "content": "<p><code>infer_instance</code> works with the import <code>import category_theory.adjunction.limits</code>.</p>",
        "id": 274680889,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646829525
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 274682168,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1646830221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span> has marked this topic as resolved.</p>",
        "id": 274682170,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646830224
    }
]