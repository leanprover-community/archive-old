[
    {
        "content": "<p>Is there a tactic or arguments to combine the functionality of <code>cases ... with ...</code> with the functionality of <code>cases_matching</code>? I'd like to be able to reference by name the constructors I get from <code>cases_matching</code>. <code>cases_matching ... with ...</code> doesn't seem to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- cases h1 with h_left h_right, -- what I want to do without referencing h1</span>\n  <span class=\"n\">cases_matching</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span><span class=\"o\">,</span> <span class=\"c1\">-- invalid</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253156265,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631565414
    },
    {
        "content": "<p>maybe you want the <code>‹...›</code> syntax?</p>\n<p><code>cases ‹_ ∨ _› with h_left h_right, -- valid</code></p>",
        "id": 253156852,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631565686
    },
    {
        "content": "<p>Sweet, that works, thank you. Is there someplace I can learn more about this  ‹...› syntax?</p>",
        "id": 253157323,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631565884
    },
    {
        "content": "<p>Is it the same as the one you use to implicitly call <code>assumption</code>?</p>",
        "id": 253157540,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631565967
    },
    {
        "content": "<p>think of <code>‹...›</code> as <code>show ... by assumption</code></p>",
        "id": 253157541,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631565967
    },
    {
        "content": "<p>yes Yaël</p>",
        "id": 253157558,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631565974
    },
    {
        "content": "<p>Ahah! Yes <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 253157565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631565978
    },
    {
        "content": "<p>Cool, thanks</p>",
        "id": 253157695,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631566041
    },
    {
        "content": "<p>The most useful place to use it is after a <code>;</code>, because you might have want to call the exact same lemma in all of the cases but the hypotheses have to be shuffled around.</p>",
        "id": 253157869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631566124
    },
    {
        "content": "<p>I currently want to do something like the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">cases_success</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">try_core</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">cases</span> <span class=\"o\">‹</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"n\">nm</span> <span class=\"n\">nm</span><span class=\"o\">],</span>\n  <span class=\"k\">match</span> <span class=\"n\">cases_success</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">all_goals'</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"n\">nm</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">done</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">id</span> <span class=\"o\">{</span> <span class=\"n\">integral_domain_tactic</span> <span class=\"o\">}]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n</code></pre></div>\n<p>But I would rather <code>nm</code> not just be nm every time so it doesn't overwrite itself when I call this recursively. Is there some way to get <code>cases ‹_ ∨ _› </code> to output the name of the value it destructs? Or to call <code>nm &lt;- get_unused_name</code> and have that be inserted after <code>with</code>?</p>",
        "id": 254180134,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632217530
    }
]