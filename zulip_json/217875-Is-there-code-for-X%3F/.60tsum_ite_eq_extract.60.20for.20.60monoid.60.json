[
    {
        "content": "<p>I'd like to be able to use <code>tsum_ite_eq_extract</code> with <code>nnreal</code>/<code>ennreal</code>, but the existing version only applies to a group and not a monoid. I have a proof for the monoid case but it requires a strange summable hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tsum_ite_eq_extract'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_continuous_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"n\">f.update</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f.update</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">tsum_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">function.update_apply</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f.update</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n    <span class=\"n\">tsum_add</span> <span class=\"o\">⟨</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">has_sum_single</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hb</span><span class=\"o\">)⟩</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f.update</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">tsum_eq_single</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hb'</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.update</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">,</span> <span class=\"n\">eq_rec_constant</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The summability hypothesis is fairly easy to use for the <code>nnreal</code>/<code>ennreal</code>, but it seems like there is probably some assumption I can make about the type classes that would be more natural than using this?</p>",
        "id": 303471923,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1665504823
    },
    {
        "content": "<p>Ha, a few of us were wondering something very similar yesterday - without the <code>summable</code> hypothesis this turns out to be false unfortunately. An alternative option is to assume completeness, then for monotone functions you can get a useful version as well</p>",
        "id": 303475529,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665505965
    },
    {
        "content": "<p>Would this be useful to open a PR for in its current state then? I'd like to use it for a few lemmas involving <code>option</code> <code>vector</code> and <code>list</code></p>",
        "id": 303500809,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1665514785
    },
    {
        "content": "<p>I think so yeah - if you have the time it might be nice to also generalise some of the other lemmas like this which currently only work for groups</p>",
        "id": 303501367,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665514969
    },
    {
        "content": "<p>Yeah I will have some time at the end of the week , I'll write that up and make a PR then</p>",
        "id": 303503027,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1665515581
    }
]