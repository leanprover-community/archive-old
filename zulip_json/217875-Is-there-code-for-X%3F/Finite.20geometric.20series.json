[
    {
        "content": "<p>I would like to use the lemma </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">geom_sum_mul_neg</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">geom_series</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>from <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/geom_sum.html#top\">algebra.geom_sum</a>, but in the \"reflected\" form</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">geom_series</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>Is there a slick way to get this, maybe using that <code>1</code> and <code>x</code> commute?  Or do I truly need to re-prove this lemma and all the lemmas it depends on (<code>geom_sum_mul</code>, <code>geom_sum₂_mul_comm</code>, <code>geom_sum₂_mul_add</code>, ...) in reflected form?</p>",
        "id": 202191581,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593271835
    },
    {
        "content": "<p>if you're writing a tactic mode proof, you can <code>have</code> it and then <code>rw mul_comm at</code> it</p>",
        "id": 202191733,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593272087
    },
    {
        "content": "<p>This is a possibly non-commutative ring</p>",
        "id": 202191746,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593272116
    },
    {
        "content": "<p>thanks, maybe I forgot which stream I was in :)</p>",
        "id": 202191753,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593272145
    },
    {
        "content": "<p>hmm you could have this as a theorem about the polynomial ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> \\Z[x] </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 202191825,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593272237
    },
    {
        "content": "<p>Could you show <code>x * geom_series x n = geom_series x n * x</code> (using <code>x^n * x = x * x^n</code>) and then use distributivity perhaps?</p>",
        "id": 202191832,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593272262
    },
    {
        "content": "<p>Maybe we need some <code>big_operators</code> lemmas about <code>commute</code></p>",
        "id": 202191839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593272275
    },
    {
        "content": "<p>OK, for now I will just add reflected versions of a bunch of lemmas to <code>algebra.geom_sum</code>; hopefully Bhavik's idea will reduce my pain.</p>",
        "id": 202192039,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593272546
    },
    {
        "content": "<p>Looks like the elegant ways also require a lot of work .. so someone else can do it later.</p>",
        "id": 202192045,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593272567
    },
    {
        "content": "<p>This depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/3197\">#3197</a>, which should be merged soon. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_sum_comm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum_induction</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 202192337,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593273076
    },
    {
        "content": "<p>There is already <code>commute</code> which handles the parts of this other than the induction on the sum</p>",
        "id": 202192384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593273136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Finite.20geometric.20series/near/202192045\">said</a>:</p>\n<blockquote>\n<p>Looks like the elegant ways also require a lot of work .. so someone else can do it later.</p>\n</blockquote>\n<p>Wait, is this becoming \"someone else can do it right now\"? :)</p>",
        "id": 202192403,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593273182
    },
    {
        "content": "<p>mm how much more are you asking to be done? this was just meant to help prove that <code>x</code> commutes with <code>geom_series x n</code></p>",
        "id": 202192481,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593273313
    },
    {
        "content": "<p>This counts as an elegant way, as far as I am concerned.</p>",
        "id": 202192574,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593273476
    },
    {
        "content": "<p>By the way, is it too late to add that lemma to <a href=\"https://github.com/leanprover-community/mathlib/issues/3197\">#3197</a>?</p>",
        "id": 202192632,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593273520
    },
    {
        "content": "<p>I guess not, I'm working to make it depend on <code>commute</code> as Reid suggested</p>",
        "id": 202192639,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593273543
    },
    {
        "content": "<p>(I think <a href=\"https://github.com/leanprover-community/mathlib/issues/3197\">#3197</a> is in a state where it will be accepted next time a reviewer notices that it has passed the linter)</p>",
        "id": 202192670,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593273597
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">commute_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">commute</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">semiconj_by</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">commute_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">commute_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum_induction</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">commute_add</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">commute_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 202193372,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593274450
    },
    {
        "content": "<p>do you have any need for </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">commutator</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 202193497,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593274639
    },
    {
        "content": "<p>First two are <code>commute.add_right</code> and <code>commute.zero_right</code>.</p>",
        "id": 202193498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593274641
    },
    {
        "content": "<p>mm maybe I should have tried <code>library_search</code> after my eyeball-search failed</p>",
        "id": 202193509,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593274668
    },
    {
        "content": "<p>should commute_sum go in <code>algebra.big_operators</code>? <code>commute</code>? somewhere else?</p>",
        "id": 202193561,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593274696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> ?</p>",
        "id": 202193574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593274720
    },
    {
        "content": "<p>I would put it in <code>commute</code>. Probably worth proving that the set of elements that commute with <code>a</code> form a subring, and perhaps that the ring generated by a set of elements that commute is commutative.</p>",
        "id": 202194842,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593276527
    },
    {
        "content": "<p><code>commute</code> does not depend on <code>finset</code> anymore.</p>",
        "id": 202197812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593281042
    },
    {
        "content": "<p>We can define <code>subsemiring.centralizer</code>, then say something about <code>sum_mem</code>.</p>",
        "id": 202197875,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593281104
    },
    {
        "content": "<p>Or just put <code>commute.sum_right</code>, <code>commute.sum_left</code>, and <code>commute.sum_sum</code> into <code>algebra.big_operators</code>.</p>",
        "id": 202197899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593281143
    },
    {
        "content": "<p>Another way of thinking about this: the desired result is <code>algebra.geom_sum</code> in the opposite ring <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite.ring\">docs#opposite.ring</a></p>",
        "id": 202199573,
        "sender_full_name": "David Wärn",
        "timestamp": 1593283610
    },
    {
        "content": "<p>Nice! (-;</p>",
        "id": 202199849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593284010
    },
    {
        "content": "<p>Do we have a lemma that says that powers in the opposite ring are the same as powers in the original ring though?</p>",
        "id": 202202130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593287242
    },
    {
        "content": "<p>I don't think so. Should we? Note that this is really a result about powers in the opposite monoid</p>",
        "id": 202205163,
        "sender_full_name": "David Wärn",
        "timestamp": 1593292231
    },
    {
        "content": "<p>I think that lemma should exist, since there's lemmas for <code>mul</code> and <code>add</code> so it seems odd to make users of the API implement the <code>pow</code> version themselves</p>",
        "id": 202207191,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593295702
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3211\">#3211</a></p>",
        "id": 202227402,
        "sender_full_name": "David Wärn",
        "timestamp": 1593334727
    },
    {
        "content": "<p>Oh, sorry, it's also in <a href=\"https://github.com/leanprover-community/mathlib/issues/3210\">#3210</a> !</p>",
        "id": 202234275,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593346575
    },
    {
        "content": "<p>By the way, here is my proof (from <a href=\"https://github.com/leanprover-community/mathlib/issues/3210\">#3210</a>) of the <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Finite.20geometric.20series/near/202191581\">original fact</a>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mul_geom_sum</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">geom_series</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">op_inj_iff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">op_mul</span><span class=\"o\">,</span> <span class=\"n\">op_geom_series</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">op_one</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">op_neg</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">op_add</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">op</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">op_neg</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">op_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">op_add</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">geom_sum_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Could this be automated?  I request a tactic <code>oppify</code>!</p>",
        "id": 202253554,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593376181
    },
    {
        "content": "<p>Is this a job for <code>norm_cast</code>?</p>",
        "id": 202254527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593377427
    },
    {
        "content": "<p>I have not used <code>norm_cast</code>, but the principle looks very similar.  Would it work right now, or does someone need to rewrite the <code>norm_cast</code> tactic to include this as a suitable cast?</p>",
        "id": 202254616,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593377543
    },
    {
        "content": "<p>You have to tag all the lemmas like <code>op_add</code> and <code>op_one</code> with @[norm_cast] and then you apply it and hope.</p>",
        "id": 202254744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593377729
    },
    {
        "content": "<p>I don't know what <code>op</code> is so I'm not 100% sure what I'm talking about, but here's an example of it all working with the coercion from the reals to the complexes. I tag a bunch of things <code>norm_cast</code> and then the tactic can prove \"obvious\" stuff. <a href=\"https://github.com/ImperialCollegeLondon/complex-number-game/blob/master/src/complex/Level_01_of_real.lean#L161\">https://github.com/ImperialCollegeLondon/complex-number-game/blob/master/src/complex/Level_01_of_real.lean#L161</a></p>",
        "id": 202254842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593377846
    },
    {
        "content": "<p>I think this is a job for <code>simp</code>. There's a missing lemma for subtraction </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">op_sub</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_geom_sum</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">geom_series</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">op_inj_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">op_geom_series</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">geom_sum_mul</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202254847,
        "sender_full_name": "David Wärn",
        "timestamp": 1593377848
    },
    {
        "content": "<p>If <code>simp</code> can manage it, then great! <code>norm_cast</code> was developed because of Mario's insistence that <code>simp</code> was not a great tool for this kind of problem in general.</p>",
        "id": 202254947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593377977
    },
    {
        "content": "<p>Works beautifully, thank you <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> !</p>",
        "id": 202259607,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593385410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Finite.20geometric.20series/near/202254947\">said</a>:</p>\n<blockquote>\n<p>If <code>simp</code> can manage it, then great! <code>norm_cast</code> was developed because of Mario's insistence that <code>simp</code> was not a great tool for this kind of problem in general.</p>\n</blockquote>\n<p>To clarify, <code>simp</code>is good if what you want to do is push all the coercions to the leaves, for example if you want to prove a theorem about <code>nat</code> by applying <code>int.coe_nat_inj</code> and then use <code>simp</code> to put an up arrow on every variable. If you want to do the opposite, pulling all the up arrows to the top level so they can be eliminated (like if we wanted to do the reverse of the nat -&gt; int process just described), then <code>simp</code> will fight you because you are going uphill relative to simp normal form</p>",
        "id": 202267890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593399661
    }
]