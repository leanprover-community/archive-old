[
    {
        "content": "<p>Is there a bilinear version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map\">docs#continuous_linear_map</a> or a bundled version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_bounded_bilinear_map\">docs#is_bounded_bilinear_map</a>? Or is someone working on this? <br>\nI'm realizing I need to generalize <code>convolution</code> to take a bilinear map as extra argument.</p>",
        "id": 272246705,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645097857
    },
    {
        "content": "<p>I am semi-working on this with <a href=\"https://github.com/leanprover-community/mathlib/pull/11909\">#11909</a> in the sense that we'll need this to do it the proper way.</p>",
        "id": 272246821,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1645097917
    },
    {
        "content": "<p>And, indeed, <code>is_bounded_bilinear_map</code> is the only thing that we have.</p>",
        "id": 272246920,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1645097999
    },
    {
        "content": "<p>However, it's still unclear to me whether currying works already.</p>",
        "id": 272247049,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1645098072
    },
    {
        "content": "<p>I think using the curried version doesn't buy you much, since I still want to use all the lemmas that you'd prove for a <code>continuous_bilinear_map</code>, (e.g. <code>add_right</code>, <code>smul_right</code>, \"if <code>f</code> and <code>g</code> are continuous, then <code>x ‚Ü¶ L (f x) (g x)</code> is continuous\", ...)</p>",
        "id": 272247368,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645098300
    },
    {
        "content": "<p>The curried version is the right object, but most of the relevant API might indeed be missing. One can at least convert using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.is_bounded_bilinear_map\">docs#continuous_linear_map.is_bounded_bilinear_map</a> though.</p>",
        "id": 272269367,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1645109216
    },
    {
        "content": "<p>Good. I have indeed now written a little bit of API for the curried version, along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">continuous_linear_map</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_add_left</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">L</span> <span class=\"n\">x'</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">L.map_add</span><span class=\"o\">,</span> <span class=\"n\">add_apply</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_add_right</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">E'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">y'</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">y</span> <span class=\"n\">y'</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_smul_left</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">L.map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_smul_right</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span> <span class=\"n\">c</span> <span class=\"n\">y</span>\n\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 272280547,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645113563
    },
    {
        "content": "<p>(of course, I will generalize <code>‚Ñù</code> to <code>ùïú</code> and maybe <code>‚ÜíL</code> to <code>‚ÜíSL</code> in the version I PR)</p>",
        "id": 272280877,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645113667
    },
    {
        "content": "<p><code>map_add‚ÇÇ</code> might be a better name to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map\">docs#linear_map.map</a>_add‚ÇÇ</p>",
        "id": 272299996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645121348
    },
    {
        "content": "<p>.. which obviously the linkifier doesn't link correctly... <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_add%E2%82%82\">https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_add%E2%82%82</a></p>",
        "id": 272300029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645121371
    },
    {
        "content": "<p>This should be easy from things in the library, but I cannot find a reasonably close result.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.operator_norm</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"n\">E‚ÇÇ</span> <span class=\"n\">E‚ÇÉ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E‚ÇÅ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E‚ÇÅ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E‚ÇÉ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E‚ÇÉ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E‚ÇÇ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E‚ÇÉ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 272794117,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645531964
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.operator_norm</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.bounded_linear_maps</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"n\">E‚ÇÇ</span> <span class=\"n\">E‚ÇÉ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E‚ÇÅ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E‚ÇÅ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E‚ÇÉ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E‚ÇÉ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E‚ÇÇ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E‚ÇÉ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">L.is_bounded_bilinear_map.continuous</span>\n</code></pre></div>",
        "id": 272799523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645535280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span></p>",
        "id": 272799584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645535291
    },
    {
        "content": "<p>Oh yes, of course. Thanks!</p>",
        "id": 272801052,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645536091
    }
]