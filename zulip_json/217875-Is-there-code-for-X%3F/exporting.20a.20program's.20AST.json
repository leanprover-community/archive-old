[
    {
        "content": "<p>I am investigating using Lean to specify and verify protocols, and then code-generate the protocols in another language (say Go).<br>\nIn that regard, I am wondering if there is a way to export a complete Lean program's AST in some common format (like JSON/ProtoBuf/etc.)?</p>\n<p>Thank you!</p>",
        "id": 195227505,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1587753129
    },
    {
        "content": "<p>That is not currently supported. How would you use that information?</p>",
        "id": 195230396,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587754644
    },
    {
        "content": "<p>What is supported however is parsing <code>olean</code> files (object files) and extracting the definitions from there. A prototype exists in Rust and it's called <code>rs-olean</code></p>",
        "id": 195230534,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587754710
    },
    {
        "content": "<p>For a Lean function to be convertible to a static-typed target language, it must have no dependent types.<br>\nSo, my reasoning is:</p>\n<ol>\n<li>Use Lean to define a function F with no dependent types in its own signature. (Inside, the definition of F may invoke dependent-type sub-functions.)</li>\n<li>Traverse the definition of F recursively, expanding dependent Lean types (to non-dependent Lean types) as you go.</li>\n<li>Map non-dependent Lean types to static types in the target language using a simple translation rule.</li>\n</ol>",
        "id": 195232635,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1587755808
    },
    {
        "content": "<p>I recognize that evaluating the types of function calls may be hard to do from just the AST. An alternative strategy for code-generation would be to implement the generation in Lean itself, using Lean reflection to construct the target language AST and then dump it into an object file. I wonder if Lean supports enough reflection to accomplish this; and also can it write data structures to a file.</p>",
        "id": 195234816,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1587756855
    },
    {
        "content": "<p>There are several approaches that should be viable.</p>\n<ul>\n<li>Lean has a low-level export format (produced by <code>lean --export</code>) as described <a href=\"https://github.com/leanprover/lean/blob/master/doc/export_format.md\" title=\"https://github.com/leanprover/lean/blob/master/doc/export_format.md\">here</a>. There are various existing external tools which can read and type check these files. In principle, I think these files contain all the information you need, although you may have to reconstruct typing information yourself (by implementing a type checker).</li>\n<li>A Lean tactic/\"user command\" has full access to the environment, including definitions; see <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/environment.lean#L32\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/environment.lean#L32\">here</a>. (I am not sure whether it has access to proofs of lemmas, but I assume you don't need to translate these anyways.) It can also ask the kernel/elaborator for the type of terms, which you might find useful. I think there is a library that can produce JSON somewhere; that's simple enough anyways (I wrote one once, but I don't know where it went). Lean also has file IO, see <a href=\"https://github.com/leanprover-community/lean/blob/master/leanpkg/leanpkg/main.lean#L10\" title=\"https://github.com/leanprover-community/lean/blob/master/leanpkg/leanpkg/main.lean#L10\">leanpkg</a> for example.</li>\n<li>Of course you can also do some of the translation in Lean, if you want to program in Lean.</li>\n</ul>",
        "id": 195243169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587761623
    },
    {
        "content": "<p>You can fairly easily write a function in lean that takes an <code>expr</code> as input and outputs a <code>string</code> containing the syntax of the target language. Especially if you are okay with generating ugly looking code, this is probably the simplest option</p>",
        "id": 195259999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587775855
    },
    {
        "content": "<p>lean has basically all the reflection capabilities you could hope for</p>",
        "id": 195260022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587775915
    },
    {
        "content": "<blockquote>\n<p>I am not sure whether it has access to proofs of lemmas, but I assume you don't need to translate these anyways.</p>\n</blockquote>\n<p>Yes, you can inspect the proofs of theorems. They are provided as a <code>task expr</code>, meaning that you have to join on the (asynchronous) computation of the expression, but otherwise the theorem's proof is available.</p>",
        "id": 195260084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587776004
    },
    {
        "content": "<p>Thank you! This is very helpful.</p>",
        "id": 195263382,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1587781534
    }
]