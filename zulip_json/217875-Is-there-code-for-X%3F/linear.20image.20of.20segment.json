[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">linear_map</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">segment_image</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">segment</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">segment</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is something like this in mathlib somewhere?</p>",
        "id": 228301087,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614630760
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mem_segment_translate\">docs#mem_segment_translate</a> was the closest I could find</p>",
        "id": 228307611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614633434
    },
    {
        "content": "<p>Which I guess you want to generalize from <code>(+ a)</code> to any affine map?</p>",
        "id": 228307855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614633536
    },
    {
        "content": "<p>Shouldn't there be a lemma saying that an affine map sends segments to segments, and something which constructs an affine map out of a linear map?</p>",
        "id": 228308155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614633629
    },
    {
        "content": "<p>Turned out it just has a one line proof - perhaps it should be there for affine maps though</p>",
        "id": 228323219,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614640198
    }
]