[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ordered</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">p.fst</span> <span class=\"bp\">⊔</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(This is actually true, right? :-)</p>",
        "id": 230482955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615887256
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_max\">docs#continuous_max</a> . Is that enough for what you want to do?</p>",
        "id": 230484279,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615887967
    },
    {
        "content": "<p>Yep! Thanks.</p>",
        "id": 230484689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615888194
    },
    {
        "content": "<p>Let <code>β = ([0,1] x {0,1})/{(0,0)=(0,1) and (1,0)=(1,1)}</code> so it looks like a <code>&lt;&gt;</code> shape</p>",
        "id": 230488134,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615889848
    },
    {
        "content": "<p>let <code>x</code> be the point (0.5, 0)</p>",
        "id": 230488154,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615889863
    },
    {
        "content": "<p>and let <code>y</code> range through (t, 1), t -&gt; 0</p>",
        "id": 230488169,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615889879
    },
    {
        "content": "<p>then x sup y goes from (1,1) suddenly to x</p>",
        "id": 230488217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615889896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> maybe this is a counter-example?</p>",
        "id": 230488239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615889906
    },
    {
        "content": "<p>In other words, if you look at the four-element lattice {0, 1} x {0, 1}, it has two elements that are indistinguishable in the order topology. But sup distinguishes them, so can't be continuous</p>",
        "id": 230491137,
        "sender_full_name": "David Wärn",
        "timestamp": 1615891498
    },
    {
        "content": "<p>oh I didn't think I could discretize my situation, idk why</p>",
        "id": 230491826,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615891886
    },
    {
        "content": "<p>Thanks all. I guess I should have asked \"what are the hypotheses I need to make <code>sup</code> continuous, and where's the theorem\". Happily Sebastien worked this out. :-)</p>",
        "id": 230492430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615892240
    },
    {
        "content": "<p>I'm actually working in <code>\\bbR</code>, so don't really care about the exact hypotheses for now. :-)</p>",
        "id": 230492473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615892268
    }
]