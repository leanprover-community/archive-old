[
    {
        "content": "<p>I am working on it because I was unable to find it. What I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">normed_space</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span> <span class=\"n\">is_absolute_value</span> <span class=\"n\">finset</span> <span class=\"n\">cau_seq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finiteGeometricSum</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">z</span><span class=\"bp\">≠</span><span class=\"mi\">1</span><span class=\"o\">):((</span><span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n_n</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"n\">n_ih</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n_n</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n_n.succ</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">sum_range_succ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n_n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- have h3 : (z ^ n_n * (z - 1) = z ^ n_n * (z - 1)),</span>\n  <span class=\"c1\">-- exact rfl,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_sub</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"c1\">--substitute h5 in h4</span>\n\n  <span class=\"c1\">--have h : (z ^ n_n * (z - 1) / (z - 1) = z ^ n_n),</span>\n  <span class=\"c1\">--have h : ((z ^ n_n.succ - 1) / (z - 1) = (z ^ n_n - 1) / (z - 1) + z ^ n_n),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">complex</span>\n</code></pre></div>\n<p>Context: I need it to show that any [[size n geometric sum] of [an nth root of unity other than 1]] equals 0. This can be generalized to roots of unity outside the complex numbers.</p>",
        "id": 263142375,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1638278420
    },
    {
        "content": "<p>Have you seen lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/geom_sum_mul\">docs#geom_sum_mul</a> ?</p>",
        "id": 263142567,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638278521
    },
    {
        "content": "<p>No. I will look now.</p>",
        "id": 263142719,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1638278566
    },
    {
        "content": "<p>It looks almost like what I want. Thanks.</p>",
        "id": 263143456,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1638278849
    },
    {
        "content": "<p>With the right import, this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finiteGeometricSum</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">z</span><span class=\"bp\">≠</span><span class=\"mi\">1</span><span class=\"o\">):((</span><span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">geom_sum_eq</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263144557,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1638279359
    },
    {
        "content": "<p>Yay, <code>library_search!,</code>.</p>",
        "id": 263144755,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1638279447
    },
    {
        "content": "<p>The trouble with library_search is that it only searches the imports rather than all of mathlib.</p>",
        "id": 263145054,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1638279585
    },
    {
        "content": "<p><code>ring_theory.roots_of_unity</code> may be a nice file to check out, btw</p>",
        "id": 263146042,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638280019
    },
    {
        "content": "<p>I'll take a look then. :)</p>",
        "id": 263146121,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1638280063
    },
    {
        "content": "<p>You can always run <code>./scripts/mk_all.sh</code> on the command line and then <code>import all</code> if you want to search all of mathlib.</p>",
        "id": 263182406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638294692
    }
]