[
    {
        "content": "<p>What norm structures do we have on quotients? Specifically, I am interested in <code>A ⧸ I</code> where <code>A</code> is a <code>normed_algebra</code> over <code>R</code> and <code>I</code> is an ideal of <code>A</code>. For the moment, I am only interested in commutative <code>A</code>.</p>",
        "id": 295968827,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661796797
    },
    {
        "content": "<p>Do you know <code>I</code> is closed?</p>",
        "id": 295979459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661800430
    },
    {
        "content": "<p>There should at least be a <code>semi_normed_add_group</code> on such a quotient.</p>",
        "id": 295979885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661800590
    },
    {
        "content": "<p>(Slightly related: I have a not PR-ed proof that maximal ideals are closed, so tell me if you need it quickly)</p>",
        "id": 295981876,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1661801382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/normed.20structures.20on.20quotients/near/295968827\">said</a>:</p>\n<blockquote>\n<p>What norm structures do we have on quotients? Specifically, I am interested in <code>A ⧸ I</code> where <code>A</code> is a <code>normed_algebra</code> over <code>R</code> and <code>I</code> is an ideal of <code>A</code>. For the moment, I am only interested in commutative <code>A</code>.</p>\n</blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_subgroup.seminormed_add_comm_group_quotient\">docs#add_subgroup.seminormed_add_comm_group_quotient</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_subgroup.normed_add_comm_group_quotient\">docs#add_subgroup.normed_add_comm_group_quotient</a> but that's all I see</p>",
        "id": 295985875,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1661802258
    },
    {
        "content": "<p>Thanks all. Anatole, I also have a proof that maximal ideals are closed that I am planning to put in <code>analysis/normed_space/units</code>. Patrick, <code>I</code> will often be closed so that we actually get a norm, but we will want the seminormed version too when <code>I</code> is not closed.</p>",
        "id": 296001575,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661807546
    },
    {
        "content": "<p>I will start PRing the relevant structures soon.</p>",
        "id": 296001626,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661807575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>  <a href=\"https://github.com/leanprover-community/mathlib/pull/16303\">#16303</a> for the fact the maximal ideals are closed, in case you want to review and/or add anything.</p>",
        "id": 296013277,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661814352
    },
    {
        "content": "<p>I had a think about putting these norm structures on the quotient, and I have had several thoughts:</p>\n<ol>\n<li>Given an ideal <code>I</code> (or more generally a submodule) of <code>R</code>, one cannot just pull back the norm structure of <code>R / I.to_add_subgroup</code> along <code>add_monoid_hom.id _</code> to <code>R / I</code>. Or rather, you <em>can</em> do it, but you lose the definitional equality for the topological structure with the quotient topology.</li>\n<li>I could just duplicate the approach in <code>analysis.normed.group.quotient</code> to get the right definitional equality, but the code would be nearly identical (we are still talking about additive cosets after all), so this seems unsatisfactory, but completely doable.</li>\n<li>I had the idea that it would be nice if the quotient were defined for members of <code>add_subgroup_class</code> instead of <code>subgroup</code>. In this way it would unify the quotients and there would be no need to duplicate API. I glanced briefly over the quotient constructions, and it seems like it might be doable, although for technical reasons it might be easier if we switched to right cosets instead of left cosets (because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.left_rel\">docs#quotient_group.left_rel</a> uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.opposite\">docs#subgroup.opposite</a>, for which I don't think there will be any nice <code>subgroup_class</code> version).</li>\n</ol>\n<p>Has anyone else thought about this at all? <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 296174753,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661880014
    },
    {
        "content": "<p>Is the underlying question here \"can we unify ring and (additive) subgroup quotients\"? Because as types, I think they're now defeq</p>",
        "id": 296175240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661880159
    },
    {
        "content": "<p>They are defeq, which is why that <code>add_monoid_hom.id</code> trick above semi-works. But since it's not a reducible defeq we don't get to share instances; in particular, I can't get the norm structure on <code>R ⧸ I</code> <em>for free</em>.</p>",
        "id": 296175767,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661880317
    },
    {
        "content": "<p>What makes it not reducible?</p>",
        "id": 296176261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661880457
    },
    {
        "content": "<p>I'm surprised you even need to pull it back, can't you just copy over the existing instance?</p>",
        "id": 296176464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661880506
    },
    {
        "content": "<p>Hmmm... let me try again. I thought I started with that and it didn't work.</p>",
        "id": 296176777,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661880593
    },
    {
        "content": "<p>aha, no that seems to work</p>",
        "id": 296177349,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661880742
    },
    {
        "content": "<p>The suggestion of generalizing to add_group_class is still reasonable, but it should be a low amount of effort to do it manually first</p>",
        "id": 296178206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661881005
    },
    {
        "content": "<p>I didn't see a nice way around the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.opposite\">docs#subgroup.opposite</a> issue though, do you?</p>",
        "id": 296179320,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661881354
    },
    {
        "content": "<p>I will just do this manually for now, as I really need it for some other work.</p>",
        "id": 296179383,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661881374
    },
    {
        "content": "<p>I would guess <code>s.opposite</code> could be replaced with <code>sᵐᵒᵖ</code>, after adding some instances</p>",
        "id": 296193886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661885882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/normed.20structures.20on.20quotients/near/296174753\">said</a>:</p>\n<blockquote>\n<ol start=\"3\">\n<li>I had the idea that it would be nice if the quotient were defined for members of <code>add_subgroup_class</code> instead of <code>subgroup</code>. <br>\n[...]<br>\nHas anyone else thought about this at all? <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span></li>\n</ol>\n</blockquote>\n<p>Definitely! In fact, my idea behind making <code>R</code> explicit in <code>R / I</code> was to allow better inference of the <code>add_subgroup_class</code> instance. Making the various quotient definitions equal was a slow process but I think there should be no technical obstacle anymore beyond the typical amount of fixes.</p>",
        "id": 296325440,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1661952755
    }
]