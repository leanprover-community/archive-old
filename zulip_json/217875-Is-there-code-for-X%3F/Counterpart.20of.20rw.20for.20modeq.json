[
    {
        "content": "<p>If I have a <code>modeq</code> like <code>hcd : c ≡ d [MOD m]</code> and an expression like <code>h : c * a ≡ d * b [MOD m]</code> with the same modulus, is there a tactic like <code>rw</code> that will let me replace <code>c</code> with <code>d</code> (or vice versa) in <code>h</code>?</p>",
        "id": 270569384,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643903125
    },
    {
        "content": "<p>Not really, its often better to use <code>zmod</code> rather than modeq for this reason, as then its an actual type where rw works. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cc\">tactic#cc</a> can also be useful though when you have some equivalence relation like this and complicated chains of equivalences</p>",
        "id": 270571808,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643903971
    },
    {
        "content": "<p>When I was plugging my students' number theory homework into Lean, unfortunately it was a lot of manual <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.modeq.mul\">docs#int.modeq.mul</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.modeq.add\">docs#int.modeq.add</a></p>\n<p>(In principle, it seems like it should be possible to have a tactic that <code>zmod</code>ifies everything, does the rewrite, then un<code>zmod</code>ifies everything again.)</p>",
        "id": 270595252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643912856
    },
    {
        "content": "<p>I have a WIP tactic for modular arithmetic problems, which is basically <code>apply_rules</code> for a curated set of modular arithmetic facts.</p>",
        "id": 270597739,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643913888
    }
]