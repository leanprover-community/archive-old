[
    {
        "content": "<p>Do we have the following in mathlib? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_ite_eq_extract</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>We have a <code>tsum_ite_eq_extract</code>, but I can't seem to find a sum version.</p>",
        "id": 279516361,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650445547
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_boole\">docs#finset.sum_boole</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_ite\">docs#finset.sum_ite</a>, which are pretty close.</p>",
        "id": 279517128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650445995
    },
    {
        "content": "<p>hmm yeah I saw those, but I can't seem to get this easily from them.</p>",
        "id": 279524144,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650450292
    },
    {
        "content": "<p>You can rewrite the LHS using <code>finset.sum_ite</code>, <code>finset.sum_ite_eq'</code>, <code>add_comm</code>.</p>",
        "id": 279524434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650450521
    },
    {
        "content": "<p>And of course you should turn <code>(b : s)</code> into <code>{b : α} (hb : b ∈ s)</code>.</p>",
        "id": 279524481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650450578
    },
    {
        "content": "<p>hmm I don't see how to rewrite the LHS using <code>finset.sum_ite</code>.</p>",
        "id": 279525080,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650451039
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter_ne'\">docs#finset.filter_ne'</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_ite_eq_extract</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_ne'</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">finset.sum_erase_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279525118,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650451058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/sum_ite_eq_extract/near/279525118\">said</a>:</p>\n<blockquote>\n<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter_ne'\">docs#finset.filter_ne'</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_ite_eq_extract</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_ne'</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">finset.sum_erase_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>ah ok I hadn't seen <code>filter_ne'</code>. Thats nice.</p>",
        "id": 279525257,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650451175
    },
    {
        "content": "<p>it might be nice to have the <code>function.update</code> version too, which is how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_ite_eq_extract\">docs#tsum_ite_eq_extract</a> is proved</p>",
        "id": 279526271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650451881
    },
    {
        "content": "<p>You mean something like: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_update_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_sub</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>?</p>",
        "id": 279527704,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650452816
    },
    {
        "content": "<p>You'll need <code>add_comm_group</code></p>",
        "id": 279528104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650453102
    },
    {
        "content": "<p>Or the variant<code>∑ n in s, update f a b n + f a = ∑ n in s, f n + b</code></p>",
        "id": 279528192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650453156
    },
    {
        "content": "<p>Ok I made <a href=\"https://github.com/leanprover-community/mathlib/pull/13545\">#13545</a> with these two things</p>",
        "id": 279543784,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650461699
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_update_of_mem\">docs#finset.sum_update_of_mem</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_update_of_not_mem\">docs#finset.sum_update_of_not_mem</a></p>",
        "id": 279543852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650461741
    },
    {
        "content": "<p>oh damn I didnt see them. Well that cuts things in half :P</p>",
        "id": 279544026,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650461825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span>, is the lemma you actually want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.add_sum_erase\">docs#finset.add_sum_erase</a>?</p>",
        "id": 279544767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650462201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/sum_ite_eq_extract/near/279544767\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span>, is the lemma you actually want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.add_sum_erase\">docs#finset.add_sum_erase</a>?</p>\n</blockquote>\n<p>Oh! that does actually work for what I want. Ok so I now don't have a use for this <code>sum_ite_extract</code>, but maybe its still worth having?</p>",
        "id": 279546585,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650463068
    },
    {
        "content": "<p>Personally I dislike <code>tsum_ite_eq_extract</code>, the name doesn't follow our naming conventions at all</p>",
        "id": 279546753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650463140
    },
    {
        "content": "<p>My hunch is that <code>finset.add_sum_erase</code> is more practical to use, in most situations.</p>",
        "id": 279684332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650549789
    },
    {
        "content": "<p>Maybe we should just add a comment to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_ite_eq_extract\">docs#tsum_ite_eq_extract</a> indicating why the API is different to the finset case</p>",
        "id": 279690115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650552566
    },
    {
        "content": "<p>(eg because \"unlike finsets, this is indexed by a type not a set, so we can't use an API similar to<code>finset.add_sum_erase</code>\")</p>",
        "id": 279690178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650552595
    }
]