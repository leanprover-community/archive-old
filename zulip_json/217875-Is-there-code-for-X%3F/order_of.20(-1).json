[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one_eq_neg_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">not_iff_not</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"n\">hrc</span> <span class=\"n\">hrc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">ring_char.eq_iff.mp</span> <span class=\"n\">hrc</span><span class=\"o\">,</span>\n      <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.char_p_to_char_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">two_ne_zero'</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n      <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">zero_lt_two</span> <span class=\"o\">(</span><span class=\"n\">ring_char.dvd</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n    <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">char_p.ring_char_ne_one</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hr</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_char.spec</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fact_prime_two</span> <span class=\"o\">:=</span> <span class=\"n\">fact.mk</span> <span class=\"n\">nat.prime_two</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">order_of_neg_one</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">one_eq_neg_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">order_of_eq_prime</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">one_eq_neg_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this cannot be the best way of doing this?!? do we have any of these results somewhere?</p>",
        "id": 262529841,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637710918
    },
    {
        "content": "<p>I think that first lemma is much easier than you have</p>",
        "id": 262532112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637712668
    },
    {
        "content": "<p>I think Eric Wieser had the first lemma over arbitrary x, for the mp direction</p>",
        "id": 262532117,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637712677
    },
    {
        "content": "<p>I have a bunch of lemmas about characteristic 2 I should PR</p>",
        "id": 262532121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637712685
    },
    {
        "content": "<p>Ah didn't even tag him!</p>",
        "id": 262532130,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637712696
    },
    {
        "content": "<p>From <a href=\"https://github.com/pygae/lean-ga/blob/68f3e4214dc0e13519170aad7c9aa691589149e3/src/geometric_algebra/from_mathlib/mathoverflow.lean#L167\">https://github.com/pygae/lean-ga/blob/68f3e4214dc0e13519170aad7c9aa691589149e3/src/geometric_algebra/from_mathlib/mathoverflow.lean#L167</a> there are a handful</p>",
        "id": 262532191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637712728
    },
    {
        "content": "<p>Sorry, I meant <a href=\"https://github.com/eric-wieser/lean-ga/blob/bab185bad6c35b350678a58cb9ee55339a4927f7/src/geometric_algebra/from_mathlib/mathoverflow.lean#L165\">https://github.com/eric-wieser/lean-ga/blob/bab185bad6c35b350678a58cb9ee55339a4927f7/src/geometric_algebra/from_mathlib/mathoverflow.lean#L165</a></p>",
        "id": 262532440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637712978
    },
    {
        "content": "<p>mind if I PR them at some point? it was honestly a painful hour working with charp...</p>",
        "id": 262533178,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637713759
    },
    {
        "content": "<p><del>#60852</del> <a href=\"https://github.com/leanprover-community/mathlib/issues/10441\">#10441</a></p>",
        "id": 262535504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637715925
    },
    {
        "content": "<p>When you PR the <code>iff</code> versions later, you can use them to clean up <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.neg_one\">docs#is_primitive_root.neg_one</a></p>",
        "id": 262536078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637716473
    },
    {
        "content": "<p>Which seems to be the only lemma that mentions characteristic two</p>",
        "id": 262536092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637716490
    },
    {
        "content": "<p>I added some machinery that makes <code>order_of</code> basically equivalent to <code>is_primitive_root</code>, so it should be super easy actually</p>",
        "id": 262572293,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637751075
    },
    {
        "content": "<p>I'm somewhat confused why they weren't unified earlier</p>",
        "id": 262572305,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637751085
    },
    {
        "content": "<p>It's probably only a psychological thing: even if I know that <code>z : C</code> is a primitive <code>n</code>-th root of unity if and only if its multiplicative order is <code>n</code>, in my mental image primitive roots is a ring related notion</p>",
        "id": 262574211,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637752138
    },
    {
        "content": "<p>Because we want to be able to say that <code>r : R</code> is a (primitive) root of unity, without knowing a priori that <code>r</code> is a unit</p>",
        "id": 262574399,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637752237
    },
    {
        "content": "<p>But can't you say that? Since a refactor some months ago, <code>order_of</code> doesn't require to be in a group, so you can just express it as <code>order_of r</code> in the multiplicative group of <code>R</code> being positive without talking about <code>units R</code>.</p>",
        "id": 262673415,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1637825033
    },
    {
        "content": "<p>Yes, this does currently work just fine</p>",
        "id": 262674996,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637826708
    }
]