[
    {
        "content": "<p>Consider the following theorem: </p>\n<p>Let X be a topological space and A a nonempty subset of X. Then A is connected if and only if every continuous map to a discrete space is constant on A.</p>\n<p>Is it somewhere in mathlib? I couldn't find it in topology/connected.lean but maybe I'm overlooking something. </p>\n<p>Anyway, if it's not in mathlib I would like to contribute my proof. My current version, which needs to be cleaned up quite a lot before I can contribute it to mathlib, can be found here: <a href=\"https://github.com/dagurtomas/nobelings-thm/blob/master/src/connected_characterisation.lean\">https://github.com/dagurtomas/nobelings-thm/blob/master/src/connected_characterisation.lean</a> (as you can probably see I'm a Lean beginner).</p>\n<p>The \"only if\" direction is only stated with a two-element target, but this should be easy to generalise to any discrete target. </p>\n<p>Any help on how to get my code up to mathlib standards would be appreciated (and I'll also be happy if it's already somewhere in mathlib)!</p>",
        "id": 303023233,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665237955
    },
    {
        "content": "<p>I'm not aware of this being in mathlib.</p>",
        "id": 303024489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665238544
    },
    {
        "content": "<p>We have a somewhat extensive API for the space of connected components. It would be great to integrate that result into that part of mathlib! See e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/connected_components\">docs#connected_components</a></p>",
        "id": 303024976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665238785
    },
    {
        "content": "<p>I‚Äôm actually surprised that we don‚Äôt have this, because this is one of the most efficient characterizations of connectedness. So it would be a really nice addition, and we could probably golf quite a few proofs using it üòú</p>",
        "id": 303025233,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665238912
    },
    {
        "content": "<p>Thanks for the quick responses! </p>\n<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Do you mean that we should state the result as something like \"the space of connected components is discrete\"?  I would be happy to contribute this mathlib. How does this work in practice?</p>",
        "id": 303026027,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665239288
    },
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/connected_components.totally_disconnected_space\">docs#connected_components.totally_disconnected_space</a> (which is the best you can hope for in general)</p>",
        "id": 303026072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665239314
    },
    {
        "content": "<p>Ah yes I see. This should imply the result</p>",
        "id": 303026289,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665239407
    },
    {
        "content": "<p>Anyway, I'll second what Johan and Anatole said -- we should definitely have that result in mathlib :)</p>",
        "id": 303026382,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665239459
    },
    {
        "content": "<p>Imo this characterization (or at least the two elements case) should not depend on connected components, I would really expect it to be one of the first lemmas we prove after the definition. But connected components are defined just a few hundred lines later IIRC so this is not really a big deal if it does depend on it</p>",
        "id": 303026700,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665239596
    },
    {
        "content": "<p>Do we already have that a set is connected iff (relatively) clopen subsets are either empty or full ?</p>",
        "id": 303027099,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665239775
    },
    {
        "content": "<p>Then, looking at preimages of singletons would bring most of the characterization in terms of maps to a discrete space</p>",
        "id": 303027434,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665239925
    },
    {
        "content": "<p>I can‚Äôt find that <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span></p>",
        "id": 303027567,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665239992
    },
    {
        "content": "<p>Yeah I couldn't find it either last time I looked, it would have helped for the uniqueness theorem. And it should be even closer to the definition than most other lemmas.</p>",
        "id": 303027725,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665240049
    },
    {
        "content": "<p>Yes. That looks like a great first project though, so we can probably leave that to Dagur if he wants!</p>",
        "id": 303027879,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665240124
    },
    {
        "content": "<p>BTW Do we have API for relatively open, closed and clopen sets within a set? We likely have induced topology on a subtype but that will not be very enjoyable to use here</p>",
        "id": 303028150,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665240250
    },
    {
        "content": "<p>No we don‚Äôt. I‚Äôve already thought about that, and the conclusion I came to was that if we don‚Äôt have a very good reason to do it, we probably shouldn‚Äôt spend too much time on duplicating all of this API. I‚Äôd say the most efficient way to talk about these currently is as set of the whole type whose preimage by <code>coe</code> is open/closed/clopen.</p>",
        "id": 303029187,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665240778
    },
    {
        "content": "<p>Note that <code>Prop</code> is the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sierpinski_space\">docs#sierpinski_space</a> by default. If you use <code>bool</code> then you won't have to override the existing <code>topological_space</code> instance on <code>Prop</code>.<br>\nInterestingly in category theory we do define connectedness using functors to discrete categories: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_preconnected\">docs#category_theory.is_preconnected</a>. I'm not sure why it doesn't just use a discrete category with two objects. Quantifying over a universe would better be avoided when possible IMO.</p>",
        "id": 303048832,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665252515
    },
    {
        "content": "<p>Yes I noticed that! It will definitely be cleaner with bool if that has the discrete topology by default. Thanks for pointing that out.</p>",
        "id": 303049084,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665252691
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/bool.topological_space\">docs#bool.topological_space</a> define the topology to be the discrete topology ‚ä•. (I find this a bit unintuitive BTW that <code>t‚ÇÅ ‚â§ t‚ÇÇ</code> means <code>t‚ÇÇ ‚äÜ t‚ÇÅ</code>; it's contrary to <a href=\"https://en.wikipedia.org/wiki/Comparison_of_topologies#Definition.%20What's%20the%20reason%20behind%20this%20design%20decision?\">the usual notation</a></p>",
        "id": 303049373,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665252904
    },
    {
        "content": "<p>That‚Äôs because the usual notation is bad. What we want is that the identity is continuous from <code>t1</code> to <code>t2</code> iff <code>t1 &lt;= t2</code> (sorry, I‚Äôm on mobile). Moreover, the whole ¬´¬†filters generalize subsets¬†¬ª intuition forces this order on filter, and we wouldn‚Äôt want <code>nhds</code> to be order-reversing</p>",
        "id": 303055675,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665256759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Characterisation.20of.20connectedness.20using.20continuous.20maps/near/303049373\">said</a>:</p>\n<blockquote>\n<p>I find this a bit unintuitive BTW that <code>t‚ÇÅ ‚â§ t‚ÇÇ</code> means <code>t‚ÇÇ ‚äÜ t‚ÇÅ</code>; it's contrary to [the usual notation](<a href=\"https://en.wikipedia.org/wiki/Comparison_of_topologies#Definition\">https://en.wikipedia.org/wiki/Comparison_of_topologies#Definition</a>. </p>\n</blockquote>\n<p>No, it isn't. The usual notation is never <code>t‚ÇÅ ‚â§ t‚ÇÇ</code>. Where do you see that on this wikipedia page? This page very clearly says that people can't decide what is the order relation and use both.</p>",
        "id": 303056133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665257150
    },
    {
        "content": "<p>Where does the page say people can't decide? At least the <a href=\"https://en.wikipedia.org/wiki/Comparison_of_topologies#Lattice_of_topologies\">lattice structure</a> is contrary to what we have.</p>",
        "id": 303056378,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665257348
    },
    {
        "content": "<p>Are you referring to </p>\n<blockquote>\n<p>There are some authors, especially analysts, who use the terms weak and strong with opposite meaning</p>\n</blockquote>",
        "id": 303056403,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665257392
    },
    {
        "content": "<p>I think the notation ‚äÜ should be pretty unambiguous. I recall some authors use ‚™Ø but I don't remember who and whether it's the finer-than or coarser-than relation.</p>",
        "id": 303056573,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665257501
    },
    {
        "content": "<p>When I try to define the characteristic function of a set with values in <code>bool</code>, Lean complains that it doesn't find an instance of  <code>dedcidable x ‚àà U</code>. I can fix the problem by defining it as the composition of the <code>Prop</code>-valued characteristic function and the map <code>Prop ‚Üí bool</code>. However, this requires a <code>noncomputable</code> in  front, whereas everything I did before was computable according to Lean</p>",
        "id": 303058099,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665258707
    },
    {
        "content": "<p>So you are saying \"I'm doing something noncomputable and I'm annoyed that I have to say it's noncomputable\"? You can add the hypothesis <code>[decidable_pred (‚àà U)]</code>, or you can write <code>noncomputable theory</code> at the top of your file. Or you can use <code>Prop</code> instead of <code>bool</code>.</p>",
        "id": 303059178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665259577
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator\">docs#set.indicator</a> and it's noncomputable (uses the classical decidable instance).</p>",
        "id": 303059230,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665259638
    },
    {
        "content": "<p>Note that most of <code>mathlib</code> does not care at all if something is noncomputable, we are not trying to make a constructive mathematics library, we're trying to make a classical mathematical library.</p>",
        "id": 303059233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665259642
    },
    {
        "content": "<p>however <code>bool</code> doesn't have <code>zero</code>. If you use <code>zmod 2</code> then you'd need to define the topology unfortunately...</p>",
        "id": 303059332,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665259725
    },
    {
        "content": "<p>Using if-then-else is short enough I guess; so maybe you can mimic <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator/src\">src#set.indicator</a> to define a noncomputable function to bool, or better, if you're only constructing the function within a proof, you can just use the <code>classical</code> tactic to get the desired decidable instance.</p>",
        "id": 303059463,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665259810
    },
    {
        "content": "<p>Probably <code>fin 2</code> has a topology -- after all it has an addition, multiplication etc ;-) If it doesn't I'm sure nobody would mind if one were added! ;-)</p>",
        "id": 303059467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665259813
    },
    {
        "content": "<p>Yes you should probably use <code>fin 2</code> to be able to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator\">docs#set.indicator</a>, but we don‚Äôt have a topology on it</p>",
        "id": 303059630,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665259935
    },
    {
        "content": "<p>Using <code>bool</code> or <code>fin 2</code> will result in the same noncomputability issues, right?</p>",
        "id": 303059729,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1665260007
    },
    {
        "content": "<p>Yes yes, we are talking about the ability to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator\">docs#set.indicator</a></p>",
        "id": 303059759,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665260041
    },
    {
        "content": "<p>Tbh the fact that it‚Äôs computable if the codomain is <code>Prop</code> should really not be a decision factor, because you‚Äôll lose it as soon as you want to escape from <code>Prop</code> anyway</p>",
        "id": 303060032,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665260258
    },
    {
        "content": "<p>Yeah. I am just trying to understand what 2-points space you're looking for.</p>",
        "id": 303060122,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1665260323
    },
    {
        "content": "<p>Morally, <code>unit ‚äï unit</code> looks better because the topology you want of it is is the one coming from the order.</p>",
        "id": 303060156,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1665260372
    },
    {
        "content": "<p>One with both <code>has_zero</code> and <code>topological_space</code> instances</p>",
        "id": 303060234,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665260419
    },
    {
        "content": "<p>And <code>discrete_topology</code></p>",
        "id": 303060257,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665260440
    },
    {
        "content": "<p>What do you need the zero for?</p>",
        "id": 303060274,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1665260453
    },
    {
        "content": "<p>Which I believe doesn‚Äôt exist</p>",
        "id": 303060275,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665260454
    },
    {
        "content": "<p>To use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator\">docs#set.indicator</a></p>",
        "id": 303060289,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665260468
    },
    {
        "content": "<p>What do you need <code>set.indicator</code> for? To avoid noncomputability issues scaring Dagur away?</p>",
        "id": 303060315,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1665260508
    },
    {
        "content": "<p>Can you not state the lemma for all <code>[nontrivial Œ±] [topological_space Œ±] [discrete_topology Œ±]</code>?</p>",
        "id": 303060404,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1665260560
    },
    {
        "content": "<p>No the <code>set.indicator</code> was because Dagur mentioned redefining the characteristic function of a set but valued in his two point space, whatever he chooses. But I agree it‚Äôs probably not worth making contorsions to use it, an inlined if-then-else will do</p>",
        "id": 303060590,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665260731
    },
    {
        "content": "<p>Sorry, I should probably stop answering from my phone and actually look at Dagur‚Äôs code before commenting, this would be more helpful</p>",
        "id": 303060757,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665260865
    },
    {
        "content": "<p>I guess I was just confused that the computability of the result I'm proving depends on which discrete two-element space I choose. So what Kevin is saying is that if I use Prop, the result is still noncomputable but I just don't have to tell Lean (or Lean just won't know)? <br>\nI don't care either if something is noncomputable, by the way. I guess I'll just add <code>noncomputable theory</code> at the top.</p>",
        "id": 303061927,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665261936
    },
    {
        "content": "<blockquote>\n<p>I guess I was just confused that the computability of the result I'm proving depends on which discrete two-element space I choose. So what Kevin is saying is that if I use Prop, the result is still noncomputable but I just don't have to tell Lean (or Lean just won't know)? </p>\n</blockquote>\n<p>The point is that <code>set X</code> is defined to be <code>X ‚Üí Prop</code> and to convert a <code>Prop</code> to <code>bool</code> you need decidability of the proposition. In your <code>mem_setProp</code>, you invoke LEM (law of excluded middle) via <code>by_cases</code>. Without LEM you can't show Prop has exactly two elements and its powerset has four elements.</p>\n<p>If you use set.indicator, you won't have to prove the <code>mem_setProp</code> lemma, and can directly use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator_const_preimage\">docs#set.indicator_const_preimage</a>. Since we don't want to add a <code>has_zero</code> instance to <code>bool</code>, you may consider declare a has_zero instance within a proof, like <code>letI : has_zero bool := ‚ü®ff‚ü©</code>.</p>",
        "id": 303063107,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665262821
    },
    {
        "content": "<p>Oh that's excellent! Thank you for this helpful answer. I'll try to use set.indicator then.</p>",
        "id": 303063315,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665262970
    },
    {
        "content": "<p>I've completed the proof, with bool as the target and with any discrete target. See here: <a href=\"https://github.com/dagurtomas/nobelings-thm/blob/master/src/preconnected_characterisation.lean\">https://github.com/dagurtomas/nobelings-thm/blob/master/src/preconnected_characterisation.lean</a>. I'm fairly happy with it but comments and suggestions are very welcome. </p>\n<p>Should I post this in a different stream to get access to a branch of mathlib where I can submit a PR? My github username is <code>dagurtomas</code></p>",
        "id": 303919333,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665693369
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span></p>",
        "id": 303927394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665696697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519559\">@Dagur √Åsgeirsson</span> Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 303927788,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1665696865
    },
    {
        "content": "<p>Thanks! It's PR'ed, see <a href=\"https://github.com/leanprover-community/mathlib/pull/16974\">#16974</a></p>",
        "id": 303985034,
        "sender_full_name": "Dagur √Åsgeirsson",
        "timestamp": 1665736502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Characterisation.20of.20connectedness.20using.20continuous.20maps/near/303056133\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Characterisation.20of.20connectedness.20using.20continuous.20maps/near/303049373\">said</a>:</p>\n<blockquote>\n<p>I find this a bit unintuitive BTW that <code>t‚ÇÅ ‚â§ t‚ÇÇ</code> means <code>t‚ÇÇ ‚äÜ t‚ÇÅ</code>; it's contrary to [the usual notation](<a href=\"https://en.wikipedia.org/wiki/Comparison_of_topologies#Definition\">https://en.wikipedia.org/wiki/Comparison_of_topologies#Definition</a>. </p>\n</blockquote>\n<p>No, it isn't. The usual notation is never <code>t‚ÇÅ ‚â§ t‚ÇÇ</code>. Where do you see that on this wikipedia page? This page very clearly says that people can't decide what is the order relation and use both.</p>\n</blockquote>\n<p>Let me note that mathlib has the (un-namespaced!) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tmp_order\">docs#tmp_order</a> on topologies which is the subset order but not an instance. However, it's a local instance for a part of the file, so some lemma like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tmp_order\">docs#tmp_order</a> gets the subset order instance rather than the default superset order, which can be confusing.</p>\n<p>I'd advocate to adopt the subset order everywhere, as I think the reason for not doing so are not good enough, even though I agree with the order on filters. <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> pointed out two monotonicities (like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_nhds_le_nhds\">docs#le_of_nhds_le_nhds</a>) that would become antitonic for the subset order, but it's not as strong a reason IMO as in the case of filters, where the viewpoint that filters are generalized subsets imposes the superset order.</p>",
        "id": 305819368,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666618233
    },
    {
        "content": "<p>issues with the fact that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tmp_order\">docs#tmp_order</a> is un-namespaced aside, I disagree. I think reverse inclusion makes sense for exactly the reason Anatole mentioned before: <code>t‚ÇÅ ‚â§ t‚ÇÇ</code> is the order that makes the identity map from <code>t‚ÇÅ</code> to <code>t‚ÇÇ</code> continuous. So, this is the \"covariant\" way.</p>",
        "id": 305821434,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666618818
    },
    {
        "content": "<p>Lemmas that use that temporary order aren't meant to be used outside of a tiny fragment of that file. Where did you see a lemma that you wanted to use?</p>",
        "id": 305828597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666620632
    },
    {
        "content": "<p>About the namespace, I guess the correct thing to do is to mark everything about that temporary order relation as private.</p>",
        "id": 305828696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666620661
    },
    {
        "content": "<p>I use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generate_from_mono\">docs#generate_from_mono</a> in <a href=\"https://github.com/leanprover-community/mathlib/pull/17133\">#17133</a></p>",
        "id": 305835835,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666622651
    },
    {
        "content": "<blockquote>\n<p>I think reverse inclusion makes sense for exactly the reason Anatole mentioned before: t‚ÇÅ ‚â§ t‚ÇÇ is the order that makes the identity map from t‚ÇÅ to t‚ÇÇ continuous. So, this is the \"covariant\" way.</p>\n</blockquote>\n<p>Why do we prefer <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open.mono/src\">src#is_open.mono</a> being antitone over <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_nhds_le_nhds/src\">src#le_of_nhds_le_nhds</a> being antitone?</p>",
        "id": 305836418,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666622837
    }
]