[
    {
        "content": "<p>Suppose that I have a linear equiv <code>e</code> between two vector spaces <code>V₁ ≅ V₂</code>.<br>\nAnd suppose that I have subspace <code>W₁ : submodule K V₁</code> and <code>W₂ : submodule K V₂</code>.<br>\nAnd suppose that I can show that <code>W₁</code> maps precisely to <code>W₂</code> under <code>e</code>.<br>\nHow do I get a linear equiv <code>W₁ ≅ W₂</code>?</p>",
        "id": 265026871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639582497
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.map_equiv\">docs#submodule.map_equiv</a>?</p>",
        "id": 265027123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639582589
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.equiv_map_of_injective\">docs#submodule.equiv_map_of_injective</a> seems useful.</p>",
        "id": 265027302,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639582659
    },
    {
        "content": "<p>Not directly related: I just needed the same for order equiv rather than linear equiv and came up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">order_iso.restrict</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">e</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">strict_mono_on.order_iso</span> <span class=\"n\">e.1</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">order_iso.strict_mono</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265027363,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1639582675
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.of_submodules\">docs#linear_equiv.of_submodules</a></p>",
        "id": 265027453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639582693
    },
    {
        "content": "<p>If you replace the <code>strict_mono</code> to injective, can't you adapt this?</p>",
        "id": 265027469,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1639582702
    },
    {
        "content": "<p>The naming is all over the place; <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.of_submodule\">docs#linear_equiv.of_submodule</a> is analogous to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.submonoid_equiv_map\">docs#mul_equiv.submonoid_equiv_map</a> but the name doesn't suggest it</p>",
        "id": 265027677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639582791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks a lot. Exactly what I needed.</p>",
        "id": 265030102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639583664
    },
    {
        "content": "<p>I think we might be missing the <code>add_subgroup</code> version</p>",
        "id": 265030271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639583729
    }
]