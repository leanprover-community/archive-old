[
    {
        "content": "<p>This is just an idea, I think it should be accurate. If I want to construct a linear map f : A -&gt; B, on a submodule A, and if I have A to be a span of a set s (finite, in my case), then as long as f satisfies the relations between the generators, defining f on s should be sufficient. Is there any preexisting code for this?</p>",
        "id": 246765660,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1626895043
    },
    {
        "content": "<p>If <code>S</code> is a set in a module <code>M</code> and <code>N</code> is any other module, you can look at the free module on <code>S</code>, call it <code>F</code>. Linear maps from <code>F</code> to <code>N</code> correspond to functions <code>S</code> to <code>N</code>, which we have as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.total\">docs#finsupp.total</a> </p>\n<p>The inclusion <code>S</code> in <code>M</code> induces a linear map <code>F</code> to <code>M</code> whose image is the span of <code>S</code> by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.span_eq_range_total\">docs#finsupp.span_eq_range_total</a> and the kernel of this map is exactly the \"relations\" that you mention. So now you can probably combine with with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.liftq\">docs#submodule.liftq</a> to get something close to what you're looking for.</p>",
        "id": 246767809,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626896088
    },
    {
        "content": "<p>In any case, it would be worthwhile to combine all of these ingredients to obtain the description you're after</p>",
        "id": 246767919,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626896146
    },
    {
        "content": "<p>This is helpful too: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.quot_ker_equiv_range\">docs#linear_map.quot_ker_equiv_range</a></p>",
        "id": 246769133,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626896738
    },
    {
        "content": "<p>You could use something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.constr\">docs#basis.constr</a> on the basis of <code>span s</code> that is a subset of <code>s</code></p>",
        "id": 246769261,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626896787
    },
    {
        "content": "<p>Well, <code>span S</code> need not have a basis in general</p>",
        "id": 246769453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626896876
    },
    {
        "content": "<p>Oh yeah, forgot we're dealing with submodules, not subspaces. Sorry!</p>",
        "id": 246769613,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626896954
    },
    {
        "content": "<p>Maybe Ashvni is working over a field, in which case using such a basis would certainly simplify things!</p>",
        "id": 246769768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626897024
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  and <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> , they're useful suggestions! Unfortunately I am not working over a field :(. I could restrict to that case but I would prefer not to, if possible.</p>",
        "id": 246770612,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1626897463
    },
    {
        "content": "<p>Do you have a lean statement for your question in mind, or is stating what you want itself proving troublesome?</p>",
        "id": 246777574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626901086
    },
    {
        "content": "<p>Here's a sketch I came up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map_from_span</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">η</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F.ker</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.quot_ker_equiv_range</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ee</span> <span class=\"o\">:</span> <span class=\"n\">F.range</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n    <span class=\"n\">linear_equiv.of_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finsupp.span_eq_range_total</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_map.comp</span> <span class=\"n\">_</span> <span class=\"n\">ee.symm.to_linear_map</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_map.comp</span> <span class=\"n\">_</span> <span class=\"n\">e.symm.to_linear_map</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">F.ker.liftq</span> <span class=\"o\">(</span><span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cond</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246780517,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626902055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/getting.20a.20linear.20map.20from.20a.20span/near/246777574\">said</a>:</p>\n<blockquote>\n<p>Do you have a lean statement for your question in mind, or is stating what you want itself proving troublesome?</p>\n</blockquote>\n<p>I had not given it much thought. It would be ideal if I could prove this, but there are alternative approaches to the (final) problem, I think.</p>",
        "id": 246795592,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1626912229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/getting.20a.20linear.20map.20from.20a.20span/near/246780517\">said</a>:</p>\n<blockquote>\n<p>Here's a sketch I came up with</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map_from_span</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">η</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F.ker</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.quot_ker_equiv_range</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ee</span> <span class=\"o\">:</span> <span class=\"n\">F.range</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n    <span class=\"n\">linear_equiv.of_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finsupp.span_eq_range_total</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_map.comp</span> <span class=\"n\">_</span> <span class=\"n\">ee.symm.to_linear_map</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_map.comp</span> <span class=\"n\">_</span> <span class=\"n\">e.symm.to_linear_map</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">F.ker.liftq</span> <span class=\"o\">(</span><span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cond</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This seems to work, thank you!</p>",
        "id": 246796078,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1626912688
    }
]