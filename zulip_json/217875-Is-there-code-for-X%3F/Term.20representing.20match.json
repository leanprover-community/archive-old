[
    {
        "content": "<p>I'm trying to define a function using match statements. The output of the function requires me to build a term showing the equality of the two things being matched. </p>\n<p>The example below doesn't need it, but it's enough to display my problem. I don't know how to extract <code>(f a) = (sum.inl b)</code> from the context. Any suggestions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xmpl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302673730,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1665068641
    },
    {
        "content": "<p>There's now syntax for this in Lean 4, but to get that term in Lean 3 you have to do some tricks. <a href=\"#narrow/stream/113488-general/topic/match.20with.20equation/near/301626011\">Here's a link</a> to one example</p>",
        "id": 302674215,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665068775
    },
    {
        "content": "<p>Another way, which isn't great, is to use tactic mode since the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cases\">tactic#cases</a> tactic has <code>cases h : f a</code> syntax to get that term.</p>",
        "id": 302674596,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665068889
    },
    {
        "content": "<p>Thanks. I'll give those a try. Tactic mode would be fine for me, but my first attempt didn't give me exactly what I wanted. I need to study the other example a little to figure out how to adapt it to my setting.</p>",
        "id": 302676019,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1665069289
    },
    {
        "content": "<p>Following the pattern of the first link above got me there. I'm happy to hear that Lean 4 will have syntax for this.</p>",
        "id": 302678238,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1665069858
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/eaf5cf6bf9e92e51264fa262b008d15b9328ab4c/src/data/finsupp/lex.lean#L66\">The trick here</a> seems to solve the same problem and I still don't quite get how it work ...</p>",
        "id": 302725558,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665084516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Thanks for finding that, I knew there was a way to avoid the <code>let</code>s but I wasn't sure what to search for.</p>\n<p>I don't think this feature is documented in the Lean reference manual. I believe what's going on with <code>match _, rfl : ∀ y, (f.ne_locus g).min = y → _ with</code> is that everything after the colon is specifying the type for the match expression itself before the arguments to be matched on are passed in.</p>",
        "id": 302726280,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665084797
    },
    {
        "content": "<p>So the first <code>_</code> corresponds to <code>y</code> in the forall, and <code>rfl</code> corresponds to <code>(f.ne_locus g).min = y</code>.</p>",
        "id": 302726426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665084850
    },
    {
        "content": "<p>Yeah, apparently the <code>→ _</code> part isn't matched which is confusing. Although I didn't understand it, it didn't prevent me from <a href=\"https://github.com/leanprover-community/mathlib/pull/16777/files#diff-8b5f03e557da1d7c13e644f91be994aa967cf52d002c3b38ee69f3a917c00ffcR78\">working with it</a>.</p>",
        "id": 302726707,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665084976
    },
    {
        "content": "<p>Huh. That's interesting. That pattern works for me too. It's certainly more streamlined, though otherwise works exactly the same inside the function definition.</p>",
        "id": 302737048,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1665088981
    }
]