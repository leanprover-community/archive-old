[
    {
        "content": "<p>Do we have the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">uniform_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bourbaki_GT_II_4_prop4</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">‚à©</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÖ</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(and btw, do we have a better way to express <code>‚ãÉ x ‚àà A, ball x V</code>? Like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.thickening\">docs#metric.thickening</a> but for any entourage)</p>",
        "id": 301848882,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1664645620
    },
    {
        "content": "<p>(The reference is for the French edition of Bourbaki, I hope it's enough clues to find it in the English version)</p>",
        "id": 301848979,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1664645680
    },
    {
        "content": "<p>Ok so it follows quite easily from Yury's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.nhds_set_basis_uniformity\">docs#is_compact.nhds_set_basis_uniformity</a>, which is funny because Bourbaki does it the other way around. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">uniform_space</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">uniformity</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bourbaki_GT_II_4_prop4</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìùÀ¢</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">hB.is_open_compl.mem_nhds_set.mpr</span> <span class=\"n\">h.le_compl_right</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">hA.nhds_set_basis_uniformity</span> <span class=\"o\">(</span><span class=\"n\">filter.basis_sets</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mem_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">hUAB</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">comp_symm_mem_uniformity_sets</span> <span class=\"n\">hU</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">hVsymm</span><span class=\"o\">,</span> <span class=\"n\">hVU</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_Union‚ÇÇ</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hxa</span><span class=\"o\">‚ü©,</span> <span class=\"o\">‚ü®</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hxb</span><span class=\"o\">‚ü©‚ü©,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_ball_symmetry</span> <span class=\"n\">hVsymm</span> <span class=\"n\">at</span> <span class=\"n\">hxa</span> <span class=\"n\">hxb</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hUAB</span> <span class=\"o\">(</span><span class=\"n\">mem_Union‚ÇÇ_of_mem</span> <span class=\"n\">ha</span> <span class=\"bp\">$</span> <span class=\"n\">hVU</span> <span class=\"bp\">$</span> <span class=\"n\">mem_comp_of_mem_ball</span> <span class=\"n\">hVsymm</span> <span class=\"n\">hxa</span> <span class=\"n\">hxb</span><span class=\"o\">)</span> <span class=\"n\">hb</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301857793,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1664651674
    },
    {
        "content": "<p>If someone wants to try the other way to see if it's shorter that would probably be fun, but that's good enough for me</p>",
        "id": 301857872,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1664651742
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16747\">#16747</a></p>",
        "id": 301861795,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1664654661
    }
]