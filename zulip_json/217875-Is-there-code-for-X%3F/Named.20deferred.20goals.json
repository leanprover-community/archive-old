[
    {
        "content": "<p>Is there a way to defer the current subgoal and assign a name to it, and then later switch to work on that named goal (in a similar way to <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#case\">tactic#case</a>)?</p>",
        "id": 276492185,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648135716
    },
    {
        "content": "<p>For example, this might be used to make proofs in <code>calc</code> mode more readable, by separating the step-by-step part of the proof from the proving-the-steps part.</p>",
        "id": 276492370,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648135801
    },
    {
        "content": "<p>So you could write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">defer</span> <span class=\"n\">step1</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">defer</span> <span class=\"n\">step2</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">defer</span> <span class=\"n\">step3</span>\n</code></pre></div>\n<p>and then close the goals \"step1\", \"step2\", \"step3\" separately.</p>",
        "id": 276492796,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648135949
    },
    {
        "content": "<p>you can use <code>rotate</code> to move a goal to the end, but that only works within a single begin/end block</p>",
        "id": 276492924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648136006
    },
    {
        "content": "<p>the way I would write something like that is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276493062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648136057
    },
    {
        "content": "<p>Ah, I didn't know you could do that (although I now see that it's noted explicitly in the documentation <a href=\"https://leanprover-community.github.io/extras/calc.html\">https://leanprover-community.github.io/extras/calc.html</a>)</p>",
        "id": 276493223,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648136121
    },
    {
        "content": "<p>I remember in the lean4 stream there was an attempt to make a tactic like <code>swap n</code> but it was basically a focus block for the <code>n</code>th goal; did that end up happening? Is it worth backporting it to Lean3?</p>",
        "id": 276495180,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648136821
    },
    {
        "content": "<p>Isn't that just <code>work_on_goal</code>?</p>",
        "id": 276554239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648165616
    },
    {
        "content": "<p>I feel like the real request here is to name the underscores, which lean4 supports natively</p>",
        "id": 276554272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648165648
    },
    {
        "content": "<p>How do you write that in lean4?</p>",
        "id": 276620685,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648215988
    },
    {
        "content": "<p>I was under the impression it was <code>?foo</code> in place of <code>_</code></p>",
        "id": 276628837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648219538
    }
]