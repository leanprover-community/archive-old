[
    {
        "content": "<p>I need a generalised Bézout's identity for more than 2 integers for an IMO problem. Is there something like that in mathlib?</p>",
        "id": 222324467,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1610384070
    },
    {
        "content": "<p>Not that I know of</p>",
        "id": 222326802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610385057
    },
    {
        "content": "<p>What's the statement?</p>",
        "id": 222327646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610385433
    },
    {
        "content": "<p>Given any integers <code>a₁,...,aₙ</code> there always exist integers <code>x₁,...,xₙ</code> such that <code>x₁ * a₁ + ⋯ + xₙ * aₙ = gcd(a₁,...,aₙ)</code>. I believe something similar is true for principal ideal domains.</p>",
        "id": 222328411,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1610385779
    },
    {
        "content": "<p>I don't think there is a definition of <code>gcd</code> for more than two elements in mathlib so seems like there can't be for this. Any thoughts on how difficult it would be to define this and prove the generalised identity?</p>",
        "id": 222328847,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1610385963
    },
    {
        "content": "<p>You can state this with <code>multiset.gcd</code> or <code>finset.gcd</code></p>",
        "id": 222329212,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610386128
    },
    {
        "content": "<p>And multiset has a good inductive principle, so you could prove your desired version by induction</p>",
        "id": 222329296,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610386180
    },
    {
        "content": "<p>What data structure did you want to use to encode the tuple of numbers?</p>",
        "id": 222329452,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610386246
    },
    {
        "content": "<p>I thought finset would make the most sense</p>",
        "id": 222329494,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1610386272
    },
    {
        "content": "<p>Seems like this would be nice to prove for multiset, from which the proof for finset ought to be obvious?</p>",
        "id": 222329690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610386371
    },
    {
        "content": "<p>Here's a messy sketch of this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_mul_sum</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">l.sum</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">list.sum_hom</span> <span class=\"n\">l</span> <span class=\"o\">⟨((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">mul_zero</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zip_with_mul_map_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁.zip_with</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂.map</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n                                                     <span class=\"o\">(</span><span class=\"n\">l₁.zip_with</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">asd</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"bp\">//</span> <span class=\"n\">l.foldr</span> <span class=\"n\">gcd</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.zip_with</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"o\">[],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">ll</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">gcd_a</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ll.foldr</span> <span class=\"n\">gcd</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">((</span><span class=\"n\">asd</span> <span class=\"n\">ll</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ll.foldr</span> <span class=\"n\">gcd</span> <span class=\"mi\">0</span><span class=\"o\">)))),</span> <span class=\"kd\">begin</span>\n <span class=\"n\">simp</span><span class=\"o\">,</span>\n <span class=\"n\">convert</span> <span class=\"n\">gcd_eq_gcd_ab</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">asd</span> <span class=\"n\">ll</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zip_with_mul_map_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_mul_sum</span><span class=\"o\">],</span>\n <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n <span class=\"n\">congr</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n<span class=\"k\">#eval</span> <span class=\"n\">asd</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 222343335,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610392346
    },
    {
        "content": "<p>Is it preferable to have a function to this subtype or a theorem that states the existence of such list?</p>",
        "id": 222419902,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1610451829
    },
    {
        "content": "<p>Given that <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> has gone to the effort of a computable construction, it seems a shame to not use it and and provide a non-computable construction via <code>exists</code>.</p>",
        "id": 222420002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610451894
    },
    {
        "content": "<p>That makes sense, thanks!</p>",
        "id": 222420054,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1610451952
    },
    {
        "content": "<p>Although it might make sense to split <code>asd</code> into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bezout_factors</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bezout_prop</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">bezout_factors</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"n\">gcd</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.zip_with</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bezout_factors</span> <span class=\"n\">l</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>\n<p>but only if that makes the definition simpler</p>",
        "id": 222420164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610452027
    }
]