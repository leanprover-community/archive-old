[
    {
        "content": "<p>Something akin to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">classicize</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 237410793,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620167537
    },
    {
        "content": "<p>doesn't seem too hard to prove using <code>set.to_finset</code> if it's not around</p>",
        "id": 237412019,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620168200
    },
    {
        "content": "<p>although funnily enough my computer won't find an instance of <code>fintype ↥s</code> from <code>fintype α</code></p>",
        "id": 237412130,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620168256
    },
    {
        "content": "<p>You need decidability for that, Eric</p>",
        "id": 237412205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620168318
    },
    {
        "content": "<p><code>decidable_pred s</code>?</p>",
        "id": 237412275,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620168356
    },
    {
        "content": "<p><code>decidable_pred (\\mem s)</code></p>",
        "id": 237412324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620168369
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">finset.to_finset_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.to_finset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">set.to_finset</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">classicize</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">set.to_finset</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">finset.to_finset_coe</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 237412430,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620168443
    },
    {
        "content": "<p>terrible code but it will work</p>",
        "id": 237412446,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620168451
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset_coe\">docs#set.to_finset_coe</a>?</p>",
        "id": 237412447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620168452
    },
    {
        "content": "<p>we have the set = set version, finset = finset isn't there</p>",
        "id": 237412474,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620168479
    },
    {
        "content": "<p>What's that one called?</p>",
        "id": 237412571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620168525
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.coe_to_finset\">docs#set.coe_to_finset</a></p>",
        "id": 237412629,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620168577
    },
    {
        "content": "<p>edited to something slightly less terrible, but it's not quite as clean as it should be due to different <code>fintype</code> instances, same thing as earlier today lol</p>",
        "id": 237413418,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620169059
    },
    {
        "content": "<p>maybe that's why it's not been put in yet</p>",
        "id": 237413437,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620169072
    },
    {
        "content": "<p>There should be a map from set to finset sending infinite sets to zero</p>",
        "id": 237446859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620196103
    }
]