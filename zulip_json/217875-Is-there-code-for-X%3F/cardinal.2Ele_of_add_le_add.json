[
    {
        "content": "<p>Do we have any of the following somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> This seems to be the right generality. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cardinal.aleph_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">γ</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"> I have a lousy lean proof for this -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"> This is what I actually need -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 295252914,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1661440694
    },
    {
        "content": "<p>I think we have neither.</p>",
        "id": 295253720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661440956
    },
    {
        "content": "<p>As for your final example, I do not know if this counts as lousy, but here is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.ordinal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">α₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.aleph_0</span> <span class=\"bp\">≤</span> <span class=\"n\">α</span><span class=\"bp\">;</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">β₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.aleph_0</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">cardinal.add_one_eq</span> <span class=\"n\">α₀</span><span class=\"o\">,</span> <span class=\"n\">cardinal.add_one_eq</span> <span class=\"n\">β₀</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">β</span> <span class=\"o\">((</span><span class=\"n\">not_le.mp</span> <span class=\"n\">β₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"o\">(</span><span class=\"n\">α₀.trans</span> <span class=\"n\">ab</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">cardinal.add_one_eq</span> <span class=\"n\">β₀</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">cardinal.lt_aleph_0.mp</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">α₀</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">not_lt.mpr</span> <span class=\"n\">β₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cardinal.lt_aleph_0.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">cardinal.lt_aleph_0.mp</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">α₀</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">cardinal.lt_aleph_0.mp</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">β₀</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.cast_inj.mpr</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_injective</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_inj.mp</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I never used the <code>cardinal</code> API before, but was curious to try it and your examples were good excuses! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 295366308,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661497865
    },
    {
        "content": "<p>It seems that the <code>cardinal</code> API revolves around using <code>&lt; aleph_0</code> instead of casting nats:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">succ_inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cardinal.eq_of_add_eq_add_right</span> <span class=\"n\">h</span> <span class=\"n\">one_lt_aleph_0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 295371027,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661500356
    },
    {
        "content": "<p>Ah I didn't know that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.eq_of_add_eq_add_right\">docs#cardinal.eq_of_add_eq_add_right</a> exists. Thanks.<br>\nMy proof of <code>α + 1 ≤ β + 1→ α ≤ β</code> is by constructing the injection explicitly, so your approach is definitely better.<br>\nBy the way, I think <code>α.succ</code> and <code>α + 1</code> are not the same thing (regarding the name of your lemma).</p>",
        "id": 295375782,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1661502524
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.succ_order\">docs#cardinal.succ_order</a> agrees:</p>\n<blockquote>\n<p>Note that the successor of <code>c</code> is not the same as <code>c + 1</code> except in the case of finite <code>c</code>.</p>\n</blockquote>",
        "id": 295376153,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661502699
    },
    {
        "content": "<p>In case it helps, these are proofs of the statements that you mentioned:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_one_inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cardinal.eq_of_add_eq_add_right</span> <span class=\"n\">h</span> <span class=\"n\">one_lt_aleph_0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_of_add_le_add_of_lt_aleph_0</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">γ₀</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cardinal.aleph_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">γ</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">β₀</span> <span class=\"o\">:</span> <span class=\"n\">aleph_0</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_eq_left</span> <span class=\"n\">β₀</span> <span class=\"o\">(</span><span class=\"n\">γ₀.le.trans</span> <span class=\"n\">β₀</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_self_add.trans</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">lt_aleph_0.mp</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">β₀</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">clear</span> <span class=\"n\">β₀</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_aleph_0.mp</span> <span class=\"n\">γ₀</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">clear</span> <span class=\"n\">γ₀</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">aleph_0</span> <span class=\"o\">:=</span> <span class=\"n\">le_self_add.trans_lt</span> <span class=\"o\">(</span><span class=\"n\">h.trans_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_aleph_0.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)),</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_aleph_0.mp</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat_cast_le.mpr</span> <span class=\"o\">(</span><span class=\"n\">le_of_add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">nat_cast_le.mp</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_add_le_add_of_lt_aleph_0</span> <span class=\"n\">one_lt_aleph_0</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 295378650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661503962
    },
    {
        "content": "<p>Ah, I missed the \"not <code>c + 1</code>\" bit!  I renamed the lemma above!</p>",
        "id": 295378813,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661504048
    },
    {
        "content": "<p>golf:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.ordinal</span>\n<span class=\"kn\">open</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_right_inj_of_lt_aleph_0</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">γ₀</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">aleph_0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"n\">γ</span> <span class=\"bp\">↔</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cardinal.eq_of_add_eq_add_right</span> <span class=\"n\">h</span> <span class=\"n\">γ₀</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">γ</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_one_inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_right_inj_of_lt_aleph_0</span> <span class=\"n\">one_lt_aleph_0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_le_add_iff_of_lt_aleph_0</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">γ₀</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">aleph_0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">γ</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"n\">γ</span> <span class=\"bp\">↔</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">h</span> <span class=\"n\">γ</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">contrapose</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_and_ne</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">add_le_add_right</span> <span class=\"n\">h.1</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">add_right_inj_of_lt_aleph_0</span> <span class=\"n\">γ₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h.2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_le_add_iff_of_lt_aleph_0</span> <span class=\"n\">one_lt_aleph_0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 295436914,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661524703
    },
    {
        "content": "<p>Very nice!</p>\n<p>I wonder if this version of injectivity is also useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_nat_inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cardinal.eq_of_add_eq_add_right</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nat_lt_aleph_0</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 295438481,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661524928
    },
    {
        "content": "<p>To avoid leaving this one hanging, I PRed these lemmas: if anyone wants to add/change stuff, feel free to do so!</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16262\">#16262</a></p>",
        "id": 295442021,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661525727
    },
    {
        "content": "<p>Thanks!<br>\nI think the <code>add_nat</code> and <code>add_one</code> versions of <code>le</code> can also be useful (potentially also as simp lemmas?)</p>",
        "id": 295443500,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1661525914
    },
    {
        "content": "<p>Just added them!</p>",
        "id": 295447387,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661526603
    },
    {
        "content": "<p>We are also lucky enough that one of the <code>hoskinson</code> machines is taking care of building mathlib!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 295449652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661527127
    }
]