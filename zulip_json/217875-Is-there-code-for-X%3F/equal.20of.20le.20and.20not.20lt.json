[
    {
        "content": "<p>Do we have this anywhere more public than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linarith.eq_of_not_lt_of_not_gt\">docs#linarith.eq_of_not_lt_of_not_gt</a>? Is it true more generally?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">linarith.eq_of_not_lt_of_not_gt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hb</span> <span class=\"n\">h.not_lt</span>\n</code></pre></div>",
        "id": 264469087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639152664
    },
    {
        "content": "<p>This should hold in any <code>partial_order</code> by contraposition of <code>lt_of_le_of_ne</code>, right?</p>",
        "id": 264469545,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639152837
    },
    {
        "content": "<p>That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">not_not.mp</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">h.lt_of_ne</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 264469957,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639152984
    },
    {
        "content": "<p>Do you think we should have <code>eq_of_le_of_not_lt</code> for convenience?</p>",
        "id": 264471063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639153428
    },
    {
        "content": "<p>Sure, maybe calling it <code>has_le.le.eq_of_not_lt</code> for dot notation?</p>",
        "id": 264471176,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639153468
    },
    {
        "content": "<p>You can also do <code>hle.eq_or_lt.resolve_right hlt</code>.</p>",
        "id": 264561657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639227654
    },
    {
        "content": "<p>I find myself needing it as well so <a href=\"https://github.com/leanprover-community/mathlib/pull/10676\">#10676</a> adds it to <code>order.basic</code></p>",
        "id": 264563760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639230556
    }
]