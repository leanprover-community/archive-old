[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"n\">q'</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">q</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>where <code>q</code> and <code>q'</code> are submodules, and the <code>coe</code> lifts them to sets. I want to turn it into </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">q'</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I can't seem to find anything of the form <code>coe_mul</code>. Any help is appreciated, thank you!</p>\n<p>Edit : It turns out that Lean automatically converts <code>↑(q' * q)</code> into <code>↑q' * ↑q</code>. However, I don't see why this is true for submodules.</p>",
        "id": 216120461,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604944447
    },
    {
        "content": "<p>In this case Ithink you can just use <code>change ↑(_ * _) ⊆ _</code> and lean will rewrite along definitions for you</p>",
        "id": 216120669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604944536
    },
    {
        "content": "<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 216120810,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604944590
    },
    {
        "content": "<p>What is the multiplication of submodules? (I assume these are fractional ideals, or something?)</p>",
        "id": 216120970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604944651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiplication.20of.20sets/near/216120669\">said</a>:</p>\n<blockquote>\n<p>In this case Ithink you can just use <code>change ↑(_ * _) ⊆ _</code> and lean will rewrite along definitions for you</p>\n</blockquote>\n<p>It remains the same..</p>",
        "id": 216121050,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604944683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiplication.20of.20sets/near/216121050\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiplication.20of.20sets/near/216120669\">said</a>:</p>\n<blockquote>\n<p>In this case Ithink you can just use <code>change ↑(_ * _) ⊆ _</code> and lean will rewrite along definitions for you</p>\n</blockquote>\n<p>It remains the same..</p>\n</blockquote>\n<p>If I write it as <code>((q' * q) : set _) ⊆ _ </code>, it remains unchanged, however it gives me an error if I use <code>↑(q' * q) ⊆ {1}</code> instead (I presume that this is because <code>coe</code> is unspecified in this case).</p>",
        "id": 216121511,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604944843
    },
    {
        "content": "<p>I think you want <code>((q' * q) : submodule _ _)</code>, perhaps with a second cast to <code>set _</code> if required</p>",
        "id": 216122375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604945282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiplication.20of.20sets/near/216120810\">said</a>:</p>\n<blockquote>\n<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/5c5c302d2e4e539990e77b68781d024249c50442/src/ring_theory/dedekind_domain.lean#L334\">https://github.com/leanprover-community/mathlib/blob/5c5c302d2e4e539990e77b68781d024249c50442/src/ring_theory/dedekind_domain.lean#L334</a></p>\n<p>This isn't an mwe, but it is what I am working with.</p>",
        "id": 216122424,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604945290
    },
    {
        "content": "<p>(Or <code>(q' * q : submodule _ _)</code>)</p>",
        "id": 216122486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604945326
    },
    {
        "content": "<p>If there is a multiplication defined on <code>set X</code> where X is an R-algebra then it will presumably be pointwise multiplication, and hence will not agree with multiplication of submodules, which will be the submodule generated by the set multiplication</p>",
        "id": 216123730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604945929
    },
    {
        "content": "<p>I managed to get rid of subsets and am working in submodules. Thank you!</p>",
        "id": 216130577,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1604949253
    },
    {
        "content": "<p>I'm running into something very similar now - is there a lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_subset_closure</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">submonoid.closure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.subset_def</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">submonoid.mem_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_mul.mp</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">submonoid.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">submonoid.subset_closure</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">submonoid.subset_closure</span> <span class=\"n\">hq</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>somewhere in mathlib? If not, is that a suitable name?</p>",
        "id": 216141678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604955321
    },
    {
        "content": "<p>I would use this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span> <span class=\"n\">algebra.pointwise</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">submonoid</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_subset</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">submonoid.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_subset_closure</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">submonoid.closure</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_subset</span> <span class=\"o\">(</span><span class=\"n\">subset.trans</span> <span class=\"n\">hs</span> <span class=\"n\">submonoid.subset_closure</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subset.trans</span> <span class=\"n\">ht</span> <span class=\"n\">submonoid.subset_closure</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">submonoid</span>\n</code></pre></div>\n<p>If you also want the lemma you mentioned, I would call it <code>mul_self_subset_closure</code>.</p>",
        "id": 216154454,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604963190
    },
    {
        "content": "<p>To answer your question explicitly: no, I don't think these lemmas are in mathlib.</p>",
        "id": 216154503,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604963243
    },
    {
        "content": "<p>Nice generalizations, thanks</p>",
        "id": 216154631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604963354
    },
    {
        "content": "<p>Would you be willing to PR those, or would you prefer to leave that to me?</p>",
        "id": 216154814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604963494
    },
    {
        "content": "<p>I did it: <a href=\"https://github.com/leanprover-community/mathlib/issues/4960\">#4960</a></p>",
        "id": 216156057,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604964443
    }
]