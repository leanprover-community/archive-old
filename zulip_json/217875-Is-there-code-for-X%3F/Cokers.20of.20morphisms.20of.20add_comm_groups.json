[
    {
        "content": "<p>If I have types <code>G</code> and <code>H with add comm group substances and </code>f : G -&gt;+ H<code> a group hom, do we have the cokernel as a type Q equipped with a </code>quotient.lift`-like construction?</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> can this be done with your category theory magic?</p>",
        "id": 229722949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615402932
    },
    {
        "content": "<p>I guess I just quotient by the range</p>",
        "id": 229724597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615403490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.abelian</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">⟶</span> <span class=\"n\">cokernel</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">⟶</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cokernel</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">⟶</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cokernel.π</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 229759630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615415649
    },
    {
        "content": "<p>What's going on here is that quotients in the category of abelian groups are in some sense a bit easier than general quotients. For general quotients of a type you need to quotient by a relation on the type. For add comm groups you can quotient out by a morphism from another type, because you just quotient by the range of the map (the image, as some call it) in the sense of quotient groups -- the range is normal because everything is abelian. This means that there's some modified universal property which is actually more appropriate when doing some diagram chasing. Then I realised I'd invented the theory of cokernels.</p>\n<p>I think that the theory of explicit  H^1(G,A) comes out nicely this way. You have cochains (functions from G to A) which contain cocycles (the kernel of a map from the cochains) and then the coboundaries (the image of a map from A, the 0-cochains). The big question is how best to set this package of data up -- should cocycles and coboundaries be types or terms? Subgroups or groups?</p>",
        "id": 229805670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615447425
    },
    {
        "content": "<p>I've gone for H1 being the cokernel of the map from A to the type of cocycles, which I've made as a subtype with coercion to function (interestingly I had to avoid lean's <code>subtype</code> because it kept giving me the wrong coercion, it would just coerce to the main type, which was a function, and this confused simp)</p>",
        "id": 229806256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615447808
    }
]