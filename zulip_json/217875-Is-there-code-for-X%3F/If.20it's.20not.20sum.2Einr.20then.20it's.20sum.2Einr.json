[
    {
        "content": "<p>Is there a better way to state <code>∀ i, ¬∃ (i' : α), sum.inl i' = i → ∃ (i' : α), sum.inr i' = i</code>?</p>",
        "id": 219651009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607714922
    },
    {
        "content": "<p>(it's obviously an <code>iff</code>, but I only need that direction)</p>",
        "id": 219651031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607714942
    },
    {
        "content": "<p>probably using <code>or</code> (and more parentheses)</p>",
        "id": 219651202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607715031
    },
    {
        "content": "<p>and a lemma on <code>or</code></p>",
        "id": 219651207,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607715034
    },
    {
        "content": "<p>To un-xy, I want to split a sum over <code>x</code> into the cases when <code>f x</code> is <code>sum.inl x'</code> and <code>sum.inr x'</code></p>",
        "id": 219651409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607715149
    },
    {
        "content": "<p><code>cases f x</code> doesn't work?</p>",
        "id": 219651480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607715193
    },
    {
        "content": "<p>And right now I do it by inserting <code>if ( ∃ (i' : α), sum.inl i' = f i) then g x else g x</code> then using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_ite\">docs#finset.sum_ite</a></p>",
        "id": 219651523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607715226
    },
    {
        "content": "<p>If I used sum.elim, then I'd need a different finset lemma</p>",
        "id": 219651640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607715294
    },
    {
        "content": "<p>Oh, I'm looking for that \"make conjunction/disjunction of inductive\" command, I think?</p>",
        "id": 219651750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607715359
    },
    {
        "content": "<p>hmm is that the only lemma with a sum of two sums on the right?</p>",
        "id": 219651860,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607715410
    },
    {
        "content": "<p><code>(∃ b : β, f x = sum.inl b) ∨ (∃ c : γ, f x = sum.inr c) </code>?</p>",
        "id": 219651886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607715431
    },
    {
        "content": "<p>How about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_sum_elim\">docs#finset.sum_sum_elim</a></p>",
        "id": 219651906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607715444
    },
    {
        "content": "<p>this also might not be ideally stated</p>",
        "id": 219651966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607715476
    },
    {
        "content": "<p>Oh that would be perfect. Whoops. I assumed it would be more general so I could use it on arbitrary enum-like typee</p>",
        "id": 219652020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607715492
    },
    {
        "content": "<p>It would be nice if it just had <code>h x</code> on the left, and <code>h (sum.inl x)</code> and <code>h (sum.inr x)</code> on the right</p>",
        "id": 219652067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607715522
    },
    {
        "content": "<p>Yeah, you're right that the current statement isn't enough for me</p>",
        "id": 219652098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607715545
    },
    {
        "content": "<p>Is there a version of <code>mk_iff_of_inductive_prop</code> that works for data and produces existentials?</p>",
        "id": 219652300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607715647
    },
    {
        "content": "<p>Coming back to this with lean accessible - the best statement I can come up with is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inl</span> <span class=\"n\">i'</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span>\n                   <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inr</span> <span class=\"n\">i'</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>or for a more general case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                   <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inl</span> <span class=\"n\">i'</span><span class=\"o\">}),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">i.prop</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n                   <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inr</span> <span class=\"n\">i'</span><span class=\"o\">}),</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">i.prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>Can you think of a better theorem statement?</p>",
        "id": 219658605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607718905
    },
    {
        "content": "<p>the first one is just a special case of product over a disjoint union right?</p>",
        "id": 219659125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607719174
    },
    {
        "content": "<p>These right-hand sides look pretty unpleasant</p>",
        "id": 219659138,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607719188
    },
    {
        "content": "<p>Yes, it is - do we have a lemma for that already?</p>",
        "id": 219659228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719224
    },
    {
        "content": "<p>surely, but I don't think it really helps you</p>",
        "id": 219659288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607719265
    },
    {
        "content": "<p>Because it's not making progress overall</p>",
        "id": 219659355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607719306
    },
    {
        "content": "<p>I think you want the variation of <code>sum_sum_elim</code> I suggested earlier</p>",
        "id": 219659372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607719317
    },
    {
        "content": "<p>The difficulty is I'm not splitting over the summand, I'm splitting over some function of it</p>",
        "id": 219660438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719868
    },
    {
        "content": "<p>Oh I missed that</p>",
        "id": 219660637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607720004
    },
    {
        "content": "<p>I don't know, this is too abstract I think</p>",
        "id": 219661116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607720205
    },
    {
        "content": "<p>I mean a lemma only helps if the new expression is actually easier to deal with</p>",
        "id": 219661188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607720255
    },
    {
        "content": "<p>There must be some reason why knowing what side <code>f i</code> is in helps you evaluate the sum</p>",
        "id": 219661364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607720334
    },
    {
        "content": "<p>and that reason will determine what kind of lemma you need</p>",
        "id": 219661378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607720345
    },
    {
        "content": "<p>but in general, there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_union\">docs#finset.sum_union</a> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 219661422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607720363
    },
    {
        "content": "<p>Perhaps I should just push forward with what I have, and ask again once I have a working proof</p>",
        "id": 219662079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607720687
    },
    {
        "content": "<p>You were right, I didn't need this</p>",
        "id": 219705631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607774892
    },
    {
        "content": "<p>This looks like <code>cases e : f x</code></p>",
        "id": 219705672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607774997
    },
    {
        "content": "<p>Indeed - although I thought I need to split the sum before I had <code>x</code>  available</p>",
        "id": 219705726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607775035
    },
    {
        "content": "<p>so like <code>list.partition</code> then?</p>",
        "id": 219705747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607775075
    },
    {
        "content": "<p>Well, except on a finset</p>",
        "id": 219705814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607775136
    },
    {
        "content": "<p>there is a theorem about partitioning a finset using <code>finset.filter</code></p>",
        "id": 219705832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607775186
    },
    {
        "content": "<p>I think the problem needs some more un-#xy</p>",
        "id": 219705907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607775296
    },
    {
        "content": "<p>I got what I needed with something completely different (in <a href=\"https://github.com/leanprover-community/mathlib/issues/5269\">#5269</a>, <a href=\"https://github.com/leanprover-community/mathlib/blob/f91f9c3f2b33a82c870be8e8e496c85b1ab823c1/src/linear_algebra/alternating.lean#L590\">alternating.lean:590</a>, with by_cases). The PR hasn't been cleaned up yet, but once it has been I'd appreciate suggestions for shortening the proof</p>",
        "id": 219705973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607775363
    }
]