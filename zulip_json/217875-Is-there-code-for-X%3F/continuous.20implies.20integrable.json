[
    {
        "content": "<p>Where are we at in terms of lemmas linking continuity to integrability?  I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.integrable_on_compact\">docs#continuous.integrable_on_compact</a> , but couldn't find variants such as,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">continuous.interval_integrable</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">interval_integrable</span> <span class=\"n\">u</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">measure_theory.integrable_on.mono_set</span> <span class=\"n\">_</span> <span class=\"n\">Ioc_subset_Icc_self</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hu.integrable_on_compact</span> <span class=\"n\">compact_Icc</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">real.locally_finite_volume</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Also, I tried writing a <code>continuous_on</code> variant, but did not find <code>continuous_on.measurable</code> (although we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.measurable\">docs#continuous.measurable</a>).</p>\n<p>Are these things indeed missing?  Let me know if I overlooked something or if there's a better way. <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 219288553,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607478078
    },
    {
        "content": "<p>There can't be <code>continuous_on.measurable</code> because a function can be very bad outside of <code>s</code>.</p>",
        "id": 219289459,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607479033
    },
    {
        "content": "<p>So, <code>continuous_on.integrable_on</code> should assume <code>measurable</code>.</p>",
        "id": 219289525,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607479082
    },
    {
        "content": "<p>And we have <code>continuous_on.integrable_on_compact</code></p>",
        "id": 219289562,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607479135
    },
    {
        "content": "<p>Unfortunately, integrals are defined so that <code>f</code> has to be measurable everywhere.</p>",
        "id": 219289592,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607479184
    },
    {
        "content": "<p>Ah, I see, there is no relative version of <code>measurable</code>.</p>",
        "id": 219289602,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607479199
    },
    {
        "content": "<p>What about <code>continuous.interval_integrable</code>, the lemma I wrote?</p>",
        "id": 219289649,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607479214
    },
    {
        "content": "<p>Should be easy to prove using <code>continuous_on.integrable_on_compact</code>.</p>",
        "id": 219289692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607479272
    },
    {
        "content": "<p>Indeed I proved it above ... just wanted to know if I should PR it :)</p>",
        "id": 219289722,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607479320
    },
    {
        "content": "<p>Currently <code>∫ x in s, f x ∂μ</code> is defined as <code>∫ x, f x ∂(μ.restrict s)</code>, not <code>∫ x, set.indicator s f ∂μ</code>.</p>",
        "id": 219289792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607479373
    },
    {
        "content": "<p>Possibly, this was a bad design choice (I changed it from <code>indicator</code> some time ago).</p>",
        "id": 219289836,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607479424
    },
    {
        "content": "<p>I don't follow, could you please explain?  Are you saying the statement I wrote above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">interval_integrable</span> <span class=\"n\">u</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>is not what it should be?</p>",
        "id": 219289973,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607479558
    },
    {
        "content": "<p>Oh, never mind, I guess you are explaining why there is no natural relative version of <code>measurable</code>.</p>",
        "id": 219290165,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607479764
    },
    {
        "content": "<p>You can do <code>interval_integrable u μ a b</code> provided that <code>[locally_finite_measure μ]</code>.</p>",
        "id": 219290425,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607480011
    },
    {
        "content": "<p>Then it'll work for, e.g., probability measures on <code>\\R</code>.</p>",
        "id": 219290789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607480416
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5288\">#5288</a></p>",
        "id": 219291880,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607481742
    }
]