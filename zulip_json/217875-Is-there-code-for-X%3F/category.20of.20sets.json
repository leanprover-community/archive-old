[
    {
        "content": "<p>It seems that there're no <a href=\"https://en.wikipedia.org/wiki/Category_of_sets\">category of sets</a> in mathlib?</p>\n<p>I've made a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (with a random proof as POC) but don't know if it's idiomatic or correct:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">function</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">full_subcategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Group</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">injective_of_mono</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">α₁</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">hom_α₁</span> <span class=\"o\">:=</span> <span class=\"n\">as_hom</span> <span class=\"n\">α₁</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">hom_α₂</span> <span class=\"o\">:=</span> <span class=\"n\">as_hom</span> <span class=\"n\">α₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t0</span> <span class=\"o\">:</span> <span class=\"n\">hom_α₁</span> <span class=\"err\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">hom_α₂</span> <span class=\"err\">≫</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a₁</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">hom_α₁</span> <span class=\"bp\">=</span> <span class=\"n\">hom_α₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cancel_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">t0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">=</span> <span class=\"n\">α₂</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">α₂</span> <span class=\"n\">a₁</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t5</span> <span class=\"o\">:</span> <span class=\"n\">α₂</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207020110,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597495019
    },
    {
        "content": "<p>I noticed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.bundled\">docs#category_theory.bundled</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.induced_category\">docs#category_theory.induced_category</a> and <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/The.20category.20of.20finite.20sets\">this topic</a> but don't know how to apply them to a non-class <code>set</code>.</p>",
        "id": 207020168,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597495122
    },
    {
        "content": "<p>What mathematicians would call the category of sets is called the category of types in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.types\">docs#category_theory.types</a></p>",
        "id": 207020182,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1597495160
    },
    {
        "content": "<p>I guess no one has noticed a use for it so far. (Of course we use the category of types a lot.)</p>",
        "id": 207020185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597495161
    },
    {
        "content": "<p>Are you looking for the category of sets as in your wikipedia link or for the category of <code>set</code>s of a type <code>X</code> as in your code sample?</p>",
        "id": 207020244,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1597495231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/category.20of.20sets/near/207020244\">said</a>:</p>\n<blockquote>\n<p>Are you looking for the category of sets as in your wikipedia link or for the category of <code>set</code>s of a type <code>X</code> as in your code sample?</p>\n</blockquote>\n<p>The code example is born out of the difficulty of expressing the \"the category of sets \" properly, I think.</p>",
        "id": 207020373,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597495440
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>, I think the point is that as we're using different foundations, the category of sets is not particularly interesting or useful, and everywhere that conventional mathematics uses their \"category of sets\" (in set theory), we want to use the \"category of types\" (in type theory).</p>",
        "id": 207020418,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597495489
    },
    {
        "content": "<p>The category of sets (in type theory) (i.e. the thing you just defined) is not the same thing as the category of sets (in set theory).</p>",
        "id": 207020440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597495540
    },
    {
        "content": "<p>Perhaps worth mentioning: the category of subsets of <code>X</code>, as defined in the code above, can be constructed as a full subcategory of the category of types. Full subcategories exists already in mathlib, if you really need this.</p>",
        "id": 207020500,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597495663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/category.20of.20sets/near/207020418\">said</a>:</p>\n<blockquote>\n<p>But <span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span>, I think the point is that as we're using different foundations, the category of sets is not particularly interesting or useful, and everywhere that conventional mathematics uses their \"category of sets\" (in set theory), we want to use the \"category of types\" (in type theory).</p>\n</blockquote>\n<p>Thanks for the clarification, now I realized it. I was having trouble treating types as sets  and <code>set</code>s as subsets lately due to some discussions on Zulip.</p>\n<p>Thanks for the pointers to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.types\">docs#category_theory.types</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.\">docs#category_theory.</a>​full_subcategory , they seem to be what I'm looking for (fail to recognize them previously).</p>",
        "id": 207020869,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597496239
    },
    {
        "content": "<p>we do have a category structure on <code>set X</code> owing to its complete lattice structure</p>",
        "id": 207020923,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597496316
    },
    {
        "content": "<p><code>has_limits_of_complete_lattice</code> ?</p>",
        "id": 207021072,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597496525
    },
    {
        "content": "<p>that’s saying it has all limits right</p>",
        "id": 207021084,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597496544
    },
    {
        "content": "<p>you can try <code>#check (by apply_instance : category (set X))</code> if you want to find the name</p>",
        "id": 207021101,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597496596
    },
    {
        "content": "<p>ofc with <code>variable (X : Type*)</code> on the previous line</p>",
        "id": 207021107,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597496615
    },
    {
        "content": "<p><code>preorder.small_category (set X) </code></p>",
        "id": 207021329,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597496955
    },
    {
        "content": "<p>Note that the preorder category structure on <code>set X</code> is different from what was defined above. The limits in this are essentially just Inf and colimits essentially just Sup.</p>",
        "id": 207021675,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597497547
    }
]