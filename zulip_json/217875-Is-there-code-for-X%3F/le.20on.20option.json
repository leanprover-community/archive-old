[
    {
        "content": "<p>Is there an easy way to get <code>≤</code> for <code>option ℕ</code>?<br>\nI understand that there are multiple ways one could define it, but perhaps there's a \"standard\" way. Currently I just have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">optional_le</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>        <span class=\"n\">none</span>      <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"n\">_</span>         <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p'</span>\n</code></pre></div>\n<p>The reason I ask is that I'm trying to avoid showing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_total</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">optional_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_antisymm</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">optional_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_trans</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">optional_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">optional_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Also, I've just noticed that this relation isn't total <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>.</p>",
        "id": 229511212,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615308991
    },
    {
        "content": "<p>There is a definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_bot\">docs#with_bot</a> which is the same as <code>option</code>, but comes with a specified order, and the new element <code>\\bot</code> is the least element. Compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top\">docs#with_top</a>.</p>",
        "id": 229512736,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1615309476
    },
    {
        "content": "<p>This works out of the box:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounded_lattice</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 229513455,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1615309699
    },
    {
        "content": "<p>I assume you meant to define <code>| none     none      := true</code>, which is what the types Floris references do</p>",
        "id": 229518598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615311422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/le.20on.20option/near/229518598\">said</a>:</p>\n<blockquote>\n<p>I assume you meant to define <code>| none     none      := true</code>, which is what the types Floris references do</p>\n</blockquote>\n<p>Almost missed that, thanks :)</p>",
        "id": 229538264,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615318235
    }
]