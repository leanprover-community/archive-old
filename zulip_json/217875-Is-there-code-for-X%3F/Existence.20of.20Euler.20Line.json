[
    {
        "content": "<p>How do we state the assertion that orthocenter, the circumcenter, and the centroid of a triangle all lie on a line, in Lean, using the approach which I attribute to Joseph Myers? I need to get started somehow so I thought I'd ask a concrete problem so I could start learning from there.</p>\n<p>I am tiring of telling schoolchildren about natural numbers, I need a new talk.</p>",
        "id": 243655370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624456702
    },
    {
        "content": "<p>We don't have an explicit definition of <code>euler_line</code>, but <code>affine_span ℝ {s.circumcenter, (univ : finset (fin (n + 1))).centroid ℝ s.points}</code> seems like a reasonable definition to go in <code>geometry.euclidean.monge_point</code> for the Euler line of a simplex. It should then be straightforward to prove that this really is a line (i.e., its <code>direction</code> has <code>finrank</code> equal to 1) if the circumcenter and centroid are different (e.g. using <code>affine_independent_of_ne</code> and <code>finrank_vector_span_of_affine_independent</code>; this would actually be a lemma for <code>linear_algebra.affine_space.finite_dimensional</code> about the <code>finrank</code> of the <code>vector_span</code> of any two different points in an affine space, not something specific to the Euclidean case).</p>\n<p>The fact that the <code>monge_point</code> lies on the so-defined <code>euler_line</code> is more or less trivial from how we define <code>monge_point</code> and the definition of affine subspaces and basic lemmas about affine spans; the real work of proving the result you give is that the <code>orthocenter</code> (defined as the <code>monge_point</code> in the two-dimensional case) actually satisfies the properties expected for it (i.e. the lemmas <code>orthocenter_mem_altitude</code> and <code>eq_orthocenter_of_forall_mem_altitude</code>, but the main work is actually the computation in <code>inner_monge_point_vsub_face_centroid_vsub</code>, and much of the work there in turn is done by <code>simp</code>).</p>",
        "id": 243728367,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1624492854
    },
    {
        "content": "<p>For the finrank 1 argument I seem to need <code>vector_span ℝ (set.range ![X, Y]) = vector_span ℝ ↑(affine_span ℝ {X, Y})</code>(with hypothesis <code>X!=Y</code>) (NB <code>simp</code> reduces this to <code>vector_span ℝ {Y, X} = vector_span ℝ (span_points ℝ {X, Y})</code>). Am working my way towards Monge points.</p>",
        "id": 243800700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624547452
    },
    {
        "content": "<p>With more or better <code>simp</code> lemmas it should be possible to get <code>simp</code> to reduce that to <code>vector_span ℝ {Y, X} = vector_span ℝ {X, Y}</code>. There ought to be a <code>simp</code> lemma about the <code>vector_span</code> of the <code>affine_span</code> (deduced from <code>affine_span_coe</code> and <code>direction_affine_span</code>, for example). And the <code>simp</code> lemma <code>coe_affine_span</code> is suspect, really it ought to be the other way round on the principle that the bundled <code>affine_span</code> is normally the preferred representation and <code>span_points</code> should only be used when that specific description of the set of points is of interest.</p>",
        "id": 243859965,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1624577950
    },
    {
        "content": "<p>Yes, Bhavik tamed it in the end at Xena last night (where I broke my pledge to do Lean 4 once a week and instead spent several hours trying to prove that angle at centre equals twice angle at circumference in Lean 3 :-) )</p>",
        "id": 243916035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624628116
    }
]