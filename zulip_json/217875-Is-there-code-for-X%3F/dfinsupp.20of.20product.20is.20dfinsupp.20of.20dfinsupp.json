[
    {
        "content": "<p>Is there anything in mathlib resembling the sorry here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">dfinsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ii</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">jj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ii</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">jj</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">→</span> <span class=\"n\">jj</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">×</span> <span class=\"n\">jj</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 204537032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595331555
    },
    {
        "content": "<p>Quite possibly not. <code>dfinsupp</code> is not very well developed.</p>",
        "id": 204540771,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595334578
    },
    {
        "content": "<p>Is <code>≃</code> the right statement to try to make?</p>",
        "id": 204551733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595340420
    },
    {
        "content": "<p>Depends what you need it for. Lots of algebra structures are going to be compatible with this equivalence, too.</p>",
        "id": 204552110,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595340613
    },
    {
        "content": "<p>I can make a start on this with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">prod_to_nested</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">×</span> <span class=\"n\">jj</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">fapply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">fij</span><span class=\"o\">,</span> <span class=\"err\">⟦</span><span class=\"o\">{</span>\n        <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">⟦</span> <span class=\"o\">{</span>\n            <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fij</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n            <span class=\"n\">pre_support</span> <span class=\"o\">:=</span> <span class=\"n\">fij</span><span class=\"bp\">.</span><span class=\"n\">pre_support</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">×</span> <span class=\"n\">jj</span><span class=\"o\">),</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span>\n            <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n                <span class=\"k\">obtain</span> <span class=\"n\">hin</span> <span class=\"bp\">|</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">fij</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hin</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]},</span>\n                <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h0</span><span class=\"o\">},</span>\n            <span class=\"kn\">end</span>\n        <span class=\"o\">}</span> <span class=\"err\">⟧</span><span class=\"o\">,</span>\n        <span class=\"n\">pre_support</span> <span class=\"o\">:=</span> <span class=\"n\">fij</span><span class=\"bp\">.</span><span class=\"n\">pre_support</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ij</span><span class=\"o\">,</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">),</span>\n        <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n            <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fij</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n            <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"o\">,</span>\n            <span class=\"n\">sorry</span>\n        <span class=\"kn\">end</span>\n    <span class=\"o\">}</span><span class=\"err\">⟧</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)],</span>\n        <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)]</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>although this all feels super awkward</p>",
        "id": 204569969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595348806
    },
    {
        "content": "<p>Updated the above to be sorry-free, would appreciate feedback on whether I'm missing a trick.<br>\nIn paticular, the <code> λ j, (fij.zero (i, j)).elim</code> proof is repeated twice, and I'm not sure how to remove it.</p>",
        "id": 204584386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595356066
    },
    {
        "content": "<p>The other direction is proving even more challenging:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">nested_to_prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">×</span> <span class=\"n\">jj</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">fapply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">fi</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"err\">⟦</span><span class=\"o\">{</span>\n            <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ij</span><span class=\"o\">,</span> <span class=\"n\">fi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span>\n            <span class=\"n\">pre_support</span> <span class=\"o\">:=</span> <span class=\"n\">fi</span><span class=\"bp\">.</span><span class=\"n\">pre_support</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"k\">begin</span>\n                <span class=\"k\">let</span> <span class=\"n\">j_sets</span> <span class=\"o\">:=</span> <span class=\"n\">fi</span><span class=\"bp\">.</span><span class=\"n\">pre_support</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n                    <span class=\"k\">let</span> <span class=\"n\">fi_val</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n                    <span class=\"c\">/-</span><span class=\"cm\"> This is unprovable, I think lift_on is the wrong approach, or I need to return a clever quotient -/</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">fi_val</span>\n                        <span class=\"n\">dfinsupp</span><span class=\"bp\">.</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">pre_support</span>\n                        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n                            <span class=\"n\">sorry</span>\n                        <span class=\"kn\">end</span><span class=\"o\">)</span>\n                <span class=\"kn\">end</span><span class=\"o\">),</span>\n                <span class=\"c\">/-</span><span class=\"cm\"> should be union of j_sets -/</span>\n                <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">jj</span><span class=\"o\">),</span>\n            <span class=\"kn\">end</span><span class=\"o\">),</span>\n            <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ij</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n                <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_product</span><span class=\"o\">,</span>\n                <span class=\"n\">cases</span> <span class=\"n\">fi</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">sorry</span><span class=\"o\">},</span>\n                <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n            <span class=\"kn\">end</span>\n        <span class=\"o\">}</span><span class=\"err\">⟧</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ij</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204592321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595359854
    },
    {
        "content": "<p>Would this be more suited to #general, now that it's established the answer to \"is there code for X in mathlib\" is no?</p>",
        "id": 204655430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595418708
    },
    {
        "content": "<p>Yes, or <code>#maths</code></p>",
        "id": 204655486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595418735
    },
    {
        "content": "<p>Shall I repost, or ask someone with the magic bit to move it?</p>",
        "id": 204655512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595418764
    },
    {
        "content": "<p>I think reposting is easier</p>",
        "id": 204655523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595418774
    },
    {
        "content": "<p>Just add a link to this thread</p>",
        "id": 204655526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595418779
    },
    {
        "content": "<p>Posted as <a href=\"#narrow/stream/116395-maths/topic/dfinsupp.20of.20product.20is.20dfinsupp.20of.20dfinsupp\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/dfinsupp.20of.20product.20is.20dfinsupp.20of.20dfinsupp</a></p>",
        "id": 204657434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595420091
    }
]