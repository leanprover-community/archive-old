[
    {
        "content": "<p>Does mathlib not yet have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">category_theory.limits.preserves_binary_biproduct_of_additive</span>\n  <span class=\"o\">{</span><span class=\"bp\">𝓐</span> <span class=\"bp\">𝓑</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝓑</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">𝓑</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">𝓐</span> <span class=\"bp\">⥤</span> <span class=\"bp\">𝓑</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">functor.additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">𝓐</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_binary_biproduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>We need this for LTE.</p>",
        "id": 280875313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651499177
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/61d5d308c6b2268799d2e4377a6232b34aced678/src/category_theory/preadditive/additive_functor.lean#L108\">https://github.com/leanprover-community/mathlib/blob/61d5d308c6b2268799d2e4377a6232b34aced678/src/category_theory/preadditive/additive_functor.lean#L108</a></p>",
        "id": 280884219,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651503431
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib/blob/61d5d308c6b2268799d2e4377a6232b34aced678/src/category_theory/limits/preserves/shapes/biproducts.lean#L121\">https://github.com/leanprover-community/mathlib/blob/61d5d308c6b2268799d2e4377a6232b34aced678/src/category_theory/limits/preserves/shapes/biproducts.lean#L121</a></p>",
        "id": 280884435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651503505
    },
    {
        "content": "<p>Thanks! So I'm just missing imports.</p>",
        "id": 280885682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651503933
    },
    {
        "content": "<p>Wait, neither of those is about <em>binary</em> biproducts.</p>",
        "id": 280886620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651504283
    },
    {
        "content": "<p>So there's still glue missing.</p>",
        "id": 280886651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651504291
    },
    {
        "content": "<p>Oh?</p>",
        "id": 280886712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651504307
    },
    {
        "content": "<p>There we go:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/61d5d308c6b2268799d2e4377a6232b34aced678/src/category_theory/limits/preserves/shapes/biproducts.lean#L143\">https://github.com/leanprover-community/mathlib/blob/61d5d308c6b2268799d2e4377a6232b34aced678/src/category_theory/limits/preserves/shapes/biproducts.lean#L143</a></p>",
        "id": 280886805,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651504331
    }
]