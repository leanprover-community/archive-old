[
    {
        "content": "<p>The lemma below looks like it would be a reasonable thing to have. It is more or less equivalent to <code>fin.prod_univ_cast_succ</code>, but not exactly, so the proof below essentially is about showing that it's the same after all.<br>\nI strongly suspect that this can be done in a better (shorter/more efficient) way to do this. Any suggestions?<br>\n(The motivation is the idea of using each of the new lemmas <code>fin.prod_univ_&lt;number&gt;</code> introduced in <a href=\"https://github.com/leanprover-community/mathlib/pull/15684\">#15684</a> to prove the next one.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fin.prod_univ_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin.prod_univ_cast_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_eq_cast_succ</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">fin.eq_last_of_not_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_of_nat_eq_mod</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">n</span><span class=\"o\">)],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">irrefl</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291228230,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659030540
    },
    {
        "content": "<p>That reminds me, I had these is some unfinished project a while back and they seem like they could also be useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">none</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">finset.subset_univ</span> <span class=\"o\">{</span><span class=\"n\">none</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.prod_sdiff</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ.image</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">option.eq_none_iff_forall_not_mem</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_fin_succ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">fin.succ_embedding</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">fin_succ_equiv</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.prod_equiv</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">e.symm</span><span class=\"o\">),</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">equiv.symm_apply_apply</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_option</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Disclaimer: I haven't checked if they still compile or if there are missing definitions.)</p>",
        "id": 291229038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659030937
    },
    {
        "content": "<p>Am I mising something about your <code>fin.prod_univ_succ</code>? Isn't the only difference <code>n</code> vs <code>fin.last n</code>?</p>",
        "id": 291229731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659031313
    },
    {
        "content": "<p>Agreed with Eric. What you want is already called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.prod_univ_succ\">docs#fin.prod_univ_succ</a> !</p>",
        "id": 291230494,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659031678
    },
    {
        "content": "<p>I don't think so -- Michael wants to pull off the last term, and what Yael is linking to pulls off the first term.</p>",
        "id": 291231920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659032415
    },
    {
        "content": "<p>Then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.prod_univ_cast_succ\">docs#fin.prod_univ_cast_succ</a>, or even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.prod_univ_succ_above\">docs#fin.prod_univ_succ_above</a> for the general case.</p>",
        "id": 291232201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659032567
    },
    {
        "content": "<p>My point is that we have all versions already.</p>",
        "id": 291232252,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659032592
    },
    {
        "content": "<p>Yes with these it's pretty easy</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_univ_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">fin.prod_univ_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_eq_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_nat_eq_last</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 291233927,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659033386
    },
    {
        "content": "<p>If there are no objections, I'll add <code>prod_univ_succ</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/15684\">#15684</a> and change the proofs of the <code>fin.prod_univ_&lt;n&gt;</code> lemmas to fit the pattern <code>by {rw [prod_univ_succ &lt;n-1&gt;, prod_univ_seven], refl}</code> (which seems to be slighly faster than what <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> suggested in a comment there).</p>",
        "id": 291238028,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659035427
    },
    {
        "content": "<p>You mean <code>by {rw [prod_univ_succ, prod_univ_&lt;n-1&gt;], refl}</code>? Sounds good.</p>",
        "id": 291238200,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659035512
    },
    {
        "content": "<p>But... <code>fin.prod_univ_succ_cast</code> already is the lemma you want, modulo two rewrites because you didn't quite use the same form.</p>",
        "id": 291238269,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659035529
    },
    {
        "content": "<p>One of the rewrites is under the product, which makes it less friendly.<br>\nI also find my version more natural.</p>",
        "id": 291238785,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659035785
    },
    {
        "content": "<p>BTW, <code>fin.prod_univ_succ</code> already exists (it peels of f <code>f 0</code>), so I'll rename to <code>fin.prod_univ_succ'</code>.</p>",
        "id": 291239234,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659036011
    },
    {
        "content": "<p>Yes, this is what I've been saying all along. If you <em>really</em> want to add your version, you should name it <code>fin.prod_univ_coe</code> or <code>fin.prod_univ_coe_succ</code>.</p>",
        "id": 291239382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659036110
    },
    {
        "content": "<p>Actually <code>by { rw [prod_univ_cast_succ, prod_univ_three], refl }</code> etc. also works. They're defeq when you give explicit numbers! So no need of the new lemma after all.</p>",
        "id": 291239507,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659036167
    },
    {
        "content": "<p>OK, so I'll use that. Thanks!</p>",
        "id": 291239750,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659036285
    },
    {
        "content": "<p>Is one of these simp normal?</p>",
        "id": 291241033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659036932
    },
    {
        "content": "<p>I feel like the current version with cast_succ is much better than the double coercion being suggested</p>",
        "id": 291241120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659036965
    },
    {
        "content": "<p>Does the double coercion simplify to the former already?</p>",
        "id": 291241158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659036986
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.prod_univ_cast_succ\">docs#fin.prod_univ_cast_succ</a> is simpler than the proposed lemma according to the simp lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.coe_eq_cast_succ\">docs#fin.coe_eq_cast_succ</a>.</p>",
        "id": 291241227,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659037032
    },
    {
        "content": "<p>Note that <a href=\"https://github.com/leanprover-community/mathlib/pull/15738\">#15738</a> contains a single lemma (<code>(fin_vec.sum_eq f).symm</code>) that proves all these statements for any given n</p>",
        "id": 291242168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659037518
    },
    {
        "content": "<p>Eric, is this what all the reflection fuss is about in Coq?</p>",
        "id": 291242481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659037666
    },
    {
        "content": "<p>That's what I was referring to, but I'm not certain I'm using the term correctly</p>",
        "id": 291244134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659038378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/products.20over.20.60.28fin.20n.29.60/near/291242168\">said</a>:</p>\n<blockquote>\n<p>Note that <a href=\"https://github.com/leanprover-community/mathlib/pull/15738\">#15738</a> contains a single lemma (<code>(fin_vec.sum_eq f).symm</code>) that proves all these statements for any given n</p>\n</blockquote>\n<p>I see the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>there, which seems to indicate that with the definition of <code>sum</code> there, one gets a definitional equality.</p>",
        "id": 291245147,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659038884
    },
    {
        "content": "<p>In any case, I've now included the more efficient proofs in <a href=\"https://github.com/leanprover-community/mathlib/pull/15684\">#15684</a>.<br>\nI hope this PR can be merged now...</p>",
        "id": 291248208,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659040336
    },
    {
        "content": "<p>Since I need the <code>n = 8</code> case in <code>number_theory.legendre_symbol.gauss_sum</code> and would like to get on with the Legendre Symbol refactor, I think it makes sense to have these lemmas for the time being. After  <a href=\"https://github.com/leanprover-community/mathlib/pull/15738\">#15738</a> is merged, they can probably be removed again (but perhaps there should some info in the docstrings of <code>fin.prod_univ_two</code> and <code>fin.sum_univ_two</code> explaining how to get these statements for larger <code>n</code>) and the proof that uses <code>fin.sum_univ_eight</code> can be modified.</p>",
        "id": 291253276,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659043076
    }
]