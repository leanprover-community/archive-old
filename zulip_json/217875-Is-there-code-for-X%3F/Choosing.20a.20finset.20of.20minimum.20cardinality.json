[
    {
        "content": "<p>I have a non-empty collection of finite subsets and would like to select one of minimum cardinality. After a bit of poking around I see that I can achieve this using <code>well_founded.min</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Optional convenience definition.</span>\n<span class=\"kd\">def</span> <span class=\"n\">well_founded_card</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.card</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure_wf</span> <span class=\"n\">finset.card</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">min_card_of_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">well_founded.min</span> <span class=\"n\">well_founded_card</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_card_of_nonempty_mem</span> <span class=\"o\">:</span> <span class=\"n\">min_card_of_nonempty</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">well_founded.min_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_card_of_nonempty_le</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">min_card_of_nonempty</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"n\">t.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">well_founded.not_lt_min</span> <span class=\"n\">well_founded_card</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 250334152,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629715123
    },
    {
        "content": "<p>Evidently this is a thin wrapper around <code>well_founded.min</code> specialising it to a very specific situation.</p>",
        "id": 250334223,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629715189
    },
    {
        "content": "<p>However I think this situation is important enough to be worth the specialisation: not being all that familiar with the relevant corners of the library, it took me a while to construct the above.</p>",
        "id": 250334325,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629715258
    },
    {
        "content": "<p>I would appreciate feedback on:</p>\n<ol>\n<li>Am I doing this right? I'm a bit surprised we don't have an established pattern for exactly this situation already.</li>\n<li>Should I PR this?</li>\n</ol>",
        "id": 250334379,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629715312
    },
    {
        "content": "<p>It seems easier to just use <code>well_founded.min</code> on <code>finset.card '' s</code>, and then take a preimage. Hopefully you can do without having to write many new lemmas that way. But I haven't looked closely.</p>",
        "id": 250335748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629716354
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 250335955,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629716486
    },
    {
        "content": "<p>I actually started with this and then thought \"Surely Mathlib should be helping more than this, people _often_ want to do exactly what I'm doing?\" But I wasn't confident enough in this to actually make a PR.</p>",
        "id": 250336038,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629716533
    },
    {
        "content": "<p>I sort of doubt exactly what you're doing is common. Taking the minimum w.r.t some function to nat (e.g. <code>finset.card</code> in your case) is certainly common, and perhaps could use more API. But not specifically for finset.card, I think.</p>",
        "id": 250336245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629716679
    },
    {
        "content": "<p>Ah that's a good point.</p>",
        "id": 250336266,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629716701
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 250336400,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629716770
    },
    {
        "content": "<p>Is it possible to do this by taking the first element of the list you get when you sort your finset of finsets by card? Basically, argmin</p>",
        "id": 250344055,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629721694
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.argmin\">docs#list.argmin</a></p>",
        "id": 250344119,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629721739
    },
    {
        "content": "<p>Ah, you have an unbounded collection as a set</p>",
        "id": 250344269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629721818
    },
    {
        "content": "<p>As another data point: A while back I was also disappointed that mathlib didn't have a way of taking a minimum/making w.r.t. a function. <br>\nMy preferred API for that purpose was to have a minimum/maximum that takes a set and a function, and returns a junk value when the minimum/maximum doesn't exist (e.g. the set is empty, not bounded, infinite, ...)</p>",
        "id": 250381984,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629738794
    },
    {
        "content": "<p>Perhaps we want <code>function.max</code> (which just takes a function into a type with <code>has_le</code>), and <code>function.max_on</code> (which takes such a function and a set in the domain type).</p>",
        "id": 250427997,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629763352
    },
    {
        "content": "<p>I guess the target type needs to have <code>nonempty</code> so we can pick a junk value.</p>",
        "id": 250428027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629763386
    },
    {
        "content": "<p>For that matter we could provide a lawless <code>has_Inf</code> on any such type as well.</p>",
        "id": 250428181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629763517
    },
    {
        "content": "<p>Returning to this, I think the following is what I really wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.well_founded</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">function.argmin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">well_founded.min</span> <span class=\"o\">(</span><span class=\"n\">inv_image.wf</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">set.univ</span> <span class=\"n\">set.univ_nonempty</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">function.argmin_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">well_founded.min</span> <span class=\"o\">(</span><span class=\"n\">inv_image.wf</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n</code></pre></div>\n<p>This is just the specialisation of <code>well_founded.min</code> to the case that we have a function which takes values in a type carrying a well-founded <code>&lt;</code>. It's still a very thin wrapper but I feel this might be worth adding.</p>\n<p>Yes / no ?</p>",
        "id": 250936507,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630073131
    },
    {
        "content": "<p>I believe I have also wanted this in the past!</p>",
        "id": 250936804,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630073272
    },
    {
        "content": "<p>I just searched Mathlib for uses of <code>well_founded.min</code> and by eye I'd say at least half are of this form with <code>β = ℕ</code>. I'll wait a while to see if there are dissenting opinions but if not I'll PR this + API later.</p>",
        "id": 250937003,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630073369
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8895\">#8895</a> (dissenting opinions still welcome!)</p>",
        "id": 250950195,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630078730
    },
    {
        "content": "<p>I also have this in a branch I'm working on, so +1 from me!</p>",
        "id": 251037837,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630137001
    }
]