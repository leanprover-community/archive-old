[
    {
        "content": "<p>If I have a <code>[module R M]</code> and <code>A : submodule R M</code> and a splitting <code>(f : (M ⧸ A) →ₗ[R] M) (h : ∀ x, submodule.quotient.mk (f x) = x)</code>, we can get a linear equiv <code>A × (M ⧸ A) ≃ₗ[R] M</code>. </p>\n<ul>\n<li>\n<p>Do we have this (or anything similar) in Lean ?</p>\n</li>\n<li>\n<p>If not, should it be stated as I said above or with a more general short exact sequence (that is, two R-modules A and B with <code>\n(j : A →ₗ[R] M) (g : M →ₗ[R] B) (hj : function.injective j) (exac : j.range = g.ker) (f : B →ₗ[R] M) (h : g.comp f = linear_map.id)</code> ?</p>\n</li>\n<li>\n<p>And should we derive it from a more general category theory lemma or not ?</p>\n</li>\n</ul>",
        "id": 275830184,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1647621970
    },
    {
        "content": "<p>(actually, in my use case I'd rather have the second version with A and B)</p>",
        "id": 275830489,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1647622077
    },
    {
        "content": "<p>In LTE we have a bunch of API for split exact sequences. But you would need a bit of glue to use it for unbundled modules.</p>",
        "id": 275836061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647624293
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/a6e2d9568b65df034a44098ba389f06e988afc47/src/for_mathlib/split_exact.lean\">https://github.com/leanprover-community/lean-liquid/blob/a6e2d9568b65df034a44098ba389f06e988afc47/src/for_mathlib/split_exact.lean</a></p>",
        "id": 275836265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647624380
    },
    {
        "content": "<p>I feel like I've seen an equiv pretty similar to this, maybe for additive groups</p>",
        "id": 275836827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647624629
    },
    {
        "content": "<p>Yes it's one of those things which will work in a large number of abelian situations (and perhaps even some nonabelian ones)</p>",
        "id": 275841908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647626935
    },
    {
        "content": "<p>Sure; my point is that I think if we look for one of those variants we'll find it it mathlib</p>",
        "id": 275874576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647646021
    }
]