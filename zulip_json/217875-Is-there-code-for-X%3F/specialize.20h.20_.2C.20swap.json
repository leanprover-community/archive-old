[
    {
        "content": "<p>When doing topology or analysis from first principles, one often ends up with hypotheses of the form <code>e &gt; 0 -&gt; exists d, ...</code> or <code>(S ⊆ ⋃ (i : ι), V i) → (∃ (t : finset ι), S ⊆ ⋃ (i : ι) (H : i ∈ t), V i</code> or whatever. My users want to use <code>specialize</code> with these hypotheses, but sometimes write <code>have he : e &gt; 0, linarith, specialize h he</code>. In particular they have to copy-paste the hypothesis they want to prove. Is there a way of popping out the hypothesis onto the goal stack and making it land above the main goal? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">specialize</span> <span class=\"n\">hS</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">}),</span>\n</code></pre></div>\n<p>is another possibility, but this also looks a bit clunky. </p>\n<p>This is like <code>apply_fun</code> -- a tactic which experts probably won't ever need, but which might help beginners. I am in the middle of my course and I'm definitely not going to upgrade mathlib in the middle, because I don't have the time to remotely deal with 5 people who have forgotten how to make the command line appear on Windows and have no idea where their repo is located. If it's not there, then rotten luck, but I guess it would be nice to have it there by next year :-)</p>",
        "id": 225703117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612883262
    },
    {
        "content": "<p><code>specialize h _, swap,</code> as in the title of this thread seems to me like the most straightforward way at the moment. Maybe in Lean 4 we could have some kind of notation to annotate underscores with where they should go in the goal stack.</p>",
        "id": 225704313,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612883736
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span> <span class=\"n\">expr</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">A variant of `specialize` that puts the current goal last. That is, if we have a hypothesis</span>\n<span class=\"cm\">`h : ∀ x &gt; 0, f x`, then we can use `specialize h x _`, and then we would get two goals. The first</span>\n<span class=\"cm\">would be the current goal, the second one is the value at the underscore.</span>\n\n<span class=\"cm\">With `specialize'`, the goal for the value of any underscores comes first, then the goal.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">specialize'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"c1\">-- Get the number of goals before specialize (`n`)</span>\n  <span class=\"c1\">-- Before specialize, we have as goals [A, C₁, ..., Cₘ] (so `n = m + 1`)</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">list.length</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Run `specialize`</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Get the number of goals after specialize (`n'`)</span>\n  <span class=\"n\">n'</span> <span class=\"bp\">←</span> <span class=\"n\">list.length</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Now get the current goals, which are [A, B₁, ..., Bₖ, C₁, ..., Cₘ], where B₁,...,Bₖ are added</span>\n  <span class=\"c1\">-- by `specialize`. So `n' - n = k`. Let `g = A`, `gs = [B₁, ..., Bₖ, C₁, ..., Cₘ]`.</span>\n  <span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Then we want the goal to be `[B₁, ..., Bₖ, A, C₁, ..., Cₘ]`</span>\n  <span class=\"n\">set_goals</span> <span class=\"bp\">$</span> <span class=\"n\">gs.take</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">gs.drop</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>not sure if this is the best way, but I think it works.</p>",
        "id": 225716181,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1612888106
    },
    {
        "content": "<p>I think that this should be the default behaviour of <code>specialize</code>. Is it ever used with underscores in lean or mathlib? Hmm, my crappy regex skills seem to indicate that in mathlib there is only one instance where it's used with underscores and the number of goals increases (from 1 to 2) and then it's just a matter of switching the two <code>{}</code> proofs.</p>",
        "id": 225717462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612888586
    },
    {
        "content": "<p>I think putting new goals created by <code>specialize</code> first would be a good idea!</p>",
        "id": 225767488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612909751
    },
    {
        "content": "<p>Sorry to necromance an old thread, but this has become an issue again with the port to Lean 4.</p>\n<p>Lean 4's specialize has the \"old\" behaviour, i.e. additional goals come last. So, we can either:</p>\n<ol>\n<li>ask to change Lean 4 to the new behaviour</li>\n<li>provide a <code>specialize'</code> in mathlib4 with the new behaviour</li>\n<li>decide the old behaviour is okay after all.</li>\n</ol>\n<p>Before reading this thread, I went with 3., and proposed <a href=\"https://github.com/leanprover-community/lean/pull/777\">lean#777</a>. However Gabriel then pointed me back to this thread. :-)</p>",
        "id": 307631722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667429732
    },
    {
        "content": "<p>I guess my preference is 1., then 3., then 2.</p>",
        "id": 307631754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667429753
    },
    {
        "content": "<p>Goals with metavariables are discouraged, so my instinct is that one should get rid of the metavariables ASAP and hence I also like the idea of 1.</p>",
        "id": 307633481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667430839
    },
    {
        "content": "<p>I think it's nice to be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">some_tactic</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">annoying</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">side_goals</span> <span class=\"o\">},</span>\n<span class=\"n\">back_to_the_main_proof</span>\n</code></pre></div>\n<p>which is also in favor of 1</p>",
        "id": 307634034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667431213
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1796\">https://github.com/leanprover/lean4/pull/1796</a></p>",
        "id": 307647633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667442159
    }
]