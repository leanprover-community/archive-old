[
    {
        "content": "<p>Is there a way to rewrite a pattern once. Say I have <code>d : 0 = 0 + 0</code> if I <code>rw</code> that on goal <code>0 = 0</code> I end up with new goal <code>0 + 0 = 0 + 0</code>. Is there a way to apply it to only get <code>0 + 0 = 0</code>?</p>",
        "id": 311717700,
        "sender_full_name": "Ben",
        "timestamp": 1669154563
    },
    {
        "content": "<p>Even better a rewrite if I can choose what side of the equality to apply it to</p>",
        "id": 311717952,
        "sender_full_name": "Ben",
        "timestamp": 1669154658
    },
    {
        "content": "<p>Check out the following tactics: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv_lhs\">tactic#conv_lhs</a> , <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv_rhs\">tactic#conv_rhs</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite\">tactic#nth_rewrite</a> .  In short there are several ways to do it :-)</p>",
        "id": 311719914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669155563
    },
    {
        "content": "<p>Did I dream the first two tactics? I can't find them in the docs</p>",
        "id": 311720258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669155721
    },
    {
        "content": "<p>They are part of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv\">tactic#conv</a>. So it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.conv.conv_lhs\">docs#tactic.conv.conv_lhs</a>. Also worth mentioning <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite_lhs\">tactic#nth_rewrite_lhs</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite_rhs\">tactic#nth_rewrite_rhs</a>.</p>",
        "id": 311720643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669155883
    },
    {
        "content": "<p><code>rw</code> has some configuration options too. One is for specifying which occurrences should be rewritten.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]},</span>\n  <span class=\"c1\">-- ⊢ 0 + 0 = 0 ↔ sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I put the <code>iff sorry</code> in there to prevent <code>rw</code> from closing the <code>0 = 0</code> goal automatically with <code>refl</code>!)</p>",
        "id": 311784061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669195609
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/occurrences\">docs#occurrences</a> gives some explanation. The default is <code>occurrences.all</code></p>",
        "id": 311784123,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669195635
    },
    {
        "content": "<p>There is a pretty weird bug/feature in <code>occurrences</code>: if the rule you're rewriting by has variables, they will get \"stuck\" when traversing the expression, and so it will not find later rewrites with different values of the variables.</p>\n<p>Thus:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails. This is why <code>nth_rewrite</code> exists, essentially.</p>",
        "id": 311821458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669208801
    },
    {
        "content": "<p>I haven't got around to checking how this behaves in Lean 4, however.</p>",
        "id": 311821519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669208822
    },
    {
        "content": "<p>Wow that is cool, didn't know you could provide arguments to tactics like that! nth_rewrite is also perfect + more readable, but good to know it is possible outside of mathlib</p>",
        "id": 311822490,
        "sender_full_name": "Ben",
        "timestamp": 1669209116
    },
    {
        "content": "<p>Just to explain this bug/feature (based on my understanding), the <code>occurrences.pos</code>/<code>occurrences.neg</code> is configuring which positions are being rewritten with respect to the positions it would have rewritten without that configuration option. That <code>lemma foo</code> example fails because <code>rw [d]</code> would have only rewritten the <code>f 2</code> ==&gt; <code>2</code>.</p>",
        "id": 311822731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669209176
    },
    {
        "content": "<p>This is because <code>rw</code> works by (1) finding something it can rewrite to specialize all the variables in the rewrite lemma then (2) looks for all occurrences, then (3) rewrites all the occurrences (configured by <code>occs</code>) simultaneously using a single <code>eq.rec</code>.</p>",
        "id": 311822997,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669209259
    },
    {
        "content": "<p>Maybe I should have called it a feature/bug rather than a bug/feature. Kyle's description makes is sound much more reasonable, but this behaviour can be annoying when you're trying to do a \"weird\" rewrite.</p>",
        "id": 311823051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669209274
    },
    {
        "content": "<p>This is a good gotcha for <code>occs</code>. I have to admit I've never used it, only <code>nth_rewrite</code> or <code>conv</code> mode!</p>",
        "id": 311823204,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669209325
    },
    {
        "content": "<p>It seems like <code>rw</code> should have an extra configuration for how it finds the thing to rewrite in the first place...</p>",
        "id": 311823310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669209362
    }
]