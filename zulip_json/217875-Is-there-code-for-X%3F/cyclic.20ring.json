[
    {
        "content": "<p>How easy is it to define R[X] / (X^n - 1) for arbitrary rings R and naturals n?</p>",
        "id": 289347539,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657641952
    },
    {
        "content": "<p>Is R commutative?</p>",
        "id": 289348566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657642394
    },
    {
        "content": "<p>What do you want about it? Is this enough?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 289348853,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657642503
    },
    {
        "content": "<p>R is commutative. That looks fairly nice - what I want to do is treat fin n -&gt; R as if it was that (that is to say, transport the addition and multiplication over).</p>",
        "id": 289362113,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657648449
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cyclotomic_field\">docs#cyclotomic_field</a> for the field case has some fair api</p>",
        "id": 289362641,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657648699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/cyclic.20ring/near/289362113\">said</a>:</p>\n<blockquote>\n<p>R is commutative. That looks fairly nice - what I want to do is treat fin n -&gt; R as if it was that (that is to say, transport the addition and multiplication over).</p>\n</blockquote>\n<p>Hmm... just out of curiosity, can't we use a group ring, something like R[multiplicative (zmod n)]? Is there a code for group rings?</p>",
        "id": 289368767,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1657651572
    },
    {
        "content": "<p>Yes and yes! Probably they're called monoid algebras or something...</p>",
        "id": 289370763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657652511
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a></p>",
        "id": 289370994,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657652609
    },
    {
        "content": "<p>Hmm hmm!</p>",
        "id": 289397283,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657667340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/cyclic.20ring/near/289362113\">said</a>:</p>\n<blockquote>\n<p>R is commutative. That looks fairly nice - what I want to do is treat fin n -&gt; R as if it was that (that is to say, transport the addition and multiplication over).</p>\n</blockquote>\n<p>Do you really want to transport multiplication over? fin n -&gt; R has the product ring structure with componentwise multiplication, I think.</p>",
        "id": 289399472,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657669091
    },
    {
        "content": "<p><code>add_monoid_algebra R (zmod n)</code> sound like what you want based on the original message</p>",
        "id": 289400535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657670148
    },
    {
        "content": "<blockquote>\n<p><code>add_monoid_algebra R (zmod n)</code> sound like what you want based on the original message</p>\n</blockquote>\n<p>Seems great, and the underlying <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.to_fun\">docs#finsupp.to_fun</a> has type defeq to fin n -&gt; R.</p>",
        "id": 289400785,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657670391
    },
    {
        "content": "<p>Or if computability is a concern, <code>⊕ i : zmod n, R</code> (open_locale direct_sum)</p>",
        "id": 289417529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657690657
    },
    {
        "content": "<p>Actually what I said it's not correct. Only when it's <code>add_monoid_algebra R (zmod (n+1))</code>, the type is defeq to <code>fin (n+1) -&gt; R</code>.</p>",
        "id": 289417660,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657690848
    },
    {
        "content": "<blockquote>\n<p>Or if computability is a concern, ⊕ i : zmod n, R (open_locale direct_sum)</p>\n</blockquote>\n<p>That <code>⊕</code> needs to be bigger ... \\O+<br>\nbut this doesn't work out of the box:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.defs</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>We need a instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.gcomm_ring\">docs#direct_sum.gcomm_ring</a> for constant A for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.comm_ring\">docs#direct_sum.comm_ring</a> to apply. direct_sum uses dfinsupp, which is more computable finsupp; but I think the correct solution is to make finsupp more computable.</p>",
        "id": 289419352,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657692866
    },
    {
        "content": "<p>Oh, that instance is supposed to exist</p>",
        "id": 289419639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657693212
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/comm_semiring.direct_sum_gcomm_semiring\">docs#comm_semiring.direct_sum_gcomm_semiring</a> already exists, I guess I forgot to add the ring version</p>",
        "id": 289419650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657693225
    },
    {
        "content": "<p>(originally the ring version wasn't needed, but then <code>ring.int_cast</code> appeared and now it is)</p>",
        "id": 289419665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657693256
    },
    {
        "content": "<p>But I agree that a better fix might be to redefine <code>finsupp</code>; I know people keep saying \"polynomial being noncomputable is a feature\", but I don't see why that means <code>finsupp</code> needs to be noncomputable too</p>",
        "id": 289419780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657693384
    },
    {
        "content": "<p>So the reason I wanted it on fin n -&gt; R is that I also want the Hamming distance on this thing... but I may have other solutions to that.</p>",
        "id": 289430577,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657702403
    },
    {
        "content": "<p>You can cast <code>direct_sum</code> and <code>add_monoid_algebra</code> to a function</p>",
        "id": 289431335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657702900
    },
    {
        "content": "<p>Aye. Difference being that for Hamming weight the domain has to be finite, wheras that isn't a requirement for a finsupp.</p>",
        "id": 289432217,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657703490
    },
    {
        "content": "<p>What exactly is it about the finsupp construction that makes it non-constructive?</p>",
        "id": 289432247,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657703520
    },
    {
        "content": "<p>Sure, but <code>zmod n</code> is finite (n≠0) so that's not relevant here?</p>",
        "id": 289433212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657704014
    },
    {
        "content": "<p>The constructivity is lost in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.has_add\">docs#finsupp.has_add</a> which needs to know which coefficients are zero. Rather than requiring <code>decidable_eq</code> on the coefficients which would be annoying, it uses classical decidability</p>",
        "id": 289433403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657704133
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.has_add\">docs#dfinsupp.has_add</a> uses an approach which does not require knowing which coefficients are zero (by storing the set of elements that <em>might</em> not be zero instead of the ones that are non-zero)</p>",
        "id": 289433464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657704171
    },
    {
        "content": "<p>Oh, indeed, here it is not relevant.</p>",
        "id": 289433514,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657704206
    },
    {
        "content": "<p>God the finsupp file is massive. It feels like the first step for a refactor is just splitting it up...</p>",
        "id": 289439436,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657708062
    },
    {
        "content": "<p>I was about to ask why has_add needs decidable equality on the coefficients but of course it's because adding it might change the zero set...</p>",
        "id": 289439632,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657708214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> was also looking at trying such a refactor, it might be good to coordinate</p>",
        "id": 289443143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657710902
    },
    {
        "content": "<p>It's certainly not something I'd just start without consultation! But if a division of labour is possible I would be interested in helping.</p>",
        "id": 289464053,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657721185
    }
]