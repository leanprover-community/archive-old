[
    {
        "content": "<p>Do we have anything like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">zmod</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_cast_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">z.val</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">val_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_add_div</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat_cast_zmod_val</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">nat_cast_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">zmod</span>\n</code></pre></div>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.nat_coe_eq_nat_coe_iff\">docs#zmod.nat_coe_eq_nat_coe_iff</a> and zmod.nat_coe_eq_nat_coe_iff', but I can't see an obvious way to use those in this proof</p>",
        "id": 274697247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646837142
    },
    {
        "content": "<p>Don't know, but I'm pretty sure you don't need <code>[fact (0 &lt; p)]</code></p>",
        "id": 274697814,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646837377
    },
    {
        "content": "<p>The reverse direction is not true for <code>p = 0</code>, since <code>z.val = int.nat_abs z</code> in that case</p>",
        "id": 274697915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646837409
    },
    {
        "content": "<p>oh the reverse. Yeah that function is dumb</p>",
        "id": 274698014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646837449
    },
    {
        "content": "<p>Relatedly, is this lemma true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">val_int_cast</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I'm struggling to juggle all the casts going on here</p>",
        "id": 274706708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646840952
    },
    {
        "content": "<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.int_cast_mod\">docs#zmod.int_cast_mod</a> help?</p>",
        "id": 274707803,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646841413
    },
    {
        "content": "<p>I was going to say that I used similar lemmas when working on the galois group of cyclotomic extensions, but I ended up just using <code>modeq</code> as zmod was too much of a pain</p>",
        "id": 274707925,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646841464
    },
    {
        "content": "<p>Is there missing API for <code>zmod</code>?</p>",
        "id": 274709681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646842033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/zmod.2Enat_cast_eq_iff/near/274707803\">said</a>:</p>\n<blockquote>\n<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.int_cast_mod\">docs#zmod.int_cast_mod</a> help?</p>\n</blockquote>\n<p>I can't work out how to use it here</p>",
        "id": 274711562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646842778
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.algebra</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zmod.mod_eq_of_modeq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- I'm sure this can be golfed</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int.mod_eq_of_lt</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq.symm</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">val_int_cast</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zmod.mod_eq_of_modeq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">zmod.int_coe_eq_int_coe_iff'</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">int.coe_nat_nonneg</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">zmod.val_lt</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274714052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646843793
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12571\">#12571</a></p>",
        "id": 274870074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646934202
    }
]