[
    {
        "content": "<p>Does mathlib have isomorphisms of categories? </p>\n<p>Yes, I know \"equivalence\" is the correct thing, but sometimes categories are actually isomorphic. Do I have to use isomorphisms in the categories of categories?</p>",
        "id": 206759821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597271013
    },
    {
        "content": "<p>Are the isomorphisms in <code>Cat</code>, the category of categories, not satisfactory?</p>",
        "id": 206759988,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597271122
    },
    {
        "content": "<p>It's okay (again, if you don't care about universes). But there are other things that I'm not sure about. E.g. does mathlib know how to produce an equivalence of categories from an isomorphism in <code>Cat</code>?</p>",
        "id": 206760321,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597271389
    },
    {
        "content": "<p>Probably not. You could add it easily enough.</p>",
        "id": 206760933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597271850
    },
    {
        "content": "<p>However, something to think about:</p>\n<ol>\n<li>perhaps the equations between functors in an isomorphism of categories hold definitionally --- now there's a danger that much later down the line Lean will slow down because it's relying on definitional equality, and so a \"heavy refl\" could appear at any time</li>\n<li>alternatively, perhaps the equations only hold propositionally --- now there's the danger that after you convert your isomorphism to an equivalence, the unit and counit (which contain data, and might need things proved about them) will have definitions involving <code>eq.rec</code>, which is hard to reason about</li>\n</ol>",
        "id": 206761084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597271979
    },
    {
        "content": "<p>I'm not truly confident that this is the case, but my feeling is that going directly to constructing an equivalence insulates you from both of these unhappy possibilities.</p>",
        "id": 206761183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597272043
    },
    {
        "content": "<p>and that this is the reason why we don't already have something like this --- too often providing API that talks about equality of functors results in <code>eq.rec</code> terms appearing later, or heavy refl, so we tend to just avoid providing such API.</p>",
        "id": 206761243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597272094
    },
    {
        "content": "<p>I didn't consider the slowdown issues. Thanks! I think for now I'll just define the two functors (which obviously compose to identities!), and provide an equivalence.</p>",
        "id": 206762038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597272627
    },
    {
        "content": "<p>I have occasionally seen isomorphisms of large categories in the wild but I'm not sure they were ever useful, they were more of a quirky observation. Lenstra once asked me a question about being up an equivalence to an isomorphism and I found an obstruction in an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">H^3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> IIRC</p>",
        "id": 206786330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597302585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> : <a href=\"https://github.com/leanprover-community/mathlib/issues/3762\">#3762</a> <br>\nThe final equivalence is really an isomorphism:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">Monad_Mon_equiv</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"o\">(</span><span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">тед</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">functor</span> <span class=\"o\">:=</span> <span class=\"n\">Monad_to_Mon</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inverse</span> <span class=\"o\">:=</span> <span class=\"n\">Mon_to_Monad</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">unit_iso</span> <span class=\"o\">:=</span> <span class=\"n\">eq_to_iso</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">to_of_mon_end</span><span class=\"o\">),</span>\n  <span class=\"n\">counit_iso</span> <span class=\"o\">:=</span> <span class=\"n\">eq_to_iso</span> <span class=\"n\">of_to_mon_end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206822107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597329299
    },
    {
        "content": "<p>Okay, I ended up adding the construction of an equivalence of categories given an isomorphism in <code>Cat</code>:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/c4136fdd683abfb6272d55f11fc033ca1c7bc229/src/category_theory/category/Cat.lean#L54\">https://github.com/leanprover-community/mathlib/blob/c4136fdd683abfb6272d55f11fc033ca1c7bc229/src/category_theory/category/Cat.lean#L54</a><br>\nThe Monad &lt;-&gt; Monoid equivalence is now an actual isomorphism in <code>Cat</code>:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/c4136fdd683abfb6272d55f11fc033ca1c7bc229/src/category_theory/monad/equiv_mon.lean#L177\">https://github.com/leanprover-community/mathlib/blob/c4136fdd683abfb6272d55f11fc033ca1c7bc229/src/category_theory/monad/equiv_mon.lean#L177</a><br>\nI think this PR is ready for review.</p>",
        "id": 206833829,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597334284
    },
    {
        "content": "<p>Also, the most important question-- am I allowed to put <span aria-label=\"burrito\" class=\"emoji emoji-1f32f\" role=\"img\" title=\"burrito\">:burrito:</span> in the docstring?</p>",
        "id": 206836069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597335254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Isomorphisms.20of.20categories/near/206836069\">said</a>:</p>\n<blockquote>\n<p>Also, the most important question-- am I allowed to put <span aria-label=\"burrito\" class=\"emoji emoji-1f32f\" role=\"img\" title=\"burrito\">:burrito:</span> in the docstring?</p>\n</blockquote>\n<p>I definitely think you should tag it burrito in case people search for it.</p>",
        "id": 206839338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597336993
    },
    {
        "content": "<p>Tags: just</p>",
        "id": 206839626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597337163
    },
    {
        "content": "<p>(maybe reid's comment was entirely a joke, but anyway I'll point out that <code>just_ification</code> would be perfectly unambiguous, though also inscrutable to the uninformed.)</p>",
        "id": 206990327,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597444957
    },
    {
        "content": "<p>I'm still looking out for that \"nlab-just\" tactic...</p>",
        "id": 206990453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597445082
    }
]