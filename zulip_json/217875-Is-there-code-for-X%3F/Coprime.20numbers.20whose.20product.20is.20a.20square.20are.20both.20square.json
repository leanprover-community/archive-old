[
    {
        "content": "<p>lemma coprime_sq (a b c : ℤ) (h : a * b = c ^ 2) (hcoprime : is_coprime a b) :<br>\n  ∃ d e, a = d ^ 2 ∧ b = e ^ 2 := sorry</p>",
        "id": 209371510,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599563099
    },
    {
        "content": "<p>Probably not</p>",
        "id": 209372303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599563655
    },
    {
        "content": "<p>is_pow_of_coprime from <a href=\"https://github.com/leanprover-community/mathlib/issues/3984\">#3984</a>, apparently</p>",
        "id": 209373180,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599564373
    },
    {
        "content": "<p>Oh that reminds me, let me dig up my old FLT code</p>",
        "id": 209374131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599565075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255743\">@Paul van Wamelen</span></p>",
        "id": 209374234,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599565137
    },
    {
        "content": "<p>Well, I think it predates elan so I don't really know how to build it (apparently I used to build it with a version of  lean called \"3.3.1\"), but I put it up at <a href=\"https://github.com/rwbarton/lean-elementary-number-theory\">https://github.com/rwbarton/lean-elementary-number-theory</a></p>",
        "id": 209375032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599565700
    },
    {
        "content": "<p>in particular, the statement about multiplying to a square is at <a href=\"https://github.com/rwbarton/lean-elementary-number-theory/blob/master/src/ent/gcd.lean#L60-L61\">https://github.com/rwbarton/lean-elementary-number-theory/blob/master/src/ent/gcd.lean#L60-L61</a> -- it doesn't actually need prime factorization, you can get it from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prod_dvd_and_dvd_of_dvd_prod\">docs#nat.prod_dvd_and_dvd_of_dvd_prod</a>, though I made it look quite difficult</p>",
        "id": 209376393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599566560
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/4049\">#4049</a> has:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">is_pow_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"err\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">prime</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"n\">k</span>\n</code></pre></div>\n\n\n<p>for <code>α</code> a unique factorization domain. From there it isn't too hard to get to:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">sqr_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a0</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>(but this hasn't been PR'd yet). Let me know if you want the code...</p>",
        "id": 209409178,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1599581601
    }
]