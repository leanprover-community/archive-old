[
    {
        "content": "<p>How do I prove that cast of cast equals cast, coming out of <code>zmod</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">):</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 246051985,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626325106
    },
    {
        "content": "<p>That cast should really die.</p>",
        "id": 246053600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626327080
    },
    {
        "content": "<p>There should be a lemma saying that <code>((i:int):R) = (i:R)</code> for char 0 rings <code>R</code>.</p>",
        "id": 246053691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626327194
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">):</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zmod.int_cast_comp_cast</span><span class=\"o\">],</span>\n    <span class=\"n\">to_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zmod.int_cast_comp_cast</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246054040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626327643
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 246054074,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626327694
    },
    {
        "content": "<p>Are we just missing some norm_cast attributes?</p>",
        "id": 246065306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626337615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'm not a norm_cast expert, but <code>zmod.int_cast_comp_cast</code> will loop if you apply it in the <code>\\l</code> direction.</p>",
        "id": 246065710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626337837
    },
    {
        "content": "<p>(That's why I have the complicated <code>conv { rw, to_rhs, rw }</code> construction.</p>",
        "id": 246065743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626337855
    },
    {
        "content": "<p>This thread is making my stomach hurt. Why do we even have casts from Z/mZ to R or C? Why would I expect the example to be true? It's not mathematically meaningful. There are monoid homs from Z/mZ to C taking values in 0 union roots of unity which I could imagine in a parallel universe were used as casts, and then the example would be false.</p>",
        "id": 246066001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626338000
    },
    {
        "content": "<p>Attempting a doc link: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.cast\">docs#zmod.cast</a></p>",
        "id": 246066245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626338150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Different.20casts.20from.20zmod/near/246053600\">said</a>:</p>\n<blockquote>\n<p>That cast should really die.</p>\n</blockquote>\n<p>I stand by my point.</p>",
        "id": 246066336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626338191
    },
    {
        "content": "<p><del>That cast is piggy-backing on a similar cast that <code>fin n</code> has</del> (edit: fin.val is not zmod.val)</p>",
        "id": 246066414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626338246
    },
    {
        "content": "<p>But maybe that one isn't so bad because at least fin is morally positive in some sense, at least when you ignore addition</p>",
        "id": 246066523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626338309
    },
    {
        "content": "<p>We can protect ourselves by assuming <code>char_p R n</code> for the cast. Then it will only show up in sensible places.</p>",
        "id": 246066740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626338452
    },
    {
        "content": "<p>That's probably safe, although the cast is also valid when n=0</p>",
        "id": 246068082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626339380
    },
    {
        "content": "<p>Yes, there is a meaningful cast <code>zmod n -&gt; R</code> when <code>char_p R m</code> and <code>m | n</code>.</p>",
        "id": 246069071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626339972
    },
    {
        "content": "<p>But I wouldn't mind having no cast at all, and just using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.cast_hom\">docs#zmod.cast_hom</a> instead.</p>",
        "id": 246069135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626340018
    }
]