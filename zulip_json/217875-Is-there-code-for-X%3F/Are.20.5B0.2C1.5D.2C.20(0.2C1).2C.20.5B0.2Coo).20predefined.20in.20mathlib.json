[
    {
        "content": "<p>I looked in <code>mathlib</code> and I didn't see these as predefined constants, are they there?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">O01</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">set.Ioo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"c1\">-- (0,1)</span>\n<span class=\"kd\">def</span> <span class=\"n\">C01</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [0,1]</span>\n<span class=\"kd\">def</span> <span class=\"n\">C0oo</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ereal</span> <span class=\"o\">:=</span> <span class=\"n\">set.Ico</span> <span class=\"mi\">0</span> <span class=\"bp\">⊤</span> <span class=\"c1\">-- [0,∞)</span>\n</code></pre></div>\n<p>Prior to coming to Lean I have read about Borel sigma algebras such as <a href=\"https://math.stackexchange.com/questions/1228534/borel-sigma-algebra-over-0-1\">B(0,1)</a>.  It should be relatively straightforward to construct: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n<span class=\"k\">#check</span> <span class=\"n\">measurable_space</span> <span class=\"n\">O01</span>\n<span class=\"k\">#check</span> <span class=\"n\">measurable_space</span> <span class=\"n\">C01</span>\n<span class=\"k\">#check</span> <span class=\"n\">measurable_space</span> <span class=\"n\">C0oo</span>\n\n<span class=\"n\">This</span> <span class=\"n\">would</span> <span class=\"n\">give</span> <span class=\"n\">B</span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">B</span><span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"n\">and</span> <span class=\"n\">B</span><span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">∞</span><span class=\"o\">))</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 218908443,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607128704
    },
    {
        "content": "<p>Predefined constants considered harmful. They're not in mathlib.</p>",
        "id": 218908564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607128822
    },
    {
        "content": "<p>The last one you might prefer to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Ici\">docs#set.Ici</a></p>",
        "id": 218908593,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607128879
    },
    {
        "content": "<p>They have already been constructed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set.Ioo</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set.Ici</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>The canonical instance of measurable_space on topological spaces is the borel sigma algebra</p>",
        "id": 218923540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607153408
    },
    {
        "content": "<p>wait... then how can I have the Lebesgue measure on R?</p>",
        "id": 218923550,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607153463
    },
    {
        "content": "<p>Early on I considered using the lebesgue measure as the default, but the argument went that borel has better closure properties and is true generically. If you want lebesgue measurable you can use <code>is_null_measurable</code> which means \"is in the completion of the canonical measure\"</p>",
        "id": 218923859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607154039
    },
    {
        "content": "<p>we might also add a type alias for it, but the uses haven't really required it so far</p>",
        "id": 218923868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607154072
    },
    {
        "content": "<p>Actually it looks like my facts are out of date. There is not a generic instance <code>[topological_space X] : measurable_space X := borel</code>, instead there is a class <code>borel_space</code> that asserts that the measurable space structure coincides with the borel sigma algebra induced by the topology</p>",
        "id": 218924101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607154530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Are.20.5B0.2C1.5D.2C.20(0.2C1).2C.20.5B0.2Coo\">said</a>.20predefined.20in.20mathlib/near/218923540):</p>\n<blockquote>\n<p>The canonical instance of measurable_space on topological spaces is the borel sigma algebra</p>\n</blockquote>\n<p>There is no instance <code>[topological_space α] : measurable_space α</code>.</p>",
        "id": 218999238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607281319
    },
    {
        "content": "<p>However we have the borel sigma algebra registered as an instance on reals.</p>",
        "id": 218999286,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607281354
    },
    {
        "content": "<p>And the canonical instance of <code>measurable_space</code> on a subtype is the restriction. We have an instance saying that this equals the borel sigma-algebra of the subtype.</p>",
        "id": 218999319,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607281399
    },
    {
        "content": "<p>Sorry, I've started answering before reading the last paragraph of your reply.</p>",
        "id": 218999351,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607281442
    }
]