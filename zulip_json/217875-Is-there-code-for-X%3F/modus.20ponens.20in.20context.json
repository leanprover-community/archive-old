[
    {
        "content": "<p>If I have <code>P -&gt; Q</code> and <code>P</code> in the context, is there a tactic that will add <code>Q</code> to the context?</p>",
        "id": 256842774,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1633758138
    },
    {
        "content": "<p>I think <code>apply_fun f at x</code> do it, if <code>f : P -&gt; Q</code> and <code>x : P</code>.</p>",
        "id": 256842874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633758245
    },
    {
        "content": "<p>But <code>have := f x</code> or <code>let y := f x</code> also work.</p>",
        "id": 256842903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633758292
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 256842935,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1633758330
    },
    {
        "content": "<p><code>apply_fun</code> doesn't seem to work, but <code>let</code> does,</p>",
        "id": 256843490,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1633758944
    },
    {
        "content": "<p>You might need to <code>import tactic.basic</code> for <code>apply_fun</code>.</p>",
        "id": 256843891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633759331
    },
    {
        "content": "<p>I still get, <code>failed to apply f at x</code>.</p>",
        "id": 256843988,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1633759443
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 256848156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633763892
    },
    {
        "content": "<p>Isn't apply_fun for equalities not implications?</p>",
        "id": 256853416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633769284
    },
    {
        "content": "<p>Yup, as far as I know all it does is using <code>congr_arg</code>.</p>",
        "id": 256853747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633769685
    },
    {
        "content": "<p><code>apply_fun X at Y</code> definitely does more than <code>congr_arg</code>!</p>",
        "id": 256853866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633769821
    },
    {
        "content": "<p>But yes, it doesn't do this.</p>",
        "id": 256853873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633769833
    },
    {
        "content": "<p>I should really know better <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 256853948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633769889
    },
    {
        "content": "<p>Sorry for the <code>apply_fun</code> suggestion. I should have know that it doesn't work here.</p>",
        "id": 256854132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633770063
    },
    {
        "content": "<p>It's so tempting though. We use <code>apply</code> many ways in informal maths.</p>",
        "id": 256854268,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633770211
    },
    {
        "content": "<p>I think it's reasonable to have <code>apply_fun</code>'s semantics be \"please do something sensible with this function (at this location)\". So we should support it. :-)</p>",
        "id": 256854292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633770239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span>, often useful in similar situations is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#specialize\">tactic#specialize</a>.</p>",
        "id": 256854369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633770294
    },
    {
        "content": "<p>I don't think this is such a case though; <code>apply_fun f</code> means \"put f on the right of the colon somewhere\". In the case we're talking about, it would mean \"use this to construct the term\"</p>",
        "id": 256854476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633770404
    },
    {
        "content": "<p><code>specialize</code> is indeed what you want.</p>",
        "id": 256854524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633770474
    },
    {
        "content": "<p>I think Coq might have an <code>apply in</code> tactic?</p>",
        "id": 256875607,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1633791242
    },
    {
        "content": "<p>iirc Coq has <code>apply at</code>for this, in Lean you can also do <code>replace x := f x</code> to mimic this behaviour, but I generally prefer Johan's original suggestion of <code>have := f x</code> in case I want <code>x : P</code> later</p>",
        "id": 256877386,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1633792932
    },
    {
        "content": "<p>I think <code>apply at</code> would make sense for lean to support</p>",
        "id": 256886236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633801429
    },
    {
        "content": "<p>No idea if this code still works but there looks to be an implementation here: <a href=\"https://github.com/jldodds/coq-lean-cheatsheet/blob/master/coq-tactic-substitutes.lean\">https://github.com/jldodds/coq-lean-cheatsheet/blob/master/coq-tactic-substitutes.lean</a>, edit: or is apply in different to apply at?</p>",
        "id": 256886421,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633801567
    }
]