[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> has marked this topic as resolved.</p>",
        "id": 291846341,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659532081
    },
    {
        "content": "<p><a href=\"https://xkcd.com/979/\">https://xkcd.com/979/</a></p>",
        "id": 291851038,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659534105
    },
    {
        "content": "<p>That's also an outline of the proof for <code>x : int</code> except that the proof of <code>h2</code> is easier because you don't have to deal with the special case x=0.</p>",
        "id": 291853316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659535048
    },
    {
        "content": "<p>The result is a consequence of the fact that (zmod (p^α))ˣ is cyclic, which seems absent in mathlib.<br>\n<a href=\"https://en.wikipedia.org/wiki/Multiplicative_group_of_integers_modulo_n#Structure\">https://en.wikipedia.org/wiki/Multiplicative_group_of_integers_modulo_n#Structure</a></p>",
        "id": 291855334,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659535954
    },
    {
        "content": "<p>Hang on, I'll knock off a proof of what Stuart wants, this is all a bit embarrassing.</p>",
        "id": 291857757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659536992
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp_odd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contra'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">dvd_sub</span> <span class=\"n\">hp</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- I now know p ∣ 2 and p is odd and prime but I don't know a slick way to finish</span>\n    <span class=\"c1\">-- the next four lines are a rather rubbish effort</span>\n    <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hp_odd</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.not_prime_one</span> <span class=\"n\">pp</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.prime_iff_prime_int</span> <span class=\"n\">at</span> <span class=\"n\">pp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h_plus</span> <span class=\"n\">h_minus</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prime.pow_dvd_of_dvd_mul_left</span> <span class=\"n\">pp</span> <span class=\"n\">_</span> <span class=\"n\">h_plus</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prime.pow_dvd_of_dvd_mul_right</span> <span class=\"n\">pp</span> <span class=\"n\">_</span> <span class=\"n\">h_minus</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"c1\">-- I changed your `x` to `xbar` as it's mod p^α</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hα0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp_odd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">xbar</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">xbar</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">xbar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">xbar</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">xbar</span><span class=\"o\">,</span> <span class=\"c1\">-- lift xbar to the integers</span>\n  <span class=\"c1\">-- x mod p^α is xbar</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">xbar</span> <span class=\"o\">:=</span> <span class=\"n\">xbar.int_cast_zmod_cast</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- what we need to apply the previous lemma</span>\n  <span class=\"k\">have</span> <span class=\"n\">root'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int.modeq_zero_iff_dvd</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now it's a congruence mod (↑p)^α</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now it's a congruence mod ↑(p^α)</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_eq_int_coe_iff</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now it's an equality in `zmod` (in practice I'd do all three rewrites on one line)</span>\n    <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now it only involves ↑x, so it follows from what we have</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">foo</span> <span class=\"n\">pp</span> <span class=\"n\">hp_odd</span> <span class=\"n\">root'</span> <span class=\"k\">with</span> <span class=\"n\">hleft</span> <span class=\"n\">hright</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now go through the entire dance again :-/</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.modeq_zero_iff_dvd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_eq_int_coe_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hleft</span><span class=\"o\">,</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">hleft</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hx</span> <span class=\"n\">at</span> <span class=\"n\">hleft</span><span class=\"o\">,</span>\n    <span class=\"n\">linear_combination</span> <span class=\"n\">hleft</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.modeq_zero_iff_dvd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_eq_int_coe_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hright</span><span class=\"o\">,</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">hright</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hx</span> <span class=\"n\">at</span> <span class=\"n\">hright</span><span class=\"o\">,</span>\n    <span class=\"n\">linear_combination</span> <span class=\"n\">hright</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I agree that this is all much harder than it should be.</p>",
        "id": 291859920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659537868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span></p>",
        "id": 291860038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659537933
    }
]