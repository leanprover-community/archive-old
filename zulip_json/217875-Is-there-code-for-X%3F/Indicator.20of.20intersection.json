[
    {
        "content": "<p>Do we have these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.indicator_inter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indicator</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s.indicator</span> <span class=\"o\">(</span><span class=\"n\">t.indicator</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.indicator</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ite_and</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.indicator_inter_one</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indicator</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.indicator</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">t.indicator</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.indicator_inter</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.indicator</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">boole_mul</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278405039,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649503826
    },
    {
        "content": "<p>(The second one is not at the right level of generality, but the first one feels natural enough.)</p>",
        "id": 278405063,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649503880
    },
    {
        "content": "<p>Does the first exist as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator_indicator\">docs#set.indicator_indicator</a>? (Edit: yes)</p>",
        "id": 278405654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649504451
    },
    {
        "content": "<p>Is the second one generally <code>s.indicator f * t.indicator g = (s ∩ t).indicator (f * g)</code> in any monoid_with_zero?</p>",
        "id": 278405796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649504647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Indicator.20of.20intersection/near/278405654\">said</a>:</p>\n<blockquote>\n<p>Does the first exist as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator_indicator\">docs#set.indicator_indicator</a>? (Edit: yes)</p>\n</blockquote>\n<p>Ah thanks! I was looking for <code>indicator_inter</code> or variations around that, but did not think about the other way.</p>",
        "id": 278406579,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649505683
    },
    {
        "content": "<p>The more general version that you mention for the second one is certainly worth having, but the specialization with <code>1</code> is also useful in itself (typically for probability).</p>",
        "id": 278406674,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649505796
    }
]