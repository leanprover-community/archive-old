[
    {
        "content": "<p>Hey! It seems <code>nnreal</code> is not an instance of <code>floor_semiring</code>, thus making <code>nat.ceil</code> impossible. Is that right?</p>",
        "id": 274353230,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646633180
    },
    {
        "content": "<p>I don't remember the axioms of a <code>floor_semiring</code>. Are you saying this is missing from mathlib? Or that there is a maths problem?</p>",
        "id": 274353854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646633887
    },
    {
        "content": "<p>That it _might_ be missing from mathlib. I'm not 100% sure it's satisfied by <code>nnreal</code> but as far as I can see, it is.</p>",
        "id": 274355266,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646635567
    },
    {
        "content": "<p>PR welcome!</p>",
        "id": 274357688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646638233
    },
    {
        "content": "<p>I tried to spin something up, but I'm getting <em>lost in coercion</em>s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">floor_semiring</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">floor</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat.floor</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">ceil</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat.ceil</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">floor_of_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">zlea</span><span class=\"o\">⟩</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"n\">gc_floor</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nat.le_floor_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a.val</span> <span class=\"n\">n</span> <span class=\"n\">a.prop</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">aok</span> <span class=\"o\">:</span> <span class=\"bp\">⌊</span><span class=\"n\">a.val</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">=</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">leok</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nnreal.coe_le_coe</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">leok'</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"c1\">--  by rw [←coe_coe] at leok,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">leok'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">gc_ceil</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">nat.ceil_le</span><span class=\"o\">}}</span> <span class=\"c\">/-</span><span class=\"cm\">floor_semiring.gc_ceil (a:ℝ) n,-/</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274363121,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646643117
    },
    {
        "content": "<p>Can <code>norm_cast</code> help with the coercions?</p>",
        "id": 274363871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646643616
    },
    {
        "content": "<p>thanks! let me see</p>",
        "id": 274371670,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646648234
    },
    {
        "content": "<p>This looks like a more general version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">floor_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">floor_semiring</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">floor</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">floor_semiring.floor</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"n\">ceil</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">floor_semiring.ceil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"n\">floor_of_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">floor_semiring.floor_of_neg</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">gc_floor</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">floor_semiring.gc_floor</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">ha</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>  <span class=\"c1\">-- `rw [←subtype.coe_le_coe, nonneg.coe_nat_cast]`, with the below</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">gc_ceil</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">floor_semiring.gc_ceil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>  <span class=\"c1\">-- `rw [←subtype.coe_le_coe, nonneg.coe_nat_cast]`, with the below</span>\n  <span class=\"kd\">end</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274378898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646652764
    },
    {
        "content": "<p>We seem to be missing some coercion lemmas</p>",
        "id": 274379001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646652840
    },
    {
        "content": "<p>Like this one(edit: <a href=\"https://github.com/leanprover-community/mathlib/pull/12490\">#12490</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">nonneg.coe_nat_cast</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">map_nat_cast</span> <span class=\"o\">(</span><span class=\"n\">nonneg.coe_ring_hom</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→+*</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 274379249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646652998
    },
    {
        "content": "<p>Another approach is proving the semiring analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/archimedean.floor_ring\">docs#archimedean.floor_ring</a></p>",
        "id": 274379577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646653208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span> the reason <code>exact nat.ceil_le</code> won't work is that it needs a <code>floor_semiring</code>. You can coerce to reals and then it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">gc_ceil</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.ceil_le</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\">floor_semiring.gc_ceil (a:ℝ) n,-/</span>\n</code></pre></div>",
        "id": 274380748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646653966
    },
    {
        "content": "<p>And re your original proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">leok</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nnreal.coe_le_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">leok</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">leok</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 274381427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646654407
    },
    {
        "content": "<p>This typechecks, but I assume <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s code(!) is what one should use. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">floor_semiring</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">floor</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat.floor</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">ceil</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat.ceil</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">floor_of_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">zlea</span><span class=\"o\">⟩</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nnreal.coe_lt_coe.mpr</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">zlea</span><span class=\"o\">,</span><span class=\"n\">this</span><span class=\"o\">],},</span>\n  <span class=\"n\">gc_floor</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nnreal.coe_le_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_mod_cast</span>  <span class=\"bp\">@</span><span class=\"n\">nat.le_floor_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">a.prop</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">gc_ceil</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span><span class=\"o\">,</span><span class=\"n\">exact_mod_cast</span> <span class=\"bp\">@</span><span class=\"n\">nat.ceil_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">}}</span>\n</code></pre></div>",
        "id": 274385049,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646656781
    },
    {
        "content": "<p>As I say, I think you should deduce it from <code>archimedean</code></p>",
        "id": 274386500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646657583
    },
    {
        "content": "<p>That would have worse defeqs, wouldn't it?</p>",
        "id": 274386750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646657714
    },
    {
        "content": "<p>Probably. Is there some <code>copy</code> trick you can do?</p>",
        "id": 274386790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646657741
    },
    {
        "content": "<p>What statement are you proposing, Kevin?</p>",
        "id": 274386912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646657795
    },
    {
        "content": "<p>This I assume?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">archimedean.floor_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">archimedean</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">floor_semiring</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 274386996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646657838
    },
    {
        "content": "<p>That would probably be nice to have, and a nice PR to make; but I think the <code>nonneg.floor_semiring</code> instance above is the one we ultimately want to put on <code>nnreal</code>.</p>",
        "id": 274387055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646657876
    },
    {
        "content": "<p>Would such a def/instance be doable without auxiliary lemmas? As far as I can see, you'd have to replicate many of the ones needed for <code>floor_ring</code> to deal with <code>nat</code> instead of <code>int</code>.</p>",
        "id": 274388953,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646658765
    },
    {
        "content": "<p>Presumably those auxiliary lemmas either already exist, or ought to</p>",
        "id": 274391567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646660091
    },
    {
        "content": "<p>I wrote <code>floor_semiring</code> specifically for <code>ℝ≥0</code> but indeed it looks like I forgot to actually add the instance!</p>",
        "id": 274394333,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646661414
    },
    {
        "content": "<p>I guess we'll want it for <code>nnrat</code> too eventually</p>",
        "id": 274395533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646661916
    },
    {
        "content": "<p>Yup. Working on it!</p>",
        "id": 274395734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646662005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60nat.2Eceil.60.20on.20.60nnreal.60.20.3F/near/274394333\">said</a>:</p>\n<blockquote>\n<p>I wrote <code>floor_semiring</code> specifically for <code>ℝ≥0</code> but indeed it looks like I forgot to actually add the instance!</p>\n</blockquote>\n<p>Added in <a href=\"https://github.com/leanprover-community/mathlib/pull/12495\">#12495</a></p>",
        "id": 274414302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646669716
    }
]