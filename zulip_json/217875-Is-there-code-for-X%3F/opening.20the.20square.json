[
    {
        "content": "<p>Any idea why this isn't working?... Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">open_square</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pow</span> <span class=\"n\">β</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_two</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293722386,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660657959
    },
    {
        "content": "<p>Not solving your problem, but I'll let you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_mul_sum\">docs#finset.sum_mul_sum</a></p>",
        "id": 293722686,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660658058
    },
    {
        "content": "<p>What are your imports?</p>",
        "id": 293722885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660658139
    },
    {
        "content": "<p>The issue is probably the rewrite under a binder... try <code>simp_rw</code> instead of <code>rw</code></p>",
        "id": 293723086,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660658202
    },
    {
        "content": "<p>Oh maybe not</p>",
        "id": 293723333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660658284
    },
    {
        "content": "<p>Sorry, added imports</p>",
        "id": 293723387,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660658306
    },
    {
        "content": "<p>oh! why do you give <code>has_pow b nat</code>?</p>",
        "id": 293724250,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660658606
    },
    {
        "content": "<p>there's two instances of has_pow on b, one from  that and one from the monoid</p>",
        "id": 293724287,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660658618
    },
    {
        "content": "<p>I thought it wanted that..?</p>",
        "id": 293724330,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660658627
    },
    {
        "content": "<p>Ah, maybe that's my problem...?</p>",
        "id": 293724356,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660658637
    },
    {
        "content": "<p>Yep, that did it. Thanks!</p>",
        "id": 293724428,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660658654
    },
    {
        "content": "<p>(the has_mul instance will also cause you issues - most structures like rings and stuff are bundled, meaning you don't require a pre-existing <code>has_mul/has_add</code> etc instance)</p>",
        "id": 293724594,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660658721
    },
    {
        "content": "<p>I see, thanks; I was adding them in the order that Lean seemed to want them, not knowing which to remove after adding the next...</p>",
        "id": 293724781,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660658782
    },
    {
        "content": "<p>Probably!</p>",
        "id": 293762913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660669871
    }
]