[
    {
        "content": "<p>Do we have this subgroup? If no, then how should I call it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>  <span class=\"n\">name_me</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n <span class=\"bp\">..</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 301290584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664386905
    },
    {
        "content": "<p>Should it be <code>f : X -&gt; X</code>? Otherwise I'm not sure how to make sense of <code>e (f x) = e x</code></p>",
        "id": 301291307,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664387093
    },
    {
        "content": "<p>Fixed: should be <code>f (e x) = f x</code></p>",
        "id": 301294749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664388082
    },
    {
        "content": "<p>Do we have a way to specify the <code>equiv.perm X</code> and <code>equiv.perm Y</code> actions on <code>X -&gt; Y</code>? Then <code>name_me</code> would be the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.stabilizer\">docs#mul_action.stabilizer</a> of the action of <code>equiv.perm X</code> on <code>X -&gt; Y</code>. (There should be an op in there for this action.)</p>",
        "id": 301295933,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664388395
    },
    {
        "content": "<p>You could also abstract this by having a group acting on both <code>X</code> and <code>Y</code> and looking at equivariants for the action.  The case that Yury mentions is the one where the action on <code>Y</code> is trivial (and the group is <code>equiv.perm X</code>).<br>\nEDIT: I think that I confused the quantification over <code>X</code>  and over <code>f</code>! <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <br>\nSorry for the noise.</p>",
        "id": 301296824,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664388669
    },
    {
        "content": "<p>Category theory has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.End.mul_action_left\">docs#category_theory.End.mul_action_left</a> for nearly the relevant action (but it's the action of <code>X -&gt; X</code> rather than <code>equiv.perm X</code>).</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.mul_action\">docs#pi.mul_action</a> gives the action of <code>equiv.perm Y</code> on <code>X -&gt; Y</code>, but I haven't been able to find the action of <code>equiv.perm X</code> on <code>X -&gt; Y</code>.</p>",
        "id": 301300709,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664389877
    },
    {
        "content": "<p>Looks like the <code>f</code> locus of the stabilizer of the action of <code>perm X</code> on <code>X</code> to me.</p>",
        "id": 301330498,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664400128
    },
    {
        "content": "<p>We don't have any such right actions by functions</p>",
        "id": 301511489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664478057
    },
    {
        "content": "<p>What would the action of <code>f : (perm A)ᵐᵒᵖ</code> on <code>g : A → (perm A)ᵐᵒᵖ</code> be?</p>\n<ul>\n<li>\n<p>The left action via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.mul_action\">docs#pi.mul_action</a> gives <br>\n<code>λ x, op (λ y, (g x).unoo (f.unop y))</code></p>\n</li>\n<li>\n<p>The right action that you want above would gives  <br>\n<code>λ x, op (λ y, (g (f.unop x)).unop y)</code></p>\n</li>\n</ul>\n<p>This is a diamond :(</p>",
        "id": 301513248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664478664
    },
    {
        "content": "<p>Anyway, this would define a subgroup in the opposite group. While I can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.opposite\">docs#subgroup.opposite</a> to bring it back to the group of permutations, this is a rather long line and gives poor definitional equalities.</p>",
        "id": 301722866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664567260
    },
    {
        "content": "<p>So, I would prefer to add my definition under some name to the library. How would you call it?</p>",
        "id": 301722979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664567297
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.opposite\">docs#subgroup.opposite</a> is definitionally the identity as far as <code>carrier</code> is concerned, and I don't think your definition will be non-defeq to it...</p>",
        "id": 301754334,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664584256
    },
    {
        "content": "<p>It probably will be non-defeq because of the <code>irreducible</code> attribute on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite\">docs#mul_opposite</a>. Personally I think we should remove that attribute, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_opposite\">docs#add_opposite</a> doesn't have the attribute.</p>",
        "id": 301786570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664613749
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16760\">#16760</a></p>",
        "id": 301956687,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664730683
    }
]