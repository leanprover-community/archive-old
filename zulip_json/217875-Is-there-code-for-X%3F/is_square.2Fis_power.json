[
    {
        "content": "<p>Dear All,</p>\n<p>is there a predicate <code>is_square</code> in mathlib, similar to what is below?  I would be interested in talking about squares, sums of squares and preorders (in rings), building up to Hilbert's 17th problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_square</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 230475131,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615882840
    },
    {
        "content": "<p>No, we usually just write out the existential or use <code>s * s</code> in theorems</p>",
        "id": 230475349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615882957
    },
    {
        "content": "<p>Ok, thanks!  I want to prove stuff like: if <code>R</code> is a <code>comm_monoid</code>, then the set of squares is a <code>(sub)comm_monoid</code>, if you take the sums of squares of a <code>comm_semiring</code>, you obtain a <code>(sub)comm_semiring</code> and then build on top of that.</p>",
        "id": 230476084,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615883420
    },
    {
        "content": "<p>This might actually follow from some notion of ideals, since this is essentially saying that <code>{n | 2 •ℤ n}</code> is a submonoid</p>",
        "id": 230476284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615883523
    },
    {
        "content": "<p>Ah, so the refactor of <code>ideal</code> to work with <code>comm_semiring</code> instead of <code>comm_ring</code> might prove useful!  <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 230476472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615883651
    },
    {
        "content": "<p>Here I think it needs to be monoids though</p>",
        "id": 230476519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615883675
    },
    {
        "content": "<p>because there is no multiplicative version of semirings</p>",
        "id": 230476543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615883694
    },
    {
        "content": "<p>Yeah, this is for a single multiplicative operation, unfortunately...</p>",
        "id": 230476557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615883704
    },
    {
        "content": "<p>I think this is also called divisibility (as in divisible group)?</p>",
        "id": 230476631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615883742
    },
    {
        "content": "<p>Yes, it is being <code>2</code>-divisible, although I may interpret what I said, literally, as being \"arbitrarily divisible by 2\", depending on context.</p>",
        "id": 230476749,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615883797
    },
    {
        "content": "<p>I view the notion of \"divisibility\" more as a \"typeclass\" than a notion that I apply to individual elements, but this might be just me.</p>",
        "id": 230476815,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615883844
    },
    {
        "content": "<p>This should probably be some predicate on <code>comm_monoid_with_zero</code> (or even being an n'th power). The big theorem is that in a unique factorization monoid, if the product of two coprime elements is associated to an n'th power then so are both the elements.</p>",
        "id": 230477080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615884006
    },
    {
        "content": "<p>E.g. I would find it weird to say that 2 is 2-divisible in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q} [\\sqrt{2}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, but I would not object to the multiplicative group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathbb{Q}}^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2167910000000002em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8888900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span><span style=\"top:-3.80889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16667em;\"><span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050121em;\"><span style=\"top:-3.34179em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> being (2-)divisible.</p>",
        "id": 230477103,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615884020
    },
    {
        "content": "<p>I would have said that the big theorem was that a rational function over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> is a sum of squares if and only if its meaningful evaluations are non-negative!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p>I am very optimistic...</p>",
        "id": 230477193,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615884094
    },
    {
        "content": "<p>Actually, I have been playing with this and I started in the initial set up simply on <code>has_mul R</code>, building up to <code>semigroup</code>, <code>monoid</code>, <code>comm_monoid</code>, <code>monoid_with_zero</code>, and so on.</p>",
        "id": 230477394,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615884212
    },
    {
        "content": "<p>I have a really nice exposition of this stuff from some lectures of Pfister which I went to in the 90s, but unfortunately the notes are in my office. They would be perfect to formalise.</p>",
        "id": 230477404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615884218
    },
    {
        "content": "<p>I am using a book by Pfister for my class on this and it is indeed perfect for formalization!</p>",
        "id": 230477481,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615884247
    },
    {
        "content": "<p>The only issue is that, in these notes, Pfister do not give a proof of the Artin-Lang homomorphism theorem.  But assuming that, everything seems already written with the idea of formalizing it!</p>",
        "id": 230477521,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615884280
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6705\">#6705</a>, in case anyone wants to comment, before I generalize this to higher powers!</p>",
        "id": 230501831,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615896953
    },
    {
        "content": "<p>In the PR, Eric suggested using</p>\n<p><code>add_submonoid.closure { r : R | is_square R r }</code><br>\ninstead of<br>\n<code>submodule.span ℕ { r : R | is_square R r }</code><br>\nfor the set of all sums of squares.  I now have working proofs for either one of the two, producing a <code>comm_semiring</code> instance on them.</p>\n<p>Is there a reason to prefer one to the other?</p>",
        "id": 230517619,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615903709
    },
    {
        "content": "<p>The former is simpler, as scalar multiplication by N is probably just a distraction for you</p>",
        "id": 230519735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615904454
    },
    {
        "content": "<p>We probably ought to have <code>add_submonoid.to_nat_submodule</code> and <code>add_subgroup.to_int_submodule</code> definitions somewhere</p>",
        "id": 230519794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615904469
    },
    {
        "content": "<p>While you are probably right that nat-multiplication is dispensable, I do think that there should be the instances that you mention.  In fact, Lean does not complain with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>this means that the instance is already there, right?<br>\n(Sorry for the silly confirmation, I am still skeptical about my correct usage of instances.)</p>",
        "id": 230520763,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615904769
    },
    {
        "content": "<p>We're talking about <code>submodule</code>s not <code>semimodule</code>s, so instances aren't relevant here ;)</p>",
        "id": 230520900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615904812
    },
    {
        "content": "<p>Ah, <code>semimodule A B</code> is the type of all <code>A</code> subsemimodules of the <code>A</code>-semimodule <code>B</code>?  If this is so, then I can see why what I wrote above is not conclusive.  I also do not understand why lean likes it...</p>",
        "id": 230521293,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615904932
    },
    {
        "content": "<p>Does this make more sense, then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sus</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">is_add_submonoid.add_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">set.mem_univ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230521805,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615905117
    },
    {
        "content": "<p>I mean, that's just <code>⊤</code>, which isn't really interesting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n</code></pre></div>",
        "id": 230522462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615905309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/is_square.2Fis_power/near/230519794\">said</a>:</p>\n<blockquote>\n<p>We probably ought to have <code>add_submonoid.to_nat_submodule</code> and <code>add_subgroup.to_int_submodule</code> definitions somewhere</p>\n</blockquote>\n<p>To be clear, what I'm describing here is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_submonoid.to_nat_submodule</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">s.zero_mem</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">s.add_mem</span> <span class=\"n\">n_ih</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">s</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230522948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615905492
    },
    {
        "content": "<p>I get it now: in my mind, the distinction between the full add_comm_monoid and an add_submonoid of it were not separated, since, thinking about it in Lean term, I was already applying the coercion to simply reduce to the top element.</p>\n<p>Thanks for spelling out this example!</p>",
        "id": 230524068,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615905857
    }
]