[
    {
        "content": "<p>Dimension of a possibly-infinite direct sum:  I don't think (?) this is in the library, nor is it really in my wheelhouse ... any hints (or volunteers!) for proving it?  For all I know, it might not be true in the generality I've stated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.module</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module.rank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module.rank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 257280997,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1634077343
    },
    {
        "content": "<p>I am going to bed, but for free modules we know a basis of the direct sum, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.basis\">docs#dfinsupp.basis</a>. In general I don't know if it is true.</p>",
        "id": 257281744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634077763
    },
    {
        "content": "<p>Aha, thank you!  I have said <code>[field K]</code> and I guess this can be converted to free-ness?</p>",
        "id": 257281861,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1634077818
    },
    {
        "content": "<p>Ah ops, I didn't notice :D</p>",
        "id": 257281885,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634077832
    },
    {
        "content": "<p>We surely know that the dimension is the cardinality of a basis (weird sentence to write...)</p>",
        "id": 257281914,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634077859
    },
    {
        "content": "<p>And the other ingredient is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.sum_mk\">docs#cardinal.sum_mk</a> (which should probably be a simp lemma in the reverse direction and renamed)</p>",
        "id": 257281969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634077897
    },
    {
        "content": "<p>BTW I have on my todo list to write a reasonable API for dimension of free modules. This result will be there. The instance <code>free.module K (⨁ i, V i)</code> is already there.</p>",
        "id": 257282319,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634078108
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.mk_eq_dim''\">docs#basis.mk_eq_dim''</a> says that the rank is the cardinal of a basis.</p>",
        "id": 257282655,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634078333
    },
    {
        "content": "<p>Yes, I can do everything now except for some mess using <code>lift</code>.  Is there a tactic for working with <code>lift</code>?</p>",
        "id": 257282960,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1634078529
    },
    {
        "content": "<p><code>cardinal.lift</code>? Not that I know of</p>",
        "id": 257283004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634078570
    },
    {
        "content": "<p>I use the <code>ask_on_zulip</code> tactic. It usually works</p>",
        "id": 257283022,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634078587
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module.rank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module.rank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">basis.exists_basis</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">_</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp.basis</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">b.mk_eq_dim''.symm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.sum_mk</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_dim''</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257284011,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1634079190
    },
    {
        "content": "<p>(I was led into the <code>lift</code> maze because I had missed Reid's advice to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.mk_eq_dim''\">docs#basis.mk_eq_dim''</a>, and was instead using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.mk_eq_dim\">docs#basis.mk_eq_dim</a> ... oops)</p>",
        "id": 257284128,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1634079256
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> !</p>",
        "id": 257284147,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1634079272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> has marked this topic as resolved.</p>",
        "id": 257284178,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634079291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> if you are still interested in this question I opened <a href=\"https://github.com/leanprover-community/mathlib/issues/9810\">#9810</a> that should cover it.</p>",
        "id": 258200544,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634652534
    }
]