[
    {
        "content": "<p>I'm looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">filter.tendsto.smul_const</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_smul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>There's the very similar <code>filter.tendsto.const_smul</code> in <code>topology.analysis.mul_action.lean</code>, but seemingly not what I want.</p>",
        "id": 235014822,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618691046
    },
    {
        "content": "<p>Bhavik points that <code>hf.smul tendsto_const_nhds</code> proves it.</p>",
        "id": 235014976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618691191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/smul_const.20for.20filters/near/235014822\">said</a>:</p>\n<blockquote>\n<p>There's the very similar <code>filter.tendsto.const_smul</code> in <code>topology.analysis.mul_action.lean</code>, but seemingly not what I want.</p>\n</blockquote>\n<p>Minor point: <code>topology.algebra.mul_action</code>, not analysis</p>",
        "id": 235015015,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618691257
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.const_smul\">docs#filter.tendsto.const_smul</a>)</p>",
        "id": 235015076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618691297
    },
    {
        "content": "<p>Note that <code>const_smul</code> is proved as <code>tendsto_const_nhds.smul hf</code></p>",
        "id": 235015088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618691328
    },
    {
        "content": "<p>So the one you propose is probably just as deserving of a lemma as the one that's already there</p>",
        "id": 235015091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618691342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/smul_const.20for.20filters/near/235015088\">said</a>:</p>\n<blockquote>\n<p>Note that <code>const_smul</code> is proved as <code>tendsto_const_nhds.smul hf</code></p>\n</blockquote>\n<p>Right, I just looked at that and what <code>filter.tendsto.smul</code> said and guessed the proof of this from there!</p>",
        "id": 235015112,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618691367
    },
    {
        "content": "<p>I've seen the same thing in other places. For example we have <code>continuous_on.const_smul</code> but not <code>continuous_on.smul_const</code>; for the latter you are expected to make do with <code>continuous_on.smul _ continuous_on_const</code>.</p>",
        "id": 235026656,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618701792
    },
    {
        "content": "<p>(With the hypothesis about your function being <code>continuous_on</code> going where the <code>_</code> is, or using dot-notation)</p>",
        "id": 235026734,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618701905
    }
]