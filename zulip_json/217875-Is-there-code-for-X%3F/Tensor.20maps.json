[
    {
        "content": "<p>If I have an R-algebra A, is there an easy way to access the multiplication as a map <code>(A ⊗[R] A) →ₐ[R] A</code>? (I'm trying to implement Hopf algebras)?</p>",
        "id": 278239015,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1649373715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456962\">@Leo Mayer</span> I think this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.lmul'\">docs#algebra.lmul'</a></p>",
        "id": 278239330,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649373976
    },
    {
        "content": "<p>I think I need it as an R-algebra map, not just as an R-linear map.<br>\nMaybe I should build an R-algebra map out of that? If this isn't in mathlib, should it be?</p>",
        "id": 278239833,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1649374427
    },
    {
        "content": "<p>I see.  Do we even have the notion of the tensor product of algebras?</p>",
        "id": 278240074,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649374612
    },
    {
        "content": "<p>It should obtain an algebra instance automatically</p>",
        "id": 278240134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649374681
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/tensor_product.html\">Here's the tensor product of algebras</a></p>",
        "id": 278240188,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1649374705
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.lmul'</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 278240326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649374829
    },
    {
        "content": "<p>Found using library search</p>",
        "id": 278240329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649374833
    },
    {
        "content": "<p>BTW it looks like <span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> might also be working on Hopf algebras.</p>",
        "id": 278240391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649374898
    },
    {
        "content": "<p>Thanks Adam!<br>\nVas and I are working together on it!</p>",
        "id": 278240443,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1649374923
    },
    {
        "content": "<p>Great! Looking forward to seeing this in mathlib!</p>",
        "id": 278240453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649374942
    },
    {
        "content": "<p>We are workign on it together</p>",
        "id": 278240456,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1649374945
    },
    {
        "content": "<p>Is there a way for lean to apply natural isomorphisms automatically as coersions? For example, all of the diagrams defining hopf algebras make use of associativity of tensor product or the fact that the base ring is a tensor identity, and it's quickly making the code cumbersome.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hopf_algebra</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">counit</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">comul</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">comul</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">counit_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.lid</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">counit</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">counit_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.rid</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">counit</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">coinv</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coinv_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lmul'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">coinv</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">counit</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coinv_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lmul'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">coinv</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">counit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 278243104,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1649377102
    },
    {
        "content": "<p>Sorry. :-) Cleverly chosen simp normal forms, and writing domain specific tactics?</p>",
        "id": 278250210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649384654
    },
    {
        "content": "<p>I'd try to tempt you into defining a hopf algebra internal to any monoidal category. Some things get harder, but you can also use the nice new <code>coherence</code> tactic for assistance dealing with associators.</p>",
        "id": 278250234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649384697
    }
]