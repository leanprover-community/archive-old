[
    {
        "content": "<p>Hi,<br>\nI'm trying to implement p-adic valuations on principal rings.<br>\nI copied the definition of p-adic valuations for <code>int</code>, which gets me here :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.cau_seq</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.principal_ideal_domain</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">padic_val</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">multiplicity.finite_def.2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\">  -/</span><span class=\"o\">}))</span>\n  <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The question is :</p>\n<ul>\n<li>Is this the right way to implement it or did I miss something more adequate ?</li>\n<li>Are there lemmas on well-founded orders that can help me with this ?<br>\n   (what I'm looking for here is \"if I have an infinite decreasing sequence, then my order is not well-founded\")</li>\n</ul>",
        "id": 225308863,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1612537297
    },
    {
        "content": "<p>I don't think this should take values in <code>real</code>. That will make your life more difficult down the road.</p>",
        "id": 225311394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612538404
    },
    {
        "content": "<p>There are some subtleties here. You'll have to choose whether you want an additive or multiplicative valuation. Both have pros and cons.</p>",
        "id": 225311434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612538430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> thought a lot about this.</p>",
        "id": 225311443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612538437
    },
    {
        "content": "<p>My thoughts on this are that there should be a totally ordered monoid with zero which is {0} union naturals, with notation \"rho^n\" corresponding to natural n,  where 0&lt;rho&lt;1 is thought of as a real number, so it's ordered like this: 0 &lt; ...&lt;rho^100&lt;rho^99&lt;...&lt;rho^2&lt;rho^1&lt;rho^0. Talking to people, some say I should make a new structure and some say I should use with_zero (order_dual (multiplicative nat)). I don't want to use the latter, but I've never thought of a good name for it so I stopped there.</p>",
        "id": 225311910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612538645
    },
    {
        "content": "<p>If someone could only give me a name for this structure, I can make the API and then I would recommend to Julien that they define their valuation to take values in this totally ordered commutative monoid with 0. I don't think I quite got around to changing the definition of valuation so that it would allow a target of a monoid with 0 rather than a group, but I am now absolutely convinced that it should.</p>",
        "id": 225312083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612538729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/P-adic.20valuation.20on.20polynomials/near/225312083\">said</a>:</p>\n<blockquote>\n<p>If someone could only give me a name for this structure, I can make the API and then I would recommend to Julien that they define their valuation to take values in this totally ordered commutative monoid with 0. I don't think I quite got around to changing the definition of valuation so that it would allow a target of a monoid with 0 rather than a group, but I am now absolutely convinced that it should.</p>\n</blockquote>\n<p>The Buzzard monoid? :p</p>",
        "id": 225312207,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612538774
    },
    {
        "content": "<p>Let's really not call it that.</p>",
        "id": 225312229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612538788
    },
    {
        "content": "<p>We also need a version for integers, because this is the correct target for the p-adic valuation on the rationals, or more generally the valuation on the field of fractions of a Dedekind domain.</p>",
        "id": 225312277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612538818
    },
    {
        "content": "<p><code>menat</code> for <code>multiplicative (enat)</code>.</p>",
        "id": 225312372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612538861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Do you have <em>notation</em> for it? If so, we don't have to care about the name.</p>",
        "id": 225312476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612538904
    },
    {
        "content": "<p>Actually in this case I will need absolute values with values in <code>ℝ</code><br>\nThe function I wrote before should have its value in <code>ℕ</code></p>",
        "id": 225312560,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1612538950
    },
    {
        "content": "<p>No -- you know what we do in practice, we just call it the reals like Julien suggested, because in real life there is no DTT hell.</p>",
        "id": 225312563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612538950
    },
    {
        "content": "<p>you could call it <code>exp_nat_with_zero</code> and hide it behind good notation</p>",
        "id": 225312570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612538955
    },
    {
        "content": "<p>And when we apply it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[T]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span> with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>-adic valuation, we just send <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> to some random real between 0 and 1 because there is no canonical choice. Or we just use the additive version to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}\\cup\\{\\infty\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 225312741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612539017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385405\">@Julien Marquet</span> you can look at what I did in <code>discrete_valuation_ring.lean</code> -- there I wrote the additive valuation and I just let it take values in the naturals and I sent 0 to a random value.</p>",
        "id": 225312865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612539073
    },
    {
        "content": "<p>What caught my attention is that mathlib apparently lacks lemmas on well-founded orders : no infinite decreasing chain; existence of a min; ...</p>",
        "id": 225313295,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1612539248
    },
    {
        "content": "<p>(I am currently writing proofs for these)</p>",
        "id": 225313355,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1612539286
    },
    {
        "content": "<p>I think there is quite some stuff, but I'm not an expert.</p>",
        "id": 225313392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612539303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 225313403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612539310
    },
    {
        "content": "<p>Actually I found the theorems in <code>order.well_founded</code></p>",
        "id": 225314297,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1612539681
    }
]