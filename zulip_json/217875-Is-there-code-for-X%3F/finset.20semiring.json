[
    {
        "content": "<p>Dear All,</p>\n<p>I may have asked this already, but is there a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.set_semiring\">docs#set.set_semiring</a> which is based on <code>finset</code>s?  I tried various replacements <code>s/set/finset/</code> in <code>set.set_semiring</code>, but nothing worked...</p>\n<p>Thanks!</p>",
        "id": 282221433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652433313
    },
    {
        "content": "<p>No, we don't have that. What do you need it for?</p>",
        "id": 282222245,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652433801
    },
    {
        "content": "<p>(also I'm editing heavily <code>data.finset.pointwise</code> so please request my review on all PRs that touch it)</p>",
        "id": 282222335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652433851
    },
    {
        "content": "<p>Ok, thanks!  I am currently playing around with defining a map from <code>(laurent_)polynomials</code> to <code>set.set_semiring</code> associating to a polynomial its support.  I am hoping that several lemmas about the support can then be proved using what is already available from the <code>semiring</code> instance on <code>set_semiring</code>.  Since in my case the support is a finset, I would like to exploit this.</p>",
        "id": 282222573,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434019
    },
    {
        "content": "<p>In particular, I do not need it yet, but I will want to relate the computations in <code>set.set_semiring</code> to the <code>max/min</code> of the support and then it would be good to have the <code>finset</code>s being carried around by the <code>semiring</code> structure.</p>",
        "id": 282222652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434069
    },
    {
        "content": "<p>(so, for the moment, I am simply trying it out, to see if I can avoid duplicating a large part of the <code>support/degree/nat_degree/...</code> API for Laurent polynomials, using <code>set.set_semiring</code>.  If this works, then it might make sense to do this already for <code>add_monoid_algebra</code>.</p>",
        "id": 282222789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434149
    },
    {
        "content": "<p>(effectively, this amounts to working with <code>add_monoid_algebra</code> where the add monoid is <code>0,1</code> with absorbing addition, I think.)</p>",
        "id": 282222832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434186
    },
    {
        "content": "<p>Oh nice! In what sense do the <code>set_semiring</code> operations correspond to support operations?</p>",
        "id": 282223007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652434282
    },
    {
        "content": "<p>My last comment may have been a little cryptic.  What I meant is that I think that <code>finset.finset_semiring</code>(or whatever it should be called) is also <code>add_monoid_algebra (with_zero (trivial ring))</code>... maybe?</p>",
        "id": 282223153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434361
    },
    {
        "content": "<p>the correspondence is that support of sums are contained in sums of supports and supports of product are contained in products of supports</p>",
        "id": 282223197,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434403
    },
    {
        "content": "<p>This is exactly what you need to get many statements about degrees (sub)adding under products, additions...</p>",
        "id": 282223253,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434440
    },
    {
        "content": "<p>I think they should be called <code>set_semiring</code> and <code>finset_semiring</code> (without the namespaces) and put in a new file, because they have little to do the rest of the pointwise API now</p>",
        "id": 282223346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652434481
    },
    {
        "content": "<p>(so, essentially, you pretend that there is no cancellation in your additions/multiplications and you obtain the \"right\" \"generic\" statement, which is always greater than or equal than the correct statement.)</p>",
        "id": 282223374,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434501
    },
    {
        "content": "<p>Ok, anyway, my idea was to exploit something that is already available, to avoid writing a lot of API myself.  If the API that I am hoping for is missing somewhere else, I might just as well write it for exactly what I want!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 282223494,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434569
    },
    {
        "content": "<p>... by which I mean, if I were to add everything that's as related to the rest of <code>data.set.pointwise</code> as <code>set_semiring</code> is, I would blow the size of the file to several thousand lines.</p>",
        "id": 282223497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652434571
    },
    {
        "content": "<p>Ok, maybe my idea does not make much sense, given the state of affairs.  I am just trying to avoid having to write a lot of almost identical APIs for <code>degree, int_degree, trailing_degree, trailing_int_degree, leading_coeff, trailing_coeff</code> for Laurent polynomials...</p>",
        "id": 282223619,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434672
    },
    {
        "content": "<p>No I think you're onto something, but I will have to think about it more.</p>",
        "id": 282223743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652434746
    },
    {
        "content": "<p>Ok, basically, anything that would prove \"quickly\" statements like <code>degree (f * g) ≤ degree f * degree g</code> would be very welcome!  If it is as polymorphic as possible on the notion of <code>degree</code>, that would be even better!</p>",
        "id": 282223899,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434819
    },
    {
        "content": "<p>(I would like to leverage the fact that, from the point of view of supports, that statement is simply a statement about the support of addition.)</p>",
        "id": 282223984,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434874
    },
    {
        "content": "<p>Most of the results about various forms degree are simply statements about adding finite subsets of a linear order and gathering trivialities about them.</p>",
        "id": 282224126,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652434947
    },
    {
        "content": "<p>I view cancellation and disappearance from support of some terms as an unfortunate coincidence.  The API should include all the results about degrees that are compatible with \"opaque cancellation\" and then deal more precisely with cancellation, as the need arises.</p>",
        "id": 282224223,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652435030
    },
    {
        "content": "<p>Anyway, I have to take care of some \"real-world\" problems.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 282224327,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652435088
    }
]