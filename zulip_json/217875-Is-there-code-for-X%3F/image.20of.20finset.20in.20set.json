[
    {
        "content": "<p>What's the idiomatic way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finset.map_to_set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hTS</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">setversion</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"n\">s.1</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">setversion.finite</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">set.finite.to_finset</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 238069209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620602403
    },
    {
        "content": "<p>Is this close to something that could work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset.map_to_set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">T.subtype</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 238069686,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1620602986
    },
    {
        "content": "<p>Then you could also use some of the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.subtype\">docs#finset.subtype</a> API</p>",
        "id": 238069741,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1620603022
    },
    {
        "content": "<p>Aah this is perfect -- thanks!</p>",
        "id": 238069805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620603116
    }
]