[
    {
        "content": "<p>I thought that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sort\">docs#finset.sort</a> might do something like this, but apparently it outputs a list ... how can I get a permutation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_sort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">sort</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 260612547,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636343187
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.order_iso_of_fin\">docs#finset.order_iso_of_fin</a>, which is close.  I found a way to use it by constructing the graph of a function and sorting that lexicographically.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.lexicographic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.univ.image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">graph.proj</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.1.1</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">graph.card</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">graph</span><span class=\"o\">,</span> <span class=\"n\">finset.card_image_of_injective</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The induced map into the graph -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">graph_equiv₁</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">graph</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">graph</span><span class=\"o\">]⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.1.2</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">graph</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">proj_equiv₁'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">graph.proj</span> <span class=\"bp\">∘</span> <span class=\"n\">graph_equiv₁</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- putting the graph in sorted order -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">graph_equiv₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">graph</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.order_iso_of_fin</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The permutation that puts `f` in sorted order. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">graph_equiv₂</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">graph_equiv₁</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">self_comp_sort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">sort</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">graph.proj</span> <span class=\"bp\">∘</span> <span class=\"n\">graph_equiv₂</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sort</span><span class=\"o\">],</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">proj_equiv₁'</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"n\">graph.proj</span> <span class=\"bp\">∘</span> <span class=\"o\">((</span><span class=\"n\">graph_equiv₁</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">graph_equiv₁</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">graph_equiv₂</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_sort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">sort</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">self_comp_sort</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">order_iso.le_iff_le</span> <span class=\"o\">(</span><span class=\"n\">graph_equiv₂</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">graph_equiv₂</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">graph_equiv₂</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"o\">⟩,</span> <span class=\"n\">hI</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"o\">⟩,</span> <span class=\"n\">hJ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">graph.proj</span><span class=\"o\">],</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260709684,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636401249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Wow, that's much more elaborate than I anticipated.  Thank you!  Could you PR it?  (Or I could PR myself if you prefer.)</p>\n<p>By the way, I was wondering whether the following would also work:  use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.map\">docs#multiset.map</a> to consider the range of <code>f</code> as a multiset in <code>α</code>, sort this using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.sort\">docs#multiset.sort</a>, and then somehow transfer back to give a sorting of <code>fin n</code>.  I've never used lists or multisets so I don't know how much work would be needed there.</p>",
        "id": 260711482,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636402101
    },
    {
        "content": "<p>Kyle used <code>lex</code> to remember the index of each element while sorting on its value.</p>",
        "id": 260712355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636402405
    },
    {
        "content": "<p>The <code>lex</code> trick is to be able to distinguish each of the images of <code>f</code>, which seems like the main difficulty with <code>sort</code>.  I'd originally tried doing things with lists directly, but it was extremely unpleasant.</p>\n<p>Here's a commutative diagram that organizes what's going on in the construction:</p>\n<p><a href=\"/user_uploads/3121/dtOHn21v_-rgdtk7WlMMRO2-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dtOHn21v_-rgdtk7WlMMRO2-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dtOHn21v_-rgdtk7WlMMRO2-/image.png\"></a></div>",
        "id": 260716221,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636404262
    },
    {
        "content": "<p>Looking at this diagram more carefully, I realized I didn't take advantage of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.comp\">docs#monotone.comp</a>.  This can replace the last lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">monotone_proj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">graph.proj</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">graph.proj</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_sort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">sort</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">self_comp_sort</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">monotone.comp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">monotone_proj</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">order_iso.monotone</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260716327,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636404329
    },
    {
        "content": "<p>I'm also not sure how all of this should relate to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.graph\">docs#function.graph</a>, which gives a relation.  If you uncurry that relation and turn it into a set, its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset\">docs#set.to_finset</a> would be equal to <code>graph</code>.</p>",
        "id": 260716646,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636404480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Would you mind PRing <code>sort</code> and <code>monotone_sort</code>?</p>",
        "id": 260716726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636404502
    },
    {
        "content": "<p>Sure, happy to (listing you as the author of course).  Thanks again!  By the way, the purpose here is to convert from a basis of eigenvectors to a basis of eigenvectors ordered by eigenvalue :)</p>",
        "id": 260716829,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636404547
    },
    {
        "content": "<p>what if the eigenvalues are complex ? ;-)</p>",
        "id": 260717139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636404684
    },
    {
        "content": "<p>Good thing they're not! :)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/d59f9ece9c74e1e04d1a506ea85fbfb9536a2af0/src/analysis/inner_product_space/spectrum.lean#L61\">https://github.com/leanprover-community/mathlib/blob/d59f9ece9c74e1e04d1a506ea85fbfb9536a2af0/src/analysis/inner_product_space/spectrum.lean#L61</a></p>",
        "id": 260717321,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636404763
    },
    {
        "content": "<p>It just occurred to me that this result is a corollary of <a href=\"https://github.com/leanprover-community/mathlib/pull/17932\">#17932</a>. Because a function <code>f : α → β</code> monovaries with itself, the results in this PR give that there's some linear order on <code>α</code> according to which <code>f</code> is monotone. But then we can use the fact that <code>perm α</code> acts transitively on <code>linear_order α</code> to get the desired permutation.</p>",
        "id": 316324730,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671212907
    }
]