[
    {
        "content": "<p>When writing proofs on paper it is very common to write something like this: We may assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x \\neq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> since the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> follows easily, etc.</p>\n<p>I can simulate this using </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n<span class=\"n\">etc</span>\n</code></pre></div>\n<p>This isn't bad, but I wonder whether we have a nicer way to do this that more closely resembles what I might write on paper.</p>",
        "id": 226857853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613673312
    },
    {
        "content": "<p>You could probably write a <code>can_assume</code> tactic which just throws the kitchen sink at the negation of what you assumed (perhaps after simplifying \\not (x != 0) to x = 0 etc)</p>",
        "id": 226885024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613684250
    },
    {
        "content": "<p>I would do <code>have : x = 0 := by by_contra; kitchen_sink</code></p>",
        "id": 226885568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613684508
    },
    {
        "content": "<p>Followed by \"hold on, this isn't actually <em>that</em> trivial\"?</p>",
        "id": 226885798,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1613684601
    },
    {
        "content": "<p>actually, I guess the pattern here is that you want to assume <code>!A</code> in goal <code>P</code> assuming <code>A -&gt; P</code></p>",
        "id": 226885838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613684623
    },
    {
        "content": "<p>It might not be the case that <code>!A</code> is provable</p>",
        "id": 226885871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613684641
    },
    {
        "content": "<p>That said, given all the spaces where you have to say things I don't think you can improve on the structure provided by <code>by_cases</code></p>",
        "id": 226885976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613684692
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nontriviality\">tactic#nontriviality</a> is a special case of what you're asking for I think</p>",
        "id": 226893509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613687422
    },
    {
        "content": "<p>Yeah, that's the \"We may assume our ring is nontrivial, because the result is trivially true for the trivial ring\" tactic.</p>",
        "id": 226893638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613687493
    }
]