[
    {
        "content": "<p>Dear All,</p>\n<p>I would like to have a coercion between <code>with_bot ℕ</code> and <code>with_bot ℤ</code>, to work more smoothly with <code>degree</code>s of polynomials and Laurent polynomials.  It seems that what is below works for me.  However, I am surprised that I could not find it: is there some problem with the definitions/instances below?  Are they in mathlib somewhere already?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounded_order</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">option.coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">option.has_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">option.coe</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_bot.has_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">option.has_coe</span>\n</code></pre></div>",
        "id": 288906838,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657265222
    },
    {
        "content": "<p>I think you can spell this <code>option.map coe</code></p>",
        "id": 288910201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657267615
    },
    {
        "content": "<p>It's not clear to me whether such a function is special enough to be give a <code>has_coe</code> instance. Maybe a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lift\">docs#has_lift</a> instance is reasonable</p>",
        "id": 288910255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657267672
    },
    {
        "content": "<p>(to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_pair\">docs#lift_pair</a>)</p>",
        "id": 288910385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657267776
    },
    {
        "content": "<p>Thanks!  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">with_bot.has_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">option.map</span> <span class=\"n\">coe</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>As for it being an instance, I am not too worried about this.  I can always make it a local instance for degrees of Laurent polynomials, if I see that I need to insert <code>option.map coe</code>s everywhere.</p>",
        "id": 288910460,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657267811
    },
    {
        "content": "<p>Is the one below the instance that you are suggesting?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">option.has_lift</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">option.map</span> <span class=\"n\">coe</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 288910620,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657267937
    },
    {
        "content": "<p>The second has_coe should <del>also</del> say has_lift_t (edit: _t)</p>",
        "id": 288910663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657267988
    },
    {
        "content": "<p>Although I'm worried there might be a diamond here considering casting <code>option X</code> to <code>option (option X)</code></p>",
        "id": 288910809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657268104
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">option.has_lift</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">option.map</span> <span class=\"n\">coe</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(I left <code>has_coe</code> as an assumption and <code>list_t</code> as instance, assuming I parsed things correctly!)</p>",
        "id": 288910816,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657268109
    },
    {
        "content": "<p>I meant the opposite!</p>",
        "id": 288910835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657268129
    },
    {
        "content": "<p>Ok, I'll just leave it be: I am going to try using <code>option.map coe</code>: it may be that I only need it in a couple of lemmas, and then it gets shielded away by the API.</p>",
        "id": 288910862,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657268159
    },
    {
        "content": "<p>Regarding the diamond; <code>none : option X</code> is sent by the existing coercion to <code>some none : option (option X)</code>, but via your coercion (with the [has_coe] argument populated by the existing one) to <code>none : option (option X)</code></p>",
        "id": 288911004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657268246
    },
    {
        "content": "<p>Ok, I won't bother changing the instance above to what you had meant, since it seems like it is not a good idea anyway!</p>",
        "id": 288911081,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657268283
    },
    {
        "content": "<p>Your instance is just as dangerous as mine</p>",
        "id": 288911114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657268306
    },
    {
        "content": "<p>The one between int and nat specifically is safe</p>",
        "id": 288911133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657268324
    },
    {
        "content": "<p>Yes, I am just not going to add any instance for the moment.  I'll play without it and see what happens.</p>\n<p>As you say, I might simply put one locally and for nat to int.</p>",
        "id": 288911171,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657268355
    },
    {
        "content": "<p>(which ultimately is all that I need at the moment)</p>",
        "id": 288911188,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657268365
    },
    {
        "content": "<p>Damiano, my recent PR switched the definition of degree to no longer rely on option</p>",
        "id": 288936214,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657285081
    },
    {
        "content": "<p>Just checking that you're aware</p>",
        "id": 288936333,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657285129
    },
    {
        "content": "<p>I think the dangerousness of the instance goes away if you use has_coe_t</p>",
        "id": 288936427,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657285183
    },
    {
        "content": "<p>I'm pretty sure it remains just as dangerous; but I guess the easy thing to do is try it and see</p>",
        "id": 288938607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657286235
    },
    {
        "content": "<p>Ah, as I had never really used <code>degree</code>, I did not know what to expect.  I'll make sure to merge master before I continue gluing the degree that I'm defining on Laurent polynomials to the \"latest\" one on mathlib.  Thanks for the head up!</p>",
        "id": 288938705,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657286285
    }
]