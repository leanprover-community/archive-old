[
    {
        "content": "<p>I see a few discussions which are possibly relevant but no conclusion -- just to be sure I'm not missing it, can I do induction on the length of a word in a free group? Not quite yet right, we don't have word length?</p>",
        "id": 277426537,
        "sender_full_name": "Julian Berman",
        "timestamp": 1648823420
    },
    {
        "content": "<p>It seems like we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.to_word\">docs#free_group.to_word</a>, and you can then do structural induction on the list, or even induction on the length of the list.</p>",
        "id": 277427119,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648823669
    },
    {
        "content": "<p>I was trying the latter, let me try again maybe I made some simple mistake.</p>",
        "id": 277427474,
        "sender_full_name": "Julian Berman",
        "timestamp": 1648823807
    },
    {
        "content": "<p>Note that some arguments \"by induction on the length of a word\" might really just be arguments by induction on the construction of an element</p>",
        "id": 277428288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648824130
    },
    {
        "content": "<p>which makes sense even when reduced words do not (if you don't have decidable equality on the generators)</p>",
        "id": 277428713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648824336
    },
    {
        "content": "<p>So I'm sure there's some math I don't know as well, I'm not sure I even understand your suggestion sorry :/, but I see things complain at me about decidability already -- I'm here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.is_free_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_free_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A cyclically reduced word is a word where every cyclic conjugate is reduced. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_cyclically_red</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n\n<span class=\"sd\">/-- Inverses of cyclically reduced words are cyclically reduced. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_cyclically_red.inv</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclically_red</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclically_red</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"n\">inv_eq_iff_inv_eq.mp</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">$</span> <span class=\"n\">inv_inv</span> <span class=\"n\">w</span> <span class=\"bp\">▸</span> <span class=\"n\">conj_inv.rec</span> <span class=\"o\">(</span><span class=\"n\">inv_inj.symm.mp</span> <span class=\"n\">huv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"sd\">/-- A word is cyclically reduced iff its inverse is cyclically reduced. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_cyclically_red_inv_iff</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclically_red</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">↔</span> <span class=\"n\">is_cyclically_red</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inv_inv</span> <span class=\"n\">w</span> <span class=\"bp\">▸</span> <span class=\"n\">h.inv</span><span class=\"o\">,</span> <span class=\"n\">is_cyclically_red.inv</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- The (unique) cyclic reduction of a word. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cyclic_red</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">is_free_group.generators</span> <span class=\"n\">G</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">r.1</span> <span class=\"bp\">*</span> <span class=\"n\">r.2</span> <span class=\"bp\">*</span> <span class=\"n\">r.1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∧</span> <span class=\"n\">is_cyclically_red</span> <span class=\"n\">r.2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod.exists</span><span class=\"o\">],</span>\n  <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">list.length</span> <span class=\"o\">(</span><span class=\"n\">free_group.to_word</span> <span class=\"o\">((</span><span class=\"n\">is_free_group.to_free_group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and I wanted to induct on how long <code>w</code> is -- hopefully I'm not already off track. A hint would definitely be appreciated.</p>",
        "id": 277429415,
        "sender_full_name": "Julian Berman",
        "timestamp": 1648824596
    },
    {
        "content": "<p>I take it <code>cyclic_red</code> is meant to be a <code>lemma</code>?</p>",
        "id": 277438000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648828064
    },
    {
        "content": "<p>Er, indeed</p>",
        "id": 277448008,
        "sender_full_name": "Julian Berman",
        "timestamp": 1648832262
    }
]