[
    {
        "content": "<p>Do we have a function with signature <code>list (option α) → list α</code>?</p>",
        "id": 203106763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594130794
    },
    {
        "content": "<p>I think the usual way of doing it is <code>list.map_filter id</code></p>",
        "id": 203106848,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594130849
    },
    {
        "content": "<p>Ok, I'll try</p>",
        "id": 203107254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594131055
    },
    {
        "content": "<p>I currently have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>            <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n</code></pre></div>\n\n\n<p>but I guess there is some slick monad combinator 1-liner doing this.</p>",
        "id": 203107475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594131171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">to_list</span>\n</code></pre></div>\n\n\n<p>(Though this might be annoying since it's the concatenation of 1-element lists.)</p>",
        "id": 203145102,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594148444
    },
    {
        "content": "<p>This is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.reduce_option\">docs#list.reduce_option</a></p>",
        "id": 203145598,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594148643
    },
    {
        "content": "<p>(For the curious, <code>list.reduce_option</code> is implemented as <code>list.filter_map id</code>, like <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> suggested.)</p>",
        "id": 203146276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594148932
    },
    {
        "content": "<p>Also for the curious, <code>#find</code> is still a good way to answer questions like </p>\n<blockquote>\n<p>Do we have a function with signature <code>list (option α) → list α</code>?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 203146822,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594149128
    },
    {
        "content": "<p>This is extremely helpful.  I've very much been wanting something like <a href=\"https://hoogle.haskell.org/\">Hoogle</a>!</p>",
        "id": 203147030,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594149235
    },
    {
        "content": "<p>Is it doable to have <code>import all</code> before <code>#find</code>? I mean, <code>all</code> is generated for the linter but it gets cleared away, right?</p>",
        "id": 203147088,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149246
    },
    {
        "content": "<p><code>all</code> is generated by <code>scripts/mk_all.sh</code>, so if you run that yourself, you can certainly <code>import all</code>.</p>",
        "id": 203147244,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594149328
    },
    {
        "content": "<p>It makes <code>#find</code> somewhat to much slower, depending on what you're looking for.</p>",
        "id": 203147359,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594149375
    },
    {
        "content": "<p>So I'm not sure it would be good to keep <code>all.lean</code> around and import it from <code>tactic.find</code>.</p>",
        "id": 203147406,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594149405
    },
    {
        "content": "<p>Not that you can <code>leanproject mk-all</code> (in any project, not only mathlib).</p>",
        "id": 203147456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594149431
    },
    {
        "content": "<p>Definitely not a good idea, you're right</p>",
        "id": 203147467,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149439
    },
    {
        "content": "<p>Can you?</p>",
        "id": 203147486,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149454
    },
    {
        "content": "<p>It will create exactly one <code>all.lean</code>, not a swarm of them like the mathlib script.</p>",
        "id": 203147521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594149470
    },
    {
        "content": "<p>The script hasn't made a swarm for a while now.</p>",
        "id": 203147594,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594149505
    },
    {
        "content": "<p>We could have a <code>find.sh</code> script that gets the <code>all.lean</code> file generated, generate a lean file that imports it with <code>#find my stuff</code> and then run Lean on it</p>",
        "id": 203147613,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149515
    },
    {
        "content": "<p>Then <code>#find</code> is unusable anywhere except a leaf file of mathlib.</p>",
        "id": 203147767,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594149609
    },
    {
        "content": "<p>We're definitely missing proper lemma search, but I don't think hacking around <code>#find</code> is a reliable solution.</p>",
        "id": 203147870,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594149675
    },
    {
        "content": "<p>I wouldn't put that as part of <code>find</code></p>",
        "id": 203147917,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149706
    },
    {
        "content": "<p>You leave <code>#find</code> the way it is and, in addition to that user command, there's a shell (or python) script that you can call with your query and that will consider all your code base</p>",
        "id": 203148033,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149752
    },
    {
        "content": "<p>Ah, I see. But you still need a fully compiled mathlib for it to be usable, or you need to be willing to wait a long time!</p>",
        "id": 203148095,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594149786
    },
    {
        "content": "<p>Exactly</p>",
        "id": 203148595,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149997
    },
    {
        "content": "<p>I think we need to get used to the fact that you should always have a clean copy of mathlib next to the copy that you are hacking on...</p>",
        "id": 203151021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151239
    },
    {
        "content": "<p>Btw, thanks for <code>find</code>ing this for me.</p>",
        "id": 203151075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151268
    }
]