[
    {
        "content": "<p>Does mathlib have the statement that in a finite (additive) group whose order is divisible by a prime p, there exists an element of order p?<br>\nI have no idea what such a lemma would be named and haven't found something when looking through some files in algebra/group or group_theory.</p>",
        "id": 284399583,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653938853
    },
    {
        "content": "<p>Not sure about that exact statement but we have <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/sylow.html\">https://leanprover-community.github.io/mathlib_docs/group_theory/sylow.html</a></p>",
        "id": 284399728,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653939001
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sylow.exists_subgroup_card_pow_prime_le\">docs#sylow.exists_subgroup_card_pow_prime_le</a> should be directly applicable</p>",
        "id": 284399915,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653939161
    },
    {
        "content": "<p>Does this also exist for <code>add_group</code>s?</p>",
        "id": 284400028,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653939305
    },
    {
        "content": "<p>To go via <code>multiplicative</code> is likely rather painful...</p>",
        "id": 284400052,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653939327
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.to_add_subgroup\">docs#subgroup.to_add_subgroup</a></p>",
        "id": 284400153,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653939403
    },
    {
        "content": "<p>Maybe you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.to_add_subgroup'\">docs#subgroup.to_add_subgroup'</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_subgroup.to_subgroup\">docs#add_subgroup.to_subgroup</a></p>",
        "id": 284400323,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653939555
    },
    {
        "content": "<p>It seems the Sylow theorems aren't <code>to_additive</code>'d.</p>",
        "id": 284400328,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653939569
    },
    {
        "content": "<p>There is the very oddly named <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.exists_prime_order_of_dvd_card\">docs#equiv.perm.exists_prime_order_of_dvd_card</a> which also has no <code>to_additive</code> and no docstring calling it \"Cauchy's theorem\" <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 284400503,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653939725
    },
    {
        "content": "<p>There is a docstring in the file header with the word \"Cauchy`s\" (note the backtick so searching for \"Cauchy's theorem\" doesnt work) but as there are many references to Cauchy in mathlib just looking for \"Cauchy\" gives way too many results</p>",
        "id": 284400682,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653939921
    },
    {
        "content": "<p>Thanks; this gives at least the multiplicative version. <code>exists_prime_order_of_dvd_card</code> is natural enough, only the prefix is a bit weird...</p>",
        "id": 284400801,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653940021
    },
    {
        "content": "<p>Using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.exists_prime_order_of_dvd_card\">docs#equiv.perm.exists_prime_order_of_dvd_card</a>, the pain is bearable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.cycle.type</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_group.exists_prime_order_of_dvd_card</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">add_order_of</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">equiv.perm.exists_prime_order_of_dvd_card</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284401155,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653940385
    },
    {
        "content": "<p>I would add this below the existing one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_prime_add_order_of_dvd_card</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">add_order_of</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">exists_prime_order_of_dvd_card</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hdvd</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">exists_prime_add_order_of_dvd_card</span><span class=\"o\">]</span> <span class=\"n\">exists_prime_order_of_dvd_card</span>\n</code></pre></div>",
        "id": 284401249,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653940485
    },
    {
        "content": "<p>But they should probably both not be namespaced imo.</p>",
        "id": 284401373,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653940601
    },
    {
        "content": "<p>You are welcome to do it, AFAIC.</p>",
        "id": 284401707,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653940878
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14471\">#14471</a></p>",
        "id": 284403212,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653941784
    },
    {
        "content": "<p>What prevents <code>to_additive</code> to work automatically here?</p>",
        "id": 284404261,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653942476
    },
    {
        "content": "<p>Many things, in this case, even the naive approach of adding to additive to everything in the file fails for some unclear reasons.<br>\nBut the main reason is really that the theory of permutation groups in lean is completely multiplicative with no additive analogue at present. (equiv.perm is a group and not an add_group)</p>",
        "id": 284404830,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653943064
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> for the PR fixing things. Sorry for bungling this so badly in <a href=\"https://github.com/leanprover-community/mathlib/pull/8916\">#8916</a>.</p>",
        "id": 284410846,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1653950082
    },
    {
        "content": "<p>Seems that I created quite the mess with the name, namespace, lack of to_additive, and backtick in Cauchy's. Glad it's all sorted out now.</p>",
        "id": 284410924,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1653950193
    },
    {
        "content": "<p>No need to be sorry, I think it never had a to additive, and was always in some non-root namespace, so it wasn't just you <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>, this is the fun of a work in progress collaborative effort after all!<br>\nI do wonder if we will ever need sylow-type theorems for add_groups, but we can cross that bridge if we come to it I guess.</p>",
        "id": 284411227,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653950674
    },
    {
        "content": "<p>Yeah, <code>equiv.perm</code> should be treated as a fixed type by <code>to_additive</code>, just as <code>ℕ</code> is. I already reaised this issue several times but apparently no one picked it up. I don't know where you do that but I believe the fix is easy to someone who has hacked on <code>to_additive</code> before.</p>",
        "id": 284411720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653951322
    },
    {
        "content": "<p>But do you think <code>equiv.perm</code> should have a <code>+</code> on it that does the same as <code>*</code>? Because for results whose proofs work by (for example) embedding a multiplicative group into their own <code>equiv.perm</code> as a <code>mul_hom</code> the corresponding additivized result would have to relate to the <code>+</code> on <code>equiv.perm</code> it seems</p>",
        "id": 284412103,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653951760
    },
    {
        "content": "<p>Does that ever happen? If so, can we teach <code>to_additive</code> to insert <code>multiplicative</code> somehow? Sounds fragile <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 284412588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653952398
    },
    {
        "content": "<p>I don't remember which specific proofs from that part of group theory use this sort of trick, but I imagine a lot of them do yes.<br>\nAnd yeah its very annoying, this is also why a lot of proofs that use <code>multiplicative nat</code> aren't <code>to_additive</code>d currently, <code>to_additive</code> doesn't even know to just remove the <code>multiplicative</code>. Whenever we have an asymmetry like this and the group operation on the fixed type actually interacts with the group one it gets very annoying very quick.</p>",
        "id": 284412736,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653952584
    },
    {
        "content": "<p>Is there no way to transfer statements from additive groups to multiplicative groups and viceversa?</p>",
        "id": 284424247,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653967632
    },
    {
        "content": "<p>I don't know how this would actually work, but given that they're the same algebraic structure with different symbols, it feels like it should be possible...</p>",
        "id": 284424252,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653967648
    },
    {
        "content": "<p>There is a gap between possible and already implemented and tested unfortunately, in principle we could have a to_multiplicative the same as to_addtive and many other similar tactics (as suggested in a recent issue) all using the same core code, but nobody has done it and it's not completely trivial to do as to_additive does a lot right now already.</p>",
        "id": 284433260,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653979090
    },
    {
        "content": "<p>And it's probably not a good time to implement new bells and whistles on <code>to_additive</code>, because these would also need to be ported to Lean 4.</p>",
        "id": 284436340,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1653981742
    }
]