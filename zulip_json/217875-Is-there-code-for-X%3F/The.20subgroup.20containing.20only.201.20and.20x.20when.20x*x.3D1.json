[
    {
        "content": "<p>I imagine the proof of the three fields is trivial (<code>cases, simp</code>?), but does this construction have a name?</p>",
        "id": 219146664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607379494
    },
    {
        "content": "<p><del><code>to_mul (zmod 2)</code>?</del> Oh you want a subgroup.</p>",
        "id": 219146707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607379524
    },
    {
        "content": "<p>Yeah, I was looking at an old review comment and considering making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.mod_swap\">docs#equiv.perm.mod_swap</a> a subgroup</p>",
        "id": 219146902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607379629
    },
    {
        "content": "<p>What's wrong with <code>subgroup.closure {x}</code>?</p>",
        "id": 219165643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607395914
    },
    {
        "content": "<p>Or <code>subgroup.gpowers x</code>?</p>",
        "id": 219165702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607395944
    },
    {
        "content": "<p>I think that having a lemms <code>mem_gpowers_iff_of_mul_self_eq_one</code> and <code>coe_gpowper_of_...</code> (possibly with a shorter name) is better than having one more definition.</p>",
        "id": 219165736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607396015
    },
    {
        "content": "<p>I think what you actually want is a proof that <code>(subgroup.gpowers x : set \\a) = {1, x}</code> or something like this</p>",
        "id": 219168668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607399542
    },
    {
        "content": "<p>One has to think about how they want to actually formalize some mathematical statement</p>",
        "id": 219168674,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607399555
    },
    {
        "content": "<p>not everything should be translated literally</p>",
        "id": 219168678,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607399559
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of_mul_self_eq_one_aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_one</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">one_mul</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_one</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">one_inv</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_mul_self_eq_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subgroup.gpowers</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">subgroup.gpowers</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">of_mul_self_eq_one_aux</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">subgroup.gpowers_subset</span> <span class=\"bp\">$</span> <span class=\"n\">or.inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">or.cases_on</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hg1</span><span class=\"o\">,</span> <span class=\"n\">hg1.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">subgroup.one_mem</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hgx</span><span class=\"o\">,</span> <span class=\"n\">hgx</span> <span class=\"bp\">▸</span> <span class=\"n\">subgroup.mem_gpowers</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 219175139,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607408356
    },
    {
        "content": "<p>A more general lemma could be <code>x ^ n = 1 → (gpowers x : set G) = (λ k, x ^ k) '' (Iio n)</code></p>",
        "id": 219176033,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607409626
    },
    {
        "content": "<p>The problem with <code>closure {x}</code> is that it's non-computable. Kenny's <code>of_mul_self_eq_one_aux</code> is exactly what I was after, but felt like I didn't want to write if there was a chance it already existed.</p>",
        "id": 219177511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607411636
    },
    {
        "content": "<p>How can it be (non)computable?</p>",
        "id": 219177756,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607411956
    },
    {
        "content": "<p>It has only a <code>Prop</code>-valued function inside.</p>",
        "id": 219177769,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607411989
    },
    {
        "content": "<p>Or do you want <code>[∀ y, decidable (y ∈ s)]</code>?</p>",
        "id": 219177825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607412041
    },
    {
        "content": "<p>Sorry, you're right; I was imprecise</p>",
        "id": 219177840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607412084
    },
    {
        "content": "<p>You can't turn it into an <code>instance</code> for <code>gpowers</code> but I'd prefer to have <code>def gpowers_fin (x : G) (n : nat) (h : x ^ n = 1) := gpowers x</code> and instances on this def.</p>",
        "id": 219177913,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607412181
    },
    {
        "content": "<p>Or you can use <code>monoid_hom.range</code> of the natural map from <code>multiplicative (zmod n)</code>.</p>",
        "id": 219177991,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607412250
    },
    {
        "content": "<p>(and prove that this range equals <code>gpowers</code>)</p>",
        "id": 219177997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607412260
    },
    {
        "content": "<p>BTW, do we have <code>(zmod n →+ G) ≃ {g : G // n \\bu[\\N] g = 0}</code> and a similar equiv for <code>multiplicative (zmod n) →* G</code>?</p>",
        "id": 219178045,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607412325
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subgroup</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxn</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">gpowers</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">^</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">set.Iio</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">set.ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">hxmg</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hxmg</span> <span class=\"bp\">▸</span> <span class=\"n\">gpow_coe_nat</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">⟩⟩),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"n\">int.nat_abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">int.mod_nonneg</span> <span class=\"n\">m</span> <span class=\"bp\">$</span> <span class=\"n\">int.coe_nat_ne_zero_iff_pos.2</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_lt.1</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">int.mod_lt_of_pos</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_pos.2</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">gpow_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.mod_add_div</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">gpow_add</span><span class=\"o\">,</span> <span class=\"n\">gpow_mul</span><span class=\"o\">,</span>\n        <span class=\"n\">gpow_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">hxn</span><span class=\"o\">,</span> <span class=\"n\">one_gpow</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_mul_self_eq_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">gpowers</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">of_pow_eq_one</span> <span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"n\">dec_trivial</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">pow_two</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">set.Iio_def</span><span class=\"o\">,</span> <span class=\"n\">nat.lt_succ_iff_lt_or_eq</span><span class=\"o\">,</span> <span class=\"n\">nat.not_lt_zero</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span>\n    <span class=\"n\">set.set_of_or</span><span class=\"o\">,</span> <span class=\"n\">set.image_union</span><span class=\"o\">,</span> <span class=\"n\">set.set_of_eq_eq_singleton</span><span class=\"o\">,</span> <span class=\"n\">set.image_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">set.singleton_union</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subgroup</span>\n</code></pre></div>",
        "id": 219179600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607414094
    }
]