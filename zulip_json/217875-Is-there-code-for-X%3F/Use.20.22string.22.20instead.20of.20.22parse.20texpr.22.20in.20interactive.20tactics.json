[
    {
        "content": "<p>Is it possible to parse <code>string</code> during tactic execution?  For example, can <code>string</code> be used instead of <code>parse texpr</code> in tactics like <code>exact</code>?<br>\nI was able to parse <code>string</code> with <code>lean.parser.with_input</code>, if the expressions depend only on <code>environment</code> (outside of <code>begin</code> ~ <code>end</code> block). However, for expressions with variables from local context (inside <code>begin</code> ~ <code>end</code> block), parser produces \"unknown identifier\" error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">lc</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">lc</span><span class=\"o\">,</span> <span class=\"c1\">-- [p, q, hp, hq]</span>\n  <span class=\"n\">lean.parser.run</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.with_local_scope</span> <span class=\"o\">(</span>\n    <span class=\"k\">do</span>\n    <span class=\"n\">lc2</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">lc2</span><span class=\"o\">,</span> <span class=\"c1\">-- []</span>\n    <span class=\"n\">p_pexpr</span> <span class=\"bp\">←</span> <span class=\"n\">lean.parser.with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.pexpr</span> <span class=\"mi\">0</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"s2\">\"p\"</span><span class=\"o\">,</span> <span class=\"c1\">-- (if tt is changed to ff, \"unknown identifier\" occurs here)</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">p_pexpr.1</span><span class=\"o\">,</span>\n    <span class=\"n\">p_expr</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"n\">p_pexpr.1</span><span class=\"o\">,</span> <span class=\"c1\">-- \"unknown identifier\" occurs here</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">p_expr</span>\n  <span class=\"o\">)),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hq</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Apparently, <code>parser</code> monad does not refer to local context.<br>\nI tried to use some seemingly relevant functions such as <code>lean.parser.with_local_scope</code>or <code>environment.add</code>, but not successful.<br>\nIf I use <code>environment.add</code> for declarations including variables from local context, it produces \"failed to add declaration to environment, it contains local constants<br>\nstate\" error.<br>\nAlso, I cannot figure out how to use <code>interactive.parse</code> with <code>string</code> (not <code>texpr</code>).</p>",
        "id": 259995450,
        "sender_full_name": "Tsuru",
        "timestamp": 1635860076
    },
    {
        "content": "<p>Oh, I should not have run <code>tactic.to_expr</code> inside <code>parser</code> monad.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">lc</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">lc</span><span class=\"o\">,</span> <span class=\"c1\">-- [p, q, hp, hq]</span>\n    <span class=\"n\">p_pexpr</span> <span class=\"bp\">←</span> <span class=\"n\">lean.parser.run</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.with_local_scope</span> <span class=\"o\">(</span>\n    <span class=\"k\">do</span>\n    <span class=\"n\">lc2</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">lc2</span><span class=\"o\">,</span> <span class=\"c1\">-- []</span>\n    <span class=\"n\">lean.parser.with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.pexpr</span> <span class=\"mi\">0</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"s2\">\"p∨q\"</span> <span class=\"c1\">-- if tt is changed to ff, \"unknown identifier\" occurs here</span>\n    <span class=\"o\">),</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">p_pexpr.1</span><span class=\"o\">,</span>\n    <span class=\"n\">p_expr</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"n\">p_pexpr.1</span><span class=\"o\">,</span> <span class=\"c1\">-- \"p ∨ q\"</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">p_expr</span>\n    <span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hq</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This works.</p>",
        "id": 260224264,
        "sender_full_name": "Tsuru",
        "timestamp": 1635995333
    }
]