[
    {
        "content": "<p>I'm not sure if this should go here, or in \"new members\"... is there a standard way of doing this? <code>apply_instance</code> didn't find anything.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 199382962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591025345
    },
    {
        "content": "<p>What are you trying to ask? <del>This doesn't seem to make any sense.</del></p>",
        "id": 199383032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591025385
    },
    {
        "content": "<p>I want an instance of <code>has_mem</code> for subsets of a subtype</p>",
        "id": 199383119,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591025408
    },
    {
        "content": "<p>I'm a bit surprised it doesn't exist in mathlib.</p>",
        "id": 199383154,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591025429
    },
    {
        "content": "<p>Oh I see, so if <code>U : subtype S</code> then you can imagine U as a subset of T.</p>",
        "id": 199383168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591025438
    },
    {
        "content": "<p><del>You understand that there is some coercion happening when you write <code>subtype S</code>? <code>S</code> is a term, not a type.</del></p>",
        "id": 199383230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591025476
    },
    {
        "content": "<p><del>You have disappeared into another topic, but I guess <code>subtype S</code> is a bit weird, because maybe if you wanted <code>S</code> to be a type you would have used a subtype of T instead of <code>set T</code></del></p>",
        "id": 199383415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591025555
    },
    {
        "content": "<p>I could get by with this too: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>but <code>apply_instance</code> doesn't find anything for this either.</p>",
        "id": 199383535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591025622
    },
    {
        "content": "<p>As you say, I just want to think of subsets of a subtype of <code>T</code> as subsets of <code>T</code>.</p>",
        "id": 199383646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591025663
    },
    {
        "content": "<p>I see. Most of what I said was nonsense, sorry (I'd forgotten what <code>subtype</code> did).</p>",
        "id": 199383726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591025697
    },
    {
        "content": "<p>Yeah, I agree that this looks like it could be a thing.</p>",
        "id": 199383770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591025718
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">t</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 199383964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591025827
    },
    {
        "content": "<p><code>instance bar (T : Type*) (S : set T) : has_coe (subtype S) T := by apply_instance</code> exists</p>",
        "id": 199384145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591025937
    },
    {
        "content": "<p>but you can't coerce from <code>set (subtype S)</code> to <code>set T</code> because these are terms, not types.</p>",
        "id": 199384301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591026025
    },
    {
        "content": "<p>I thought <code>set T</code> is the type of subsets of <code>T</code>, no?</p>",
        "id": 199384374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591026063
    },
    {
        "content": "<p>Oh yeah you're right again, so there could be a coercion</p>",
        "id": 199384444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591026102
    },
    {
        "content": "<p>It's easy to do once you have <code>has_mem</code></p>",
        "id": 199384459,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591026113
    },
    {
        "content": "<p>I haven't done any Lean for a few days, I need to warm up :-)</p>",
        "id": 199384466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591026115
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 199384573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591026168
    },
    {
        "content": "<p>I wasn't familiar with the <code>''</code> notation, though. Thanks for that!</p>",
        "id": 199384653,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591026219
    },
    {
        "content": "<p>or <code>instance (T : Type*) (S : set T) : has_coe (set (subtype S)) (set T) := ⟨λ U t, t ∈ subtype.val '' U⟩</code> if the other instance isn't there. Yeah, at least I got the notation for <code>set.image</code> right :-)</p>",
        "id": 199384757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591026253
    },
    {
        "content": "<p>This instance is not okay, because <code>set (subtype S)</code> already has a <code>has_mem</code>, with <code>subtype S</code> on the left, and the left argument of <code>has_mem</code> is an out_param so there is only allowed to be one such instance.</p>",
        "id": 199427253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591047432
    },
    {
        "content": "<p>Is this also an issue for the <code>has_coe</code> instance that Kevin mentioned?</p>",
        "id": 199494904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591106416
    }
]