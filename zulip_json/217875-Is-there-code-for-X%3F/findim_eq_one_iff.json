[
    {
        "content": "<p>Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">findim_eq_one_iff</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">findim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and/or an easy path to it?</p>",
        "id": 235960475,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619260614
    },
    {
        "content": "<p>Perhaps best to have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">findim_le_one_iff</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">findim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>first?</p>",
        "id": 235960510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619260653
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7354\">#7354</a></p>",
        "id": 235964528,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619265034
    },
    {
        "content": "<p>Should we have these for <code>dim</code> too?</p>",
        "id": 235967857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619268523
    },
    {
        "content": "<p>By the way, <a href=\"https://github.com/leanprover-community/mathlib/issues/7322\">#7322</a> renames <code>dim</code> and <code>findim</code> to <code>rank</code> and <code>finrank</code>. If you don't like it, it is still time to voice your concerns on the PR page :-)</p>",
        "id": 235967969,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619268659
    }
]