[
    {
        "content": "<p>Does mathlib already know that the real interval <code>[0,1]</code> is closed under powers of natural numbers?  (So that, for example, given a probability <code>0 ≤ p ≤ 1</code> its power <code>0 ≤ p^n ≤ 1</code> is also a probability.)</p>\n<p>I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span>  <span class=\"c1\">-- Fails:   \"failed to synthesize type class instance for `has_pow ↥(Icc 0 1) ℕ`\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prob_pow_Icc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hp0</span><span class=\"o\">,</span> <span class=\"n\">hp1</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">pow_nonneg</span> <span class=\"n\">hp0</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pow_le_one</span> <span class=\"n\">n</span> <span class=\"n\">hp0</span> <span class=\"n\">hp1</span><span class=\"o\">⟩⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">prob_pow_Icc</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span>  <span class=\"c1\">-- This works now:  \"p ^ 2 : ↥(Icc 0 1)\"</span>\n</code></pre></div>\n<p>Is this the right way to go about things?  Is it worth PRing this instance (and if so, where)?</p>",
        "id": 282465703,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652690658
    },
    {
        "content": "<p>This looks a bit like it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">maps_to_bit0_zero_compl</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">maps_to</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pow_bit0_pos_iff</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">maps_to_sq_zero_compl</span> <span class=\"o\">:</span> <span class=\"n\">maps_to</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">maps_to_bit0_zero_compl</span> <span class=\"n\">one_ne_zero</span>\n</code></pre></div>",
        "id": 282465834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652690761
    },
    {
        "content": "<p>I think that in general it's not advisable to make definitions in tactic mode: this might be better-behaved for when you start proving theorems about p^n:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prob_pow_Icc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hp0</span><span class=\"o\">,</span> <span class=\"n\">hp1</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">pow_nonneg</span> <span class=\"n\">hp0</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pow_le_one</span> <span class=\"n\">n</span> <span class=\"n\">hp0</span> <span class=\"n\">hp1</span><span class=\"o\">⟩⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">prob_pow_Icc</span> <span class=\"c1\">-- subtype.cases_on blah</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prob_pow_Icc'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">pow_nonneg</span> <span class=\"n\">p.2.1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pow_le_one</span> <span class=\"n\">n</span> <span class=\"n\">p.2.1</span> <span class=\"n\">p.2.2</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">prob_pow_Icc'</span> <span class=\"c1\">-- looks far less scary</span>\n</code></pre></div>",
        "id": 282480620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652699724
    },
    {
        "content": "<p>What you really should do is provide <code>comm_monoid_with_zero (Icc 0 1)</code>. Then you'll get powers for free.</p>",
        "id": 282480844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652699903
    },
    {
        "content": "<p>You can also do <code>comm_semigroup_with_zero (Ico 0 1)</code>, <code>comm_monoid (Ioc 0 1)</code>, <code>comm_semigroup (Ioo 0 1)</code>, <code>comm_monoid_with_zero (Icc (-1) 1)</code>, <code>comm_monoid_with_zero (Ioc (-1) 1)</code>, <code>comm_semigroup_with_zero (Ioo (-1) 1)</code>, and also provide <code>has_distrib_neg</code> instances where applicable.</p>",
        "id": 282481261,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652700199
    },
    {
        "content": "<p>Ok, I'll try that.  Where should these instances be put?  In <code>data/set/intervals/basic</code>?</p>",
        "id": 282483970,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652702009
    },
    {
        "content": "<p>Or would it be better to start a new file <code>data/set/intervals/instances</code>, since <code>.../basic</code> is already 1460 lines?</p>",
        "id": 282485260,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652702790
    },
    {
        "content": "<p>1000 lines is a good rule of thumb :-)</p>",
        "id": 282485944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652703199
    },
    {
        "content": "<p>What about the neglected half-infinite interval?  <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 282607817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652776415
    },
    {
        "content": "<p>You mean the one that goes a quarter of the way out to infinity in either direction?</p>",
        "id": 282646438,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652796841
    },
    {
        "content": "<p>I meant ˋIci 1ˋ and ˋIoi 1ˋ, one being a comm monoid, the other a comm semigroup.  I hope that this is correct!</p>",
        "id": 282690084,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652813768
    },
    {
        "content": "<p>In fact, I think that ˋIci aˋ, for ˋ1 ≤ aˋ is also a comm semigroup, but I am not sure that you can make an instance for that.</p>",
        "id": 282690206,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652813831
    },
    {
        "content": "<p>(sorry, my backticks do not appear to work today)</p>",
        "id": 282690403,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652813911
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal\">docs#nnreal</a> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 282690502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652813958
    },
    {
        "content": "<p>Yaël, is that for me?  I meant the interval [1,infinity), not [0,infinity).  Maybe I am misunderstanding.</p>",
        "id": 282691057,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652814142
    },
    {
        "content": "<p>Ah, right</p>",
        "id": 282691691,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652814388
    },
    {
        "content": "<p>Although arguably that's <code>multiplicative nnreal</code></p>",
        "id": 282707442,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652821799
    },
    {
        "content": "<p>I'm also sure that, with enough patience, we'd be able to get <code>to_additive</code> to prove the instance for all cases, from just one of them!  <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 282708609,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652822352
    },
    {
        "content": "<p>I have a draft of the instances for 0-1 intervals at <a href=\"https://github.com/leanprover-community/mathlib/pull/14288\">#14288</a>.  I'd appreciate any feedback, as I'm sure there must be nicer ways to do much of this.  In particular I couldn't figure out how to golf away the <code>begin ... end</code> blocks in <code>comm_monoid_with_zero (Icc (0:α) 1)</code>.</p>",
        "id": 283188767,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653160561
    },
    {
        "content": "<p>I added some comments; you can make it a lot shorter with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.monoid\">docs#function.injective.monoid</a> and friends</p>",
        "id": 283189431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653161538
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 283189440,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653161556
    },
    {
        "content": "<p>It turns out we already have lots of instances on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Icc\">docs#set.Icc</a><code>0 1</code> (on the reals; see the list of instances in the docs) under the name <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unit_interval\">docs#unit_interval</a></p>",
        "id": 283679707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653349726
    }
]