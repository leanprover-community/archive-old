[
    {
        "content": "<p>This seems like it is important. I desire to work on some specific infinite sums of entire functions related to exp, and tsum seems like the best tool. On the other hand, I want my results to be related to exp in mathlib. Does anyone have an easy way to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expTsumForm</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288885526,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657242406
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/exponential.html#exp_eq_tsum\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/exponential.html#exp_eq_tsum</a> ?</p>",
        "id": 288885941,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657242905
    },
    {
        "content": "<p>I'll see if I can twist that into the specific form I asked about. Thanks.</p>",
        "id": 288886088,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657243023
    },
    {
        "content": "<p>there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/exponential.html#exp_eq_tsum_div\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/exponential.html#exp_eq_tsum_div</a></p>\n<p>(sorry, I'm a bit out of my element with this one, someone else might have a better suggestion)</p>",
        "id": 288886264,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657243206
    },
    {
        "content": "<p>Yeah, I still feel like a newb. I haven't figured out how to apply that theorem to complex numbers because I don't know how to use some theorems like this one, or because I don't even know how to break apart syntactic sugar to deal with lower-level implementations. The learning curve is steep. I'm hoping someone will see that theorem and know how to apply it to complex numbers.</p>",
        "id": 288886739,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657243841
    },
    {
        "content": "<p>have you already looked at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a>? was that what you were trying to use initially? I may have assumed the wrong <code>exp</code></p>",
        "id": 288886868,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657244034
    },
    {
        "content": "<p>I have skimmed the code. Maybe it is more complicated than it needs to be if we can replace the definition of exp with the tsum version, but I honestly don't know.<br>\nAnd yes, I want to have sums of [tsum]s to make my functions, some of which would be my tsum version of exp. The problem is that I want the tsum version to be known equivalent to whatever is in complex.exp. If someone replaces the definition of complex.exp, to make this easier, I don't mind.</p>",
        "id": 288887189,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657244429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expTsumForm</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp_eq_exp_ℂ</span><span class=\"o\">,</span> <span class=\"n\">exp_eq_tsum_div</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288889112,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657246853
    },
    {
        "content": "<p>Okay so let me explain. In mathlib, we currently have three exponentials : <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp\">docs#real.exp</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp\">docs#exp</a>. The last one strictly supercedes the first two, but the reason why we keep the first two is exactly the reason why the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a> looks so strange : the goal is to have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp\">docs#real.exp</a> sit as low as possible in the import tree, to avoid importing the whole analysis library each time we want to talk about an exponential of real numbers, e.g for algebraic purposes.</p>",
        "id": 288889464,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657247194
    },
    {
        "content": "<p>Thanks. I am saving this in my Lean notes.</p>",
        "id": 288889505,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657247275
    },
    {
        "content": "<p>The definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a> basically only depends on the basic construction of real and complex numbers, and in particular completeness, since we define it as the limit of the Cauchy sequence of partial sums (with a really dirty proof of Cauchyness, this file is really horrible to read)</p>",
        "id": 288889666,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657247436
    },
    {
        "content": "<p>Actually, if you have a look at the proof of <code>complex.exp_eq_exp_ℂ</code>, you'll see that it proves exactly what you want, so you could probably copy-paste the proof and it would work. But I do <strong>not</strong> recommend doing this : you should just treat <code>complex.exp_eq_exp_ℂ</code> as a black box that translates between the dirty definition and the nice one so that you don't have to look at the dirty definition.</p>",
        "id": 288890000,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657247850
    },
    {
        "content": "<p>I have a decent enough computer, so I like scripts/mk_all.sh, import all and running library_search!, suggest, hint to see if I can get anything and I think if library_search! does nothing, then the statement of the lemma is worth implementing in my view, such that library_search would work on the statement. Such is a process of my generating lemma discussions which mostly others prove for me.<br>\n<span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> I suggest you take credit for this if it is worth having in mathlib. If it is not worth adding, I am content to have my own library extending mathlib but with this lemma in my notes/library. Thanks again.</p>",
        "id": 288890946,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657248968
    }
]