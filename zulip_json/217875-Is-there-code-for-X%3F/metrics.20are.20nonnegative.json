[
    {
        "content": "<p>I proved that something was a <code>metric_space</code> but now I'm noticing that I was never asked to prove my metric was nonnegative!<br>\nIs this a bug?</p>",
        "id": 218733994,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607019664
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dist_nonneg/src\">src#dist_nonneg</a> is derived from the triangle equality that you did prove</p>",
        "id": 218734282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607019796
    },
    {
        "content": "<p>Thanks... that's a nice way to set it up</p>",
        "id": 218734485,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607019898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> how might I tell <code>dist_nonneg</code> which metric I want to use?</p>",
        "id": 218742273,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607023558
    },
    {
        "content": "<p>Looks like you need an instance of <code>metric_space</code></p>",
        "id": 218742492,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607023649
    },
    {
        "content": "<p>Yes, I have that, but then I'm not sure how to invoke it.</p>",
        "id": 218742530,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607023669
    },
    {
        "content": "<p>In most cases you don't - the way the typeclasses are set up usually means you have exactly one metric per your</p>",
        "id": 218742532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607023670
    },
    {
        "content": "<p>Did you construct a metric_space instance as a def as opposed to an instance?</p>",
        "id": 218742599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607023686
    },
    {
        "content": "<p>I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">jaccard_numerator</span>\n    <span class=\"sd\">/-- Instantiate finset ℕ as a metric space. -/</span>\n    <span class=\"kd\">instance</span> <span class=\"n\">jaccard_numerator.metric_space</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">):</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- omitting the details</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">jaccard_numerator</span>\n</code></pre></div>",
        "id": 218742757,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607023770
    },
    {
        "content": "<p>Ah, you have variables....</p>",
        "id": 218742790,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607023789
    },
    {
        "content": "<p>So typeclass inference can't find this instance since it doesn't know how to fill in <code>hm</code> and <code>hM</code>.</p>",
        "id": 218742857,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607023807
    },
    {
        "content": "<p>What is the type of <code>m</code>?</p>",
        "id": 218742884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607023819
    },
    {
        "content": "<p>real number</p>",
        "id": 218742901,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607023831
    },
    {
        "content": "<p>You can make this a def, and use <code>@dist_nonneg</code> and put in your definition manually.</p>",
        "id": 218742922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607023845
    },
    {
        "content": "<p>Or you can create a type alias for <code>finset \\N</code></p>",
        "id": 218742965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607023872
    },
    {
        "content": "<p>But I think the proofs needed will still be missing.</p>",
        "id": 218743001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607023893
    },
    {
        "content": "<p>Which folds those proofs into the type</p>",
        "id": 218743008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607023895
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 218743192,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607023985
    },
    {
        "content": "<p>That's not what I meant</p>",
        "id": 218743238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607024006
    },
    {
        "content": "<p><code>m</code> should be part of the type itself</p>",
        "id": 218743261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607024017
    },
    {
        "content": "<p>Or like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 218743293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607024034
    },
    {
        "content": "<p>Otherwise when you do <code>dist x y</code> you have two different ms</p>",
        "id": 218743301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607024039
    },
    {
        "content": "<p>No point having the proofs as fields there</p>",
        "id": 218743359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607024054
    },
    {
        "content": "<p>Since they're the same for all foo objects</p>",
        "id": 218743377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607024071
    },
    {
        "content": "<p>Those are presumably needed in defining the instance.</p>",
        "id": 218743383,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607024073
    },
    {
        "content": "<p>Yes, if <code>0&lt;m</code> fails then it's not a metric space</p>",
        "id": 218743428,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607024099
    },
    {
        "content": "<p>Yeah, but put them before the :=</p>",
        "id": 218743445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607024110
    },
    {
        "content": "<p>or if <code>m \\le M</code> fails</p>",
        "id": 218743452,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607024114
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 218743487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607024137
    },
    {
        "content": "<p>Yeah, this should work.</p>",
        "id": 218743594,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607024187
    },
    {
        "content": "<p>Then <code>metric_space (foo n M hm hM)</code></p>",
        "id": 218743598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607024191
    },
    {
        "content": "<p>Thanks I'll try that... will probably still have some questions</p>",
        "id": 218743667,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607024240
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">hm</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 218743733,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607024274
    },
    {
        "content": "<p>Can you combine hm and hM into a statement about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Ioo\">docs#Ioo</a></p>",
        "id": 218743952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607024389
    },
    {
        "content": "<p>I wish we could write   <code>h : 0 &lt; m &lt; M</code></p>",
        "id": 218744042,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607024417
    },
    {
        "content": "<p>But yes, you can say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is in the interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 218744137,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607024480
    },
    {
        "content": "<p>(even though <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's link is broken)</p>",
        "id": 218744204,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607024515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/metrics.20are.20nonnegative/near/218742273\">said</a>:</p>\n<blockquote>\n<p>how might I tell <code>dist_nonneg</code> which metric I want to use?</p>\n</blockquote>\n<p>What do you want to use the result of having a proof that jaccard distance is nonnegative for?</p>",
        "id": 218744423,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607024609
    },
    {
        "content": "<p>Well it's a numerator of a generalization of Jaccard distance... :) but this numerator I want to use in a proof about the generalization itself, in order to prove <code>eq_of_dist_eq_zero</code> for the latter</p>",
        "id": 218744835,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607024799
    },
    {
        "content": "<p>Then you might prefer to use <code>uniform_space_of_dist</code> instead</p>",
        "id": 218745177,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607024964
    },
    {
        "content": "<p>And have a helper <code>dist_nonneg</code> to not require a <code>metric_space</code> but just a term of <code>uniform_space</code></p>",
        "id": 218745378,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607025073
    },
    {
        "content": "<p>Because for <code>uniform_space_of_dist</code> you provide the <code>dist</code> explicitly instead of implicitly</p>",
        "id": 218745521,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607025135
    },
    {
        "content": "<p>(which I think might be useful for <span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> as well...?)</p>",
        "id": 218745546,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607025153
    },
    {
        "content": "<p>But will that be a weaker result, then? If I just prove it's a <code>uniform_space</code> instead of a metric space?</p>",
        "id": 218745883,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607025307
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> is saying to put the <code>dist</code> as a variable in the lemma.</p>",
        "id": 218745923,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607025329
    },
    {
        "content": "<p>You're trying to prove statements about __this__ particular distance function, not spaces that have this distance function, right?</p>",
        "id": 218746094,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607025403
    },
    {
        "content": "<p>Right, I'm working with no additional \"space\" structure beside the distance function... except that the domain is fixed to be <code>finset \\N</code></p>",
        "id": 218746329,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607025506
    },
    {
        "content": "<p>There's several ways of getting out the unbundled result from the <code>metric_space</code> bundled structure. Can you share your larger problem statement?</p>",
        "id": 218747196,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607025883
    },
    {
        "content": "<p>I can share but maybe I should ask first if you mean something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_of_jn_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">myspace</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hm</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>  <span class=\"c1\">--- omitting the rest</span>\n</code></pre></div>",
        "id": 218747410,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607026001
    },
    {
        "content": "<p>and then do someting like <code>myspace.dist_nonneg</code>?</p>",
        "id": 218747513,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607026064
    },
    {
        "content": "<p>with a <code>hdist : myspace.dist = jaccard_distance_func</code> could work</p>",
        "id": 218747982,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607026304
    },
    {
        "content": "<p>Anyway, I was able to get what was needed by just using <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's original pointer to <code>dist_nonneg</code> and replicating that proof</p>",
        "id": 218771006,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607039043
    }
]