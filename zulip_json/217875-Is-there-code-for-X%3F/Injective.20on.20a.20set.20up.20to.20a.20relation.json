[
    {
        "content": "<p>I couldn't find a definition like the following in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">inj_on_by</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">x₁</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x₂</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span>\n</code></pre></div>\n\n\n<p>(this is a variation on <code>set.inj_on</code> in <code>data/set/function.lean</code>).  For the particular use I have in mind, <code>α</code> has a setoid instance, in case that matters.</p>\n<p>So, (1) is there some other definition I should be using? or, barring that, (2) would this function be welcome in <code>data/set/function.lean</code> or elsewhere?</p>",
        "id": 202008021,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593110309
    },
    {
        "content": "<p>This looks <em>very</em> specialized.</p>",
        "id": 202008170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593110401
    },
    {
        "content": "<p><code>inj_on</code> is already pretty obscure, I would say</p>",
        "id": 202008386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593110505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I guess you want to use this in your graph theory stuff, right? Could you explain a bit more how/why?</p>",
        "id": 202008561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593110590
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 202008586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593110606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> One of the axioms for undirected graphs in the Chou formalization is exactly <code>inj_on_by link.via links (≈)</code>, where <code>links</code> is a set of <code>link</code> elements, defined by</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">link</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">via</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dest</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">link</span><span class=\"bp\">.</span><span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">link</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">link</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">dest</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">via</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">src</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>with an equivalence relation given by </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">same_edge</span> <span class=\"o\">:</span> <span class=\"n\">link</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">link</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">rev</span>\n</code></pre></div>\n\n\n<p>That is, if two links carry the same edge (have the same <code>via</code>), then they are equal up to orientation reversal.</p>\n<p>It's not essential that this definition actually exists, and I'm fine with writing out the full definition of the axiom in the structure.  This would be the only one of the three axioms involving any quantifiers.</p>\n<p>In the context of all the axioms, we want <code>link.via</code> on the <code>links</code> set to have <code>link.rev</code> acting on its fibers.</p>\n<p>Another way of thinking about this particular axiom is that <code>link.via</code> descends to a map on the quotient of <code>link α β</code> by <code>same_edge</code>, and we wish for this map to be injective.  It seems like it would be more trouble than it's worth to use quotient types to specify this axiom.</p>",
        "id": 202011561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593112072
    },
    {
        "content": "<p>I think it's easiest to just write it out</p>",
        "id": 202012462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593112537
    },
    {
        "content": "<p><code>\\forall x y, x.via = y.via → same_edge x y</code><br>\nis that what you want, or am I missing something?</p>",
        "id": 202012556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593112578
    },
    {
        "content": "<p>Since there's a set of links, it would be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">links</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">links</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">via</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">via</span> <span class=\"bp\">→</span> <span class=\"n\">same_edge</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n\n<p>but yeah, that's pretty much it.</p>\n<p>I just thought I'd ask in case this was somehow less specialized than I imagined it to be, or if there was some convenient setoid thing I didn't know about.</p>\n<p>Thanks for the advice everyone.</p>",
        "id": 202015674,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593114211
    },
    {
        "content": "<p>Yeah, just use what you wrote. It's fine.</p>",
        "id": 202015896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593114348
    }
]