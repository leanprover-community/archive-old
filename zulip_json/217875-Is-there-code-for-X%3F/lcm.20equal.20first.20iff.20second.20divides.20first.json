[
    {
        "content": "<p>The following lemma is true (I have a proof in lean).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lcm_eq_dvd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"n\">n.lcm</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>  <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 279072645,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1650022749
    },
    {
        "content": "<p>This appears to work, but I do not know why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lcm_eq_dvd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"n\">n.lcm</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lcm_eq_right_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">normalize_eq</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 279072992,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650023048
    },
    {
        "content": "<p>What's confusing? nat only has a single unit</p>",
        "id": 279073191,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650023269
    },
    {
        "content": "<p>Oh, and it also relies on <code>nat.lcm</code> being defeq to <code>gcd_monoid.lcm</code>, I guess</p>",
        "id": 279073392,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650023465
    },
    {
        "content": "<p>Actually, I was confused since I did not know what <code>normalize</code> meant, but then I looked it up.</p>",
        "id": 279073503,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650023565
    },
    {
        "content": "<p>This is basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup_eq_right\">docs#sup_eq_right</a></p>",
        "id": 279073563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650023620
    },
    {
        "content": "<p>Oddly, trying to generalize away from nat, I'm stuck on <code>normalized_gcd_monoid.to_normalization_monoid = normalization_monoid_of_unique_units</code></p>",
        "id": 279073823,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650023832
    },
    {
        "content": "<p>Expecting someone to come up with a one-liner, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lcm_eq_dvd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cancel_comm_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">gcd_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lcm</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">normalized_gcd_monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">normalize_gcd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">normalize_eq</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">normalize_lcm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">normalize_eq</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">gcd_monoid</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"bp\">..</span><span class=\"n\">normalization_monoid_of_unique_units</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lcm_eq_right_iff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">normalize_eq</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279074191,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650024121
    }
]