[
    {
        "content": "<p>Hi,</p>\n<p>Does anyone know whether there is a lemmas somewhere that says that a local minimum of a convex function is a global minimum (or anything along those lines)?</p>",
        "id": 204241722,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595010586
    },
    {
        "content": "<p>AFAIK, no. Are you going to formalize and PR it?</p>",
        "id": 204305084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595086732
    },
    {
        "content": "<p>Yes, I think I'll give it a shot!</p>",
        "id": 204310281,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595094387
    },
    {
        "content": "<p>I'm slowly getting there, but along the way I stumbled on some missing lemmas that should probably go in <code>topology.local_extr</code>; I guess I should probably PR those separately first...?</p>",
        "id": 204367586,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595187252
    },
    {
        "content": "<p>Basically just stuff like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_local_min_on</span><span class=\"bp\">.</span><span class=\"n\">comp_continuous_on</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_local_min_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_local_min_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">comp_tendsto</span> <span class=\"o\">(</span><span class=\"n\">continuous_within_at</span><span class=\"bp\">.</span><span class=\"n\">tendsto_nhds_within_image</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 204367603,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595187305
    },
    {
        "content": "<p>Yes, this kind of lemma definitely makes sense for mathlib. One remark though about this one: images of sets are not really well behaved in general (the definition involves an existential quantifier, which is something complicated for automation), so if one can use preimages of sets instead this is often better. Here, you could use something like <code>(hf : is_local_min_on f t (g b)) (hst : s ⊆ g ⁻¹' t)</code>.</p>",
        "id": 204368029,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595187975
    },
    {
        "content": "<p>Ah, I see!</p>",
        "id": 204369197,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595189947
    },
    {
        "content": "<p>OK, I'll PR the modified versions as soon as I manage to set up github properly...</p>",
        "id": 204369202,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595189972
    },
    {
        "content": "<p>Just to check, you know about the handy tutorial at <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>, right?  There's a video version too :)</p>",
        "id": 204369585,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595190682
    },
    {
        "content": "<p>Yes! I guess I am now at step 3, in which I am supposed to ask for write access on Zulip :-)</p>",
        "id": 204369860,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595191122
    },
    {
        "content": "<p>What's your github username? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 204369920,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595191221
    },
    {
        "content": "<p>dupuisf</p>",
        "id": 204369923,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595191228
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 204369927,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595191258
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 204369931,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595191266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Local.20vs.20global.20minimum/near/204368029\">said</a>:</p>\n<blockquote>\n<p>Yes, this kind of lemma definitely makes sense for mathlib. One remark though about this one: images of sets are not really well behaved in general (the definition involves an existential quantifier, which is something complicated for automation), so if one can use preimages of sets instead this is often better. Here, you could use something like <code>(hf : is_local_min_on f t (g b)) (hst : s ⊆ g ⁻¹' t)</code>.</p>\n</blockquote>\n<p>Is this something we could write a linter to assist with? It's not obvious to new contributors that this should be preferred.</p>",
        "id": 204378878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595207953
    },
    {
        "content": "<p>In answer to this very question <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> :</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233387.3A.20smooth.20functions.20on.20manifolds/near/203742971\">said</a>:</p>\n<blockquote>\n<p>I don't think I like the linter idea, everyone should be free to make his own mistakes :-)</p>\n</blockquote>",
        "id": 204381560,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595212513
    },
    {
        "content": "<p>Oops, maybe now I remember you asking that, and thought it was a good idea, so asked again without remembering it had been answered!</p>",
        "id": 204382484,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595213915
    }
]