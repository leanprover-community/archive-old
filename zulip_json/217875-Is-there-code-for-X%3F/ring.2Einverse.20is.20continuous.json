[
    {
        "content": "<p>Is this true? Do we have it somewhere with stronger assumptions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">ring.inverse</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"n\">is_unit</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 276918740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648494913
    },
    {
        "content": "<p>It's true for the group of units of a complete normed ring.</p>",
        "id": 276918815,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648494946
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_ring.inverse_continuous_at\">docs#normed_ring.inverse_continuous_at</a></p>",
        "id": 276918880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648494967
    },
    {
        "content": "<p>Note also that <code>units R</code> is given a topology in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.topological_space\">docs#units.topological_space</a>, but it's not always the same as the subspace topology from <code>R</code></p>",
        "id": 276919035,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495077
    },
    {
        "content": "<p>(Instead, it's precisely the topology which also makes inversion continuous.)</p>",
        "id": 276919209,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495165
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.topological_group\">docs#units.topological_group</a></p>",
        "id": 276919343,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495217
    },
    {
        "content": "<p>I guess it's also true in a topological field too?</p>",
        "id": 276919410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495262
    },
    {
        "content": "<p>It would be worth stating both the <code>ring.inverse</code> lemma and the fact <code>is_open_map (coe : units k → k)</code> for a topological field.</p>",
        "id": 276919802,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495450
    },
    {
        "content": "<p>By analogy with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_ring.inverse_continuous_at\">docs#normed_ring.inverse_continuous_at</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.is_open_map_coe\">docs#units.is_open_map_coe</a></p>",
        "id": 276919844,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495478
    },
    {
        "content": "<p>I ask because I was trying to show that the matrix inverse is continuous around the units</p>",
        "id": 276919957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495542
    },
    {
        "content": "<p>And I'm not sure what assumptions I should be taking</p>",
        "id": 276919971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495557
    },
    {
        "content": "<p>It sounds like I need multiple copies of the lemma for the topological_field vs normed_ring cases?</p>",
        "id": 276920052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495588
    },
    {
        "content": "<p>You can apply it to the normed ring of square matrices over a normed field directly.</p>",
        "id": 276920084,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495619
    },
    {
        "content": "<p>Matrices aren't (yet) a normed ring</p>",
        "id": 276920111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495639
    },
    {
        "content": "<p>(in mathlib)</p>",
        "id": 276920124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495644
    },
    {
        "content": "<p>I think establishing that instance will be by far the fastest way to prove that fact.</p>",
        "id": 276920218,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495690
    },
    {
        "content": "<p>I'm already 90% of the way there</p>",
        "id": 276920246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495714
    },
    {
        "content": "<p>It's the pesky <code>ring.inverse A.det</code> that's left</p>",
        "id": 276920281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495736
    },
    {
        "content": "<p>But the abstract proof is also the \"right\" one -- eg it's what I've used before to prove that the \"inversion\" map on endomorphisms is continuous.</p>",
        "id": 276920310,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495755
    },
    {
        "content": "<p>Besides, going this way fills out missing API</p>",
        "id": 276920311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648495755
    },
    {
        "content": "<p>Why do you need this?  Is it maybe a fact about endomorphisms in disguise?</p>",
        "id": 276920416,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648495803
    },
    {
        "content": "<p>Oh, I'm sure it is a statement about endomorphisms in disguise</p>",
        "id": 276920949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648496085
    },
    {
        "content": "<p>I was trying to state <a href=\"https://en.wikipedia.org/wiki/Jacobi%27s_formula\">https://en.wikipedia.org/wiki/Jacobi%27s_formula</a>, and just filling out various API</p>",
        "id": 276920981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648496105
    },
    {
        "content": "<p>Yes, this is a fact about endomorphisms!</p>",
        "id": 276921138,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648496190
    },
    {
        "content": "<p>Last time I tried that translation, I got stumped by trying to translate <code>matrix.adjugate</code> to endomorphisms</p>",
        "id": 276921387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648496335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/ring.2Einverse.20is.20continuous/near/276920246\">said</a>:</p>\n<blockquote>\n<p>I'm already 90% of the way there</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13009\">#13009</a> is the PR.</p>",
        "id": 276921733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648496541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/ring.2Einverse.20is.20continuous/near/276921387\">said</a>:</p>\n<blockquote>\n<p>Last time I tried that translation, I got stumped by trying to translate <code>matrix.adjugate</code> to endomorphisms</p>\n</blockquote>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>E</mi><mo>→</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">f : E \\to E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is your endomorphism, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> has dimension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, then the adjugate is the induced map between exterior powers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>∧</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>:</mo><msup><mi>E</mi><mrow><mo>∧</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>→</mo><msup><mi>E</mi><mrow><mo>∧</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{\\wedge (n-1)}:E^{\\wedge (n-1)}\\to E^{\\wedge (n-1)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0824em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∧</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∧</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∧</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 276921961,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648496683
    },
    {
        "content": "<p>Maybe I need to pick back up my tensor powers PR that got stalled on fin nonsense</p>",
        "id": 276922022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648496725
    },
    {
        "content": "<p>Although I guess <code>(exterior_algebra.\\io R M).range ^ (n - 1)</code> could work there</p>",
        "id": 276922071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648496761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- should add this instance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">complete</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- check that `L∞-L∞` normed group definition matches the standard uniform space instance.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix.normed_group</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space</span>\n  <span class=\"bp\">=</span> <span class=\"n\">matrix.uniform_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- The `L1-L∞` norm on matrices. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">matrix.normed_group'</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">pi.normed_group</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi_Lp</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi_Lp.normed_group</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- check that `L1-L∞` normed group definition matches the standard uniform space instance.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix.normed_group'</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.uniform_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- Matrices are a normed ring wrt the `L1-to-L∞` norm. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">matrix.normed_ring</span> <span class=\"o\">:</span> <span class=\"n\">normed_ring</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">matrix.ring</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">matrix.normed_group'</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"n\">ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">normed_ring.inverse_continuous_at</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">matrix.normed_ring</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- apparently unrelated diamond:</span>\n  <span class=\"c1\">-- `pi.monoid_with_zero = semiring.to_monoid_with_zero (matrix n n 𝕜)`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276928778,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648500264
    },
    {
        "content": "<p>That's a real diamond, it's telling you that you've mixed up elementwise and matrix multiplication somehow</p>",
        "id": 276928991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648500374
    },
    {
        "content": "<p>I can't see where though</p>",
        "id": 276929028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648500406
    },
    {
        "content": "<p>Ah, indeed.  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"n\">ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">normed_ring.inverse_continuous_at</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">matrix.normed_ring</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 276929509,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648500675
    },
    {
        "content": "<p>The cast from <code>units (matrix n n 𝕜)</code> to <code>matrix n n 𝕜</code> went too far and turned it just to <code>n → n → 𝕜</code>.</p>",
        "id": 276929621,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648500725
    },
    {
        "content": "<p>That coercion behavior has been causing trouble in some of the modular forms PRs too</p>",
        "id": 276931044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648501460
    },
    {
        "content": "<p>I think lean inserts a <code>coe_fn</code> too eagerly?</p>",
        "id": 276931076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648501477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, is there any reason to pick the <code>L1-to-L∞</code> norm over say the operator norm or the frobenius norm? Do you have a feel for which will be easiest to show submulltiplicity of?</p>",
        "id": 279066565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650016810
    },
    {
        "content": "<p>Answer: Yes, the <code>L1-to-L∞</code> norm imposes much weaker typeclass requirements than the frobenius norm!</p>\n<p>I've PR'd a proof of your <code>norm_mul := sorry</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/13518\">#13518</a></p>",
        "id": 279417918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650379231
    }
]