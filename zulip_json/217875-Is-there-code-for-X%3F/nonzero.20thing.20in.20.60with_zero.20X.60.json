[
    {
        "content": "<p>Because <code>with_zero</code> is irreducible I would expect to see some kind of <code>with_zero.rec</code> or <code>with_zero.elim</code> which I can use to do basic stuff. But I can't find it. How do I make the following definition without locally marking <code>with_zero</code> as reducible? Or am I supposed to make it reducible for the purposes of the definition and then make the API?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- The term of type α corresponding to a non-zero element of `with_zero α`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_nonzero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- is `rfl` too much to ask for?</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nonzero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_zero.coe_ne_zero</span> <span class=\"n\">α</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 252341406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631035802
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- The term of type α corresponding to a non-zero element of `with_zero α`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">to_nonzero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">with_zero.ne_zero_iff_exists.mp</span> <span class=\"n\">hP</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_nonzero_spec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">to_nonzero</span> <span class=\"n\">hP</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">with_zero.ne_zero_iff_exists.mp</span> <span class=\"n\">hP</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span>\n\n\n<span class=\"c1\">-- is `rfl` too much to ask for?</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nonzero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_zero.coe_ne_zero</span> <span class=\"n\">α</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span> <span class=\"o\">)),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now I can't find the fact that coe is injective...</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252344140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631036939
    },
    {
        "content": "<p>Oh, that's silly... we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_zero.coe_inj\">docs#with_zero.coe_inj</a> but it's an iff not a <code>function.injective</code> statement.</p>",
        "id": 252344415,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631037064
    },
    {
        "content": "<p>I guess this is just like when one has an injective map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">\\iota : X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and you want to produce an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> given a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>:</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">y : Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is in the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi></mrow><annotation encoding=\"application/x-tex\">\\iota</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ι</span></span></span></span>.</p>",
        "id": 252344775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631037195
    },
    {
        "content": "<p>We probably have some API for this more general question.</p>",
        "id": 252344845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631037222
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">with_zero</span>\n\n<span class=\"sd\">/-- The term of type α corresponding to a non-zero element of `with_zero α`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_nonzero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"n\">rfl</span><span class=\"o\">)},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nonzero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_zero.coe_ne_zero</span> <span class=\"n\">α</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>is one way of doing it, but I feel a bit dirty making <code>with_zero</code> locally reducible (not least because I was one of the people clamouring to make it irreducible)</p>",
        "id": 252345501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631037476
    },
    {
        "content": "<p>Do we have an analog to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_bot.rec_bot_coe\">docs#with_bot.rec_bot_coe</a>?</p>",
        "id": 252369721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631047683
    }
]