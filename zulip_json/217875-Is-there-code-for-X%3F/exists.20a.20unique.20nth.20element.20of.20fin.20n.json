[
    {
        "content": "<p>Was curious whether anyone had ideas for shortening this proof of<br>\n\"There is a fourth element of fin 4\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ</span> <span class=\"bp\">⊆</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.card</span> <span class=\"bp\">≤</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n    <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">finset.card_le_of_subset</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.to_finset_card_le</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>P.S. Big thanks to <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>  for the above proof!</p>",
        "id": 265364404,
        "sender_full_name": "Evan Lohn",
        "timestamp": 1639777332
    },
    {
        "content": "<p>This looks very short already. We needed the version for <code>fin 3</code> a while back and couldn't find better. Small numbers are hard. I mean it.</p>",
        "id": 265365345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639777809
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fintype.list_covers</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.card</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">list.to_finset_card_le</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.eq_univ_iff_forall.2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">suffices</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">not_or_distrib</span><span class=\"o\">],</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">fintype.list_covers</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 265366132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639778349
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 265379388,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1639786644
    },
    {
        "content": "<p>Small numbers are easy now ;-)</p>",
        "id": 265379457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639786707
    }
]