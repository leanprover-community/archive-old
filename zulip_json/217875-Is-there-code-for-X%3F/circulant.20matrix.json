[
    {
        "content": "<p>Is any version of the notion \"circulant matrix\" defined in mathlib?</p>",
        "id": 247465129,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627481979
    },
    {
        "content": "<p>I've never heard of it. I don't think it's in mathlib.</p>",
        "id": 247465715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627482213
    },
    {
        "content": "<p>I assume the definition you're looking for is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">circulant</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 247469701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627483959
    },
    {
        "content": "<p>Or <code>((∘) c) ∘ has_sub.sub</code> if you're feeling masochistic / point-free</p>",
        "id": 247469983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627484091
    },
    {
        "content": "<p>Is \"point-free\" a euphemism of \"pointless\"?</p>",
        "id": 247470220,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627484204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> what is the benefit of using the equation compiler over a lambda expression?</p>",
        "id": 247472646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627485284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/circulant.20matrix/near/247470220\">said</a>:</p>\n<blockquote>\n<p>Is \"point-free\" a euphemism of \"pointless\"?</p>\n</blockquote>\n<p>c.f. with \"pointless topology\",  \"Pointless Celebrities\" and \"abstract nonsense\" ;b I think some FP purists really like not using λs when unnecessary</p>",
        "id": 247472763,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627485356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Doesn't that definition hit against the issue with <code>fin n</code> saturating subtraction?</p>",
        "id": 247473651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627485798
    },
    {
        "content": "<p>We use pointfree implicitly when we consider addition of terms of \"C_infty\", for example. With the right abstractions, it's easier to prove things about things without having to use extensionality.</p>",
        "id": 247473666,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627485811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/circulant.20matrix/near/247473651\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> Doesn't that definition hit against the issue with <code>fin n</code> saturating subtraction?</p>\n</blockquote>\n<p>The issue with fin n saturating subtraction is that everyone thinks that fin n has saturating subtraction. It does not : <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sub/src\">src#fin.sub</a>.</p>",
        "id": 247474080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627486025
    },
    {
        "content": "<p>Ah, that's probably just me and other old hands then</p>",
        "id": 247474210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627486083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/circulant.20matrix/near/247472646\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> what is the benefit of using the equation compiler over a lambda expression?</p>\n</blockquote>\n<p>It seems to be the pattern in the matrix library. It means that <code>simp [circulant]</code> refuses to make progress on a goal of <code>X = circulant c</code>, and will only unfold circulant if the goal state is <code>X i j = circulant c i j</code>. I don't know if that's a good thing, but it's certainly a measurable difference.</p>",
        "id": 247474265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627486105
    },
    {
        "content": "<p>I don't know if it's a good thing either, but it is certainly a very reasonable thing.<br>\nThanks for explaining! I'll probably make use of this in the future.</p>",
        "id": 247474841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627486355
    },
    {
        "content": "<p>You normally get the same behavior by moving the arguments left of the colon, but here that would be undesirable because it would prevent you from using the <code>matrix</code> abbreviation</p>",
        "id": 247475176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627486535
    },
    {
        "content": "<p>How can I prolong the time for <code>#eval</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test2</span>\n</code></pre></div>\n<p><code>fin 19</code> may be fine, but <code>fin 20</code> will time out for a nontrivial example.</p>",
        "id": 247482445,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627489928
    },
    {
        "content": "<p>You can try changing the setting lean.timeLimit in the vscode settings (once you open settings you should be able to search for this).<br>\nWhy would you want to eval that though?</p>",
        "id": 247484682,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627490947
    },
    {
        "content": "<p>I am just exploring things here.</p>",
        "id": 247485806,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627491503
    },
    {
        "content": "<p>You can't use <code>#eval</code> in proofs, and if you just want to do computations you might be better off using a computer algebra package.</p>",
        "id": 247486314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627491712
    },
    {
        "content": "<p>Is <code>norm_num</code> kind of equivalent to <code>#eval</code>?</p>",
        "id": 247486443,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627491757
    },
    {
        "content": "<p>no, not at all! <code>norm_num</code> is checked by the kernel!</p>",
        "id": 247486486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627491775
    },
    {
        "content": "<p>You can certainly use <code>norm_num</code> in proofs.</p>",
        "id": 247486507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627491786
    },
    {
        "content": "<p>you could say that <code>norm_num</code> aspires to be <code>#eval</code></p>",
        "id": 247486536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627491804
    },
    {
        "content": "<p>but with proofs</p>",
        "id": 247486558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627491811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/circulant.20matrix/near/247486536\">said</a>:</p>\n<blockquote>\n<p>you could say that <code>norm_num</code> aspires to be <code>#eval</code></p>\n</blockquote>\n<p>I would say vice versa</p>",
        "id": 247486595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627491824
    },
    {
        "content": "<p>What do you hope to get when you evaluate a matrix? A 19x19 table representing the coefficients given the standard basis?</p>",
        "id": 247486729,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627491867
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 247486778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627491891
    },
    {
        "content": "<p>i.e. <code>![![1, 2], ![3, 4]]</code></p>",
        "id": 247486836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627491916
    },
    {
        "content": "<p>Probably not the best representation for sparse matrices though.</p>",
        "id": 247486846,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627491921
    },
    {
        "content": "<p>But yeah makes sense for a matrix of arbitrary small size</p>",
        "id": 247486990,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627491977
    },
    {
        "content": "<p>I haven't gone  into a proof. I am just exploring things here.<br>\n<span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/circulant.20matrix/near/247486729\">said</a>:</p>\n<blockquote>\n<p>What do you hope to get when you evaluate a matrix? A 19x19 table representing the coefficients given the standard basis?</p>\n</blockquote>",
        "id": 247487012,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627491993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/circulant.20matrix/near/247486486\">said</a>:</p>\n<blockquote>\n<p>no, not at all! <code>norm_num</code> is checked by the kernel!</p>\n</blockquote>\n<p>Could anyone say a bit more about the difference between <code>norm_num</code> and <code>#eval</code> when applied to an expression?</p>",
        "id": 247487219,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627492093
    },
    {
        "content": "<p><code>#eval</code> compiles your lean expression into VM bytecode and then runs it in the interpreter. As long as the interpreter is correct this should work, but there are no associated proofs, it's just running code</p>",
        "id": 247487718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627492325
    },
    {
        "content": "<p>#eval takes a term for a particular type, and attempts to evaluate the term. If it is normal form already, it will display it using its representation, given by the has_repr instance. If it is not in normal form, for example, a function applied to a term, it will try to evaluate the applied function, then do the thing described above to the resulting term.</p>",
        "id": 247487771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627492354
    },
    {
        "content": "<p><code>norm_num</code> pattern matches on the expression to produce a proof that the expression is equal to the normalized value, using lemmas for each step. As a result everything is proven correct, and it uses <code>#eval</code> under the hood as an oracle in places (for example, when proving that something is prime or not, it first checks whether the number is actually prime or composite in order to determine how the proof is going to go)</p>",
        "id": 247487967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627492444
    },
    {
        "content": "<p>In principle, anything that can be <code>#eval</code>'d can also be evaluated in a proof producing way, but the key tactic for this is missing (it is called the <code>cbv</code> tactic in coq). Maybe we can finally have this in lean 4</p>",
        "id": 247488296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627492565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/circulant.20matrix/near/247488296\">said</a>:</p>\n<blockquote>\n<p>In principle, anything that can be <code>#eval</code>'d can also be evaluated in a proof producing way, but the key tactic for this is missing (it is called the <code>cbv</code> tactic in coq). Maybe we can finally have this in lean 4</p>\n</blockquote>\n<p>Why isn't <code>norm_num</code> the key tactic for this purpose? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 247488897,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627492864
    },
    {
        "content": "<p>It doesn't handle general CIC reduction, it only knows about integer functions for the most part, and every function has to have a manual implementation, it does not look at the definition at all</p>",
        "id": 247489257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627493039
    },
    {
        "content": "<p>it calls <code>simp</code>, which can sometimes make it over little hurdles, but it's not enough to evaluate arbitrary functions on lists and such</p>",
        "id": 247489357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627493082
    },
    {
        "content": "<p>The fact that functions are all reimplemented is more of a strength than a weakness, because following lean's actual implementation of <code>nat.add</code> et al would lead to exponential time performance</p>",
        "id": 247489599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627493178
    },
    {
        "content": "<p>but it's not what <code>#eval</code> would do</p>",
        "id": 247489631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627493198
    }
]