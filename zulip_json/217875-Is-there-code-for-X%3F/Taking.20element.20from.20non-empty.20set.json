[
    {
        "content": "<p>Hi, I'm fairly new to Lean, which could be why I'm failing to find something I'd really expect to exist in mathlib.<br>\nEssentially I'd like to have a way to take an element from a set that I know is non-empty. Currently I'm using the following, but there's probably a cleaner alternative:</p>\n<p><code>constant element {γ: Type*} {S: set γ}: S ≠ ∅ -&gt; S</code></p>",
        "id": 316731034,
        "sender_full_name": "sty",
        "timestamp": 1671453661
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nonempty_iff_ne_empty\">docs#set.nonempty_iff_ne_empty</a>, so you can implement that with <code>(set.nonempty_iff_ne_empty.mpr h).some</code></p>",
        "id": 316731770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671453876
    },
    {
        "content": "<p>The explanation is that <code>S ≠ ∅</code> is not the preferred spelling of saying that a set is not empty, <code>S.nonempty</code> is</p>",
        "id": 316731842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671453906
    },
    {
        "content": "<p>As far as lean's concerned, this is the axiom of choice, by the way</p>",
        "id": 316731870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671453916
    },
    {
        "content": "<p>Right, as explained in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nonempty.some\">docs#set.nonempty.some</a></p>",
        "id": 316732562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671454136
    },
    {
        "content": "<p>Note that if you're in a proof and your step is \"pick an arbitrary element from the nonempty set\", often you don't need to use choice, and can just use the <code>cases</code> tactic</p>",
        "id": 316732703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671454189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Taking.20element.20from.20non-empty.20set/near/316732703\">said</a>:</p>\n<blockquote>\n<p>Note that if you're in a proof and your step is \"pick an arbitrary element from the nonempty set\", often you don't need to use choice, and can just use the <code>cases</code> tactic</p>\n</blockquote>\n<p>How do I use <code>cases</code> in such a way?</p>",
        "id": 316754640,
        "sender_full_name": "sty",
        "timestamp": 1671459690
    },
    {
        "content": "<p>If you have <code>h : S.nonempty</code> then use <code>cases h with x hx</code></p>",
        "id": 316755981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671460024
    },
    {
        "content": "<p>You've asked for a function which needs a nonconstructive proof, but if actually your goal is a Prop then you don't need to move from the Prop world to the Type world so you can avoid AC/nonconstructivism. The <code>cases</code> tactic won't eliminate into <code>Type</code> but it will work in tactic mode if your goal is a <code>Prop</code>.</p>",
        "id": 316758468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671460706
    }
]