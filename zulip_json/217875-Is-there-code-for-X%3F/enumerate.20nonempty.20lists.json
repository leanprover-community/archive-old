[
    {
        "content": "<p>Is there a function like <code>def flatten {ι : Type*} (f : ℕ → {l : list ι // l ≠ []}) : ℕ → ι</code> or similar? Given a sequence of nonempty lists, it should enumerate the elements of the lists in order.</p>",
        "id": 267153406,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641533735
    },
    {
        "content": "<p>Where <code>n</code> is the n-th element of the lists, when they've all be concatenated and sorted?</p>",
        "id": 267154101,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641534621
    },
    {
        "content": "<p>Sorry, \"in order\" is ambiguous there. I mean \"in the order they appear.\" So if <code>f 0 = [a, b], f 1 = [c], f 2 = [a, d, c], ...</code>, I want the outpu to be <code>a, b, c, a, d, c, ...</code></p>",
        "id": 267154360,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641535040
    },
    {
        "content": "<p>No sorting needed.</p>",
        "id": 267154369,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641535056
    },
    {
        "content": "<p>The <code>n</code>th element of the infinite concatenation</p>",
        "id": 267154413,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641535086
    },
    {
        "content": "<p>I feel like you shoudn't require the lists to be nonempty. Then what you're asking for is roughly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.join\">docs#list.join</a> composed with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth\">docs#list.nth</a>, but there's still a gap.</p>",
        "id": 267155509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641536506
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.join\">docs#list.join</a> is for (finite) lists of lists, but the question is about <code>nat -&gt; list</code>, which is infinite. Also, if lists are allowed to be empty, then for some number the result may be undefined.</p>\n<p>I wrote this definition (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]})</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]}</span> <span class=\"o\">:=</span>\n<span class=\"n\">dite</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_eq_self</span><span class=\"o\">,</span> <span class=\"n\">length_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]})</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span> <span class=\"n\">xs</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]})</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">head</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 267155916,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641537092
    },
    {
        "content": "<p>If the lists aren't nonempty, such a function may not exist: I can define <code>f : ℕ → list empty</code> but not <code>f : ℕ → empty</code>.</p>",
        "id": 267155921,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641537102
    },
    {
        "content": "<p>Thanks, Patrick, that's clever -- gotta process that one a bit.</p>",
        "id": 267156086,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641537276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/enumerate.20nonempty.20lists/near/267155916\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.join\">docs#list.join</a> is for (finite) lists of lists, but the question is about <code>nat -&gt; list</code>, which is infinite. Also, if lists are allowed to be empty, then for some number the result may be undefined.</p>\n</blockquote>\n<p>I am aware of that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 267156213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641537440
    },
    {
        "content": "<p>Bedtime for me, but a challenge if you're in the mood to test your definition <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]})</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]}</span> <span class=\"o\">:=</span>\n<span class=\"n\">dite</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_eq_self</span><span class=\"o\">,</span> <span class=\"n\">length_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]})</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span> <span class=\"n\">xs</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flatten'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]})</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">head</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">flatten'</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">flatten'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">k</span><span class=\"o\">⟩)</span>\n\n<span class=\"c1\">-- `f` collects elements of `α` that have the same value under the map `v`,</span>\n<span class=\"c1\">-- and collects them ordered by this value</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">hv1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hv2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">hv1</span> <span class=\"n\">hv2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">flatten_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 267156907,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641538424
    },
    {
        "content": "<p>Note that you could also define the analogous thing for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>, so maybe this should have a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>-specific name.</p>",
        "id": 267156986,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641538543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Thank you for the nice challenge! Here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">flatten_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hv1</span> <span class=\"n\">hv2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">flatten'</span><span class=\"o\">,</span> <span class=\"n\">flatten'</span><span class=\"o\">,</span> <span class=\"n\">flatten'</span><span class=\"o\">,</span> <span class=\"n\">f₁</span><span class=\"o\">],</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hv2</span><span class=\"bp\">;</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">head_mem_self</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hf</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_eq</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hv1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">head_mem_self</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mem_of_mem_tail</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">head_mem_self</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">length_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}}}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">generalize</span> <span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">n</span><span class=\"o\">⟩)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f'</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"o\">[],</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f₁</span><span class=\"o\">,</span>\n      <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢;</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">length_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}}},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn₁</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">f'</span> <span class=\"n\">hf'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">f'</span> <span class=\"n\">hf'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">hn</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f₁</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n        <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"bp\">;</span>\n        <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hv1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hv1</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">mem_of_mem_tail</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">dunfold</span> <span class=\"n\">f₁</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n        <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hv2</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hv2</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mem_of_mem_tail</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"o\">}},</span>\n        <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">hi</span> <span class=\"o\">:=</span> <span class=\"n\">mem_of_mem_tail</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hv2</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}},</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hv2</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}}},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">flatten</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">flatten</span> <span class=\"n\">f'</span> <span class=\"n\">hf'</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">flatten'</span><span class=\"o\">],</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">f'</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"n\">f₁</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">hn₁</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267164079,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641545140
    },
    {
        "content": "<p>You can also implement <code>flatten</code> using streams:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.stream.init</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">head_of_ne_nil</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">ls</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">h</span>        <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"sd\">/-- `flatten_aux (ls, s₀ :: s₁ :: ...) = ls ++ₛ s₀ ++ₛ s₁ ++ ...` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">flatten_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"o\">{</span> <span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">ls</span> <span class=\"bp\">≠</span> <span class=\"o\">[]}</span> <span class=\"bp\">→</span> <span class=\"n\">stream</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">stream.corec'</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ls</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([],</span> <span class=\"n\">s</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">head_of_ne_nil</span> <span class=\"n\">s.head.2</span><span class=\"o\">,</span> <span class=\"n\">s.head.val.tail</span><span class=\"o\">,</span> <span class=\"n\">s.tail</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"o\">{</span> <span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">ls</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">flatten_aux</span> <span class=\"o\">([],</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267170812,
        "sender_full_name": "David Wärn",
        "timestamp": 1641549736
    },
    {
        "content": "<p>Fantastic, thanks <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> !</p>",
        "id": 267198087,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641567539
    },
    {
        "content": "<p>And thanks again <span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 267198116,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641567551
    }
]