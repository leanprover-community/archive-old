[
    {
        "content": "<p>Do we have this (or an easy proof of this) somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_tsub_add_le_tsub_add_tsub</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">tsub_eq_zero_of_le</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h₂</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_eq_zero_of_le</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_tsub_le</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_tsub_le_assoc.trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">h₂</span> <span class=\"n\">tsub_tsub_le</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h₃</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_eq_zero_of_le</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_tsub_le</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">c</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_tsub_le_assoc.trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">h₃</span> <span class=\"n\">tsub_tsub_le</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.coe_nat_le_coe_nat_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_sub</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">],</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288279598,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1656781135
    },
    {
        "content": "<p>The equality is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsub_add_tsub_comm\">docs#tsub_add_tsub_comm</a></p>",
        "id": 288279622,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656781197
    },
    {
        "content": "<p>This is a proof with a more reasonable length</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_tsub_add_le_tsub_add_tsub</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">tsub_tsub</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">tsub_le_tsub_right</span> <span class=\"n\">add_tsub_le_assoc</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_tsub_le_assoc</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288279779,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1656781401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>, did you ever PR the above? If not, I am about to PR very similar lemmas so I'll include that one.</p>",
        "id": 289215108,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657556180
    },
    {
        "content": "<p>It is somewhere in <a href=\"https://github.com/leanprover-community/mathlib/pull/15105\">#15105</a>, but the right thing to do is probably to put this lemma in your PR and to make my PR depend on it.</p>",
        "id": 289215631,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657556470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Did you end up PRing the lemma?</p>",
        "id": 289885233,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658064961
    },
    {
        "content": "<p>I was working on it this morning. I can probably finish it up now.</p>",
        "id": 289886267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658066066
    },
    {
        "content": "<p>I see. In this case, I think I will merge my PR containing it (<a href=\"https://github.com/leanprover-community/mathlib/pull/15459\">#15459</a>) first, so you can leave it out from your PR?</p>",
        "id": 289892602,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658075116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>, here you go: <a href=\"https://github.com/leanprover-community/mathlib/pull/15497\">#15497</a></p>",
        "id": 289985205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658159621
    }
]