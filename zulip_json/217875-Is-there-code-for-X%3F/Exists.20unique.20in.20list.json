[
    {
        "content": "<p>Do we have a simple statement to state that a term that is in a list occurs only once in the list?</p>",
        "id": 238006930,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620533849
    },
    {
        "content": "<p>We must have something because of how finset is defined</p>",
        "id": 238007347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620534330
    },
    {
        "content": "<p><code>nodup l</code> says that every single element exists only once. I mean that condition, but only on a single element.</p>",
        "id": 238007416,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620534419
    },
    {
        "content": "<p>Ah list.nodup uses pairwise...</p>",
        "id": 238007432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620534443
    },
    {
        "content": "<p>You can always filter the list with the prop <code>=x</code> and say something about the length of the result</p>",
        "id": 238007454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620534478
    },
    {
        "content": "<p>Basically, there is a stronger statement than this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">support_le_prod_of_me</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.pairwise</span> <span class=\"n\">disjoint</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f.support</span> <span class=\"bp\">≤</span> <span class=\"n\">l.prod.support</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">l</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.prod_cons</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">disjoint_prod_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support_mul</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset_union_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset.trans</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">list.pairwise_of_pairwise_cons</span> <span class=\"n\">hl</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">subset_union_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">list.rel_of_pairwise_cons</span> <span class=\"n\">hl</span> <span class=\"n\">hg</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238007583,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620534622
    },
    {
        "content": "<p>Where you don't have to have <code>l.pairwise disjoint</code>, just <code>disjoint f g</code> for all <code>g \\in l</code>, as long as <code>f \\ne g</code> and <code>f</code> is in the list only once.</p>",
        "id": 238007608,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620534657
    }
]