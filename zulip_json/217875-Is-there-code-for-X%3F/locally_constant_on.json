[
    {
        "content": "<p>I have two \"human powered library search\" questions about locally constant functions on connected spaces/sets.</p>",
        "id": 286385058,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1655400148
    },
    {
        "content": "<p>(1) I could not locate the following triviality. Is it not in mathlib, and if not, why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.locally_constant.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_locally_constant.is_constant_of_connected_space</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">connected_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_loc_cst</span> <span class=\"o\">:</span> <span class=\"n\">is_locally_constant</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">con</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">U_def</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">U_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">is_locally_constant.is_open_fiber</span> <span class=\"n\">f_loc_cst</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">Uc_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_locally_constant.is_closed_fiber</span> <span class=\"n\">f_loc_cst</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">),</span> <span class=\"n\">is_open_compl_iff</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">U_nonemp</span> <span class=\"o\">:</span> <span class=\"n\">U.nonempty</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Uc_nonemp</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">con</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">]⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">connected_space</span> <span class=\"n\">X</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"n\">is_preconnected_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"n\">U</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span> <span class=\"n\">U_open</span> <span class=\"n\">Uc_open</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">union_compl_self</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">U_nonemp</span><span class=\"o\">,</span> <span class=\"n\">univ_inter</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Uc_nonemp</span><span class=\"o\">,</span> <span class=\"n\">univ_inter</span><span class=\"o\">]),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286385147,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1655400188
    },
    {
        "content": "<p>(2) What is the canonical spelling of \"being locally constant on a set\"? I guess<code>is_locally_constant (subtype.restrict A f)</code> for <code>(f : X → Y) (A : set X)</code> is one clumsy spelling... I expected to find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_locally_constant_on\">docs#is_locally_constant_on</a>, but didn't. Presumably typically one would, for example, like to conclude something like the above <code>is_locally_constant.is_constant_of_connected_space</code> but on a connected subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">A \\subseteq X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, i.e., have a similar lemma <code>is_locally_constant.is_constant_of_is_connected</code>.</p>",
        "id": 286385329,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1655400259
    },
    {
        "content": "<p>For 1 <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_locally_constant.apply_eq_of_is_preconnected\">docs#is_locally_constant.apply_eq_of_is_preconnected</a> is fairly close but probably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_locally_constant.apply_eq_of_preconnected_space\">docs#is_locally_constant.apply_eq_of_preconnected_space</a> should be added too</p>",
        "id": 286385625,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655400379
    },
    {
        "content": "<p>Thanks! I like the fact that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_locally_constant.apply_eq_of_is_preconnected\">docs#is_locally_constant.apply_eq_of_is_preconnected</a> is on sets. But the good assumption should be locally constantness of the function on that set, right?</p>",
        "id": 286385773,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1655400472
    },
    {
        "content": "<p>In other words, isn't it too restrictive to require locally constantness everywhere by <code>is_locally_constant</code>? This is why I wanted <code>is_locally_constant_on</code>.</p>",
        "id": 286386217,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1655400649
    },
    {
        "content": "<p>To me that certainly sounds like a useful notion, and I can't find it anywhere either, I guess just nobody needed it so far?</p>",
        "id": 286387231,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655401124
    }
]