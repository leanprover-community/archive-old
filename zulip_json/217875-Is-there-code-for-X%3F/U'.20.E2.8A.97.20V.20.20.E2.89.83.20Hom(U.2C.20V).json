[
    {
        "content": "<p>Do we have something like this ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dual</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_equiv_hom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">module.dual</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 266014267,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1640366269
    },
    {
        "content": "<p>I think this is en route in <a href=\"https://github.com/leanprover-community/mathlib/pull/10372\">#10372</a></p>",
        "id": 266015192,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640367660
    },
    {
        "content": "<p>Anatole, if you ask this in relation to the sphere eversion project, you should know we already have enough using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.to_span_singleton\">docs#continuous_linear_map.to_span_singleton</a> that can be used as in <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/ef9c5e678f2f7270a40592b581855e30f7ae973f/src/to_mathlib/measure_theory/parametric_interval_integral.lean#L405-L418\">https://github.com/leanprover-community/sphere-eversion/blob/ef9c5e678f2f7270a40592b581855e30f7ae973f/src/to_mathlib/measure_theory/parametric_interval_integral.lean#L405-L418</a></p>",
        "id": 266052540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640426916
    },
    {
        "content": "<p>No no, it was because I proved this isomorphism on my own to try working with tensor product, so I was wondering if I should make a PR out of it</p>",
        "id": 266061683,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1640442642
    },
    {
        "content": "<p>Although in the case I have in mind I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.smul_right\">docs#continuous_linear_map.smul_right</a> would be better since it doesn't \"restrict\" the domain to K</p>",
        "id": 266062006,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1640443297
    }
]