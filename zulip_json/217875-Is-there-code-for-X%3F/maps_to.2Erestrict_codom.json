[
    {
        "content": "<p>I know about <code>maps_to.restrict</code>, but is this in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">maps_to.restrict_codom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">maps_to</span> <span class=\"n\">f</span> <span class=\"n\">univ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 244760993,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625262419
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.maps_to.restrict\">docs#set.maps_to.restrict</a> for reference)</p>",
        "id": 244762339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625263524
    },
    {
        "content": "<p>I ask because there exists as well <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.restrict\">docs#set.restrict</a></p>",
        "id": 244764125,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625265062
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set.univ\">docs#equiv.set.univ</a> composed with restrict looks like it gives what you want</p>",
        "id": 244764500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625265408
    },
    {
        "content": "<p>But your version reduces definitionally in a nicer way I suspect</p>",
        "id": 244764752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625265609
    },
    {
        "content": "<p>It does but I was wondering if there were a direct definition with some API, as there is for <code>set.restrict</code> (<code>set.restrict</code> could also be recovered in other ways, but it still worth having it)</p>",
        "id": 244764800,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625265666
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.coind\">docs#subtype.coind</a> close?</p>",
        "id": 244765802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625266610
    },
    {
        "content": "<p>(since <code>coe_sort s</code> is the same as <code>subtype (∈ s)</code>)</p>",
        "id": 244766066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625266868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/maps_to.2Erestrict_codom/near/244765802\">said</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.coind\">docs#subtype.coind</a> close?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 244937733,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625492838
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8200\">#8200</a></p>",
        "id": 244937973,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625492971
    },
    {
        "content": "<p>For future reference, it turns out it already existed as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.cod_restrict\">docs#set.cod_restrict</a></p>",
        "id": 245040433,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625579199
    },
    {
        "content": "<p>A question for others reading this thread: Do we still want another def for convenience?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Alias of `set.cod_restrict` for dot notation -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">maps_to.cod_restrict</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">maps_to</span> <span class=\"n\">f</span> <span class=\"n\">univ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t.cod_restrict</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">t.maps_univ_to</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>If so, should it be <code>@[simp]</code>? <code>abbreviation</code>? Both?</p>",
        "id": 245041002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625579451
    },
    {
        "content": "<p>In case, I propose instead that <code>cod_restrict</code> be refactored to this one (also, <code>cod_restrict</code> has a lot of unnecessary explicit parameters that should be refactored). I actually believe we should give another name to <code>maps_to f univ</code>, like <code>has_image_in</code> or <code>set.contains_image_of</code>, and refactor with that one.</p>",
        "id": 245041612,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625579723
    },
    {
        "content": "<p>Right, we already have <code>set.range f ⊆ s</code> as yet another spelling of <code>maps_to f univ s</code>, but that unfolds to <code>∀ ⦃x : β⦄, (∃ (y : α), f y = x) → x ∈ s</code> which is much worse than <code>∀ y, f y ∈ s</code> which is how I assume you propose we define <code>has_image_in</code></p>",
        "id": 245043022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625580328
    },
    {
        "content": "<p>Yes, even though the main reason why I propose <code>has_image_in</code> is to use dot notation. Could we use dot notation with <code>set.range f ⊆ s</code>?</p>",
        "id": 245043519,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625580525
    },
    {
        "content": "<p>Also, for personal culture, what are the parentheses <code>⦃</code> in the expression you wrote?</p>",
        "id": 245043666,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625580591
    },
    {
        "content": "<p>If I have <code>h : ∀ ⦃x : β⦄, p x → β</code> and <code>hx : p x</code>, then applying one to the other gives<code>h hx : β</code></p>",
        "id": 245045363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625581335
    },
    {
        "content": "<p>If those were <code>{}</code> then lean would eagerly remove <code>x</code> before I apply it</p>",
        "id": 245045440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625581372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/maps_to.2Erestrict_codom/near/245043519\">said</a>:</p>\n<blockquote>\n<p>Yes, even though the main reason why I propose <code>has_image_in</code> is to use dot notation. Could we use dot notation with <code>set.range f ⊆ s</code>?</p>\n</blockquote>\n<p>What about this one?</p>",
        "id": 245056448,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625585775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/maps_to.2Erestrict_codom/near/245045440\">said</a>:</p>\n<blockquote>\n<p>If those were <code>{}</code> then lean would eagerly remove <code>x</code> before I apply it</p>\n</blockquote>\n<p>Thanks! I am not sure I understand what \"eagerly remove <code>x</code> before I apply it\" means but I guess I will find out when I will need to face this problem</p>",
        "id": 245056544,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625585822
    },
    {
        "content": "<p>What is the current name for exists_mem_of_ne_empty which apparently says roughly `lemma nonempty_of_nonempty {α : Type*} {A : set α} : A ≠ ∅ → ∃ x, x ∈ A?</p>",
        "id": 245104413,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1625608986
    }
]