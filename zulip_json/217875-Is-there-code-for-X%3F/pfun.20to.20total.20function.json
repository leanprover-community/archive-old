[
    {
        "content": "<p>I don't see a function that takes an <code>f : α →. β</code> and gives me back <code>f.dom → β</code>. The closest seems to be <code>pfun.fn</code>. Or am I not looking hard enough?</p>",
        "id": 278412167,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649513698
    },
    {
        "content": "<p>What type is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun.dom\">docs#pfun.dom</a>?</p>",
        "id": 278412768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649514621
    },
    {
        "content": "<p>You're looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun.as_subtype\">docs#pfun.as_subtype</a></p>",
        "id": 278412789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649514698
    },
    {
        "content": "<p>Did you try <code>library_search</code>?</p>",
        "id": 278412794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649514708
    },
    {
        "content": "<p>Ah, that's what it's called. No, I didn't try library_search for this.</p>",
        "id": 278413050,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649515064
    },
    {
        "content": "<p>Hmm... is there an equivalent to pfun but for option?  data.pfun has a lot of functions that I need, but I need option versions.</p>",
        "id": 278414791,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649517404
    },
    {
        "content": "<p>Can you write your question as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? If you do, then library_search might be able to answer it</p>",
        "id": 278415641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649518669
    },
    {
        "content": "<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">is_some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 278417800,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649521441
    },
    {
        "content": "<p>Hmm... I realize that I need to talk about \"nondegenerate\" α → option β functions, i.e. there is at least one value that produces a <code>some</code>.</p>",
        "id": 278417976,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649521665
    },
    {
        "content": "<p>That seems less likely to exist (and maybe less worthwhile to have in mathlib), but should be trivial to define for your own use</p>",
        "id": 278418810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649522738
    },
    {
        "content": "<p>Something like <code> λ a, (f a).get (f a).prop</code></p>",
        "id": 278418885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649522810
    }
]