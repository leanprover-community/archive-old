[
    {
        "content": "<p>I need a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.lex_wf\">docs#prod.lex_wf</a> where I don't need to check well-foundedness of the second relation on the entire domain (because it doesn't hold in my case), but only on fibers of the first relation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.well_founded_set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rα</span> <span class=\"o\">:</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">well_founded.prod_lex</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"n\">rα</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">well_founded_on</span> <span class=\"o\">(</span><span class=\"n\">rβ</span> <span class=\"n\">on</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"n\">prod.lex</span> <span class=\"n\">rα</span> <span class=\"n\">rβ</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 319096962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672695041
    },
    {
        "content": "<p>Surely <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> can't resist a good well-foundedness puzzle? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 319096989,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672695061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Here's one proof (by reducing to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psigma.lex_wf\">docs#psigma.lex_wf</a>); I try to do a direct proof with <code>acc</code> but am not successful yet.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.well_founded_set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.sigma.lex</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rα</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">well_founded_on_range</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">well_founded_on</span> <span class=\"n\">rα</span> <span class=\"bp\">↔</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"n\">rα</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">subrelation.wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv_image.wf</span> <span class=\"n\">f'</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">id</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">acc.of_downward_closed</span> <span class=\"n\">f'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h.apply</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">well_founded.prod_lex</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"n\">rα</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">well_founded_on</span> <span class=\"o\">(</span><span class=\"n\">rβ</span> <span class=\"n\">on</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"n\">prod.lex</span> <span class=\"n\">rα</span> <span class=\"n\">rβ</span> <span class=\"n\">on</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ'</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subrelation.wf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inv_image.wf</span> <span class=\"n\">p</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.lex_wf</span> <span class=\"o\">(</span><span class=\"n\">well_founded_on_range.2</span> <span class=\"n\">hα</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hβ</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">prod.lex_iff.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">psigma.lex.left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inv_image</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">on</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">psigma.lex.right</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h'.1</span><span class=\"o\">⟩,</span> <span class=\"n\">psigma.subtype_ext</span> <span class=\"o\">(</span><span class=\"n\">subtype.ext</span> <span class=\"n\">h'.1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h'.2</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319339178,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672819534
    },
    {
        "content": "<p>Thank you, that's tremendously useful! I am now only two sorries away from Cauchy-Davenport.</p>",
        "id": 319342509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672821193
    }
]