[
    {
        "content": "<p>The file <code>data/polynomial/degree/definition.lean</code> contains a lemma <code>degree_mul</code> for proving that the (with_bot) degree of a product of polynomials is the sum of the degrees of the polynomials. There doesn't seem to be a <code>degree_prod</code> though, for proving that the degree of a <a href=\"http://finset.prod\">finset.prod</a> of polynomials is the finset.sum of the degrees of the polynomials. Does this exist, and if not, can I or someone else add it?</p>",
        "id": 224437088,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1611904116
    },
    {
        "content": "<p>It seems to only exist for <code>nat_degree</code>, which is the version of <code>degree</code> that doesn't use <code>with_bot</code>.</p>",
        "id": 224438003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611905149
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ rg degree_prod\nsrc/algebra/polynomial/big_operators.lean\n<span class=\"m\">18</span>:- <span class=\"sb\">`</span>nat_degree_prod_of_monic<span class=\"sb\">`</span> : the degree of a product of monic polynomials is the product of\n<span class=\"m\">21</span>:- <span class=\"sb\">`</span>nat_degree_prod<span class=\"sb\">`</span> : <span class=\"k\">for</span> polynomials over an integral domain,\n<span class=\"m\">42</span>:lemma nat_degree_prod_le : <span class=\"o\">(</span>∏ i in s, f i<span class=\"o\">)</span>.nat_degree ≤ ∑ i in s, <span class=\"o\">(</span>f i<span class=\"o\">)</span>.nat_degree :<span class=\"o\">=</span>\n<span class=\"m\">71</span>:See <span class=\"sb\">`</span>nat_degree_prod<span class=\"sb\">`</span> <span class=\"o\">(</span>without the <span class=\"sb\">`</span><span class=\"s1\">'`) for a version for integral domains,</span>\n<span class=\"s1\">74:lemma nat_degree_prod'</span> <span class=\"o\">(</span>h : ∏ i in s, <span class=\"o\">(</span>f i<span class=\"o\">)</span>.leading_coeff ≠ <span class=\"m\">0</span><span class=\"o\">)</span> :\n<span class=\"m\">85</span>:lemma nat_degree_prod_of_monic <span class=\"o\">[</span>nontrivial R<span class=\"o\">]</span> <span class=\"o\">(</span>h : ∀ i ∈ s, <span class=\"o\">(</span>f i<span class=\"o\">)</span>.monic<span class=\"o\">)</span> :\n<span class=\"m\">88</span>:  apply nat_degree_prod<span class=\"s1\">',</span>\n<span class=\"s1\">119:  { rw nat_degree_prod_of_monic at h,</span>\n<span class=\"s1\">124:  congr, rw nat_degree_prod_of_monic; { simp [nat_degree_X_sub_C, monic_X_sub_C] },</span>\n<span class=\"s1\">132:lemma nat_degree_prod (h : ∀ i ∈ s, f i ≠ 0) :</span>\n<span class=\"s1\">135:  apply nat_degree_prod'</span>, rw prod_ne_zero_iff,\n\nsrc/ring_theory/polynomial/cyclotomic.lean\n<span class=\"m\">113</span>:  rw nat_degree_prod <span class=\"o\">(</span>primitive_roots n R<span class=\"o\">)</span> <span class=\"o\">(</span>λ <span class=\"o\">(</span>z : R<span class=\"o\">)</span>, <span class=\"o\">(</span>X - C z<span class=\"o\">))</span>,\n\nsrc/linear_algebra/char_poly/coeff.lean\n<span class=\"m\">70</span>:  apply le_trans <span class=\"o\">(</span>polynomial.nat_degree_prod_le univ <span class=\"o\">(</span>λ i : n, <span class=\"o\">(</span>char_matrix M <span class=\"o\">(</span>c i<span class=\"o\">)</span> i<span class=\"o\">)))</span> _,\n<span class=\"m\">93</span>:    rw nat_degree_prod<span class=\"err\">'</span>, simp_rw nat_degree_X_sub_C, unfold fintype.card, simp,\n</code></pre></div>",
        "id": 224438050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611905163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> so yes, feel free to make a PR (-;</p>",
        "id": 224438069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611905191
    },
    {
        "content": "<p>While looking into this, I just noticed that the doc string for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_prod'\">docs#polynomial.nat_degree_prod'</a> had a typo, so I opened a small PR: <a href=\"https://github.com/leanprover-community/mathlib/issues/5950\">#5950</a></p>",
        "id": 224438200,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611905321
    },
    {
        "content": "<p>I'm pretty sure I saw this lemma recently, and it has some extra hypotheses due to how multiplication between top and zero is defined</p>",
        "id": 224444476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611910807
    },
    {
        "content": "<p>Seems like it would be fun to try to submit a PR. However, following the instructions <a href=\"https://leanprover-community.github.io/contribute/index.html\">here</a> it tells me to run <code>leanproject get -b mathlib:shiny_lemma</code>. Doing this I get the following error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">07</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">#=#</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span><span class=\"n\">degree_prod</span>\n<span class=\"n\">Usage</span><span class=\"o\">:</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"o\">[</span><span class=\"n\">OPTIONS</span><span class=\"o\">]</span> <span class=\"n\">NAME</span> <span class=\"o\">[</span><span class=\"n\">DIRECTORY</span><span class=\"o\">]</span>\n<span class=\"n\">Try</span> <span class=\"bp\">'</span><span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"bp\">-</span><span class=\"n\">h'</span> <span class=\"n\">for</span> <span class=\"n\">help.</span>\n\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">option</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">b</span>\n</code></pre></div>",
        "id": 224616417,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612057570
    },
    {
        "content": "<p>You may need to upgrade <code>leanproject</code>. If you installed <code>mathlibtools</code> just using <code>pip</code> then <code>pip install --upgrade mathlibtools</code> should work.</p>",
        "id": 224616612,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612057951
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224616706,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612058140
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span><span class=\"mi\">22</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">#=#</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"c1\">--upgrade mathlibtools</span>\n<span class=\"n\">Collecting</span> <span class=\"n\">mathlibtools</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">Successfully</span> <span class=\"n\">installed</span> <span class=\"n\">PyGithub</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">54</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">deprecated</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">11</span> <span class=\"n\">gitdb</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"n\">gitpython</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">12</span> <span class=\"n\">mathlibtools</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">pydot</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">pyjwt</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">smmap</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n<span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">16</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">#=#</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span><span class=\"n\">degree_prod</span>\n<span class=\"n\">Usage</span><span class=\"o\">:</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"o\">[</span><span class=\"n\">OPTIONS</span><span class=\"o\">]</span> <span class=\"n\">NAME</span> <span class=\"o\">[</span><span class=\"n\">DIRECTORY</span><span class=\"o\">]</span>\n<span class=\"n\">Try</span> <span class=\"bp\">'</span><span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"bp\">-</span><span class=\"n\">h'</span> <span class=\"n\">for</span> <span class=\"n\">help.</span>\n\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">option</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">b</span>\n<span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">#=#</span>\n</code></pre></div>\n<p>I guess I didn't install using pip. Is there a way to uninstall leanproject?</p>",
        "id": 224617045,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612058709
    },
    {
        "content": "<p>In the meantime, does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n<span class=\"n\">cd</span> <span class=\"n\">mathlib</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">pr</span> <span class=\"n\">degree_prod</span>\n</code></pre></div>",
        "id": 224617164,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612058932
    },
    {
        "content": "<p>Maybe you installed it via <code>pipx</code>? If so, then <code>pipx upgrade mathlibtools</code> should work. I'm assuming you followed the instructions <a href=\"https://leanprover-community.github.io/contribute/index.html\">here</a> for a certain OS?</p>",
        "id": 224617172,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612058946
    },
    {
        "content": "<p><code>pip uninstall mathlibtools</code> ought to remove the version you installed with <code>pip</code> above.</p>",
        "id": 224617182,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612058978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  There is a lemma <code>lemma degree_mul : degree (p * q) = degree p + degree q</code> without any additional hypotheses, (which is indeed strange to me because I think it means <code>0 + \\bot</code> must be defined as <code>\\bot</code>, which contradicts the usual zero as additive identity).</p>",
        "id": 224617259,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612059084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  my leanproject has no pr command. I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Usage</span><span class=\"o\">:</span> <span class=\"n\">leanproject</span> <span class=\"o\">[</span><span class=\"n\">OPTIONS</span><span class=\"o\">]</span> <span class=\"n\">COMMAND</span> <span class=\"o\">[</span><span class=\"n\">ARGS</span><span class=\"o\">]</span><span class=\"bp\">...</span>\n<span class=\"n\">Try</span> <span class=\"bp\">'</span><span class=\"n\">leanproject</span> <span class=\"bp\">-</span><span class=\"n\">h'</span> <span class=\"n\">for</span> <span class=\"n\">help.</span>\n\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">command</span> <span class=\"bp\">'</span><span class=\"n\">pr'.</span>\n<span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">09</span><span class=\"o\">:</span><span class=\"mi\">49</span> <span class=\"n\">mathlib</span> <span class=\"bp\">#=#</span> <span class=\"n\">leanproject</span> <span class=\"c1\">--version</span>\n<span class=\"n\">leanproject</span><span class=\"o\">,</span> <span class=\"n\">version</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 224617313,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612059140
    },
    {
        "content": "<p><code>which leanproject</code>?</p>",
        "id": 224617326,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612059221
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">09</span><span class=\"o\">:</span><span class=\"mi\">59</span> <span class=\"n\">mathlib</span> <span class=\"bp\">#=#</span> <span class=\"n\">which</span> <span class=\"n\">leanproject</span>\n<span class=\"bp\">/</span><span class=\"n\">Library</span><span class=\"bp\">/</span><span class=\"n\">Frameworks</span><span class=\"bp\">/</span><span class=\"n\">Python.framework</span><span class=\"bp\">/</span><span class=\"n\">Versions</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">leanproject</span>\n<span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">58</span> <span class=\"n\">mathlib</span> <span class=\"bp\">#=#</span> <span class=\"n\">python</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Python</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">6</span>\n</code></pre></div>",
        "id": 224617403,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612059335
    },
    {
        "content": "<p>Perhaps I just need to pip upgrade in the right conda environment, one sec</p>",
        "id": 224617467,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612059468
    },
    {
        "content": "<p>Ok, yep, that was the issue, I am now on leanproject 1.0.0, thanks all for your help</p>",
        "id": 224617586,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612059683
    },
    {
        "content": "<p>Ok, I have made an implementation for this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">nontrivial_no_zero_divisors</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The degree of a product of polynomials is equal to</span>\n<span class=\"sd\">the sum of the degrees, where the degree of the zero polynomial is ⊥.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">degree_prod</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">finset.induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ha</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_insert</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">sum_insert</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.degree_mul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nontrivial_no_zero_divisors</span>\n</code></pre></div>\n<p>The contribution guide says I should ask for non-master branch write access. My github username is BoltonBailey. Can I have access?</p>",
        "id": 224623121,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612069468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 224623250,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612069659
    },
    {
        "content": "<p>Ok, pull request made! <a href=\"https://github.com/leanprover-community/mathlib/issues/5979\">#5979</a></p>",
        "id": 224629140,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612078241
    }
]