[
    {
        "content": "<p>I wonder if there are simpler ways of doing the following two lemmas of if there is some code for it which I overlooked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_series.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.bernoulli</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">power_series</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">ring_hom</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">aeval</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux_eval</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℚ</span><span class=\"o\">):</span>\n<span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">p.eval</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">polynomial.aeval_def</span><span class=\"o\">],</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">polynomial.eval</span><span class=\"o\">,</span>\n  <span class=\"n\">delta</span> <span class=\"n\">eval₂</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ring_hom.map_sum</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp.sum</span><span class=\"o\">,</span> <span class=\"n\">finsupp.sum</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_sum</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_pow</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux_smul</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">):</span>\n <span class=\"n\">q</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">algebra.commutes</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(see <a href=\"https://github.com/leanprover-community/mathlib/pull/6641\">#6641</a>  for context)</p>",
        "id": 229859076,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615473752
    },
    {
        "content": "<p>Can you make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports?</p>",
        "id": 229860570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615474259
    },
    {
        "content": "<p>sure, done</p>",
        "id": 229861449,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615474548
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux_eval</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℚ</span><span class=\"o\">):</span>\n<span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">p.eval</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aeval_alg_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229861558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615474575
    },
    {
        "content": "<p>That's already much nicer!</p>",
        "id": 229862067,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615474750
    },
    {
        "content": "<p>Or as a one-line proof with some noise</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"c1\">-- this instance causes conflicts in the proof</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">rat.algebra_rat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux_eval</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℚ</span><span class=\"o\">):</span>\n  <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">p.eval</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">aeval_alg_hom_apply</span> <span class=\"o\">(</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The key observation here is that <code>algebra_map</code> has a corresponding <code>alg_hom</code>, which you can then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.aeval_alg_hom_apply\">docs#polynomial.aeval_alg_hom_apply</a> on</p>",
        "id": 229862091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615474756
    },
    {
        "content": "<p>Would it be useful to have that lemma somewhere as <code>aeval_map_eq_map_eval</code> or should I use it in my proof only (I would probably not give it a name then, now that it is so short)?</p>",
        "id": 229863153,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615475087
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 229863417,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615475176
    },
    {
        "content": "<p>I think <code>aeval_algebra_map_apply</code> would be a reasonable lemma with that definition</p>",
        "id": 229863788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615475305
    },
    {
        "content": "<p>Except obviously generalizing over <code> ℚ</code></p>",
        "id": 229863846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615475330
    },
    {
        "content": "<p>Which also removes the need for hiding the annoying instanec</p>",
        "id": 229863885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615475340
    },
    {
        "content": "<p>second lemma is slightly shorter as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">smul_algebra_map</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">q</span> <span class=\"bp\">•</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 229864504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615475532
    },
    {
        "content": "<p>Thanks for the help, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ! I have inlined aux_eval, not sure if this would be worthwhile to add to mathlib. <br>\nMade a separate pr for the first lemma <a href=\"https://github.com/leanprover-community/mathlib/pull/6649\">6649</a></p>",
        "id": 229911232,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615491121
    }
]