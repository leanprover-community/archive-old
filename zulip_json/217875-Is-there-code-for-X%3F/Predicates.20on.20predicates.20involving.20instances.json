[
    {
        "content": "<p>Is there a smoother way to do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">hereditary</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">P</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 206434077,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597043789
    },
    {
        "content": "<p>Where I can define a predicate on predicates on groups, and then have functions like <code>P</code> and <code>subgroup</code> infer that <code>A</code> is a <code>group</code>, without repeatedly using <code>@</code>?</p>",
        "id": 206434128,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597043869
    },
    {
        "content": "<p>(My real intention is to be able to define a Fraisse class based on my definition of first-order substructure, but I think this is a good MWE based only on mathlib <a href=\"https://en.wikipedia.org/wiki/Fra%C3%AFss%C3%A9_limit\">https://en.wikipedia.org/wiki/Fra%C3%AFss%C3%A9_limit</a>)</p>",
        "id": 206434208,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597043961
    },
    {
        "content": "<p>I think something like this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 206435540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597045425
    }
]