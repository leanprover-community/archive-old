[
    {
        "content": "<p>Given a (finite) group <code>G</code>, do we already have a standard way of picking out \"the subgroup of elements satisfying predicate <code>P</code>\" (in the case where this does indeed form a subgroup)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">filtered_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>  <span class=\"o\">:=</span> <span class=\"n\">filter</span> <span class=\"n\">P</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h_mul</span> <span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h_one</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h_inv</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 292771240,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1660143523
    },
    {
        "content": "<p>Why does it have to be <code>[fintype G]</code>?</p>",
        "id": 292783173,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660147110
    },
    {
        "content": "<p>That was just so I could use <code>filter P</code> to produce the <code>carrier</code>.</p>",
        "id": 292784136,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1660147282
    },
    {
        "content": "<p>Ah, but I could use <code>{x : G | P x}</code> instead.</p>",
        "id": 292784473,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1660147364
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filtered_group</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">subgroup.mk</span> <span class=\"o\">(</span><span class=\"n\">set_of</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">h_mul</span> <span class=\"n\">h_one</span> <span class=\"n\">h_inv</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h_mul</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_one</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_inv</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">finset.univ.filter</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">filtered_group</span> <span class=\"n\">P</span> <span class=\"n\">h_mul</span> <span class=\"n\">h_one</span> <span class=\"n\">h_inv</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">filtered_group</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 292785165,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660147601
    },
    {
        "content": "<p>So <code>filtered_group</code> is just <code>subgroup.mk</code> with a <code>set_of</code></p>",
        "id": 292785209,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660147621
    },
    {
        "content": "<p>Thanks!  Is it worth PRing this with some associated API?  Or is <code>subgroup.mk (set_of P)</code> already a nice enough (and mathliby enough) way of spelling this?</p>",
        "id": 292786195,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1660148004
    },
    {
        "content": "<p>Do you already have two places where you'd use it?</p>",
        "id": 292787045,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660148294
    },
    {
        "content": "<p>I'll try using <code>subgroup.mk (set_of P)</code> in the work where the problem originally arose and see how I get on.</p>",
        "id": 292787899,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1660148602
    },
    {
        "content": "<p>Mathlib is full of <code>{ carrier := {x | p x}, ..}</code> constructions</p>",
        "id": 292854407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660179634
    },
    {
        "content": "<p>(recall that that's notation for <code>set_of</code>)</p>",
        "id": 292854423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660179658
    },
    {
        "content": "<p>So I think the convention is to just use <code>subgroup.mk</code>, but almost always via <code>{}</code> notation</p>",
        "id": 292854444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660179714
    }
]