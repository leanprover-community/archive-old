[
    {
        "content": "<p>Is this lemma in mathlib already? And if not, how should I call it? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">known_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">calc</span>  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span>\n      <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232646982,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617217492
    },
    {
        "content": "<p>It also follows from Cauchy Schwarz applied to the vectors (x,y,z) and (y,z,x).</p>",
        "id": 232647345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617217652
    },
    {
        "content": "<p>Where is Cauchy Schwarz? In general, how can I search for a theorem? Like, how do I search for Pythagoras?</p>",
        "id": 232647769,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617217819
    },
    {
        "content": "<p>Found it: <a href=\"https://leanprover-community.github.io/100.html\">https://leanprover-community.github.io/100.html</a></p>",
        "id": 232648772,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617218202
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Cauchy–Schwarz_inequality\">https://en.wikipedia.org/wiki/Cauchy–Schwarz_inequality</a></p>",
        "id": 232649626,
        "sender_full_name": "Greg Price",
        "timestamp": 1617218534
    },
    {
        "content": "<p>Cauchy-Schwarz lives in<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html</a><br>\nthere are a variety of versions, eg, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real_inner_mul_inner_self_le\">docs#real_inner_mul_inner_self_le</a></p>",
        "id": 232649807,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1617218618
    },
    {
        "content": "<p>You would need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space\">docs#euclidean_space</a> to apply it.</p>",
        "id": 232649858,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1617218642
    },
    {
        "content": "<p>The search built into the mathlib docs site seems to only look at the names, and the name \"Cauchy-Schwarz\" only appears in the docstrings. But a Google <code>site:</code> search is effective:<br>\n<a href=\"https://www.google.com/search?q=site:https://leanprover-community.github.io+cauchy+schwarz\">https://www.google.com/search?q=site:https://leanprover-community.github.io+cauchy+schwarz</a></p>\n<p>where the first result is<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html</a></p>",
        "id": 232649899,
        "sender_full_name": "Greg Price",
        "timestamp": 1617218647
    },
    {
        "content": "<p>The search box on each page of our <a href=\"https://leanprover-community.github.io/mathlib_docs/\">online docs</a> has two different functions, which is a bit confusing. First, if you type in something in the box, after some time, a dropdown will appear with links to matching declaration names. This isn't a good way to search for named results, due to mathlib's <a href=\"https://leanprover-community.github.io/contribute/naming.html\">naming conventions</a> (though once you're familiar with those conventions, it can be an efficient way of finding what's in the library!). </p>\n<p>Second, if instead of clicking on the links in the dropdown, you click the \"Search\" button, this will take you to a custom google search on the docs page. This will search all the doc strings and module docs; these are more likely to have the names you're looking for. Case in point: For if you type in \"pythagorean\", the dropdown is filled with stuff named <code>pythagorean_triple</code>; however, if you search with the Search button, there are only two results; the second of which links to <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html\"><code>analysis.normed_space.inner_product</code></a>.</p>\n<p>We should probably make all this more clear on the docs site...</p>",
        "id": 232650295,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617218789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/inequality.20lemma/near/232650295\">said</a>:</p>\n<blockquote>\n<p>Second, if instead of clicking on the links in the dropdown, you click the \"Search\" button, this will take you to a custom google search on the docs page.</p>\n</blockquote>\n<p>Ah, good to know! In fact that does exactly (and more conveniently) the thing I suggested doing above.</p>",
        "id": 232650500,
        "sender_full_name": "Greg Price",
        "timestamp": 1617218872
    },
    {
        "content": "<p>You could also prove it using Holder: let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v=(a,b,c)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">w=(b, c,a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">⟩</mo><mo>≤</mo><mo stretchy=\"false\">∥</mo><mi>v</mi><mo stretchy=\"false\">∥</mo><mo stretchy=\"false\">∥</mo><mi>w</mi><mo stretchy=\"false\">∥</mo></mrow><annotation encoding=\"application/x-tex\">\\langle v, w\\rangle\\le \\lVert v\\rVert \\lVert w\\rVert</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">∥</span><span class=\"mopen\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">∥</span></span></span></span>.</p>",
        "id": 232650655,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1617218922
    },
    {
        "content": "<p>I agree that it'd be great to make that more clear somehow. The dropdown is great, but it'd apparently led me to never try actually hitting the \"search\" button -- I figured it would do fundamentally the same thing.</p>",
        "id": 232650746,
        "sender_full_name": "Greg Price",
        "timestamp": 1617218961
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.inner_le_Lp_mul_Lq\">docs#real.inner_le_Lp_mul_Lq</a></p>",
        "id": 232650774,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1617218976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397997\">Greg Price</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/inequality.20lemma/near/232650746\">said</a>:</p>\n<blockquote>\n<p>I agree that it'd be great to make that more clear somehow. The dropdown is great, but it'd apparently led me to never try actually hitting the \"search\" button -- I figured it would do fundamentally the same thing.</p>\n</blockquote>\n<p>Would making the button read \"Google site search\" (or something along those lines) be good enough?</p>",
        "id": 232651067,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617219074
    },
    {
        "content": "<p>Yeah, that sounds great.</p>",
        "id": 232651097,
        "sender_full_name": "Greg Price",
        "timestamp": 1617219092
    },
    {
        "content": "<p>OK, I've pushed a commit. The site should hopefully be updated in 15 minutes or so.</p>",
        "id": 232651624,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617219279
    },
    {
        "content": "<p>If you have mathlib up and running in VS Code then searching for Cauchy Schwarz should hopefully find it because it should be a tag in the relevant file.</p>",
        "id": 232665244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617224825
    },
    {
        "content": "<p>Yes -- Kevin's suggestion is my first method to find anything: use the builtin search in VSCode, with the mathlib repository open. Turning on regular expressions in search is usually a good idea, as then you can try <code>keyword1.*keyword2</code> to find occurrences of two different things in the same place.</p>",
        "id": 232682176,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617233888
    }
]