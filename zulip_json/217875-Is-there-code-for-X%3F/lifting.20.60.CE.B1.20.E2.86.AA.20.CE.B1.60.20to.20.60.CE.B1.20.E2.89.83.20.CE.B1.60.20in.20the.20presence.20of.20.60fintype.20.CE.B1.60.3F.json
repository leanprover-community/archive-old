[
    {
        "content": "<p>Do we have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">equiv_of_fintype_endomorphism</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>(I don't mind if it is noncomputable particularly; presumably computability would further require <code>[decidable_eq α]</code>.)</p>",
        "id": 198181526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589972056
    },
    {
        "content": "<p>I came up with the rather unpleasant </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">equiv_of_fintype_endomorphism</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">equiv_of_surjective</span> <span class=\"n\">e</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">injective_iff_surjective_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>from the pieces I could find already available, but I'm hoping there's something better available.</p>",
        "id": 198181576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589972100
    },
    {
        "content": "<p>Not clear if it's better but I came up with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">equiv_of_fintype_endomorphism</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">of_bijective</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">injective_iff_bijective</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198239850,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589999923
    },
    {
        "content": "<p>Term mode version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">equiv_of_fintype_endomorphism</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">of_bijective</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">injective_iff_bijective</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198240060,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590000018
    },
    {
        "content": "<p>Thanks, that's perfect.</p>",
        "id": 198276747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590023830
    }
]