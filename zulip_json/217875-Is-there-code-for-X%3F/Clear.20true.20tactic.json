[
    {
        "content": "<p>Is there a tactic that will <code>clear</code> all <code>true</code> statements from the local context? This would be useful for me in dealing with a large number of automatically generated equations, many of which simplify to <code>true</code>.</p>",
        "id": 245896054,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1626214174
    },
    {
        "content": "<p>As far as I know we don't, although this strikes me as being an even easier tactic to write for a beginner than the \"hello world\" tactic, namely <code>assumption</code>.</p>",
        "id": 245896168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626214230
    },
    {
        "content": "<p>Isn't it exactly what <code>clear</code> does?</p>",
        "id": 245921561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626241295
    },
    {
        "content": "<p>Or are you saying that you want to simplify hypothesis that aren't <code>true</code> but equal to <code>true</code>? That seems a bit harder.</p>",
        "id": 245921625,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626241342
    },
    {
        "content": "<p>I think the task is to automatically find the list of hypotheses to clear based on the type. <code>clear</code> takes a list of hypotheses, not a type</p>",
        "id": 245922851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626242779
    },
    {
        "content": "<p>Ah maybe that's the job of the hypothetical <code>clear!</code></p>",
        "id": 245926429,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626246589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> does using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cases_matching\">tactic#cases_matching</a> suit your purpose?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases_matching</span><span class=\"bp\">*</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245945441,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626261039
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.cases_matching\">docs#tactic.interactive.cases_matching</a>?</p>",
        "id": 245947442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626262270
    },
    {
        "content": "<p>Thanks! I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cases_type\">tactic#cases_type</a> is even better actually</p>",
        "id": 245947569,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626262360
    }
]