[
    {
        "content": "<p>Do we have something like <code>pi_instance</code> for binary products?</p>",
        "id": 219227791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607444741
    },
    {
        "content": "<p>I assume you don't mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_mul\">docs#pi.has_mul</a></p>",
        "id": 219228595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607445101
    },
    {
        "content": "<p>Not exactly. There's this <code>pi_instance</code> tactic that makes instances (usually of algebraic nature) for Pi-types automatically. I want something which is even simpler -- a tactic that does this for binary products (which mathematically are a special case of Pi-types, but not definitionally so).</p>",
        "id": 219228843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607445208
    },
    {
        "content": "<p>Got it - so you want a <code>prod_instance</code> tactic for building the proofs with instances over <code>prod A B</code>?</p>",
        "id": 219229392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607445454
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 219229421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607445467
    },
    {
        "content": "<p>Based on the content of <code>algebra/group/prod</code> we don't have one: <a href=\"https://github.com/leanprover-community/mathlib/blob/3996bd428d1758fa6f790a2453bd679e10ad1897/src/algebra/group/prod.lean\">https://github.com/leanprover-community/mathlib/blob/3996bd428d1758fa6f790a2453bd679e10ad1897/src/algebra/group/prod.lean</a></p>",
        "id": 219229531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607445512
    },
    {
        "content": "<p>Note that currently <code>pi_instance</code> generates extra <code>id</code>s, so we use it only to prove properties.</p>",
        "id": 219290992,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607480654
    }
]