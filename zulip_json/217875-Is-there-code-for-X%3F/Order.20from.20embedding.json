[
    {
        "content": "<p>I would like to show that the length of a certain list is less than or equal to a certain bound N*N, by showing that there's an injective function from its indices to (fin N × fin N). Unfortunately I haven't found anything useful for, well, any of the steps of that proof; from relating the length of a list to functions on its indices, to relating injective functions and order, to the cardinality of tuples... Is this just the wrong sort of approach?</p>",
        "id": 227139398,
        "sender_full_name": "David A",
        "timestamp": 1613879905
    },
    {
        "content": "<p>for transferring sizes along injective functions, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_le_of_injective\">docs#fintype.card_le_of_injective</a> is a good lemma</p>",
        "id": 227139477,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613880027
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_prod\">docs#fintype.card_prod</a> tells you the cardinality of a product</p>",
        "id": 227139495,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613880068
    },
    {
        "content": "<p>It sounds like this might be more easily proven by inducting on the list itself.</p>",
        "id": 227140196,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613880978
    },
    {
        "content": "<p>Juggling indexing the list means having to construct the various hypotheses of being in bounds to use <code>list.nth_le</code>.</p>",
        "id": 227140204,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613881009
    },
    {
        "content": "<p>Do you have an example of your list defn?</p>",
        "id": 227140209,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613881026
    },
    {
        "content": "<p>I agree with Yakov. Rather than constructing an injective function out of a list, it is easier and more natural to map your list to a <code>list (fin N x fin N)</code> that you can prove is <code>nodup</code>; it's easy to get from this to the claim that the length of the list is at most N^2</p>",
        "id": 227140364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613881243
    },
    {
        "content": "<p>and depending on the structure of the function, you might not even need <code>fin N x fin N</code></p>",
        "id": 227140367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613881264
    },
    {
        "content": "<p>The idea of mapping + nodup makes sense. I'm still not sure how I can get from mapping to the product to the length of the list being bounded though.</p>\n<p>My particular case is proving that unique lattice points drawn from those within N distance of the origin, according to the max norm, are less than <code>4*N*N</code>.</p>",
        "id": 227140718,
        "sender_full_name": "David A",
        "timestamp": 1613881786
    },
    {
        "content": "<p>Btw I'm trying to stay away from <code>fintype</code> because I hit a weird bug where even just mentioning a <code>finset</code> in the type of a definition caused lean to hit a deterministic timeout apparently trying to find a normal form for the finset, even though (a) very little progress could actually be made reducing the finset, and (b) reducing the finset was not necessary to type-check the type <em>or</em> the definition... But I could never come up with a reduced failure case for this so I never posted it. It had to do with WF-induction, which is actually why I'm here now trying to get a natural number from of a list instead, to do induction on nat!</p>",
        "id": 227140890,
        "sender_full_name": "David A",
        "timestamp": 1613882009
    },
    {
        "content": "<blockquote>\n<p>My particular case is proving that unique lattice points drawn from those within N distance of the origin, according to the max norm, are less than <code>4*N*N</code>.</p>\n</blockquote>\n<p>How more precisely is this stated?</p>",
        "id": 227140962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613882149
    },
    {
        "content": "<p>It sounds like it might be easier to stay at the level of functions for this, don't bring in lists and instead prove that this set is a subset of <code>Ioo (-N) N x Ioo (-N) N</code></p>",
        "id": 227141084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613882287
    },
    {
        "content": "<p>hopefully we have a theorem that says that <code>Ico a b</code> has cardinality <code>b - a</code></p>",
        "id": 227141106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613882345
    },
    {
        "content": "<p>hm, this exact theorem isn't there but it shouldn't be hard to prove using <code>int.range</code></p>",
        "id": 227141207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613882493
    },
    {
        "content": "<p>Uh, I mean, there's 1000 lines of definitions behind it because I'm actually talking about particular points, not all of them :)<br>\nAnd actually I have a list such that some of its elements can be converted to unique points, and a theorem which says those points have to be within distance N of the origin.<br>\nSo it's like <code>(list.length $ list.filter my_filter my_list) ≤ 4 * N * N</code>.</p>",
        "id": 227141213,
        "sender_full_name": "David A",
        "timestamp": 1613882508
    },
    {
        "content": "<p>Not sure if that's what you meant though. Also FWIW <code>4 * N * N</code> doesn't matter, I literally just need any bound at all for the length of this list.</p>",
        "id": 227141269,
        "sender_full_name": "David A",
        "timestamp": 1613882546
    },
    {
        "content": "<p>I mean show the types of things</p>",
        "id": 227141270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613882554
    },
    {
        "content": "<p>it doesn't matter if it's only partial, but a complete definition of the term is useful</p>",
        "id": 227141279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613882581
    },
    {
        "content": "<p>specifically how is <code>my_list</code> defined</p>",
        "id": 227141356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613882678
    },
    {
        "content": "<p>Pasting the whole 1000 lines is also an option (say, in a gist or on a branch) if you don't know how to make <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of it</p>",
        "id": 227141521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613882925
    },
    {
        "content": "<p><del>So I really don't think I can provide a short version of the definition -_-.</del> I have a quite complex type to work around lack of induction-recursion. So what I have is an argument <code>jups : path₂</code>, and <code>my_list</code> is actually <code>jups.updates</code>. <code>path₂</code> is defined like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">path₁</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">update</span>\n<span class=\"kd\">structure</span> <span class=\"n\">path₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">updates</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">justified</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">upd</span> <span class=\"n\">ups</span><span class=\"o\">},</span> <span class=\"n\">list.cons</span> <span class=\"n\">upd</span> <span class=\"n\">ups</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">updates</span> <span class=\"bp\">→</span> <span class=\"n\">justified</span> <span class=\"n\">upd</span> <span class=\"n\">ups</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The points are actually defined by a partial function from tails of <code>updates</code> to <code>ℤ × ℤ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">path₁.extension_point</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">point</span>\n</code></pre></div>\n<p><code>justified</code> is an inductive type giving what I need to show that these points are unique and within distance N of the origin, where <code>N</code> actually comes from a function on <code>path₂.updates</code>.</p>",
        "id": 227141522,
        "sender_full_name": "David A",
        "timestamp": 1613882925
    },
    {
        "content": "<p>Just use <code>sorry</code> in all those functions you just described</p>",
        "id": 227141605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613883037
    },
    {
        "content": "<blockquote>\n<p>what I need to show that these points are unique</p>\n</blockquote>\n<p>What does this theorem look like?</p>",
        "id": 227141678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613883137
    },
    {
        "content": "<p>I think this is more-or-less self contained? :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">update</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">update.is_b</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">update.rec_on</span> <span class=\"n\">upd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">update.is_b.dec</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">upd.is_b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path_point_at_time</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path_current_point</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">path₁.is_preleft</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">halfplane</span> <span class=\"o\">:</span> <span class=\"n\">pt.fst</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">path₁.is_preleft</span>\n<span class=\"bp\">|</span> <span class=\"n\">extension</span> <span class=\"o\">(</span><span class=\"n\">ups'</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ups'</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">ups</span> <span class=\"bp\">→</span> <span class=\"n\">path_current_point</span> <span class=\"n\">ups'</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">pt</span> <span class=\"bp\">→</span> <span class=\"n\">path₁.is_preleft</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">path₁.is_preleft.dec</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">ups.is_preleft</span> <span class=\"n\">pt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₁.can_extend_free</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span><span class=\"n\">ups.is_preleft</span> <span class=\"o\">(</span><span class=\"n\">path_point_at_time</span> <span class=\"n\">ups</span> <span class=\"n\">time</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">justified</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"o\">:=</span> <span class=\"n\">update.rec_on</span> <span class=\"n\">hd</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"bp\">∧</span> <span class=\"n\">tl.can_extend_free</span> <span class=\"n\">time</span> <span class=\"bp\">∧</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">eaten</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₁.eaten_bound</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"o\">:=</span> <span class=\"n\">option.iget</span> <span class=\"bp\">$</span> <span class=\"n\">list.maximum</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">$</span> <span class=\"n\">path₁.eaten</span> <span class=\"n\">ups</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₂.extend_bound</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path₂</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"bp\">$</span> <span class=\"n\">list.filter</span> <span class=\"n\">update.is_b</span> <span class=\"n\">jups.updates</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">jups.updates.eaten_bound</span> <span class=\"bp\">*</span> <span class=\"n\">jups.updates.eaten_bound</span>\n  <span class=\"o\">:=</span> <span class=\"c1\">-- TRYING TO PROVE THIS</span>\n</code></pre></div>",
        "id": 227141942,
        "sender_full_name": "David A",
        "timestamp": 1613883548
    },
    {
        "content": "<p>it's not an mwe yet, <code>point</code> isn't defined</p>",
        "id": 227141966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613883596
    },
    {
        "content": "<p>The usual trick is to paste it into a new file</p>",
        "id": 227142027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613883632
    },
    {
        "content": "<p>This works, although I made up <code>dist</code> and <code>path1.eaten</code> so I might not get the right idea there</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.min_max</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">update</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">update.is_b</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">update.rec_on</span> <span class=\"n\">upd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">update.is_b.dec</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">upd.is_b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₁</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">update</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path_point_at_time</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path_current_point</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">path₁.is_preleft</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">halfplane</span> <span class=\"o\">:</span> <span class=\"n\">pt.fst</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">path₁.is_preleft</span>\n<span class=\"bp\">|</span> <span class=\"n\">extension</span> <span class=\"o\">(</span><span class=\"n\">ups'</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ups'</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">ups</span> <span class=\"bp\">→</span> <span class=\"n\">path_current_point</span> <span class=\"n\">ups'</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">pt</span> <span class=\"bp\">→</span> <span class=\"n\">path₁.is_preleft</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">path₁.is_preleft.dec</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">ups.is_preleft</span> <span class=\"n\">pt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₁.can_extend_free</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span><span class=\"n\">ups.is_preleft</span> <span class=\"o\">(</span><span class=\"n\">path_point_at_time</span> <span class=\"n\">ups</span> <span class=\"n\">time</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">justified</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"o\">:=</span> <span class=\"n\">update.rec_on</span> <span class=\"n\">hd</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"bp\">∧</span> <span class=\"n\">tl.can_extend_free</span> <span class=\"n\">time</span> <span class=\"bp\">∧</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">eaten</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path₁.eaten</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₁.eaten_bound</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"o\">:=</span> <span class=\"n\">option.iget</span> <span class=\"bp\">$</span> <span class=\"n\">list.maximum</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">$</span> <span class=\"n\">path₁.eaten</span> <span class=\"n\">ups</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">path₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">updates</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">justified</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">upd</span> <span class=\"n\">ups</span><span class=\"o\">},</span> <span class=\"n\">list.cons</span> <span class=\"n\">upd</span> <span class=\"n\">ups</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">updates</span> <span class=\"bp\">→</span> <span class=\"n\">justified</span> <span class=\"n\">upd</span> <span class=\"n\">ups</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₂.extend_bound</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path₂</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"bp\">$</span> <span class=\"n\">list.filter</span> <span class=\"n\">update.is_b</span> <span class=\"n\">jups.updates</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">jups.updates.eaten_bound</span> <span class=\"bp\">*</span> <span class=\"n\">jups.updates.eaten_bound</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- TRYING TO PROVE THIS</span>\n</code></pre></div>",
        "id": 227142159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613883822
    },
    {
        "content": "<p>Sorry, didn't realize you were going to try to run it. This actually typechecks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.function</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.min_max</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">update</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">update</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">update.is_b</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">update.rec_on</span> <span class=\"n\">upd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">update.is_b.dec</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">upd.is_b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₁</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">update</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dist_to_origin</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path_point_at_time</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path_current_point</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">more_path_points</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">path₁.is_preleft</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">halfplane</span> <span class=\"o\">:</span> <span class=\"n\">pt.fst</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">path₁.is_preleft</span>\n<span class=\"bp\">|</span> <span class=\"n\">extension</span> <span class=\"o\">(</span><span class=\"n\">ups'</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ups'</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">ups</span> <span class=\"bp\">→</span> <span class=\"n\">path_current_point</span> <span class=\"n\">ups'</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">pt</span> <span class=\"bp\">→</span> <span class=\"n\">path₁.is_preleft</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">path₁.is_preleft.dec</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">ups.is_preleft</span> <span class=\"n\">pt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₁.can_extend_free</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span><span class=\"n\">ups.is_preleft</span> <span class=\"o\">(</span><span class=\"n\">path_point_at_time</span> <span class=\"n\">ups</span> <span class=\"n\">time</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">justified</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"o\">:=</span> <span class=\"n\">update.rec_on</span> <span class=\"n\">hd</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"bp\">∧</span> <span class=\"n\">tl.can_extend_free</span> <span class=\"n\">time</span> <span class=\"bp\">∧</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">eaten</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">path₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">updates</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">justified</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">upd</span> <span class=\"n\">ups</span><span class=\"o\">},</span> <span class=\"n\">list.cons</span> <span class=\"n\">upd</span> <span class=\"n\">ups</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">updates</span> <span class=\"bp\">→</span> <span class=\"n\">justified</span> <span class=\"n\">upd</span> <span class=\"n\">ups</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₁.bound</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">path₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"o\">:=</span> <span class=\"n\">option.iget</span> <span class=\"bp\">$</span> <span class=\"n\">list.maximum</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"n\">dist_to_origin</span> <span class=\"bp\">$</span> <span class=\"n\">more_path_points</span> <span class=\"n\">ups</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path₂.extend_bound</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path₂</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"bp\">$</span> <span class=\"n\">list.filter</span> <span class=\"n\">update.is_b</span> <span class=\"n\">jups.updates</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">jups.updates.bound</span> <span class=\"bp\">*</span> <span class=\"n\">jups.updates.bound</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 227142339,
        "sender_full_name": "David A",
        "timestamp": 1613883986
    },
    {
        "content": "<p>Not 100% sure this has everything needed for the proof though. <code>is_preleft</code> should suffice for uniqueness. Definitely missing boundedness; let me try to put that back in.</p>",
        "id": 227142458,
        "sender_full_name": "David A",
        "timestamp": 1613884152
    },
    {
        "content": "<p>You should add in theorems (with <code>sorry</code> proofs) that you think are necessary for the main theorem, so that people can prove the goal without the setup</p>",
        "id": 227142471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884190
    },
    {
        "content": "<p>You don't need to add more stuff in the inductives or structures, it's fine if the lemmas are not provable because they aren't the focus</p>",
        "id": 227142540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884232
    },
    {
        "content": "<p>like I doubt the definition of <code>justified</code> needs to be provided here, unless you think that unfolding it is an important part of the proof you want help with</p>",
        "id": 227142598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884281
    },
    {
        "content": "<p>Okay, didn't realize we were going full crowd-sourcing on a proof here; I was really just looking for pointers and that's why I was confused about the point of providing a mwe. :) Yeah, a lot of this stuff is pointless. Let me think about it for a while.</p>",
        "id": 227142691,
        "sender_full_name": "David A",
        "timestamp": 1613884358
    },
    {
        "content": "<p>Well it's easiest to get pointers starting from a well formed source</p>",
        "id": 227142731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884414
    },
    {
        "content": "<p>I want to use the code to demonstrate some things in context but I want to make sure the advice is applicable to your actual problem</p>",
        "id": 227142797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884457
    },
    {
        "content": "<p>for example I see now that lists are actually kind of integral to your setup, so my earlier suggestion about sets isn't useful</p>",
        "id": 227142826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884501
    },
    {
        "content": "<p>but it's still not clear to me where the uniqueness is coming from here - is <code>jups.updates</code> a nodup list?</p>",
        "id": 227142858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884533
    },
    {
        "content": "<p>remember that the list <code>[(0,0), (0,0), .. ]</code> can be arbitrarily long and still stay within N of the origin</p>",
        "id": 227142919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884578
    },
    {
        "content": "<p>Yeah, that's what's missing here; <code>path_point_at_time</code> and <code>path_current_point</code> are obviously related, so that the \"unique points\" are actually the <code>current_point</code>s which are unique thanks to <code>can_extend_free</code>.</p>",
        "id": 227142958,
        "sender_full_name": "David A",
        "timestamp": 1613884671
    },
    {
        "content": "<blockquote>\n<p>which are unique thanks to can_extend_free.</p>\n</blockquote>\n<p>is that a lemma that you can give a formal statement to in the language of the mwe?</p>",
        "id": 227143025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884734
    },
    {
        "content": "<p>I assume you already have something along these lines proven, it seems like some property that follows from <code>justified</code></p>",
        "id": 227143059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884782
    },
    {
        "content": "<p>so you probably don't have to go as far as <code>can_extend_free</code></p>",
        "id": 227143151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884812
    },
    {
        "content": "<p>(if you haven't made a lemma about this, you should)</p>",
        "id": 227143158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613884828
    },
    {
        "content": "<p>Okay, based on my mental model of the problem I expect this to be provable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.min_max</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n<span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">x.nat_abs</span> <span class=\"n\">y.nat_abs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">updates</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">update</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path.raw_list</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"bp\">→</span> <span class=\"n\">updates</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.tail</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.tail_raw_list</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">jups.raw_list.tail</span> <span class=\"bp\">=</span> <span class=\"n\">option.iget</span> <span class=\"o\">(</span><span class=\"n\">option.map</span> <span class=\"n\">path.raw_list</span> <span class=\"n\">jups.tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">update.new_bound</span> <span class=\"o\">:</span> <span class=\"n\">update</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">update.new_point</span> <span class=\"o\">:</span> <span class=\"n\">update</span> <span class=\"bp\">→</span> <span class=\"n\">updates</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">update.has_new_point</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">update.new_point</span> <span class=\"n\">upd</span> <span class=\"o\">[]</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span>\n<span class=\"kd\">instance</span>  <span class=\"n\">update.has_new_point_dec</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">upd.has_new_point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- new_point is none/some depending only upon its `upd` argument:</span>\n<span class=\"kd\">def</span> <span class=\"n\">update.has_new_point_correct</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upds</span> <span class=\"o\">:</span> <span class=\"n\">updates</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">upd.has_new_point</span> <span class=\"bp\">↔</span> <span class=\"n\">upd.new_point</span> <span class=\"n\">upds</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">updates.head_point</span> <span class=\"o\">:</span> <span class=\"n\">updates</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">point</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">update.new_point</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">updates.all_points</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">updates</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"n\">ups.tails.filter_map</span> <span class=\"n\">updates.head_point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path.max_bound</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">option.iget</span> <span class=\"bp\">$</span> <span class=\"n\">list.maximum</span> <span class=\"bp\">$</span> <span class=\"n\">list.filter_map</span> <span class=\"n\">update.new_bound</span> <span class=\"n\">jups.raw_list</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.points_unique</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">jups.raw_list</span> <span class=\"bp\">→</span> <span class=\"n\">update.new_point</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"bp\">∉</span> <span class=\"n\">list.map</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">updates.all_points</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.points_in_bounds</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">pt</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">jups.raw_list</span> <span class=\"bp\">→</span> <span class=\"n\">hd.new_point</span> <span class=\"n\">tl</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">pt</span> <span class=\"bp\">→</span> <span class=\"n\">norm</span> <span class=\"n\">pt</span> <span class=\"bp\">&lt;</span> <span class=\"n\">jups.max_bound</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">want_to_show</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"bp\">$</span> <span class=\"n\">list.filter</span> <span class=\"n\">update.has_new_point</span> <span class=\"n\">jups.raw_list</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">jups.max_bound</span> <span class=\"bp\">*</span> <span class=\"n\">jups.max_bound</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Edit: fixed updates.all_points to be a filter_map, but tbh this is not quite how I express it in my code anyways as it gets tangled up in the induction-recursion.)</p>",
        "id": 227144681,
        "sender_full_name": "David A",
        "timestamp": 1613886381
    },
    {
        "content": "<p>I'm not sure yet how to express a lemma about the relationship between <code>jups.raw_list</code> and the uniqueness of <code>new_point</code>; I guess I was thinking about the bijection between indices of <code>raw_list</code> and tails of <code>raw_list</code>, and the way <code>points_unique</code> is really saying that the non-filtered non-empty tails of <code>raw_list</code> are in bijection with the elements of <code>updates.all_points</code> from the path.</p>\n<p>And ultimately <code>want_to_show</code> is helping define a measure on <code>path</code>, which must among other properties must <em>decrease</em> as more points are added. So I need an upper bound on that value:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">path.cons</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> also requires some proofs about `upd` -/</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.cons.really_cons</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">jups.cons</span> <span class=\"n\">upd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">raw_list</span> <span class=\"bp\">=</span> <span class=\"n\">upd</span> <span class=\"o\">::</span> <span class=\"n\">jups.raw_list</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.measure_other_updates</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.measure</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">jups.measure_other_updates</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">jups.max_bound</span> <span class=\"bp\">*</span> <span class=\"n\">jups.max_bound</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"bp\">$</span> <span class=\"n\">list.filter</span> <span class=\"n\">update.has_new_point</span> <span class=\"n\">jups.raw_list</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">really_want_to_show</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">update</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">jups</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">jups'</span> <span class=\"o\">:=</span> <span class=\"n\">jups.cons</span> <span class=\"n\">upd</span> <span class=\"k\">in</span>\n    <span class=\"n\">jups'.max_bound</span> <span class=\"bp\">=</span> <span class=\"n\">jups.max_bound</span> <span class=\"bp\">→</span>\n    <span class=\"n\">jups'.measure_other_updates</span> <span class=\"bp\">&lt;</span> <span class=\"n\">jups.measure_other_updates</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">upd.has_new_point</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">jups'.measure</span> <span class=\"bp\">&lt;</span> <span class=\"n\">jups.measure</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Or something like that, I'm really quite set on using a <code>nat</code> measure here due to aforementioned bug, so I don't expect to need or want to change this latter code.</p>",
        "id": 227146223,
        "sender_full_name": "David A",
        "timestamp": 1613887972
    },
    {
        "content": "<p>Here's a proof modulo the proof that all elements of the list are in the bounds, because I think you stated <code>path.points_in_bounds</code> incorrectly so I didn't try to use it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.min_max</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.nodup</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.range</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int.range_nodup</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.range</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.range</span><span class=\"o\">,</span> <span class=\"n\">list.nodup_map_iff</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">list.nodup_range</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_inj</span> <span class=\"o\">(</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int.length_range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.range</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">int.to_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int.range</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n<span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">x.nat_abs</span> <span class=\"n\">y.nat_abs</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path.raw_list</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.tail</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">path.tail_raw_list</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P.raw_list.tail</span> <span class=\"bp\">=</span> <span class=\"n\">option.iget</span> <span class=\"o\">(</span><span class=\"n\">option.map</span> <span class=\"n\">path.raw_list</span> <span class=\"n\">P.tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X.new_bound</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">X.new_point</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">X.ok</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">X.new_point</span> <span class=\"n\">upd</span> <span class=\"o\">[]</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span>\n<span class=\"kd\">instance</span>  <span class=\"n\">X.ok_dec</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">upd.ok</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- new_point is none/some depending only upon its `upd` argument:</span>\n<span class=\"kd\">def</span> <span class=\"n\">X.ok_correct</span> <span class=\"o\">(</span><span class=\"n\">upd</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upds</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">upd.ok</span> <span class=\"bp\">↔</span> <span class=\"n\">upd.new_point</span> <span class=\"n\">upds</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X.head_point</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">point</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X.new_point</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X.all_points</span> <span class=\"o\">(</span><span class=\"n\">ups</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"n\">ups.tails.filter_map</span> <span class=\"n\">X.head_point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">path.N</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">option.iget</span> <span class=\"bp\">$</span> <span class=\"n\">list.maximum</span> <span class=\"bp\">$</span> <span class=\"n\">list.filter_map</span> <span class=\"n\">X.new_bound</span> <span class=\"n\">P.raw_list</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">path.points_unique</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">P.raw_list</span> <span class=\"bp\">→</span>\n  <span class=\"n\">X.new_point</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"bp\">∉</span> <span class=\"n\">list.map</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">X.all_points</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">path.points_in_bounds</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">pt</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P.raw_list</span> <span class=\"bp\">→</span>\n  <span class=\"n\">hd.new_point</span> <span class=\"n\">tl</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">pt</span> <span class=\"bp\">→</span> <span class=\"n\">norm</span> <span class=\"n\">pt</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P.N</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">good_points</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">point</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">X.new_point</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">good_points</span> <span class=\"n\">tl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">good_points</span> <span class=\"n\">tl</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">good_points_bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"n\">X.ok</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">good_points</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"o\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">good_points</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">hd.new_point</span> <span class=\"n\">tl</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">good_points</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.filter_cons_of_neg</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">good_points_bound</span> <span class=\"n\">tl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">X.ok_correct</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hd.ok</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.filter_cons_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">good_points_bound</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.filter_cons_of_neg</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.le_succ_of_le</span> <span class=\"o\">(</span><span class=\"n\">good_points_bound</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">good_points_all</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">good_points</span> <span class=\"n\">l</span> <span class=\"bp\">⊆</span> <span class=\"n\">X.all_points</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">X.all_points</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">good_points</span> <span class=\"n\">tl</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">hd</span><span class=\"o\">::</span><span class=\"n\">tl</span> <span class=\"bp\">∧</span> <span class=\"n\">X.head_point</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h'.trans</span> <span class=\"o\">(</span><span class=\"n\">list.suffix_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">good_points</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">hd.new_point</span> <span class=\"n\">tl</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">good_points</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">list.suffix_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">good_points_nodup</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">P.raw_list</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">good_points</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nodup</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"o\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">good_points</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">IH</span> <span class=\"o\">:=</span> <span class=\"n\">good_points_nodup</span> <span class=\"n\">tl</span> <span class=\"o\">((</span><span class=\"n\">list.suffix_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">hd.new_point</span> <span class=\"n\">tl</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">good_points</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">list.nodup_cons.2</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">path.points_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">e</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">good_points_all</span> <span class=\"n\">_</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">want_to_show</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list.length</span> <span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"n\">X.ok</span> <span class=\"n\">P.raw_list</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n  <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">P.N</span> <span class=\"bp\">*</span> <span class=\"n\">P.N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">good_points_bound</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⟦</span><span class=\"n\">good_points</span> <span class=\"n\">P.raw_list</span><span class=\"bp\">⟧</span><span class=\"o\">,</span> <span class=\"n\">good_points_nodup</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">list.suffix_refl</span> <span class=\"n\">_</span><span class=\"o\">)⟩,</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⟦</span><span class=\"n\">int.range</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">P.N</span><span class=\"o\">)</span> <span class=\"n\">P.N</span><span class=\"bp\">⟧</span><span class=\"o\">,</span> <span class=\"n\">int.range_nodup</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">change</span> <span class=\"n\">S.card</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T.product</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int.mem_range_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">norm</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P.N</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">norm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.coe_nat_lt</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">int.abs_eq_nat_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">finset.card_le_of_subset</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.card_product</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">T.card</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">int.length_range</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.coe_nat_add</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 227151864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613895016
    },
    {
        "content": "<p>As far as takeaways, the key is the <code>good_points</code> definition, which I think is equal to <code>list.filter ok P.raw_list</code> but is defined in a way which makes the proof of nodup from your lemmas easier.</p>",
        "id": 227152107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613895277
    },
    {
        "content": "<p>(also I shortened the names a bit to make it easier to see, hope you don't mind)</p>",
        "id": 227152138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613895316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310413\">@David A</span></p>",
        "id": 227152141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613895337
    },
    {
        "content": "<p>Thanks, this not only gives me a way forward but also provides some much needed formatting hints ;)</p>\n<p><code>path.points_in_bounds</code> is stated the way I intended but it actually only proves the head point is in bounds (and should have just used the new function I added); then I have to use the definition of bounds and the projection of all the proofs <code>path</code> contains onto its own tail to show the result for the tails. So I should probably just make that at a separate lemma...</p>",
        "id": 227181304,
        "sender_full_name": "David A",
        "timestamp": 1613928111
    }
]