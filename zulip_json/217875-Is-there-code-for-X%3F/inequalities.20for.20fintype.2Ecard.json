[
    {
        "content": "<p>I need something along the lines of </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">card_lt_card_of_injective_of_not_mem</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>Any advice on how to get this from library material?</p>",
        "id": 198448704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590158228
    },
    {
        "content": "<p>My plan would be to prove <code>fintype.card α ≤ fintype.card β</code> from <code>function.injective f</code>, then case split and in the case <code>fintype.card α = fintype.card β</code> show that <code>f</code> is an equivaelence, and obtain a contradiction from <code>w</code>. That all seems doable, but .... I wish it were easier!</p>",
        "id": 198449064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590158426
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_lt_card_of_injective_of_not_mem</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">card_univ</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">card_image_of_injective</span> <span class=\"n\">univ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">card_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">card_lt_card</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ssubset_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">subset_univ</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198450087,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590158971
    },
    {
        "content": "<p>Here's an approach with one sorry which might be a bit easier</p>",
        "id": 198450107,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590158985
    },
    {
        "content": "<p>Awesome! Thanks very much for that.</p>",
        "id": 198450284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590159067
    },
    {
        "content": "<p>(the sorry is no problem)</p>",
        "id": 198450301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590159075
    },
    {
        "content": "<p>Maybe something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_lt_card_of_injective_of_not_mem</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">card_image_of_injective</span> <span class=\"n\">univ</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">univ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">card_lt_card</span> <span class=\"o\">(</span><span class=\"n\">ssubset_insert</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 198450305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590159076
    },
    {
        "content": "<p>I see we used basically the same things</p>",
        "id": 198450464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590159141
    },
    {
        "content": "<p>I like the calc block.</p>",
        "id": 198450476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590159147
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_lt_card_of_injective_of_not_mem</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">card_image_of_injective</span> <span class=\"n\">univ</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">univ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">card_lt_card</span> <span class=\"o\">(</span><span class=\"n\">ssubset_insert</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">card_le_of_subset</span> <span class=\"o\">(</span><span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>completes the gaps in Reid's version. (And cheats by changing the type of <code>w</code>.)</p>",
        "id": 198451055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590159450
    }
]