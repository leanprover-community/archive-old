[
    {
        "content": "<p>Hey! The <code>range_factorization</code> function returns a function from the <code>\\upmapsto (range f)</code> type and not the <code>subtype (range f)</code>, and I'm not sure how to get it for <code>subtype</code>. Any idea?</p>",
        "id": 270810804,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644044489
    },
    {
        "content": "<p>They are defeq <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 270810836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644044522
    },
    {
        "content": "<p>huh, this simplifies things!</p>",
        "id": 270810877,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644044602
    },
    {
        "content": "<p>so <code>\\upmapsto == subtype</code> ?</p>",
        "id": 270810881,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644044614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 270810882,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644044616
    },
    {
        "content": "<p>The relevant declaration is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_coe_to_sort\">docs#set.has_coe_to_sort</a></p>",
        "id": 270810924,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644044656
    },
    {
        "content": "<p>Perfect, thanks a lot!</p>",
        "id": 270811008,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644044781
    },
    {
        "content": "<p>Upmapsto is a generic notation for a coercion from a term to a type, but when applied to a term of type <code>set X</code> it returns the corresponding subtype.</p>",
        "id": 270811478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644045590
    },
    {
        "content": "<p><code>subtype (range f)</code> is not something you should ever write, because it involves <code>s x</code> when you mean <code>x ∈ s</code></p>",
        "id": 270812464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644047162
    },
    {
        "content": "<p>The \"correct\" alternative to<code>↥(range s)</code> is <code>subtype (∈ range s)</code></p>",
        "id": 270812515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644047237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> can you expand on that? the way I see it, the meaning of <code>subtype (range f)</code> is transparent, while <code>subtype (\\in range s)</code> looks a bit like code golf.</p>",
        "id": 270814891,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644050759
    },
    {
        "content": "<p>The type of <code>x.2</code> given <code>x : subtype (range f)</code> is <code>range f x.1</code> which is nonsense.<br>\nThe type of <code>x.2</code> given <code>x : subtype (∈ range f)</code> is <code>x.1 ∈ range f</code> which is not nonsense.</p>",
        "id": 270814962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644050877
    },
    {
        "content": "<p>Ah, that makes sense. Thanks!</p>",
        "id": 270815242,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644051272
    }
]