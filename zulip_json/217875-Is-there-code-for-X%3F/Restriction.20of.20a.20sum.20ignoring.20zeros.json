[
    {
        "content": "<p>Does anyone know of an efficient way to prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291913663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659557501
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_subset\">docs#finset.sum_subset</a> should get you most of the way there</p>",
        "id": 291913899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659557606
    },
    {
        "content": "<p>Ah perfect, thanks!</p>",
        "id": 291913927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659557622
    },
    {
        "content": "<p>You just have to eliminate the <code>\\mem univ</code> it produces</p>",
        "id": 291913930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659557625
    },
    {
        "content": "<p>right, yeah that lemma is exactly what I need</p>",
        "id": 291914003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659557647
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_add_sum_compl\">docs#finset.sum_add_sum_compl</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_eq_zero\">docs#finset.sum_eq_zero</a> but that seems less direct.</p>",
        "id": 291914328,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659557829
    }
]