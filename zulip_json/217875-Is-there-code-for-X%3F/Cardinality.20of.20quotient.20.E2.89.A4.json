[
    {
        "content": "<p>I am surprised these are not in mathlib already. Are they just formulated in a different way and I missed them?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_ge_of_surjective</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">card_le_of_injective</span> <span class=\"o\">(</span><span class=\"n\">function.surj_inv</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">function.injective_surj_inv</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_quotient_le</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">s.r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">card_ge_of_surjective</span> <span class=\"o\">(</span><span class=\"n\">surjective_quotient_mk</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 232443262,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617117353
    },
    {
        "content": "<p>You can try <code>library_search</code>. Note that mathlib would flip the inequality to use <code>\\le</code></p>",
        "id": 232446181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617118384
    },
    {
        "content": "<p><code>library_search</code> doesn't seem to find anything, even flipping the inequality. I guess they really aren't there. In the second one, would it be preferable to have <code>[s : setoid α]</code> instead of an implicit argument?</p>",
        "id": 232447244,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617118797
    },
    {
        "content": "<p>I don't think I did this one when setting up the theory, so it's probably a hole</p>",
        "id": 232452937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617120819
    },
    {
        "content": "<p>In that case, I think it's worth adding them. To be mathlib-compliant, the first should flip the inequality, right? So instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_le_of_surjective</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 232454605,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617121444
    },
    {
        "content": "<p>I think <code>f</code> should be explicit to match the <code>injective</code> lemma</p>",
        "id": 232454665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617121474
    },
    {
        "content": "<p>Right -- you can imagine <code>apply</code>ing this and then you'd want to fill in f</p>",
        "id": 232472841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617128445
    }
]