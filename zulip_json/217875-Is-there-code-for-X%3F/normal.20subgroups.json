[
    {
        "content": "<p>What's the idiomatic way to speak about the type of all normal subgroups of a group? We have <code>subgroup G</code> for the type of (bundled) subgroups of <code>G</code>, and <code>subgroup.normal</code> which is a Prop-valued class. There is also a deprecated <code>normal_subgroup</code>. It's unclear to me what the best way to speak about the type of all normal subgroups should be.</p>",
        "id": 216396023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605127128
    },
    {
        "content": "<p>I guess what I'm looking for is something similar to the following structure: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">normal_subgroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_subgroup</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">is_normal</span> <span class=\"o\">:</span> <span class=\"n\">subgroup.normal</span> <span class=\"n\">to_subgroup</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 216396240,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605127261
    },
    {
        "content": "<p>maybe <code>subtype (subgroup.normal)</code> (or something like that)?</p>",
        "id": 216396275,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605127287
    },
    {
        "content": "<p>Sure, that subtype would work, but I want something that plays well with the group theory API</p>",
        "id": 216397105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605127727
    },
    {
        "content": "<p>I guess it doesn't exist? I want to be able to write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">normal_subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">H.quotient</span>\n</code></pre></div>",
        "id": 216397148,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605127761
    },
    {
        "content": "<p>Similar to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">I.quotient</span>\n</code></pre></div>",
        "id": 216397281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605127829
    },
    {
        "content": "<p>Can't you just make H a subgroup with a [normal] hypothesis?</p>",
        "id": 216402890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605131351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'd like to construct the profinite completion of a group.</p>",
        "id": 216403717,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605131891
    },
    {
        "content": "<p>So I need the full diagram of finite quotients of a group (and take its limit to be the profinite completion)</p>",
        "id": 216403768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605131928
    },
    {
        "content": "<p>And I need some way to write down the indexing set of this limit</p>",
        "id": 216403781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605131940
    },
    {
        "content": "<p>I guess I'd just with the subtype. Somehow the typeclass system gets you into these situations. Someone somewhere decreed that <code>semiring</code> and <code>ring</code> and <code>integral_domain</code> were somehow \"basic\" and everything else like DVR is Prop-valued and goes on top. Similarly subsets and subgroups have been deemed basic and are bundled, and normal subgroups are a prop on top. It's not clear that there's a good answer for all this.</p>",
        "id": 216405163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605132898
    },
    {
        "content": "<p>Well.... this is discouraging:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">subgroup.normal</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- FAILS</span>\n</code></pre></div>",
        "id": 216406633,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605133873
    },
    {
        "content": "<p>I had this same problem recently trying to show that <code>subgroup.normal_closure</code> forms a galois insertion together with the forgetful functor from normal subgroups to subsets.</p>",
        "id": 216408488,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605135469
    },
    {
        "content": "<p>I mean... <code>by tidy</code> solves this, so it's not a big deal.</p>",
        "id": 216408712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605135656
    },
    {
        "content": "<p>I meant the problem that <code>subgroup.normal</code> is <code>Prop</code> valued</p>",
        "id": 216408761,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605135709
    },
    {
        "content": "<p>and I wasn't sure how I should state what I wanted to prove given that</p>",
        "id": 216408821,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605135742
    },
    {
        "content": "<p>This is just  a missing instance right, what's discouraging about it? I made <a href=\"https://github.com/leanprover-community/mathlib/issues/4982\">#4982</a></p>",
        "id": 216410660,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605137484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Like I said, it's not a big deal. <span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> It's not so much a problem that <code>normal</code>is Prop valued, but rather that mathlib doesn't currently have \"the type of normal subgroups\". And if you want to define the normal_closure, that's certainly the natural target for that.</p>",
        "id": 216411311,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605138119
    },
    {
        "content": "<p>Yeah it seems this just got lost in the transition to bundled subgroups, there is a lemma univ_subgroup in deprecated/subgroup.lean anyways</p>",
        "id": 216411433,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605138240
    },
    {
        "content": "<p>The following is slightly more serious :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">subgroup.normal</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 216411556,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605138342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/normal.20subgroups/near/216411311\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> Like I said, it's not a big deal. <span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> It's not so much a problem that <code>normal</code>is Prop valued, but rather that mathlib doesn't currently have \"the type of normal subgroups\". And if you want to define the normal_closure, that's certainly the natural target for that.</p>\n</blockquote>\n<p><code>mathlib</code> already has a normal closure but it takes values in <code>subgroup G</code>. I wanted to prove some basic properties about it which would follow immediately from the <code>galois_insertion</code> fact. Instead I just proved those properties directly.</p>",
        "id": 216411635,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605138393
    },
    {
        "content": "<p>Oh, I see.</p>",
        "id": 216411656,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605138411
    },
    {
        "content": "<p>but I don't fully understand why bundled normal subgroups are bad. Kevin said that he tried it a while ago and his students told him it made things harder so idk</p>",
        "id": 216411677,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605138441
    },
    {
        "content": "<p>Hmmm.... I can't see immediately why bundled normal subgroups would be bad. It seems perfectly natural to have this, or alternatively \"the type of all quotients of a group G\".</p>",
        "id": 216411785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605138556
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> can tell us what the issues were?</p>",
        "id": 216411800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605138586
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_top_equiv_unit</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">phi.ker</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mem_ker</span><span class=\"o\">]},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">quotient_ker_equiv_of_surjective</span> <span class=\"n\">phi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">}},</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">instance</span> <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.of_equiv</span> <span class=\"n\">_</span> <span class=\"n\">quotient_top_equiv_unit.to_equiv.symm</span>\n</code></pre></div>",
        "id": 216413758,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605140497
    },
    {
        "content": "<p>Nice! I was going this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">subgroup.normal</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quot.sound</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- FAILS for some reason...</span>\n</code></pre></div>\n<p>but it looks like there might be another missing instance?</p>",
        "id": 216414075,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605140855
    },
    {
        "content": "<p>Or maybe I'm missing an import?</p>",
        "id": 216414078,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605140863
    },
    {
        "content": "<p>Hmm fintype.of_subsingleton requires a term of that type, so you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">blaha</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.of_subsingleton</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>note its a def not an instance</p>",
        "id": 216415666,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605142329
    },
    {
        "content": "<p>If you prove <code>unique (quotient...</code> instead of subsingleton it should work as an instance.</p>",
        "id": 216415683,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605142354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> Why did you unbundle bundled normal subgroups in our independent from-scratch implementation of group theory?</p>",
        "id": 216432233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605162379
    },
    {
        "content": "<p>I did not do that in the end after playing around with prop valued normal subgroups. I originally had problems with normal subgroups because I had to rewrite a lot of code but the prop valued version was even more difficult to work with I had found.</p>",
        "id": 216433723,
        "sender_full_name": "Jason KY.",
        "timestamp": 1605164376
    },
    {
        "content": "<p>Jason, Guilia Carfora and I redeveloped all of group theory in Lean starting from a new definition of group and I regard Jason as one of the experts in the area. If he thinks bundling normal subgroups is better than not bundling them then I don't have any objections to bundling them. I don't think it would be a big refactor. There's a ton of stuff one could do with solvable groups which is not in Lean yet but easily could be, but we should make a decision about normal subgroups before launching in.</p>",
        "id": 216434386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605165121
    },
    {
        "content": "<p>I'm inclined to say, yes, let's bundle</p>",
        "id": 216434617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605165378
    },
    {
        "content": "<p>Also profinite groups will be useful for all sorts of things eg Galois theory</p>",
        "id": 216434656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605165432
    },
    {
        "content": "<p>Because we're not only interested in a normal subgroup on its own, but also in the lattice of all normal subgroups. There are (interesting) things to be said about it: Adam mentioned using it as indexing diagram, and of course there is Galois theory</p>",
        "id": 216434661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605165442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/normal.20subgroups/near/216434386\">said</a>:</p>\n<blockquote>\n<p>Jason, Guilia Carfora and I redeveloped all of group theory in Lean starting from a new definition of group and I regard Jason as one of the experts in the area. If he thinks bundling normal subgroups is better than not bundling them then I don't have any objections to bundling them. I don't think it would be a big refactor. There's a ton of stuff one could do with solvable groups which is not in Lean yet but easily could be, but we should make a decision about normal subgroups before launching in.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> We'll need to discuss this at Friday's meeting</p>",
        "id": 216435800,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605166727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/normal.20subgroups/near/216434386\">said</a>:</p>\n<blockquote>\n<p>Jason, Guilia Carfora and I redeveloped all of group theory in Lean starting from a new definition of group and I regard Jason as one of the experts in the area. If he thinks bundling normal subgroups is better than not bundling them then I don't have any objections to bundling them. I don't think it would be a big refactor. There's a ton of stuff one could do with solvable groups which is not in Lean yet but easily could be, but we should make a decision about normal subgroups before launching in.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>, <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> and I have been proving some stuff about commutators and solvable groups recently, which we will eventually need for the abel-ruffini theorem</p>",
        "id": 216436079,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605166996
    },
    {
        "content": "<p>I would love to help with the refactor if you guys end up deciding with bundling</p>",
        "id": 216436095,
        "sender_full_name": "Jason KY.",
        "timestamp": 1605167030
    },
    {
        "content": "<p>yeah, that would be great</p>",
        "id": 216436133,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605167044
    },
    {
        "content": "<p>As Thomas said, we'll probably talk about it a bit more at our weekly meeting on Friday</p>",
        "id": 216436165,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605167069
    },
    {
        "content": "<p>Also, would it make sense to keep a <code>is_normal_subgroup</code> sort of thing (from which you could construct a bundled normal subgroup)? There are some things that might be better to phrase in terms of <code>is_normal_subgroup</code>. For example in the Galois correspondence you have \"this extension is Galois if and only if this subgroup is normal\".</p>",
        "id": 216436704,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605167607
    },
    {
        "content": "<p>I think thats a great idea. When I worked with bundled normal subgroups I often found myself needing the normal statement as a proposition. I worked around it by simply not writing iff statements and instead make everything into functions but I think having the prop version around is a good idea.</p>",
        "id": 216445880,
        "sender_full_name": "Jason KY.",
        "timestamp": 1605173839
    },
    {
        "content": "<p>Hi, is there any update on the normal subgroups? I'm experimenting a bit with composition series right now which works much better with bundled normals subgroups. (Sorry if there exists another Zulip thread on this that I missed)</p>",
        "id": 217271371,
        "sender_full_name": "Jason KY.",
        "timestamp": 1605793955
    },
    {
        "content": "<p>I certainly haven't done anything, and I'm too busy right now to do anything serious in lean for the near future. But if I recall correctly some Berkeley people were planning to take this on? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 217286175,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605800271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/normal.20subgroups/near/217271371\">said</a>:</p>\n<blockquote>\n<p>Hi, is there any update on the normal subgroups? I'm experimenting a bit with composition series right now which works much better with bundled normals subgroups. (Sorry if there exists another Zulip thread on this that I missed)</p>\n</blockquote>\n<p>I'm interested in doing this. I've started a mathlib branch (<code>normal_subgroup</code>) to work on this. So far I've defined a bundled version of <code>normal_subgroup</code> and proven some basic stuff about it (mostly copied from other bundled things in mathlib). I haven't yet even fixed all the problems in <code>subgroup.lean</code> that the new definition causes though.</p>",
        "id": 217594844,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606115645
    },
    {
        "content": "<p>I don't really know what I'm doing btw</p>",
        "id": 217594850,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606115659
    },
    {
        "content": "<p>but it would be great if you also make changes to this mathlib branch</p>",
        "id": 217594853,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606115675
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/441ab212216e1956f38ea1594ce1fcfbf1078337/src/group_theory/subgroup.lean#L752\">https://github.com/leanprover-community/mathlib/blob/441ab212216e1956f38ea1594ce1fcfbf1078337/src/group_theory/subgroup.lean#L752</a></p>",
        "id": 217594939,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606115792
    }
]