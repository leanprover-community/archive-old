[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tc\">docs#tc</a> (in core) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.trans_gen\">docs#relation.trans_gen</a> (in mathlib. Notice the second parts of the inductive definitions are slightly different, so proof is required that relation.trans_gen is transitive. Implicit arguments in constructors also differ. There doesn't seem to be a lemma showing both definitions are equivalent.</p>",
        "id": 281526286,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651909624
    },
    {
        "content": "<p>Likely because no one noticed and/or for a long time changing core was impossible. If there's the possibility of discarding the presumably barely used <code>tc</code>, that would probably be good, but I haven't looked at all. Otherwise, if you feel like PR'ing either a note explaining the existence of both, or some glue, those would be fine too.</p>",
        "id": 281528136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651912420
    },
    {
        "content": "<p>I know <code>tc</code> exists but I have yet to see someone use it.</p>",
        "id": 281528302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651912632
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 281541037,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651930723
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tc.wf\">docs#tc.wf</a> is among a bunch of basic facts about well-foundedness in core and that's why I discovered it ... I think it's best to rename it to <code>wf.tc</code> for dot notation, but as I learned above it's rarely used so probably no one cares, and I don't know how hard it is now to change the core ... is the only difference to PR at the  <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/wf.lean\">leanprover-community/lean repo</a> instead of mathlib, and CI would still work as usual?</p>",
        "id": 281541504,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651931292
    },
    {
        "content": "<p>I only found <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/tests/lean/run/type_equations.lean#L26\">one actual usage of <code>tc</code> in the Lean repo</a> so it's probably removable.</p>",
        "id": 281541715,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651931612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Here's a PR to remove <code>tc</code>: <a href=\"https://github.com/leanprover-community/lean/pull/713\">lean#713</a></p>\n<p>I think it makes sense to port over the transitive closure of a well-founded relation (see <a href=\"https://github.com/leanprover-community/lean/pull/713/files#diff-b43a2f246204b9d9f6c45d02477c1d2fa617300640fbf1d4408eaca230fdd237L110\">this</a>) to order/well_founded in mathlib using <code>relation.trans_gen</code>, if you want to do that.</p>",
        "id": 281548038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651940209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> has this result.</p>",
        "id": 281548128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651940354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Ok, is it somewhere? Right now the result is also in Lean and it's a matter of changing <code>tc</code> to <code>relation.trans_gen</code> and fixing the <code>tc.rec_on</code>.</p>",
        "id": 281548368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651940638
    },
    {
        "content": "<p>I believe it is in some PR, but Violeta knows best.</p>",
        "id": 281548429,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651940671
    },
    {
        "content": "<p>Here's the code that should, in some form, make it to mathlib to complete <a href=\"https://github.com/leanprover-community/lean/pull/713\">lean#713</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">relation.trans_gen</span>\n<span class=\"kn\">section</span>\n  <span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">accessible</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ac</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">relation.trans_gen</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"n\">acc.rec_on</span> <span class=\"n\">ac</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">acx</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">acc.intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">rel</span><span class=\"o\">,</span>\n      <span class=\"n\">relation.trans_gen.rec_on</span> <span class=\"n\">rel</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">hya</span> <span class=\"n\">z</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">hya</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">hya</span> <span class=\"n\">hac</span> <span class=\"n\">ih₁</span> <span class=\"n\">z</span> <span class=\"n\">ih₂</span><span class=\"o\">,</span> <span class=\"n\">acc.inv</span> <span class=\"o\">(</span><span class=\"n\">ih₂</span> <span class=\"n\">_</span> <span class=\"n\">hac</span><span class=\"o\">)</span> <span class=\"n\">hya</span><span class=\"o\">)</span>\n        <span class=\"n\">acx</span> <span class=\"n\">ih</span><span class=\"o\">))</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">wf</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"n\">relation.trans_gen</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">accessible</span> <span class=\"o\">(</span><span class=\"n\">h.apply</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">relation.trans_gen</span>\n</code></pre></div>",
        "id": 281548814,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651941282
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.well_founded.trans_gen\">docs#relation.well_founded.trans_gen</a></p>",
        "id": 281549931,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651942867
    },
    {
        "content": "<p>Got merged about two weeks ago</p>",
        "id": 281549942,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651942890
    },
    {
        "content": "<p>Should probably be called <code>well_founded.trans_gen</code> for dot notation.</p>",
        "id": 281549997,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651942945
    },
    {
        "content": "<p>I'm currently using <code>tc</code> in my combinatorial game work, because I only needed <code>tc.wf</code> and it's short to write; I only found out the existence of <code>trans_gen</code> by reading <code>pgame.lean</code>. Once <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.well_founded.trans_gen\">docs#relation.well_founded.trans_gen</a> is renamed to enable dot notation, I would have no objection to switch over.</p>",
        "id": 281552033,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651945453
    },
    {
        "content": "<p>Regarding the relationship between <code>tc</code> and <code>relation.trans_gen</code>, it's basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.trans_gen.trans_induction_on\">docs#relation.trans_gen.trans_induction_on</a>.</p>\n<p>If for some reason we still wanted something like <code>tc</code>, we could have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">relation.trans_gen'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">relation.trans_gen'</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">relation.trans_gen'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">relation.trans_gen'</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">relation.trans_gen'</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">relation.trans_gen'_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">relation.trans_gen'</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">relation.trans_gen</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">relation.trans_gen.single</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">relation.trans_gen.trans</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h.trans_induction_on</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">relation.trans_gen'.base</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">relation.trans_gen'.trans</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281554086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651948124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> <span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Would any of you like to be responsible for renaming <code>relation.well_founded.trans_gen</code> to <code>well_founded.trans_gen</code>?</p>",
        "id": 281554151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651948214
    },
    {
        "content": "<p>I'll do it</p>",
        "id": 281559509,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651955956
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14016\">#14016</a></p>",
        "id": 281559584,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651956053
    },
    {
        "content": "<p>I can't see any reason we'd need this alternate <code>trans_gen'</code>. If you can somehow show its induction hypothesis, then you can also immediately show the induction hypothesis from <code>trans_gen</code>, and I can't think of a situation in which the former wouldn't be strictly simpler.</p>",
        "id": 281584587,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651994349
    }
]