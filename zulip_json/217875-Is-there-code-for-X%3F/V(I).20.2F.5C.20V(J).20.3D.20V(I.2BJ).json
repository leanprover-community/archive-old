[
    {
        "content": "<p>There's a classic proposition in algebraic geometry, that the vanishing set V(I + J) of the ideal I + J for ideals I, J is equal to V(I) intersect V(J). Is this anywhere in mathlib? I've been slowly tinkering at it myself and the way I wrote it was like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.nullstellensatz</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ideal_addition_variety_intersection</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">k</span><span class=\"o\">)):</span>\n  <span class=\"n\">mv_polynomial.zero_locus</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.zero_locus</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n    <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.zero_locus</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I used mv_polynomial.zero_locus from ring_theory.nullstellensatz, which, if this result isn't already in mathlib, might make sense as a place to put it..?)</p>",
        "id": 242795323,
        "sender_full_name": "Alexandra Foster",
        "timestamp": 1623789157
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/prime_spectrum.lean#L269L271\">https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/prime_spectrum.lean#L269L271</a></p>",
        "id": 242798044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623790354
    },
    {
        "content": "<p>The rest of that file also contains a bunch of similar lemmas</p>",
        "id": 242798070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623790368
    },
    {
        "content": "<p>This is in the context of the prime spectrum of a ring, not in the sense of \"classical\" algebraic geometry in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>K</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">K^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 242798127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623790395
    },
    {
        "content": "<p>That's great regardless, thanks!</p>",
        "id": 242799450,
        "sender_full_name": "Alexandra Foster",
        "timestamp": 1623790993
    },
    {
        "content": "<p>Here's a documented proof, modulo <code>ideal.mem_add</code>, which I couldn't find! Is it there? Edit: it's <code>mem_sup</code> plus definitional abuse. Eew.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.nullstellensatz</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ideal.mem_add</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">J</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">submodule.mem_sup</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ideal_addition_variety_intersection</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial.zero_locus</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.zero_locus</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.zero_locus</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- extensionality: two sets are equal iff they have the same elements</span>\n  <span class=\"n\">ext</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ↔ can be broken down into → and ←</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- one way: assume P ∈ V(I+J)</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- need to prove P ∈ V(I) ∧ P ∈ V(J)</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- want P ∈ V(I+J) → P ∈ V(I). But we know V sends ⊆ to ⊇</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mv_polynomial.zero_locus_anti_mono</span> <span class=\"n\">_</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- so now it suffices to prove I ≤ I + J</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_sup_left</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- essentially same proof the other way</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mv_polynomial.zero_locus_anti_mono</span> <span class=\"n\">_</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_sup_right</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Other way: assume P ∈ V(I) and P ∈ V(J)</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hPI</span><span class=\"o\">,</span> <span class=\"n\">hPJ</span><span class=\"o\">⟩,</span>\n    <span class=\"c1\">-- assume f ∈ I + J</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- write f as g + h with g ∈ I and h ∈ J</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ideal.mem_add</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"c1\">-- evaluation is additive</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ring_hom.map_add</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- but eval P g = 0 and eval P h = 0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hPI</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">hPJ</span> <span class=\"n\">h</span> <span class=\"n\">hh</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- and now it's easy</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242803248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623793084
    },
    {
        "content": "<p>Re: mem_add -- it's mem_sup! I've edited.</p>",
        "id": 242805505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623794514
    },
    {
        "content": "<p>Bonus: commenting out <code>[fintype σ]</code> we see the proof still works :D</p>",
        "id": 242806045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623794875
    },
    {
        "content": "<p>wow..! I was working away at it myself but I appreciate this solution. linear_algebra.basic is a great discovery, and I am impressed but not surprised that the proof of mem_sup in there is so long. I've been thinking, it's a very interesting choice to have sup be a more basic notion than sum</p>",
        "id": 242823641,
        "sender_full_name": "Alexandra Foster",
        "timestamp": 1623810750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419248\">@Alexandra Foster</span> the reason we use <code>sup</code> is because ideals in a commutative ring form a lattice, in the sense of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lattice\">docs#lattice</a> and the sum of ideals corresponds to the sup in this lattice.</p>",
        "id": 242823853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623811031
    },
    {
        "content": "<p>You will find other instances in mathlib as well. For example, the sup of two subgroups <code>A</code> and <code>B</code> of a given group <code>G</code> is the subgroup generated by <code>A</code> and <code>B</code>, and again the collection of all subgroups form a lattice.</p>",
        "id": 242824534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623811819
    },
    {
        "content": "<p>Incidentally, this lemma should join mathlib, right?  (Maybe in the <code>ring_theory.nullstellensatz</code> file under the name <code>mv_polynomial.zero_locus_sup</code>.)</p>",
        "id": 242824541,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623811835
    },
    {
        "content": "<p>Yes it probably should be in mathlib, in one form or another... It might be worth it to give a full definition of the Zariski topology on an algebraic set</p>",
        "id": 242824670,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623811977
    },
    {
        "content": "<p>(and compare with the Zariski topology of the prime spectrum that we already have)</p>",
        "id": 242824685,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623812008
    }
]