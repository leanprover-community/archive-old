[
    {
        "content": "<p>I appear to need the following variant. Do we have it? It's the last piece of the puzzle for one of the LTE files. Hopefully I didn't mess up...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.images</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- possibly missing API</span>\n<span class=\"kd\">@[simp, reassoc]</span> <span class=\"kd\">lemma</span> <span class=\"n\">kernel_ι_comp_factor_thru_image</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">kernel.ι</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">factor_thru_image</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">comp_factor_thru_image_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">kernel.condition</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">first_isomorphism_theorem</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">factor_thru_image</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286311223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655360783
    },
    {
        "content": "<p>I don't think we have this exact variant, but it's easy to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">abelian.coimage_iso_image'</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cancel_mono</span> <span class=\"o\">(</span><span class=\"n\">image.ι</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">cancel_epi</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">f</span><span class=\"o\">))]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286315962,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1655364493
    }
]