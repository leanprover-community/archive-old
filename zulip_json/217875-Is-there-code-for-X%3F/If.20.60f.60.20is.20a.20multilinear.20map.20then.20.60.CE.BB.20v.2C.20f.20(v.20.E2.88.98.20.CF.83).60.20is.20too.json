[
    {
        "content": "<p>That is, if I have a multilinear map of <code>n</code> inputs, I can turn it into a multilinear map over <code>m</code> inputs by \"wiring up\" the inputs however I like</p>",
        "id": 217986991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606387432
    },
    {
        "content": "<p>This isn't true unless <code>σ</code> is a bijection (and so <code>n = m</code>)</p>",
        "id": 217993361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606392060
    },
    {
        "content": "<p>Ah right, I see the mistake in my reasoning</p>",
        "id": 217994698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606393008
    },
    {
        "content": "<p>Does this exist for <code>σ : A ≃ B</code> then? If not, what would be a good name? <code>multilinear_map.comp_domain f σ</code>?</p>",
        "id": 217995021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606393239
    },
    {
        "content": "<p>Maybe even <code>multilinear_map.congr_domain</code>, since the result is an equiv between maps in <code>n</code> inputs and maps in <code>m</code> inputs</p>",
        "id": 217995808,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606393783
    },
    {
        "content": "<p>I thought about that too. (to be clear, as Reid points out this is an equiv between maps with inputs of type A and B, not with different numbers of inputs)</p>",
        "id": 217996953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606394539
    },
    {
        "content": "<p>Also note that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.dom_congr\">docs#finsupp.dom_congr</a>, in case we want precedent in the naming</p>",
        "id": 217997032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606394610
    },
    {
        "content": "<p>Ah, here's the concern - this is a congruence in the domain of the domain, not in the domain itself</p>",
        "id": 217997053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606394635
    },
    {
        "content": "<p>Sounds like <code>dom_dom_congr</code> then <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 217997147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606394687
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">function.update_comp_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">function.update</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">function.update</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g.symm</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">function.update_comp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">g.injective</span><span class=\"o\">),</span> <span class=\"n\">g.apply_symm_apply</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.update_comp_equiv_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">function.update</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">function.update</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g.symm</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">function.update_comp_equiv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">a'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">multilinear_map.dom_dom_congr</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multilinear_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multilinear_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">function.update_comp_equiv_apply</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">m.map_add</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">function.update_comp_equiv_apply</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">m.map_smul</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Should I be using a <code>congr</code>-like name for those <code>function</code> lemmas? Do they belong in <code>equiv</code> instead?</p>",
        "id": 218116072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606499357
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5136\">#5136</a></p>",
        "id": 218120078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606502836
    }
]