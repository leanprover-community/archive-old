[
    {
        "content": "<p>Suppose I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"c1\">-- term.abs y P = λ y . P</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n\n<span class=\"c1\">-- sub_is_def M x N means M [ x := N ] is defined</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- y [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">term.var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- P [ x := N ] is defined → Q [ x := N ] is defined → (P Q) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">term.app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x = y → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">term.abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x ≠ y → x ∉ FV ( λ y . P ) → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">term.abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">term.abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x ≠ y → y ∉ FV ( N ) → P [ x := N ] is defined → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">term.abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">:=</span><span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"bp\">`</span><span class=\"n\">is_def</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>and <code>H1: (P.app Q)[x:=N]is_def</code>in the context. Is there a tactic to add <code>P [ x := N ] is_def</code> and <code>Q [ x := N ]</code> to the context? I think this might be something like inversion in Coq?</p>",
        "id": 257842776,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1634401047
    },
    {
        "content": "<p>Check out <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.60inversion.60.20tactic.3F/near/257345089\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20.60inversion.60.20tactic.3F/near/257345089</a>,, the answer is probably <code>cases H1</code> but your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> doesn't copy paste into lean and work so I can't check</p>",
        "id": 257843521,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634401728
    },
    {
        "content": "<p>Yes, <code>cases H1</code> worked. Thank you.</p>",
        "id": 257843771,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1634401936
    },
    {
        "content": "<p>Is there a way to specify the names of the resulting hypotheses? Adding <code>with</code> doesn't seem to have any effect.</p>",
        "id": 257844344,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1634402479
    },
    {
        "content": "<p>Try <code>with x y z w</code></p>",
        "id": 257845456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634403554
    },
    {
        "content": "<p>Sometimes some of the names are ignored</p>",
        "id": 257845464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634403566
    },
    {
        "content": "<p>So just keep adding more!</p>",
        "id": 257845474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634403579
    },
    {
        "content": "<p>Yes, that does it. I had to use <code>cases H1 with _ _ _ _ _ _ _ H1_P H1_Q</code>. Do you know why?</p>",
        "id": 257848978,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1634406883
    },
    {
        "content": "<p><code>cases</code> replaces the relevant terms by variables (+ equalities that these variables are equal to the terms you had) and then applies induction on that variable. Then the equalities are used to get rid of all impossible cases. <br>\nThe names for the underscores are probably used for the impossible cases that are removed before you see them. <code>cases</code> is not very smart with the variable names it uses.</p>",
        "id": 257869042,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634425795
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 257878307,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1634435657
    }
]