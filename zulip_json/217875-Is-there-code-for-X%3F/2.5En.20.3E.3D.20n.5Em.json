[
    {
        "content": "<p>Ok guys I have given up... Does someone want to help me write a maths proof and formalize it in lean? <code>example : ∀ (m n : nat), m^2 ≤ n → 4 ≤ m → n^m ≤ 2^n := sorry</code> I will credit you in my paper.</p>",
        "id": 266985488,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641413855
    },
    {
        "content": "<p>Relayed it on Discord.</p>",
        "id": 266985655,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641413941
    },
    {
        "content": "<p>what discord?</p>",
        "id": 266986322,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641414288
    },
    {
        "content": "<p>The Xena Discord server. <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>'s lair.</p>",
        "id": 266986398,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641414332
    },
    {
        "content": "<p>You might want to have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/2784\">#2784</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/8002\">#8002</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/9890\">#9890</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/9925\">#9925</a></p>",
        "id": 266987405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641414836
    },
    {
        "content": "<p>They are lemmas about Bertrand's postulate, which has the same flavor as your problem.</p>",
        "id": 266987481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641414861
    },
    {
        "content": "<p>Right now the only maths proof I have is pretty horrible (it involves logs).</p>",
        "id": 266989926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641416202
    },
    {
        "content": "<p>Kevin, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.log\">docs#nat.log</a> or lifting to reals?</p>",
        "id": 266991183,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641416824
    },
    {
        "content": "<p>I only wrote a pen and paper proof and I used regular log, this was why I didn't formalise my proof</p>",
        "id": 266992421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641417512
    },
    {
        "content": "<p>I needed log(n)^2&lt;n(log(2))^2 for n&gt;=16</p>",
        "id": 266992479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641417546
    },
    {
        "content": "<p>I think I have a proof which I can formalise, writing it down now</p>",
        "id": 266992670,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641417639
    },
    {
        "content": "<p>Ah yes, this is one of those problems that might depend on showing that <code>log x / x</code> is decreasing. The recently added lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.log_div_self_antitone_on\">docs#real.log_div_self_antitone_on</a> could be helpful.</p>",
        "id": 266995073,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1641419014
    },
    {
        "content": "<p>basically<br>\n<code>n^m ≤ 2^n ↔ m log n ≤ n log 2 ↔ (log n) / n ≤ (log 2) / m</code><br>\nwhich follows from <code>(log m^2) / m^2 ≤ log 2 / m</code>, since <code>log x / x</code> is decreasing for large enough <code>n</code>.</p>",
        "id": 266996199,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1641419399
    },
    {
        "content": "<p>Yeah that's essentially what I'm doing, using your new lemma!</p>",
        "id": 266996265,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641419414
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential_bounds</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sq_le_two_pow</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat.le_rec_on'</span> <span class=\"n\">hm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">add_sq</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.mul_le_mul_left</span> <span class=\"mi\">2</span> <span class=\"n\">ih</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">two_mul</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">],</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.pow_le_pow_swap</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">real.exp</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">real.exp_pos</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.log_le_log</span> <span class=\"o\">(</span><span class=\"n\">real.rpow_pos_of_pos</span> <span class=\"o\">(</span><span class=\"n\">hx'.trans_le</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">real.rpow_pos_of_pos</span> <span class=\"n\">hx'</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">real.log_rpow</span> <span class=\"o\">(</span><span class=\"n\">hx'.trans_le</span> <span class=\"n\">hy</span><span class=\"o\">),</span> <span class=\"n\">real.log_rpow</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">div_le_div_iff</span> <span class=\"o\">(</span><span class=\"n\">hx'.trans_le</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"n\">hx'</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">real.log_div_self_antitone_on</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">hx.trans</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_le_pow_swap</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←@</span><span class=\"n\">nat.cast_le</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">real.pow_le_pow_swap</span>\n    <span class=\"o\">(</span><span class=\"n\">real.exp_one_lt_d9.le.trans</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_le.2</span> <span class=\"n\">hm</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_le.2</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_le_iff_le_left</span> <span class=\"o\">((</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pow_le_pow_swap</span> <span class=\"o\">((</span><span class=\"kd\">by</span> <span class=\"n\">norm_num1</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"n\">h₂</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">pow_right_comm</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₃.trans</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">sq_le_two_pow</span> <span class=\"n\">h₂</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266996811,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641419734
    },
    {
        "content": "<p>I think some of the hypotheses can be slightly generalised, but here's your original question!</p>",
        "id": 266996909,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641419770
    },
    {
        "content": "<p>Interestingly, the <code>log x / x</code> decreasing proof doesn't actually depend on calculus, you can see it here: <a href=\"https://github.com/leanprover-community/mathlib/pull/10985\">#10985</a>. (Credit to Mario for this proof).</p>",
        "id": 266997198,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1641419938
    },
    {
        "content": "<p>It vitally uses <code>add_one_le_exp</code>, which I think goes via the Taylor series for the exponential?</p>",
        "id": 266997451,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641420034
    },
    {
        "content": "<p>In some sense log depends on calculus, because the base e is a limit. I bet natural log didn't exist before calculus</p>",
        "id": 266997697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641420160
    },
    {
        "content": "<p>I use <code>log</code> all the time without calculus, I just count the number of digits in my number.</p>",
        "id": 266997744,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641420195
    },
    {
        "content": "<p>Sure but that's not the right log here</p>",
        "id": 266997807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641420229
    },
    {
        "content": "<p>I guess I should say that the proof depends on limits, but not on differentiation.</p>",
        "id": 266997818,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1641420234
    },
    {
        "content": "<p>This is awesome guys I love you all. <span aria-label=\"kiss with blush\" class=\"emoji emoji-1f61a\" role=\"img\" title=\"kiss with blush\">:kiss_with_blush:</span></p>",
        "id": 267007501,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641425773
    },
    {
        "content": "<p>Congrats to <span class=\"user-mention\" data-user-id=\"367155\">@Yevhenii Diomidov</span> for getting it without the reals! <a href=\"https://gist.github.com/diomidov/d328e181d196bf4c1517beb27ae5f0ca\">https://gist.github.com/diomidov/d328e181d196bf4c1517beb27ae5f0ca</a></p>",
        "id": 267041517,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641462160
    },
    {
        "content": "<p>Ok thanks again, but I have a few questions:</p>\n<ol>\n<li>What does <code>linarith</code>/<code>nlinarith</code> do? They \"solve (non-) linear arithmetic problems\", but how? </li>\n<li>I understand <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>'s approach. I don't see why they are switching to ℝ and why we want to try to avoid this. </li>\n<li>I don't fully understand <span class=\"user-mention\" data-user-id=\"367155\">@Yevhenii Diomidov</span>'s approach, but the code looks very different from what I have seen so far. It feels like they are writing down \"where\" they want to go and not just \"how\". How is this style of code called / where can I read more about this?</li>\n<li>What does  <code>.trans</code> do? It's used a lot, but I can't seem to find out what it does.</li>\n<li>Everyone seems to be very confident using abbreviations. Is there a naming convention I can look at? Because sometimes it isn't intuitive. (Especially because english isn't my first language...)</li>\n</ol>",
        "id": 267053630,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641470964
    },
    {
        "content": "<ol>\n<li>\n<p>I think linarith etc uses Fourier-Motzkin elimination? Why do you want to know? I have no idea how it works, I just use it.</p>\n</li>\n<li>\n<p>y^x&lt;=x^y for e&lt;=x&lt;=y is not so hard to prove over the reals, but seems harder to prove over the naturals.</p>\n</li>\n<li>\n<p><code>x.trans</code> depends on the type of <code>x</code>. For example if <code>x : a = b</code> then <code>x.trans</code> means <code>eq.trans x</code>, and <code>eq.trans</code> is the theorem that if a=b and b=c then a=c.</p>\n</li>\n<li>\n<p><a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>\n</li>\n</ol>",
        "id": 267054090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641471325
    },
    {
        "content": "<p>Thanks a lot. I really appreciate it.</p>\n<ol>\n<li>I just wanted to know how it's called so that I can reference it. Thanks!</li>\n<li>yeah but why exactly?<br>\n(My question 3 is unanswered)</li>\n</ol>",
        "id": 267055910,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641472633
    },
    {
        "content": "<p><code>nat.log</code> exists, but returns a natural number, so essentially a rounded version of the \"actual\" logarithm. That means it doesn't have quite the same properties</p>",
        "id": 267056445,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641473099
    },
    {
        "content": "<p>Ok, that makes sense. Is it taboo to switch to a different number set to prove something?</p>",
        "id": 267057060,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641473559
    },
    {
        "content": "<p>Not taboo, but it can be interesting to see if you can get there in a more \"low-tech\" way</p>",
        "id": 267060454,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641475706
    },
    {
        "content": "<p>If you \"view source\" of my message you can see I wrote \"1,2,4,5\" but Zulip is rendering them as \"1,2,3,4\". Surprising!</p>",
        "id": 267068805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641480618
    },
    {
        "content": "<p>You can thank markdown.</p>",
        "id": 267068883,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641480665
    },
    {
        "content": "<p>yeah, that's been an annoyance with markdown forever. always great when someone asks sth like \"how old are you?\" and someone answers:</p>",
        "id": 267068949,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641480706
    },
    {
        "content": "<ol start=\"21\">\n<li>I am that age years old</li>\n</ol>",
        "id": 267068956,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641480712
    },
    {
        "content": "<p>Oh, it doesn't seem to happen for single-item lists here. It does on Reddit</p>",
        "id": 267069049,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641480730
    },
    {
        "content": "<p>1\\. This<br>\n2\\. Maybe<br>\n7\\. Works<br>\nExperiment failed.</p>",
        "id": 267069078,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641480751
    },
    {
        "content": "<p>Ok guys I am still confused about this:<br>\nafter line 39 of <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>'s code the proof state looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>          <span class=\"c1\">-- A ≤ B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>            <span class=\"c1\">-- A ≤ C</span>\n</code></pre></div>\n<p>And after applying <code>h3.trans</code> the proof state looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>          <span class=\"c1\">-- A ≤ B</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>         <span class=\"c1\">-- B ≤ C</span>\n</code></pre></div>\n<p>If it was an equality it would make sense to me, but with the &lt; sign I can't comprehend it.</p>",
        "id": 267242709,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641589454
    },
    {
        "content": "<p>Do you understand it the other way? If the goal is X and you apply a tactic and the goal changes to Y, then lean is saying that from Y and the hypotheses it can deduce X. Do you see how?</p>",
        "id": 267242948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641589602
    },
    {
        "content": "<p>yes now I see it xD. But it is confusing tho. Because just from looking at the first state proof there might be cases where <code>B &gt; C</code></p>",
        "id": 267243412,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641589892
    },
    {
        "content": "<p>We're changing the goal, not what we proved. So it might still be the case that <code>C &lt; B</code>. It's just that we went from trying to prove <code>A ≤ C</code> to trying to prove <code>B ≤ C</code>.</p>",
        "id": 267243685,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641590051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454489\">Pascal Schoppenhauer</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/2.5En.20.3E.3D.20n.5Em/near/267243412\">said</a>:</p>\n<blockquote>\n<p>Because just from looking at the first state proof there might be cases where <code>B &gt; C</code></p>\n</blockquote>\n<p>If so then tough luck and we won't be able to finish the proof this way, and we'll have to try something else instead of using <code>h3.trans</code>.</p>",
        "id": 267244316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641590442
    },
    {
        "content": "<p>Math is mindblowing <span aria-label=\"hurt\" class=\"emoji emoji-1f915\" role=\"img\" title=\"hurt\">:hurt:</span> I feel like I would need ages to figure this stuff out</p>",
        "id": 267244700,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641590697
    },
    {
        "content": "<p>Thanks tho I get it now</p>",
        "id": 267244725,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641590712
    },
    {
        "content": "<p>I have another question: in line 38 what do the <code>{ }</code> do?<br>\nAnd what's <code>norm_num1</code>?</p>",
        "id": 267249174,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641593336
    },
    {
        "content": "<p>Maybe work through the tutorial? <a href=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a></p>",
        "id": 267249524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641593525
    },
    {
        "content": "<p>Thanks, I'll try this.</p>",
        "id": 267250630,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1641594169
    },
    {
        "content": "<p>off-topic:</p>\n<p>͏1͏. one<br>\n͏2͏. two<br>\n͏4͏. four<br>\n͏5͏. five<br>\n͏7͏. seven</p>",
        "id": 267251513,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641594701
    },
    {
        "content": "<p>Numbering works as expected.</p>",
        "id": 267251517,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641594704
    }
]