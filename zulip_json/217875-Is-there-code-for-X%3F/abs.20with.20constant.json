[
    {
        "content": "<p>I'm currently trying to solve a goal of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but neither the tactics i tried managed to automatically solve this, nor library_search were able to solve this for me although it seems quite trivially true to me?</p>",
        "id": 244458536,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1625073613
    },
    {
        "content": "<p>It's false if <code>c = -1</code></p>",
        "id": 244458599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625073645
    },
    {
        "content": "<p>You need the hypothesis <code>0 ≤ c</code>. If you add that, then <code>library_search</code> might be able to help you</p>",
        "id": 244458698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625073688
    },
    {
        "content": "<p>Ohh right it would have to be positive c, still no luck with library search even with that hypothesis though :/</p>",
        "id": 244459035,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1625073804
    },
    {
        "content": "<p><code>abs_mul</code> will get you closer.</p>",
        "id": 244459195,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625073857
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/abs_mul\">docs#abs_mul</a></p>",
        "id": 244459392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625073949
    },
    {
        "content": "<p>The new lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abs_cases\">docs#abs_cases</a> is designed precisely to automate this kind of thing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">abs_cases</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">abs_cases</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 244459539,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625074006
    },
    {
        "content": "<p>(new in <a href=\"https://github.com/leanprover-community/mathlib/issues/8124\">#8124</a>, so it won't work in the web editor yet)</p>",
        "id": 244459611,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625074050
    },
    {
        "content": "<p>(but it will work in gitpod!)</p>",
        "id": 244459658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625074075
    },
    {
        "content": "<p>Very cool, thanks!</p>",
        "id": 244459728,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1625074092
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span>)</p>",
        "id": 244459805,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625074126
    }
]