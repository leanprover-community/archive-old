[
    {
        "content": "<p>Do we have the fact that the natural map <code>(E × F) × G → E × F × G</code> is smooth anywhere?</p>",
        "id": 260283502,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636038573
    },
    {
        "content": "<p>If not, is the following reasonable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.times_cont_diff</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Assumptions here can be relaxed of course</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">linear_isometry_equiv_prod_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">F</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"n\">equiv.prod_assoc</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">equiv.prod_assoc</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintros</span> <span class=\"o\">⟨⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩,</span> <span class=\"n\">g</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_equiv.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">equiv.prod_assoc_apply</span><span class=\"o\">,</span> <span class=\"n\">prod.norm_def</span><span class=\"o\">,</span> <span class=\"n\">max_assoc</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">equiv.prod_assoc</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_linear_isometry_equiv_prod_assoc</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">linear_isometry_equiv_prod_assoc</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">F</span> <span class=\"bp\">×</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.prod_assoc</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">times_cont_diff_prod_assoc</span> <span class=\"o\">:</span>\n  <span class=\"n\">times_cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">⊤</span> <span class=\"bp\">$</span> <span class=\"n\">equiv.prod_assoc</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe_linear_isometry_equiv_prod_assoc</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">▸</span>\n<span class=\"o\">(</span><span class=\"n\">linear_isometry_equiv_prod_assoc</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span>\n</code></pre></div>",
        "id": 260283685,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636038630
    },
    {
        "content": "<p>It looks good to me, but <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> or <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> can probably comment.</p>",
        "id": 260284309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636038871
    },
    {
        "content": "<p>This should be an easy consequence of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_cont_mdiff.prod_mk\">docs#times_cont_mdiff.prod_mk</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_cont_diff_fst\">docs#times_cont_diff_fst</a> and similar.<br>\nHowever, if you need this property for something that is not <em>specifically</em> about reordering/reassociating arguments, I have <em>serious</em> concerns that you are taking an efficient route here.</p>",
        "id": 260294279,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636042446
    },
    {
        "content": "<p>The note<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement\">https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement</a><br>\nensures you usually don't have to worry about these issues for <code>continuous</code>, but it applies equally well to <code>times_cont_diff</code>.<br>\nIf you need this to apply some <code>times_cont_diff</code> lemma to your case, can you use the tips in that library note to generalize said lemma?</p>",
        "id": 260294548,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636042551
    },
    {
        "content": "<p>Thanks for the remarks!</p>",
        "id": 260294926,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636042685
    },
    {
        "content": "<p>Oh, I missed the <code>m</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_cont_mdiff.prod_mk\">docs#times_cont_mdiff.prod_mk</a>. We need some analogue <code>times_cont_diff.prod_mk</code></p>",
        "id": 260294945,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636042691
    },
    {
        "content": "<p>I am aware of the proof avoiding the linear isometry, I just like my approach since I feel like it's more fundamental but I have no strong feelings.</p>",
        "id": 260295036,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636042731
    },
    {
        "content": "<p>Regarding the concern that I may be taking an inefficient route, all I want is to know that the evaluation map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><msub><mi>m</mi><mi>A</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>E</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">Hom_A(E, F) \\times E \\to F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is smooth where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E, F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> are normed spaces and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><msub><mi>m</mi><mi>A</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom_A(E, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span> is the space of continuous affine maps.</p>",
        "id": 260295245,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636042807
    },
    {
        "content": "<p>I decided to obtain this by factoring this evaluation map as: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><msub><mi>m</mi><mi>A</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>E</mi><mo>≃</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mo>×</mo><mi>H</mi><mi>o</mi><msub><mi>m</mi><mi>L</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>×</mo><mi>E</mi><mo>≃</mo><mi>F</mi><mo>×</mo><mi>H</mi><mi>o</mi><msub><mi>m</mi><mi>L</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>E</mi><mo>→</mo><mi>F</mi><mo>×</mo><mi>F</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">Hom_A(E, F) × E ≃ (F × Hom_L(E, F)) × E ≃ F × Hom_L(E, F) × E → F × F → F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span></p>",
        "id": 260295313,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636042833
    },
    {
        "content": "<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><msub><mi>m</mi><mi>L</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom_L(E, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span> is the space of continuous linear maps, and the final arrow is addition.</p>",
        "id": 260295362,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636042853
    },
    {
        "content": "<p>Right in the middle you can see where I need smoothness of associativity. I'm open to suggestions!</p>",
        "id": 260295404,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636042869
    },
    {
        "content": "<p>In any case, I'll study your remarks and thank you for proving them.</p>",
        "id": 260295606,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636042943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Smoothness.20of.20.60equiv.2Eprod_assoc.60/near/260294945\">said</a>:</p>\n<blockquote>\n<p>Oh, I missed the <code>m</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_cont_mdiff.prod_mk\">docs#times_cont_mdiff.prod_mk</a>. We need some analogue <code>times_cont_diff.prod_mk</code></p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_cont_diff.prod_map\">docs#times_cont_diff.prod_map</a></p>",
        "id": 260295914,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636043049
    },
    {
        "content": "<p>that's not quite the same.</p>",
        "id": 260295960,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636043066
    },
    {
        "content": "<p>compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.prod_mk\">docs#continuous.prod_mk</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.prod_map\">docs#continuous.prod_map</a></p>",
        "id": 260296019,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636043093
    },
    {
        "content": "<p>Right, I see.</p>",
        "id": 260296092,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636043123
    },
    {
        "content": "<p>I'm think that the library note applies to your situation, but I'm not sure. What is the lemma that <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><msub><mi>m</mi><mi>L</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>E</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">Hom_L(E, F) × E → F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span><br>\nis smooth? The library note probably applies to that lemma.</p>",
        "id": 260296410,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636043261
    },
    {
        "content": "<p>I'm actually really interested to learn about how this library note applies here so I'm delighted you're interested.</p>",
        "id": 260296647,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636043357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Smoothness.20of.20.60equiv.2Eprod_assoc.60/near/260296410\">said</a>:</p>\n<blockquote>\n<p>I'm think that the library note applies to your situation, but I'm not sure. What is the lemma that <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><msub><mi>m</mi><mi>L</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>E</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">Hom_L(E, F) × E → F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span><br>\nis smooth? The library note probably applies to that lemma.</p>\n</blockquote>\n<p>I don't think this literally exists in the library but it almost does. See here: <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Smoothness.20of.20linear.20evaluation.20map/near/259864674\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Smoothness.20of.20linear.20evaluation.20map/near/259864674</a></p>",
        "id": 260296731,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636043399
    },
    {
        "content": "<p>substitute every occurrence of <code>continuous</code> in my library note to <code>times_cont_diff</code>, and the advice is probably still good.</p>",
        "id": 260296777,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636043404
    },
    {
        "content": "<p>Understood, I note you even say this in the note itself.</p>",
        "id": 260296832,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636043425
    },
    {
        "content": "<p>Yeah, that lemma should be formulated something like <code>times_cont_diff f -&gt; times_cont_diff g -&gt; times_cont_diff λ x, (f x) (g x)</code> where <code>f : X -&gt; (E →L[𝕜] F)</code> and <code>g : X -&gt; E</code></p>",
        "id": 260296993,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636043490
    },
    {
        "content": "<p>Excellent, this is exactly the sort of example I needed to see. I will use this formalisation (and tag you on the relevant PR) in due course.</p>",
        "id": 260297184,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636043557
    },
    {
        "content": "<p>From your version of the lemma, the proof of this version should be something like <code>times_cont_diff_continuous_linear_eval.comp $ hf.prod_mk hg</code> (using the non-existent <code>prod_mk</code>)</p>",
        "id": 260297239,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636043586
    },
    {
        "content": "<p>I have to go for a run now so I've proposed an approach here: <a href=\"https://github.com/leanprover-community/mathlib/issues/10165\">#10165</a></p>",
        "id": 260298241,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636043970
    }
]