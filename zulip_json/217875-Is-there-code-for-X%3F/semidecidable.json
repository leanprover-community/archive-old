[
    {
        "content": "<p>I don't think semidecidable is quite the right word but I want the <code>decidable</code> equivalent of <code>option</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">semidecidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span>  <span class=\"n\">yes</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">semidecidable</span>\n<span class=\"bp\">|</span> <span class=\"n\">idk</span> <span class=\"o\">:</span> <span class=\"n\">semidecidable</span>\n</code></pre></div>",
        "id": 219710221,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607781753
    },
    {
        "content": "<p>I have proposed this before, with the same name, so I think that's evidence for its naturalness even though it's technically incorrect</p>",
        "id": 219710538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607782297
    },
    {
        "content": "<p>ok, so I guess it's not in mathlib</p>",
        "id": 219710599,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607782359
    },
    {
        "content": "<p>nope, not unless you are happy with <code>option (plift p)</code></p>",
        "id": 219710612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607782385
    },
    {
        "content": "<p>yeah that loses the semantics somewhat</p>",
        "id": 219710616,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607782403
    },
    {
        "content": "<p>ok cool I'll just add it at the top of my file</p>",
        "id": 219710621,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607782430
    },
    {
        "content": "<p>I wonder how you would define real semidecidable</p>",
        "id": 219710812,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607782702
    },
    {
        "content": "<p>I don't think synthetic semidecidability makes sense in lean</p>",
        "id": 219710831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607782765
    },
    {
        "content": "<p>you can of course define it using <code>computability/</code> stuff</p>",
        "id": 219710837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607782788
    },
    {
        "content": "<p>but this isn't going to reflect into a kernel decision procedure</p>",
        "id": 219710886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607782830
    },
    {
        "content": "<p>yeah I couldn't think what it would be without using computability</p>",
        "id": 219710888,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607782832
    },
    {
        "content": "<p>A simple example of a semidecision procedure is <code>nat.find</code>. It has the type <code>(\\ex n : nat, p n) -&gt; {n | p n}</code> where <code>p</code> is a decidable proposition. The sense in which this is complete is that if the algorithm terminates, then <code>\\ex n : nat, p n</code>; but we knew that already, it's a precondition. In the traditional definition we would say that if the property fails to hold then the algorithm does not terminate, but in lean's case there's no algorithm in that regime at all</p>",
        "id": 219711072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607783188
    },
    {
        "content": "<p>nice</p>",
        "id": 219711223,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607783454
    },
    {
        "content": "<p>I was daydreaming that you could have a VM override for <code>semidecidable a = b</code> which checks if the VM objects are the same but the code as written in Lean always returns <code>idk</code>. Although that might just be confusing.</p>",
        "id": 219711324,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607783620
    },
    {
        "content": "<p>Also, this kind of object comes up in the pointer equality test in the lean 4 \"pointer-based optimizations\" paper</p>",
        "id": 219711377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607783668
    },
    {
        "content": "<p>does this look familiar? (p.12 of <a href=\"https://arxiv.org/pdf/2003.01685.pdf\">https://arxiv.org/pdf/2003.01685.pdf</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PtrEqResult</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">unknown</span>  <span class=\"o\">:</span> <span class=\"n\">PtrEqResult</span>\n<span class=\"bp\">|</span> <span class=\"n\">yesEqual</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">PtrEqResult</span>\n</code></pre></div>",
        "id": 219711490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607783825
    },
    {
        "content": "<p>although in their case they are really returning a <code>trunc (semidecidable (x = y))</code></p>",
        "id": 219711509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607783875
    },
    {
        "content": "<p>so actually I guess your daydream already exists in lean 4 by another name</p>",
        "id": 219711562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607783955
    },
    {
        "content": "<p>Note that it is unsound to actually have the primitive return <code>semidecidable (x = y)</code>, because you can use it to detect if you are running in the logic or as compiled code, and do something evil in the second case</p>",
        "id": 219711621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607784029
    },
    {
        "content": "<p>Yeah which is why they have the subsingleton β constraint</p>",
        "id": 219711850,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607784469
    },
    {
        "content": "<p>right</p>",
        "id": 219711893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607784496
    },
    {
        "content": "<p>it's not necessary to write it in continuation passing style though, if you have <code>trunc</code> and <code>subsingleton</code></p>",
        "id": 219711899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607784520
    },
    {
        "content": "<p>jolly good</p>",
        "id": 219711910,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607784561
    },
    {
        "content": "<p>I'm asking about it because I effectively sneak in a pointer-eq check in widgets (which is fine because it's all in meta mode anyway). But I was thinking about how to implement in Lean 4 but looks like they've got my case covered</p>",
        "id": 219711960,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607784618
    },
    {
        "content": "<p>I think it's also useful for general decision procedures where you can't be bothered to prove the converse, for example equality in a random ring</p>",
        "id": 219711990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607784688
    },
    {
        "content": "<p>or type checking a term</p>",
        "id": 219712001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607784722
    }
]