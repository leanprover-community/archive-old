[
    {
        "content": "<p>Is there a simple proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">padic_norm.padic_norm_eq_one_of_not_dvd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>from what is in mathlib?</p>",
        "id": 276172135,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647947467
    },
    {
        "content": "<p>I see a lot of <code>padic_val_nat</code> and <code>padic_val_rat</code> in number_theory.padics.padic_norm, but no <code>padic_val_int</code>, which I find surprising.</p>",
        "id": 276172220,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647947521
    },
    {
        "content": "<p>OK, the <code>nat</code> version is there: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_val_nat_of_not_dvd\">docs#padic_val_nat_of_not_dvd</a> . So I'll guess I have to use that, but having to convert integers to naturals is a pain...</p>",
        "id": 276172377,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647947603
    },
    {
        "content": "<p>Plus, I'm stumbling over the differences between <code>norm</code>, <code>padic_norm_e</code> and <code>padic_norm</code>.</p>",
        "id": 276172561,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647947703
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_norm_e.norm_int_lt_one_iff_dvd\">docs#padic_norm_e.norm_int_lt_one_iff_dvd</a> seems interesting</p>",
        "id": 276173015,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647947996
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">padic_norm.padic_norm_eq_one_of_not_dvd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">padic_int.norm_def</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_le_of_not_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">padic_norm_e.norm_int_le_one</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">padic_norm_e.norm_int_lt_one_iff_dvd</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276173598,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647948334
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">padic_norm.padic_norm_eq_one_of_not_dvd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">padic_norm_e.norm_int_le_one</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnlt</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">padic_norm_e.norm_int_lt_one_iff_dvd</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∥</span><span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])),</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276174010,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647948582
    },
    {
        "content": "<p>(Mine has only five lines...)</p>",
        "id": 276174148,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647948641
    },
    {
        "content": "<p>But I find the <code>change</code> and <code>by norm_cast</code> stuff annoying.</p>",
        "id": 276174181,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647948663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/p-adic.20norm.20of.20.28a.20.3A.20int.29.20.3D.201.20from.20p.20not.20dividing.20a.3F/near/276172220\">said</a>:</p>\n<blockquote>\n<p>I see a lot of <code>padic_val_nat</code> and <code>padic_val_rat</code> in number_theory.padics.padic_norm, but no <code>padic_val_int</code>, which I find surprising.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12454\">#12454</a> adds <code>padic_val_int</code></p>",
        "id": 276193412,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1647957984
    },
    {
        "content": "<p>Does this also add the necessary API lemmas?</p>",
        "id": 276235174,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647973952
    },
    {
        "content": "<p>This PR refactors <code>padic_val_rat</code> to depend on <code>padic_val_nat</code> instead of the other way around, and defines <code>padic_val_int</code> based on <code>padic_val_nat</code> as a part of it. There is a <code>padic_val_int.eq_zero_of_not_dvd</code> - feel free to review the PR if there are other things you want in terms of API.</p>",
        "id": 276365383,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1648054397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> I have added a few comments to <a href=\"https://github.com/leanprover-community/mathlib/pull/12454\">#12454</a>.</p>",
        "id": 276393168,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1648066386
    },
    {
        "content": "<p>Is there a better way of doing the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">to_zmod_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">padic_int.to_zmod_pow</span> <span class=\"n\">n</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">padic_int.to_zmod_pow</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_sub</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_one</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">padic_int.to_zmod_pow</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.ker</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">padic_int.ker_to_zmod_pow</span><span class=\"o\">,</span> <span class=\"n\">ideal.mem_span_singleton'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_eq_of_eq_sub</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276397970,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1648068482
    }
]