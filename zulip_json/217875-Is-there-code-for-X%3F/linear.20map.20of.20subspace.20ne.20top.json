[
    {
        "content": "<p>Do we have <code>∀ (p : subspace K V) (hp : p ≠ ⊤), ∃ f : V →ₗ[K] K, p ≤ ker f</code>?</p>",
        "id": 225379830,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612576441
    },
    {
        "content": "<p>upd: <code>f ≠ 0</code></p>",
        "id": 225379913,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612576531
    },
    {
        "content": "<p>Can you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_extension_of_le_sublinear\">docs#exists_extension_of_le_sublinear</a> (which you wrote <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )?</p>",
        "id": 225381417,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1612578469
    },
    {
        "content": "<p>Let <code>v</code> be a vector not in <code>p</code>; construct a linear map <code>f : span K (p ∪ v) →ₗ[K] K</code> which kills <code>p</code> and sends <code>v</code> to 1.  Use the theorem to extend this to a <code>g : V →ₗ[K] K</code> with the same properties.</p>",
        "id": 225381566,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1612578627
    },
    {
        "content": "<p>It's a purely algebraic fact.</p>",
        "id": 225381569,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612578633
    },
    {
        "content": "<p>I can prove it. I was not sure that it is not in <code>mathlib</code></p>",
        "id": 225381587,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612578672
    },
    {
        "content": "<p>Does mathlib have the fact that a nontrivial vector space has a nontrivial linear map to the field? If so, you can use that and factor through the quotient by <code>p</code>.</p>",
        "id": 225381864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612579035
    },
    {
        "content": "<p>I'm not sure that we have <code>nontrivial p.quotient &lt;-&gt; p \\ne \\top</code></p>",
        "id": 225381936,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612579183
    },
    {
        "content": "<p>Oh.</p>",
        "id": 225381983,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612579205
    },
    {
        "content": "<p>Nor, for that matter, that <code>nontrivial V</code> implies <code>nontrivial (module.dual K V)</code>.</p>",
        "id": 225382013,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1612579282
    },
    {
        "content": "<p>I'll prove it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.exists_left_inverse_of_injective\">docs#linear_map.exists_left_inverse_of_injective</a></p>",
        "id": 225382145,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612579518
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Any linear map `f : p →ₗ[K] V'` defined on a subspace `p` can be extended to the whole</span>\n<span class=\"sd\">space. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_map.exists_extend</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V'</span><span class=\"o\">,</span> <span class=\"n\">g.comp</span> <span class=\"n\">p.subtype</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p.subtype.exists_left_inverse_of_injective</span> <span class=\"n\">p.ker_subtype</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"n\">f.comp</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.comp_assoc</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">f.comp_id</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 225382155,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612579530
    }
]