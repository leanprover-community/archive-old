[
    {
        "content": "<p>This has to be in mathlib somewhere, but I couldn't find it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">const_formal_multilinear_series</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">continuous_multilinear_map.curry0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_fpower_series_at_const</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_fpower_series_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const_formal_multilinear_series</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_fpower_series_at_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">convert</span> <span class=\"n\">has_sum_single</span> <span class=\"mi\">0</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">const_formal_multilinear_series</span><span class=\"o\">,</span> <span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">const_formal_multilinear_series</span><span class=\"o\">,</span> <span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">analytic_at_const</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">analytic_at</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">const_formal_multilinear_series</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">has_fpower_series_at_const</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">analytic_on_const</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">analytic_on</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">analytic_at_const</span>\n</code></pre></div>\n<p>Where should I look?</p>",
        "id": 299196245,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663345193
    },
    {
        "content": "<p>ctrl+f-ing <code>analytic_on</code> on all of mathlib doesn't inspire much hope for this existing</p>",
        "id": 299196712,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663345330
    },
    {
        "content": "<p>I applied the same algorithm and failed too :-(</p>",
        "id": 299196872,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663345381
    },
    {
        "content": "<p>Yes, it doesn't seem to be here!</p>",
        "id": 299202389,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663347193
    },
    {
        "content": "<p>Yes we don’t have this (see <a href=\"https://github.com/leanprover-community/mathlib/pull/15908#discussion_r945169005\">this comment</a>)</p>",
        "id": 299205759,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663348216
    },
    {
        "content": "<p>Hm, it was a comment on my own PR. I should have done what you asked <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 299208807,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663349291
    }
]