[
    {
        "content": "<p>We surely can't be missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_neg</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What is it called?</p>",
        "id": 230962496,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616117225
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_neg_eq_neg_mul_symm\">docs#mul_neg_eq_neg_mul_symm</a> ?</p>",
        "id": 230962629,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616117364
    },
    {
        "content": "<p>Interesting. I wonder why I couldn't get either <code>simp</code> or <code>library_search</code> to find it. Looks like it must have been user error.</p>",
        "id": 230963227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616117738
    },
    {
        "content": "<p>I think I was just an idiot and didn't try <code>simp</code>. Unfortunately <code>library_search</code> provides: <code>exact norm_num.mul_pos_neg a b (a * b) rfl</code>.</p>",
        "id": 230963345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616117790
    },
    {
        "content": "<p>Perhaps I should forbid <code>library_search</code> from providing lemmas from <code>norm_num.</code>.</p>",
        "id": 230963361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616117806
    },
    {
        "content": "<p>That's not a very intuitive name anyway... Why the <code>symm</code>?</p>",
        "id": 230963422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616117852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mul_neg/near/230963361\">said</a>:</p>\n<blockquote>\n<p>Perhaps I should forbid <code>library_search</code> from providing lemmas from <code>norm_num.</code>.</p>\n</blockquote>\n<p>and linarith too? (I often have linarith lemmas showing up in library search, and I would always rather have the non-linarith version)</p>",
        "id": 230963674,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1616118031
    },
    {
        "content": "<p>I think that in general you don't know whether to push all negs outside or inside, and the moment you start using things with <code>simp</code> you're making the decision to go one way. My vague memory of norm_num is that it makes a concrete decision on this and tags a bunch of lemmas as simp lemmas locally</p>",
        "id": 230983180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616137066
    }
]