[
    {
        "content": "<p>Hi everyone,</p>\n<p>I was wondering if <code>nat.totient</code> is decidable, and if not is there a way to make it? Thanks.</p>",
        "id": 312381384,
        "sender_full_name": "Will Midwood",
        "timestamp": 1669486167
    },
    {
        "content": "<p>Do you mean computable?</p>",
        "id": 312382656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669486927
    },
    {
        "content": "<p>The file where <code>nat.totient</code> is defined does not contain the word <code>noncomputable</code>. So you should be good to go.</p>",
        "id": 312382692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669486957
    },
    {
        "content": "<p>How does one compute it then? Say <code>nat.totient 9</code></p>",
        "id": 312479818,
        "sender_full_name": "Will Midwood",
        "timestamp": 1669560662
    },
    {
        "content": "<p>Are you confusing Lean with a computer algebra package? Lean is designed to prove theorems about nat.totient, not compute it! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.totient</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nat.totient</span> <span class=\"mi\">9</span>\n</code></pre></div>\n<p>works, but don't expect to go much higher; this is just evaluating the definition, which was written to be useful for proving, not optimal for computing.</p>",
        "id": 312480655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669561079
    },
    {
        "content": "<p>Is there a norm_num plugin?</p>",
        "id": 312482174,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1669561798
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.totient</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.totient</span> <span class=\"mi\">1000</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- failed to simplify</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>doesn't look like it</p>",
        "id": 312482785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669562070
    },
    {
        "content": "<p>Lean could/should be a computer algebra system, as well as a theorem prover, it just needs \"some work\".</p>",
        "id": 312488626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669564940
    },
    {
        "content": "<p>I have never really understood how one would go about this work. Let's stick to Lean 4, because that's presumably where it will happen if it happens. If the definition of <code>nat.totient</code> is \"the number of units in Z/nZ\", which it probably should be if one wants to prove theorems about it, then where does the more efficient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><msub><mo>∏</mo><mrow><mi>p</mi><mo>∣</mo><mi>n</mi></mrow></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msup><mi>p</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi(n)=n\\prod_{p\\mid n}(1-p^{-1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2247em;vertical-align:-0.4747em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> fit in? This will be a theorem, but it's probably the thing one would want to use for efficient computations.</p>",
        "id": 312492512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669567090
    },
    {
        "content": "<p>IIRC, in Lean4 you can provide alternative efficient implementations for functions.</p>",
        "id": 312492792,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669567272
    },
    {
        "content": "<p>Does anyone know of an example where this is done?</p>",
        "id": 312492907,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669567334
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.set_eq_setTR#doc\">docs4#List.set_eq_setTR</a> is an example tagged with the <code>csimp</code> attribute. There are good deal more in Std.Data.List.Basic</p>",
        "id": 312495060,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1669568613
    },
    {
        "content": "<p>I'm more thinking of this <code>implementedBy</code> (I think) attribute... maybe I'm misremembering</p>",
        "id": 312497108,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669569765
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/5230db6df2ef97710db9e1c217513ec17566814c/Mathlib/Init/Logic.lean#L530\">https://github.com/leanprover-community/mathlib4/blob/5230db6df2ef97710db9e1c217513ec17566814c/Mathlib/Init/Logic.lean#L530</a></p>",
        "id": 312497839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669570189
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> But then the efficient implementation can't be reasoned about right?</p>",
        "id": 312498924,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1669570762
    },
    {
        "content": "<p>I thought there was a way to reason about the alt def (assuming lean has a proof that the implementation is correct), but I can't seem to find any examples of this</p>",
        "id": 312499152,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669570887
    },
    {
        "content": "<p>Yeah. Outside of test files I cannot find any use that does not involve unsafe.</p>",
        "id": 312500939,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1669571961
    },
    {
        "content": "<p>From the example at the bottom of <a href=\"https://leanprover.github.io/lean4/doc/int.html\">this page</a> it seems at least GMP isn't considered <code>unsafe</code>... but it seems Lean 4 does offer an option to build Lean without GMP <a href=\"https://github.com/leanprover/lean4/pull/827\">lean4#827</a></p>",
        "id": 312505901,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669574759
    }
]