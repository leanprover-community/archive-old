[
    {
        "content": "<p>I suspect this is not in mathlib, but I would love to be wrong: does mathlib already have some theorem to the effect that a finite dimensional vector space over a finite field is finite?</p>",
        "id": 205402721,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596051007
    },
    {
        "content": "<p>I think so</p>",
        "id": 205402764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596051030
    },
    {
        "content": "<p><code>vector_space.card_fintype</code>?</p>",
        "id": 205402856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596051089
    },
    {
        "content": "<p>It looks to me like to use that theorem you have to already know that the vector space <code>V</code> is <code>fintype</code>. Or am I missing something?</p>",
        "id": 205403074,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596051214
    },
    {
        "content": "<p>Oh wait, nevermind</p>",
        "id": 205403240,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596051309
    },
    {
        "content": "<p><code>module.fintype_of_fintype</code> takes care of it</p>",
        "id": 205403310,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596051357
    },
    {
        "content": "<p>The reason I wanted to know this was to show that a finite extension of a finite field is finite. I proved it like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">lemma</span> <span class=\"n\">finite_of_findim_over_finite</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">set</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">exists_is_basis_finite</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hs&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_is_basis_finite</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hs</span> <span class=\"n\">at</span> <span class=\"n\">hs&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs&#39;</span> <span class=\"k\">with</span> <span class=\"n\">s_basis</span> <span class=\"n\">s_finite</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"err\">↥</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">s_finite</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">fintype_of_fintype</span> <span class=\"n\">s</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">s_fintype</span> <span class=\"n\">s_basis</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>but that feels a little gruesome. It feels like this should be something I can do in one line using <code>module.fintype_of_fintype</code> (and I believe it is, but I am just too inexperienced at Lean to see how). And does it really need to be <code>uncomputable</code> (I guess probably, since apparently <code>module.fintype_of_fintype</code> is)?</p>\n<p>So, does anyone know how to make this proof totally trivial?</p>",
        "id": 205422859,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596062953
    },
    {
        "content": "<p>This is what I did on the branch <code>finite_fields_exist</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fintype_of_finite_dimensional</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">exists_is_basis_finset</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">fintype_of_fintype</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205434434,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596074574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> why did you make it a <code>def</code> rather than a <code>lemma</code>?</p>",
        "id": 205512113,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596132479
    },
    {
        "content": "<p>Also, why does what you did work, but the following doesn't?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fintype_of_finite_dimensional</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">fintype_of_fintype</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">exists_is_basis_finset</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205512734,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596132765
    },
    {
        "content": "<p>Because <code>fintype</code> is data, not a prop. I might be totally wrong about that convention though, let me check the library.</p>",
        "id": 205512758,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596132777
    },
    {
        "content": "<p>Yeah, it looks like that’s standard.</p>",
        "id": 205512945,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596132855
    },
    {
        "content": "<p>I don’t recall what error I got shortening it... I bet it can be golfed somehow, maybe even term mode</p>",
        "id": 205513089,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596132924
    },
    {
        "content": "<p>This is the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_is_basis_finset</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">exists_is_basis_finset</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"n\">coe</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">),</span> <span class=\"n\">is_basis</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_6</span>\n</code></pre></div>",
        "id": 205513313,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133027
    },
    {
        "content": "<p>It's not able to do some type inference I guess</p>",
        "id": 205513345,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133039
    },
    {
        "content": "<p>but what I don't understand is why it could do it in your proof but not in this one</p>",
        "id": 205513409,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133062
    },
    {
        "content": "<p>And I ran into somewhat similar problems which is why my proof above is more complicated than I wanted</p>",
        "id": 205513493,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133094
    },
    {
        "content": "<p>The following works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fintype_of_finite_dimensional</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">fintype_of_fintype</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">exists_is_basis_finset</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205513793,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596133205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>  interesting. So in your proof you're explicitly giving lean a hint about how to do type inference? Or am I still confused?</p>",
        "id": 205513975,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133297
    },
    {
        "content": "<p>I actually have no idea but it might be related to <a href=\"#narrow/stream/113488-general/topic/question.20about.20.60le.60.20on.20sets/near/205330258\">this</a>?</p>",
        "id": 205514117,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596133347
    },
    {
        "content": "<p>So <code>(t : _)</code> is used to tell Lean to not be too aggressive about premature type inference?</p>",
        "id": 205514216,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133399
    },
    {
        "content": "<p>I think it somehow says to Lean \"do not look at what this is being applied to\". By doing the <code>have</code> line first in the tactic proof, you achieve a similar effect.</p>",
        "id": 205514349,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596133462
    },
    {
        "content": "<p>I'm not sure I understand what you mean by \"do not look at what this is being applied to\"</p>",
        "id": 205514453,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133521
    },
    {
        "content": "<p>Shouldn't looking at what it's being applied to help Lean to make the correct type inference?</p>",
        "id": 205514487,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133541
    },
    {
        "content": "<p>I don't think I understand either, to be honest.</p>",
        "id": 205514498,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596133547
    },
    {
        "content": "<p>You're making type unification happen in a different order</p>",
        "id": 205514845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596133690
    },
    {
        "content": "<p>Should it be obvious that the order matters?</p>",
        "id": 205515107,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596133828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Finite.20dimensional.20vector.20space.20over.20a.20finite.20field/near/205514845\">said</a>:</p>\n<blockquote>\n<p>You're making type unification happen in a different order</p>\n</blockquote>\n<p>Sure, I understand this. But why does <code>(t : _)</code> give me the order I want? I guess the basic issue is that I don't know what the usual order is or how this syntax changes it.</p>",
        "id": 205515176,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596133876
    }
]