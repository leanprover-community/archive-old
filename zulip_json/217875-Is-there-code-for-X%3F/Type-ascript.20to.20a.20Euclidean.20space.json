[
    {
        "content": "<p>Because <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> is so reluctant to adding the \"identity\" <code>euclidean_space 𝕜 n ≃ (n → 𝕜)</code>, I still don't know how to correctly type-ascript something to <code>euclidean_space</code>. How do people do it?</p>",
        "id": 278227501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649366216
    },
    {
        "content": "<p>Update: Adding it instantly solve my problem. Are you really that against it, Heather?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_euclidean_space</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 278228151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649366519
    },
    {
        "content": "<p>What's your use case?  I usually use <code>id</code>.</p>",
        "id": 278228723,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649366858
    },
    {
        "content": "<p>I have some <code>x : fin n → ℕ</code> and want to talk about its Euclidean norm as an element of <code>euclidean_space ℝ (fin n)</code> but writing down <code>∥(λ i : fin n, (x i : ℝ) : euclidean_space ℝ (fin n))∥</code> results in the wrong norm being picked up.</p>",
        "id": 278229029,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649367016
    },
    {
        "content": "<p>Can you make <code>x</code> of type Euclidean space initially?</p>",
        "id": 278229108,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649367074
    },
    {
        "content": "<p>No, unfortunately not, because I need it to be in my discrete <code>fin n → ℕ</code> for combinatorial reasons in the assumptions of the lemma.</p>",
        "id": 278229918,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649367533
    },
    {
        "content": "<p>Hmm ... can you share the code?</p>",
        "id": 278230480,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649367890
    },
    {
        "content": "<p>It might not be very workable right now but you can have a look at <a href=\"https://github.com/leanprover-community/mathlib/tree/behrend\">branch#behrend</a></p>",
        "id": 278230941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649368200
    },
    {
        "content": "<p>The relevant declaration is <code>slice_norm</code>.</p>",
        "id": 278231024,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649368229
    },
    {
        "content": "<p>FWIW, I'm in favor of such a definition since it seems to work out well for multiplicative, but 1) I haven't used this bit of the library much so Heather's opinion is worth more in context, and 2) we <em>maybe</em> want to bundle as much as the weakest case permits (more than an equiv), to save us writing <code>to_euclidean_space_zero</code> lemmas and similar. On the other hand, the advantage of writing such lemmas manually is they become available to dsimp.</p>",
        "id": 278232019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649368849
    },
    {
        "content": "<p>Yes, I took the weakest bundling because I didn't know which was the correct one, but we could surely go for the strongest generically true one.</p>",
        "id": 278232304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649368966
    },
    {
        "content": "<p>Looking at your use case, what you really want is to turn <code>{x : fin n → ℕ}</code> to Euclidean space.  And this is a headache I've encountered with regular pi-types before.  So maybe we should have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">euclidean_space.mk</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 278241845,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649376002
    },
    {
        "content": "<p>which allows you to write, in your use case,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">slice_norm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">sphere_slice</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">euclidean_space.mk</span> <span class=\"n\">ℝ</span> <span class=\"n\">coe</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">real.sqrt</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 278241988,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649376055
    },
    {
        "content": "<p>Does <code>id x : euclidean_space 𝕜 n</code> work for you? It's the standard trick of inserting an <code>id</code> to make sure that Lean has no freedom to get it wrong.</p>",
        "id": 278262981,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649400566
    },
    {
        "content": "<p>What's the benefit of using <code>id</code> vs having a dedicated name?</p>",
        "id": 278269824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649405485
    },
    {
        "content": "<p>As soon as you start simplifying, your <code>id</code> is going to vanish and your types are likely to stop making sense in the goal view</p>",
        "id": 278269968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649405580
    },
    {
        "content": "<p>With a dedicated name you can control when it does and does not vanish</p>",
        "id": 278269985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649405601
    },
    {
        "content": "<p>(probably you only want it to vanish for <code>to_euclidean v i = v i</code>, <code>to_euclidean 0 = 0</code>, etc)</p>",
        "id": 278270083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649405655
    },
    {
        "content": "<p>A notation <code>!ₑ[x, y, z] = to_euclidean ![x, y, z]</code> might be a nice way to prevent it being too verbose in the goal view in some cases</p>",
        "id": 278270163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649405728
    },
    {
        "content": "<p>The point of  <code>id</code> is that this trick is useful all over the place, and doesn't need any new API. I agree that a proper API around <code>to_euclidean</code> would be nicer, but if it is solving a problem that you can avoid with a simple trick like that I'm not sure it is worth investing manpower in it.</p>",
        "id": 278271283,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649406352
    },
    {
        "content": "<p>This is a path to being sloppy in type-checking and letting the wrong norm slip in accidentally. <code>id</code> is a hack and should be treated as such. I am trying to manipulate some <code>fin n → ℕ</code> as terms of <code>euclidean_space ℝ (fin n)</code> and this is a mess. <code>to_euclidean</code> is an easy lasting solution. It requires 7 lemmas of API (cf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_lex\">docs#to_lex</a>) and a correction of the existing lemmas, then <em>it will just work</em>.</p>",
        "id": 278272705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649407096
    },
    {
        "content": "<p>It turns out we already have <code>from_euclidean_space</code>, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.equiv\">docs#pi_Lp.equiv</a></p>",
        "id": 280235393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650990697
    }
]