[
    {
        "content": "<p>I'm having a hard time finding something that proves the following simple thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223665214,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611333141
    },
    {
        "content": "<p>What import do I need for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal\">docs#cardinal</a>?</p>",
        "id": 223665365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611333203
    },
    {
        "content": "<p>Ah, <code>set_theory.cardinal</code></p>",
        "id": 223665391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611333221
    },
    {
        "content": "<p>Oh yeah, sorry :)</p>",
        "id": 223665637,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611333319
    },
    {
        "content": "<p><code>cardinal.zero_lt_one.trans_le h</code></p>",
        "id": 223666085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611333552
    },
    {
        "content": "<p>Oh sorry, I had the wrong way around :) I really need </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223666338,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611333694
    },
    {
        "content": "<p>Which seems a bit harder since you need to know there is nothing between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 223666370,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611333716
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.one_le_iff_pos\">docs#cardinal.one_le_iff_pos</a></p>",
        "id": 223667096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611334083
    },
    {
        "content": "<p>Or <code>by library_search</code> ;)</p>",
        "id": 223667223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611334138
    },
    {
        "content": "<p>Library search didn't find it for me... strange :)</p>",
        "id": 223667337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611334199
    }
]