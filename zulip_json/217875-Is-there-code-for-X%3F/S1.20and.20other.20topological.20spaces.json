[
    {
        "content": "<p>Is the circle S1 in mathlib? Or R/Z?</p>",
        "id": 210896307,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600792243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I guess you have been thinking about the circle for Sphere eversion. What's the status?</p>",
        "id": 210896482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600792324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span>  What kind of circle do you want?  The manifold circle doesn't exist yet.</p>",
        "id": 210899581,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600793730
    },
    {
        "content": "<p>But it exists as a topological space quite easily.</p>",
        "id": 210899671,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600793766
    },
    {
        "content": "<p>You could probably even build a manifold structure on S1 \"by hand\" at the moment.</p>",
        "id": 210899817,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600793847
    },
    {
        "content": "<p>But no one has done it because it seems better to wait until submanifolds and quotient manifolds are defined, then construct it either as a submanifold of R^2 or as a quotient manifold of R^1 (or both).</p>",
        "id": 210899946,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600793898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/S1.20and.20other.20topological.20spaces/near/210899581\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span>  What kind of circle do you want?  The manifold circle doesn't exist yet.</p>\n</blockquote>\n<p>The topological space</p>",
        "id": 210900686,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600794246
    },
    {
        "content": "<p>You could just take the subspace of R^2, that will get a topology.</p>",
        "id": 210900744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600794274
    },
    {
        "content": "<p>Currently I am working with a quotient space R/Z, which is quite easy to make</p>",
        "id": 210900766,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600794287
    },
    {
        "content": "<p>I was wondering if something was defined on mathlib</p>",
        "id": 210900805,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600794308
    },
    {
        "content": "<p>I remember it's mentioned as a topological space in <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> 's manifolds exercises,<br>\n<a href=\"https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/friday/manifolds.lean\">https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/friday/manifolds.lean</a></p>",
        "id": 210900820,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600794316
    },
    {
        "content": "<p>What is the question here? For example if you have a type R/Z and a map from R and a topology on R you'll be able to give R/Z the quotient topology, which will be the right one.</p>",
        "id": 210900839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600794330
    },
    {
        "content": "<p>Oh -- in fact it's a metric space, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.sphere\">docs#metric.sphere</a></p>",
        "id": 210900881,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600794356
    },
    {
        "content": "<p>And yes, the quotient space should also work, are you using the quotient topological space API? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.topological_space\">docs#quotient.topological_space</a></p>",
        "id": 210901027,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600794421
    },
    {
        "content": "<p>Yes. Currently I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">r_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">r_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">r_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">r_equiv</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">r_refl</span><span class=\"o\">,</span> <span class=\"n\">r_symm</span><span class=\"o\">,</span> <span class=\"n\">r_trans</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r_setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r_equiv</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RZ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">r_setoid</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℝ</span><span class=\"bp\">/</span><span class=\"n\">ℤ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">RZ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RZ.mk</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">/</span><span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">r_setoid</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span><span class=\"bp\">/</span><span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">RZ</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_map_mk</span> <span class=\"o\">:</span> <span class=\"n\">quotient_map</span> <span class=\"n\">RZ.mk</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">RZ.mk</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient_map_quot_mk</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">function.right_inverse</span> <span class=\"n\">RZ.mk</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 210901184,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600794500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/S1.20and.20other.20topological.20spaces/near/210900881\">said</a>:</p>\n<blockquote>\n<p>Oh -- in fact it's a metric space, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.sphere\">docs#metric.sphere</a></p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.sphere\">docs#metric.sphere</a> looks interesting. Good to know it exists.</p>",
        "id": 210901240,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600794532
    },
    {
        "content": "<p>btw, I think <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> has also worked with circles, eg <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/f2458d6/src/dynamics/circle/rotation_number/translation_number.lean\">https://github.com/leanprover-community/mathlib/blob/f2458d6/src/dynamics/circle/rotation_number/translation_number.lean</a></p>",
        "id": 210901547,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600794633
    },
    {
        "content": "<p>I don't know anything about that file, maybe he just treates functions on the circle as periodic functions on the line.</p>",
        "id": 210901667,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600794680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (or other algebraists), does mathlib have quotients by a group action (rather than by a setoid)?</p>",
        "id": 210901865,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600794742
    },
    {
        "content": "<p>I don't know. We can quotient groups by non-normal subgroups but I'm not sure about general group actions.</p>",
        "id": 210902064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600794836
    },
    {
        "content": "<p>Yes, I think we have the type of orbits, but no topology afaik</p>",
        "id": 210902304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600794932
    },
    {
        "content": "<p>But presumably the topology will often just be the quotient topology, which we also have</p>",
        "id": 210902435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600794988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/S1.20and.20other.20topological.20spaces/near/210902304\">said</a>:</p>\n<blockquote>\n<p>Yes, I think we have the type of orbits, but no topology afaik</p>\n</blockquote>\n<p>maybe <span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> could adapt <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/S1.20and.20other.20topological.20spaces/near/210901184\">his code</a> to do this <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 210902445,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600794993
    },
    {
        "content": "<p>I'd love to! I am learning topology/algebra now on grad school, so I am newbie, but would love to contribute</p>",
        "id": 210903320,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600795327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/S1.20and.20other.20topological.20spaces/near/210901865\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> (or other algebraists), does mathlib have quotients by a group action (rather than by a setoid)?</p>\n</blockquote>\n<p>This is fairly easy to do with <code>quot</code> as opposed to <code>quotient</code>.</p>",
        "id": 210905877,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600796474
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 210906366,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600796687
    },
    {
        "content": "<p>Skipping the proof that it's an equivalence relation, even though it is :-) (oh actually it isn't because Adam used monoids not groups!)</p>",
        "id": 210906491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600796742
    },
    {
        "content": "<p><code>quot</code> never gets the respect it deserves...</p>",
        "id": 210908469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600797604
    },
    {
        "content": "<p>Kenny has suggested to me that this sort of thing should be used more often, e.g. maybe you should be able to quotient a group by a subset, and it will quotient by the subgroup it generates.</p>",
        "id": 210908670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600797687
    },
    {
        "content": "<p>Is there any way to describe the equivalence relation for a monoid action on a set other than \"the equivalence relation generated by <code>(λ (x y : α), ∃ (a : M), a • x = y)</code>\"?  (For <code>quotient</code>-philes, there's <code>eqv_gen.setoid</code>, but all that it seems to really give you is not needing to use <code>quot.exact</code> or <code>quot.eqv_gen_sound</code>)</p>",
        "id": 210911593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600798965
    },
    {
        "content": "<p>It's complicated to describe in this case. The best I can come up with is this: The forgetful functor from sets with a group action to sets with a monoid action has a left adjoint. (It's a souped up version of the groupification functor from monoids to groups.) The equivalence relation is \"essentially\" the equivalence relation induced by the group action via this left adjoint (by this I mean they have the same quotients, but there can be some analogues of zero divisors which will complicate things). I don't know if any of this makes sense.</p>",
        "id": 210912022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600799185
    },
    {
        "content": "<p>And concerning <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's comment -- this sounds similar to what Scott just did for rings :) <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ring_quot.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ring_quot.lean</a></p>",
        "id": 210912206,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600799295
    },
    {
        "content": "<p>Note that we still don't have two-sided ideals, but we have quotients of rings!</p>",
        "id": 210912257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600799320
    },
    {
        "content": "<p>In sufficiently weak systems you can have <code>quotient</code> but not <code>quot</code> or inductive types that are recursive, and then I believe you won't be able to define the quotient by a monoid action (but will be able to define the quotient by a group action of course).</p>",
        "id": 210912835,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600799574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/S1.20and.20other.20topological.20spaces/near/210896482\">said</a>:</p>\n<blockquote>\n<p>Patrick Massot I guess you have been thinking about the circle for Sphere eversion. What's the status?</p>\n</blockquote>\n<p>Sorry I missed this question. We have functions defined on circles everywhere in this project, they are defined as periodic functions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 210942213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600816112
    },
    {
        "content": "<p>In <code>dynamics/circle/rotation_number/translation_number</code> I define a circle self-map as a map <code>f : \\R → \\R</code> such that <code>f (x + 1) = f x + 1</code>.</p>",
        "id": 210945459,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600819054
    },
    {
        "content": "<p>This way I can state many interesting results without using quotients.</p>",
        "id": 210945527,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600819104
    }
]