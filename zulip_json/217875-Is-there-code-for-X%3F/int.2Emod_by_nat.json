[
    {
        "content": "<p>I was a bit surprised to see the type signature of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.nat_mod\">docs#int.nat_mod</a> is <code>Z -&gt; Z -&gt; N</code>. Do we have an int/nat modulus operation of the form <code>Z -&gt; N -&gt; N</code>?</p>",
        "id": 300463106,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663973792
    },
    {
        "content": "<p>Maybe just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</code></pre></div>\n<p>If b = 0 it would give you the absolute value of a.</p>",
        "id": 300463614,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663974185
    },
    {
        "content": "<p>what would you expect <code>(-3) % 0</code> to be?</p>",
        "id": 300463890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663974387
    },
    {
        "content": "<p>python gives me a division by zero error, but lean is happy to say that <code>(-3) % 0</code> is <code>-3</code> (which is the only reasonable answer IMO)</p>",
        "id": 300463981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663974458
    },
    {
        "content": "<p>I would expect <code>(-3) % 0</code> to be 0 probably, but I wouldn't really care. What would you expect <code>(-3).nat_mod 0</code> to be?</p>",
        "id": 300467024,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663976966
    },
    {
        "content": "<p>I don't think <code>nat_mod</code> should exist in the first place <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 300467189,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663977105
    },
    {
        "content": "<p>Well, it's used a few times in mathlib. As far as I can tell each time the second argument is a nat cast to an int.</p>",
        "id": 300467309,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663977203
    },
    {
        "content": "<p>Seems perfectly normal to me, I just want to extend <code>%</code> on naturals to also work when the first argument is an integer.</p>",
        "id": 300467413,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663977288
    },
    {
        "content": "<p>But <code>%</code> does work on ints</p>",
        "id": 300467446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663977319
    },
    {
        "content": "<p>I don't want to see a bunch of casts when my second argument is a nat, but fair enough.</p>",
        "id": 300467662,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663977471
    },
    {
        "content": "<p>Actually wait no, it's important to me that the return type is a nat too.</p>",
        "id": 300467750,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663977522
    },
    {
        "content": "<p>So you can compose with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.nat_abs\">docs#int.nat_abs</a></p>",
        "id": 300467951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663977683
    },
    {
        "content": "<p>Or with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.to_nat\">docs#int.to_nat</a></p>",
        "id": 300467972,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663977710
    },
    {
        "content": "<p>Depending on the behavior you want for negative integers</p>",
        "id": 300468032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663977725
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.has_mod\">docs#int.has_mod</a> (since I'm on mobile)</p>",
        "id": 300468061,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663977753
    },
    {
        "content": "<p>This is exactly what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.nat_mod\">docs#int.nat_mod</a> does</p>",
        "id": 300468168,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663977838
    },
    {
        "content": "<p>Aha okay. Well hopefully one little cast in the second variable isn't that bad?</p>",
        "id": 300468464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663978063
    },
    {
        "content": "<p>I guess not. I agree that <code>nat_mod</code> shouldn't exist, but I think if only one of <code>nat_mod</code> and <code>mod_by_nat</code> were to exist, it should be the latter.</p>",
        "id": 300468720,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663978278
    },
    {
        "content": "<p>The point is that the <code>%</code> of int calls <code>nat_abs</code> on its second argument anyway, so better to write <code>x.mod_by_nat |y|</code> less often than <code>x.nat_mod (y : \\Z)</code> more often. But also <code>nat_mod</code> is in core, so I can't get rid of the old way.</p>",
        "id": 300468979,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663978521
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.mod\">docs#int.mod</a></p>",
        "id": 300469052,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663978578
    }
]