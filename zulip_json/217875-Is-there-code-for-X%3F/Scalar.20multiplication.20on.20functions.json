[
    {
        "content": "<p>Do we have an instance for <code>has_scalar F (D → F)</code> where <code>F</code> is a field?</p>",
        "id": 287732468,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1656430085
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar\">docs#pi.has_scalar</a> + <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mul.to_has_scalar\">docs#has_mul.to_has_scalar</a></p>",
        "id": 287732670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656430165
    },
    {
        "content": "<p>Why is this giving me a failed to synthesize type class error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval_parameterized_curve</span> <span class=\"o\">{</span><span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 287733637,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1656430534
    },
    {
        "content": "<p>Oh weird, it was the <code>{D}</code></p>",
        "id": 287733762,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1656430570
    },
    {
        "content": "<p>Yes, because you had <code>D : Sort*</code>, but <code>pi.has_scalar</code> only works for <code>D : Type*</code>. See <a href=\"#narrow/stream/113488-general/topic/Sort-indexed.20pi.20type\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Sort-indexed.20pi.20type</a></p>",
        "id": 287734598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656430921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>' link is relevant but the claim is misrepresented; <code>pi.has_scalar</code> isn't to blame, <code>has_scalar</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 287742325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656434107
    },
    {
        "content": "<p>I mean yeah, the long story is the thread I linked to <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 287743117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656434405
    }
]