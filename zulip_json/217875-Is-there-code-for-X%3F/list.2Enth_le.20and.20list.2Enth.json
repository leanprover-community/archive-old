[
    {
        "content": "<p>I cannot find the following lemma in mathlib. Have I been searching wrong? It looks so basic!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth__eq__nth___of___nth_le__eq__nth_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i_lt_len_x</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i_lt_len_y</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.length</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">x_ith_le__eq__y_ith_le</span> <span class=\"o\">:</span> <span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i_lt_len_x</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i_lt_len_y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290868063,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658827936
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nth__eq__nth___of___nth_le__eq__nth_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i_lt_len_x</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i_lt_len_y</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.length</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">x_ith_le__eq__y_ith_le</span> <span class=\"o\">:</span> <span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i_lt_len_x</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i_lt_len_y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nth_le_nth</span> <span class=\"n\">i_lt_len_x</span><span class=\"o\">,</span> <span class=\"n\">list.nth_le_nth</span> <span class=\"n\">i_lt_len_y</span><span class=\"o\">,</span> <span class=\"n\">x_ith_le__eq__y_ith_le</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 290869919,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658829044
    },
    {
        "content": "<p>(Feel free to PR; it would be fine in mathlib.)</p>",
        "id": 290869975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658829103
    },
    {
        "content": "<p>Do you want to replace all sequences of underscores by a single underscore?</p>",
        "id": 290870055,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658829144
    },
    {
        "content": "<p>I guess there's no need to have the same <code>i</code>: you could conclude <code>x.nth i = y.nth j</code> with the same proof.</p>",
        "id": 290870068,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658829161
    },
    {
        "content": "<p>The statement should probably be written</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_eq_nth_of_nth_le_eq_nth_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ix</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">iy</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.length</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">ix</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">iy</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 290870098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658829184
    },
    {
        "content": "<p>(unless you do the i ≠ j generalisation...)</p>",
        "id": 290870108,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658829194
    },
    {
        "content": "<p>You can even omit the types of <code>ix</code> and <code>iy</code> entirely, although some might argue that is getting obfuscatory, rather than just golfing. :-)</p>",
        "id": 290870231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658829266
    },
    {
        "content": "<p>I won't omit the types.</p>",
        "id": 290870254,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658829286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nth_eq_nth_of_nth_le_eq_nth_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ix</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">jy</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.length</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">ix</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth_le</span> <span class=\"n\">j</span> <span class=\"n\">jy</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">y.nth</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nth_le_nth</span> <span class=\"n\">ix</span><span class=\"o\">,</span> <span class=\"n\">list.nth_le_nth</span> <span class=\"n\">jy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 290870361,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658829361
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15688\">https://github.com/leanprover-community/mathlib/pull/15688</a></p>",
        "id": 290873162,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658831182
    },
    {
        "content": "<p>Left a comment.</p>",
        "id": 290873517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658831410
    },
    {
        "content": "<p>Sorry for abusing this thread... Is this error due to something in my commits?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/runs/7518315148?check_suite_focus=true\">https://github.com/leanprover-community/mathlib/runs/7518315148?check_suite_focus=true</a></p>",
        "id": 290890713,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658842314
    },
    {
        "content": "<p>No, you should just restart the job</p>",
        "id": 290898445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658845082
    },
    {
        "content": "<p>That has been happening quite a lot recently I think</p>",
        "id": 290898496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658845093
    },
    {
        "content": "<p>The job succeeded :-).</p>",
        "id": 290910406,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658849401
    },
    {
        "content": "<p>Will somebody review my PR please?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/15688\">https://github.com/leanprover-community/mathlib/pull/15688</a></p>",
        "id": 291034546,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658929055
    },
    {
        "content": "<p>FYI: The PR <a href=\"https://bit.ly/3AZk1Qk\">#queue</a> is currently very long &gt;100 PRs waiting, that's not to say that short PRs won't be reviewed more quickly, but having a maintainer look at it in less than 4 hours (when you added the label) is somewhat unlikely these days</p>",
        "id": 291035102,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658929325
    },
    {
        "content": "<p>Sorry for my impatience. I was just afraid it would fall into oblivion, as a few of my older PRs did. I'll wait.</p>",
        "id": 291035870,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1658929697
    }
]