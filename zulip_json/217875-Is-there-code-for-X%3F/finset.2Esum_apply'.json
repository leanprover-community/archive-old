[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_apply&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 198653442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590401580
    },
    {
        "content": "<p>looks like a sum hom theorem to me</p>",
        "id": 198653473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590401612
    },
    {
        "content": "<p>the (sum of a bunch of finitely supported functions) applied to an element is the sum of (the functions applied to the element)</p>",
        "id": 198653474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590401613
    },
    {
        "content": "<p>but should this be in the library separately?</p>",
        "id": 198653486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590401632
    },
    {
        "content": "<p>If you can get it to be a literal application of <code>sum_hom</code> and some <code>apply_add_hom</code> theorem then I would say no</p>",
        "id": 198653544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590401674
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_apply&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum_hom</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 198653734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590401854
    },
    {
        "content": "<p>well in practice <code>\\io</code> might be a huge term</p>",
        "id": 198653742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590401869
    },
    {
        "content": "<p>(it is in my use case)</p>",
        "id": 198653747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590401878
    },
    {
        "content": "<p>and also <code>i</code> is a huge term</p>",
        "id": 198653908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590402051
    },
    {
        "content": "<p>and I run into coe_fn problems</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">↥↑</span><span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 198654034,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590402160
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 198654170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590402305
    },
    {
        "content": "<p>or at least context</p>",
        "id": 198654204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590402340
    },
    {
        "content": "<p>Maybe <a href=\"#narrow/stream/113488-general/topic/slow.20elaboration/near/198648425\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/slow.20elaboration/near/198648425</a> is related?</p>",
        "id": 198654416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590402524
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_ring_action</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dimension</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_semiring_action</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fixed</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">fixed</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Embedding induced by action. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">↪</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"bp\">▸</span> <span class=\"n\">one_smul</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"bp\">▸</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">congr_fun</span> <span class=\"n\">H</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">linear_independent_smul_of_linear_independent</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">his</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">attach</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n    <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">his</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">sum_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">his</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198654884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590402964
    },
    {
        "content": "<p>Look at <code>finset_prod_apply</code> in <code>algebra/pi_instances</code></p>",
        "id": 198683093,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590422654
    },
    {
        "content": "<p><code>@[to_additive]</code> automatically declares <code>finset_sum_apply</code></p>",
        "id": 198683120,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590422685
    }
]