[
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <code>even_natural_number.add_assoc₂</code> now does the same thing in one line. (because I have shown even_natural_number.add is a homomorphism <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> (I am correct here)). Let me know if there are any other simplifications? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_natural_number</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subtype</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_natural_number.add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">even_natural_number</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even_natural_number</span>\n  <span class=\"o\">:=</span> <span class=\"n\">subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">dvd_add</span> <span class=\"n\">a.property</span> <span class=\"n\">b.property</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_natural_number.zero</span> <span class=\"o\">:</span> <span class=\"n\">even_natural_number</span>\n  <span class=\"o\">:=</span> <span class=\"n\">subtype.mk</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">dvd_zero</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_natural_number.smul</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">even_natural_number</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even_natural_number</span>\n  <span class=\"o\">:=</span> <span class=\"n\">subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b.property</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">2</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">even_natural_number</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">even_natural_number.add</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">even_natural_number</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">even_natural_number.zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">nat</span> <span class=\"n\">even_natural_number</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">even_natural_number.smul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_natural_number.is_add_comm_monoid</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">even_natural_number</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function.injective.add_comm_monoid</span> <span class=\"n\">subtype.val</span> <span class=\"n\">subtype.coe_injective</span> <span class=\"n\">rfl</span>\n  <span class=\"o\">(</span><span class=\"kd\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Short way using add_comm_monoid facts</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">even_natural_number.add_assoc₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">even_natural_number</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">even_natural_number</span> <span class=\"n\">even_natural_number.is_add_comm_monoid</span>\n\n<span class=\"c1\">-- Long way</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">even_natural_number.add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">even_natural_number</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subtype.ext_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 310198264,
        "sender_full_name": "Ben",
        "timestamp": 1668518289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 310198295,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668518298
    },
    {
        "content": "<p>Btw, we'd usually write <code>{ a : ℕ // 2 ∣ a }</code> for <code>@subtype nat (λa, 2 ∣ a)</code></p>",
        "id": 310198662,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668518420
    },
    {
        "content": "<p>You shouldn't need <code>even_natural_number.add_assoc</code> at all, you can just use the regular <code>add_assoc</code> without any <code>@</code>s</p>",
        "id": 310204268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668519984
    },
    {
        "content": "<p>Note you can get all this for free with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_submonoid.multiples\">docs#add_submonoid.multiples</a> 2</p>",
        "id": 310204394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668520038
    }
]