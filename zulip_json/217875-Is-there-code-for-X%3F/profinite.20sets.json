[
    {
        "content": "<p>We don't have them, right? What's the definition? I was taught \"a projective limit of finite sets\", that sounds like a disaster. \"compact and totally disconnected\" sounds like a better bet.</p>",
        "id": 218214108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606658495
    },
    {
        "content": "<p>Totally disconnected compact Hausdorff is easy to write down</p>",
        "id": 218215073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606660198
    },
    {
        "content": "<p>And I've been (very slowly) adding stuff to make this usable.</p>",
        "id": 218215139,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606660285
    },
    {
        "content": "<p>E.g. only as of a few days ago does mathlib have the fact that the disjoint union of two t2 spaces is t2.</p>",
        "id": 218215294,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606660560
    },
    {
        "content": "<p>Should I just make some new file <code>profinite.lean</code> in <code>topology</code>?</p>",
        "id": 218215340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606660610
    },
    {
        "content": "<p>My inclination is to make the category of profinite sets directly in <code>topology/category/Profinite.lean</code> since we already have the three classes <code>compact_space</code> <code>t2_space</code> and <code>totally_disconnected</code></p>",
        "id": 218215613,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606661067
    },
    {
        "content": "<p>I agree that \"projective limit of finite sets\" sounds like a potential disaster as a definition but somehow it's the definition we want, so maybe we can create an API around the \"totally disconnected compact Hausdorff\" definition. For example, we should know that a map to a discrete space is continuous iff it factors through a finite quotient.</p>",
        "id": 218215702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606661226
    },
    {
        "content": "<p>And we need to prove that <code>Profinite</code> has limits (all limits? or is it just filtered? I don't remember), this way we can construct profinite sets as inverse limits of finite sets</p>",
        "id": 218215752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606661304
    },
    {
        "content": "<p>And we should be able to construct examples as cofiltered limits of finite sets (e.g. build the p-adics from just algebraic data) and know that the original diagram presents the profinite set in this sense</p>",
        "id": 218215762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606661336
    },
    {
        "content": "<p>By the way, there is a more or less canonical way to write a profinite set as an inverse limit of finites, see e.g. the proof in the stacks project</p>",
        "id": 218215827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606661461
    },
    {
        "content": "<p>that makes sense because as a category, profinite sets is (Ind(FinSet^op))^op</p>",
        "id": 218215900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606661598
    },
    {
        "content": "<p>so it's the opposite of a locally finitely presentable category</p>",
        "id": 218215904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606661607
    },
    {
        "content": "<p>Does mathlib have Ind?</p>",
        "id": 218216025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606661804
    },
    {
        "content": "<p>Or Pro?</p>",
        "id": 218216026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606661808
    },
    {
        "content": "<p>Not sure but it's definitely capable of expressing one definition of Ind</p>",
        "id": 218216159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606662017
    },
    {
        "content": "<p>whether that's useful is another matter</p>",
        "id": 218216160,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606662020
    },
    {
        "content": "<p>If we unfold the definitions it says that a profinite set is something that we know how to map into finite sets, in a way that respects finite limits. But this only gives us access to the \"locale\" side, e.g., we know what all the ways to split our profinite set into two clopen subsets are, because they're the maps into {0,1}</p>",
        "id": 218216364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606662406
    },
    {
        "content": "<p>To get the points of the profinite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> you'd need some Stone duality-like \"assignment of an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to every map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">X \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>\"</p>",
        "id": 218216424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606662489
    },
    {
        "content": "<p>which I guess is just saying: natural transformations from the one-point space to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, so maybe it's not too bad</p>",
        "id": 218216444,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606662567
    },
    {
        "content": "<p>So in this picture a profinite set is just a finite limit-preserving (covariant) functor from finite sets to sets</p>",
        "id": 218216511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606662681
    },
    {
        "content": "<p>I think Scott did add recently-ish that filtered colimits commute with finite limits, which is the main thing you need to make this workable at all</p>",
        "id": 218216593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606662832
    },
    {
        "content": "<p>So a profinite set X is identified with the functor sending a finite set F to the set of continuous maps X to F?</p>",
        "id": 218216777,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606663106
    },
    {
        "content": "<p>This raises the question as to how important the underlying topological space is. I guess that depends on what you're trying to do.</p>",
        "id": 218217164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606663753
    },
    {
        "content": "<p>The topology is easy to describe too, it should be the coarsest one that makes the maps to finite sets continuous. So we can write down both categories and both functors and if we prove they form an equivalence then we probably have a pretty good API for either side.</p>",
        "id": 218217443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606664209
    },
    {
        "content": "<p>Of course finite sets are sufficiently more annoying than expected that it might actually be technically easier to use topological spaces</p>",
        "id": 218217604,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606664512
    },
    {
        "content": "<p>I still like my half-joking suggestion to make <code>Type 0</code> only allow finite types</p>",
        "id": 218217773,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606664773
    },
    {
        "content": "<p>I think it's a mistake to divorce from topological spaces (even if there is a way to describe the topology). E.g. we will want to ensure that talking about closed subgroups of a profinite group is as easy as possible</p>",
        "id": 218217777,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606664789
    },
    {
        "content": "<p>In general I think the answer to choice of representation questions like this has to be to choose both representations</p>",
        "id": 218217959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606665145
    },
    {
        "content": "<p>Right. For example, we can start like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Profinite</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_Top</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">is_compact</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">to_Top</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_t2</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">to_Top</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_td</span> <span class=\"o\">:</span> <span class=\"n\">totally_disconnected_space</span> <span class=\"n\">to_Top</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Then construct the functor to <code>FinType \\functor Type*</code> that we discussed above and prove it's fully faithful, and describe its essential image as well.</p>",
        "id": 218218053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606665326
    },
    {
        "content": "<p>Proving that <code>Profinite</code> has finite coproducts should be easy, and proving that it has limits shouldn't be too bad (e.g. the category <code>CompHaus</code> has limits, as can be proved using the equivalence with <code>Compactum</code>)</p>",
        "id": 218218123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606665416
    },
    {
        "content": "<p>I guess the forgetful functor <code>Profinite \\functor CompHaus</code> creates limits?</p>",
        "id": 218218137,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606665450
    },
    {
        "content": "<p>This is another recent addition which will help in proving that finite sets are profinite <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/1f1ba587f272d203a40801c6b21af453f7de6ee3/src/topology/subset_properties.lean#L1305\">https://github.com/leanprover-community/mathlib/blob/1f1ba587f272d203a40801c6b21af453f7de6ee3/src/topology/subset_properties.lean#L1305</a></p>",
        "id": 218218443,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606665860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/profinite.20sets/near/218217773\">said</a>:</p>\n<blockquote>\n<p>I still like my half-joking suggestion to make <code>Type 0</code> only allow finite types</p>\n</blockquote>\n<p>What we really need is a whole new proof assistant where everything takes place internally in the topos of condensed sets.</p>",
        "id": 218218522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606666005
    },
    {
        "content": "<p>i'm waiting for the magical day when there's a usable soundness theorem for replaying proofs in {algebraic, coherent, etc} theories in the internal logic of toposes that interpret them</p>",
        "id": 218223201,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1606673802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/profinite.20sets/near/218218522\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/profinite.20sets/near/218217773\">said</a>:</p>\n<blockquote>\n<p>I still like my half-joking suggestion to make <code>Type 0</code> only allow finite types</p>\n</blockquote>\n<p>What we really need is a whole new proof assistant where everything takes place internally in the topos of condensed sets.</p>\n</blockquote>\n<p>I agree this somehow feels very natural. Inductive types are discrete while coinductive types are profinite. Lean doesn't have coinductive types built in, but you can build them using functions and I think this construction produces the right topology when internalized in condensed sets. If you combine inductive and coinductive types then you get things like infinite unions of profinite sets that appear everywhere in the condensed theory, and if you also add in (exact) quotients then you get things that look like arbitrary condensed sets.</p>",
        "id": 218571139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606922500
    }
]