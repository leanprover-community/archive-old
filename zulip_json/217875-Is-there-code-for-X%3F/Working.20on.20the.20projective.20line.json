[
    {
        "content": "<p>I am trying to work on CP1 and to define charts, but so far my attempts at proving continuity have had limited success. Here is a minimal example of what I am trying to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.projective_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">projectivization</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"n\">ℙ</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.topological_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">w.val.2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">CP1</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">w.val.1</span> <span class=\"bp\">/</span> <span class=\"n\">w.val.2</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l5</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">continuous_on_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">hzt</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_open_coinduced</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">set.preimage_comp</span><span class=\"o\">,</span> <span class=\"n\">set.preimage</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">set.mem_def</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_open_induced_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span> <span class=\"bp\">|</span> <span class=\"n\">z.1</span> <span class=\"bp\">/</span> <span class=\"n\">z.2</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">z.2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am using <code>lift_on'</code> everywhere because for other parts it has been easier than using <code>rep</code> (i.e., <code>quotient.out</code> if I tracked it right), but as far as I can tell it is not the source of my issue. Do we need a restricted version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_quotient_lift_on'\">docs#continuous_quotient_lift_on'</a> somewhere?</p>",
        "id": 281283687,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1651749213
    },
    {
        "content": "<p>Not familiar with the continuity library but mathlib already has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/projectivization\">docs#projectivization</a> (<a href=\"#narrow/stream/116395-maths/topic/Projective.20spaces\">Zulip thread</a>).</p>",
        "id": 281291917,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651754017
    },
    {
        "content": "<p>I believe this is what Vincent is using already.</p>",
        "id": 281294752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651755319
    },
    {
        "content": "<p>Oh yes indeed! Sorry for my oversight.</p>",
        "id": 281294904,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651755379
    },
    {
        "content": "<p>I am using it, but there does not seem to be a lot of API yet there</p>",
        "id": 281295960,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1651755870
    },
    {
        "content": "<p>I think a nicer approach would be to take a perfect pairing of vector spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>×</mo><mi>W</mi><mo>→</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">V \\times W \\to k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> and use that to construct affine charts. E.g. this lets you identify the projectivization of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> with the dual projective space of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, so points in the projectivization of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> correspond to hyperplanes in the projective space of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, and their complements give you affine charts. This would make the situation much more symmetric, which will probably simplify a lot of things (similar to <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ‘s approach to the sphere). I should also mention that I have a student <span class=\"user-mention\" data-user-id=\"488747\">@Michael Blyth</span> who will build up some of the API around projective spaces as a summer project.</p>",
        "id": 281297481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651756637
    },
    {
        "content": "<p>(Of course, this is still orthogonal to the question asked regarding <code>continuous_on</code>…)</p>",
        "id": 281297768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651756784
    },
    {
        "content": "<p>And let's not forget connecting to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebraic_geometry.Proj.to_LocallyRingedSpace\">docs#algebraic_geometry.Proj.to_LocallyRingedSpace</a> !</p>",
        "id": 281298090,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651756933
    },
    {
        "content": "<p><code>projectivization</code> should be generalized to division rings, and there's also OP^2, then we can define all the Hopf fibrations.</p>",
        "id": 281322124,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651767500
    },
    {
        "content": "<p>I agree <code>projectivization</code> should be generalised to <code>division_ring</code>s but we won't get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"double-struck\">O</mi><mi mathvariant=\"double-struck\">P</mi></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{OP}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0596em;vertical-align:-0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">OP</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8929em;\"><span style=\"top:-3.1418em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> that way. Indeed there is no such thing as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"double-struck\">O</mi><mi mathvariant=\"double-struck\">P</mi></mrow><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{OP}^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0946em;vertical-align:-0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">OP</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9279em;\"><span style=\"top:-3.1418em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&gt;</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k &gt; 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> so I'd say that case will have to be ad hoc.</p>",
        "id": 281322409,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651767634
    },
    {
        "content": "<p>I tried making that generalization when I defined the projectivization originally, but I got bogged down with a lot of the <code>finite_dimensional</code> stuff being done only in the commutative case.</p>",
        "id": 281322422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651767640
    },
    {
        "content": "<p>Once the finite dimensional stuff is generalized, it should be very quick to generalize the assumptions on <code>projectivization</code></p>",
        "id": 281322640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651767734
    },
    {
        "content": "<p>recent developments like <a href=\"https://github.com/leanprover-community/mathlib/pull/13870\">#13870</a> <a href=\"https://github.com/leanprover-community/mathlib/pull/13845\">#13845</a> seems relevant</p>",
        "id": 281322741,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651767794
    },
    {
        "content": "<p>OK so I finally made it, and it is not too ugly in the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.projective_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">projectivization</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"n\">ℙ</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.topological_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">w.val.2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">CP1</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">w.val.1</span> <span class=\"bp\">/</span> <span class=\"n\">w.val.2</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l5</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">continuous_on_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">hzt</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hzt</span><span class=\"o\">],</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"n\">z.1</span> <span class=\"bp\">/</span> <span class=\"n\">z.2</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">z.2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.set_of_and</span><span class=\"o\">,</span> <span class=\"n\">set.inter_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">continuous_on.preimage_open_of_open</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">continuous_on.div</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">continuous_fst.continuous_on</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">continuous_snd.continuous_on</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_open.preimage</span> <span class=\"n\">continuous_snd</span> <span class=\"n\">is_open_compl_singleton</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.inter_assoc</span><span class=\"o\">,</span> <span class=\"n\">set.inter_subset_left</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(the <code>sorry</code>s in the definitions are not a problem). All in all I have a <code>local_homeomorph (ℙ ℂ (ℂ × ℂ)) ℂ</code>, built in an ad hoc way but it should be usable even if it doesn't win any beauty contest.</p>",
        "id": 281359522,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1651784928
    },
    {
        "content": "<p>I think a general approach is to compose the continuous map from C^n to C^(n+1) (sending one coordinate to 1) with the quotient map C^(n+1)\\{0} → CP^n to get an injective map C^n → CP^n whose inverse is your <code>f</code>. Restricted to each closed ball, it's an injective continuous map from compact to Hausdorff, hence an homeomorphism onto its image, so <code>f</code> is continuous on the image. You still need to show that CP^n is Hausdorff (<code>t2_space</code>) though.</p>",
        "id": 281361491,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651786061
    },
    {
        "content": "<p>Indeed that was my other option (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_map.continuous_on_image_of_left_inv_on\">docs#is_open_map.continuous_on_image_of_left_inv_on</a>) but my <code>f</code> was simple enough that I thought it would be easy, and that was the opening of this particular rabbit hole. You are certainly right that in all generality it will be easier to work with the inverse map.</p>",
        "id": 281363123,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1651786887
    },
    {
        "content": "<p>Hmm, it seems you still have to show that the image contains an open neighborhood of the point around which you want to find a chart. So maybe this approach isn't that simpler after all. (simply showing <code>is_open_map</code> bypasses all these compact Hausdorff argument)</p>",
        "id": 281363862,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651787402
    },
    {
        "content": "<p>So here is a definition of the manifold structure on the Riemann sphere / CP1. It has all kinds of problems and I am not going to PR it anytime soon, but I am putting it here for future reference, and if possible for comments :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.charted_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.smooth_manifold_with_corners</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.projective_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">projectivization</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">C'2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span> <span class=\"bp\">//</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"n\">ℙ</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CP1</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.topological_space</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> General-purpose lemmas (not about projectivization itself) -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open_preimage_div</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span> <span class=\"bp\">|</span> <span class=\"n\">z.2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">z.1</span> <span class=\"bp\">/</span> <span class=\"n\">z.2</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_fst.continuous_on.div</span> <span class=\"n\">continuous_snd.continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">preimage_open_of_open</span>\n  <span class=\"o\">(</span><span class=\"n\">is_open_compl_singleton.preimage</span> <span class=\"n\">continuous_snd</span><span class=\"o\">)</span> <span class=\"n\">ht</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Technical lemmas about projectivization -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"bp\">↔</span> <span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">y.2</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span> <span class=\"bp\">*</span> <span class=\"n\">y.1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mk_eq_mk_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.smul_def</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">y.1</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">y1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">prod.mk_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">prod.mk_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">units.mk0</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"bp\">/</span><span class=\"n\">y2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">div_ne_zero</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">),</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.smul_def</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">prod.mk_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n        <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">units.mk0</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"bp\">/</span><span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">div_ne_zero</span> <span class=\"n\">h'</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.smul_def</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_comm_div'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">div_eq_div_of_mk_eq_mk</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.1</span> <span class=\"bp\">/</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">y.1</span> <span class=\"bp\">/</span> <span class=\"n\">y.2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">mk_eq_mk_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">units.smul_def</span><span class=\"o\">,</span> <span class=\"n\">mul_div_mul_left</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">lift_on_mk</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C'2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hf</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient.lift_on'</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"n\">z</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Topological results -/</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">t1_space</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">projectivization.ind</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">is_open_compl_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">is_open</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">mk'</span> <span class=\"n\">ℂ</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mk'_eq_mk</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">C'2</span><span class=\"o\">,</span> <span class=\"n\">z.val.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.2</span> <span class=\"bp\">-</span> <span class=\"n\">z.val.2</span> <span class=\"bp\">*</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">is_open_compl_singleton.preimage</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sub_ne_zero</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Chart constructions -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rec1</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">CP1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.lift_on'</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">w.val.1</span> <span class=\"bp\">/</span> <span class=\"n\">w.val.2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">div_eq_div_of_mk_eq_mk</span> <span class=\"n\">x.prop</span> <span class=\"n\">y.prop</span> <span class=\"o\">(</span><span class=\"n\">quotient.eq'.mpr</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_rec1</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">rec1</span> <span class=\"o\">{[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">]}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">continuous_on_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">hzt</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">rec1</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"o\">{[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">]}</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hzt</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.inter_assoc</span><span class=\"o\">,</span> <span class=\"n\">set.inter_subset_left</span><span class=\"o\">]⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"n\">z.2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">z.1</span> <span class=\"bp\">/</span> <span class=\"n\">z.2</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">},</span> <span class=\"n\">is_open_preimage_div</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rec1</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">not_iff_not</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span>\n    <span class=\"n\">set.mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'_mk</span><span class=\"o\">,</span> <span class=\"n\">set.mem_compl_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">and.congr_right_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lh1</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">CP1</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">rec1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"o\">{[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">]}</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n  <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n\n  <span class=\"n\">map_source'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">set.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_target'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">],</span>\n\n  <span class=\"n\">left_inv'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">induction</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"n\">projectivization.ind</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_compl_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">ne.def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rec1</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">hz.symm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rec1</span><span class=\"o\">],</span>\n\n  <span class=\"n\">open_source</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_compl_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">open_target</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_rec1</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_inv_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous.continuous_on</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_quot_mk.comp</span><span class=\"o\">,</span>\n    <span class=\"n\">continuity</span> <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">z.swap</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">z</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">antip</span> <span class=\"o\">:</span> <span class=\"n\">CP1</span> <span class=\"bp\">→</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">z</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"n\">ℂ</span> <span class=\"n\">w.val.swap</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">w.prop</span><span class=\"o\">]))</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">⟩,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">quotient.eq'.mpr</span> <span class=\"n\">hxy</span><span class=\"o\">)]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">antip.involutive</span> <span class=\"o\">:</span> <span class=\"n\">function.involutive</span> <span class=\"n\">antip</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"n\">projectivization.ind</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">antip</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">antip.continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">antip</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_quotient_lift_on'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_quotient_mk.comp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_subtype_mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_swap.comp</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">antipode</span> <span class=\"o\">:</span> <span class=\"n\">homeomorph</span> <span class=\"n\">CP1</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">antip</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">antip</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">antip.involutive</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">antip.involutive</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">antip.continuous</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">antip.continuous</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">antip_infty</span> <span class=\"o\">:</span> <span class=\"n\">antip</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">antip</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lh2</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">CP1</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"n\">antipode.to_local_homeomorph.trans</span> <span class=\"n\">lh1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">charted_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">atlas</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">lh1</span><span class=\"o\">,</span> <span class=\"n\">lh2</span><span class=\"o\">},</span>\n  <span class=\"n\">chart_at</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">lh2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lh1</span> <span class=\"o\">},</span>\n  <span class=\"n\">mem_chart_source</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lh1</span><span class=\"o\">,</span> <span class=\"n\">lh2</span><span class=\"o\">,</span> <span class=\"n\">antipode</span><span class=\"o\">,</span> <span class=\"n\">antip</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">chart_mem_atlas</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">invC1</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℂ</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">cont_diff_on_inv</span> <span class=\"n\">ℂ</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">dom1</span> <span class=\"o\">:</span> <span class=\"n\">lh1.target</span> <span class=\"bp\">∩</span> <span class=\"n\">lh1.symm</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">lh2.source</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lh1</span><span class=\"o\">,</span> <span class=\"n\">lh2</span><span class=\"o\">,</span> <span class=\"n\">antipode</span><span class=\"o\">,</span> <span class=\"n\">antip</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">dom2</span> <span class=\"o\">:</span> <span class=\"n\">lh2.target</span> <span class=\"bp\">∩</span> <span class=\"n\">lh2.symm</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">lh1.source</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lh1</span><span class=\"o\">,</span> <span class=\"n\">lh2</span><span class=\"o\">,</span> <span class=\"n\">antipode</span><span class=\"o\">,</span> <span class=\"n\">antip</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_iff_mul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">CP1</span> <span class=\"o\">:=</span>\n<span class=\"n\">smooth_manifold_with_corners_of_cont_diff_on</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">CP1</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">he</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">he'</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cont_diff_on_id.congr</span><span class=\"o\">,</span> <span class=\"n\">lh1</span><span class=\"o\">,</span> <span class=\"n\">rec1</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">he'</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">he'</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">invC1.congr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lh1</span><span class=\"o\">,</span> <span class=\"n\">lh2</span><span class=\"o\">,</span> <span class=\"n\">antipode</span><span class=\"o\">,</span> <span class=\"n\">antip</span><span class=\"o\">,</span> <span class=\"n\">rec1</span><span class=\"o\">])</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">invC1.congr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lh1</span><span class=\"o\">,</span> <span class=\"n\">lh2</span><span class=\"o\">,</span> <span class=\"n\">antipode</span><span class=\"o\">,</span> <span class=\"n\">antip</span><span class=\"o\">,</span> <span class=\"n\">rec1</span><span class=\"o\">])</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">he</span> <span class=\"n\">he'</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cont_diff_on_id.congr</span><span class=\"o\">,</span> <span class=\"n\">lh1</span><span class=\"o\">,</span> <span class=\"n\">lh2</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">he'</span><span class=\"o\">,</span> <span class=\"n\">rec1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">projectivization</span>\n</code></pre></div>",
        "id": 281612337,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652035086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I totally agree that this is not the correct way to do it, more of a learning exercise...</p>",
        "id": 281612527,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652035395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> sorry for pinging you, do you have comments on my PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14059\">#14059</a> that adds some API to <code>projective/basic.lean</code>? I am mostly wondering about two things:</p>\n<ul>\n<li>the choice of <code>k \\times k</code> as opposed to <code>fin 2 \\to k</code> as the underlying space: <code>fin n</code> would be the natural generalization here, OTOH there is a lot of special-casing for projective lines and using <code>k \\times k</code> for that case felt more natural;</li>\n<li>then the addition of normalizing <code>simp</code> lemmas into the <code>projectivization.mk</code> form: this in my experience made things smoother to use, especially since some lemmas made some <code>quotient.mk</code> and <code>quotient.mk'</code> terms appear, but unfortunately it broke two of your proofs that relied on <code>by simp [mk]</code> so I thought I should let you know.</li>\n</ul>\n<p>What do you think?</p>",
        "id": 282459980,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652687258
    },
    {
        "content": "<p>Ideally we would have a smooth API to work with vector spaces with a given basis (of size <code>2</code>, or <code>3</code>, or <code>n</code>).</p>",
        "id": 282468648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652692368
    },
    {
        "content": "<p>I do think it would be better to come up with a more uniform way to do this for an arbitrary (finite dimensional) vector space.</p>",
        "id": 282518930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652717729
    },
    {
        "content": "<p>Concerning <code>projectivization.mk</code>, that seems fine to me, but my one (small) concern is that it might require duplicating more of the <code>quotient</code> api.</p>",
        "id": 282519112,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652717787
    },
    {
        "content": "<p>BTW your <code>mk_eq_mk_iff_mul_eq_mul</code> can be generalized as follows (the following proof is very golfable)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.projective_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">projectivization</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mk</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">K</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mk_eq_mk_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">hj</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hj'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">field_simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mk_eq_mk_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">((</span><span class=\"n\">units.mk0</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">hj'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">units.mk0</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">hj</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282522560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652719204
    }
]