[
    {
        "content": "<p>Do we have, there exists a linear equivalence between two <code>finite_dimensional</code> vector spaces of the same <code>findim</code>?</p>",
        "id": 221357275,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609516976
    },
    {
        "content": "<p>yes, I think Markus Himmel did that</p>",
        "id": 221357292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609517008
    },
    {
        "content": "<p>I forgot the name of the result...</p>",
        "id": 221357344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609517087
    },
    {
        "content": "<p>I tried searching for <code>linear_equiv</code> in <code>linear_algebra.finite_dimensional</code> and couldn't see it.</p>",
        "id": 221357356,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609517134
    },
    {
        "content": "<p>This is true in general, not just for finite dimensional. Maybe that helps in finding it?</p>",
        "id": 221357406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609517169
    },
    {
        "content": "<p>Is this what you want: <code>src/linear_algebra/invariant_basis_number.lean</code> ?</p>",
        "id": 221357417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609517207
    },
    {
        "content": "<p>or is that in the wrong direction?</p>",
        "id": 221357430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609517238
    },
    {
        "content": "<p>(Heather are you formalizing projective spaces? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 221357486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609517330
    },
    {
        "content": "<p>I think it might be in the wrong direction, yes.</p>",
        "id": 221357487,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609517332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Classification.20of.20finite-dimensional.20vector.20spaces/near/221357486\">said</a>:</p>\n<blockquote>\n<p>(Heather are you formalizing projective spaces? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>\n</blockquote>\n<p>No ...<br>\n<a href=\"https://github.com/leanprover-community/mathlib/tree/sphere\">https://github.com/leanprover-community/mathlib/tree/sphere</a></p>",
        "id": 221357496,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609517360
    },
    {
        "content": "<p>Oh nice! I figured it was projective spaces because of the span notation we were discussing a few day ago.</p>",
        "id": 221357544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609517429
    },
    {
        "content": "<p>anyway, the closest I can find so far to the problem at hand is this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv_of_is_basis\">docs#equiv_of_is_basis</a></p>",
        "id": 221357600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609517528
    },
    {
        "content": "<p>That looks good, thanks!  I don't understand why it's not named <code>linear_equiv_of_is_basis</code>, though :)</p>",
        "id": 221357668,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609517673
    },
    {
        "content": "<p>Yeah I agree.</p>",
        "id": 221357674,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609517687
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.eq\">docs#cardinal.eq</a> gets you essentially all the way to what you want.</p>",
        "id": 221357680,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609517700
    },
    {
        "content": "<p>And this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis.mk_eq_dim''\">docs#is_basis.mk_eq_dim''</a></p>",
        "id": 221357747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609517815
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dimension</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">vector_space.dim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">vector_space.dim</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">hB</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_is_basis</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"n\">hC</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_is_basis</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">is_basis.mk_eq_dim''</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">is_basis.mk_eq_dim''</span> <span class=\"n\">hC</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.mk</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.mk</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinal.eq</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">equiv_of_is_basis</span> <span class=\"n\">hB</span> <span class=\"n\">hC</span> <span class=\"n\">h3</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221358111,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609518476
    },
    {
        "content": "<p>Wonderful!  Can you PR it?</p>",
        "id": 221358156,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609518517
    },
    {
        "content": "<p>sure.</p>",
        "id": 221358172,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609518549
    },
    {
        "content": "<p>Which file should it go in?</p>",
        "id": 221358176,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609518555
    },
    {
        "content": "<p>Oh, there is one annoying thing -- to even state that the two vector spaces have the same dimension, they need to come from the same universe.</p>",
        "id": 221358241,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609518642
    },
    {
        "content": "<p>I think <code>linear_algebra.dimension</code></p>",
        "id": 221358249,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609518658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Classification.20of.20finite-dimensional.20vector.20spaces/near/221358241\">said</a>:</p>\n<blockquote>\n<p>Oh, there is one annoying thing -- to even state that the two vector spaces have the same dimension, they need to come from the same universe.</p>\n</blockquote>\n<p>We just need a version for <code>finite_dimensional</code> and <code>findim</code>, that avoids all those issues.</p>",
        "id": 221358263,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609518677
    },
    {
        "content": "<p>You can still have finite dimensional vector spaces in different universes.</p>",
        "id": 221358276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609518707
    },
    {
        "content": "<p>Oh I see what you mean.</p>",
        "id": 221358322,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609518724
    },
    {
        "content": "<p>The dimension would be in nat, not in cardinal</p>",
        "id": 221358327,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609518733
    },
    {
        "content": "<p>Okay, I pushed to this branch <a href=\"https://github.com/leanprover-community/mathlib/tree/lin_equiv_of_basis_equiv\">branch#lin_equiv_of_basis_equiv</a></p>",
        "id": 221358921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609519709
    },
    {
        "content": "<p>Is there a <code>finite_dimensional</code> analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.dim_eq\">docs#linear_equiv.dim_eq</a> with <code>findim</code>?</p>",
        "id": 221358932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609519740
    },
    {
        "content": "<p>Thanks!<br>\n<span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Classification.20of.20finite-dimensional.20vector.20spaces/near/221358932\">said</a>:</p>\n<blockquote>\n<p>Is there a <code>finite_dimensional</code> analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.dim_eq\">docs#linear_equiv.dim_eq</a> with <code>findim</code>?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.findim_eq\">docs#linear_equiv.findim_eq</a>?</p>",
        "id": 221360118,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609521729
    },
    {
        "content": "<p>I have the finite-dimensional case essentially done too (with no universe limitations). I'll open a PR soon.</p>",
        "id": 221360193,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609521865
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5559\">#5559</a></p>",
        "id": 221360600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609522572
    },
    {
        "content": "<p>I'm skeptical that you really want the conclusion of the lemma to be <code>nonempty (V ≃ₗ[K] V₂)</code>. The first thing you'll do when using the lemma will be to extract an isomorphism. Why not making it a def?</p>",
        "id": 221363156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609526378
    },
    {
        "content": "<p>I'm also surprised those lemmas are no already there somehow. I would wait for <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> to comment on this.</p>",
        "id": 221363302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609526543
    },
    {
        "content": "<p>I mostly used <code>nonempty</code> to make it a <code>Prop</code>, which is useful for the if and only if statement. I can make a <code>def</code> to get the linear equiv as well, but I agree that we should wait for <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> :)</p>",
        "id": 221363459,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609526768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Classification.20of.20finite-dimensional.20vector.20spaces/near/221363302\">said</a>:</p>\n<blockquote>\n<p>I'm also surprised those lemmas are no already there somehow. I would wait for <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> to comment on this.</p>\n</blockquote>\n<p>I don't recall seeing something like <code>linear_equiv.of_findim_eq</code>, only the equivalences assuming a basis, so I think this is indeed a hole in the library.</p>",
        "id": 221386287,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1609567520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Classification.20of.20finite-dimensional.20vector.20spaces/near/221363459\">said</a>:</p>\n<blockquote>\n<p>I mostly used <code>nonempty</code> to make it a <code>Prop</code>, which is useful for the if and only if statement. I can make a <code>def</code> to get the linear equiv as well, but I agree that we should wait for <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> :)</p>\n</blockquote>\n<p>The <code>nonempty</code> situation as it is in the PR right now seems optimal to me: cardinal equality is expressed in <code>nonempty</code>, so the first result also uses <code>nonempty</code> and the next ones apply <code>classical.choice</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 221386659,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1609568311
    }
]