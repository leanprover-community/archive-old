[
    {
        "content": "<p>We have <code>finsupp.nonzero_iff_exists {f : α →₀ M} : f ≠ 0 ↔ ∃ a : α, f a ≠ 0</code>, but I'm not finding the analogue of this that I want, for linear maps. Are these hiding somewhere under a different name, or do they need adding?</p>",
        "id": 281142340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651664230
    },
    {
        "content": "<p>I just added something similar. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.exists_ne_zero\">docs#continuous_linear_map.exists_ne_zero</a></p>",
        "id": 281142495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664318
    },
    {
        "content": "<p>Shouldn't we just have that for arbitrary functions?</p>",
        "id": 281143016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651664650
    },
    {
        "content": "<p>Well, yeah, but it depends on the specific <code>has_zero</code> instance.</p>",
        "id": 281143092,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664719
    },
    {
        "content": "<p>If we just write it for \"bare\" functions, we won't be able to use it with <code>rw</code> or <code>simp</code>, unfortunately.</p>",
        "id": 281143097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651664727
    },
    {
        "content": "<p>Usually, <code>⇑0 = 0</code> is defeq though.</p>",
        "id": 281143128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664746
    },
    {
        "content": "<p>Still, syntactic form is what counts. :-(</p>",
        "id": 281143211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651664777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, didn't you have plans to write a <code>has_pointwise_zero</code> instance? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 281143214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664779
    },
    {
        "content": "<p>You can <code>rw [←coe_zero, coe_inj]</code> I believe, Scott. But I agree it's a pain.</p>",
        "id": 281143236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664796
    },
    {
        "content": "<p>But I don't want to have extra rewrites, or to have to know a silly name like <code>coe_zero</code>. :-)</p>",
        "id": 281143277,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651664821
    },
    {
        "content": "<p>and <code>library_search</code> must find this lemma</p>",
        "id": 281143311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651664844
    },
    {
        "content": "<p>because otherwise I'm going to have to ask here again. :-)</p>",
        "id": 281143318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651664854
    },
    {
        "content": "<p>I'm always here to serve!</p>",
        "id": 281143345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651664876
    },
    {
        "content": "<blockquote>\n<p>Shouldn't we just have that for arbitrary functions?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.ne_iff\">docs#function.ne_iff</a></p>",
        "id": 281143625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651665035
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like.ne_iff\">docs#fun_like.ne_iff</a></p>",
        "id": 281143663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651665057
    },
    {
        "content": "<p>Zero falls out as an uninteresting special case, since pretty much all function types have <code>0 x = 0</code> by definition</p>",
        "id": 281143695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651665076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/finsupp.2Enonzero_iff_exist/near/281143214\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>, didn't you have plan,s to write a <code>has_pointwise_zero</code> instance? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>I don't recall that. Wasn't Yury doing something with pointwise maps?</p>",
        "id": 281144100,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651665340
    },
    {
        "content": "<p>The other similiar statement I'd like is <code>nontrivial</code> iff <code>surjective f → f ≠ 0</code>. That seems harder to make polymorphic, because of the \"what does the zero function mean\" issue.</p>",
        "id": 281144998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651665893
    },
    {
        "content": "<p>You could always put a <code>coe_fn</code> on the <code>f</code></p>",
        "id": 281146793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651667006
    },
    {
        "content": "<p>Which I guess would be on all occurences of <code>f</code> at that point, so it just becomes about <code>function</code>.</p>",
        "id": 281146908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651667060
    },
    {
        "content": "<p>What I think we are missing are lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.coe_eq_zero\">docs#linear_map.coe_eq_zero</a> which should contain the obvious iff</p>",
        "id": 281146933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651667080
    },
    {
        "content": "<p>Yeah I proved some stuff similar to that a while back. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.coe_eq_singleton\">docs#finset.coe_eq_singleton</a>. This dumb lemma is super practical.</p>",
        "id": 281149672,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651668552
    }
]