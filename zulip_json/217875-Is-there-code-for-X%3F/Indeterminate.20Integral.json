[
    {
        "content": "<p>I was wondering if there is a way to take an indeterminate integral of a single-variable function. I was trying to work backwards from the derivative of a function and show that if a function has this as its derivative, the function must be this, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I was trying to prove it by contradiction, but I couldn't quite figure it out.</p>",
        "id": 286214408,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655301084
    },
    {
        "content": "<p>The statement is false; I think you meant \"exists\" not \"forall\"</p>",
        "id": 286219790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655303375
    },
    {
        "content": "<p>Ok, my bad, I was thinking it would be for any constant C, because it is true that x^2 +2 and x^2 +3 both have the derivative 2*x</p>",
        "id": 286221854,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655304217
    },
    {
        "content": "<p>With changing the statement to exists, where would I start with proving this? I'm having trouble finding a way to do an antiderivative in Lean</p>",
        "id": 286221963,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655304250
    },
    {
        "content": "<p>Something using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_const_of_deriv_eq_zero\">docs#is_const_of_deriv_eq_zero</a> applied to <code>λ x, f x - x^2</code>?</p>",
        "id": 286224056,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1655305048
    },
    {
        "content": "<p>I made progress with that, and I think its the right track, but I ran into an illogical argument. While going through, I ended with a goal of f x - x^2 = f x, which implies that x^2 = 0. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.mean_value</span>\n\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">is_const_of_deriv_eq_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">differentiable</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.differentiable_at</span><span class=\"o\">,</span>\n<span class=\"n\">convert</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"n\">funext</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286228318,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655306643
    },
    {
        "content": "<p>nvm, I think I fixed it</p>",
        "id": 286229568,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655307198
    },
    {
        "content": "<p>you can certainly get to an unprovable proof state from a true statement</p>",
        "id": 286230884,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655307715
    },
    {
        "content": "<p>Yea, I see that. I've made progress. Currently I have the statement </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I feel like I should be able to prove this without having to write this as a premise, I was looking around the special function tab and trying to see if there was a lemma for this</p>",
        "id": 286231097,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655307798
    },
    {
        "content": "<p>wait, I was overthinking it. Its just has_deriv_at.pow <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 286231373,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655307903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Indeterminate.20Integral/near/286230884\">said</a>:</p>\n<blockquote>\n<p>you can certainly get to an unprovable proof state from a true statement</p>\n</blockquote>\n<p>But in this case the statement is not true, I think (the conclusion should be <code>∃(C:ℝ), f = λ x, x^2 + C</code>)</p>",
        "id": 286231398,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1655307912
    },
    {
        "content": "<p>A very ugly version:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.mean_value</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_const_of_deriv_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable.add</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">differentiable_at</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hf'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">differentiable_at</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}}},</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h1</span> <span class=\"n\">z</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 286235610,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1655309467
    },
    {
        "content": "<p>Thank you! I was almost there but got stuck, realized I needed my have statement to be forall. I was using lambda function. Thank you for the help!</p>",
        "id": 286248741,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655315396
    }
]