[
    {
        "content": "<p>Do we have the fact that <code>(map f : mv_polynomial σ R →+* mv_polynomial σ S).ker = f.ker.map C</code>?</p>\n<p>I was able to show it with:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"sd\">/-- The push-forward of an ideal `I` of `R` to `mv_polynomial σ R` via inclusion</span>\n<span class=\"sd\">is exactly the set of polynomials whose coefficients are in `I`.#check</span>\n\n<span class=\"sd\">This is the multivariate version of `ideal.mem_map_C_iff`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.ideal.mem_map_mv_polynomial_C_iff</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ideal.map</span> <span class=\"n\">C</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- this proof is just a copy-paste of `ideal.mem_map_C_iff` with minor adjustments</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">submodule.span_induction</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">set.mem_image</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx.right</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">],</span>\n      <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hx.left</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">I.add_mem</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">I.sum_mem</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">I.smul_mem</span> <span class=\"o\">(</span><span class=\"n\">f.coeff</span> <span class=\"n\">c.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">c.snd</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">f.support_sum_monomial_coeff</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">I.map</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">C_mul_monomial</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">I.map</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ideal.mem_map_of_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.mv_polynomial.ker_map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"n\">f.ker.map</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ideal.mem_map_mv_polynomial_C_iff</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.ext_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_map</span><span class=\"o\">,</span> <span class=\"n\">coeff_zero</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.mem_ker</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<p>but I'm not sure where a good home for this is</p>",
        "id": 260253771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636023154
    },
    {
        "content": "<p>Given I need it in <code>ring_theory.finiteness</code>, my choices are only:</p>\n<ul>\n<li><code>ring_theory.adjoin.fg</code></li>\n<li><code>ring_theory.adjoin.polynomial</code></li>\n<li><code>ring_theory.algebra_tower</code></li>\n<li><code>ring_theory.polynomial.basic</code></li>\n</ul>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># script to answer the above</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n\n<span class=\"k\">with</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"https://leanprover-community.github.io/mathlib_docs/import.gexf\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">read_gexf</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">))</span>\n\n<span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">ancestors</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"s1\">'mathlib:data.mv_polynomial.basic'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n    <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">ancestors</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"s1\">'mathlib:ring_theory.ideal.basic'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n    <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">descendants</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"s1\">'mathlib:ring_theory.finiteness'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"p\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 260255179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636024058
    },
    {
        "content": "<p>I think <code>ring_theory.polynomial.basic</code> is fine.<br>\n(You have a <code>#check</code> embedded in your docstring.)</p>",
        "id": 260255976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636024647
    },
    {
        "content": "<p>Oh, we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.mem_map_C_iff\">docs#mv_polynomial.mem_map_C_iff</a> in that file!</p>",
        "id": 260256415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636024962
    },
    {
        "content": "<p>I couldn't find it because the other lemma is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.mem_map_C_iff\">docs#ideal.mem_map_C_iff</a></p>",
        "id": 260256438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636024982
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10160\">#10160</a></p>",
        "id": 260257974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636026040
    }
]