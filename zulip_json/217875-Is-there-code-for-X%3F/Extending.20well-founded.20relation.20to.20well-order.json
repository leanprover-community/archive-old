[
    {
        "content": "<p>Do we have this somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.zorn</span>\n\n<span class=\"sd\">/-- Any well-founded relation can be extended to a well-ordering on that type. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">well_founded.exists_well_order_ge</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">is_well_order</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 300949207,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664262349
    },
    {
        "content": "<p>I've formalized the proof at <a href=\"https://math.stackexchange.com/a/4124696/12932\">https://math.stackexchange.com/a/4124696/12932</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.ordinal.arithmetic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.prod.lex</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- This definition is probably unconventional and doesn't agree with ordinal.typein:</span>\n<span class=\"sd\">  there is no need to take successor if the sup is a limit ordinal,</span>\n<span class=\"sd\">  but this definition satisfies rank_lt_of_rel and therefore suffices for our current purpose. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">acc.rank</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">acc.rec_on</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">order.succ</span> <span class=\"o\">(</span><span class=\"n\">ordinal.sup.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">ih</span> <span class=\"n\">b</span> <span class=\"n\">b.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">acc.rank_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">h.rank</span> <span class=\"bp\">=</span> <span class=\"n\">order.succ</span> <span class=\"o\">(</span><span class=\"n\">ordinal.sup.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">h.inv</span> <span class=\"n\">b.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">acc.intro</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h.inv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- if `r a b` then the rank of `a` is less than the rank of `b`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">acc.rank_lt_of_rel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hb.inv</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hb.rank</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hb.rank_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">order.lt_succ_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ordinal.le_sup.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">well_founded</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">hwf</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">rank</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hwf.apply</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rank_lt_of_rel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hwf.rank</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hwf.rank</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">acc.rank_lt_of_rel</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">linear_extension</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">is_well_order.linear_order</span> <span class=\"n\">well_ordering_rel</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span>\n  <span class=\"bp\">@</span><span class=\"n\">linear_order.lift'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span> <span class=\"bp\">×ₗ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hwf.rank</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod.snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_extension_lt_eq</span> <span class=\"o\">:</span>\n  <span class=\"n\">hwf.linear_extension.lt</span> <span class=\"bp\">=</span> <span class=\"n\">inv_image</span> <span class=\"o\">(</span><span class=\"n\">prod.lex</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">well_ordering_rel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hwf.rank</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">linear_extension_is_well_founded</span> <span class=\"o\">:</span> <span class=\"n\">is_well_founded</span> <span class=\"n\">α</span> <span class=\"n\">hwf.linear_extension.lt</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">inv_image.wf</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">prod.lex_wf</span> <span class=\"n\">ordinal.well_founded_lt.wf</span> <span class=\"n\">well_ordering_rel.is_well_order.wf</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_well_order_ge</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">is_well_order</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">hwf.linear_extension.lt</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">prod.lex.left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hwf.rank_lt_of_rel</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">split</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">well_founded</span>\n</code></pre></div>",
        "id": 301153854,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664336311
    },
    {
        "content": "<p>Does mathlib even have that every partial order extends to a linear order?</p>",
        "id": 301154013,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664336431
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/as_linear_order.linear_order\">docs#as_linear_order.linear_order</a>?</p>",
        "id": 301154436,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664336849
    },
    {
        "content": "<p>it's from a total partial order, not sure if that's what you meant</p>",
        "id": 301154496,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664336892
    },
    {
        "content": "<p>That's mathematically trivial; I'm thinking about <a href=\"https://en.wikipedia.org/wiki/Linear_extension#Order-extension_principle\">https://en.wikipedia.org/wiki/Linear_extension#Order-extension_principle</a></p>",
        "id": 301154527,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664336952
    },
    {
        "content": "<p>ah whoops, I see</p>",
        "id": 301154566,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664336995
    },
    {
        "content": "<p>Hmm <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_extension.linear_order\">docs#linear_extension.linear_order</a> is what I was looking for...</p>",
        "id": 301154779,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664337161
    },
    {
        "content": "<p>That proof uses Zorn's lemma; I tried to use Zorn's lemma for this well-founded version as well, but it doesn't work: (&lt;) restricted <code>{x : ℤ | x &gt; n}</code> is well-founded, and for different <code>n</code> it forms a chain, but the union is (&lt;) on ℤ which is not well-founded.</p>",
        "id": 301155167,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664337554
    },
    {
        "content": "<p>Bhavik told me that at <a href=\"https://math.stackexchange.com/a/4124696/12932\">https://math.stackexchange.com/a/4124696/12932</a> was just Zorn in disguise and that you could basically copy-paste the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_extension.linear_order\">docs#linear_extension.linear_order</a> to ensure well-foundedness too.</p>",
        "id": 301166659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664347214
    },
    {
        "content": "<p>If you extend arbitrarily you may not get a well order, for example the empty relation on ℕ can be extended to (&gt;) which is not well-founded, and I'm not sure how you take care of that possibility if you're gonna adapt the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/extend_partial_order/src\">src#extend_partial_order</a> proof. In fact, if all linear extensions of a well-founded partial order are well-founded, then the partial order has no infinite antichain (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.is_pwo\">docs#set.is_pwo</a>), and vice versa; I learned the fact from <a href=\"https://arxiv.org/abs/1503.06514v6\">https://arxiv.org/abs/1503.06514v6</a> but it's easy to come up with a proof once you know the theorem.</p>",
        "id": 301172628,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664350247
    },
    {
        "content": "<p>Maybe Bhavik is just wrong <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 301180341,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664353605
    },
    {
        "content": "<p>For reference, here is our current proof idea: <a href=\"https://github.com/leanprover-community/con-nf/blob/main/src/phase2/strong_support.lean#L406\">https://github.com/leanprover-community/con-nf/blob/main/src/phase2/strong_support.lean#L406</a></p>",
        "id": 301180681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664353744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Extending.20well-founded.20relation.20to.20well-order/near/301172628\">said</a>:</p>\n<blockquote>\n<p>If you extend arbitrarily you may not get a well order, for example the empty relation on ℕ can be extended to (&gt;) which is not well-founded, and I'm not sure how you take care of that possibility if you're gonna adapt the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/extend_partial_order/src\">src#extend_partial_order</a> proof. In fact, if all linear extensions of a well-founded partial order are well-founded, then the partial order has no infinite antichain (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.is_pwo\">docs#set.is_pwo</a>), and vice versa; I learned the fact from <a href=\"https://arxiv.org/abs/1503.06514v6\">https://arxiv.org/abs/1503.06514v6</a> but it's easy to come up with a proof once you know the theorem.</p>\n</blockquote>\n<p>I don't claim that extending arbitrarily gives you a well order, instead that the proof idea is the same thing - a proof by well-founded recursion on ordinals can always be translated to a proof by Zorn. I agree picking an arbitrary extension won't work, but the Zorn proof works directly instead</p>",
        "id": 302874230,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665155371
    },
    {
        "content": "<p>AFAICT using the Zorn proof directly doesn't work.  A chain of well-founded relations does not necessarily have a well-founded upper bound.  (If you complete the empty relation on Nat, you could devillishly go <code>1 &lt; 0</code>, <code>2 &lt; 1 &lt; 0</code>, etc.)</p>\n<p>(EDIT: which is apparently exactly what Junyan is saying.)</p>",
        "id": 302942268,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665180928
    },
    {
        "content": "<p>I'm kind of surprised that we do not have the rank function on well-founded relations yet.</p>",
        "id": 302942977,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665181375
    },
    {
        "content": "<p>We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.birthday\">docs#pgame.birthday</a> which is the rank function for the relation <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.is_option\">docs#pgame.is_option</a>.</p>",
        "id": 302946602,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665183951
    }
]