[
    {
        "content": "<p>I don't see a definition of <code>random_variable</code> in Lean.  I would like to build <a href=\"http://www.columbia.edu/~md3405/DT_Risk_2_15.pdf\">Definition 5, page 7 and Remark 1, page 8</a>  in Lean. I would appreciate your critical eye on whether this is a good foundation:</p>\n<p>\"Let  (𝑋,Σ)  be a measure space.</p>\n<p>Let  (𝑌,𝑑)  be a metric space.</p>\n<p>Let  𝑥  be a map from  𝑋  to  𝑌  such that  𝑥−1(𝐵)∈Σ  for any Borel set  𝐵  in  𝑌 .</p>\n<p>We say that  𝑥:(𝑋,Σ)→(𝑌,𝑑)  is a  𝑌 -valued random function and  𝑥  is a  Σ -measurable function.</p>\n<p>We say that  𝑥  is a  𝑌 -valued random variable iff</p>\n<p>𝑥−1(𝑂)∈Σ  for any open set  𝑂 <br>\n𝑥−1(𝑆)∈Σ  for any closet set  𝑆 <br>\nIf  𝑌=ℜ , then  {𝑤∈𝑋:𝑥(𝑤)≤𝛼}∈Σ  for any  𝛼∈ℜ .\"</p>",
        "id": 218910667,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607131383
    },
    {
        "content": "<p>Definition 5 is just another way to say x : X -&gt; Y is a measurable function</p>",
        "id": 218923599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607153546
    },
    {
        "content": "<p>where the measurable space on Y is the borel sigma algebra (which it is by default for metric spaces)</p>",
        "id": 218923602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607153577
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">measurable</span> <span class=\"n\">x</span> <span class=\"c1\">-- x is a Y-valued RV on X</span>\n</code></pre></div>",
        "id": 218924108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607154550
    },
    {
        "content": "<p>Remark 1 isn't a definition, it's a theorem about this definition of measurable function. (1) is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_of_is_open\">docs#measurable_of_is_open</a>, (2) is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_of_is_closed\">docs#measurable_of_is_closed</a>, (3) is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_of_Iic\">docs#measurable_of_Iic</a></p>",
        "id": 218924269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607154866
    },
    {
        "content": "<p>My suggestion, if you want to pursue this topic, is to read the borel_space theorems to get a sense for what's available, and try to match things up with the textbook. Most likely we won't hit everything, and then you can try to prove what remains. This will help to familiarize yourself with the library</p>",
        "id": 218924350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607155028
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> .  So a random variable <code>V</code> is a measurable function.  I quoted from Mark Dean at Brown's course notes for a chapter on measure theory in a course on decision theory.  It's a small point but I'm making it because I found a wide variety of definitions of random variable in other people's course notes.  Also  <a href=\"https://en.wikipedia.org/wiki/Random_variable\">Wikipedia</a> restricts the range of <code>V</code> to <code>ℝ</code>: \"a random variable is understood as a measurable function defined on a probability space that maps from the sample space to the real numbers\".   Clearly this is too restrictive, it doesn't have to be <code>ℝ</code>, any metric space will do.</p>\n<p>I will study the <code>borel_space</code> in <code>mathlib</code>.  In this context I am trying to fill out the following picture with <code>mathlib</code> definitions and examples:<br>\n<a href=\"/user_uploads/3121/lY3vdQNrU0sCvYZA4M_2-Lvn/Screenshot-from-2020-12-05-11-43-17.png\">Screenshot-from-2020-12-05-11-43-17.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lY3vdQNrU0sCvYZA4M_2-Lvn/Screenshot-from-2020-12-05-11-43-17.png\" title=\"Screenshot-from-2020-12-05-11-43-17.png\"><img src=\"/user_uploads/3121/lY3vdQNrU0sCvYZA4M_2-Lvn/Screenshot-from-2020-12-05-11-43-17.png\"></a></div><p>where so far from Zulip we have the following examples:</p>\n<ul>\n<li>Set: {0,1,2}, ℝ, [0,1], [0,oo)</li>\n<li>Metric Space: taxicab, euclidean</li>\n<li>Measurable Space: {0,T}, P(T), B((0,1)), B([0,1]), B([0,oo))<br>\nThere is a lot of probability theory mechanics in the <code>measure_theory</code> part of <code>mathlib</code>.  It seems I need to add some definitions to get <code>probability_space</code> and <code>random_variable</code>.</li>\n</ul>",
        "id": 218942787,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607186828
    },
    {
        "content": "<p>The mathlib way is to generalize everything to the broadest context where it continues to make sense and have the desired properties</p>",
        "id": 218942847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607186924
    },
    {
        "content": "<p>The broadest context for <code>random_variable</code> is to have a range of <code>Type</code> but that is too much for my purposes.</p>",
        "id": 218942868,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607186970
    },
    {
        "content": "<p>In this case, you can probably do most of the stuff about random variables on arbitrary measurable functions; if you start talking about adding things then you have to add an additive group structure and so on</p>",
        "id": 218942873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607186983
    },
    {
        "content": "<p>Type is too much, you need a measurable space in the codomain</p>",
        "id": 218942896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187002
    },
    {
        "content": "<p>but you can just lazily add assumptions as they become necessary</p>",
        "id": 218942926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187023
    },
    {
        "content": "<p>What Mark Dean is saying is <code>metric_space</code> in the codomain, hence my question to begin with: Is Mark Dean wrong?</p>",
        "id": 218942930,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187038
    },
    {
        "content": "<p>That's the point of mathematical taste that I'm asking about.</p>",
        "id": 218942942,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187065
    },
    {
        "content": "<p>mathematicians like to set up some fairly constraining assumptions at the start just to clarify what they are talking about and not have to worry about edge cases, but this gets annoying when you are simultaneously serving many distinct theories</p>",
        "id": 218942948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187083
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has something to say about \"all rings are commutative\" :)</p>",
        "id": 218942999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187136
    },
    {
        "content": "<p>Mark Dean's notes are building a theory with <code>metric_space</code> as the codomain of random variable rather than (another, not necessarily the same as the domain) <code>measurable_space</code>.  Is that inherently wrong, from your experience as a professional mathematician, or just a different choice?</p>",
        "id": 218943001,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187152
    },
    {
        "content": "<p>in this case, one implies the other</p>",
        "id": 218943006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187173
    },
    {
        "content": "<p>so just assume the weaker thing until it makes a theorem false, then add the assumption then</p>",
        "id": 218943012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187198
    },
    {
        "content": "<p>So all <code>metric_space</code>'s are <code>measurable_space</code>'s, or vice versa?</p>",
        "id": 218943014,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187202
    },
    {
        "content": "<p>I.e. I can't construct a <code>metric_space</code> which is not a <code>measurable_space</code> or vice versa.</p>",
        "id": 218943027,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187235
    },
    {
        "content": "<p>Why don't you answer that question?</p>",
        "id": 218943067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187257
    },
    {
        "content": "<p>Prior to Lean I would just go to <a href=\"https://math.stackexchange.com/questions/1402847/whats-the-relationship-between-a-measure-space-and-a-metric-space\">Stack Exchange</a> for this, but challenge accepted!</p>",
        "id": 218943095,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187335
    },
    {
        "content": "<p>I fear dragons though: \"There is no relationship between these two notions. – Crostul Aug 19 '15 at 15:46\"</p>",
        "id": 218943138,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187365
    },
    {
        "content": "<p>Stack Exchange is telling me they are unrelated, so I still have to make a choice.  I'm not sure how to go about proving \"Unrelated\".</p>",
        "id": 218943148,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187395
    },
    {
        "content": "<p>I guess Exists M: metric_space M, not (measurable_space M) and Exists M: measurable_space(M), not (metric_space M)</p>",
        "id": 218943162,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187439
    },
    {
        "content": "<p>I think I can do that.  Which, when I'm done, leaves us back at my original question on this thread: Is metric_space, Mark Dean's choice, the nicest choice to develop a theory of random variable?</p>",
        "id": 218943205,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187488
    },
    {
        "content": "<p>Hint: It was brought up earlier in this discussion</p>",
        "id": 218943213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187505
    },
    {
        "content": "<p>Thanks!  I will study the thread.</p>",
        "id": 218943220,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187536
    },
    {
        "content": "<p>I'm saying that this is the wrong question to ask</p>",
        "id": 218943227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187546
    },
    {
        "content": "<p>You don't need to determine in advance the global assumptions for every theorem you will prove</p>",
        "id": 218943239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187571
    },
    {
        "content": "<p>Use <code>metric_space</code> if you need it, don't if you don't</p>",
        "id": 218943246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187590
    },
    {
        "content": "<p>Wise advice.  I will start with <code>Type</code> for the codomain and see where I get stuck.</p>",
        "id": 218943299,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187639
    },
    {
        "content": "<p>and at least with Mark Dean's definition, there is no need for a definition of <code>random_variable</code> at all because that's just <code>measurable f</code></p>",
        "id": 218943307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187652
    },
    {
        "content": "<p>it is better not to redefine a notion if you don't have to because every new definition comes with an obligation to provide an API for it and if you can leverage an existing library of theorems that's time saved</p>",
        "id": 218943375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20good.20foundational.20definition.20for.20random.20variable.3F/near/218942999\">said</a>:</p>\n<blockquote>\n<p>maybe <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> has something to say about \"all rings are commutative\" :)</p>\n</blockquote>\n<p><a href=\"https://stacks.math.columbia.edu/tag/0006\">https://stacks.math.columbia.edu/tag/0006</a>  a.k.a. \"if you print out these notes they will be over 7000 pdf pages; the word \"ring\" is mentioned over 5000 times and it means \"commutative ring\" each time\"</p>",
        "id": 218943395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187782
    },
    {
        "content": "<p>yeah but how many of those uses actually require the commutativity assumption? I would wager not all of them</p>",
        "id": 218943463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187852
    },
    {
        "content": "<p>So when proving theorems I can prove them in the original domain, like <code>measurable</code>.  However when considering an application domain, I think it would be helpful to introduce some type aliases that let people know say <code>def random_variable := measurable</code>, even if it's just an equality.  I can locate those renamings as syntactic sugar at the end of development.</p>",
        "id": 218943502,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607187941
    },
    {
        "content": "<p>nope, use a comment</p>",
        "id": 218943557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607187986
    },
    {
        "content": "<p>that alias will get in your way more than you would think</p>",
        "id": 218943564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607188008
    },
    {
        "content": "<p>What about context?  I assume the domain of my <code>measurable</code> has gone into/come out of a definition of a <code>probability_space</code>.   I like to keep the idea of a <code>probability_space</code> because it is a thing that people talk about, even though, in <code>mathlib</code> terms, it might disappear in the same way as <code>𝜎_algebra</code> is not immediately visible as such.  So in that sense my notion of <code>random_variable</code> depends on a prior construction of <code>probability_space</code> to make contextual sense.   I would like to formalize these contextual relationships.  The <code>mathlib</code> style seems to be to leave a lot of context in the comments and to avoid formalizing it if is not strictly necessary to make the steps of a proof on a core concept go through.  Which is \"lean\", but maybe a little dry.  Not that there's anything wrong with that, please don't take offense, I'm just saying.</p>",
        "id": 218943723,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607188286
    },
    {
        "content": "<p>that all sounds about right. Formalize the proof</p>",
        "id": 218944159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607188928
    },
    {
        "content": "<p>everything else is comments</p>",
        "id": 218944161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607188936
    },
    {
        "content": "<p><code>probability_space</code> does have some additional content over <code>measure_space</code> since the measure of the whole space is 1 and a forteriori the measure is always real valued and at most 1</p>",
        "id": 218944176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607188985
    },
    {
        "content": "<p>but I haven't yet seen any evidence that the term \"random variable\" contributes much over \"measurable function\" besides licensing the author to use notation like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>+</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X+Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> without worrying about the fact that it's a function and not a number</p>",
        "id": 218944242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607189085
    },
    {
        "content": "<p>If I wanted to create aliases in spite of good advice, I don't know how to do it in Lean.  For example the last line here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set.Ioo</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set.Ioo</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bo0o1</span> <span class=\"o\">:=</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set.Ioo</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Bo0o1</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">Bo0o1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>results in the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic.mk_instance</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">Bo0o1</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Bo0o1</span>\n</code></pre></div>\n<p>when it should do the same thing as <code>#check (by apply_instance : measurable_space (set.Ioo (0:ℝ) 1))</code>.  I'm guessing that  <code>def a := b</code> doesn't make <code>a</code> a pointer to the <code>b</code> but acts instead as a renaming of <code>b</code> which will block unification for theorems on the original expression.</p>\n<p>Alternatively, I was hoping to turn comments into theorems.   For example, rather than define a type <code>random_variable</code>, make a theorem <code>random_variable</code> out of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">measurable</span> <span class=\"n\">x</span> <span class=\"c1\">-- x is a Y-valued RV on X</span>\n</code></pre></div>\n<p>i.e. something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">random_variable</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">measurable</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>For that, Lean gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_8</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 218946666,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607192803
    },
    {
        "content": "<p>I think the <code>abbreviation</code> keyword would be appropriate for the type of alias being suggested here, right?</p>",
        "id": 218957455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607208329
    },
    {
        "content": "<p>Like how we alias vector_space to semimodule</p>",
        "id": 218957458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607208345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , on the topic of random variable vs measurable function: I started working on formalizing some probability theory (following Williams' book \"Probability with martingales\") and after a lot of messing with definitions I would argue that defining random variables as the <code>measurable</code> property is not convenient for what people want to do in probability theory and that you really want to put the probability space in the random variable definition.<br>\nExample of statement you want to be able to make easily: \"let <code>X</code> and <code>Y</code> be two iid Normal random variables with law N(0,1), then <code>X+Y</code> is Normal with law N(0,2).\"<br>\nIn general an important property of a random variable is its law and on the contrary you don't care about the probability space it is defined on and you would like to avoid speaking about it.</p>\n<p>Now consider two ways of defining random variables : 1) measurable functions from measurable space A to measurable space B, and have a probability measure on A on the side (or a hypothesis <code>probability_space A</code>), 2) a random variable definition contains the measurability statement and  the probability measure.</p>\n<p>With definition 2,  the statement \"let <code>X</code> be a random variable with law N(0,1)\" is implemented as follows: the user inputs the target space <code>B = R</code> and the law, and mathlib chooses any suitable <code>Ax</code>, probability <code>Px</code> and function to represent <code>X</code> (ex: <code>Ax = B</code>, <code>Px</code> is the desired law, the function is the identity). In probability theory, the probability space <code>(Ax,Px)</code> does not matter anyway. Idem for the definition of <code>Y</code>, with measurable spaces <code>Ay</code> and <code>B</code> and probability <code>Py</code>. Then when we write <code>X+Y</code>,  we are defining a random variable on an extended space <code>Axy</code> with probability measure <code>Pxy</code>. All those probability space definitions and extensions are things that we do not care about in probability theory, and they are conveniently done behind the scene. (<code>X+Y</code> and <code>Y+X</code> may not lead to the same <code>Axy</code> but again, laws are the same so you don't care)</p>\n<p>With definition 1, we have to specify <code>Ax</code>, <code>Px</code> and the function for <code>X</code> manually. Then when we want to talk about <code>X+Y</code> we have to explicitly call a function to build the extended probability space. My point is that it is both less convenient and not in line with what probability theory is about, namely the study of properties that are unchanged when you extend the probability space. In my mind, the implementation of probability theory is a success if the user never has to write what the probability space is.</p>\n<p>Well I guess I just wrote a wall of text to say that I think that the correct and most useful definition of random variable is the usual one: measurable function from a probability space  to a measurable space. But my point is that there is indeed a need for a <code>random_variable</code> definition that is not simply the <code>measurable</code> property but should include the probability measure.</p>",
        "id": 218979994,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1607250136
    },
    {
        "content": "<p>I'm not convinced that the event space can really be hidden all that well, because non-independent RVs are a thing</p>",
        "id": 218980093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607250316
    },
    {
        "content": "<p>sometimes you want two RVs to have the same event space, and sometimes you want them to be \"freely adjoined\" using a product to get independence, and I don't think either one dominates the usage</p>",
        "id": 218980154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607250396
    },
    {
        "content": "<p>People have struggled to do this sort of thing in Lean, for reasons I've never completely internalised, and my instinct would just be to have a go at trying to do something and to see what happens. Any code which manages to get something working would be a step forward</p>",
        "id": 218980179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607250461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> has talked about some ideas for how to formalize proofs where the event space acts more like a context (in the type theory sense) where you can add new variables and extend your space in the middle of the argument, but it seems like the sort of thing that needs a Framework to work</p>",
        "id": 218980220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607250484
    },
    {
        "content": "<p>I agree with Kevin. Currently I'm at the stage where (due to ignorance of complications, perhaps) everything looks like it can just be formalized straightforwardly, so I would be inclined to just push ahead until the going starts to get rough and we have an idea where the naive approach falls over</p>",
        "id": 218980252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607250585
    },
    {
        "content": "<p>Well I have some things implemented for the <code>random_variable A P B</code> approach where I specify the probability measure in the definition (up to statements about independence of random variables and Kolmogorov 0-1 law). I'll clean it somewhat and make a branch with it in order to facilitate discussion in the coming week(s).</p>",
        "id": 218980535,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1607250977
    },
    {
        "content": "<p>And I will try writing the code for the same things with random variables as measurable functions. I think it will lead to complications, but I am not 100% sure and it will be interesting.</p>",
        "id": 218980631,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1607251176
    },
    {
        "content": "<p>yep, what's important is to see both options and compare</p>",
        "id": 218980677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607251207
    },
    {
        "content": "<p>If I understand correctly, the Giry monad is exactly designed for this: a setup where you can add new variables that are independent (or conditionally independent) of previous ones, and it will extend the probability space for you.</p>\n<p>In probability theory, though, the choice of representation is sometimes important, as it can contain more information than the mere distribution. Here is a (very important) example. When you define real-valued continuous time processes, in a general framework the process is a random function from a probability space to the space <code>C</code> of cadlag real functions (continuous on the right with a limit on the left functions) with a topology called the Skorokhod topology. In this context, the brownian motion can be prescribed by giving the joint distribution of the values of the process at each finite set (a Gaussian vector with suitable variances), and in this sense the law of the brownian motion is then just a probabily measure <code>mu</code> on <code>C</code>. A representation of the brownian motion is thus a measurable map <code>X</code> from a probability space <code>Omega</code> to <code>E</code>, mapping the probability measure on <code>Omega</code> to <code>mu</code>. An important property of the brownian motion is that one can choose such an <code>X</code> such that <code>X (omega)</code> is continuous for almost every <code>omega</code>, but this does not just follow from the distribution: there are also examples of <code>X</code> representing the brownian motion for which <code>X (omega)</code> is continuous for no <code>omega</code>! </p>\n<p>TLDR: trying to hide the event space and the measurable map may seem appealing, but in practice it is not so clear.</p>",
        "id": 218985542,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607259006
    },
    {
        "content": "<p>Re <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> : \"...on the contrary you don't care about the probability space it is defined on and you would like to avoid speaking about it....All those probability space definitions and extensions are things that we do not care about in probability theory, and they are conveniently done behind the scene....In my mind, the implementation of probability theory is a success if the user never has to write what the probability space is.\":   The <a href=\"https://math.stackexchange.com/questions/3760724/what-is-the-probability-space-of-typical-real-univariate-probability-distributio\">definition of the \"usual\" probability space of real continuous random variables</a>  is why I am here on Lean.   I don't think probability space is a throwaway concept to be shoved to the back of the closet.  Real continuous RVs can be supported by B(R), B([0,1]), B((0,1)) and other ways.  It's interesting to know that there is not a single canonical support and to know how to construct these different supports and to know why they are different. </p>\n<p>Also \"the correct and most useful definition of random variable is the usual one: measurable function from a probability space to a measurable space.\"  Earlier I gave an example where a competent practitioner defined it as a function from a measure space to a metric space.   It's interesting to know that there is not a canonical definition of random variable, at least in the realm of application.</p>",
        "id": 218988147,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607263395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20good.20foundational.20definition.20for.20random.20variable.3F/near/218988147\">said</a>:</p>\n<blockquote>\n<p>Also \"the correct and most useful definition of random variable is the usual one: measurable function from a probability space to a measurable space.\"  Earlier I gave an example where a competent practitioner defined it as a function from a measure space to a metric space.   It's interesting to know that there is not a canonical definition of random variable, at least in the realm of application.</p>\n</blockquote>\n<p>The definition you quoted is a particular case of the general definition (as metric spaces are a particular case of measurable space, with the Borel sigma-algebra), there is no conflict here. It's just like in early curriculum textbooks, you define continuous functions from reals to reals. Then you define continuous functions from metric spaces to metric spaces. You can not say that the first definition is wrong, because it is just a special instance of the second definition. And in more advanced books you will have continuous functions between topological spaces, which is again a generalization (and the final one). In mathlib, we go directly for the more general definition, of continuous functions between topological spaces.</p>",
        "id": 218989366,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607265294
    },
    {
        "content": "<p>@Sebastien Gouezel it's not that clear cut because I may be able to construct instances of <code>metric_space</code> which do not satisfy <code>measurable_space</code> and vice versa.</p>",
        "id": 218989502,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607265489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  : I totally agree on the fact that the measurable map can matter, but indeed I did not think about those continuous processes when writing (my usual work is entirely in discrete time). My point is that we are considering two possibilities for the information that we put inside a \"random_variable\" object: either a random variable is a measurable function (and in that case we don't define a new structure, we use <code>measurable</code>) with the probability measure separate from it, or it is a structure with a measurable function and a probability measure. The second one still contains all the information about the map.<br>\nThat second formulation may not be advisable because it adds notation for something similar to what we already have, but I just think that adding the measure information allows doing some things easier when the distribution is the main information we need (and that case should cover the whole of probability with discrete time processes?).</p>\n<p>But that is all idle speculation. I'll take the advice from Mario and Kevin and compare the two implementations in actual code... and whatever we end up choosing, I'll have some code written :)</p>",
        "id": 218990412,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1607266741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20good.20foundational.20definition.20for.20random.20variable.3F/near/218989502\">said</a>:</p>\n<blockquote>\n<p>@Sebastien Gouezel it's not that clear cut because I may be able to construct instances of <code>metric_space</code> which do not satisfy <code>measurable_space</code> and vice versa.</p>\n</blockquote>\n<p>No, any <code>metric_space</code> is canonically a measurable space, for the Borel sigma-algebra. It's not registered in mathlib as an instance by default, as one might want to do some more exotic things (completing sigma-algebras for a measure), but it's definitely what the textbook you mentioned means when it talks about measurable functions from a probability space to a metric space. You can register it as an instance with <code>local attribute [instance] borel</code> in mathlib.</p>",
        "id": 218995467,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607275155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20good.20foundational.20definition.20for.20random.20variable.3F/near/218990412\">said</a>:</p>\n<blockquote>\n<p>But that is all idle speculation. I'll take the advice from Mario and Kevin and compare the two implementations in actual code... and whatever we end up choosing, I'll have some code written :)</p>\n</blockquote>\n<p>That's absolutely the wisest path!</p>",
        "id": 218995484,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607275199
    },
    {
        "content": "<p>In the <a href=\"https://en.wikipedia.org/wiki/Metric_space\">Wikipedia sense</a>, (I'm not sure if that coincides with the Lean sense), the carrier set of a metric space can be any set.  For example, <code>ℝ</code>, so <code>(ℝ,d)</code> is a metric space with say <code>def d (x: ℝ) (y: ℝ) := (x*x-y*y)*(x*x-y*y)</code>.  However, <code>ℝ</code> <a href=\"https://math.stackexchange.com/questions/925371/how-is-every-subset-of-real-numbers-measurable-despite-the-existence-of-a-non-me\">contains subsets which are not measurable</a>.  So <code>(ℝ,d)</code> is a metric space which is not a measurable space.  </p>\n<p>At least, that's what I get from StackExchange and also <a href=\"https://math.stackexchange.com/questions/1402847/whats-the-relationship-between-a-measure-space-and-a-metric-space\">this comment in StackExchange</a>: \"There is no relationship between these two notions. – Crostul Aug 19 '15 at 15:46\", from a guy with 32,375 reputation (I don't know what that is in Zulip reputation points, but for Mathematics Stack Exchange, that's really a lot of points).</p>\n<p>Que t'en pense d'y a ca?  What are the Stack Exchange folks missing about this?</p>",
        "id": 218999894,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607282123
    },
    {
        "content": "<p>If you look at the answer on that stackechange post instead of that comment the same Borel measure  Sebastien mentioned is described.<br>\nBeing a measure space doesn't mean that all subsets are measurable, but that there is a set of subsets which form a sigma algebra that are, the Borel sigma algebra is such a choice that can be used for any metric space.</p>",
        "id": 219000107,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607282426
    },
    {
        "content": "<p>Even saying that the reals \"contains subsets which are not measurable\" implies that you already know how to make it a measurable space!</p>",
        "id": 219000352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607282872
    },
    {
        "content": "<p>Not to mention have some form of weak axiom of choice...</p>",
        "id": 219004360,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607284327
    },
    {
        "content": "<p>You can make a sigma algebra B(R) from R, so (R, B(R)) is a measurable space.<br>\nYou can define a distance metric <code>d</code> between any two points in R, so (R, d) is a metric space.<br>\nSo we can say that R is a carrier set for a measurable space and a metric space.</p>\n<p>So R is not a good example.</p>\n<p>The challenge is to find a <a href=\"https://math.stackexchange.com/questions/1010728/example-of-algebra-that-is-not-a-sigma-algebra\">set X which has no sigma algebra</a>.  How about </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"bp\">⊂</span> <span class=\"n\">ℤ</span> <span class=\"o\">:</span> <span class=\"n\">is_finite</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">is_finite</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">\\</span> <span class=\"n\">A</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 219021046,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607289915
    },
    {
        "content": "<p>there aren't any such sets X</p>",
        "id": 219025350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607291733
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/questions/2737395/an-example-of-an-algebra-but-not-a-sigma-algebra\">Jacky Chong</a> gives this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Let</span> <span class=\"bp\">𝑋=</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"n\">and</span> <span class=\"n\">consider</span> <span class=\"n\">A</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"n\">finite</span> <span class=\"n\">union</span> <span class=\"n\">of</span> <span class=\"o\">[</span><span class=\"bp\">𝑎</span><span class=\"o\">,</span><span class=\"bp\">𝑏</span><span class=\"o\">)}</span><span class=\"bp\">.</span>\n<span class=\"n\">It's</span> <span class=\"n\">clear</span> <span class=\"n\">that</span> <span class=\"o\">[</span><span class=\"bp\">𝑎</span><span class=\"o\">,</span><span class=\"bp\">𝑏</span><span class=\"o\">)</span><span class=\"bp\">∩</span><span class=\"o\">[</span><span class=\"bp\">𝑐</span><span class=\"o\">,</span><span class=\"bp\">𝑑</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">[</span><span class=\"n\">max</span><span class=\"o\">{</span><span class=\"bp\">𝑎</span><span class=\"o\">,</span><span class=\"bp\">𝑐</span><span class=\"o\">},</span><span class=\"n\">min</span><span class=\"o\">{</span><span class=\"bp\">𝑏</span><span class=\"o\">,</span><span class=\"bp\">𝑑</span><span class=\"o\">})</span> <span class=\"n\">and</span> <span class=\"o\">[</span><span class=\"bp\">𝑎</span><span class=\"o\">,</span><span class=\"bp\">𝑏</span><span class=\"o\">)</span><span class=\"bp\">𝐶=</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">𝑎</span><span class=\"o\">)</span><span class=\"bp\">∪</span><span class=\"o\">[</span><span class=\"bp\">𝑏</span><span class=\"o\">,</span><span class=\"bp\">∞</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">So</span> <span class=\"n\">A</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">algebra</span> <span class=\"n\">but</span> <span class=\"n\">clearly</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"bp\">𝜎-</span><span class=\"n\">algebra</span> <span class=\"n\">since</span> <span class=\"n\">it</span> <span class=\"n\">doesn't</span> <span class=\"n\">contain</span> <span class=\"n\">any</span> <span class=\"kn\">open</span> <span class=\"n\">interval.</span>\n<span class=\"n\">Take</span> <span class=\"n\">the</span> <span class=\"n\">obvious</span> <span class=\"n\">measure</span> <span class=\"bp\">𝑚</span><span class=\"o\">([</span><span class=\"bp\">𝑎</span><span class=\"o\">,</span><span class=\"bp\">𝑏</span><span class=\"o\">))</span><span class=\"bp\">=𝑏−𝑎.</span>\n</code></pre></div>\n<p>Here is another presentation <a href=\"https://math.stackexchange.com/questions/2927919/an-algebra-that-is-not-a-sigma-algebra\">in another Stack Exchange article on the same topic</a> of the example above.  Apparently it is in somebody's textbook.  Here is the recap:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"kd\">class</span> <span class=\"bp\">𝒜=</span><span class=\"o\">{</span><span class=\"bp\">𝐹⊂</span><span class=\"n\">ℕ</span><span class=\"o\">:</span><span class=\"bp\">𝐹</span> <span class=\"n\">is</span> <span class=\"n\">finite</span> <span class=\"n\">or</span> <span class=\"bp\">𝐹𝑐</span> <span class=\"n\">is</span> <span class=\"n\">finite</span><span class=\"o\">}</span><span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">algebra</span> <span class=\"n\">of</span> <span class=\"n\">subsets</span> <span class=\"n\">of</span> <span class=\"n\">ℕ</span> <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"bp\">𝜎-</span><span class=\"n\">algebra.</span> <span class=\"n\">Then</span> <span class=\"k\">let</span> <span class=\"bp\">𝐴</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">…</span><span class=\"o\">,</span><span class=\"bp\">𝐴𝑛</span> <span class=\"n\">sets</span> <span class=\"k\">in</span> <span class=\"bp\">𝒜</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"n\">or</span> <span class=\"n\">every</span> <span class=\"bp\">𝐴</span> <span class=\"n\">is</span> <span class=\"n\">finite</span> <span class=\"n\">or</span> <span class=\"n\">at</span> <span class=\"n\">last</span> <span class=\"n\">one</span> <span class=\"bp\">𝐴𝑖</span> <span class=\"n\">is</span> <span class=\"n\">infinite</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">therefore</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"bp\">^</span><span class=\"n\">c</span> <span class=\"n\">is</span> <span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"n\">so</span> <span class=\"n\">or</span> <span class=\"n\">the</span> <span class=\"n\">union</span> <span class=\"n\">is</span> <span class=\"n\">finite</span> <span class=\"n\">or</span> <span class=\"n\">the</span> <span class=\"n\">complement</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">union</span> <span class=\"n\">has</span> <span class=\"n\">finite</span> <span class=\"n\">complement.</span>\n\n<span class=\"n\">Clearly</span> <span class=\"bp\">𝒜</span> <span class=\"n\">is</span> <span class=\"n\">closed</span> <span class=\"n\">to</span> <span class=\"n\">complement.</span>\n\n<span class=\"n\">The</span> <span class=\"n\">union</span> <span class=\"n\">of</span> <span class=\"n\">even</span> <span class=\"n\">numbers</span> <span class=\"k\">do</span> <span class=\"n\">not</span> <span class=\"n\">lies</span> <span class=\"k\">in</span> <span class=\"bp\">𝒜</span><span class=\"o\">,</span> <span class=\"n\">so</span> <span class=\"bp\">𝒜</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"bp\">𝜎-á</span><span class=\"n\">lgebra.</span>\n</code></pre></div>\n<p>This would be a pretty nice example to use Lean to prove that say 𝒜, as constructed, is empty, or 𝒜, as constructed, is not empty and is in fact a sigma algebra.</p>",
        "id": 219029629,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607297251
    },
    {
        "content": "<p>Are you confusing \"a type X for which no sigma algebra can be constructed\" with \"a set of sets A over X which is not a sigma algebra for X\"?</p>",
        "id": 219053864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607331098
    },
    {
        "content": "<p>OK, you can <a href=\"https://en.wikipedia.org/wiki/%CE%A3-algebra#%CF%83-algebra_generated_by_an_arbitrary_family\">generate a sigma algebra for any set X</a>.  So if (X,d) was a metric space then you can make (X,sigma(X)).  So there is no reason not to make the codomain of a random variable be a measurable space.</p>\n<p>For Mark Dean's purposes in writing his course notes, he sees utility in specializing his RVs to codomain metric space.   That is a specialized choice.</p>\n<p>RV is any observation of an experiment which is of interest to the experimenter.  So the codomain of RV is completely in the eye of the beholder, there is no constraint.  That supports making the codomain be<code>Type</code> in <code>mathlib</code>, if you were to formalize <code>random_variable</code>.</p>",
        "id": 219081845,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607349250
    }
]