[
    {
        "content": "<p>Is there a tactic which does this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I thought <code>ac_refl</code> would do it but it can't handle the subtraction as far as I can see. Sure I know that one can prove it by looking up all the necessary lemmas needed to remove the subtractions, but a beginner can't do this without a lot of help.</p>",
        "id": 200777259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592070486
    },
    {
        "content": "<p>Doesn't <code>abel</code> do this?</p>",
        "id": 200777288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592070559
    },
    {
        "content": "<p>Yes! thanks! I remember the time people were talking about writing this but I didn't know it was written.</p>",
        "id": 200777337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592070614
    },
    {
        "content": "<p>Afaik, we still don't have a <code>noncomm_abel</code>. It should be very easy; just an even smaller version of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#noncomm_ring\">tactic#noncomm_ring</a></p>",
        "id": 200790358,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592090723
    },
    {
        "content": "<p>(Obviously it would not be called <code>noncomm_abel</code>...)</p>",
        "id": 200790362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592090737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  are you talking about the tactic patrick wrote in <a href=\"https://github.com/leanprover-community/mathlib/issues/3062\">#3062</a>? it's just waiting on review</p>",
        "id": 200791838,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592093297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks a lot!</p>\n<p>I did try <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> many times (since in <a href=\"#narrow/stream/113489-new-members/topic/synthesized.20not.20defeq.20inferred/near/200774586\">my case</a>, it's also a ring) because I assumed that <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> is more powerful than <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#abel\">tactic#abel</a>, but <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> could not solve this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200793838,
        "sender_full_name": "Utensil Song",
        "timestamp": 1592097120
    },
    {
        "content": "<p>Oh I see, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> is for commutative (semi)rings</p>",
        "id": 200794447,
        "sender_full_name": "Utensil Song",
        "timestamp": 1592098225
    },
    {
        "content": "<p>that's why we have <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#noncomm_ring\">tactic#noncomm_ring</a>, which is much more low-tech than <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a></p>",
        "id": 200794496,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592098335
    },
    {
        "content": "<p>this works for me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">noncomm_ring</span>\n</code></pre></div>",
        "id": 200794505,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592098382
    },
    {
        "content": "<p>Oh, tatics are named in an opposite way of the type classes, hence the confusion.</p>",
        "id": 200794571,
        "sender_full_name": "Utensil Song",
        "timestamp": 1592098527
    },
    {
        "content": "<p>yeah, <code>ring</code> came first</p>",
        "id": 200794622,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592098616
    },
    {
        "content": "<p>it's a pretty nontrivial algorithm, there's a paper about the implementation of <code>ring_exp</code></p>",
        "id": 200794627,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592098647
    },
    {
        "content": "<p>but <code>noncomm_ring</code> is a little bit more than a clever simp set</p>",
        "id": 200794629,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592098660
    },
    {
        "content": "<p>yeah I noticed that paper</p>",
        "id": 200794670,
        "sender_full_name": "Utensil Song",
        "timestamp": 1592098714
    },
    {
        "content": "<p>yeah <code>noncomm_ring</code> uses a clever simp set to process the expression into something that <code>abel</code> can handle</p>",
        "id": 200794672,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592098736
    },
    {
        "content": "<p>(and then calls <code>abel</code> on it)</p>",
        "id": 200794675,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592098744
    },
    {
        "content": "<p>We should possibly add a \"front-end\" <code>algebra</code> tactic, that inspects the goal and cleverly dispatches to one of <code>ring</code>, <code>noncomm_ring</code>, <code>group</code>, <code>abel</code>, or possibly even <code>linarith</code> and <code>norm_num</code>.</p>",
        "id": 200798948,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592107508
    },
    {
        "content": "<p>Possibly it should print a \"Try this:\" string if we'd prefer people to replace it with a more explicit tactic call.</p>",
        "id": 200798949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592107509
    }
]