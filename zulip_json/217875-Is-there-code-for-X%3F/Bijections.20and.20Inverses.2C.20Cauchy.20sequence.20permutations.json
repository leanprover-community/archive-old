[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.comp\">docs#filter.tendsto.comp</a></p>",
        "id": 271659623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644628240
    },
    {
        "content": "<p>So you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">hu.comp</span> <span class=\"n\">hf.tendsto_at_top</span>\n</code></pre></div>",
        "id": 271659746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644628354
    },
    {
        "content": "<p>I don't think that we should add this as a separate lemma.</p>",
        "id": 271659778,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644628403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385848\">@Mark Gerads</span> what's going on here is that the lemma you're proving is just the sort of thing which we see in undergraduate analysis textbooks, but in fact it's an easy consequence of a far more general lemma about filters on uniform spaces and mathlib is focused on proving things in this kind of large generality. Mathlib is not designed for pedagogy, it is like Bourbaki, striving for maximal generality rather than concrete examples such as your application</p>",
        "id": 271681227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644660283
    },
    {
        "content": "<p>The very fact that you want to state the lemma for both real and complex sequences is exactly the reason we state it for neither. Next week someone will want it for sequences of p-adic numbers, the week after someone will want it for ‚Ñù^3 etc</p>",
        "id": 271681316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644660470
    },
    {
        "content": "<p>Oh, I definitely support having every proof as general as possible. I am glad that [a much more general proof than what I had in mind] was submitted to mathlib.</p>",
        "id": 271709261,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1644699331
    }
]