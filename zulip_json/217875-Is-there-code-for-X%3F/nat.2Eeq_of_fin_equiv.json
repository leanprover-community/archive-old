[
    {
        "content": "<p>Do we have something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 214754615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603828323
    },
    {
        "content": "<p>It seems that we don't have it. The proof can be extracted from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/invariant_basis_number_field/src\">src#invariant_basis_number_field</a></p>",
        "id": 214755406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603828681
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214755497,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603828707
    },
    {
        "content": "<p>or just <code>by simpa using card_congr h</code></p>",
        "id": 214755512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603828715
    },
    {
        "content": "<p>Okay, I'll add it as part of a PR for the category of finite sets. I need that lemma to show that the \"Skeleton\" is actually skeletal :)</p>",
        "id": 214756676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603829179
    },
    {
        "content": "<p>iff is better!</p>",
        "id": 214756835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603829251
    },
    {
        "content": "<p>But how?! (the equivalence is not a prop)</p>",
        "id": 214756869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603829273
    },
    {
        "content": "<p>hm, good point</p>",
        "id": 214756994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603829317
    },
    {
        "content": "<p>I also wanted to make it an iff. I guess using nonempty?</p>",
        "id": 214757059,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603829344
    },
    {
        "content": "<p>yeah, at that point it's basically the same as the lemma in cardinal</p>",
        "id": 214757117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603829372
    },
    {
        "content": "<p>Which lemma?</p>",
        "id": 214757190,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603829404
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.nat_cast_inj/src\">src#cardinal.nat_cast_inj</a> is the nearest</p>",
        "id": 214757548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603829547
    },
    {
        "content": "<p>Oh, I see.</p>",
        "id": 214757583,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603829571
    },
    {
        "content": "<p>Okay, so you think the following is better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.fin_equiv_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">fintype.card_congr</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">equiv.cast</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span> <span class=\"o\">⟩</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 214758361,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603829939
    },
    {
        "content": "<p>The non-prop form of iff is <code>(fin m ≃ fin n) ≃ (m = n)</code>, right?</p>",
        "id": 214901311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603921301
    },
    {
        "content": "<p>No, since <code>fin n ≃ fin n</code> has cardinality <code>n!</code> and <code>n = n</code> has cardinality <code>1</code>.</p>",
        "id": 214901399,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603921349
    },
    {
        "content": "<p>Oops</p>",
        "id": 214901480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603921426
    },
    {
        "content": "<p>The on-prop form is <code>trunc (fin m ≃ fin n) ≃ (m = n)</code></p>",
        "id": 214906312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603924695
    }
]