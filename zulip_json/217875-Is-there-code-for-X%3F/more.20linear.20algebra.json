[
    {
        "content": "<p>What's the easiest way to prove a bunch of vectors are linearly independent? Say I have an <code>n</code>-dimensional vector space <code>E</code> with a bilinear form <code>Q</code>, and a collection of <code>n</code> vectors <code>vs</code> so that the gram matrix <code>G=vs Q vs</code> of <code>Q</code>-inner products is invertible. (As a human, this means the matrix of <code>vs</code> is invertible too, and hence linearly independent, in fact a basis. Actually, showing that they span will be my next annoying question...) Any help would be much appreciated! Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"n\">vs</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292586534,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660054517
    },
    {
        "content": "<p>I suspect <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_linear_equiv'\">docs#matrix.to_linear_equiv'</a> will be useful here</p>",
        "id": 292587812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660054915
    },
    {
        "content": "<p>Here's a proof; the simple lemma <code>matrix.range_to_lin'</code> is apparently missing from mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.rank</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix.range_to_lin'</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.to_lin'.range</span> <span class=\"bp\">=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">G.transpose</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.range_eq_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">linear_map.supr_range_std_basis</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">submodule.map_supr</span><span class=\"o\">,</span> <span class=\"n\">linear_map.range_eq_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ideal.span_one</span><span class=\"o\">,</span> <span class=\"n\">ideal.span</span><span class=\"o\">,</span>\n    <span class=\"n\">submodule.map_span</span><span class=\"o\">,</span> <span class=\"n\">set.image_image</span><span class=\"o\">],</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.has_one</span><span class=\"o\">,</span> <span class=\"n\">has_one.one</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">set.image_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">supr_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">submodule.span_mono</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">G.mul_vec_std_basis_apply</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">submodule.span_le</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">submodule.mem_supr_of_mem</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">submodule.subset_span</span> <span class=\"o\">(</span><span class=\"n\">G.mul_vec_std_basis_apply</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"n\">vs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_independent.of_comp</span> <span class=\"n\">Q.flip</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_independent_iff_card_eq_finrank_span</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">G.rank_of_is_unit</span> <span class=\"o\">(</span><span class=\"n\">is_unit_of_invertible</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">set.finrank</span> <span class=\"n\">matrix.rank</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">G.range_to_lin'</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">linear_map.applyₗ</span> <span class=\"bp\">$</span> <span class=\"n\">vs</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">G.transpose</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">Q.flip</span> <span class=\"bp\">∘</span> <span class=\"n\">vs</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.range_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">submodule.map_span</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finite_dimensional.finrank_map_le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">finrank_span_le_card</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.to_finset_range</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset.card_image_le</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set.fintype_range</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292630550,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660068684
    },
    {
        "content": "<p>To show it spans, it should be easy from linear independence + <a href=\"https://leanprover-community.github.io/mathlib_docs/find/span_eq_top_of_linear_independent_of_card_eq_finrank\">docs#span_eq_top_of_linear_independent_of_card_eq_finrank</a>.</p>",
        "id": 292631066,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660068878
    },
    {
        "content": "<p>That's fantastic, thanks!</p>",
        "id": 292766741,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660142060
    }
]