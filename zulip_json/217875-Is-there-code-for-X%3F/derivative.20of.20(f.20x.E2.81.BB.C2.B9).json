[
    {
        "content": "<p>Do we have quick/direct proofs of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">deriv.comp_inv</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdf</span><span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)):</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv.comp</span> <span class=\"n\">_</span> <span class=\"n\">hdf</span><span class=\"o\">],</span>\n    <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- simp [one_div, differentiable_at_inv hx],</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have often difficulties to switch back between <code>inv</code>, <code>has_div.div 1</code> and their composed forms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f \\circ (1/x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, etc.</p>",
        "id": 249835404,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629285979
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_deriv_at.comp_inv</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hff'</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f'</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hff'.comp</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_inv</span> <span class=\"bp\">$</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">deriv.comp_inv</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdf</span><span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">):</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hdf.has_deriv_at.comp_inv</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n</code></pre></div>",
        "id": 249843323,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629290868
    },
    {
        "content": "<p>In my experience it is often easier to use <code>has_deriv_at</code> and then deduce the <code>deriv</code> versions because you avoid boring rewriting to get syntactic equality</p>",
        "id": 249844021,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629291233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/derivative.20of.20.28f.20x.E2.81.BB.C2.B9.29/near/249844021\">said</a>:</p>\n<blockquote>\n<p>In my experience it is often easier to use <code>has_deriv_at</code> and then deduce the <code>deriv</code> versions because you avoid boring rewriting to get syntactic equality</p>\n</blockquote>\n<p>That's the advice I needed! :)</p>",
        "id": 249844780,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629291577
    }
]