[
    {
        "content": "<p><code>example {X Y : Type} (a : X → ℝ) (b : Y → ℝ) :\n  ((⨅ x, a x) + (⨅ y, b y) = ⨅ (x : X) (y : Y), a x + b y) :=\n  begin library_search end</code></p>\n<p>do we have a lemma stating this ?</p>",
        "id": 270210597,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1643722817
    },
    {
        "content": "<p>I asked the same question on the discord, and it seems it's false if X or Y are empty. So the lemma would have to include X or Y non empty in hypotheses, and maybe it's also wrong if the inf is -infinity (i don't know how it behaves in Lean in this case)</p>",
        "id": 270223647,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1643727381
    },
    {
        "content": "<p>Looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/data/pi.html#pi.add_def\">https://leanprover-community.github.io/mathlib_docs/data/pi.html#pi.add_def</a></p>",
        "id": 270231208,
        "sender_full_name": "Chris B",
        "timestamp": 1643729904
    },
    {
        "content": "<p>The <code>has_add (f i)</code> assumption would function as the nonempty assumption I guess.</p>",
        "id": 270231664,
        "sender_full_name": "Chris B",
        "timestamp": 1643730036
    },
    {
        "content": "<p>Well, I guess not now that I think about it.</p>",
        "id": 270231815,
        "sender_full_name": "Chris B",
        "timestamp": 1643730108
    },
    {
        "content": "<p>This is about the infimum operator <code>⨅</code>, not the dependent function <code>Π</code> :)</p>",
        "id": 270231828,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643730113
    },
    {
        "content": "<p>I've been had.</p>",
        "id": 270232008,
        "sender_full_name": "Chris B",
        "timestamp": 1643730172
    },
    {
        "content": "<p><code>Inf</code> of a set that is empty or not bounded below gives (if I understand the code) <code>0</code> so the equality is also wrong if one of the infs on the left is -infinity and the other is not.</p>",
        "id": 270233010,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643730542
    },
    {
        "content": "<p>If you add the required hypotheses to the lemma does <code>library_search</code> find anything?</p>",
        "id": 270233438,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643730664
    },
    {
        "content": "<p>still nothing found for<br>\n<code>example {X Y : Type} (a : X → ℝ≥0) (b : Y → ℝ≥0) (x : X) (y : Y) :\n  ((⨅ x, a x) + (⨅ y, b y) = ⨅ (x : X) (y : Y), a x + b y) :=\n  begin library_search end</code></p>",
        "id": 270236368,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1643731588
    },
    {
        "content": "<p>That's false when <code>Y</code> is empty and <code>X</code> is not, isn't it? In that case, it's <code>infi a + 0 = 0</code>, which is not true for all <code>a</code></p>",
        "id": 270240207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643732906
    },
    {
        "content": "<p>I added (x : X) and (y : Y) in hypotheses so that X and Y are non empty</p>",
        "id": 270241256,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1643733276
    },
    {
        "content": "<p>I don't think we have it, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.infi_add_infi\">docs#ennreal.infi_add_infi</a> is related. Especially the proof is interesting, because your statement is proven as part of it (for <code>ennreal</code>).</p>",
        "id": 270242282,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643733619
    },
    {
        "content": "<p>You can probably mimic that proof to get the version for <code>real</code> using the dual versions of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/csupr_add\">docs#csupr_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_csupr\">docs#add_csupr</a> (which seem to be missing). <br>\nYou are right that you have to think about boundedness: the infimum of a set of reals that is not bounded below is defined to be 0.</p>",
        "id": 270242822,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643733838
    }
]