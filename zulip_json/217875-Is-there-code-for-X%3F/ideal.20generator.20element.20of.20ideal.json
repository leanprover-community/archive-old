[
    {
        "content": "<p><code>library_search</code> fails on the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ideal.mem_of_mem_generators</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">ideal.span</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(and <code>library_search!</code> times out, as does <code>suggest</code>).<br>\nThis looks like an obvious API lemma that should be in mathlib somewhere...</p>",
        "id": 278056638,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649265343
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.subset_span\">docs#ideal.subset_span</a></p>",
        "id": 278056753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649265400
    },
    {
        "content": "<p>But why does <code>library_search</code> not find it?</p>",
        "id": 278056877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649265470
    },
    {
        "content": "<p>I assume it's because it does not unfold <code>⊆</code> (whose meaning currently depends on the type it is applied to).</p>",
        "id": 278056968,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649265502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/ideal.20generator.20element.20of.20ideal/near/278056753\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.subset_span\">docs#ideal.subset_span</a></p>\n</blockquote>\n<p>Thanks!<br>\nI'm wondering why this lemma has only implicit arguments; I seemingly cannot use it without <code>@</code>.</p>",
        "id": 278057226,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649265658
    },
    {
        "content": "<p><code>ideal.subset_span ha</code> should work</p>",
        "id": 278057302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649265699
    },
    {
        "content": "<p>Or <code>apply ideal.subset_span</code></p>",
        "id": 278057413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649265756
    },
    {
        "content": "<p>If you have <code>h : s ⊆ t</code> and <code>hx : x ∈ s</code> then <code>h hx : x ∈ t</code>.</p>",
        "id": 278057425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649265763
    },
    {
        "content": "<p>I still find it hard to know when something that does not look like it is really secretly an implication (or similar, e.g., <code>is_coprime</code>).</p>",
        "id": 278057484,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649265792
    },
    {
        "content": "<p>True. It is arguably hacky design. You need to know the underlying definition.</p>",
        "id": 278057545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649265826
    },
    {
        "content": "<p>But it also leads to highly-compressable code</p>",
        "id": 278057612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649265846
    },
    {
        "content": "<p>If you think of it in the usual mathy way of saying \"now apply the fact that the set <code>s</code> is a subset of the ideal generated by <code>s</code>\", it feels very natural to say <code>apply ideal.subset_span</code> which will reduce your goal to <code>ha</code> (as Johan was saying above).</p>",
        "id": 278057700,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649265891
    },
    {
        "content": "<p>The usual mathlib style is to golf things to make them completely unreadable, but IMO there is some value in leaving some steps in the proof that mimic what one might write down on paperr.</p>",
        "id": 278057953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649266012
    },
    {
        "content": "<p>(Well, for trivial things like this, you can make the proof as incomprehensible as you want)</p>",
        "id": 278058400,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649266210
    },
    {
        "content": "<p>My goal right now is to find a simpler proof of the second lemma below.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ideal.mem_of_linear_comb_of_two</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"n\">ideal.add_mem</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">ideal.mul_mem_left</span> <span class=\"n\">I</span> <span class=\"n\">x</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ideal.mul_mem_left</span> <span class=\"n\">I</span> <span class=\"n\">y</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ideal.top_of_coprime</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcop</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"c1\">-- simplify notation</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hcop</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rel</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">rel</span><span class=\"o\">,</span>\n       <span class=\"n\">exact</span> <span class=\"n\">ideal.mem_of_linear_comb_of_two</span> <span class=\"n\">I</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n               <span class=\"o\">(</span><span class=\"n\">ideal.subset_span</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}))</span>\n               <span class=\"o\">(</span><span class=\"n\">ideal.subset_span</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">})),</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ideal.eq_top_iff_one</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Or is this good  enough?</p>",
        "id": 278058448,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649266234
    },
    {
        "content": "<p>How is <code>is_coprime</code> defined?</p>",
        "id": 278058506,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649266265
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_coprime\">docs#is_coprime</a></p>",
        "id": 278058516,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649266270
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 278058560,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649266286
    },
    {
        "content": "<p>I'm not sure if the first lemma is really needed.</p>",
        "id": 278058710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649266326
    },
    {
        "content": "<p>One could insert its proof, but that would probably make the second proof longer.</p>",
        "id": 278058902,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649266394
    },
    {
        "content": "<p>But I'll try anyway.</p>",
        "id": 278058942,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649266411
    },
    {
        "content": "<p>Here is the proof I came up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ideal.top_of_coprime</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcop</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ideal.eq_top_iff_one</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hcop</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ideal.add_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ideal.mul_mem_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ideal.subset_span</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278059267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649266550
    },
    {
        "content": "<p>OK; re-ordering some of the steps makes it a little bit shorter -- thanks!</p>",
        "id": 278059531,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649266671
    },
    {
        "content": "<p>Perhaps this is more useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ideal.top_of_coprime'</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcop</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ideal.eq_top_iff_one</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hcop</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ideal.add_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ideal.mul_mem_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278059909,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649266836
    },
    {
        "content": "<p>There may be a linear_comp lemma as well, those are nice</p>",
        "id": 278061084,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649267404
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.mem_span_pair\">docs#ideal.mem_span_pair</a> could probably be used to simplify this...</p>",
        "id": 278078633,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649275480
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ideal.top_of_coprime</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcop</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ideal.eq_top_iff_one</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hcop</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ideal.mem_span_pair</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278079857,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649276039
    }
]