[
    {
        "content": "<p>For example, the uncountable sum of real numbers diverges. I have a proof, but it is long and might duplicate lemmas that already exist, since I'm still getting familiar with this part of mathlib:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.infinite_sum</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sequential_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A non isolated point `x` in a sequential space has a sequence converging to it -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_seq_of_not_isolated</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">filter.ne_bot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â†</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">‚àà</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Doesn't work for some reason? -/</span>\n  <span class=\"c1\">--simp_rw set.mem_compl_singleton_iff,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.mem_compl_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">mem_closure_iff_seq_limit</span><span class=\"o\">,</span> <span class=\"n\">closure_compl_singleton</span><span class=\"o\">],</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- If a function tends to `0`, then it is eventually less than every `b &gt; 0` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_abs_of_tendsto_zero</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">abs_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">filter.eventually_and</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">eventually_gt_of_tendsto_gt</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">neg_lt_zero</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eventually_lt_of_tendsto_lt</span> <span class=\"n\">hb</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Mild generalization of `finite_of_summable_const` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_of_summable_geq_const</span> <span class=\"o\">[</span><span class=\"n\">archimedean</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_geq</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">s.card</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚àë'</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.sum_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f_geq</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">sum_le_has_sum</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb.le.trans</span> <span class=\"o\">(</span><span class=\"n\">f_geq</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">hf.has_sum</span><span class=\"o\">),</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">archimedean.arch</span> <span class=\"o\">(</span><span class=\"bp\">‚àë'</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">s.card</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nsmul_le_nsmul_iff</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">((</span><span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nonempty.intro</span> <span class=\"o\">(</span><span class=\"n\">fintype_of_finset_card_le</span> <span class=\"n\">n</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">archimedean</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">uniform_add_group</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hf</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_of_summable_geq_const'</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.finite</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.finite_def</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finite_of_summable_geq_const</span> <span class=\"o\">(</span><span class=\"n\">summable.subtype</span> <span class=\"n\">hf</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"n\">hb</span> <span class=\"n\">subtype.property</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">countable_of_summable</span> <span class=\"o\">[</span><span class=\"n\">sequential_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">filter.ne_bot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â†</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">))]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">function.support</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">countable</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">seq</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">nonzero</span><span class=\"o\">,</span> <span class=\"n\">limit</span><span class=\"o\">‚ü©‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">exists_seq_of_not_isolated</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">|</span> <span class=\"bp\">|</span><span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">function.support</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Union</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">function.mem_support</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">],</span>\n      <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">fz</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fz</span><span class=\"o\">,</span> <span class=\"n\">abs_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hf‚ÇÇ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lt_abs_of_tendsto_zero</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs_pos.mpr</span> <span class=\"n\">hf‚ÇÇ</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">filter.eventually_at_top</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">hN</span> <span class=\"n\">N</span> <span class=\"n\">le_rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Union</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hN</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.countable_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.finite.countable</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">|</span> <span class=\"bp\">|</span><span class=\"n\">seq</span> <span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">set.finite.subset</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finite_of_summable_geq_const'</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">summable_abs_iff</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abs_pos</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nonzero</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<p>Some of these lemmas seem like they should be in the library already, but I couldn't find them using <code>library_search</code>.</p>\n<p>Also, my feeling is that some of the typeclass constraints are unnecessary. I tried to essentially port my proof from the one in real numbers, but this might not be the most efficient way to do it in general.</p>",
        "id": 272212768,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1645071781
    },
    {
        "content": "<p>Here is an idea of a simpler proof. The main lemma is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.tendsto.countable_set_of_ne</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t1_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">is_countably_generated</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">countable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 272219312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645079624
    },
    {
        "content": "<p>Your statement follows from this lemma and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable.tendsto_cofinite_zero\">docs#summable.tendsto_cofinite_zero</a></p>",
        "id": 272219371,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645079659
    },
    {
        "content": "<p>To prove this lemma, choose a specific countable basis of nhds of <code>b</code> (e.g., using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.exists_antitone_basis\">docs#filter.exists_antitone_basis</a>). The preimage of each neighborhood is cofinite, hence the complement of the preimage of their intersection is countable. Due to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bInter_basis_nhds\">docs#bInter_basis_nhds</a>, this intersection is {b} and you get the desired statement.</p>",
        "id": 272219693,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645080074
    }
]