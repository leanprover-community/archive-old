[
    {
        "content": "<p>Is there a reason <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exists_rep\">docs#quotient.exists_rep</a> takes <code>[s : setoid A]</code> and not <code>{s : setoid A}</code>? I have a <code>quotient</code> constructed from a non-canonical setoid, so I don't have a global instance available.</p>",
        "id": 219110880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607362370
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exists_rep'\">docs#quotient.exists_rep'</a> ?</p>",
        "id": 219110924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607362387
    },
    {
        "content": "<p>no :(</p>\n<p>Then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.exists_rep\">docs#quot.exists_rep</a></p>",
        "id": 219110965,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607362399
    },
    {
        "content": "<p>I wonder what breaks if those arguments all become implicit...</p>",
        "id": 219111030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607362428
    },
    {
        "content": "<p>I don't think anything breaks. <code>quotient.mk'</code> is defeq to <code>quot.mk _</code></p>",
        "id": 219111149,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607362461
    },
    {
        "content": "<p>Oh, the problem is this code is all in core</p>",
        "id": 219111277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607362522
    },
    {
        "content": "<p>So changing it to take <code>{}</code> arguments is harder to test</p>",
        "id": 219111306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607362535
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.lift_on'/src\">src#quotient.lift_on'</a></p>",
        "id": 219111392,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607362563
    },
    {
        "content": "<p>That's from mathlib, and it looks like a few other <code>quotient.foo'</code> things are missing as well.</p>",
        "id": 219111488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607362609
    },
    {
        "content": "<p>Ugh, I guess <code>exists_rep'</code> is difficult because the <code>⟦a⟧</code> notation used in its statement isn't available without the typeclass instance.</p>",
        "id": 219111885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607362799
    },
    {
        "content": "<p>It could use <code>quotient.mk'</code></p>",
        "id": 219112012,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607362852
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotient.exists_rep'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">quotient.mk'</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">quot.exists_rep</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 219112293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607362954
    },
    {
        "content": "<p>Oh, which infers <code>s</code> from the rhs</p>",
        "id": 219114701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607364044
    },
    {
        "content": "<p>It infers <code>S</code> from the type of <code>x</code></p>",
        "id": 219122484,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607367602
    },
    {
        "content": "<p>Right, I mean the inferred argument to <code>mk'</code></p>",
        "id": 219134856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607373377
    },
    {
        "content": "<p>Thanks for the tip to use the <code>quot</code> versions anyway, that tidied up my proof nicely.</p>",
        "id": 219145006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607378682
    },
    {
        "content": "<p>IMO the main point where <code>quotient</code> is useful over <code>quot</code> is if you have to use <code>quotient.exact</code>. <code>quot.exact</code> spits out something with <code>eqv_gen</code> which is annoying if you already have an equivalence relation</p>",
        "id": 219146199,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607379208
    }
]