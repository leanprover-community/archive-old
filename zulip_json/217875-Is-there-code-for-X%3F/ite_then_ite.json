[
    {
        "content": "<p>Do we have lemmas like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ite_then_dite</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ite_else_dite</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>\n<p>in the library somewhere? I guess there are further variants change <code>ite</code> and <code>dite</code>.</p>",
        "id": 282346128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652524909
    },
    {
        "content": "<p>I had those lemmas on a branch then I noticed those were just applications of <code>ite_apply</code> and <code>apply_ite</code></p>",
        "id": 282346187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652524997
    },
    {
        "content": "<p>If you really want them as standalone lemmas, I can PR them.</p>",
        "id": 282346247,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652525070
    },
    {
        "content": "<p>I'd like to rewrite by them, so yes I think I want them not just as <code>ite_apply</code>.</p>",
        "id": 282346989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652526223
    },
    {
        "content": "<p>That would be lovely if you wanted to PR them. :-)</p>",
        "id": 282346990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652526231
    },
    {
        "content": "<p>Ping me and I'll hit merge!</p>",
        "id": 282346995,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652526238
    },
    {
        "content": "<p>Will do!</p>",
        "id": 282347042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652526274
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/if_assoc\">docs#if_assoc</a> similar?</p>",
        "id": 282347480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652526899
    },
    {
        "content": "<p>Hmm, I was sure that existed</p>",
        "id": 282347505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652526927
    },
    {
        "content": "<p>No, it doesn't because the branches don't really work out.</p>",
        "id": 282347557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652526970
    },
    {
        "content": "<p>I'm a bit mad at myself because I deleted the branch both on my local git and on Github <span aria-label=\"angry cat\" class=\"emoji emoji-1f63e\" role=\"img\" title=\"angry cat\">:angry_cat:</span></p>",
        "id": 282349290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652529550
    },
    {
        "content": "<p><code>git reflog</code>? And then <code>git cherry-pick</code> it onto a new branch if you find the missing commit</p>",
        "id": 282349508,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1652529795
    },
    {
        "content": "<p>Even if it was a month ago?</p>",
        "id": 282349666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652530054
    },
    {
        "content": "<p>If it hasn't done a GC, then it should still be there</p>",
        "id": 282352674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652534452
    },
    {
        "content": "<p>Yeah I found it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 282352728,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652534532
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14146\">#14146</a></p>",
        "id": 282353146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652535202
    }
]