[
    {
        "content": "<p>I'm working with the following minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.homeomorph</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">scratch</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.induced</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">scratch</span>\n</code></pre></div>\n<p>I have two questions here:</p>\n<ol>\n<li>There is a <code>maximum class-instance resolution depth</code> error in the example. It seems lean is having trouble finding the topological space instances which I find strange. Why?</li>\n<li>Does mathlib have the definition needed to fill in the sorry?</li>\n</ol>",
        "id": 220043257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608066864
    },
    {
        "content": "<p>The instance is a bad instance: it means that, whenever Lean is looking for a topological space structure on some type <code>α</code>, it will explore all types <code>β</code> and all equivs between the two types. There is no way to determine which one it should use.</p>",
        "id": 220043955,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608067216
    },
    {
        "content": "<p>Oh yes of course.</p>",
        "id": 220044039,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608067257
    },
    {
        "content": "<p>I should add <code>f</code>to a synonym for <code>\\a</code>, for example.</p>",
        "id": 220044073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608067271
    },
    {
        "content": "<p>Yes, using a type synonym with the information on <code>f</code> would be enough to make things reasonable.</p>",
        "id": 220044202,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608067318
    },
    {
        "content": "<p>Okay, so here's an updated code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.homeomorph</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">scratch</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.induced</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">scratch</span>\n</code></pre></div>\n<p>Does mathlib have a quick way to fill in the sorry?</p>",
        "id": 220044965,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608067636
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">induced_space</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">induced_space</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.induced</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">induced_space</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_equiv</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_induced_dom</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_induced_rng</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">continuous_id</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 220439985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608333935
    }
]