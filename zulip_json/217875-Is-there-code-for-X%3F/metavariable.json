[
    {
        "content": "<p>Is there a tactic that check if the  target contains a metavariable?</p>",
        "id": 220181802,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1608157324
    },
    {
        "content": "<p>In interactive mode or for metaprogramming?</p>",
        "id": 220182195,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608157563
    },
    {
        "content": "<p><code>expr.has_meta_var &lt;$&gt; tactic.target</code> for the latter.</p>",
        "id": 220182230,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608157576
    },
    {
        "content": "<p>It would be better for me in interactive mode...</p>",
        "id": 220182261,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1608157600
    },
    {
        "content": "<p>With what behavior? Failing if there is a metavariable?</p>",
        "id": 220182292,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608157627
    },
    {
        "content": "<p>Yes, that would be perfect<br>\n(I want to combine this with any tactic, to avoid using a tactic if it leads to metavariables in the target)</p>",
        "id": 220182343,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1608157662
    },
    {
        "content": "<p>I don't think it's in the library but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.no_meta_vars</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">mwhen</span> <span class=\"o\">(</span><span class=\"n\">expr.has_meta_var</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">tactic.target</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"target contains metavars\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">no_meta_vars</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220182605,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608157806
    },
    {
        "content": "<p>Great, many thanks!</p>",
        "id": 220182707,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1608157880
    },
    {
        "content": "<p>Better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.no_meta_vars</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">mwhen</span> <span class=\"o\">(</span><span class=\"n\">expr.has_meta_var</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">tactic.target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.instantiate_mvars</span><span class=\"o\">))</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"target contains metavars\"</span>\n</code></pre></div>",
        "id": 220183112,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608158077
    }
]