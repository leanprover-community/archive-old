[
    {
        "content": "<p>Is there a coercion from <code>finset</code> to a <code>X : Type*</code> with <code>fintype X</code>?</p>",
        "id": 219594674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607686637
    },
    {
        "content": "<p>yes</p>",
        "id": 219594825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607686738
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset_coe.fintype\">docs#finset_coe.fintype</a></p>",
        "id": 219594921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607686805
    },
    {
        "content": "<p>it's a double coercion via <code>set X</code></p>",
        "id": 219594953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607686831
    },
    {
        "content": "<p>It has very annoying notation though, you need to write out <code>(â†‘s : set X)</code> before the elaborator gets what's going on.</p>",
        "id": 219595096,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1607686932
    },
    {
        "content": "<p>Yes, it's a very common elaboration curse.</p>",
        "id": 219602889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607691884
    },
    {
        "content": "<p>You can define a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_sort\">docs#has_coe_to_sort</a> instance on <code>finset</code>.</p>",
        "id": 219721449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607798600
    },
    {
        "content": "<p>Should mathlib do so?</p>",
        "id": 219724177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607801727
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 219727444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607806477
    }
]