[
    {
        "content": "<p>Do we already have this? (Should be an MWE.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">fin_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv_of_card_eq</span> <span class=\"o\">((</span><span class=\"n\">card_coe</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">card_fin</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>\n<p>To be clear, I know about <code>fintype.fin_equiv</code>. But I specifically want fin (s.card) and not fin (fintype.card s). What I want is an injective function from fin (s.card) to s, and this seems the best way to get it.</p>",
        "id": 288020292,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656592512
    },
    {
        "content": "<p>Alternatively you could have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv_of_card_eq</span> <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"o\">(</span><span class=\"n\">card_coe</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">card_fin</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 288020642,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656592693
    },
    {
        "content": "<p>Would be nice to have MW imports too</p>",
        "id": 288022122,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656593416
    },
    {
        "content": "<p>oh, bother.</p>",
        "id": 288022144,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656593429
    },
    {
        "content": "<p>I've just closed my lean, I didn't think I was using any of my imports.</p>",
        "id": 288022185,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656593446
    },
    {
        "content": "<p>Doesn't work without imports, so I have to figure out what to import</p>",
        "id": 288022274,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656593487
    },
    {
        "content": "<p>Ah, <code>import data.fintype.card</code> does it</p>",
        "id": 288022288,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656593496
    },
    {
        "content": "<p>Right, yes.</p>",
        "id": 288022316,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656593510
    },
    {
        "content": "<p>This seems alright to me</p>",
        "id": 288022511,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656593586
    },
    {
        "content": "<p>I was expecting <code>fintype.card s</code> and <code>s.card</code> to be def-eq, but it doesn't seem to be the case</p>",
        "id": 288022545,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656593603
    },
    {
        "content": "<p>Yeah, that's the issue I was running into for why I wanted this for convenience.</p>",
        "id": 288022618,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656593640
    },
    {
        "content": "<p>If it doesn't exist already, which it doesn't seem to, then it should totally be PR'd</p>",
        "id": 288022914,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656593768
    },
    {
        "content": "<p>Cool - I'm meant to give a presentation in two hours which I haven't written yet so I'm just doing that first. If you feel like it you can PR it in the meantime ;)</p>",
        "id": 288022977,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656593806
    },
    {
        "content": "<p>Do you think my <code>fin_equiv</code> or <code>equiv_fin</code> is better? Even though it's <code>fin_equiv</code> I want more, I feel like in a PR <code>finset.equiv_fin</code> to match <code>fintype.equiv_fin</code> would be better.</p>",
        "id": 288035357,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656598991
    },
    {
        "content": "<p>You could also have a <code>finset.equiv_of_card_eq</code>, I guess.</p>",
        "id": 288035547,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599056
    },
    {
        "content": "<p>Why <em>isn't</em> <code>fintype.card s</code> and <code>s.card</code> defeq, I wonder.</p>",
        "id": 288036629,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599441
    },
    {
        "content": "<p>I prefer <code>fin_equiv</code> out of the general principle of having a simpler RHS</p>",
        "id": 288036644,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599450
    },
    {
        "content": "<p>Yes, that's how I feel.</p>",
        "id": 288036681,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599464
    },
    {
        "content": "<p>Maybe we should flip <code>fintype.equiv_fin</code>.</p>",
        "id": 288036710,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599476
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a></p>",
        "id": 288036744,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599489
    },
    {
        "content": "<p>(Which is the corresponding theorem for fintypes.)</p>",
        "id": 288036794,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599514
    },
    {
        "content": "<p>I guess there is one exception to that principle of a simpler RHS: when your lemma is meant to expand an expression rather than simplify it</p>",
        "id": 288036878,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599530
    },
    {
        "content": "<p>I guess you can sort of argue that's happening here?</p>",
        "id": 288036895,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599537
    },
    {
        "content": "<p>Aye. I mean in my context what I want is embeddings from fin blah to the thing... because i'm sort of thinking of this as \"labelling things with fin n\".</p>",
        "id": 288036995,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599577
    },
    {
        "content": "<p>Surely there's few circumstances when you'll want to turn <code>fin (fintype.card α)</code> into <code>α</code>, but many where you'll want to do the opposite</p>",
        "id": 288037065,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599598
    },
    {
        "content": "<p>So yeah, on second thought, <code>equiv_fin</code> is the better one</p>",
        "id": 288037097,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599613
    },
    {
        "content": "<p>Like what this correspond to, basically, is: \"Let s be a finite set of size n. Suppose x_0, x_1, ..., x_(n-1) are the elements of s. Then...\"</p>",
        "id": 288037151,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599639
    },
    {
        "content": "<p>And that is implicitly taking <code>fin (card s)</code> to s.</p>",
        "id": 288037255,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599677
    },
    {
        "content": "<p>I mean possibly the answer is \"even though it would just be an application of symmetry, have both\".</p>",
        "id": 288037327,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599708
    },
    {
        "content": "<p>Ages ago, I wanted something like this. I think this was the thread</p>\n<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Enumerating.20a.20finite.20subset\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Enumerating.20a.20finite.20subset</a></p>",
        "id": 288037392,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1656599736
    },
    {
        "content": "<p>I feel like there's little circumstances where you want names for both sides of an <code>equiv</code></p>",
        "id": 288037550,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599789
    },
    {
        "content": "<p>Yes.</p>",
        "id": 288037556,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599794
    },
    {
        "content": "<p>Because, unless that <code>equiv</code> is incredibly well-behaved (something like a cast between type synonyms), you lose easy access to a lot of theorems about an equivalence and its inverse</p>",
        "id": 288037612,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> A similar situation to me. It is curious that we have <code>finset.order_iso_of_fin</code> but not the one that doesn't have a requirement for <code>linear_order</code>.</p>",
        "id": 288037680,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599843
    },
    {
        "content": "<p><code>list.nodup.nth_le_equiv</code> has fin-first</p>",
        "id": 288037836,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599901
    },
    {
        "content": "<p>Indeed. I’m afraid I’m on a phone on plane at the moment so I can’t say much but I do recall that I persuaded myself that I didn’t really want what I thought I wanted.</p>",
        "id": 288037938,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1656599944
    },
    {
        "content": "<p>Unfortunately I do want such an embedding, having tried my best to avoid it.</p>",
        "id": 288038008,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656599972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fin.20.28s.2Ecard.29.20finset.20equiv/near/288037680\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> A similar situation to me. It is curious that we have <code>finset.order_iso_of_fin</code> but not the one that doesn't have a requirement for <code>linear_order</code>.</p>\n</blockquote>\n<p>I feel like most people's mental model of an ordered relation is a partial order, or sometimes just a linear order haha</p>",
        "id": 288038012,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656599974
    },
    {
        "content": "<p>That would explain the odd missing generalizations you find now and then</p>",
        "id": 288038132,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656600009
    },
    {
        "content": "<p>Well ideally you don't want an order at all.</p>",
        "id": 288038212,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656600038
    },
    {
        "content": "<p>Like there is in some sense an order induced</p>",
        "id": 288038242,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656600054
    },
    {
        "content": "<p>But it is arbitrary, or at least should be.</p>",
        "id": 288038273,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656600065
    },
    {
        "content": "<p>Sometimes you want to choose it though</p>",
        "id": 288038300,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656600075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> A bit shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.equiv_fin_of_card_eq</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_coe</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288042643,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656601764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fin.20.28s.2Ecard.29.20finset.20equiv/near/288036629\">said</a>:</p>\n<blockquote>\n<p>Why <em>isn't</em> <code>fintype.card s</code> and <code>s.card</code> defeq, I wonder.</p>\n</blockquote>\n<p>That's a good question. I'm not sure if it can be made to be defeq -- to make a <code>fintype</code> instance you need a <code>finset</code> that enumerates all the elements of <code>s</code> coerced to a type, and currently it uses <code>s.attach</code> to do so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s.attach.card</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 288043128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656601943
    },
    {
        "content": "<p>So really, this boils down to asking why <code>finset.univ : finset s</code> isn't def-eq to <code>s</code></p>",
        "id": 288044379,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656602447
    },
    {
        "content": "<p>That doesn't typecheck, right?</p>",
        "id": 288044417,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656602466
    },
    {
        "content": "<p>Oh, yeah</p>",
        "id": 288044590,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656602529
    },
    {
        "content": "<p>Well, there's the answer, isn't it?</p>",
        "id": 288044695,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656602579
    },
    {
        "content": "<p><code>fintype.card s</code> is defined as <code>(finset.univ : finset s).card</code> while <code>s.card</code> is just that</p>",
        "id": 288044904,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656602660
    },
    {
        "content": "<p>Which makes sense I think</p>",
        "id": 288044928,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656602672
    },
    {
        "content": "<p>Still, I wonder if there's some trick where you can make <code>fintype.card s</code> reduce to <code>s.card</code>.  The problem right now is that <code>attach</code> is a <code>map</code> operation over the underlying <code>list</code>, and that doesn't preserve the length definitionally.</p>",
        "id": 288045203,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656602799
    },
    {
        "content": "<p>btw note <code>s.attach</code> is def-eq to <code>(finset.univ : finset s)</code></p>",
        "id": 288045345,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656602864
    },
    {
        "content": "<p>And <code>finset.univ</code> is def-eq to <code>fintype.elems</code></p>",
        "id": 288045445,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656602894
    },
    {
        "content": "<p>Yes, <code>finset.univ : finset s</code> is defeq to <code>s.attach</code> because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.fintype_coe_sort\">docs#finset.fintype_coe_sort</a>, which defines the <code>fintype s</code> instance.</p>",
        "id": 288045581,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656602958
    },
    {
        "content": "<p>So really, I think the issue is that <code>fintype.elems s</code> isn't def-eq to <code>s</code>, which it can't reasonably be because they aren't of the same type</p>",
        "id": 288045792,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656603024
    },
    {
        "content": "<p>It doesn't seem reasonable to define <code>fintype.card s</code> as anything other than <code>(fintype.elems s).card</code></p>",
        "id": 288045921,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656603087
    },
    {
        "content": "<p>Sure, that's the proximal issue, but there still might be some trick so that <code>(fintype.elems s).card</code> reduces to <code>s.card</code> by using something other than <code>s.attach</code>. Neither of us can think of anything, but that doesn't mean that there isn't something that would work in place of <code>s.attach</code>.</p>",
        "id": 288046105,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656603165
    },
    {
        "content": "<p>It seems unlikely, but I'm not willing to say it's impossible here.</p>",
        "id": 288046196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656603205
    },
    {
        "content": "<p>One solution would be to extend <code>fintype</code> to include a <code>card</code> field so you can get definitional control over it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic_rfl</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">fintype'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">complete</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">elems</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">elems.card</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">card_eq</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">elems.card</span> <span class=\"bp\">.</span> <span class=\"n\">tactic_rfl</span><span class=\"o\">)</span> <span class=\"c1\">-- just so the default case automatically goes through</span>\n</code></pre></div>",
        "id": 288047306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656603685
    },
    {
        "content": "<p>If you want to go down that route, you could also have <code>card</code> be a member of finsets, multisets, or even lists</p>",
        "id": 288048828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656604315
    },
    {
        "content": "<p>This seems it could easily lead to \"fun.\" Imagine getting to use the <code>finset.reset_card</code> lemma to reset the internal <code>card</code> field to the <code>card</code> of its <code>multiset</code>, after spending some time wondering why you weren't able to rw with some other lemma.</p>",
        "id": 288049405,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656604560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fin.20.28s.2Ecard.29.20finset.20equiv/near/288042643\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> A bit shorter:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.equiv_fin_of_card_eq</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_coe</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Very nice.</p>",
        "id": 288053200,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656606322
    },
    {
        "content": "<p>Still not quite sure why all the lemmas like this for list e.g. <code>list.nodup.nth_le_equiv</code> have the <code>fin</code> on the left, but all these are on the right for <code>fintype</code>.</p>",
        "id": 288053327,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656606369
    },
    {
        "content": "<p>Like you'd think they'd all be the same.</p>",
        "id": 288053341,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656606376
    },
    {
        "content": "<p>Would you want a <code>finset.trunc_equiv_fin</code> as well? The computable version.</p>",
        "id": 288053549,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656606490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fin.20.28s.2Ecard.29.20finset.20equiv/near/288045792\">said</a>:</p>\n<blockquote>\n<p>So really, I think the issue is that <code>fintype.elems s</code> isn't def-eq to <code>s</code>, which it can't reasonably be because they aren't of the same type</p>\n</blockquote>\n<p>Oh, because one is a <code>finset s</code> and the other is <code>finset \\alph</code> or whatever?</p>",
        "id": 288053722,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656606591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fin.20.28s.2Ecard.29.20finset.20equiv/near/288053549\">said</a>:</p>\n<blockquote>\n<p>Would you want a <code>finset.trunc_equiv_fin</code> as well? The computable version.</p>\n</blockquote>\n<p>I'd say \"no\" unless you're using it. How much would having <code>finset.equiv_fin</code> simplify your work, by the way? I'm wondering if <code>(equiv_fin_of_card_eq (card_coe _)).symm</code> (assuming <code>open fintype</code>) is already short enough of a name for what you're doing.</p>",
        "id": 288054990,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656607156
    },
    {
        "content": "<p>(The <code>trunc_equiv_fin</code> definition is used extremely rarely in mathlib -- only 3 legitimate uses outside fintype/basic -- which is why I suggest not including <code>finset.trunc_equiv_fin</code>. I just made <a href=\"https://github.com/leanprover-community/mathlib/pull/15076\">#15076</a>  and <a href=\"https://github.com/leanprover-community/mathlib/pull/15077\">#15077</a> to remove the uses that were in a computation-free and classical context so don't need to be computable.)</p>",
        "id": 288056941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656608024
    },
    {
        "content": "<p>Yeah, I wasn't sure why it existed. <code>finset.equiv_fin</code> wouldn't simplify things a lot but it would make like one line less unwieldy.</p>",
        "id": 288069702,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656614098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> I'm sort of ambivalent about <code>finset.equiv_fin</code>, but even though it's just a composition of two things, may as well add it since it makes it easier to find this particular equivalence.</p>\n<p>I think new definitions usually need some sort of justification since there's a cognitive cost to adding definitions to mathlib, and these are some justifications that come to mind:</p>\n<ul>\n<li>It's a common expression and will save on repetition.</li>\n<li>It chooses a canonical way of stating something (a nexus for a concept).</li>\n<li>There is theory surrounding it.</li>\n</ul>\n<p>It's worth considering that not everything needs an explicit name, and sometimes the body of a definition might be about the same length as the name of the definition itself (so it can be its own name, so to speak).</p>\n<p>However, for this equivalence, I suspect that anyone who uses it only really cares that the equivalence exists, and it's a more convenient writing it this way than having it be a lemma proving <code>nonempty (s ≃ fin s.card)</code>.</p>",
        "id": 288080065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656619274
    },
    {
        "content": "<p>By the way, here's one of the uses of <code>trunc_equiv_fin</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/eb852609e908d661c0e31c94fa3fff6d113b9d6e/src/group_theory/perm/sign.lean#L427\">https://github.com/leanprover-community/mathlib/blob/eb852609e908d661c0e31c94fa3fff6d113b9d6e/src/group_theory/perm/sign.lean#L427</a></p>\n<p>It's an auxiliary function for computing the sign of a permutation, and since it's computable you can <code>#eval</code> the sign function if you wanted to.</p>",
        "id": 288080801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656619634
    },
    {
        "content": "<p>I mean really I even only care that there's an <em>embedding</em> from fin n to s where s.card = n: it's literally just the \"we can label the finset\" concept.</p>",
        "id": 288100616,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656631115
    },
    {
        "content": "<p>What file should this be in? Feels like I can't put it in the finset bit of <code>data.fintype.basic</code> because that is before the <code>fintype</code> version which it makes sense to use</p>",
        "id": 288128482,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656658441
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/pull/15080\">#15080</a></p>",
        "id": 288131222,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656660357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> fyi</p>",
        "id": 288131268,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1656660364
    }
]