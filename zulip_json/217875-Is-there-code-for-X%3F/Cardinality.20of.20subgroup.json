[
    {
        "content": "<p>What is the recommended way to talk about the <code>card</code> of a subgroup of a finite group?</p>",
        "id": 258340992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634723859
    },
    {
        "content": "<p><code>card S</code>?</p>",
        "id": 258341067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634723888
    },
    {
        "content": "<p>Which <code>card</code> is that?</p>",
        "id": 258341118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634723914
    },
    {
        "content": "<p>I guess <code>fintype.card</code> if you want a nat</p>",
        "id": 258341141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634723927
    },
    {
        "content": "<p>Aah, with some coercions under the hood. Ok.</p>",
        "id": 258341164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634723942
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span>\n<span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">subgroup.center</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 258341419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634724060
    },
    {
        "content": "<p>Lean is not yet convinced <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 258341435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634724069
    },
    {
        "content": "<p><code>decidable_eq α</code>?</p>",
        "id": 258343807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725232
    },
    {
        "content": "<p>Doesn't help</p>",
        "id": 258343920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634725300
    },
    {
        "content": "<p>I think you need to add a <code>decidable_pred (∈ center G)</code> instance</p>",
        "id": 258344551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725633
    },
    {
        "content": "<p>Which probably falls out by just unfolding</p>",
        "id": 258344576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725646
    },
    {
        "content": "<p>Or as <code>decidable.forall</code> if that exists</p>",
        "id": 258344677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725688
    },
    {
        "content": "<p>We already have such an instance for <code>range</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.decidable_mem_range\">docs#monoid_hom.decidable_mem_range</a></p>",
        "id": 258344697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725702
    },
    {
        "content": "<p>We really need <code>fincard</code>.</p>",
        "id": 258344796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634725771
    },
    {
        "content": "<p>Because this issue is not just restricted to <code>subgroup.center</code> of course.</p>",
        "id": 258344876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634725805
    },
    {
        "content": "<p>So we'll need &gt; 57 of such instances, for all the variants.</p>",
        "id": 258344917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634725833
    },
    {
        "content": "<p>Well, we already have to write <code>mem_center</code> by hand</p>",
        "id": 258344999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725893
    },
    {
        "content": "<p>So we just need a <code>decidable_mem_center</code> next to every one of those</p>",
        "id": 258345031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725918
    },
    {
        "content": "<p>Perhaps <code>derive</code> or <code>simps</code> could handle this type of thing</p>",
        "id": 258345096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725939
    },
    {
        "content": "<p>But we also need it for <code>centralizer</code> and for <code>normalizer</code> and for <code>subfoo.whatever</code>.</p>",
        "id": 258345150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634725971
    },
    {
        "content": "<p>Yeah, but we need <code>mem_</code> lemmas for all of those too</p>",
        "id": 258345185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634725997
    },
    {
        "content": "<p>So it's only a constant factor more boilerplate than we're already obliged to write</p>",
        "id": 258345242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634726042
    },
    {
        "content": "<p>In theory simps could generate those mem lemmas quite easily, but I'm pretty sure we haven't tried configuring it to.</p>",
        "id": 258345358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634726096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Cardinality.20of.20subgroup/near/258344796\">said</a>:</p>\n<blockquote>\n<p>We really need <code>fincard</code>.</p>\n</blockquote>\n<p>We have it, right? Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a> work?</p>",
        "id": 258348261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634727720
    },
    {
        "content": "<p>Ooh! I didn't realize that we had it. Great!</p>",
        "id": 258348687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634727975
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9825\">#9825</a></p>",
        "id": 258357259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634732677
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 258358865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634733472
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- move this</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_conj_comm</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_conj</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">is_conj</span> <span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">is_conj.symm</span><span class=\"o\">,</span> <span class=\"n\">is_conj.symm</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- move this</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_orbit_conj_act_iff</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">orbit</span> <span class=\"o\">(</span><span class=\"n\">conj_act</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">is_conj</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_conj_comm</span><span class=\"o\">,</span> <span class=\"n\">is_conj_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_orbit_iff</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">iff.rfl</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- move this</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">orbit_rel_r</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">orbit_rel</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">orbit</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- move this</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">orbit_rel_r_apply</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">setoid.r</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">orbit_rel</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">orbit</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">class_equation'</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">is_conj</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">conj_classes</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x.fincarrier.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">orbit_rel</span> <span class=\"o\">(</span><span class=\"n\">conj_act</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">conj_classes</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">quotient.congr_right</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mem_orbit_conj_act_iff</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">orbit_rel</span> <span class=\"o\">(</span><span class=\"n\">conj_act</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">e.sum_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_eq_sum_card_group_div_card_stabilizer</span> <span class=\"o\">(</span><span class=\"n\">conj_act</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">card_orbit_mul_card_stabilizer_eq_card_group</span> <span class=\"o\">(</span><span class=\"n\">conj_act</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quotient.out'</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">_</span> <span class=\"n\">g</span><span class=\"o\">)),</span>\n    <span class=\"n\">nat.mul_div_cancel</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_of_finset</span><span class=\"o\">,</span> <span class=\"n\">conj_classes.fincarrier</span><span class=\"o\">],</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fintype.card_pos_iff</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_orbit_conj_act_iff</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">conj_classes.mk_eq_mk_iff_is_conj</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_iff_eq_cancel_left.2</span> <span class=\"o\">(</span><span class=\"n\">conj_classes.mk_eq_mk_iff_is_conj.2</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">is_conj</span> <span class=\"n\">g</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mem_orbit_conj_act_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">orbit_rel_r_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient.exact'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quotient.out_eq'</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258358882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634733477
    },
    {
        "content": "<p>I wasn't aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conj_classes\">docs#conj_classes</a>. What's <code>fincarrier</code>?</p>",
        "id": 258359549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634733721
    },
    {
        "content": "<p>I just defined it. Sorry, I forgot to copy it.</p>",
        "id": 258360041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634733943
    },
    {
        "content": "<p>I was wondering if it was similar to <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>'s finpartition</p>",
        "id": 258361312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634734461
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9795\">#9795</a> for reference</p>",
        "id": 258361441,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634734512
    },
    {
        "content": "<p>Oooh, I have no idea!</p>",
        "id": 258362696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634734972
    },
    {
        "content": "<p><code>finpartition</code> is the <code>finset</code> bundled generalized version of <code>setoid.partition</code>.</p>",
        "id": 258363805,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634735416
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.partition\">docs#setoid.partition</a> doesn't exist</p>",
        "id": 258364706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634735744
    },
    {
        "content": "<p>I guess you meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.is_partition\">docs#setoid.is_partition</a></p>",
        "id": 258364989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634735833
    },
    {
        "content": "<p>I now have a sorry-free</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">class_equation</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.card</span> <span class=\"o\">(</span><span class=\"n\">subgroup.center</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">noncenter</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">nat.card</span> <span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(<code>G</code> is a group)</p>",
        "id": 258377968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634740202
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9828\">#9828</a></p>",
        "id": 258378405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634740346
    }
]