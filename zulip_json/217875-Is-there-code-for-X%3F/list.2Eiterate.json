[
    {
        "content": "<p>Do we have something already that does this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.iterate</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">list.iterate</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 238684164,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620941315
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.iterate\">docs#stream.iterate</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.approx\">docs#stream.approx</a></p>",
        "id": 238686029,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1620942419
    },
    {
        "content": "<p>Can this be built from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.scanl\">docs#list.scanl</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.repeat\">docs#list.repeat</a>?</p>",
        "id": 238688367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620943684
    },
    {
        "content": "<p><code>(repeat f n).scanl id init</code> seems like it would work</p>",
        "id": 238688745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620943844
    }
]