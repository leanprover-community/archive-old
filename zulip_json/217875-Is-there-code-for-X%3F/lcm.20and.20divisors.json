[
    {
        "content": "<p>I wrote a proof for the following lemma, but I am sure it can be done in a shorter way. Any help will be appreciated</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lcm_divisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)(</span><span class=\"n\">H0</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n<span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a.lcm</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span>  <span class=\"n\">n.divisors</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mem_divisors</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.lcm_dvd_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mem_divisors</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">Ha</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Ha</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mem_divisors</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">Hb</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Hb</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279224570,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1650206280
    },
    {
        "content": "<p>I didn't check if there were any other mathlib lemmas that could help, but here's a compressed version of your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lcm_divisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a.lcm</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">nat.lcm_dvd_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">ha.1</span><span class=\"o\">,</span> <span class=\"n\">hb.1</span><span class=\"o\">⟩,</span> <span class=\"n\">ha.2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This would probably be the mathlib name and implicit argument style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lcm_mem_divisors</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H0</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.lcm</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">nat.lcm_dvd_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">ha.1</span><span class=\"o\">,</span> <span class=\"n\">hb.1</span><span class=\"o\">⟩,</span> <span class=\"n\">ha.2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279225238,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650207304
    },
    {
        "content": "<p>Maybe a version of this where you take <code>a ∣ c</code>, <code>b ∣ c</code> instead would be useful too?</p>",
        "id": 279226719,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650209500
    },
    {
        "content": "<p>Thanks, I am learning to write in a more compressed way. <br>\nI am not sure of the meaning of  ⊢ at the proof at the end of the <code>simp only</code>.</p>",
        "id": 279227318,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1650210329
    },
    {
        "content": "<p>Many tactics can work on locations. You can either refer to an hypothesis by its name or to the goal using <code>⊢</code>.</p>",
        "id": 279227395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650210459
    },
    {
        "content": "<p>Assumption <code>(H0 : n ≠ 0)</code> is redundant. The proof can be even shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lcm_mem_divisors</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.lcm</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.lcm_dvd_iff</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 279230107,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650214359
    },
    {
        "content": "<p>I think the real takeaway here is that <code>a ∈ n.divisors</code> is not the preferred spelling, which is why we have no lemmas about it</p>",
        "id": 279267726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650269808
    },
    {
        "content": "<p>You're expected to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mem_divisors_iff\">docs#nat.mem_divisors_iff</a> first</p>",
        "id": 279267735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650269827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315546\">@Xavier Xarles</span> in formalising it really helps if there is one \"canonical way\" to express an idea, and <code>n \\| m</code> is the canonical way to say n divides m, not <code>n \\in divisors m</code></p>",
        "id": 279268591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650270915
    }
]