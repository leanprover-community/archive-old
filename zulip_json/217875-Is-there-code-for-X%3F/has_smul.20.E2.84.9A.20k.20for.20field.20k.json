[
    {
        "content": "<p>Would it be meaningful to define the action of the rationals on any field k? For example, <code>λ q c, if q.num = 0 then 0 else q.num • c * c / (q.denom • c)</code></p>",
        "id": 288869794,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657230194
    },
    {
        "content": "<p>What if the field has finite characteristic?</p>",
        "id": 288870864,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657230764
    },
    {
        "content": "<p>Might still work, I don't know, but you might end up with some perhaps unexpected divisions by zero</p>",
        "id": 288870901,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657230793
    },
    {
        "content": "<p>I guess you want more than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_rat\">docs#algebra_rat</a></p>",
        "id": 288871238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657230967
    },
    {
        "content": "<p>I think you could prove that <code>q.num • c * c / (q.denom • c) = q • c</code> in char zero (where the RHS is algebra_rat)</p>",
        "id": 288872163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657231516
    },
    {
        "content": "<p>Why add a non-mathematically-meaningful \"action\"? In characteristic p this can't be mathematically sensible.</p>",
        "id": 288908242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657266254
    },
    {
        "content": "<p>Also, while I agree with Kevin that this does not seem like a good idea, why the case split?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mm</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">q.num</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">q.num</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">q.denom</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">smm</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">q.num</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">q.denom</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mm</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">smm</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">mm</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">smm</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288909287,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657266973
    }
]