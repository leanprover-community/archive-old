[
    {
        "content": "<p>Does it make sense to add this to mathlib? (I couldn't find it.)<br>\nI often find myself wanting to case on this, and invoking <code>wlog</code> every time is somewhat slow.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_or_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_or_lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">id</span> <span class=\"n\">le_of_lt</span>\n</code></pre></div>",
        "id": 228721716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614837180
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_total\">docs#le_total</a> ?</p>",
        "id": 228721825,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614837286
    },
    {
        "content": "<p>Aah, the wonders of a predictable naming convention <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 228722320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614837688
    },
    {
        "content": "<p><code>lt_irrefl</code> is another one which takes some getting used to -- I would always look for <code>not_lt_self</code>.</p>",
        "id": 228727827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614842374
    },
    {
        "content": "<p>I think we already have <code>le_or_ge</code>, so I don't think it would be a bad idea to have <code>le_or_le</code> as an alias for <code>le_total</code></p>",
        "id": 228728083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614842561
    },
    {
        "content": "<p>I agree we could have aliases for both <code>le_total</code> and <code>lt_irrefl</code>.</p>",
        "id": 228730406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614844229
    },
    {
        "content": "<p>We also have an alias <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lt.lt.false\">docs#has_lt.lt.false</a></p>",
        "id": 228730748,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614844529
    }
]