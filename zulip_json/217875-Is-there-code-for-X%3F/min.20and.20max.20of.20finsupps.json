[
    {
        "content": "<p>Do we have <code>min</code> and <code>max</code> operations on finsupps <code>α →₀ M</code> (where <code>M</code> satisfies some suitable conditions)?</p>",
        "id": 267585218,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641909934
    },
    {
        "content": "<p><code>M</code> linear order is what you need.</p>",
        "id": 267585402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641910004
    },
    {
        "content": "<p>That's what I guessed, but it seems that these operations don't exist (yet)</p>",
        "id": 267587328,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641910862
    },
    {
        "content": "<p>We're also missing the (very similar) <code>multiset.min</code>/<code>multiset.max</code>. cc <span class=\"user-mention\" data-user-id=\"398581\">@Mantas Baksys</span></p>",
        "id": 267587388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641910899
    },
    {
        "content": "<p>Don't we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.linear_order\">docs#finsupp.linear_order</a>?</p>",
        "id": 267589276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641911665
    },
    {
        "content": "<p>Oh, the operation you're looking for is <code>⊔</code>, if that exists</p>",
        "id": 267589321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641911687
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.has_sup\">docs#finsupp.has_sup</a></p>",
        "id": 267589353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641911699
    },
    {
        "content": "<p>Ignore my above messages. Can you explain what you want <code>max</code> to mean on finsupps? Are you asking for the elementwise max? Or for <code>f.support.max id</code>?</p>",
        "id": 267589592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641911776
    },
    {
        "content": "<p>I was thinking about elementwise operations, i.e. where  <code>(min f g)(a) = min (f a) (g a)</code>.</p>",
        "id": 267592295,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641912839
    },
    {
        "content": "<p>So (for finsupps into <code>nat</code>, at least) I think the support of the <code>min</code>/<code>max</code> is the intersection/union of the supports respectively.</p>",
        "id": 267592538,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641912919
    },
    {
        "content": "<p>I haven't thought properly about what this should be when <code>0</code> isn't the minimal element of <code>M</code>.</p>",
        "id": 267592628,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641912961
    },
    {
        "content": "<p>(For avoidance of <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, what I'm primarily interested in is the situation where the two finsupps are <code>a.factorization</code> and <code>b.factorization</code>, and I want to produce the finsupp whose value at each prime is the minimum of their respective values, which should then be the factorization of <code>gcd a b</code>.)</p>",
        "id": 267593743,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641913387
    },
    {
        "content": "<p>Yeah, you want <code>inf</code></p>",
        "id": 267593809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641913415
    },
    {
        "content": "<p><code>inf</code> on <code>finsupp</code> is the pointwise <code>inf</code>, which in your case is the pointwise <code>min</code>. But <code>min</code> on <code>finsupp</code> doesn't make sense (it's not a linear order), so you're stuck with <code>inf</code>.</p>",
        "id": 267594065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641913508
    },
    {
        "content": "<p>Excellent, thanks</p>",
        "id": 267594158,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641913552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/min.20and.20max.20of.20finsupps/near/267592295\">said</a>:</p>\n<blockquote>\n<p>I was thinking about elementwise operations, i.e. where  <code>(min f g)(a) = min (f a) (g a)</code>.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.inf_apply\">docs#finsupp.inf_apply</a> is basically this statement</p>",
        "id": 267599775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641915774
    }
]