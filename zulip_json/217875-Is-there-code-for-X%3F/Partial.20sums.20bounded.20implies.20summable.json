[
    {
        "content": "<p>I have an infinite sequence of non-negative reals and I can prove that all finite sums (ie sum of the first M terms, although I could extend this to any finset without much trouble) are &lt;= c. Is there a relatively painless way to prove that the infinite sum is summable and also &lt;= c? I could just plough through the first principles proof but I'm hoping there's already something useful there. This is for the Scholze challenge, in case anyone is wondering why I'm doing analysis</p>",
        "id": 219815903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607937522
    },
    {
        "content": "<p>The existing theorems look a little disappointing for this use case. I see two easiest paths: (1) transfer to ennreal, where sums are nice, and use your proof to show that it is &lt;= c and thus finite, and transfer back. (2) Use bolzano-weierstrass on [0, c] as a compact set in R</p>",
        "id": 219816691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607938021
    },
    {
        "content": "<p>(Note that proving the sum is &lt;= c is the easy part; the hard part is proving <code>summable f</code>)</p>",
        "id": 219816891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607938128
    },
    {
        "content": "<p>You have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_summable_iff_tendsto_nat_at_top_of_nonneg\">docs#not_summable_iff_tendsto_nat_at_top_of_nonneg</a></p>",
        "id": 219817534,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607938538
    },
    {
        "content": "<p>Thanks Sebastien -- perhaps this is the most painless route.</p>",
        "id": 219818235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607938987
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">summable_of_sum_range_le</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_lt_of_tendsto_at_top</span> <span class=\"o\">((</span><span class=\"n\">not_summable_iff_tendsto_nat_at_top_of_nonneg</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">c</span>\n    <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hn.trans_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219818464,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607939151
    },
    {
        "content": "<p>Is it possible to design <code>tsum</code> in such a way that we don't have to prove <code>summable f</code> and <code>summable g</code> as side conditions for almost every lemma out there?</p>",
        "id": 219818557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607939185
    },
    {
        "content": "<p>But they are necessary conditions for almost every proof out there!</p>",
        "id": 219818747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607939305
    },
    {
        "content": "<p>Normally all lemmas where the summability is not necessary should be stated without the summability assumption.</p>",
        "id": 219818751,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607939308
    },
    {
        "content": "<p>Well there is <code>has_sum</code> if you want both at once</p>",
        "id": 219819049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607939482
    },
    {
        "content": "<p>I think <code>tsum</code> only has an advantage on things like ennreal where summable is trivial for a reason unrelated to the function itself</p>",
        "id": 219819159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607939535
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tsum_le_of_sum_range_le</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_tendsto'</span> <span class=\"o\">((</span><span class=\"n\">has_sum_iff_tendsto_nat_of_nonneg</span> <span class=\"n\">hf</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">summable_of_sum_range_le</span> <span class=\"n\">hf</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_sum</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 219819165,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607939540
    },
    {
        "content": "<p>I think <code>not_summable_iff_tendsto_nat_at_top_of_nonneg</code> should have the negation on the other side</p>",
        "id": 219819311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607939636
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5363\">#5363</a>. This should have been already in mathlib.</p>",
        "id": 219820640,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607940384
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 219821413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607940833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Partial.20sums.20bounded.20implies.20summable/near/219818557\">said</a>:</p>\n<blockquote>\n<p>Is it possible to design <code>tsum</code> in such a way that we don't have to prove <code>summable f</code> and <code>summable g</code> as side conditions for almost every lemma out there?</p>\n</blockquote>\n<p>In fact while browsing the file I noticed a lemma where the summability assumption is not necessary: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_n f (k + n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> tends to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> tends to infinity, whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is summable or not (because in the latter situation all sums are zero :-). Fixed (is that the right word, or should I use obfuscated?) in <a href=\"https://github.com/leanprover-community/mathlib/issues/5366\">#5366</a>.</p>",
        "id": 219826047,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607943800
    },
    {
        "content": "<p>Thanks! That will simplify the proof that I worked on Saturday</p>",
        "id": 219826755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607944256
    }
]