[
    {
        "content": "<p>Do we have the following equivalence? If so, is there an easy way to prove it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equiv.set_of_subset_equiv_set</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 284299106,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653849348
    },
    {
        "content": "<p>We can prove <code>{s : set α // s ⊆ t} ≃ Π (a : α), {h : Prop // h → t a}</code> by using <code>subtype_pi_equiv_pi</code>, but I don't know how to finish from here</p>",
        "id": 284299176,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653849434
    },
    {
        "content": "<p>Let me have a go.</p>",
        "id": 284299249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653849497
    },
    {
        "content": "<p>Here's a direct equivalence, by the way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equiv.set_of_subset_equiv_set</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"n\">s.1</span> <span class=\"bp\">∈</span> <span class=\"n\">x.1</span><span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s.2</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hy</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 284299915,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653850393
    },
    {
        "content": "<p>This is for my cardinal cofinality question, I presume?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subset_equiv_set_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t.1</span><span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">t.image</span> <span class=\"n\">subtype.val</span><span class=\"o\">,</span> <span class=\"n\">image_subset_iff.2</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">t.2</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 284300005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653850504
    },
    {
        "content": "<p>That's one of the five auxiliary PRs, haha</p>",
        "id": 284300082,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653850592
    },
    {
        "content": "<p>Note that that lemma name is weird, because <code>set_of</code> isn't on either side of the equiv</p>",
        "id": 284300096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653850613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Can I use your code on <a href=\"https://github.com/leanprover-community/mathlib/pull/14440\">#14440</a>?</p>",
        "id": 284300185,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653850732
    },
    {
        "content": "<p>No! Forbidden! I do not contribute to open source projects to see my code being used! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 284300200,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653850768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> How about <code>subtype_subset_equiv_set</code>?</p>",
        "id": 284300205,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653850772
    },
    {
        "content": "<p>What about <code>subset_equiv_set_coe</code>, the name I gave above?</p>",
        "id": 284300218,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653850799
    },
    {
        "content": "<p>That suggests the name <code>mk_subset</code> for the cardinality analog, which seems too vague to me</p>",
        "id": 284300315,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653850836
    },
    {
        "content": "<p>In set theory, it is. In type theory, not so much.</p>",
        "id": 284300328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653850864
    },
    {
        "content": "<p>That's fair</p>",
        "id": 284300342,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653850890
    },
    {
        "content": "<p>Where should I put this def? We can't comfortably put it in <code>logic.equiv.basic</code> since <code>image</code> hasn't been defined yet...</p>",
        "id": 284300536,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653851091
    },
    {
        "content": "<p><code>data.set.basic</code>?</p>",
        "id": 284300647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653851264
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.powerset\">docs#set.powerset</a> in the statement and/or name.</p>",
        "id": 284302488,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1653854124
    },
    {
        "content": "<p>Guess what? We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set.powerset\">docs#equiv.set.powerset</a></p>",
        "id": 284302683,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1653854407
    },
    {
        "content": "<p>Oh nice! I didn't know \"the set of subsets of <code>t</code>\" had special notation</p>",
        "id": 284305268,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653858006
    }
]