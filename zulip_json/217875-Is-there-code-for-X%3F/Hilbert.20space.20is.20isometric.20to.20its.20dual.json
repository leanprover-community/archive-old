[
    {
        "content": "<p>Is somewhere in <code>mathlib</code> proven that the map <code>v → ⟪v, ⬝ ⟫</code> is isometry between a Hilbert space and its dual?</p>",
        "id": 214583744,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603724072
    },
    {
        "content": "<p>There is a PR about this.</p>",
        "id": 214584359,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603724322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 214584383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603724335
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4379\">#4379</a>, more precisely. It's currently waiting on how we're going to handle conjugate-linear maps. <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , are you planning to go ahead with the <code>linear_map (f : R →+* S) E F</code> idea that was discussed a few days ago?</p>",
        "id": 214592861,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603727722
    },
    {
        "content": "<p>I have a few refactors in line, and every time I switch branches I choose one of them and advance it a little:</p>\n<ul>\n<li>bundle <code>direction</code> into <code>affine_subspace</code>;</li>\n<li>review affine combinations by introducing the free affine space <code>{f : α →₀ R | f.sum (λ a b, b) = 1}</code>;</li>\n<li>redefine convexity for affine spaces;</li>\n<li>use bundled homs for <code>polynomial.eval</code> etc;</li>\n<li>glue <code>mv_power_series</code> to analytic maps;</li>\n<li>redefine some free constructions using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con\">docs#con</a> to get the universal property almost for free;</li>\n<li>add <code>smul_comm_class</code> and migrate some parts of the library to it.</li>\n</ul>",
        "id": 214593889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603728113
    },
    {
        "content": "<p>I guess, I'm not going to work on refactoring <code>linear_map</code>s for at least a week, so probably it's better to merge your PR without waiting for this refactor.</p>",
        "id": 214594175,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603728218
    },
    {
        "content": "<p>I wonder whether it's worth refactoring <a href=\"https://github.com/leanprover-community/mathlib/issues/4379\">#4379</a> (again!  Sorry, Frédéric), so that it mostly does the real case, and does it in a way that will be directly generalizable to the conjugate-linear setting now that we have a theory for what that setting will look like.</p>",
        "id": 214601769,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603731317
    },
    {
        "content": "<p>If this seems like a good idea, I can try this, since I don't want Frédéric to have to spend any more time on this.</p>",
        "id": 214601894,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603731365
    },
    {
        "content": "<p>Maybe also get rid of the development of conjugate vector spaces, if we think that ultimately these will be treated in mathlib using <code>smul_comm_class</code>?</p>",
        "id": 214602054,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603731433
    },
    {
        "content": "<p>Yeah, if we get conjugate-linear maps soon(ish) we definitely want this code to be based on that. I think the best thing to do would be to remove the conjugate semimodule code and merge it.</p>",
        "id": 214605134,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603732663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> I would like to change your definition of the dual of a Hilbert space, so that the inner product is given by the polarization identity: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inner</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">normed_space.dual</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inner</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">𝓚</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n            <span class=\"bp\">+</span> <span class=\"n\">is_R_or_C.I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_R_or_C.I</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_R_or_C.I</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n            <span class=\"bp\">-</span> <span class=\"n\">is_R_or_C.I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_R_or_C.I</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_R_or_C.I</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>rather than copied over from the primal inner product by means of the equivalence:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inner</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">normed_space.dual</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inner</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">to_primal</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_primal</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>as you had written.  The advantage is that the new definition works for inner product spaces without a completeness hypothesis.  What do you think?</p>",
        "id": 214637196,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603748681
    },
    {
        "content": "<p>This also would mean that the statement that \"the mapping from <code>E</code> to its dual is an isometry\" has content, rather than following by definition.</p>",
        "id": 214637383,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603748805
    },
    {
        "content": "<p>That makes sense -- I hadn't thought about the completeness issue.  I guess you'll have to prove the <code>is_R_or_C</code> polarization identity first though, only the real case is there now and I've been too lazy so far to generalize it :-)</p>",
        "id": 214637453,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603748861
    },
    {
        "content": "<p>Yep, I am halfway there after a solid hour's work, it is not pleasant! :)</p>",
        "id": 214637572,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603748920
    },
    {
        "content": "<p>I have no doubt -- that's why I haven't done it...!</p>",
        "id": 214637977,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603749158
    },
    {
        "content": "<p>I was half-hoping that there were some mysteries of <code>is_R_or_C</code> which you would explain to me and which would improve things ....</p>",
        "id": 214638521,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603749489
    },
    {
        "content": "<p>Not really -- it mostly just works like <code>ℂ</code>. So at least it shouldn't be any more annoying than proving the complex polarization identity directly.</p>",
        "id": 214638817,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603749676
    },
    {
        "content": "<p>The one thing that is more annoying than <code>ℂ</code> is that coercions from reals have to be done manually, so <code>norm_cast</code> doesn't work.</p>",
        "id": 214639063,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603749818
    },
    {
        "content": "<p>Yep, just figured that out half an hour ago :)</p>",
        "id": 214639338,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603749988
    },
    {
        "content": "<p>(I wonder if it would be possible to get <code>norm_cast</code> working for <code>is_R_or_C</code>?  Need to ask someone who knows about tactics.)</p>",
        "id": 214639376,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603750031
    },
    {
        "content": "<p>I looked into it at the time, and I strongly suspect that the answer is no. We can't have proper coercions, because that causes a circular issue with the <code>𝕜=ℝ</code> case, and <code>norm_cast</code> really needs coercions from what I could gather from the code. Maybe it's possible to create a specialized version of <code>norm_cast</code> where we replace the coercions by the manual one in <code>is_R_or_C</code>, but I'm afraid that's above my pay grade at the moment :-)</p>",
        "id": 214639777,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603750270
    },
    {
        "content": "<p>I see, very interesting!</p>",
        "id": 214639807,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603750304
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lift_t\">docs#has_lift_t</a> work?</p>",
        "id": 214644302,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603753914
    },
    {
        "content": "<p>This is a coercion that requires an explicit up arrow.</p>",
        "id": 214644383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603753957
    },
    {
        "content": "<p>Hmm... maybe? It's worth looking into -- for some reason I've never run into these before.</p>",
        "id": 214646853,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603756258
    },
    {
        "content": "<p>It is (mis)used for coercion of a <code>finset</code> to a <code>set</code>.</p>",
        "id": 214649131,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603758280
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>fails. Doesn't look good...</p>",
        "id": 214652835,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603762244
    },
    {
        "content": "<p>I think that you can define it and it'll work.</p>",
        "id": 214654415,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603764391
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"n\">ℝ</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">of_real</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>This still fails -- I have no idea why...</p>",
        "id": 214656758,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603767600
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 214657553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603768692
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_R_or_C</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">of_real</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_R_or_C</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"n\">ℝ</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">of_real</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">is_R_or_C</span>\n</code></pre></div>",
        "id": 214659238,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603770878
    },
    {
        "content": "<p>the has_lift instance is not ok</p>",
        "id": 214659313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603770967
    },
    {
        "content": "<p>because it causes <code>has_lift_t</code> to loop</p>",
        "id": 214659316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603770983
    },
    {
        "content": "<p>OK, so basically the same reason we couldn't have the coercion either.</p>",
        "id": 214659325,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603771007
    },
    {
        "content": "<p>That's a shame.</p>",
        "id": 214659329,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603771016
    },
    {
        "content": "<p>you could make it a <code>has_{coe|lift}_t</code> instance</p>",
        "id": 214659339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603771030
    },
    {
        "content": "<p>Really? I'm pretty sure I tried making this a <code>has_coe_t</code> instance directly a while back and it failed.</p>",
        "id": 214659439,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603771177
    },
    {
        "content": "<p>And if I recall correctly, it was you who convinced me I should give up and do coercions manually :-)</p>",
        "id": 214659594,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603771340
    },
    {
        "content": "<p>Indeed it was: <a href=\"#narrow/stream/113489-new-members/topic/has_coe.20.E2.84.9D.20.E2.84.9D/near/207775998\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/has_coe.20.E2.84.9D.20.E2.84.9D/near/207775998</a></p>",
        "id": 214659632,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603771424
    },
    {
        "content": "<p>right... we don't have reflexive coe_t instances</p>",
        "id": 214659707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603771531
    },
    {
        "content": "<p>I think it should be possible to modify <code>norm_cast</code> to work with things other than <code>coe</code></p>",
        "id": 214659785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603771625
    },
    {
        "content": "<p>Are reflexive <code>has_coe_t</code> instances bad, or only <code>has_coe</code>?</p>",
        "id": 214659786,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603771629
    },
    {
        "content": "<p>A version of <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_R_or_C</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">of_real</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_R_or_C</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"n\">ℝ</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">of_real</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">is_R_or_C</span>\n</code></pre></div>",
        "id": 214659792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603771652
    },
    {
        "content": "<p>it looks identical to <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> 's</p>",
        "id": 214659844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603771721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Hilbert.20space.20is.20isometric.20to.20its.20dual/near/214637572\">said</a>:</p>\n<blockquote>\n<p>Yep, I am halfway there after a solid hour's work, it is not pleasant! :)</p>\n</blockquote>\n<p>I posted a WIP PR, <a href=\"https://github.com/leanprover-community/mathlib/issues/4798\">#4798</a>, anyone in the mood for some algebra problems is welcome to take over some of the sorries!</p>",
        "id": 214662253,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603775841
    },
    {
        "content": "<p>This should really, really be <code>has_coe_t</code> or <code>has_lift_t</code>.  Otherwise you get loops, as Mario's pointed out.  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_R_or_C</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">of_real</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_R_or_C</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_R_or_C</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">ℝ</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">of_real</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">is_R_or_C</span>\n</code></pre></div>",
        "id": 214670889,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603786812
    },
    {
        "content": "<p>I pushed a fix for the easiest sorry</p>",
        "id": 214671047,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1603786954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  Should we add a general reflexive instance for <code>has_lift_t</code> and/or <code>has_coe_t</code>?</p>",
        "id": 214671275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787127
    },
    {
        "content": "<p>Like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_base\">docs#coe_base</a>?</p>",
        "id": 214671396,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787220
    },
    {
        "content": "<p>That's just the singleton case</p>",
        "id": 214671442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787280
    },
    {
        "content": "<p>it implies that has_coe_t is the transitive closure of has_coe, but I am thinking about the reflexive transitive closure</p>",
        "id": 214671499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787306
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 214671528,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787330
    },
    {
        "content": "<p>Type class-wise, I don't think there would be any issues. <em>Except for non-commuting diamonds.</em></p>",
        "id": 214671571,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787379
    },
    {
        "content": "<p>But I don't think coercions should be used in this way.  If you explicitly write <code>(x : α)</code>, then you never need the reflexive instance.</p>",
        "id": 214671667,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787447
    },
    {
        "content": "<p>I agree, but the alternatives don't look great for Frederic's use case</p>",
        "id": 214671723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787499
    },
    {
        "content": "<p>I don't think we will get non-commuting diamonds since <code>f o id = f</code> is definitional</p>",
        "id": 214671796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787536
    },
    {
        "content": "<p>but it might be tricky to prove that all the time</p>",
        "id": 214671819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787547
    },
    {
        "content": "<p>We already have other reflexive instances (like <code>nat.cast_coe</code>).  These would not be definitionally equal to the general one.</p>",
        "id": 214672048,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787733
    },
    {
        "content": "<p>For Fréderic's use case we need a coercion for <code>is_R_or_C</code> anyhow, I'm not sure how a general reflexive instance helps here.</p>",
        "id": 214672132,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787790
    },
    {
        "content": "<p>well it would be weird if we had a reflexive instance only for real</p>",
        "id": 214672162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787836
    },
    {
        "content": "<p>Another (very realistic) option is to convince <code>norm_cast</code> that <code>is_R_or_C.of_real</code> is a coercion (it already knows about <code>has_coe_to_fun</code>, <code>has_coe_to_sort</code>; this is just one more function).</p>",
        "id": 214672173,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787850
    },
    {
        "content": "<p>That's my thought</p>",
        "id": 214672180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Hilbert.20space.20is.20isometric.20to.20its.20dual/near/214672162\">said</a>:</p>\n<blockquote>\n<p>well it would be weird if we had a reflexive instance only for real</p>\n</blockquote>\n<p>We also have it for nat, int, etc.</p>",
        "id": 214672187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787867
    },
    {
        "content": "<p>Personally, I think I'd prefer coercions over <code>is_R_or_C.of_real</code>.</p>",
        "id": 214672312,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603787987
    },
    {
        "content": "<p>you've convinced me that <code>[is_R_or_C K] : has_coe_t real K</code> would be no better or worse than <code>nat.has_coe</code></p>",
        "id": 214672333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603788001
    },
    {
        "content": "<p>it's a bit better, since the induced reflexive instance is definitional</p>",
        "id": 214672395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603788027
    },
    {
        "content": "<p>Well that's great news! I see there's a great docstring in <code>data/nat/cast</code> that gives the recipe...</p>",
        "id": 214700160,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603806073
    },
    {
        "content": "<p>Did a few more - done for now, though</p>",
        "id": 214715435,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1603812264
    },
    {
        "content": "<p>Great!</p>",
        "id": 214715532,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603812315
    },
    {
        "content": "<p>Regarding the casting:  If I understand correctly, there are two proposals:  to have a \"conditional\" coercion <code>[is_R_or_C K] : has_coe_t real K</code>, or to hard-code coercion-like behaviour into <code>norm_cast</code>.  Would the second proposal mean that one only had improved behaviour when using <code>norm_cast</code>, whereas the first proposal would apply to any situation where one wants to use casts (in <code>norm_cast</code> or out)?  If so, the first seems better.</p>",
        "id": 214715896,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603812465
    },
    {
        "content": "<p>yes, that's right. In particular, the first option would let you use <code>\\u</code> while the second requires some other notation</p>",
        "id": 214716058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603812520
    },
    {
        "content": "<p>And the first option would also let one cast like <code>(3:K)</code>, right?  (Which you can't currently do.)</p>",
        "id": 214717705,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603813105
    },
    {
        "content": "<p>Or rather, I think you can do this (because 3 is a numeral), but you can't currently take an <code>x</code> of type <code>ℝ</code> and cast by saying <code>(x:K)</code>.  The change would permit that.</p>",
        "id": 214722631,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603814915
    },
    {
        "content": "<p>Yes, I would much prefer the coercion as well.</p>",
        "id": 214724162,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1603815564
    },
    {
        "content": "<p>The coercion seems to work! See <a href=\"https://github.com/leanprover-community/mathlib/issues/4824\">#4824</a></p>",
        "id": 215046736,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1604019480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> This PR might make the remaining sorries in <a href=\"https://github.com/leanprover-community/mathlib/issues/4798\">#4798</a> a bit less painful :-)</p>",
        "id": 215046822,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1604019578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>  Very cool!</p>",
        "id": 215047950,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604021115
    }
]