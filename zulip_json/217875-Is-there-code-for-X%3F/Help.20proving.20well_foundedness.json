[
    {
        "content": "<p>I could use a little help understanding how to use the relevant lemmas surrounding well-foundedness. I want to prove something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">a1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a2</span> <span class=\"bp\">→</span> <span class=\"n\">prod.lex</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>On paper, I would rely on the descending chain condition. That is, it should be sufficient to say that there is no infinite descending chain <code>a1 &gt; a2 &gt; a3 &gt; ...</code> in <code>α</code>. Given I have <code>f</code> above, and that the lexicographic order on ℕ × ℕ is well-founded, such an infinite descending chain in <code>α</code> would result in an infinite descending chain in ℕ × ℕ, contradicting its well-foundedness. </p>\n<p>What theorems exist in mathlib to support this style of argument? I see <a href=\"https://leanprover-community.github.io/mathlib_docs/order/order_iso_nat.html#rel_embedding.well_founded_iff_no_descending_seq\">docs#rel_embedding.well_founded_iff_no_descending_seq</a> but I'm not sure how to leverage it.</p>",
        "id": 301307944,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1664392184
    },
    {
        "content": "<p>You could certainly use that lemma to formalize the contradiction setup you've described. If you use that lemma, that changes the goal to <code>is_empty (gt ↪r r)</code>, which is essentially <code>(gt ↪r r) → false</code>. To prove this goal, you need to show that for every <code>rel_embedding</code> (a monotone injective function) between the appropriate orders, you get a contradiction.</p>",
        "id": 301311311,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1664393363
    },
    {
        "content": "<p>That <code>rel_embedding</code> would basically be the descending chain you're talking about.</p>",
        "id": 301311602,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1664393461
    },
    {
        "content": "<p>However, to actually get that contradiction, you'd probably want to use that <code>rel_embedding</code> together with <code>hf</code> to create a <code>rel_embedding</code> representing a descending chain in <code>ℕ × ℕ</code>, at which point you'd refer to the well-foundedness of <code>ℕ × ℕ</code>.</p>",
        "id": 301311657,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1664393487
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 301311816,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664393547
    },
    {
        "content": "<p>You can shortcut some of this argument with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rel_embedding.well_founded\">docs#rel_embedding.well_founded</a> , which allows you to reduce the well-foundedness of <code>α</code> directly to the well-foundedness of <code>ℕ × ℕ</code>, if you can construct a <code>rel_embedding</code> from <code>f</code> and <code>hf</code>.</p>",
        "id": 301311872,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1664393570
    },
    {
        "content": "<p>That sounds promising. I think that's the theorem I was looking for.</p>",
        "id": 301312250,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1664393725
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">a1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a2</span> <span class=\"bp\">→</span> <span class=\"n\">prod.lex</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">subrelation.wf</span> <span class=\"n\">hf</span> <span class=\"bp\">$</span> <span class=\"n\">inv_image.wf</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">prod.lex_wf</span> <span class=\"n\">nat.lt_wf</span> <span class=\"n\">nat.lt_wf</span>\n</code></pre></div>",
        "id": 301312340,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664393747
    },
    {
        "content": "<p>What's the tactic mode version of this?</p>",
        "id": 301312969,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1664393992
    },
    {
        "content": "<p>The shortest tactic mode version of that would be <code>exact subrelation.wf hf $ inv_image.wf f $ prod.lex_wf nat.lt_wf nat.lt_wf,</code>, or more parenthetically, <code>exact subrelation.wf hf (inv_image.wf f (prod.lex_wf nat.lt_wf nat.lt_wf)),</code> but you could always whittle it down step by step, starting with <code>refine subrelation.wf hf _,</code></p>",
        "id": 301313463,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1664394174
    },
    {
        "content": "<p>or <code>refine rel_embedding.well_founded _ _,</code></p>",
        "id": 301313534,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1664394196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Help.20proving.20well_foundedness/near/301313463\">said</a>:</p>\n<blockquote>\n<p>The shortest tactic mode version of that would be <code>exact subrelation.wf hf $ inv_image.wf f $ prod.lex_wf nat.lt_wf nat.lt_wf,</code></p>\n</blockquote>\n<p>Well, yes, if you have a term you can always exact that term. I just always work in tactic mode so I was not familiar with the $ . </p>\n<p>Thank you both for your help. I think this should give me a path forward.</p>",
        "id": 301313884,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1664394330
    },
    {
        "content": "<p>Ok now I see that <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> 's proof is really the one I had in mind when I first started. I abandoned it when I started to get confused. I can't actually start with <code>rel_embedding.well_founded</code> because my <code>f</code> is not a rel_embedding (it's not injective). </p>\n<p>Now I'm surprised a more general version of this isn't already in mathlib somewhere. This is a standard approach for showing well-foundedness: map a given &lt;-relation into a well-founded one in such a way that &lt; is preserved. So something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">a1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">subrelation.wf</span> <span class=\"n\">hf</span> <span class=\"bp\">$</span> <span class=\"n\">inv_image.wf</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">wf</span>\n</code></pre></div>",
        "id": 301318857,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1664396198
    }
]