[
    {
        "content": "<p>A natural notion that there exists for monoids (or any time do you have an binary operation) are the subobjects that can appear as \"kernels\" (in the \"tradicional\" sense) of maps <code>f</code>  preserving the operation: so <code>comaps f ⊥</code>. There is however a caracterization without using maps and so on. The  definition for monoids can be something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.submonoid.operations</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">saturated_submonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">saturate_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}:</span>  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">saturate_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does it exists already in lean? <br>\nThis notion is important in the theory of ideals in comm_semirings, and in general for semimodules over semirings.</p>",
        "id": 224635761,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1612087491
    },
    {
        "content": "<p>I don't thing this exists today. Presumably if it did exist there would be a coercion from <code>subgroup</code> to <code>saturated_submonoid</code> by using <code>mul_mem</code> on <code>a * b</code> and <code>inv b</code></p>",
        "id": 224636266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612088174
    },
    {
        "content": "<p>why a coercion? That seems likely to loop</p>",
        "id": 224636298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612088245
    },
    {
        "content": "<p>In case you have inverse, like for groups, all subobjects are saturated. <br>\nDo you think it is interesting if I try to do some code on this? How about the name? Some call it \"substractive\" instead of saturated, at least in semiring theory, but I am not sure if it has a name in monoid theory, as I am not an expert.</p>",
        "id": 224636556,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1612088634
    },
    {
        "content": "<p>I don't see why it would loop, but I guess a <code>.to_whatever</code> projection is fine too - whatever we already do for conversion from subgroups to submonoids</p>",
        "id": 224636627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612088727
    },
    {
        "content": "<p>Presumably you'd want a version of this for submodules too?</p>",
        "id": 224636635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612088758
    },
    {
        "content": "<p>And 2 versions for subsemirings (saturation of addition and multiplication), and one for subring (saturation of multiplication)</p>",
        "id": 224636714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612088841
    },
    {
        "content": "<p>\"cancellative\" also comes to mind, because it's sort of analogous to being closed under subtraction/division</p>",
        "id": 224636780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612088898
    },
    {
        "content": "<p>Is substractive a typo of subtractive?</p>",
        "id": 224636791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612088944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/saturated.20submonoids.2C.20kernels.20and.20beyond/near/224636791\">said</a>:</p>\n<blockquote>\n<p>Is substractive a typo of subtractive?</p>\n</blockquote>\n<p>Yeap, sorry. Substractive. A version for submodules also. And for add_monoids, etc.</p>",
        "id": 224638011,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1612090602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think  \"cancelative\" is a bad name, because cancelative_monoid denotes some special monoids, where one can cancels like for integral domains for commutative rings: a<em>b=a</em>c implies b=c   (if the monoid has a zero, then one asks for a not to be zero, of course).</p>",
        "id": 224638208,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1612090836
    },
    {
        "content": "<p>It looks like you made the same typo again!</p>",
        "id": 224638361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612091036
    },
    {
        "content": "<p>But yes, we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cancel_monoid\">docs#cancel_monoid</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cancel_monoid_with_zero\">docs#cancel_monoid_with_zero</a>, which use a slightly different meaning of cancel to what Mario is proposing.</p>",
        "id": 224638444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612091129
    },
    {
        "content": "<p>Soustraire. Patrick also occasionally talks about substraction. It's a bit like how positif != positive. Being bilingual must be hard work!</p>",
        "id": 224638836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612091672
    },
    {
        "content": "<p>I was wondering where that misspelling originated - maybe it's the english who are wrong!</p>",
        "id": 224639033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612091938
    },
    {
        "content": "<p>Regarding \"saturated\", the wikipedia definition seems stronger and does not regard <code>{1, 4, 4^2, ...}</code> as saturated as it does not contain <code>2</code> or its closure - whereas your definition does.</p>",
        "id": 224639247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612092195
    },
    {
        "content": "<p>Yes, I'm definitely in favor of reforming that subtraction spelling into substraction!</p>",
        "id": 224639253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612092210
    },
    {
        "content": "<p>As far as I can tell, the Latin root is \"sub\", so the English version is closer to the original.  In French, the word \"sub\" became \"sous\" giving rise to soustraire.  So my hunch would be to either have the \"b\" or the \"s\", but not both!<br>\n;-)</p>",
        "id": 224639394,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612092372
    },
    {
        "content": "<p>In Italian, the \"bt\" merged into a double \"t\", producing sottrarre.</p>",
        "id": 224639444,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612092445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315546\">Xavier Xarles</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/saturated.20submonoids.2C.20kernels.20and.20beyond/near/224638208\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> I think  \"cancelative\" is a bad name, because cancelative_monoid denotes some special monoids, where one can cancels like for integral domains for commutative rings: <code>a*b=a*c</code> implies <code>b=c</code>   (if the monoid has a zero, then one asks for a not to be zero, of course).</p>\n</blockquote>\n<p>Yes, we already have that definition. I think this is in much the same spirit as your submonoid definition, hence <code>cancellative_submonoid</code></p>",
        "id": 224639518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612092506
    },
    {
        "content": "<p>I think the only other possible meaning for such a term would be something like <code>a * b \\in S -&gt; b \\in S</code> without the assumption on <code>a</code>, which gets into the difference between an ideal and a subring</p>",
        "id": 224639620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612092637
    },
    {
        "content": "<p>What do you call a submodule where <code>r smul m in S -&gt; m in S</code>?</p>",
        "id": 224640148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612093360
    },
    {
        "content": "<p>I don't know. \"downward closed\" (in the divisibility order)?</p>",
        "id": 224640350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612093621
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"315546\">@Xavier Xarles</span> my answer to your question of whether it is interesting to write some code on this is \"definitely -- and it should be on a branch of mathlib rather than an independent project\"</p>",
        "id": 224643865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612098530
    },
    {
        "content": "<p>I must say that the condition I wrote is the one that appears as \"kernels of congruences\" only for commutative monoids. For non-commutative ones needs more conditions, like for subgroups one needs the \"normal subgroup condition\".</p>",
        "id": 224655967,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1612115470
    }
]