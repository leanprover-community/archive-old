[
    {
        "content": "<p>I am trying to show a claim related to Cauchy sequences.     I understand there is support in mathlib for Cauchy sequences, but I want to understand this myself.    I get to this state in my proof/code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">u0</span> <span class=\"n\">u1</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seqQ</span><span class=\"o\">,</span>\n<span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">u0.z</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u1.z</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">u1.z</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u0.z</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there a way to use <code>abs_sub_comm</code> inside the conclusion somehow so I can use the <code>h0</code> hypothesis?  </p>\n<p>I can unwrap and rewrap the quantifiers, but I am thinking there has to be a better way.  Any help is appreciated.</p>",
        "id": 295999558,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661806684
    },
    {
        "content": "<p>Use <code>simp_rw</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 295999621,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661806714
    },
    {
        "content": "<p>Thank you.  It worked great.</p>",
        "id": 296000250,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661806971
    },
    {
        "content": "<p>I once <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Automatic.20intro.2Fcases.2Fspecialize.2Fuse.20dance/near/203997071\">made a tactic</a> for this situation, and to use it you'd write something like <code>enter h0 with ε hε N n hN</code>. But that's not in mathlib, and it might not even work anymore.</p>\n<p>Another suggestion is <code>simpa [abs_sub_comm] using h0</code></p>",
        "id": 296001594,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661807558
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv\">tactic#conv</a> can also be very useful for things like this, where you need very precise control of the rewrites. Sometimes it can be a little inconvenient if the rewrites have nontrivial side conditions though</p>",
        "id": 296016809,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661816824
    }
]