[
    {
        "content": "<p>I'm back thinking about graded rings and how better to do <a href=\"https://github.com/leanprover-community/mathlib/issues/9717\">#9717</a> . I think that we need some internally graded ring. Do we have something like this already? I just looked around and found internally graded monoids, groups and modules, but not rings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plays_well_with_multiplication</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ring_is_internally_graded</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">direct_sum.add_subgroup_is_internal</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">plays_well_with_multiplication</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>Furthermore, should it be a typeclass?</p>",
        "id": 259105057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635258683
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 259106401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635259152
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.gsemiring.of_submodules\">docs#direct_sum.gsemiring.of_submodules</a> is the closest we have</p>",
        "id": 259117003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635263158
    },
    {
        "content": "<p>I think what you're proposing is replacing its arguments with typeclasses</p>",
        "id": 259117102,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635263186
    },
    {
        "content": "<p>Also don't you need that the bijection implied by <code>is_internal</code> preserves multiplication? Or is that always true?</p>",
        "id": 259118004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635263591
    },
    {
        "content": "<p>I didn't define the external multiplication at all</p>",
        "id": 259124930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635266469
    },
    {
        "content": "<p>so you can just define it to be the internal multiplication</p>",
        "id": 259124967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635266486
    },
    {
        "content": "<p>I suspect I can make a term of type <code>direct_sum.gsemiring (lam x, \\u(A x))</code> knowing just <code>plays_well_with_multiplication</code> and also <code>plays_well_with_identity : 1 \\in A 0</code> (which I forgot above).</p>",
        "id": 259125486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635266671
    },
    {
        "content": "<p>Yes, I'm sure you can make that instance</p>",
        "id": 259136461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635271197
    },
    {
        "content": "<p>My question is whether you have enough to follow up with <code>R ≃+* ⊕ i, A i</code></p>",
        "id": 259136706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635271286
    },
    {
        "content": "<p>And I claim that mathematically I do, although one will need to know that an abelian group homomorphism from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⊕</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\oplus_i A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to somewhere is determined by what it does on each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 259138261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635271986
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_semiring\">docs#direct_sum.to_semiring</a></p>",
        "id": 259138658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635272167
    },
    {
        "content": "<p>Oh, or maybe just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_monoid\">docs#direct_sum.to_monoid</a> since you said abelian group not ring</p>",
        "id": 259138807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635272249
    },
    {
        "content": "<p>I think the pieces you need are mostly there, just not the API</p>",
        "id": 259138954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635272302
    },
    {
        "content": "<p>I haven't written any non-teaching Lean code for so long, so I thought I'd have a go; I didn't finish though and now I need to go and cook:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plays_well_with_multiplication</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plays_well_with_one</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ring_is_internally_graded</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">direct_sum.add_subgroup_is_internal</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">plays_well_with_one</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">plays_well_with_multiplication</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gsemiring.of_ring_is_internally_graded</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ring_is_internally_graded</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">direct_sum.gsemiring</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">hint</span><span class=\"o\">,</span> <span class=\"n\">hone</span><span class=\"o\">,</span> <span class=\"n\">hmul</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">ai</span> <span class=\"n\">aj</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ai.1</span> <span class=\"bp\">*</span> <span class=\"n\">aj.1</span><span class=\"o\">,</span> <span class=\"n\">hmul</span> <span class=\"n\">ai.2</span> <span class=\"n\">aj.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">ai</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_zero</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">zero_mul</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">mul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">hone</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ai</span><span class=\"o\">⟩,</span> <span class=\"n\">unfold</span> <span class=\"n\">has_one.one</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">has_mul.mul</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ai</span><span class=\"o\">⟩,</span> <span class=\"n\">unfold</span> <span class=\"n\">has_one.one</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">has_mul.mul</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ai</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">aj</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">ak</span><span class=\"o\">⟩,</span> <span class=\"n\">unfold</span> <span class=\"n\">has_mul.mul</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">gnpow</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ai</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">hone</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">zero_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">ai</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ai.1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ai</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">hmul</span> <span class=\"n\">ai.2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ai</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">succ_nsmul</span> <span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">gnpow_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">gnpow_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 259146014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635275382
    },
    {
        "content": "<p>What are the correct names for all these things which I'm giving silly names to?</p>",
        "id": 259146034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635275398
    },
    {
        "content": "<p>Your last def would be shorter and sorry-free in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.gsemiring.of_add_subgroups\">docs#direct_sum.gsemiring.of_add_subgroups</a></p>",
        "id": 259153221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635278561
    },
    {
        "content": "<p>(and does not use the fact the grading is internal!)</p>",
        "id": 259153562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635278703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> do you want to take over? I'm not sure I'll have any more time for this today</p>",
        "id": 259153756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635278778
    },
    {
        "content": "<p>I think to make the API worthwhile, the <code>plays_well_with_multiplication</code> defs probably ought to be typeclasses</p>",
        "id": 259154299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635279007
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.algebra</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">graded_ring</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">is_internal</span> <span class=\"o\">:</span>  <span class=\"n\">direct_sum.add_subgroup_is_internal</span> <span class=\"n\">A</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">one_degree_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">mul_respect_grading</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gsemiring.of_ring_is_internally_graded</span> <span class=\"o\">[</span><span class=\"n\">graded_ring</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">direct_sum.gsemiring</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">direct_sum.gsemiring.of_add_subgroups</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">graded_ring.one_degree_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">ai</span> <span class=\"n\">aj</span><span class=\"o\">,</span> <span class=\"n\">graded_ring.mul_respect_grading</span> <span class=\"n\">ai.2</span> <span class=\"n\">aj.2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 259166049,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635284766
    },
    {
        "content": "<p>By typeclass, do you mean something like this? Maybe pr <a href=\"https://github.com/leanprover-community/mathlib/issues/9717\">#9717</a> should be rewritten using internal definitions so that homogeneous ideals and other lemmas would work for <code>mv_polynomial</code></p>",
        "id": 259166148,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635284826
    },
    {
        "content": "<p>Can you construct the ring isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>≅</mo><msub><mo>⊕</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">R\\cong \\oplus_i A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 259168685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635286052
    },
    {
        "content": "<p>I guess <code>≃+*</code> will be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv\">docs#ring_equiv</a></p>",
        "id": 259168729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635286080
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">graded_ring</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span>  <span class=\"n\">direct_sum.to_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">,</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">equiv.of_bijective</span> <span class=\"n\">_</span> <span class=\"n\">graded_ring.is_internal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">refine</span> <span class=\"n\">equiv.symm_apply_apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">convert</span> <span class=\"n\">equiv.apply_symm_apply</span> <span class=\"o\">(</span><span class=\"n\">equiv.of_bijective</span> <span class=\"n\">_</span> <span class=\"n\">graded_ring.is_internal</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 259171138,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635287336
    },
    {
        "content": "<p>This should work (mod <code>sorries</code>)</p>",
        "id": 259171174,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635287356
    },
    {
        "content": "<p>Oh very nice! I think <code>map_mul'</code> was the sorry Eric was concerned about</p>",
        "id": 259171352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287438
    },
    {
        "content": "<p>I think the next thing we want is a \"project onto I'th factor\" function <code>proj i : R -&gt; R</code> and a proof that <code>proj i r ∈ A i</code></p>",
        "id": 259171572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287587
    },
    {
        "content": "<p>Can we define <code>proj i</code> to be the composition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><msub><mo>⊕</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">R \\to \\oplus_i A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⊕</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub><mo>→</mo><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\oplus_i A_i \\to A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">A_i \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span></p>",
        "id": 259171920,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635287838
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">direct_sum.eq_sum_of</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">direct_sum.eq_sum_of</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_mul_sum</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.map_sum</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.map_sum</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.map_sum</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_mul_sum</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"n\">hmem</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 259172251,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635288085
    },
    {
        "content": "<p>Right, this might be the only way to do it</p>",
        "id": 259172323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635288129
    },
    {
        "content": "<p>Something like this should work: write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><msub><mo>⊕</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x:\\oplus_i A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_i x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>:</mo><msub><mo>⊕</mo><mi>j</mi></msub><msub><mi>A</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">y:\\oplus_j A_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><msub><mi>y</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum y_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>. Then expand etc.</p>",
        "id": 259172345,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635288153
    },
    {
        "content": "<p>Using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_semiring\">docs#direct_sum.to_semiring</a> will be easier than using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_add_monid\">docs#direct_sum.to_add_monid</a> and filling the map_mul manually (as I said upthread!)</p>",
        "id": 259178172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635293011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span>, your <code>graded_ring</code> typeclass is what my comment was suggesting yes.</p>",
        "id": 259178383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635293203
    },
    {
        "content": "<p>I'd  argue though that we should use a data-carrying typeclass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">graded_ring</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">decompose</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">⊕</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"n\">decompose</span> <span class=\"gr\">sorry</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"n\">decompose</span> <span class=\"gr\">sorry</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">one_degree_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">mul_respect_grading</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Where the <code>sorry</code>s are the <code>to_add_monoid subtype</code> monster I don't want to type on mobile.</p>",
        "id": 259178730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635293572
    },
    {
        "content": "<p>I have opened another pr (<a href=\"https://github.com/leanprover-community/mathlib/issues/10002\">#10002</a>) containing the above code and an instance that <code>mv_polynomial</code> is graded</p>",
        "id": 259223259,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635333429
    },
    {
        "content": "<p>Thanks! Please update the title to follow the style guide.</p>",
        "id": 259223639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635333660
    },
    {
        "content": "<p>At some point we will need/want graded algebras. Should we just do everything for graded algebras from the start?</p>",
        "id": 259223921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635333808
    },
    {
        "content": "<p>So, should the <code>A i</code> be submodules over some base ring?</p>",
        "id": 259223947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635333829
    },
    {
        "content": "<p>That would also deal with the ring/semiring distinction (in case someone wants to consider the grading of polynomials over <code>ℕ</code>)</p>",
        "id": 259224045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635333862
    },
    {
        "content": "<p>We have all the pieces to build that too</p>",
        "id": 259224384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635334029
    },
    {
        "content": "<p>I think the question is whether we want to force users to convert their <code>add_submonoid</code>s and <code>add_subgroup</code>s into nat and int-<code>submodule</code>s.</p>",
        "id": 259224437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635334061
    },
    {
        "content": "<p>At the moment, we just duplicate all the API for each of them</p>",
        "id": 259224485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635334084
    },
    {
        "content": "<p>My hunch is that whatever the user is doing will almost always be an algebra already. Basically, I claim that every interesting lemma about graded rings also has a companion for graded algebras, and the user should be proving that one instead.</p>",
        "id": 259224598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635334138
    },
    {
        "content": "<p>This was the type of problem I was trying to solve with <code>set_like</code> but lost steam on; if we had a typeclass saying \"this is a subtype whose addition / smul / zero is the one induced by coercion\", then we could generalize</p>",
        "id": 259224608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635334145
    },
    {
        "content": "<p>I think there are very few cases where you genuinely want to work with a graded <code>ℤ</code>-algebra, instead of generalizing.</p>",
        "id": 259224662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635334189
    },
    {
        "content": "<p>For reference, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_algebra\">docs#direct_sum.to_algebra</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.galgebra.of_submodules\">docs#direct_sum.galgebra.of_submodules</a> are the parallel defs to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_semiring\">docs#direct_sum.to_semiring</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.gsemiring.of_add_subgroups\">docs#direct_sum.gsemiring.of_add_subgroups</a>.</p>",
        "id": 259224721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635334227
    },
    {
        "content": "<p>If ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is graded by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi><mo>→</mo><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\iota\\to A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, do we require that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>A</mi><mi>j</mi></msub><mo>=</mo><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">A_i\\cap A_j = \\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">⊥</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo mathvariant=\"normal\">≠</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i\\ne j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>?</p>",
        "id": 259584677,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635542370
    },
    {
        "content": "<p>Shameless plug of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pairwise_disjoint\">docs#set.pairwise_disjoint</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/9898\">#9898</a> which gives you the correct generality for what you just said.</p>",
        "id": 259585081,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635542627
    },
    {
        "content": "<p>No it won't, that statement isn't strong enough; you need the <code>sup_indep</code> PR for that, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>.</p>",
        "id": 259586550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635543603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span>, Are you looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.submodule_is_internal.independent\">docs#direct_sum.submodule_is_internal.independent</a>?</p>",
        "id": 259586595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635543620
    },
    {
        "content": "<p>Uh? Okay. But that's not what Jujian just wrote.</p>",
        "id": 259586778,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635543754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/graded.20rings/near/259586595\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span>, Are you looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.submodule_is_internal.independent\">docs#direct_sum.submodule_is_internal.independent</a>?</p>\n</blockquote>\n<p>Thank you.</p>",
        "id": 259586854,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635543823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/graded.20rings/near/259586778\">said</a>:</p>\n<blockquote>\n<p>Uh? Okay. But that's not what Jujian just wrote.</p>\n</blockquote>\n<p>I originally wrote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>A</mi><mi>j</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A_i \\cap A_j = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, I thought <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> might be confused with empty set so I changed it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">\\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">⊥</span></span></span></span></p>",
        "id": 259586929,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635543870
    },
    {
        "content": "<p>No, that's not what I meant. There's a difference between asking pairwise disjointness and arbitrary disjointness.</p>",
        "id": 259587131,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635544059
    },
    {
        "content": "<p>Typicall, take the vector subspaces of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> <code>(x, 0)</code>, <code>(0, x)</code>, <code>(x, x)</code>. They are pairwise disjoint but are each in the sup of the other two.</p>",
        "id": 259587238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635544144
    },
    {
        "content": "<p>That's the difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pairwise_disjoint\">docs#set.pairwise_disjoint</a> and <code>finset.sup_indep</code> (introduced in <a href=\"https://github.com/leanprover-community/mathlib/issues/9867\">#9867</a>)/docs#complete_lattice.independent.</p>",
        "id": 259587277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635544186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , since each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are only <code>add_subgroup R</code>, is there a version of <code>direct_sum.add_subgroup_is_internal.independent</code>? Thank you.</p>",
        "id": 259587321,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635544203
    },
    {
        "content": "<p>No, because it would have been annoying to repeat the proof two more times, so I didn't bother</p>",
        "id": 259587363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544236
    },
    {
        "content": "<p>Let me try and copy paste then to see if I can do it.</p>",
        "id": 259587388,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635544266
    },
    {
        "content": "<p>There might be an easier way</p>",
        "id": 259587396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544274
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_subgroup.to_int_submodule\">docs#add_subgroup.to_int_submodule</a> to convert your subgroups into submodules</p>",
        "id": 259587412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544292
    },
    {
        "content": "<p>And then probably use the lemmas, then massage the results back into statements about <code>add_subgroup</code>s</p>",
        "id": 259587429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544306
    },
    {
        "content": "<p>Alternative, abandon <code>add_subgroup</code> altogether and just work with <code>submodule int R</code> which is isomorphic anyway</p>",
        "id": 259587497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544332
    },
    {
        "content": "<p>Which is what <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> suggested upthread I think. It feels sort of ugly, but repeating everything three times is more ugly, especially if we can't work out how to reuse the proofs</p>",
        "id": 259587555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544385
    },
    {
        "content": "<p>The only reason I am asking for this is because I want the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">graded_ring.proj_homogeneous_element</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">graded_ring.proj</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 259587716,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635544512
    },
    {
        "content": "<p>I couldn't get it work without knowing trivial intersection. If I could get this lemma without trivial intersection then we can delay making the decesion whether we should use <code>submodule int R</code></p>",
        "id": 259587836,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635544583
    },
    {
        "content": "<p>If it's just one lemma, then I'd probably try to do the <code>add_subgroup</code> to <code>submodule int</code> dance inside your proof</p>",
        "id": 259587911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544665
    },
    {
        "content": "<p>That is, prove the statement for submodules inside that proof, then use <code>convert submodule_proof</code> and see what nasty goals arise</p>",
        "id": 259587989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544701
    },
    {
        "content": "<p>Note that as types, <code>↥(A i)</code> and <code>↥(A i).to_int_subgroup</code> are defeq</p>",
        "id": 259588053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544758
    },
    {
        "content": "<p>I couldn't find <code>add_subgroup.to_int_module</code></p>",
        "id": 259588172,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635544814
    },
    {
        "content": "<p><del>Hmm, I could have sworn that existed</del> <del>fixed the link above</del></p>",
        "id": 259588251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544845
    },
    {
        "content": "<p>Seems we only have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_submonoid.to_nat_submodule\">docs#add_submonoid.to_nat_submodule</a></p>",
        "id": 259588338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544919
    },
    {
        "content": "<p>Do you want to make a quick PR to define the int one too?</p>",
        "id": 259588385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544927
    },
    {
        "content": "<p><code>add_comm_group.int_module</code><br>\nthere is this</p>",
        "id": 259588397,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635544940
    },
    {
        "content": "<p>This should work</p>",
        "id": 259588415,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635544958
    },
    {
        "content": "<p>That's only half the picture</p>",
        "id": 259588434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544976
    },
    {
        "content": "<p>You should be able to just duplicate what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_submonoid.to_nat_submodule\">docs#add_submonoid.to_nat_submodule</a> does, probably in the same file if you're lucky</p>",
        "id": 259588457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635544992
    },
    {
        "content": "<p>Under the hood, lean will find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group.int_module\">docs#add_comm_group.int_module</a> when type checking your statement</p>",
        "id": 259588482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635545008
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7221\">#7221</a> was the PR that added the nat one; I think we left the int one to avoid using all of <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>'s time!</p>",
        "id": 259588928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635545349
    },
    {
        "content": "<p>Thanks for the suggestion. It's getting late. I will try to do this tomorrow. Have a good night</p>",
        "id": 259589078,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635545431
    },
    {
        "content": "<p>I am too old to remember what I did 6 months ago <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259590721,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635546538
    },
    {
        "content": "<p>That's what <code>git blame</code> is for ;)</p>",
        "id": 259693061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635547421
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10051\">#10051</a>, now I sleep 🤪</p>",
        "id": 259693587,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635547796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/graded.20rings/near/259587321\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> , since each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are only <code>add_subgroup R</code>, is there a version of <code>direct_sum.add_subgroup_is_internal.independent</code>? Thank you.</p>\n</blockquote>\n<p>I PR'd this in <a href=\"https://github.com/leanprover-community/mathlib/issues/10108\">#10108</a></p>",
        "id": 259997877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635861252
    },
    {
        "content": "<p>I'm trying a slightly different approach to graded rings in <a href=\"https://github.com/leanprover-community/mathlib/issues/10127\">#10127</a>, which I'll have another look at tomorrow</p>",
        "id": 260069360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635893886
    }
]