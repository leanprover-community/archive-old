[
    {
        "content": "<p>Is there a version of ssubset_trans but with (h' : b ⊆ c)?</p>",
        "id": 276734041,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648312415
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ssubset_trans\">docs#ssubset_trans</a></p>",
        "id": 276734051,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648312440
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_subset.subset.trans\">docs#has_subset.subset.trans</a></p>",
        "id": 276734095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648312450
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ssubset_of_ssubset_of_subset\">docs#ssubset_of_ssubset_of_subset</a></p>",
        "id": 276734112,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648312486
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_subset.subset.trans_ssubset\">docs#has_subset.subset.trans_ssubset</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_ssubset.ssubset.trans_subset\">docs#has_ssubset.ssubset.trans_subset</a></p>",
        "id": 276734123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648312508
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_ssubset.ssubset.trans_subset\">docs#has_ssubset.ssubset.trans_subset</a></p>",
        "id": 276734127,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648312513
    },
    {
        "content": "<p>semantic satiation <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 276734143,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648312542
    },
    {
        "content": "<p>Thanks guys.</p>",
        "id": 276734964,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648313688
    },
    {
        "content": "<p>It looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ssubset_of_subset_of_ssubset\">docs#ssubset_of_subset_of_ssubset</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ssubset_of_ssubset_of_subset\">docs#ssubset_of_ssubset_of_subset</a> should be marked <code>@[trans]</code>, which would be useful for when <code>calc</code> is eventually fixed.</p>\n<p>It's occurred to me that it would be useful (and seemingly possible) to have a fancier <code>transitivity</code> tactic that can look up <code>trans</code> lemmas given the LHS relations, so for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">transitivity</span> <span class=\"n\">_</span> <span class=\"bp\">⊂</span> <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>where you can fill in those three underscores. (I suppose this is no different from <code>calc _ ⊂ _ : _ ... ⊆ _ : _</code>, just less noisy looking.)</p>",
        "id": 276737467,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648317017
    },
    {
        "content": "<p>Aside: would it be too weird if <code>a ⊂ b ⊆ c</code> parsed as <code>a ⊂ b ∧ b ⊆ c</code>? Languages like Mathematica and Python do this. Can Lean?</p>\n<p>Would it be weird if \"cute binders\" supported this as well for chains of two relations, so for example <code>∀ (1 ≤ x &lt; 10), 1 ≤ x^2 &lt; 100</code>? (Having seen the current implementation for cute binders, this might be asking too much.)</p>",
        "id": 276737648,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648317293
    },
    {
        "content": "<p><code>∀ (1 ≤ x &lt; 10)</code>, and for that matter, <code>∀ (1 ≤ x)</code>, always looks a little weird to me, like you're quantifying over all <code>1</code>s.</p>",
        "id": 276788154,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648387310
    },
    {
        "content": "<p>Yeah I explicitly avoid that when blackboard lecturing. But for all eps&gt;0 is fine; that's why we have it in mathlib even though it's <code>gt</code></p>",
        "id": 276791690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648392074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/mixed.20version.20of.20ssubset_trans/near/276737467\">said</a>:</p>\n<blockquote>\n<p>It looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ssubset_of_subset_of_ssubset\">docs#ssubset_of_subset_of_ssubset</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ssubset_of_ssubset_of_subset\">docs#ssubset_of_ssubset_of_subset</a> should be marked <code>@[trans]</code>, which would be useful for when <code>calc</code> is eventually fixed.</p>\n<p>It's occurred to me that it would be useful (and seemingly possible) to have a fancier <code>transitivity</code> tactic that can look up <code>trans</code> lemmas given the LHS relations, so for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">transitivity</span> <span class=\"n\">_</span> <span class=\"bp\">⊂</span> <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>where you can fill in those three underscores. (I suppose this is no different from <code>calc _ ⊂ _ : _ ... ⊆ _ : _</code>, just less noisy looking.)</p>\n</blockquote>\n<p>Oh I really like this idea. I find this particular naming scheme relatively easy to remember, but this would be very readable.</p>\n<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span> Some of the lemma names given in this thread are analogous to <code>le</code>/<code>lt</code> lemmas such as <code>lt_trans</code> and <code>lt_of_le_of_lt</code> (analogous to <code>ssubset_of_subset_of_ssubset</code>).</p>",
        "id": 276793542,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1648394770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/mixed.20version.20of.20ssubset_trans/near/276788154\">said</a>:</p>\n<blockquote>\n<p><code>∀ (1 ≤ x)</code>, always looks a little weird to me, like you're quantifying over all <code>1</code>s.</p>\n</blockquote>\n<p>Yeah, that one fails the \"abstraction test\": <code>∀ (y ≤ x)</code> shouldn't suddenly have completely different meaning.</p>",
        "id": 276794776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648396771
    }
]