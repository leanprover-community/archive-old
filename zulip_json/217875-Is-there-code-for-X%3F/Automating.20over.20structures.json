[
    {
        "content": "<p>I see that lots of work is being put into refactoring the ideas of <code>submonoid</code>, <code>subgroup</code>, <code>subring</code>, etc. I've written a definition based on flypitch for a <code>substructure</code> of an arbitrary first-order structure, which should in theory generalize all of these, for the right choices of language. If we had an accepted mathlib definition for what a <code>substructure</code> should be in that context, how far away would we be from being able to actually apply it to all relevant structures?</p>",
        "id": 204986843,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595649735
    },
    {
        "content": "<p>(my code for <code>substructure</code> so far: <a href=\"https://github.com/leanprover-community/mathlib/blob/fol-attempt/src/model_theory/substructure.lean#L9\">https://github.com/leanprover-community/mathlib/blob/fol-attempt/src/model_theory/substructure.lean#L9</a>)</p>",
        "id": 204986847,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595649762
    },
    {
        "content": "<p>Is this the kind of thing that could be done with a tactic like <code>to_additive</code>,  a significantly harder-to-write tactic, or is it somehow beyond what Lean can do at the moment?</p>",
        "id": 204986857,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595649831
    },
    {
        "content": "<p>I wonder if it's possible to generate something definitionally equal to the current lemmas based on the type of <code>mk</code> etc.</p>",
        "id": 204987289,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595650641
    },
    {
        "content": "<p>I mean, if you have a list of types of functions, then you can generate <code>fun_mem</code> using some <code>list.foldl</code> or <code>list.foldr</code>.</p>",
        "id": 204987340,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595650714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Automating.20over.20structures/near/204986857\">said</a>:</p>\n<blockquote>\n<p>Is this the kind of thing that could be done with a tactic like <code>to_additive</code>,  a significantly harder-to-write tactic, or is it somehow beyond what Lean can do at the moment?</p>\n</blockquote>\n<p>I think this would be your best bet, but it also sounds like it will be quite a bit harder-to-write...</p>",
        "id": 204987650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595651351
    }
]