[
    {
        "content": "<p>Where should these two lemmas go?<br>\nI wanted to put them in <code>data.real.basic</code> but <code>map_cInf_of_continuous_at_of_monotone</code> requires <code>topology.algebra.ordered.basic</code> and <code>topological_space ℝ</code>. For info, <code>bdd_below_smul_iff_of_pos</code> and <code>bdd_above_smul_iff_of_pos</code> are added in <a href=\"https://github.com/leanprover-community/mathlib/issues/9078\">#9078</a> and will reside in <code>algebra.bounds</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Sup_smul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.smul_set_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">set.image_smul</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">map_cSup_of_continuous_at_of_monotone</span> <span class=\"o\">(</span><span class=\"n\">continuous_mul_left</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span>\n      <span class=\"o\">(</span><span class=\"n\">monotone_mul_left_of_nonneg</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hs</span> <span class=\"n\">h</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Sup_of_not_bdd_above</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">ha.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">zero_smul_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cSup_singleton</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Sup_of_not_bdd_above</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">bdd_above_smul_iff_of_pos</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Inf_smul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.smul_set_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Inf_empty</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">set.image_smul</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">map_cInf_of_continuous_at_of_monotone</span> <span class=\"o\">(</span><span class=\"n\">continuous_mul_left</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span>\n      <span class=\"o\">(</span><span class=\"n\">monotone_mul_left_of_nonneg</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hs</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Inf_of_not_bdd_below</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">ha.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">zero_smul_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cInf_singleton</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">real.Inf_of_not_bdd_below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Inf_of_not_bdd_below</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">bdd_below_smul_iff_of_pos</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252437614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631097210
    },
    {
        "content": "<p>Those should generalize to a smul on each side</p>",
        "id": 252458060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631107323
    },
    {
        "content": "<p>(or at least, to the action by <code>nnreal</code>)</p>",
        "id": 252458189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631107380
    },
    {
        "content": "<p>Sure, yeah. But where? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 252458408,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631107463
    },
    {
        "content": "<p>You can prove it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.map_cSup\">docs#order_iso.map_cSup</a> instead of continuity.</p>",
        "id": 253350150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631670008
    },
    {
        "content": "<p>If <code>0 &lt; a</code>, then multiplication by <code>a</code> is an <code>order_iso</code>.</p>",
        "id": 253350175,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631670029
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.mul_left'\">docs#order_iso.mul_left'</a></p>",
        "id": 253370485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631688843
    },
    {
        "content": "<p>Ah so what we're missing is order-reversing isomorphisms?</p>",
        "id": 253370581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631688931
    },
    {
        "content": "<p>You don't need that for the above, right?</p>",
        "id": 253370866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631689129
    },
    {
        "content": "<p>No but I do for the <code>a ≤ 0</code> versions. I guess I won't care because I don't need them now.</p>",
        "id": 253370939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631689186
    },
    {
        "content": "<p>I guess we could have <code>mul_left'' (a &lt; 0) : α ≃o order_dual α</code></p>",
        "id": 253371107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631689263
    },
    {
        "content": "<p>Yeah, but that's a bit hacky and follows suit of what I'm trying to avoid by defining antitone functions.</p>",
        "id": 253371241,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631689342
    },
    {
        "content": "<p>Advice: don't try to do 2 large refactors at once.</p>",
        "id": 253780908,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631900984
    },
    {
        "content": "<p>(I tried several times, failed)</p>",
        "id": 253780922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631900996
    },
    {
        "content": "<p>Another way is to use <code>Inf (-s) = - Inf s</code></p>",
        "id": 253781098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631901063
    },
    {
        "content": "<p>BTW, I'm going to add a more general versions of these lemmas.</p>",
        "id": 253781298,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631901143
    },
    {
        "content": "<p>My plan is to define <code>conditionally_complete_lattice_default α (d : out_param α)</code> with additional axioms <code>Sup ∅ = d</code>, <code>Inf ∅ = d</code> and similarly for unbounded sets.</p>",
        "id": 253781434,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631901207
    },
    {
        "content": "<p>Then prove your lemmas (and a few others) for the case <code>d = 0</code>.</p>",
        "id": 253781545,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631901254
    },
    {
        "content": "<p>I've started in <a href=\"https://github.com/leanprover-community/mathlib/tree/ccl-Sup\">branch#ccl-Sup</a> (I tried a different approach first, there are still traces of the old approach).</p>",
        "id": 253781675,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631901316
    },
    {
        "content": "<p>/me is away for 2-3 hrs.</p>",
        "id": 253781723,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631901341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inf.20and.20Sup.20of.20smul.20of.20a.20set/near/253781434\">said</a>:</p>\n<blockquote>\n<p>My plan is to define <code>conditionally_complete_lattice_default α (d : out_param α)</code> with additional axioms <code>Sup ∅ = d</code>, <code>Inf ∅ = d</code> and similarly for unbounded sets.</p>\n</blockquote>\n<p>That great! I had that in mind too. Then many more ℝ-specific lemmas will be gone.</p>",
        "id": 253785316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631902800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inf.20and.20Sup.20of.20smul.20of.20a.20set/near/253780908\">said</a>:</p>\n<blockquote>\n<p>Advice: don't try to do 2 large refactors at once.</p>\n</blockquote>\n<p>I think it's going fine! Defining <code>antitone</code> isn't really a refactor at all.</p>",
        "id": 253788201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631903962
    },
    {
        "content": "<p>I meant, don't try to refactor two related things at once (e.g., you start refactoring A, and in the middle of this you decide to refactor B as well).</p>",
        "id": 253790919,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631905130
    },
    {
        "content": "<p>Sorry for bad wording.</p>",
        "id": 253790948,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631905143
    },
    {
        "content": "<p>Oh yes, sure. Generalizing <code>finset.center_mass</code> away from ℝ isn't much. Do you still think I shouldn't do both at once?</p>",
        "id": 253791282,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631905266
    },
    {
        "content": "<p>I think that you will find your way. Different people are good/bad at different things.</p>",
        "id": 253792518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631905649
    },
    {
        "content": "<p>If you'll see that you're refactoring too much in one branch, you can cherry-pick parts of the diff to a new branch.</p>",
        "id": 253792664,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631905695
    },
    {
        "content": "<p>I know how to quickly do it with <code>magit</code>, probably other git GUIs can help with it too.</p>",
        "id": 253792739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631905731
    },
    {
        "content": "<p>Problem is, I've never worked with <code>finsupp</code>. So your words are probably wise.</p>",
        "id": 253799006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631908643
    },
    {
        "content": "<p>I'll already rename it, change the order of the arguments and kill ℝ.</p>",
        "id": 253799051,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631908679
    },
    {
        "content": "<p>Runaway refactors are a great tool to teach you how to use git effectively to manage your own work!</p>",
        "id": 253811748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631915104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inf.20and.20Sup.20of.20smul.20of.20a.20set/near/253350150\">said</a>:</p>\n<blockquote>\n<p>You can prove it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.map_cSup\">docs#order_iso.map_cSup</a> instead of continuity.</p>\n</blockquote>\n<p>Can you expand? I didn't manage.</p>",
        "id": 253871343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631974439
    },
    {
        "content": "<p>What I tried was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.ordered</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">order_iso.smul_left</span> <span class=\"o\">[</span><span class=\"n\">mul_action_with_zero</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_smul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv_smul_smul'</span> <span class=\"n\">ha.ne'</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">smul_inv_smul'</span> <span class=\"n\">ha.ne'</span><span class=\"o\">,</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">smul_le_smul_iff_of_pos</span> <span class=\"n\">ha</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Inf_smul_of_nonneg</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_smul</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_set_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Inf_empty</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">ha.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cInf_singleton</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">order_iso.smul_left_apply</span> <span class=\"n\">_</span> <span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">order_iso.smul_left</span> <span class=\"n\">ℝ</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_cInf</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253871464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631974557
    },
    {
        "content": "<p>Do we have anything about the <code>cInf</code> of a subtype? It would be a generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infi_subtype\">docs#infi_subtype</a></p>",
        "id": 253872041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631975197
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Inf_eq_infi'\">docs#Inf_eq_infi'</a> only depends on <code>has_Inf</code></p>",
        "id": 253886712,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631991211
    },
    {
        "content": "<p>So, I've generalized the lemmas, but I still don't know where to put them.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.ordered</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_smul</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Inf_smul_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_set_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Inf_empty</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">ha.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cInf_singleton</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">order_iso.smul_left_apply</span> <span class=\"n\">ℝ</span> <span class=\"n\">ha'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">order_iso.smul_left</span> <span class=\"n\">ℝ</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_cInf'</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Inf_of_not_bdd_below</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">bdd_below_smul_iff_of_pos</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">real.Inf_of_not_bdd_below</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_smul_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_set_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">ha.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cSup_singleton</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">order_iso.smul_left_apply</span> <span class=\"n\">_</span> <span class=\"n\">ha'</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">order_iso.smul_left</span> <span class=\"n\">ℝ</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_cSup'</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">bdd_above_smul_iff_of_pos</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Inf_smul_of_nonpos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_set_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Inf_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">ha.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cInf_singleton</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">order_iso.smul_left_dual_apply</span> <span class=\"n\">ℝ</span> <span class=\"n\">ha'</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">order_iso.smul_left_dual</span> <span class=\"n\">ℝ</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_cInf'</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Inf_of_not_bdd_below</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">bdd_below_smul_iff_of_neg</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_smul_of_nonpos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_set_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">,</span> <span class=\"n\">real.Inf_empty</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">ha.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cSup_singleton</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">order_iso.smul_left_dual_apply</span> <span class=\"n\">ℝ</span> <span class=\"n\">ha'</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">order_iso.smul_left_dual</span> <span class=\"n\">ℝ</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_cSup'</span> <span class=\"n\">hs</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">bdd_above_smul_iff_of_neg</span> <span class=\"n\">ha'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">real.Inf_of_not_bdd_below</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257493357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634197571
    },
    {
        "content": "<p>I couldn't find any file that had this combination of imports yet (but I did it manually so I might be wrong). What about I create a new file <code>data.real.pointwise</code> or <code>data.real.smul</code>?</p>",
        "id": 257493439,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634197643
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9707\">#9707</a></p>",
        "id": 257498444,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634200242
    },
    {
        "content": "<p>Hopefully the final PR before the Minkowski functional one!</p>",
        "id": 257499025,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634200439
    }
]