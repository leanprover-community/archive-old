[
    {
        "content": "<p>Here's a rather beautiful thing distilled from Peter's <code>Analytic.pdf</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span> <span class=\"c1\">-- non-negative reals</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span> <span class=\"c1\">-- infinite sums</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"c1\">-- notation for non-negative reals</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"c1\">-- notation for infinite sums</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">binary</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">binary_le_one</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">binary</span> <span class=\"n\">r</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">binary_sum</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">binary</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Do we have it already?</p>",
        "id": 280913266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651515891
    },
    {
        "content": "<p>PS Thank you so much to all the analysts who have written a fabulous API for sums over non-negative reals and extended non-negative reals. This together with with the <code>norm_cast</code> family of tactics has really made my work a lot easier and again emphasizes the importance of developing everything together in one place.</p>",
        "id": 280913953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651516199
    },
    {
        "content": "<p>It would be neat to have something similar for <code>nnrat</code> too, assuming <code>tsum</code> ever converges there</p>",
        "id": 280915257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651516829
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13894\">#13894</a> adds the first two statements</p>",
        "id": 280949847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651535495
    },
    {
        "content": "<p>I would think a definition like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mi>r</mi><msup><mi>b</mi><mi>n</mi></msup><mo stretchy=\"false\">⌋</mo><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">\\lfloor r b^n \\rfloor \\bmod{b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span></span></span></span></span> would be more useful</p>",
        "id": 280951274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651536751
    },
    {
        "content": "<p>Maybe that's the one <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has. I think the <code>zlog</code> from that PR to indicate the last non-zero digit is still useful, but your definition for the series is definitely better than my recursive approach</p>",
        "id": 280951503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651536999
    }
]