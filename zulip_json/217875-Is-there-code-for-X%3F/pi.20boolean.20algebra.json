[
    {
        "content": "<p>Is this true?  It's not true by <code>rfl</code>, and <code>library_search</code> doesn't find it with minimal imports.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">pi.complete_boolean_algebra</span> <span class=\"o\">:</span> <span class=\"n\">complete_boolean_algebra</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">set.complete_boolean_algebra</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 252048901,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630816212
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> maybe?)</p>",
        "id": 252048913,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630816225
    },
    {
        "content": "<p>The projection onto <code>Sup</code> isn't <code>rfl</code> either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">pi.complete_boolean_algebra</span> <span class=\"o\">:</span> <span class=\"n\">complete_boolean_algebra</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"bp\">=</span>\n <span class=\"n\">set.complete_boolean_algebra.Sup</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 252050943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630818593
    },
    {
        "content": "<p>Seemingly <code>le</code>, <code>sup</code> and <code>inf</code> agree; <code>Sup</code> and <code>Inf</code> don't.</p>",
        "id": 252051714,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630819540
    },
    {
        "content": "<p>If they have the same <code>le</code> and they are both partial orders then the rest of the operations must be equal because they are determined by universal properties. (For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi></mrow><annotation encoding=\"application/x-tex\">\\neg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">¬</span></span></span></span>, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi mathvariant=\"normal\">¬</mi><mi>y</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>x</mi><mo>⊓</mo><mi>y</mi><mo>≤</mo><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">x \\le \\neg y \\iff x \\sqcap y \\le \\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7194400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊓</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">⊥</span></span></span></span>.)</p>",
        "id": 252069636,
        "sender_full_name": "Reid Barton",
        "timestamp": 1630840727
    },
    {
        "content": "<p>Also I see that a <code>boolean_algebra</code> is already a poset by definition, so you can ignore that condition.</p>",
        "id": 252070209,
        "sender_full_name": "Reid Barton",
        "timestamp": 1630841384
    }
]