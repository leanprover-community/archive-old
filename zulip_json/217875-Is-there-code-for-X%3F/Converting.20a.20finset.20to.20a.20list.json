[
    {
        "content": "<p>I want to express the statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sign.map_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I can't, because <code>∏</code> requires its argument to be commutative, and the one on the LHS is not.<br>\nHow can I convert <code>s</code> into a list so that I can express the LHS using <code>list.prod</code>?</p>",
        "id": 219231681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607446574
    },
    {
        "content": "<p>How about starting with a list?</p>",
        "id": 219231831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607446652
    },
    {
        "content": "<p>Otherwise the product is not well-defined</p>",
        "id": 219231838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607446656
    },
    {
        "content": "<p>Well, the lemma is true whichever of the non well-defined definitions you pick</p>",
        "id": 219231961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607446707
    },
    {
        "content": "<p>but... the lemma has to mean something...</p>",
        "id": 219232166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607446817
    },
    {
        "content": "<p>To un-#xy my problem, I'm trying to show that <code>(sigma_congr_right σ).sign = ∏ a, (σ a).sign</code>, and I thought I'd do so by breaking down <code>(sigma_congr_right σ)</code> into a product of <code>function.update 1 a (σ a)</code></p>",
        "id": 219232684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607447052
    },
    {
        "content": "<p>Since the analogous approach worked for the simpler version expressed with <code>sum</code></p>",
        "id": 219232748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607447079
    },
    {
        "content": "<p>But I don't know how to express that product</p>",
        "id": 219232862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607447141
    },
    {
        "content": "<p>You lost me at <code>function.update</code>... but surely if you want to write a permutation as a product, it has to be a product of a list</p>",
        "id": 219236682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607448805
    },
    {
        "content": "<p>The elements in the list all commute</p>",
        "id": 219236718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607448821
    },
    {
        "content": "<p>But yes, I guess I could</p>",
        "id": 219236736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607448831
    },
    {
        "content": "<p>But then I need to push <code>finset.univ α</code>into that list</p>",
        "id": 219236801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607448848
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.sign_prod_congr_right\">docs#equiv.perm.sign_prod_congr_right</a> looks similar except all the permutations are of the same set there</p>",
        "id": 219236835,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607448872
    },
    {
        "content": "<p>Far from a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but the sorry in question is here: <a href=\"https://github.com/leanprover-community/mathlib/compare/eric-wieser/sigma_congr_right_sign?expand=1#diff-126733ed2b8b67441355f6f20dbb566366f0dd0844a7d7b6ee5e7c6671c46e68R844\">https://github.com/leanprover-community/mathlib/compare/eric-wieser/sigma_congr_right_sign?expand=1#diff-126733ed2b8b67441355f6f20dbb566366f0dd0844a7d7b6ee5e7c6671c46e68R844</a></p>",
        "id": 219236896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607448908
    },
    {
        "content": "<p>Oh sure enough, that contains the <code>fintype.exists_univ_list α</code> which I needed</p>",
        "id": 219236950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607448939
    },
    {
        "content": "<p>Thanks for point me at that, that's enough to get me going.</p>",
        "id": 219238013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607449474
    }
]