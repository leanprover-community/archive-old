[
    {
        "content": "<p>Do we not yet have the <code>conditionally_complete_lattice ℕ</code> instance?</p>",
        "id": 255378156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632912959
    },
    {
        "content": "<p>In general, I am pretty bothered by the lack of API for conditionally complete orders, so maybe this is my next order project. Thanks a lot Yury for all your work on this!</p>",
        "id": 255378299,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632913041
    },
    {
        "content": "<p>Do we also not have <code>conditionally_complete_(monoid, group, semiring, ring, field)</code>?</p>",
        "id": 255378634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632913216
    },
    {
        "content": "<p>Wait, we don't have <code>complete_(monoid, group, semiring, ring, field)</code> either? <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 255379165,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632913512
    },
    {
        "content": "<p>Is there any way to make that work with mixins?</p>",
        "id": 255379223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632913547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> What is a complete monoid?</p>",
        "id": 255380132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632914018
    },
    {
        "content": "<p>A complete lattice with a compatible monoid structure</p>",
        "id": 255380236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632914055
    },
    {
        "content": "<p>This one is probably useless. But <code>complete_field</code> is definitely useful to abstract <code>ℝ</code>.</p>",
        "id": 255380321,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632914096
    },
    {
        "content": "<p>I actually believe this is precisely what we need in measure theory.</p>",
        "id": 255380370,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632914119
    },
    {
        "content": "<p>Supposedly, <code>normed_space</code> too coudl use such an abstraction.</p>",
        "id": 255380560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632914218
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.conditionally_complete_linear_order_bot\">docs#nat.conditionally_complete_linear_order_bot</a></p>",
        "id": 255380641,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632914257
    },
    {
        "content": "<p>Not sure what you want to abstract away in measure theory, can you elaborate?</p>",
        "id": 255380740,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632914289
    },
    {
        "content": "<p>Measures are currently real-valued, right?</p>",
        "id": 255381160,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632914509
    },
    {
        "content": "<p>They are ennreal-valued.</p>",
        "id": 255381276,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632914553
    },
    {
        "content": "<p>I don't personally care much about measure theory yet. This was really a side remark. I would much more appreciate non real normed spaces.</p>",
        "id": 255381277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632914553
    },
    {
        "content": "<p>Ah sorry. This is still concrete structure-centric, though.</p>",
        "id": 255381324,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632914582
    },
    {
        "content": "<p>Yes, definitely concrete. Otherwise, you would have to add yet another parameter to the definition of measures, the target type, and this would make the whole theory more complicated for absolutely no gain.</p>",
        "id": 255381396,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632914627
    },
    {
        "content": "<p>In the same way that we use nat all the time, and not a generic nat-like type.</p>",
        "id": 255381598,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632914704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Conditionally.20complete.20lattice/near/255380321\">said</a>:</p>\n<blockquote>\n<p>This one is probably useless. But <code>complete_field</code> is definitely useful to abstract <code>ℝ</code>.</p>\n</blockquote>\n<p>The reals are not complete in the sense of lattices.</p>",
        "id": 255381850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632914837
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/3292\">#3292</a> I added conditionally complete linear ordered fields, I've always wondered if you switched some results about R to take this type class what generalizations would be possible. I think that PR is basically done, it just needs splitting up</p>",
        "id": 255381854,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632914838
    },
    {
        "content": "<p>Oh wait, all <code>conditionally_complete_linear_ordered_field</code>s are isomorphic to <code>ℝ</code>?</p>",
        "id": 255385869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632916818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Conditionally.20complete.20lattice/near/255381396\">said</a>:</p>\n<blockquote>\n<p>Yes, definitely concrete. Otherwise, you would have to add yet another parameter to the definition of measures, the target type, and this would make the whole theory more complicated for absolutely no gain.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.vector_measure\">docs#measure_theory.vector_measure</a> is sort of doing this, right? Except that it's 0 outside the measurable sets instead of the outer extension thing.</p>",
        "id": 255388311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632917909
    },
    {
        "content": "<p>But there is more than one topological additive monoid in existence, as demonstrated by the following two <code>abbreviations</code></p>",
        "id": 255391747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632919516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> What is the status of <a href=\"https://github.com/leanprover-community/mathlib/issues/3292\">#3292</a> ? Is it true that it just needs documentation (this is what the tag seems to indicate)? I ask because I am currently sitting in a room with not one but two people who have formalised the Eudoxus reals in Lean (independently!) and proved that they're complete, so maybe they're only <a href=\"https://github.com/leanprover-community/mathlib/issues/3292\">#3292</a> away from showing that they're the Lean reals.</p>",
        "id": 262739461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637872656
    },
    {
        "content": "<p>It just needs splitting up really</p>",
        "id": 262740357,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637873715
    },
    {
        "content": "<p>Probably a bit of documentation yes</p>",
        "id": 262740366,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637873724
    },
    {
        "content": "<p>But the stuff about ordered ring isomorphisms and homs belongs in a separate pr, I started at one point but got waylaid when I tried to prove some random general results about them. The branch probably needs a refresh too and merge to master but it's basically good to go if someone puts a little time into it</p>",
        "id": 262740444,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637873821
    },
    {
        "content": "<p>Please people stop speaking about someone putting time into ordered stuff. That's the safest way to get me involved</p>",
        "id": 262740779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637874132
    },
    {
        "content": "<p>If you give me your approval, I can merge master and bump, and maybe split up properly.</p>",
        "id": 262740993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637874435
    },
    {
        "content": "<p>Why do all those young people get passionate about Eudoxus reals? We also have <span class=\"user-mention\" data-user-id=\"432800\">@yannis monbru</span> here.</p>",
        "id": 262741257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637874817
    },
    {
        "content": "<p>maybe we are traumatized by tales about axiom of choice</p>",
        "id": 262744454,
        "sender_full_name": "yannis monbru",
        "timestamp": 1637878749
    },
    {
        "content": "<p>But then, how did <em>that</em> happen? Back when I was a student, we celebrated choice.</p>",
        "id": 262760736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637903707
    }
]