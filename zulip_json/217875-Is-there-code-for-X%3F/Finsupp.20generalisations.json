[
    {
        "content": "<p>Is there a generalisation of <code>finsupp</code> to things like <code>option</code> or <code>has_bot</code>?</p>",
        "id": 305713882,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1666562268
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 305715319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666563073
    },
    {
        "content": "<p>Finitely supported functions where the support is everything that not \"something\".</p>",
        "id": 305715357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666563099
    },
    {
        "content": "<p>Yeah, more precisely, a structure with fields something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">support</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_support_to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">self.support</span> <span class=\"bp\">↔</span> <span class=\"n\">self.to_fun</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but with all the API that goes alongside <code>finsupp</code>.</p>",
        "id": 305715519,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1666563211
    },
    {
        "content": "<p>It's probably rather easy to construct the equivalence to <code>finsupp α (with_zero M)</code> and transport all the lemmas across if I need them,</p>",
        "id": 305715626,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1666563265
    },
    {
        "content": "<p>but if the API already exists that would of course be a little nicer.</p>",
        "id": 305715648,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1666563280
    },
    {
        "content": "<p>Oh I'm finally there! You want the <em>target</em> to be the <code>option</code>.</p>",
        "id": 305715842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666563374
    },
    {
        "content": "<p>would it make sense to have a <code>has_zero</code> instance for <code>option M</code>? or would that conflict with the existing <code>with_zero</code> and <code>with_one</code> functions?</p>",
        "id": 305724231,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666569050
    },
    {
        "content": "<p>on a side note, this doesn't seem right: <a href=\"/user_uploads/3121/iNCzuQwPhhmKJG5pj_DpBfHh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iNCzuQwPhhmKJG5pj_DpBfHh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/iNCzuQwPhhmKJG5pj_DpBfHh/image.png\"></a></div>",
        "id": 305724750,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666569373
    },
    {
        "content": "<p>might have to do with the <code>@[to_additive]</code> on the repr for one</p>",
        "id": 305724841,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666569439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I think you added these instances... am I missing something or is there duplication here?</p>",
        "id": 305725071,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666569591
    },
    {
        "content": "<p>That looks like a mistake indeed</p>",
        "id": 305725227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666569674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finsupp.20generalisations/near/305724231\">said</a>:</p>\n<blockquote>\n<p>would it make sense to have a <code>has_zero</code> instance for <code>option M</code>? or would that conflict with the existing <code>with_zero</code> and <code>with_one</code> functions?</p>\n</blockquote>\n<p>I think a better approach would be to redefine <code>finsupp A B</code> as <code>finsupp' A B 0</code> or something, if we want to go down this path.</p>",
        "id": 305725279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666569717
    },
    {
        "content": "<p>makes sense... that would certainly be more flexible</p>",
        "id": 305725369,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666569764
    },
    {
        "content": "<p>Whoops! You're right I added one too many.</p>",
        "id": 305760413,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666596002
    },
    {
        "content": "<p>This is a refactor I think I'd be comfortable trying to do if other people think this is a good idea.</p>",
        "id": 305812883,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1666616170
    },
    {
        "content": "<p>Note that <a href=\"https://github.com/leanprover-community/mathlib/pull/16160\">#16160</a> is a similar refactor (and accidentally the goal <a href=\"https://github.com/leanprover-community/mathlib/pull/15161\">#15161</a> is something related to finsupp).</p>",
        "id": 305819620,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666618313
    },
    {
        "content": "<p>I'd like to start writing this PR. The documentation says that I should ask for write access to non-master mathlib branches - could someone please do this for me? My GitHub username is <code>zeramorphic</code>.</p>",
        "id": 306301812,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1666808142
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span></p>",
        "id": 306302884,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666808513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> Invitation sent: <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 306310491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666810968
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 306310563,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1666810989
    }
]