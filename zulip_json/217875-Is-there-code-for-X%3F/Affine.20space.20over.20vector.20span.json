[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span>, do we have <code>affine_space (vector_span 𝕜 s) (affine_span 𝕜 s)</code> anywhere? Or am I supposed to get it from an <code>affine_span s.direction s</code> instance for <code>s : affine_subspace 𝕜 E</code>? I remember seeing such an instance somewhere, but I can't find it anymore.</p>",
        "id": 321341498,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673696554
    },
    {
        "content": "<p>You're expected to get it from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_subspace.to_add_torsor\">docs#affine_subspace.to_add_torsor</a> (which is only locally an instance to avoid a loop with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_torsor.nonempty\">docs#add_torsor.nonempty</a>), yes.</p>\n<p>That instance loop could be avoided (and thus <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_subspace.to_add_torsor\">docs#affine_subspace.to_add_torsor</a> made globally an instance) by allowing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_torsor\">docs#add_torsor</a> to be empty and putting <code>nonempty</code> hypotheses on those uses that require them, as previously discussed. That would be convenient for most uses, but maybe less so for your use, since you want a different instance and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector_span\">docs#vector_span</a> is not defeq to the direction of the affine span.</p>\n<p>It would probably be possible also to refactor things if desired so that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direction_affine_span\">docs#direction_affine_span</a> does become true by defeq, if that's useful to make the general instance for affine subspaces give you the instance you want. I think the existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector_span\">docs#vector_span</a> definition (in relation to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span\">docs#submodule.span</a>) is useful as a lemma, but doesn't need to be defeq, and likewise the existing definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/span_points\">docs#span_points</a> is useful as a lemma relating the affine and vector spans, but also doesn't need to be the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_span\">docs#affine_span</a> by defeq (and where anything abuses that defeq, we should make sure there are <code>affine_span</code> equivalents of any <code>span_points</code> lemmas and remove the defeq abuse).</p>",
        "id": 321359133,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1673703868
    }
]