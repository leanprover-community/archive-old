[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Am I missing an import or do we not want this for some reason?</p>",
        "id": 266026961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640384164
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.opposite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hba</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">hcb</span> <span class=\"n\">hba</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266027131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640384461
    },
    {
        "content": "<p>I assume you have a reason to not use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a>?</p>",
        "id": 266027277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640384686
    },
    {
        "content": "<p>Oh this will work fine. I was wondering whether you could get a Galois insertion with l^{op} and u^{op} if l and u made a Galois insertion</p>",
        "id": 266027363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640384826
    },
    {
        "content": "<p>What is the map <code>X -&gt; order_dual X</code>?</p>",
        "id": 266027368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640384847
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_dual\">docs#to_dual</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_dual\">docs#of_dual</a></p>",
        "id": 266027369,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640384857
    },
    {
        "content": "<p>lol in a completely different file. No wonder I couldn't find them!</p>",
        "id": 266027432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640384934
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.order_dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">order_dual</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span>\n    <span class=\"o\">(</span><span class=\"n\">to_dual</span> <span class=\"bp\">∘</span> <span class=\"n\">l</span> <span class=\"bp\">∘</span> <span class=\"n\">of_dual</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">order_dual</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">to_dual</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span> <span class=\"bp\">∘</span> <span class=\"n\">of_dual</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>was what I was wondering</p>",
        "id": 266027557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640385126
    },
    {
        "content": "<p>Sounds elementary enough that something like that should work and either you got the right statement and it's easy or you got the wrong one and it's easily false.</p>",
        "id": 266027584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640385199
    },
    {
        "content": "<p>You need to swap <code>l</code> and <code>u</code> as well</p>",
        "id": 266027643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640385294
    },
    {
        "content": "<p>but it remains an insertion and not a coinsertion?</p>",
        "id": 266027736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640385385
    },
    {
        "content": "<p>Oh so you're saying op sends insertions to coinsertions?</p>",
        "id": 266027742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640385401
    },
    {
        "content": "<p>Oh I didn't notice that part</p>",
        "id": 266027746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640385405
    },
    {
        "content": "<p>The category theory version is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/adjunction.op_adjoint_op_of_adjoint\">docs#adjunction.op_adjoint_op_of_adjoint</a></p>",
        "id": 266027813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640385487
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.dual\">docs#galois_connection.dual</a> looks like what you want</p>",
        "id": 266028287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640386201
    },
    {
        "content": "<p>That's just for connections, I have an insertion</p>",
        "id": 266028572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386528
    },
    {
        "content": "<p>That's the same, because the non-connection bit of the insertion doesn't depend on the order.</p>",
        "id": 266028584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640386559
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_coinsertion.dual\">docs#galois_coinsertion.dual</a></p>",
        "id": 266028666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386644
    },
    {
        "content": "<p>Rather easy to find once you know what you're looking for!</p>",
        "id": 266028676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386666
    },
    {
        "content": "<p>duality turns insertions into coinsertions</p>",
        "id": 266028733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386691
    },
    {
        "content": "<p>I may as well ask the actual question I'm interested in. Subgroups, subrings, subfields of a group, ring field etc are all Galois insertions into subsets of the group/ring/field, and in all cases top and inf and Inf coincide in the subset lattice and the subobject lattice. Is that a general fact about Galois insertions? I kind of suspect not because I can't find it in the API. I was wondering if I could get a cheap counterexample using duals but it seems that I can't.</p>",
        "id": 266028860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386815
    },
    {
        "content": "<p>Note that bot and sup and Sup don't coincide at all.</p>",
        "id": 266028903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386842
    },
    {
        "content": "<p>(empty set isn't a group, union of two groups isn't a group etc)</p>",
        "id": 266028918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386855
    },
    {
        "content": "<p>Yes (or more generally, right adjoints preserve limits)</p>",
        "id": 266030179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640388340
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Do I also need that the complete lattice structure on beta is the one coming from alpha or is this automatic? I'm a bit confused</p>",
        "id": 266032293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640391177
    },
    {
        "content": "<p>Oh this must be automatic. So then I'm surprised I can't find this. In the examples in my head, alpha is <code>set L</code>, beta is <code>intermediate_field K L</code> or <code>subalgebra K L</code> or <code>subgroup L</code>, l is \"adjoin\" and u is \"coe\" or \"forget\" and it's true. Are these examples leading me astray?</p>",
        "id": 266032466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640391467
    },
    {
        "content": "<p>Certainly all those examples have <code>u x ≤ u y ↔ x ≤ y</code> by definition; is that always true by consequence of the insertion alone?</p>",
        "id": 266032550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640391588
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.u_top\">docs#galois_connection.u_top</a></p>",
        "id": 266032621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640391677
    },
    {
        "content": "<p>Library search doesn't know to decay your insertion to a connection before looking for the lemma</p>",
        "id": 266032661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640391723
    },
    {
        "content": "<p>Oh I see, I don't need the insertion, right adjoints preserve limits is a statement about connections</p>",
        "id": 266034530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640395022
    }
]