[
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is an ideal then I am pretty sure that Chris or Kenny showed me a function last week from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> to <code>with_top \\N</code> taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> to the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>∈</mo><msup><mi>J</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">r\\in J^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>. What's the name of this function? I want to make a valuation on a valuation ring</p>",
        "id": 206137021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596718815
    },
    {
        "content": "<p>I would be happy with <code>enat</code>. I still cannot find this function in mathlib. Kenny did you show me some unfinished PR or something?</p>",
        "id": 208812587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599047942
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 208812652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599047994
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">enat</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">suggest</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 208812653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599047995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <code>roption</code> also fails -- were you talking about some roption-valued function? Is this on a branch of yours?</p>",
        "id": 208813203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599048309
    },
    {
        "content": "<p>I want this function because it's now the unique thing holding up DVRs, and I don't want to duplicate work. I'll happily write an API if I'm deluded and it's not there.</p>",
        "id": 208814255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599048912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> <span class=\"user-mention\" data-user-id=\"310032\">@Frederick Eidsnes Thøgersen</span></p>",
        "id": 208814283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599048933
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicity\">docs#multiplicity</a></p>",
        "id": 208817697,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599050812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 208817706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599050820
    },
    {
        "content": "<p>but this is for an element. I want an ideal.</p>",
        "id": 208817752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599050848
    },
    {
        "content": "<p>just use <code>ideal.span</code></p>",
        "id": 208817768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599050858
    },
    {
        "content": "<p>It's the wrong way</p>",
        "id": 208817795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599050878
    },
    {
        "content": "<p><code>ideal</code>s form a semiring</p>",
        "id": 208817879,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599050918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310032\">@Frederick Eidsnes Thøgersen</span> I know how to do it</p>",
        "id": 208818019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599051003
    },
    {
        "content": "<p>Kenny, that was the comment you made a few weeks ago which I had forgotten</p>",
        "id": 208818228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599051116
    },
    {
        "content": "<p>Cool! (The valuation associated to a blowup arises like this, right?)</p>",
        "id": 208820190,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599052047
    },
    {
        "content": "<p>But we don't have the relative Proj construction yet... so we can't define blowups <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 208820963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599052386
    },
    {
        "content": "<p>But you just got the valuation of their exceptional divisor! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 208821552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599052621
    }
]