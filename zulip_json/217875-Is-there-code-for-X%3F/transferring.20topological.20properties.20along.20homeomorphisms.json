[
    {
        "content": "<p>The 2nd year analysis lecturer at Imperial asked students to prove that if X and Y were homeomorphic topological spaces then X was Hausdorff iff Y was. A student in my course formalised the result as part of a project.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.homeomorph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">homeomorph</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">t2_space</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It took many lines. Do we have some kind of tactic which can produce these proofs for free yet?</p>",
        "id": 275093839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647087387
    },
    {
        "content": "<p>Still no. :-(</p>",
        "id": 275094120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647087811
    },
    {
        "content": "<p>It is a bit strange how infrequently we actually need to do this, on the other hand.</p>",
        "id": 275094128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647087838
    },
    {
        "content": "<p>I <em>absolutely</em> agree with you about how strange it is. When I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/408\">#408</a> several years ago I was convinced it would be really important. The situation here is pathological -- for their second projects I asked the students to engage with the material they learnt in Y2 and this was a random question on a problem sheet (rather than anything being used to build more theory, or part of a more complex proof).</p>",
        "id": 275094763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647088890
    },
    {
        "content": "<p>At that time I was also convinced that building a classical mathematics library covering an undergraduate curriculum was also important, and I suspect you agreed with me -- at least we were right on that one ;-)</p>",
        "id": 275094886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647089066
    },
    {
        "content": "<p>Another thing I found strange was that we don't ever seem to use the bijection between equivalence relations and partitions (which I got Amelia to make, convinced that it would be important). My model of mathematics was that this was used absolutely everywhere; more recently I have become slightly embarrassed to even teach it to the 1st years! Someone suggested to me that it was perhaps because Lean uses type theory and has inbuilt quotients.</p>",
        "id": 275094937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647089163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm not sure that matters. We could have built an identical quotient API without axioms. At that point we would need to use a little bit about equivalence relations and partitions. But once the API is in place, I don't think you would ever need to look under the hood.<br>\nThe only downside would be less defeqs.</p>",
        "id": 275096196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647090495
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.homeomorph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">homeomorph</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">t2_space</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">introI</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">e.t2_space</span><span class=\"o\">,</span> <span class=\"n\">e.symm.t2_space</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Do I win something?</p>",
        "id": 275096230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647090570
    },
    {
        "content": "<p>For this particular problem, it is again the case that it \"generalises\" to a non-trivial problem: If <code>f : X → Y</code> is continuous and injective, and <code>Y</code> is a <code>t2_space</code>, then so is <code>X</code>.</p>",
        "id": 275096245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647090598
    },
    {
        "content": "<p>I guess that using the result from mathlib is cheating so I reproved it from scratch (only one implication since the other one is completely symmetric):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">homeomorph</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">t2_iff_nhds</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"n\">hyy'</span><span class=\"o\">,</span> <span class=\"n\">e.symm.injective</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.symm.inducing.nhds_eq_comap</span><span class=\"o\">,</span> <span class=\"n\">e.symm.inducing.nhds_eq_comap</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">comap_inf</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">comap_bot</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyy'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hyy'.ne</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275096893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647091463
    },
    {
        "content": "<p>From this proof you see immediately that asking for a homeomorphism is too strong if you only care about one implication. The proof clearly only uses that <code>e.symm</code> is an embedding. So you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">embedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">t2_iff_nhds</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"n\">hyy'</span><span class=\"o\">,</span> <span class=\"n\">hf.inj</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf.to_inducing.nhds_eq_comap</span><span class=\"o\">,</span> <span class=\"n\">hf.to_inducing.nhds_eq_comap</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">comap_inf</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">comap_bot</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyy'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hyy'.ne</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275097470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647092291
    },
    {
        "content": "<p>But then you think more and see asking for an embedding it too strong, and a continuous injective function is good enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">t2_iff_nhds</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"n\">hyy'</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">hyy'.ne</span> <span class=\"bp\">$</span> <span class=\"n\">le_bot_iff.mp</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y'</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">y'</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">inf_le_inf</span> <span class=\"o\">(</span><span class=\"n\">map_le_iff_le_comap.mp</span> <span class=\"n\">hf'.continuous_at</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_le_iff_le_comap.mp</span> <span class=\"n\">hf'.continuous_at</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"bp\">𝓝</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">y'</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">comap_inf.symm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">comap_bot</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275097488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647092331
    },
    {
        "content": "<p>At that point things are so clear you start fearing someone could understand what's going on, so you go for full term mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"n\">t2_iff_nhds.mpr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"n\">hyy'</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">$</span> <span class=\"n\">t2_iff_nhds.mp</span> <span class=\"n\">h</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">hyy'.ne</span> <span class=\"bp\">$</span> <span class=\"n\">le_bot_iff.mp</span> <span class=\"bp\">$</span> <span class=\"k\">calc</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y'</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">y'</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">inf_le_inf</span> <span class=\"o\">(</span><span class=\"n\">map_le_iff_le_comap.mp</span> <span class=\"n\">hf'.continuous_at</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_le_iff_le_comap.mp</span> <span class=\"n\">hf'.continuous_at</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"bp\">𝓝</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">y'</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">comap_inf.symm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">comap_bot</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 275097631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647092551
    },
    {
        "content": "<p>Ok you get an A</p>",
        "id": 275098624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647093915
    },
    {
        "content": "<p>Yes it's again this weird observation that the math-trivial \"you can transfer <code>P</code> along equivs\" can often be deduced from the more contentful statement \"you can transfer <code>P</code> along either injections or surjections\" which we'll often have in the library anyway.</p>",
        "id": 275098776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647094091
    },
    {
        "content": "<p>Also, thinking about the actual maths use, knowing that a subspace of a separated space is separated is an actually useful fact.</p>\n<p>I don't remember if I ever found it easier to show that something was homeomorphic to something separated to deduce separatedness.</p>",
        "id": 275101843,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647098165
    }
]