[
    {
        "content": "<p>Does mathlib have morphisms of monads? For now, I'm mostly interested in monads on <code>Type*</code>.</p>",
        "id": 206493257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597083003
    },
    {
        "content": "<p>Mathlib has two definitions of monads. The one in category theory and the one we use for programming. Which one do you need?</p>",
        "id": 206495695,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597084312
    },
    {
        "content": "<p>Either would be fine. Since this exists: </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monad/types.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monad/types.lean</a></p>\n<p>But of course, morphisms of monads in the sense of control.monad would be better, since it's more flexible with universes.</p>",
        "id": 206496361,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597084620
    },
    {
        "content": "<p>I looked briefly in <code>category_theory.monad</code> and didn't find anything about morphisms of monads.</p>",
        "id": 206496779,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597084824
    },
    {
        "content": "<p>For category theory, <code>M</code> is an endofunctor, functors form a category (see <code>category_theory/functor_category.lean</code>). Are those morphisms good enough?</p>",
        "id": 206501838,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597087192
    },
    {
        "content": "<p>As for the programming construct, it does not exist yet but if you define it, I'll be happy to see it PR-ed</p>",
        "id": 206501915,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597087217
    },
    {
        "content": "<p>There are laws for morphisms of monads, just like a morphism of monoids has to satisfy some equations (really, they are the same equations).</p>",
        "id": 206502254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597087443
    },
    {
        "content": "<p>Right, I did not consider that they wouldn't follow from normal natural transformations. My mistake</p>",
        "id": 206502365,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597087510
    },
    {
        "content": "<p>It's just a natural transformation that's compatible with <code>bind</code> and <code>pure</code>.</p>",
        "id": 206502427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597087544
    },
    {
        "content": "<p>I'll try to sketch a definition.</p>",
        "id": 206502552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597087605
    },
    {
        "content": "<p>Something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">monad_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">natural</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">app</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_pure</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ma</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Does this look right?</p>",
        "id": 206504037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597088359
    },
    {
        "content": "<p>Looks good to me</p>",
        "id": 206504237,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597088473
    },
    {
        "content": "<p>Oh, do we already have  natural transformations for computer-sciency functors?</p>",
        "id": 206504439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597088560
    },
    {
        "content": "<p>I don't believe so. The only other use of that idea in programming in mathlib is in <code>control.traversable.basic</code></p>",
        "id": 206504650,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597088669
    },
    {
        "content": "<p>Isn't this a \"monad transformer\" in haskell jargon?</p>",
        "id": 206508014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597090536
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 206508034,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597090551
    },
    {
        "content": "<p>I thought a monad transformer takes one monad and makes another.</p>",
        "id": 206508076,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597090562
    },
    {
        "content": "<p>isn't that what's happening here?</p>",
        "id": 206508119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597090579
    },
    {
        "content": "<p>you take elements of one monad and produce elements of another</p>",
        "id": 206508135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597090593
    },
    {
        "content": "<p>Not quite.</p>",
        "id": 206508136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597090593
    },
    {
        "content": "<p>no, this is an ordinary function that takes an action in one monad and produces an action in another</p>",
        "id": 206508145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597090602
    },
    {
        "content": "<p>I guess whenever you have a monad transformer <code>T</code>, and a monad <code>M</code>, you can promote the <code>pure</code> in <code>T</code> to a morphism from <code>M</code>to <code>T M</code>.</p>",
        "id": 206508221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597090653
    },
    {
        "content": "<p>Or something.</p>",
        "id": 206508245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597090670
    },
    {
        "content": "<p>In more details, this is a relation between two given monads whereas, with a monad transformer, you take one monad and produce another one. I believe we could say that there should be a monad morphism between the input and the output monads of a monad transformer though</p>",
        "id": 206508324,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597090701
    },
    {
        "content": "<p>Aha, I knew that haskellers couldn't stop themselves from rediscovering this: <a href=\"https://hackage.haskell.org/package/mmorph-1.1.3/docs/Control-Monad-Morph.html\">https://hackage.haskell.org/package/mmorph-1.1.3/docs/Control-Monad-Morph.html</a></p>",
        "id": 206508397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597090753
    },
    {
        "content": "<p>Hey, at least they tell us what notation to use :)</p>",
        "id": 206508509,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597090809
    },
    {
        "content": "<p>Oh wait, I misread.</p>",
        "id": 206508527,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597090822
    },
    {
        "content": "<p>Is there some standard haskelish ascii art for natural transformations?</p>",
        "id": 206512560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597093194
    },
    {
        "content": "<p><code>~&gt;</code> I guess.</p>",
        "id": 206512886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597093324
    },
    {
        "content": "<p>We do now have <a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/monoidal/internal.html#Mon_\">monoid objects</a> in monoidal categories, as well as homs between them, and the fact that endofunctors of a category <a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/monoidal/End.html\">form a monoidal category</a>.</p>",
        "id": 206523079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597100350
    },
    {
        "content": "<p>Just saying. :-)</p>",
        "id": 206523090,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597100358
    },
    {
        "content": "<p>Has anyone tied monads from the category theory library to monoids in the endofunctor category?</p>",
        "id": 206523824,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597100897
    },
    {
        "content": "<p>Yes, there is <code>category_theory.monad.types</code> where programming monads are shown to be monads in the category theory sense</p>",
        "id": 206524265,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597101265
    },
    {
        "content": "<p>Yes i saw that, but I'm wondering about the equivalence between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monad\">docs#category_theory.monad</a>  and <code>Mon_ (C \\func C)</code></p>",
        "id": 206524669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597101641
    },
    {
        "content": "<p>But anyway, morphisms of monads are \"just\" morphisms in <code>Mon_ (C \\func C)</code></p>",
        "id": 206524778,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597101728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, no, my comment above was precisely trying to goad someone into proving \"oh, monads are just monoids in the category of endofunctors\".</p>",
        "id": 206529200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597105814
    },
    {
        "content": "<p>There should be an \"nlab-just\" tactic.</p>",
        "id": 206529689,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597106329
    },
    {
        "content": "<p>Quantisation, categorification, justification.</p>",
        "id": 206530237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597106777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I wrote up some definitions for morphisms of functors and monads (in the sense of <code>control.*</code>) in the following two files:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/monad_morph/src/control/functor/morph.lean\">https://github.com/leanprover-community/mathlib/blob/monad_morph/src/control/functor/morph.lean</a></p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/monad_morph/src/control/monad/morph.lean\">https://github.com/leanprover-community/mathlib/blob/monad_morph/src/control/monad/morph.lean</a></p>\n<p>These also contain some very basic lemmas.  Let me know if it's worth opening a PR.</p>",
        "id": 206537659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597117631
    },
    {
        "content": "<p>It looks like a nice start. Do you have examples where it is useful? That would be worth including too.</p>",
        "id": 206537881,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597117935
    },
    {
        "content": "<p>I'm interested in this because I'm planning to apply it in some algebraic contexts later, but this is much more involved. I guess one thing that's worth adding is the fact that there is an initial monad (the identity functor).</p>",
        "id": 206538152,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597118420
    },
    {
        "content": "<p>that's a nice example. You could also show that some monad transformers are monad morphisms</p>",
        "id": 206538287,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597118698
    },
    {
        "content": "<p>On terminology, maybe <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> will correct me but we use <code>_hom</code> and not <code>_morph</code> to name morphisms.</p>",
        "id": 206538308,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597118750
    },
    {
        "content": "<p>Unless the additional universe flexibility is useful somewhere, why not just use the ones from <code>category_theory/</code>?</p>",
        "id": 206538488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597119116
    },
    {
        "content": "<p>Actually, while we're on the subject of <code>category_theory/</code> and <code>control/</code>, would it be insane to move <code>functor</code> in core into the <code>control</code> namespace?</p>",
        "id": 206538538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597119184
    },
    {
        "content": "<p>I keep running into this name conflict over <code>functor.map_comp</code>.</p>",
        "id": 206538542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597119214
    },
    {
        "content": "<p>I don't think that would be insane. We picked <code>control</code> because Haskell did but I'm starting to question the choice. If any kind of electrical engineering such as control theory gets into mathlib, that could be confusing. I'm wondering if we should just call it <code>programming</code></p>",
        "id": 206538822,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597119607
    },
    {
        "content": "<p>well, <code>functional_programming</code></p>",
        "id": 206539312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597120339
    },
    {
        "content": "<p>however I think that worries about control theory are premature until we get some</p>",
        "id": 206539336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597120417
    },
    {
        "content": "<p>I would like to use <code>do</code> notation as well. Do the monads in <code>category_theory</code> provide a <code>functional_prpgramming.monad</code> instance?</p>",
        "id": 206539337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597120423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Morphisms.20of.20monads/near/206539336\">said</a>:</p>\n<blockquote>\n<p>however I think that worries about control theory are premature until we get some</p>\n</blockquote>\n<p>That's probably true. I think it remains that it's not a great name for functional programming tools</p>",
        "id": 206539490,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597120676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Morphisms.20of.20monads/near/206539337\">said</a>:</p>\n<blockquote>\n<p>I would like to use <code>do</code> notation as well. Do the monads in <code>category_theory</code> provide a <code>functional_prpgramming.monad</code> instance?</p>\n</blockquote>\n<p>I don't believe so but it should be easy enough to create one</p>",
        "id": 206539536,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597120694
    },
    {
        "content": "<p>having just diagnosed a typeclass loop, I am a bit worried about the contribution to the instance problem</p>",
        "id": 206539544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597120735
    },
    {
        "content": "<p>Can you derive an instance going the other way?</p>",
        "id": 206539575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597120798
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/43ceb3e01ef133d5c39a1f2793f092751a573ce9/src/category_theory/monad/types.lean\">https://github.com/leanprover-community/mathlib/blob/43ceb3e01ef133d5c39a1f2793f092751a573ce9/src/category_theory/monad/types.lean</a></p>",
        "id": 206539870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597121244
    },
    {
        "content": "<blockquote>\n<p>We picked <code>control</code> because Haskell did but I'm starting to question the choice.</p>\n</blockquote>\n<p>You can argue that the <code>control</code> / <code>data</code> distinction doesn't make much sense in Haskell either <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 206558720,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597140597
    },
    {
        "content": "<p>what if we just use <code>haskell</code></p>",
        "id": 206558944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597140768
    },
    {
        "content": "<p>LGTM. :-)</p>",
        "id": 206559076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597140876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I added some stuff about morphisms of monads in the sense of category theory, as well as the stuff around the initial monad in <code>control.monad</code>. I think the natural thing to do next is to define the category of monads in <code>category_theory.monad.basic</code>, but I'm not sure what would be the best way to go about this, since <code>category_theory.monad</code>is a typeclass. Any suggestions?</p>\n<p>The changes from mathlib:master are here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/monad_morph\">https://github.com/leanprover-community/mathlib/compare/monad_morph</a></p>",
        "id": 206594729,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597162255
    },
    {
        "content": "<p>Nice</p>",
        "id": 206603459,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597166436
    },
    {
        "content": "<p>Something that I would like to see in this PR is to show that <code>state_t m</code> defines a morphism between <code>m</code> and <code>state_t m</code> (same for <code>reader_t</code> and <code>cont_t</code>). It would also be cool to see <code>state_t</code> treated as a functor on monad morphisms (same for other transformers). Then,  we can have a systematic way of transforming <code>state_t m</code> to <code>state_t n</code></p>",
        "id": 206603763,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597166597
    },
    {
        "content": "<p>I can add that, but it's actually true for any monad transformer. Is there a class for monad transformers?</p>",
        "id": 206603834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597166639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I think this would be very honest. At the same time, I think we wouldn't want to create the expectation that we'd be perfectly faithful to Haskell whereas we should take liberties for a nicer formalization</p>",
        "id": 206603978,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597166697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Morphisms.20of.20monads/near/206603834\">said</a>:</p>\n<blockquote>\n<p>I can add that, but it's actually true for any monad transformer. Is there a class for monad transformers?</p>\n</blockquote>\n<p>There is <code>monad_lift</code> but it doesn't have laws. I have a version somewhere that adds the law if you want but it's not hard to come up with.</p>",
        "id": 206604083,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597166744
    },
    {
        "content": "<p>Oh, it looks like <code>monad_lift</code> is essentially a morphism of monads with no rules.</p>",
        "id": 206605341,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597167308
    },
    {
        "content": "<p>So perhaps it makes sense to unbundle the definition of a monad morphism, extending <code>has_monad_lift</code>, and just add the rules?</p>",
        "id": 206605809,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597167502
    },
    {
        "content": "<p>How about bundling monads instead?</p>",
        "id": 206606541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597167821
    },
    {
        "content": "<p>I would be happy with that. But I don't know about others :)</p>",
        "id": 206606671,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597167873
    },
    {
        "content": "<p>I think certainly the <code>category_theory.monad</code> could be bundled.</p>",
        "id": 206607153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597168097
    },
    {
        "content": "<p>Well... it is already  -- <code>Mon_ (C \\func C)</code>.</p>",
        "id": 206607361,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597168205
    },
    {
        "content": "<p>Okay, I made bundled monads <code>Monad C</code> and made it a category. Next up, \"monads are just monoids in ...\".</p>",
        "id": 206640887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597186551
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/578b4bf74169b9ec65dca05df84508950971b7e2/src/category_theory/monad/basic.lean#L156\">https://github.com/leanprover-community/mathlib/blob/578b4bf74169b9ec65dca05df84508950971b7e2/src/category_theory/monad/basic.lean#L156</a></p>",
        "id": 206641134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597186745
    }
]