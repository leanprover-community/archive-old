[
    {
        "content": "<p>Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finset.sup_mul_left</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(or similarly for appropriate generalisations away from <code>nnreal</code>)?</p>",
        "id": 273451800,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646031318
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_finset_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">s.induction_on</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bot_eq_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">mul_sup</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>exists in LTE. Not sure if that is helpful...</p>",
        "id": 273451930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646031485
    },
    {
        "content": "<p>I see, so you've done another special case. :-) If anyone can think of a good generalisation, let me know!</p>",
        "id": 273453416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646033034
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span></p>",
        "id": 273455252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646034909
    },
    {
        "content": "<p>I am trying to see what can be done using the new <code>pos_mul</code> typeclasses.  I will report soon!</p>",
        "id": 273455273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646034952
    },
    {
        "content": "<p>Do you know about comp_sup_eq_sup_comp_of_is_total?</p>",
        "id": 273457714,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1646036870
    },
    {
        "content": "<p>I think that what Alistair suggests is probably a better way.  At least before the new <code>pos_mul</code> typeclasses advance more.  If you want to see a not-so-pretty way of obtaining the results above, below is some not polished code!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid_lemmas_zero_lt</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">zero_lt</span> <span class=\"n\">finset</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">new.mul_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_zero_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pos_mul_mono</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup_eq_max</span><span class=\"o\">,</span> <span class=\"n\">sup_eq_max</span><span class=\"o\">,</span> <span class=\"n\">max_eq_right</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">max_eq_right</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">covariant_class.elim</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a0</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup_eq_max</span><span class=\"o\">,</span> <span class=\"n\">sup_eq_max</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">covariant_class.elim</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a0</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">new.finset.sup_mul_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_zero_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pos_mul_mono</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">s.induction_on</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sup_empty</span><span class=\"o\">,</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">b0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"n\">hbs</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">bot_le</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">sup_insert</span><span class=\"o\">,</span> <span class=\"n\">new.mul_sup</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">pos_mul_mono</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">elim</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a0</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">bc</span><span class=\"o\">,</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">bc</span> <span class=\"n\">a0.2.le</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset.sup_mul_left</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">new.finset.sup_mul_left</span> <span class=\"n\">nnreal.bot_eq_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 273459018,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646037669
    },
    {
        "content": "<p>However, for this to be viable, there is the need of some API for <code>pos_mul</code>, which I have not yet gotten around to.</p>",
        "id": 273459162,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646037757
    },
    {
        "content": "<p>Have a look at <a href=\"https://tqft.net/mathlib/data/real/pointwise\">file#data/real/pointwise</a></p>",
        "id": 273472348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646045551
    },
    {
        "content": "<p>Does this follow from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.map_finset_sup\">docs#order_iso.map_finset_sup</a>?</p>",
        "id": 273481390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646051216
    },
    {
        "content": "<p>... if that existed</p>",
        "id": 273481424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646051241
    },
    {
        "content": "<p><code>(finset.comp_sup_eq_sup_comp _ _ _).symm</code> is very close to a proof. My orange bars aren't behavior so I can't tell you more than tat</p>",
        "id": 273482736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646051983
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nnreal.finset_sup_mul_left</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.comp_sup_eq_sup_comp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nnreal.mul_sup</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 273483297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646052295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.2Esup_mul_left/near/273481390\">said</a>:</p>\n<blockquote>\n<p>Does this follow from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.map_finset_sup\">docs#order_iso.map_finset_sup</a>?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_finset_sup\">docs#map_finset_sup</a></p>",
        "id": 273522081,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646068246
    },
    {
        "content": "<p>I added it less than a week ago.</p>",
        "id": 273522118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646068266
    },
    {
        "content": "<p>Sounds like its proof can be golfed using the above :)</p>",
        "id": 273522911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646068622
    },
    {
        "content": "<p>The proof of <code>map_finset_sup</code>?</p>",
        "id": 273523248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646068792
    },
    {
        "content": "<p>Yes, as <code>finset.comp_sup_eq_sup_comp _ map_sup map_bot</code> modulo underscores</p>",
        "id": 273527798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646070678
    },
    {
        "content": "<p>I found myself needing this again - did we ever PR it?</p>",
        "id": 279390411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650364072
    },
    {
        "content": "<p>I can't work out what map to pass to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_finset_sup\">docs#map_finset_sup</a></p>",
        "id": 279390465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650364089
    },
    {
        "content": "<p>I think we're missing the map.</p>",
        "id": 279390741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650364316
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal.mul_finset_sup\">docs#nnreal.mul_finset_sup</a> exists</p>",
        "id": 279390905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650364434
    },
    {
        "content": "<p>It should be generalized to <code>covariant_class α α (*) (≤)</code>.</p>",
        "id": 279391007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650364494
    },
    {
        "content": "<p>In the meantime I've made <a href=\"https://github.com/leanprover-community/mathlib/pull/13512\">#13512</a></p>",
        "id": 279391221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650364636
    }
]