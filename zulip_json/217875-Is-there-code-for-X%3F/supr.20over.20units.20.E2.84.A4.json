[
    {
        "content": "<p>Do we have this anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">supr_units_int</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>  <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr_bool_eq\">docs#supr_bool_eq</a> is close, but I'm not sure of the easiest way to glue it</p>",
        "id": 255566048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633005678
    },
    {
        "content": "<p>Shouldn't there be general machinery for fintypes that folds over <code>finset.univ</code> or something like that?</p>",
        "id": 255566516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633005871
    },
    {
        "content": "<p>Doing this just for <code>units ℤ</code> seems too specific. If I take the sup indexed by <code>fin 5</code>, I want 3 well-chosen simp/rw lemmas to turn it into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>etc...</p>",
        "id": 255566685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633005945
    },
    {
        "content": "<p>I know there's something along the lines of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.units_eq_one_or\">docs#int.units_eq_one_or</a>, (EDIT:) and we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units_int.univ\">docs#units_int.univ</a></p>",
        "id": 255566691,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633005949
    },
    {
        "content": "<p>Converting to <code>finset.sup</code> sounds like the way to go</p>",
        "id": 255566826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633005997
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sup_eq_supr\">docs#finset.sup_eq_supr</a>?</p>",
        "id": 255566852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633006009
    },
    {
        "content": "<p>Yup</p>",
        "id": 255566881,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633006024
    },
    {
        "content": "<p>And then perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sup_insert\">docs#finset.sup_insert</a>?</p>",
        "id": 255566959,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633006062
    }
]