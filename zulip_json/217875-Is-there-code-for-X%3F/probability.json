[
    {
        "content": "<p>I remember some people talking about how it's hard to think of a good API for probability (with random variables and independence and all that) in the context of proving the existence of special graphs with the probabilistic method</p>",
        "id": 196201588,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588608055
    },
    {
        "content": "<p>do we have any nontrivial theorems involving an infinite sequence of random variables on the same space, say a central limit theorem?</p>",
        "id": 196201669,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588608100
    },
    {
        "content": "<p>If not, I think that \"prove anything that looks like a central limit theorem, and then study it to understand what is needed from the probability API\" is a good line of work</p>",
        "id": 196201789,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588608146
    },
    {
        "content": "<p>We have a whole bunch of stuff on measure spaces. But nothing specialised to probability. At some point there was a PR by <span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span>. I don't know what happened to it. Maybe it can be resurrected?</p>",
        "id": 196207028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588610258
    },
    {
        "content": "<p>Yeah, I agree that the measure spaces are mature enough that it should be easy to do probability on top of</p>",
        "id": 196207417,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588610438
    },
    {
        "content": "<p>Apologies. I do have a tiny probability theory library up in a different repo, but it's out of date and breaks with current mathlib. I keep putting it off but I promise to devote some time to it the next couple of weeks and will try to PR.</p>",
        "id": 196208835,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1588611148
    },
    {
        "content": "<p>PR, PR, PR before it's too late. Every Lean code that is not PRed to mathlib is doomed to bit rot.</p>",
        "id": 196208990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588611229
    },
    {
        "content": "<p>link to your repo?</p>",
        "id": 196209957,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588611672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/probability/near/196209957\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/probability/near/196209957\">said</a>:</p>\n<blockquote>\n<p>link to your repo?</p>\n</blockquote>\n<p><a href=\"https://github.com/jtristan/stump-learnable/tree/master/src/lib/attributed\" title=\"https://github.com/jtristan/stump-learnable/tree/master/src/lib/attributed\">https://github.com/jtristan/stump-learnable/tree/master/src/lib/attributed</a></p>",
        "id": 196210594,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1588611951
    },
    {
        "content": "<p>This looks quite nice! I can see a pi-instance for measurable spaces, and binary products for measure spaces: is there a pi-instance for probability spaces somewhere?</p>",
        "id": 196213638,
        "sender_full_name": "David Wärn",
        "timestamp": 1588613493
    },
    {
        "content": "<p>no, sorry. isn't that <a href=\"https://en.wikipedia.org/wiki/Ionescu-Tulcea_theorem\" title=\"https://en.wikipedia.org/wiki/Ionescu-Tulcea_theorem\">https://en.wikipedia.org/wiki/Ionescu-Tulcea_theorem</a>?</p>",
        "id": 196216403,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1588614903
    },
    {
        "content": "<p>I think proving Ionescu Tulcea was originally what <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> was aiming at</p>",
        "id": 196216615,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1588614987
    },
    {
        "content": "<p>Hmm I haven't seen that. I'm thinking of something like question 14 here (countability is beside the point)<br>\n<a href=\"http://www.dpmms.cam.ac.uk/study/II/Probability%2BMeasure/ex2.pdf\" title=\"http://www.dpmms.cam.ac.uk/study/II/Probability%2BMeasure/ex2.pdf\">http://www.dpmms.cam.ac.uk/study/II/Probability%2BMeasure/ex2.pdf</a><br>\nIt seems to me like you have all the ingredients for this construction, but it's maybe a bit technical</p>",
        "id": 196222611,
        "sender_full_name": "David Wärn",
        "timestamp": 1588617730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> Would you mind starting a github project over at <a href=\"https://github.com/leanprover-community/mathlib/projects\" title=\"https://github.com/leanprover-community/mathlib/projects\">https://github.com/leanprover-community/mathlib/projects</a> with little stubs of what you think should be done?</p>",
        "id": 196266991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588653206
    },
    {
        "content": "<p>I guess what I want from a probability interface is to just expose the \"algebra of random variables\". The fact that this can be modeled with measure spaces should be left on the inside</p>",
        "id": 197704887,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589555079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/probability/near/197704887\">said</a>:</p>\n<blockquote>\n<p>I guess what I want from a probability interface is to just expose the \"algebra of random variables\". The fact that this can be modeled with measure spaces should be left on the inside</p>\n</blockquote>\n<p>Many interesting theorems in probability really depend on the fact that you have a measure space, and that the notion of \"almost surely\" is well behaved. Think of the strong law of large numbers, or the martingale convergence theorem, for instance.</p>",
        "id": 197709896,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589557013
    },
    {
        "content": "<p>how much well behavedness do you need? isn't it enough to know that countable intersections of almost sure events are almost sure?</p>",
        "id": 197711120,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589557525
    },
    {
        "content": "<p>isn't that basically a measure space?</p>",
        "id": 197711457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589557657
    },
    {
        "content": "<p>or at least a sigma algebra</p>",
        "id": 197711498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589557681
    },
    {
        "content": "<p>I don't know how you intend to say anything quantitative about probabilities themselves without a measure though</p>",
        "id": 197711715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589557767
    },
    {
        "content": "<p>I think the idea behind \"algebra of random variables\" is that you want to avoid committing to the idea that random variables are functions at all</p>",
        "id": 197711885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589557846
    },
    {
        "content": "<p>or at least, you want to avoid committing to the idea that they are functions on some specific measure space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span></p>",
        "id": 197711923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589557863
    },
    {
        "content": "<p>but you can still ask probability questions about them?</p>",
        "id": 197711980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589557887
    },
    {
        "content": "<p>yes</p>",
        "id": 197712016,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589557904
    },
    {
        "content": "<p>then can't you reverse engineer a measure space from that?</p>",
        "id": 197712109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589557930
    },
    {
        "content": "<p>What really matters is not that they are functions, but their joint distribution, as a measure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi mathvariant=\"double-struck\">N</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^{\\mathbb{N}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.845223em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span></span></span></span> if you are considering real-valued random variables indexed by integers for instance.</p>",
        "id": 197712119,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589557933
    },
    {
        "content": "<p>They still have expectations, for example. Except for the ones that don't, and that is where things start to get a bit tricky...</p>",
        "id": 197712135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589557942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/probability/near/197712109\">said</a>:</p>\n<blockquote>\n<p>then can't you reverse engineer a measure space from that?</p>\n</blockquote>\n<p>yes, once you've given any finite amount of information about your variables, there's surely some \"minimal\" measure space + functions from it that models the things you've said</p>",
        "id": 197712243,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558009
    },
    {
        "content": "<p>but you want to remain agnostic about whether you're using the minimal one or an arbitrary extension of it</p>",
        "id": 197712283,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558036
    },
    {
        "content": "<p>I was thinking of using all the possible questions you could ask about the variables</p>",
        "id": 197712344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558048
    },
    {
        "content": "<p>(not finite)</p>",
        "id": 197712356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558057
    },
    {
        "content": "<p>sure, that will have a minimal model by a measure space</p>",
        "id": 197712410,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558083
    },
    {
        "content": "<p>and we remain agnostic about whether or not we're adding more variables later</p>",
        "id": 197712436,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558097
    },
    {
        "content": "<p>that seems difficult to do in lean</p>",
        "id": 197712470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558113
    },
    {
        "content": "<p>you can't just add elements to a type, not without rejiggering everything on top</p>",
        "id": 197712514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558134
    },
    {
        "content": "<p>i agree that it's hard</p>",
        "id": 197712672,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558203
    },
    {
        "content": "<p>I don't think it's adding complexity though</p>",
        "id": 197712681,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558208
    },
    {
        "content": "<p>It's similar to how you might do a computation using \"indeterminates\", which you could think of as happening in a polynomial or power series ring, but then later you might introduce another indeterminate.</p>",
        "id": 197712713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589558223
    },
    {
        "content": "<p>if you \"do probability\" with measure spaces then you're going to be dealing with these extensions of your measure space all the time</p>",
        "id": 197712741,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558238
    },
    {
        "content": "<p>if you have a measure space you already have all random variables that could ever exist, so adding a new one is trivial</p>",
        "id": 197712747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558241
    },
    {
        "content": "<p>You only have the ones that exist on that space. The kind of thing you would want to add is a new variable that's independent from all of those (e.g., by forming a product measure space)</p>",
        "id": 197712855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589558293
    },
    {
        "content": "<p>if I want to add a new one with the constraint that it's independent from all the ones I have talked about before, without extending the space, that's not trivial<br>\nI guess the way you'd do it is to extend to a product space and then apply an isomorphism of measure spaces between the original space and its extension</p>",
        "id": 197712879,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558305
    },
    {
        "content": "<p>and the point is that it would be nice to have machinery that does that for you</p>",
        "id": 197713087,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558404
    },
    {
        "content": "<p>you have to keep track of the notion of \"random variables that are in scope for this discussion\"</p>",
        "id": 197713124,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558418
    },
    {
        "content": "<p>but you already have to do that when doing probability informally anyway</p>",
        "id": 197713154,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558431
    },
    {
        "content": "<p>Color me skeptical</p>",
        "id": 197713173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558438
    },
    {
        "content": "<p>The funny thing is that type theory gets to have this built in</p>",
        "id": 197713202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589558453
    },
    {
        "content": "<p>gets what built in?</p>",
        "id": 197713229,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558465
    },
    {
        "content": "<p>It basically took all the good ideas for itself but doesn't reexport them to the internal language</p>",
        "id": 197713290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589558490
    },
    {
        "content": "<p>having a variable context that can be extended by lambdas, etc</p>",
        "id": 197713302,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589558498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/probability/near/197713173\">said</a>:</p>\n<blockquote>\n<p>Color me skeptical</p>\n</blockquote>\n<p>I'm taking your comment to mean \"the things you're describing sounds possible in principle, but I bet if I thought about it for a while I would find a different way to do probability that felt easier and/or more natural\"</p>",
        "id": 197713425,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589558544
    },
    {
        "content": "<p>You would need to first do it the hard way enough times for us to notice the pattern and abstract it into a tactic</p>",
        "id": 197713501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558578
    },
    {
        "content": "<p>this is not the kind of design you are likely to get right on the first try</p>",
        "id": 197713522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558593
    },
    {
        "content": "<p>I need to see some of these probability arguments where you are dynamically adding variables to give guidance about how best to model them</p>",
        "id": 197713745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589558688
    },
    {
        "content": "<p>As I said, this \"minimal model\" is exactly the joint distribution of all your random variables on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi mathvariant=\"double-struck\">N</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^{\\mathbb{N}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.845223em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span></span></span></span> (i.e., the image of your probability on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> under the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi><mo>↦</mo><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo><mtext> </mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\omega \\mapsto (X_0(\\omega), X_1(\\omega), \\dotsc)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">)</span></span></span></span>), and your new random variable is just the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>-th coordinate.</p>",
        "id": 197714024,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589558801
    },
    {
        "content": "<p>At POPL I had an interesting discussion with Neel Krishnaswami, and he explained that he was working on some DSL in DTT that captured the semantics of probability theory in a way interesting to the working probability theorist. Maybe we should ask him to explain it in more detail. (I guess that most of my first sentence is nonsense on the nose.)</p>",
        "id": 197717724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589560428
    },
    {
        "content": "<p>I think DTT is dependent type theory, what DSL?</p>",
        "id": 197720845,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589561749
    },
    {
        "content": "<p>Domain specific language?</p>",
        "id": 197720945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589561783
    },
    {
        "content": "<p>domain specific language</p>",
        "id": 197720947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589561785
    },
    {
        "content": "<p>cool, thanks</p>",
        "id": 197720978,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589561799
    },
    {
        "content": "<p>I put the question mark because I have no idea what this means ;-)</p>",
        "id": 197721007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589561812
    },
    {
        "content": "<p>my guess is it means \"programming language where you're always working inside of some specific monad\"</p>",
        "id": 197721171,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589561897
    },
    {
        "content": "<p>in this context it probably means that you can do things like Jalex suggested like create new random variables and put them together in a monad</p>",
        "id": 197721225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589561928
    },
    {
        "content": "<p>The Giry monad, right?</p>",
        "id": 197721286,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589561962
    },
    {
        "content": "<p>I've been told there is some foundational issue with higher order functions in the Giry monad though</p>",
        "id": 197721347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589561987
    },
    {
        "content": "<p>which makes the denotation of \"probabilistic programs\" dubious</p>",
        "id": 197721458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589562017
    },
    {
        "content": "<p>The category of measurable spaces isn't Cartesian closed. (There isn't a canonical measurable space structure on the function type which makes the evaluation maps measurable). So the Giry monad can't eat higher order functions and so you can use it to denotate only a small uninteresting subset of probabilistic programming languages.</p>",
        "id": 197775038,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1589601250
    },
    {
        "content": "<p>But there have been other gadgets (\"Quasi-Borel Spaces\") which overcome this issue IIRC.</p>",
        "id": 197775048,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1589601303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116448\">Koundinya Vajjha</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/probability/near/196208835\">said</a>:</p>\n<blockquote>\n<p>Apologies. I do have a tiny probability theory library up in a different repo, but it's out of date and breaks with current mathlib. I keep putting it off but I promise to devote some time to it the next couple of weeks and will try to PR.</p>\n</blockquote>\n<p>I've updated (almost all of?) this to a recent mathlib over at <a href=\"https://github.com/alexjbest/stump-learnable\">https://github.com/alexjbest/stump-learnable</a></p>",
        "id": 198711734,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590454101
    },
    {
        "content": "<p>everything not PR’d is lost in time — Ancient Chinese Proverb</p>",
        "id": 198718942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590466252
    },
    {
        "content": "<p>Hi all,<br>\nI was working on probability and measure theory as well, and was pointed to this thread.</p>\n<p>I looked over your code, and noticed you have the basic stuff, as well as advancements like the Giray Monad.</p>\n<p><a href=\"#narrow/stream/116395-maths/topic/Radon-Nikodym.20Theorem\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Radon-Nikodym.20Theorem</a></p>\n<p>Specifically, see:</p>\n<p><a href=\"https://github.com/google/formal-ml/blob/master/src/formal_ml/probability_space.lean\">https://github.com/google/formal-ml/blob/master/src/formal_ml/probability_space.lean</a></p>\n<p>There are a lot of design questions that it would be good to talk about:</p>\n<ol>\n<li>\n<p>random variables/measurable functions/events/measurable sets as types?<br>\n  This allows for there to be semirings, et cetera. OTOH, more stuff to unfold. A key point was thinking about a measurable function<br>\n  as a function from a measurable space to another measurable space, and a random variable as a function from a  probability space<br>\n  to a measurable space, such that expectation and probability of random variables and events could be explicit. </p>\n</li>\n<li>\n<p>Syntactic sugar? I was impressed that you could write Pr[A ∧ᵣ  B]≤ Pr[A], and E[X + Y]=E[X] + E[Y]<br>\n    I think that this lift from the complexities and details of measure theory may be important for wider adoption.</p>\n</li>\n<li>\n<p>probability_space or probability_measure? This question is perhaps the most deep, as going both ways will split the code needlessly. Either is better than going both ways.</p>\n</li>\n<li>independent variables/identical variables: these are very important to me as a ML researcher. </li>\n</ol>\n<p>Anyway, we should figure out how to get more probability theory into mathlib.</p>",
        "id": 210548294,
        "sender_full_name": "Martin Zinkevich",
        "timestamp": 1600448757
    },
    {
        "content": "<p>The Giry monad is now in mathlib, btw</p>",
        "id": 210549229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600449291
    },
    {
        "content": "<p>NB: <a href=\"https://github.com/leanprover-community/mathlib/blob/ae72826a13a0ce58bf75cc58c0c2219b567df2fa/src/measure_theory/giry_monad.lean#L16\">https://github.com/leanprover-community/mathlib/blob/ae72826a13a0ce58bf75cc58c0c2219b567df2fa/src/measure_theory/giry_monad.lean#L16</a></p>",
        "id": 210554135,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600451763
    },
    {
        "content": "<p>I.e. mathlib's Giry monad has all measures.</p>",
        "id": 210554280,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600451829
    },
    {
        "content": "<p>Unless there is another Giry monad in mathlib that I don't know about <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 210554418,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600451892
    },
    {
        "content": "<p>I wouldn't be too surprised if this was just because it predated the existence of probability measures</p>",
        "id": 210554454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600451912
    },
    {
        "content": "<p>Yeah I'm sure this is the case, but I don't think mathlib has the monadic structure on probability measures. I would be happy to be wrong.</p>",
        "id": 210554590,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600451999
    },
    {
        "content": "<p>Giry monads aside, what are the thoughts on probability spaces versus probability measures?</p>\n<p>-Marty</p>",
        "id": 210559558,
        "sender_full_name": "Martin Zinkevich",
        "timestamp": 1600454444
    },
    {
        "content": "<p>Is a probability space the same thing as a measurable space endowed with a probability measure? If so, this is essentially a bundled vs. unbundled question.</p>",
        "id": 210560610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600454936
    },
    {
        "content": "<p>What are the morphisms in the category of probability spaces?</p>",
        "id": 210561478,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600455370
    },
    {
        "content": "<p>Hmmm...I am not sure how to answer that (I don't understand category theory).</p>\n<p>Here is my best effort to answer your question literally:</p>\n<p>Okay, measurable spaces are over sets, and probability space is with respect to a measurable space. So these are our objects.</p>\n<p>Consider probability space PA over A. If you have a function f:A -&gt; B, then:<br>\nDefine measurable space MB over B such that B' is measurable iff its preimage in A is measurable.<br>\nDefine probability measure PB over B such that the measure of any measurable B' is the measure of its preimage in A.</p>\n<p>So each function from any set A to any set B serves as a morphism. An identity function serves as an identity. Composition of functions<br>\ngives the composite morphism. This function would be a measurable function from MA to MB, but not necessarily the only one.</p>\n<p>From a category perspective, this is a \"subcategory\" of all measure spaces. I don't think it has an initial object.</p>\n<p>In machine learning, we normally think about a single, \"undefined\" probability space. You could think about this as an initial object (insofar as the objects we are concerned with, as opposed to in the category of all probability spaces). We often don't think deeply about the nature of this probability space. What is important to us is the random variables defined as function from that probability space to other more meaningful sets, such as the reals, booleans, integers, et cetera. In these domains, what is measurable or not matters. Having a single initial object in our minds allows us to talk about the independence of any two arbitrary random variables in our model, whereas if we define each random variable more directly on its most obvious space (e.g., define a Gaussian as a probability space on the reals, or a binomial as a probability space on the natural numbers), then I can't talk about how they relate. However, mapping back to a \"local\" probability space is useful if I want to talk about integration.</p>\n<p>From a category perspective, this is a \"subcategory\" of all unsigned measure spaces.</p>",
        "id": 210570420,
        "sender_full_name": "Martin Zinkevich",
        "timestamp": 1600460151
    },
    {
        "content": "<p>Okay I think I understand. The objects in the category are pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>μ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X,\\mu)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a measurable space and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> is a measure (which so happens to be a probability measure in this case). And a morphism of pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>μ</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">,</mo><msup><mi>μ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X,\\mu) \\to (X',\\mu')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a measurable function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><msup><mi>X</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f : X \\to X'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> such that for all measurable subsets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">X'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, one has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>μ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu(f^{-1}(Y)) = \\mu'(Y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span>. Is this the category? This is asking for an equality of measures/functions on the nose, which seems problematic, no? Wouldn't something like this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.ae_eq_fun\">docs#measure_theory.ae_eq_fun</a>  have better properties?</p>",
        "id": 210571590,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600460858
    },
    {
        "content": "<p>I'm not really sure what you mean by \"\"undefined\" probability space\"</p>",
        "id": 210572268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600461310
    },
    {
        "content": "<p>The earlier discussion on this same topic from around May 15 actually discussed this concept a bit.</p>",
        "id": 210572789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600461621
    },
    {
        "content": "<p>I think it would be interesting to construct this category in lean, where morphisms extend functions are defined \"amost everyone\" and agree \"amost everywhere\", etc.</p>",
        "id": 210573134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600461837
    },
    {
        "content": "<p>This paper proposes what seems to me a sensible categorical framework for this style of probabilistic reasoning, though I don't know what the implications are for formalization:<br>\n<a href=\"https://drops.dagstuhl.de/opus/volltexte/2017/8051/pdf/LIPIcs-CALCO-2017-1.pdf\">https://drops.dagstuhl.de/opus/volltexte/2017/8051/pdf/LIPIcs-CALCO-2017-1.pdf</a></p>",
        "id": 210573855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600462282
    },
    {
        "content": "<p>Looks interesting. I think Voevodsky had some notes on a categorical foundation of probability theory.</p>",
        "id": 210592428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600481573
    },
    {
        "content": "<p>Okay, I am a little confused. Perhaps I should not have mentioned the Giry monad. :-)<br>\nMy primary interest is not in using category theory, but in being able to talk about probability and expectation.<br>\nIf no categories were added, I would be fine. As I said, I don't understand category theory. I am not opposed to what you are suggesting, I just don't understand it.</p>\n<p>I do like the idea of thinking about real random variables as a ring and ennreal random variables as a semiring, but that does not require category theory. I am excited about writing things like:<br>\nE[X * Y] = E[X] * E[Y]<br>\nE[2 * X] = E[X] + E[X]<br>\nPr[X&lt;Y ∧ᵣ B]<br>\nAnd so forth, so I can do machine learning. If category theory helps me in some way (such as being related to how all the theorems seem impossibly short in lean), then I am all for it.</p>\n<p>Am I missing something? I know category theory is useful in Haskell programming, but I don't yet understand enough about mathlib and Lean. Does designing with category theory help me avoid disasters in the future?<br>\n-Marty</p>",
        "id": 210592562,
        "sender_full_name": "Martin Zinkevich",
        "timestamp": 1600481832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247798\">@Martin Zinkevich</span> I think you can safely ignore category theory for the time being. Can you explain more about what is needed to get the nice notation that you wrote about above?<br>\nAt some point, I've heard Neel Krishnaswami talk about some interesting ideas for making probability theory \"possible\" in type theoretic theorem provers. The problem (as I understood from him, again, I'm not a probability theorist) is that typical proofs in the area don't fit nicely in the DTT paradigm. So you need some sort of DSL on top of it, in order to add extra dimensions(?) [i.e. new random variables] to you probability space whenever you need them half-way a proof.</p>\n<p>Does this make sense? If someone can make sense of what I'm saying, then it might be worth contacting Neel (he doesn't seem to be on this Zulip) in order to get some good advice on design decisions.</p>",
        "id": 210595492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600487153
    },
    {
        "content": "<p>I think the problem is precisely that nobody really knows how to formalize the style of argument used in probability theory. Of course we can \"lower\" any specific such argument into a proof in which the random variables become measurable functions on specific probability spaces and then formalize it, but this leaves something to be desired. Trying to understand probabilistic arguments on their own terms is an active topic in applied category theory, which isn't meant to imply that the eventual solution necessarily involves adopting a bunch of category theory, but just that there seems to be some real conceptual problem to solve here.</p>",
        "id": 210609493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600513101
    },
    {
        "content": "<p>For those who already speak the lingo, though, it seems plausible that these probabilistic arguments are really happening in the sheaf semantics of the topos described in that paper, so that when we assert the existence of a \"fresh\" random variable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> which is independent of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, ..., that variable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> might only exist after we base change along a cover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega' \\to \\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> and pull back <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, ... to random variables on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Omega'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 210609683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600513496
    },
    {
        "content": "<p>In any case, it's probably a good idea to start out by defining \"a random variable on sample space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> valued in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>\", and defining expectation, proving linearity of expectation, etc., at least to the point where we <em>can</em> formalize the sorts of arguments that are supposedly awkward in this style, since it seems like the eventual underlying argument will have to be of this form anyways, and we'll learn more about these arguments by actually trying to formalize them.</p>",
        "id": 210609811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600513742
    },
    {
        "content": "<p>And maybe it turns out that the direct approach is adequate somehow (for example can we just pick <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> so large that for any countable collection of random variables on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span>, we can still find a new random variable which is independent of them?)</p>",
        "id": 210609884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600513857
    },
    {
        "content": "<p>Can someone explain why this whole probability thing is even an issue? I thought measure theory solved the problem of making probability theory rigorous. What is missing from the standard measure theory approach? Why isn't there just some dictionary expection -&gt; some integral, standard deviation -&gt; some integral etc?</p>",
        "id": 210610028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600514113
    },
    {
        "content": "<p>I'll try to cook up an example, but at a high level the issue is sort of like: if we want to talk about the local behavior of a function at a point, why don't we just use εs and δs? What's the deal with filters and germs?</p>",
        "id": 210610620,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515181
    },
    {
        "content": "<p>I see -- so the issue is really that there is some interface problem, rather than a mathematical one?</p>",
        "id": 210610780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515405
    },
    {
        "content": "<p>So suppose I'm interested in random graphs on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> vertices, and I've got a real-valued function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> of a graph that I'd like to think of as a random variable, and I want to prove a statement about the expectation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>",
        "id": 210610784,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515419
    },
    {
        "content": "<p>That's fine--we can define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> to be the set of all graphs on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> vertices, and equip it with a probability measure <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span>, and define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> as a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>:</mo><mi mathvariant=\"normal\">Ω</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">X : \\Omega \\to \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>, and define the expectation as the integral of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with respect to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span>--no problem so far.</p>",
        "id": 210610792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515475
    },
    {
        "content": "<p>So, let's say we've managed to write down the statement of our proposition.</p>",
        "id": 210610840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515496
    },
    {
        "content": "<p>Now maybe the proof, for whatever reason, starts like this:<br>\nDefine a new random variable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> as follows: flip a coin, and if it's heads return <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>; otherwise return <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 210610848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515536
    },
    {
        "content": "<p>Where obviously the coin flip is meant to be independent of the random graph we're talking about</p>",
        "id": 210610858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515570
    },
    {
        "content": "<p>So, now I guess we have a problem because there is literally no \"random variable\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>:</mo><mi mathvariant=\"normal\">Ω</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">Y : \\Omega \\to \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> which has the correct relationship to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> (if I failed to set up the situation correctly, replace it with a better one <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>).</p>",
        "id": 210610928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515656
    },
    {
        "content": "<p>So, at this point we could apply what I guess would be the standard interpretation of this, and introduce a new sample space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><mi mathvariant=\"normal\">Ω</mi><mo>×</mo><mo stretchy=\"false\">{</mo><mrow><mi mathvariant=\"sans-serif\">h</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">a</mi><mi mathvariant=\"sans-serif\">d</mi><mi mathvariant=\"sans-serif\">s</mi></mrow><mo separator=\"true\">,</mo><mrow><mi mathvariant=\"sans-serif\">t</mi><mi mathvariant=\"sans-serif\">a</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">s</mi></mrow><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Omega' = \\Omega \\times \\{\\mathsf{heads}, \\mathsf{tails}\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathsf\">h</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">a</span><span class=\"mord mathsf\">d</span><span class=\"mord mathsf\">s</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">t</span><span class=\"mord mathsf\">a</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">l</span><span class=\"mord mathsf\">s</span></span><span class=\"mclose\">}</span></span></span></span> with the product measure, which comes with a measure-preserving projection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>:</mo><msup><mi mathvariant=\"normal\">Ω</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\pi : \\Omega' \\to \\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span>.</p>",
        "id": 210611006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515774
    },
    {
        "content": "<p>Now, wherever we had <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> before, we replace it by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>:</mo><mo>=</mo><mi>X</mi><mo>∘</mo><mi>π</mi><mo>:</mo><msup><mi mathvariant=\"normal\">Ω</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">X' := X \\circ \\pi : \\Omega' \\to \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>, and apply theorems that say things like (because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is measure-preserving) the expectation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">X'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the same as the expectation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, and so on, and so it doesn't really matter whether we talk about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">X'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 210611076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600515860
    },
    {
        "content": "<p>Aah I see, you've said enough. Thanks.</p>",
        "id": 210611090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515889
    },
    {
        "content": "<p>In my brain, Y somehow operates in a different universe, but you have to take the product of these universes if you want to relate Y to stuff going on in another universe.</p>",
        "id": 210611112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600515928
    },
    {
        "content": "<p>This sheaf theory stuff is appealing to me because this \"you might need to pull back everything in sight along a suitable map (cover) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega' \\to \\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span>, and then a thing will exist\" is exactly what happens in the interpretation of the existential quantifier in the sheaf semantics, so you can use it to interpret the existential statement \"there exists a random variable independent of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with such-and-such distribution\".</p>",
        "id": 210611400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600516339
    },
    {
        "content": "<p>So, to summarize, trying to find an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Omega''''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> large enough that the whole argument works is sort of like trying to find an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ε</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\varepsilon''''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ε</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> small enough that the whole argument works, except instead of an inequality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ε</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>&lt;</mo><mo>⋯</mo><mo>&lt;</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon'''' &lt; \\cdots &lt; \\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ε</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> you have a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>→</mo><mo>⋯</mo><mo>→</mo><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega'''' \\to \\cdots \\to \\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> to keep track of, which is what makes it into a category theory problem and not an order theory one.<br>\n(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> is really controlling a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>ε</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>+</mo><mi>ε</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x - \\varepsilon, x + \\varepsilon)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span></span></span></span> around <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, so there are the same maps in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> case too, but everything is pinned down as an open subset of some ambient space.)</p>",
        "id": 210611904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600517260
    },
    {
        "content": "<p>Thanks for this very coherent explanation.</p>",
        "id": 210613170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600519322
    },
    {
        "content": "<p>You can find other analogies in algebra--when you \"adjoin an indeterminate\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> (~ an independent random variable) to a ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> then the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>R</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R \\to R[Y]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span> that you implicitly apply everywhere is really pulling back \"functions\" on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi><mo>=</mo><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">c</mi></mrow><mtext> </mtext><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega = \\mathrm{Spec}\\, R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">c</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> along the cover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">c</mi></mrow><mtext> </mtext><mi>R</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega' = \\mathrm{Spec}\\, R[Y] \\to \\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">c</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span>.</p>",
        "id": 210613600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600519885
    },
    {
        "content": "<p>And routinely regarding elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> (say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R = k[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>) as also being elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[Y] = k[X, Y]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span> is something we do in algebra, that can be similarly annoying for formalization.</p>",
        "id": 210613835,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600520168
    },
    {
        "content": "<p>Mathematicians routinely elide obvious canonical injections. What formalization reveals is that, at least using current technology, these tend to chain badly. What I mean is that inserting 1 of these is no problem, but in general situations when you have to insert 10 of them in a working environment with 100s of potential coercions (aka canonical injections) in scope, it all grinds to a halt.</p>",
        "id": 210614055,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1600520598
    },
    {
        "content": "<p>Right, and what maybe doesn't transfer between otherwise analogous domains is that perhaps in algebra, say, you pretty much only ever insert a single coercion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>R</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R \\to R[Y]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span>, while in probability theory you need to make a whole bunch of these extensions as you carry out some complex argument. (I'm not saying the situation is necessarily this way for these particular areas, though my guess would be that this is at least somewhat correct.)</p>",
        "id": 210614444,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600521095
    },
    {
        "content": "<p>But even in Algebra, you want to be careful about too much polymorphism. <code>R[X]</code> has properties that <code>R[X,Y]</code> does not have. So it would be a disaster if you use some term that is inferred to be in <code>R[X]</code> at one point, prove something using that extra property, then push it to <code>R[X,Y]</code> and have that property come along for free. This kind of laisser-faire leads to real bugs in computer algebra systems.</p>",
        "id": 210614645,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1600521318
    },
    {
        "content": "<p>I am confident in the ability of the mathematicians using polynomials here that they are able to know when they are working in R[X] and when they are working in R[X,Y]. I absolutely agree that this informal \"set-theoretic\" world which mathematicians drop into when they are considering a collection of e.g. subrings of a ring is a very powerful intuition, but it cannot always be made to work, e.g. when you don't know how big your universe needs to be at the beginning of the argument (it might involve adjoining n indeterminates later, where n is a number which will only come out of a later calculation). If you don't know how big you want to be when you start, you're forced to build up rather than go down to subsets. The first time I discovered this I generated some huge thread in #maths called something like \"algebra is not scaling for me\". Since then I've understood the situation much better and am hoping that Kenny's <code>is_scalar_tower</code> tricks will help me in that particular situation.</p>",
        "id": 210616714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600524154
    },
    {
        "content": "<p>This is the kind of knowledge that I'd love to find a way to capture. Right now, it is too ephemeral. Once the principled way of dealing with some fragile situation is found, especially when the principled way of doing things is really no harder than the 'sloppy' way, it needs to be highlighted. I already love it when I see lots of mathematicians here talk about API and the like. Of course, mathematicians have been using the equivalent of APIs for a long time (what's a Ring after all?), what isn't as well known is that \"theories\" as a whole have APIs too. And that not all APIs scale equally well. Bill Farmer and I have written about this in our papers <a href=\"https://www.cas.mcmaster.ca/~carette/publications/hlt.pdf\">High Level Theories</a> from CICM 2008, and with Michael Kohlhase in <a href=\"https://arxiv.org/abs/1405.5956\">Realms: A Structure for Consolidating Knowledge about Mathematical Theories</a> at CICM 2014.</p>",
        "id": 210620554,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1600529347
    },
    {
        "content": "<p>In principle there are formalization papers for disseminating this knowledge.</p>",
        "id": 210620657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600529498
    },
    {
        "content": "<p>I agree, but I'm afraid that a lot of little gems would never end up being published. There is no good \"Formalization Letters\" kind of journal for 1-2 page papers. Both math and CS do themselves a disservice by forcing publishable chunks to be so large. [I hate slicing-and-dicing, don't get me wrong. A 20 page paper that has 1 page's worth of new material should never get published as is. If it were a &lt;= 2 page paper, that's a different thing.]</p>",
        "id": 210621103,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1600530037
    },
    {
        "content": "<p>We have Comptes Rendus but this is often for research announcements of larger stuff. I once disproved a conjecture of some fairly well-known guy, and the result could easily be described in just a few pages, so I wrote that up and sent it to Comptes Rendus and it got accepted.</p>",
        "id": 210623353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600533236
    },
    {
        "content": "<p>To get back to Reid's example with a coin flip and a random variable.</p>\n<p>In general, the approach used is that we assume that a single probability space exists, and then we define whatever functions necessary from it.</p>\n<p>The coin flip could either be defined as an event or a random variable from P to bool.measurable_space.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"n\">P</span> <span class=\"bp\">→</span><span class=\"n\">r</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span>\n<span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">P</span> <span class=\"bp\">→</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">real</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Then, one can define </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Y</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">indicator</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">=</span><span class=\"n\">r</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">X</span>\n</code></pre></div>\n\n\n<p>Here,<code>C =r true</code> is the event that <code>C</code> equals <code>true</code>. The indicator operator is a random variable that equals <code>1</code> if <code>(C =r true)</code>, and zero otherwise. This is a very common tool we use in machine learning, and it is useful for things such as \"how many examples are classified correctly?\".<br>\n<code>random_variable_independent_pair C X</code> indicates that these two variables are independent.</p>\n<p>So, here is an example of what we could write using probability_space.lean and real_random_variable.lean above:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">indicator_product</span> <span class=\"o\">{</span><span class=\"err\">Ω</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">probability_space</span> <span class=\"err\">Ω</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">P</span> <span class=\"bp\">→</span><span class=\"n\">r</span> <span class=\"n\">borel</span> <span class=\"n\">nnreal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"n\">P</span> <span class=\"bp\">→</span><span class=\"n\">r</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span><span class=\"o\">}:</span>\n  <span class=\"n\">random_variable_independent_pair</span> <span class=\"n\">X</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">indicator</span> <span class=\"o\">(</span><span class=\"n\">rv_eq</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">const_random_variable</span> <span class=\"n\">tt</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>\n  <span class=\"n\">E</span><span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Pr</span><span class=\"o\">[</span><span class=\"n\">rv_eq</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">const_random_variable</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">*</span> <span class=\"n\">E</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p><code>rv_eq C (const_random_variable tt)</code> is basically <code>(C =r true)</code>.</p>\n<p>There are some caveats: random_variable_independent_pair technically requires two random variables of equal type right now, but there is no<br>\nreason that the codomains need to be equal. Obviously, a better equality event notation would be nice.</p>\n<p>But, from a mathematical perspective, this is very close to what you are talking about.</p>",
        "id": 210623438,
        "sender_full_name": "Martin Zinkevich",
        "timestamp": 1600533354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247798\">@Martin Zinkevich</span> pro tip: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 210623815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600533785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Is Giry monad a solution to the aforementioned problem? If not, what can solve it?</p>",
        "id": 210637658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600553334
    },
    {
        "content": "<p>With the Giry monad the (measure associated Y) can be written with do notation approx like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Bernoulli</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>I'm not really sure what problem you're referring to <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 210638492,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600554732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/probability/near/210610928\">said</a>:</p>\n<blockquote>\n<p>So, now I guess we have a problem because there is literally no \"random variable\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>:</mo><mi mathvariant=\"normal\">Ω</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">Y : \\Omega \\to \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> which has the correct relationship to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> (if I failed to set up the situation correctly, replace it with a better one <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>).</p>\n</blockquote>",
        "id": 210638513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600554784
    },
    {
        "content": "<p>this problem</p>",
        "id": 210638514,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600554789
    },
    {
        "content": "<p>And expected values should be thought of as the structure map for an algebra of the Giry monad</p>",
        "id": 210638520,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600554806
    },
    {
        "content": "<p>Well, I'm assuming the proof really wants to talk about random variables and not just their distributions, which is what the Giry monad is about.</p>",
        "id": 210639415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600556504
    },
    {
        "content": "<p>From the point of view of the Giry monad, real valued random variables are \"just\" probability distributions on the reals which happen to be pushforwards of some distribution under some measurable map. The problem is the question of how to reason about such things...</p>",
        "id": 210639953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600557453
    },
    {
        "content": "<p>BTW, I really like the sheaf theoretic point of view in the paper that <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> mentioned.</p>",
        "id": 210639997,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600557518
    },
    {
        "content": "<p>I am new to Lean, please forgive me if this question is naive or already has an answer.</p>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> be a nonempty set, the sample space.</p>\n<p>Let set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span> of subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> be a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-algebra so that</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi><mo>∈</mo><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega \\in \\mathcal F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi><mo>∖</mo><mi>F</mi><mo>∈</mo><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega \\setminus F \\in \\mathcal F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>∈</mo><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">F \\in \\mathcal F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>⋃</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><msub><mi>F</mi><mi>n</mi></msub><mo>∈</mo><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\bigcup_{n=1}^{\\infty} F_n \\in \\mathcal F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span> if all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>i</mi></msub><mo>∈</mo><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">F_i \\in \\mathcal F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span></li>\n</ul>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>:</mo><mi mathvariant=\"script\">F</mi><mo>→</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">P: \\mathcal F \\rightarrow [0,1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> be a probability measure so that</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Ω</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">P(\\Omega) = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">Ω</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Ω</mi><mo>∖</mo><mi>F</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(\\Omega \\setminus F) = 1-P(F)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msubsup><mo>⋃</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><mi>P</mi><mo stretchy=\"false\">(</mo><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(\\bigcup_{n=1}^{\\infty} F_n) = \\sum_{n=1}^\\infty P(F_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>Let's call the triple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Ω</mi><mo separator=\"true\">,</mo><mi mathvariant=\"script\">F</mi><mo separator=\"true\">,</mo><mi>P</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S = (\\Omega, \\mathcal F, P)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Ω</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span></span></span></span> a probability space.  Let's say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>:</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">S: T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>.  How do I express <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> in Lean?</p>",
        "id": 216737897,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605372047
    },
    {
        "content": "<p>You could make a <code>probability_space</code> structure. I've never really engaged with the measure theory library in Lean but it would not surprise me at all if a lot of these definitions are already there, for example I'm pretty sure measure spaces or measurable spaces are there</p>",
        "id": 216739303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605373717
    },
    {
        "content": "<p>The docs for <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html\"><code>measure_theory.measure_space</code> in mathlib</a> (and other files in <code>measure_theory</code>) might be helpful.</p>",
        "id": 216739450,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605373962
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.probability_measure\">docs#measure_theory.probability_measure</a> is in mathlib, so it would be easy to create such structures with current mathlib</p>",
        "id": 216740004,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605374971
    },
    {
        "content": "<p>I would take a look at how, for example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.bundled\">docs#category_theory.bundled</a> is defined and try to mimic (or even use?) that</p>",
        "id": 216740156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605375128
    },
    {
        "content": "<p>Thanks for helping me think about this.  I am coming to Lean with the hopes of being able to resolve some questions I posted on StackExchange over the last year or so, namely (in rough order of generality/complexity):</p>\n<ul>\n<li><a href=\"https://math.stackexchange.com/questions/3760724/what-is-the-probability-space-of-typical-real-univariate-probability-distributio\">What is the probability space of typical real univariate probability distributions?</a></li>\n<li><a href=\"https://math.stackexchange.com/questions/3780089/extending-the-concept-of-distribution-function-to-any-totally-or-partially-order/3782009\">Extending the concept of distribution function to any totally or partially ordered measurable space</a></li>\n<li><a href=\"https://math.stackexchange.com/questions/3437229/construction-of-the-probability-space-of-the-wiener-process\">Construction of the probability space of the Wiener process</a></li>\n</ul>\n<p>Lean is the perfect fit for these questions.  I'm a beginner to Lean so I will be working my way through the <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">book</a> and when I'm done with that I will try to transfer the above topics into a Lean setting.</p>\n<p>These questions arose while I was reading <a href=\"https://www.springer.com/gp/book/9783540570745\">KPS1994</a> which raises the notion of a probability space on page 3 and then quickly drops it in a constructive sense thereafter.  If you read the comments in the StackExchange posts, most mathematicians don't seem to think it's really worth thinking about, i.e. that \"probability space\" is kind of a throwaway concept.  I've been struggling with it for a year.  I even went to the extent of <a href=\"https://stackoverflow.com/questions/63342423/how-do-i-extend-sympy-pretty-printing-for-new-structures-in-jupyter-notebook/63359376#63359376\">trying to formalize the types in <code>sympy</code></a>.  The result was very unsatisfying.  Lean to the rescue!  Probability space is actually a fairly slippery concept to pin down and almost everybody takes it for granted.  I am looking forward to a satisfying solution in Lean.</p>\n<p>Ultimately this will also involve having a proper representation of the real numbers as Dedekind cuts.  I think this is already built in.  A rigorous fundamental definition of the construction of reals is needed I think to provide a rigorous definition of things like probability measure.  Some of that is already done in Lean but I think there is more to do.</p>",
        "id": 216797676,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605453576
    }
]