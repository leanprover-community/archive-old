[
    {
        "content": "<p>Do we not have these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_xor</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">xor</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">xor</span><span class=\"o\">,</span> <span class=\"n\">not_or_distrib</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">iff_iff_implies_and_implies</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">xor_iff_not_iff</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">xor</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iff_not_comm</span><span class=\"o\">,</span> <span class=\"n\">not_xor</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'd also argue that <code>not_xor</code> should be called by <code>push_neg</code>, but I'm not sure how to do so.</p>",
        "id": 265290451,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639745029
    },
    {
        "content": "<p>You're mixing up the <code>bool</code> and <code>Prop</code> worlds in a weird way. We can't prove everything for <code>Prop</code>, everything for <code>bool</code>, and everything where both are mixed up in all ways. So I'd argue this lemma should only be about <code>bool</code> and use <code>bnot</code>.</p>",
        "id": 265291410,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639745569
    },
    {
        "content": "<p>I suppose <code>xor</code> is for Props?<br>\nAt least <code>#check</code> tells me that <code>xor : Prop → Prop → Prop</code>.</p>",
        "id": 265291564,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639745666
    },
    {
        "content": "<p>Oh wait. There's a <code>xor</code> for Props? Well then yeah those lemmas are nice.</p>",
        "id": 265291759,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639745805
    },
    {
        "content": "<p><code>bxor</code> is for booleans, apparently</p>",
        "id": 265291786,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639745824
    },
    {
        "content": "<p>Probably belong in <code>logic.basic</code>.</p>",
        "id": 265291860,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639745876
    }
]