[
    {
        "content": "<p>Thank you!</p>",
        "id": 281490140,
        "sender_full_name": "Quarrie",
        "timestamp": 1651868931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448090\">Quarrie</span> has marked this topic as resolved.</p>",
        "id": 281490147,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651868936
    },
    {
        "content": "<p>I edited the above with a slightly slicker proof</p>",
        "id": 281491371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651869688
    },
    {
        "content": "<p>Note in particular that it's good practice to avoid using <code>begin ...  end</code> tactic mode for definitions like <code>coerce_matrix</code> if possible</p>",
        "id": 281491459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651869726
    },
    {
        "content": "<p>Instead of <code>rw</code>, you can often use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast\">docs#cast</a> (which is really just the rewrite under the hood, but is a more standard form so there are more lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast_eq_iff_heq\">docs#cast_eq_iff_heq</a> around)</p>",
        "id": 281491507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651869760
    },
    {
        "content": "<p>Note that you generally want to avoid <code>==</code> unless you really know what you're doing</p>",
        "id": 281583712,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651993011
    },
    {
        "content": "<p>There's very few circumstances in which types will be equal but not definitionally so</p>",
        "id": 281583724,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651993039
    },
    {
        "content": "<p>It seems like you might have one of those circumstances, but just to keep in mind</p>",
        "id": 281583793,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651993093
    },
    {
        "content": "<p>My general approach for these situations is to define the equivalence between types using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.cast\">docs#equiv.cast</a> and give some basic API to this equivalence if applicable</p>",
        "id": 281583820,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651993188
    },
    {
        "content": "<p>This way you're usually able to keep your <code>heq</code>s contained to a few basic theorems</p>",
        "id": 281583899,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651993216
    }
]