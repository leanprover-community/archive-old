[
    {
        "content": "<p>I'm sure we have some way of formulating the following, but I can't seem to find it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.cones</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≅</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span> <span class=\"bp\">≃</span> <span class=\"n\">cone</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">E.X</span><span class=\"o\">,</span> <span class=\"n\">E.π</span> <span class=\"bp\">≫</span> <span class=\"n\">η.hom</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">E.X</span><span class=\"o\">,</span> <span class=\"n\">E.π</span> <span class=\"bp\">≫</span> <span class=\"n\">η.inv</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">E</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">E</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 248243676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628007334
    },
    {
        "content": "<p>Ah ok, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cones.postcompose_equivalence\">docs#category_theory.limits.cones.postcompose_equivalence</a></p>",
        "id": 248247640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628009369
    },
    {
        "content": "<p>What about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.cones</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.is_limit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≅</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">((</span><span class=\"n\">cones.postcompose</span> <span class=\"n\">η.hom</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hE.lift</span> <span class=\"o\">((</span><span class=\"n\">cones.postcompose</span> <span class=\"n\">η.inv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">fac'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">uniq'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 248248047,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628009571
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 248248153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628009624
    },
    {
        "content": "<p>I'm pretty sure it's in is_limit somewhere, let me find it for you</p>",
        "id": 248251155,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1628011047
    },
    {
        "content": "<p>It's the reverse direction of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_limit.postcompose_hom_equiv\">docs#is_limit.postcompose_hom_equiv</a></p>",
        "id": 248251281,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1628011109
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 248252324,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628011681
    }
]