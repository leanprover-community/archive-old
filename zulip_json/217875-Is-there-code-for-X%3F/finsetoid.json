[
    {
        "content": "<p>I see that we have defined <code>setoid</code> that works on arbitrary <code>set</code>s but do we have anything for <code>finset</code>s ? Specifically, the <code>classes</code> of an equivalence relation (<code>src/data/setoid/partition.lean</code>) has type <code>set (set a)</code> whereas I wish it had type <code>finset (finset a)</code> . </p>\n<p>If there is a way to generalize finsets as sets (with restrictions), I would be happy too.</p>\n<p>Edit: perhaps <code>set.to_finset</code></p>",
        "id": 246907523,
        "sender_full_name": "Nicholas Tan",
        "timestamp": 1626988735
    },
    {
        "content": "<p>You want the other direction. And yes, all finsets are coercible to sets. If you have a (s : finset X), you can just write (s : set X)</p>",
        "id": 246908731,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626989588
    },
    {
        "content": "<p>The problem is that <code>setoid</code> currently lifts it for me, which I don't want<br>\n<code>def orbits [fintype α] [fintype G] : finset (finset α) := setoid.classes (orbit_rel G α)</code><br>\n(gives error)<br>\n<code>def orbits [fintype α] [fintype G] : set (set α) := setoid.classes (orbit_rel G α)</code><br>\n(no error, but I need the finiteness)<br>\n<code>def orbits [fintype α] [fintype G] : finset (set α) := set.to_finset (setoid.classes (orbit_rel G α))</code><br>\n(not computable, depends on <code>classical.prop_decidable</code>)</p>",
        "id": 246909820,
        "sender_full_name": "Nicholas Tan",
        "timestamp": 1626990434
    },
    {
        "content": "<p>What do you hope to use the finset for? Do you have decidable_eq on alpha and G?</p>",
        "id": 246910658,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626991013
    },
    {
        "content": "<p>Do you care about computability?</p>",
        "id": 246910667,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626991023
    },
    {
        "content": "<p>I would like to show that the sum of the sizes of the classes of an equivalence relation over a set is the same as the cardinality of the set itself.</p>",
        "id": 246910677,
        "sender_full_name": "Nicholas Tan",
        "timestamp": 1626991032
    },
    {
        "content": "<p>but i cant use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> because <code>setoid.classes</code> is not a <code>finset</code></p>",
        "id": 246910738,
        "sender_full_name": "Nicholas Tan",
        "timestamp": 1626991083
    },
    {
        "content": "<p>Then use finsum</p>",
        "id": 246910838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626991157
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a> instead of finset.card</p>",
        "id": 246911561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626991622
    },
    {
        "content": "<p>If you don't care about computability, here's a sorry you could try to fill in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.setoid.partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">S.classes.to_finset</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 246911797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626991807
    },
    {
        "content": "<p>(This is if you don't care about computability, since I've opened the <code>classical</code> locale)</p>",
        "id": 246912015,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626991979
    },
    {
        "content": "<p>I agree with Adam. You can just use set.to_finset since you're working over fintypes. I think the classical won't even be necessary if you also require decidable_eq alpha. Because, if I understand correctly, orbit should have a decidability instance in that case. Or you could write that simple algorithm.</p>",
        "id": 246914135,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626993769
    },
    {
        "content": "<p>FYI Bhavik and I are using <code>finpartition α</code> for <code>finset (set α)</code>.. It's not yet in mathlib.</p>",
        "id": 246928787,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627007940
    }
]