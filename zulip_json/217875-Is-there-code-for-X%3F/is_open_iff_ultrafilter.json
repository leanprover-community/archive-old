[
    {
        "content": "<p>Does mathlib have the following characterization of open sets?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_open_iff_ultrafilter</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">F.1</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">F.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212640660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602122508
    },
    {
        "content": "<p>It's actually true....</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_open_iff_ultrafilter</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">F.1</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">F.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hU</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_nhds_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">U</span> <span class=\"n\">hx</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">is_closed_compl_iff</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">subset_closure</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_closed_closure</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_closure_iff_ultrafilter</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">F</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">set.not_not_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ultrafilter_iff_compl_mem_iff_not_mem.mp</span> <span class=\"n\">F.2</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n</div></div>",
        "id": 212640799,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602122645
    },
    {
        "content": "<p>This is one of those theorems that could have some amazing two line proof</p>",
        "id": 212650902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602138186
    },
    {
        "content": "<p>I'll PR a short proof soon.</p>",
        "id": 212659516,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602145347
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4529\">#4529</a> uses <code>is_ultrafilter</code> instead of <code>ultrafilter</code> and a different order of <code>forall</code>s.</p>",
        "id": 212659745,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602145503
    },
    {
        "content": "<p>It was easier to prove this way.</p>",
        "id": 212659757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602145516
    },
    {
        "content": "<p>If you want <code>∀ f : ultrafilter α</code>, then you should add lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.forall\">docs#subtype.forall</a></p>",
        "id": 212659804,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602145561
    }
]