[
    {
        "content": "<p>Hi, do we have the following theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_galois</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpoly</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"n\">α₁</span> <span class=\"bp\">=</span> <span class=\"n\">α₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 316272260,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1671198872
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span></p>",
        "id": 316272446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671198923
    },
    {
        "content": "<p>I am sure we have it, or maybe something very close. Look for <code>power_basis</code>.</p>",
        "id": 316277595,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671200332
    },
    {
        "content": "<p>I don't think we have this, I had a big discussion with Anne about how to do this properly (the minpoly condition is a bit too strong, you want something like <code>eval a1 minpoly a2 = 0</code> &amp; the vice-versa too instead) and I never got around to it</p>",
        "id": 316289120,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671203334
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/the.20power.20basis.20of.20a.20conjugate\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/the.20power.20basis.20of.20a.20conjugate</a> I think is the previoius discussion</p>",
        "id": 316289296,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671203391
    },
    {
        "content": "<p>Ah right, the elements are not generators</p>",
        "id": 316289889,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671203549
    },
    {
        "content": "<p>So one probably has to go through the intermediate field and then extending the iso</p>",
        "id": 316289993,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671203578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> am I misremembering or you did something related recently?</p>",
        "id": 316290262,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671203658
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.is_algebraic.range_eval_eq_root_set_minpoly\">docs#algebra.is_algebraic.range_eval_eq_root_set_minpoly</a> which is related.</p>",
        "id": 316291281,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671203908
    },
    {
        "content": "<p>In any case I am sure the equiv of intermediate field is there, since we have the power basis. Then I guess we can extend field equivs.</p>",
        "id": 316292208,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671204161
    },
    {
        "content": "<p>Yeah, I don't think we have this exactly. One way would be to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_equiv.lift_normal\">docs#alg_equiv.lift_normal</a></p>",
        "id": 316304577,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1671207263
    },
    {
        "content": "<p>Thanks a lot. I guess the plan  is to define something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">conjugate_roots_to_iso</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpoly</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">({</span><span class=\"n\">α₁</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">({</span><span class=\"n\">α₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">))</span>  <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and then use <code>alg_equiv.lift_normal</code> to lift it and get a <code>g : L ≃ₐ[K] L</code>.</p>\n<p>Do we have more code related to this I could use? - I am not very familiar with the Galois theory API.</p>",
        "id": 316368031,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1671227968
    },
    {
        "content": "<p>Give me 10 minutes</p>",
        "id": 316370434,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671228937
    },
    {
        "content": "<p>Voilà. It can probably be golfed (and of course the existential statement is imprecise, it's better to say that the given map has the required property).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_galois</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">intermediate_field</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">adjoin</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpoly</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">power_basis</span> <span class=\"o\">(</span><span class=\"n\">is_galois.integral</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">gen</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">power_basis</span> <span class=\"o\">(</span><span class=\"n\">is_galois.integral</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">gen</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">injective_iff_map_eq_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">α₁</span><span class=\"bp\">⟯</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">adjoin_simple.gen</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">is_integral_algebra_map_iff</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">α₂</span><span class=\"bp\">⟯</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_galois.integral</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">],</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">power_basis_gen</span><span class=\"o\">,</span> <span class=\"n\">power_basis_gen</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">aeval_algebra_map_apply</span><span class=\"o\">,</span> <span class=\"n\">adjoin_simple.algebra_map_gen</span><span class=\"o\">,</span>\n    <span class=\"n\">minpoly.eq_of_algebra_map_eq</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">α₂</span><span class=\"bp\">⟯</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">this</span>\n    <span class=\"o\">(</span><span class=\"n\">adjoin_simple.algebra_map_gen</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hpoly</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">minpoly.aeval</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv</span> <span class=\"o\">{</span><span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpoly</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">α₁</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">α₂</span><span class=\"bp\">⟯</span> <span class=\"o\">:=</span>\n<span class=\"n\">power_basis.equiv_of_root</span> <span class=\"o\">(</span><span class=\"n\">power_basis</span> <span class=\"o\">(</span><span class=\"n\">is_galois.integral</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">power_basis</span> <span class=\"o\">(</span><span class=\"n\">is_galois.integral</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">hpoly</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">hpoly.symm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpoly</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"n\">α₁</span> <span class=\"bp\">=</span> <span class=\"n\">α₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">equiv</span> <span class=\"n\">hpoly</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift_normal</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">adjoin_simple.algebra_map_gen</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">adjoin_simple.algebra_map_gen</span> <span class=\"n\">K</span> <span class=\"n\">α₂</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">alg_equiv.lift_normal_commutes</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">power_basis_gen</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n    <span class=\"n\">power_basis.lift_gen</span> <span class=\"o\">(</span><span class=\"n\">power_basis</span> <span class=\"o\">(</span><span class=\"n\">is_galois.integral</span> <span class=\"n\">K</span> <span class=\"n\">α₁</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">hpoly.symm</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">intermediate_field</span>\n</code></pre></div>",
        "id": 316372397,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671229879
    },
    {
        "content": "<p>Brilliant, thank you!</p>",
        "id": 316375148,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1671231233
    },
    {
        "content": "<p>You may not need this after the previous replies, but in case it is useful, I have some related lemmas <a href=\"https://github.com/mariainesdff/local_fields/blob/main/src/minpoly.lean\">here</a>.</p>",
        "id": 316727564,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1671452508
    },
    {
        "content": "<p><del>This would be better stated with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.is_pretransitive\">docs#mul_action.is_pretransitive</a> I think</del></p>",
        "id": 316744023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671456870
    },
    {
        "content": "<p>Oh great, thank you!</p>",
        "id": 316801707,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1671473473
    }
]