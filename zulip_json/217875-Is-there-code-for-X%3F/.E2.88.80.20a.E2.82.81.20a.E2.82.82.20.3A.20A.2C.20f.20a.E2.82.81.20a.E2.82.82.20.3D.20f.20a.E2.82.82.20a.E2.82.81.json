[
    {
        "content": "<p>Does the predicate in the title on <code>A → A → B</code> with <code>(A B : Type)</code> have a name? How am I supposed to look that up?</p>",
        "id": 220677925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608634315
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_commutative\">docs#is_commutative</a> (but this is only for A = B)</p>",
        "id": 220678061,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608634427
    },
    {
        "content": "<p><a href=\"https://hoogle.haskell.org/?hoogle=(a%20-%3E%20a%20-%3E%20b)%20-%3E%20Prop\">I can't hoogle</a></p>",
        "id": 220678067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608634433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.88.80.20a.E2.82.81.20a.E2.82.82.20.3A.20A.2C.20f.20a.E2.82.81.20a.E2.82.82.20.3D.20f.20a.E2.82.82.20a.E2.82.81/near/220678061\">said</a>:</p>\n<blockquote>\n<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_commutative\">docs#is_commutative</a> (but this is only for A = B)</p>\n</blockquote>\n<p>oh lol in use case A = B</p>",
        "id": 220678134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608634480
    },
    {
        "content": "<p>great</p>",
        "id": 220678273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608634590
    },
    {
        "content": "<p>aah, still not over. What is this called?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">magic</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">classical.prop_decidable</span> <span class=\"n\">P</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">magic</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">Q</span> <span class=\"n\">magic</span>\n<span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The statement that mathematicians can construct data from equivalent props</p>",
        "id": 220679968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608636128
    },
    {
        "content": "<p><code>ite_congr</code> maybe?</p>",
        "id": 220679981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608636156
    },
    {
        "content": "<p>The proof I made has an <code>eq.rec</code> in</p>",
        "id": 220679982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608636157
    },
    {
        "content": "<p>does <code>congr'</code> work?</p>",
        "id": 220679988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608636163
    },
    {
        "content": "<p>it's possible to prove this without an eq.rec, you case on the two <code>magic</code>s</p>",
        "id": 220680038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608636227
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span>\n</code></pre></div>\n<p>for congr'</p>",
        "id": 220680100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608636268
    },
    {
        "content": "<p><code>propext</code> finishes that</p>",
        "id": 220680113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608636286
    },
    {
        "content": "<p>if you go the route of casing on the magics then you don't need propext either</p>",
        "id": 220680135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608636320
    },
    {
        "content": "<p>I'll un-xy. I was discussing with Ashvni the relative merits of the function </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">delta_function</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>We were discussing an API and one thing that came up was what an API for it might look like.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ite_congr</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">Q</span> <span class=\"n\">_</span><span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">propext</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Should that be a thing in mathlib? Where should it go? I have no interest in the decidability stuff, I just want to make it so that Lean never bothers me with any such questions.</p>",
        "id": 220680794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608637024
    },
    {
        "content": "<p>Wooah this is even computable. Is this not a completely standard thing?</p>",
        "id": 220681028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608637271
    },
    {
        "content": "<p>I could imagine some equation compiler proof but somehow i don't want to go any more down this rabbithole, I'll take <code>ite_congr</code> and be grateful.</p>",
        "id": 220681146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608637382
    },
    {
        "content": "<p>I'm confused how xy lead you here. What's wrong with just using <code>congr'</code>?</p>",
        "id": 220681290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608637504
    },
    {
        "content": "<p>also note that <code>ite_congr</code> would normally also have arguments for the true and false cases, it's a bit weird to be working with the unapplied constant like this</p>",
        "id": 220681391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608637567
    },
    {
        "content": "<p>Why can't I solve this in term mode?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">delta_function</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ite_congr</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">Q</span> <span class=\"n\">_</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">propext</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">delta_function_comm</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">ℕ</span> <span class=\"n\">delta_function</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"c1\">-- comment out next line to break</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">delta_function</span><span class=\"o\">,</span> <span class=\"n\">exact</span>\n<span class=\"n\">congr_fun</span>\n         <span class=\"o\">(</span><span class=\"n\">congr_fun</span>\n           <span class=\"o\">(</span><span class=\"n\">congr_fun</span>\n             <span class=\"o\">(</span><span class=\"n\">ite_congr</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">eq_comm</span><span class=\"o\">)</span>\n              <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n           <span class=\"mi\">1</span><span class=\"o\">)</span>\n          <span class=\"mi\">0</span>\n<span class=\"c1\">-- comment this out too</span>\n<span class=\"o\">}</span>\n<span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 220682531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608638660
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">delta_function_comm</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">ℕ</span> <span class=\"n\">delta_function</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  a b: ℕ</span>\n<span class=\"cm\">  ⊢ a = b</span>\n<span class=\"cm\">  a b: ℕ</span>\n<span class=\"cm\">  ⊢ b = a</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220682708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608638835
    },
    {
        "content": "<p>I want to apply <code>congr'</code> to <code>eq_comm</code>? Is this what the <code>congr</code> tactic does?</p>",
        "id": 220682743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608638874
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr'\">tactic#congr'</a></p>",
        "id": 220682810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608638907
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">delta_function_comm</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">ℕ</span> <span class=\"n\">delta_function</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span>\n    <span class=\"o\">(</span><span class=\"n\">ite_congr</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">eq_comm</span><span class=\"o\">)</span>\n    <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 220682850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608638946
    },
    {
        "content": "<p>the key addition being <code>: _</code></p>",
        "id": 220682864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608638957
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ a = b</span>\n  <span class=\"c1\">-- congr' 0 fails, it doesn't even unfold.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220682992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608639056
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">delta_function_comm</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">ℕ</span> <span class=\"n\">delta_function</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">delta_function</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">propext</span> <span class=\"n\">eq_comm</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 220682993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639057
    },
    {
        "content": "<p><code>congr'</code> never unfolds</p>",
        "id": 220683007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639068
    },
    {
        "content": "<p>it uses the literal written version to decide what to focus on</p>",
        "id": 220683020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639084
    },
    {
        "content": "<p>Why is there so much going on under the hood here for this mathematical triviality that delta_function is symmetric? It follows immediately from commutativity of <code>eq</code>.</p>",
        "id": 220683098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608639129
    },
    {
        "content": "<p>so there is no way to prove <code>delta_function x y = delta_function y x</code> without unfolding it; a pure congr' proof is going to treat <code>delta_function</code> as an uninterpreted constant and in that case the theorem is false</p>",
        "id": 220683113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639146
    },
    {
        "content": "<p>This is some sort of computational junk that I have no interest in. Why can't I just switch it all off?</p>",
        "id": 220683118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608639153
    },
    {
        "content": "<p>the latter proof is the one I think you should go with</p>",
        "id": 220683149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639195
    },
    {
        "content": "<p>the tactic proof you posted? unfold then congr?</p>",
        "id": 220683164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608639222
    },
    {
        "content": "<p>yeah</p>",
        "id": 220683167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639225
    },
    {
        "content": "<p>did we ever add that <code>boole</code> function? That might also help here, abstracting away the <code>then 1 else 0</code> part</p>",
        "id": 220683224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639260
    },
    {
        "content": "<p>there are 74 hits in mathlib for <code>then 1 else 0</code> so it seems like it deserves a definition</p>",
        "id": 220683274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639333
    },
    {
        "content": "<p>oh right, I think it got renamed to <code>indicator</code> but then it ended up getting specialized to the function case</p>",
        "id": 220683374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639416
    },
    {
        "content": "<p>which seems silly to me since the extra domain parameter does nothing</p>",
        "id": 220683398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608639446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.88.80.20a.E2.82.81.20a.E2.82.82.20.3A.20A.2C.20f.20a.E2.82.81.20a.E2.82.82.20.3D.20f.20a.E2.82.82.20a.E2.82.81/near/220682864\">said</a>:</p>\n<blockquote>\n<p>the key addition being <code>: _</code></p>\n</blockquote>\n<p>Oh when will I ever learn. This is a lot deeper than I usually go nowadays.</p>",
        "id": 220683986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608640001
    },
    {
        "content": "<p>Would you have an easier time if you defined <code>delta_function (i j) := function.update 0 i 1 j</code>? We already have a bunch of api for <code>function.update</code></p>",
        "id": 220687473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608642899
    },
    {
        "content": "<p>I am still not at all sure this function should exist but I've been sidetracked</p>",
        "id": 220734983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608671712
    },
    {
        "content": "<p>I'm sure more spellings are not what you're after, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator\">docs#set.indicator</a> is also close, as <code>indicator (= i) 1 j</code>.</p>",
        "id": 220736649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608672955
    }
]