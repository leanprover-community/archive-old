[
    {
        "content": "<p>Hello. I have an inductive type a la <code>inductive t | a | b | c</code>which uniquely maps to a natural number <code>| a := 1 | b := 5 | c := 30</code>. I want two functions <code>t_to_nat : t -&gt; nat</code> and <code>f_of_nat : nat -&gt; t</code>, but don't want to manually define them both. Is there a mathlib type I should be using? <code>finmap</code> sounds appropriate but I don't have sigma types here (yet).</p>",
        "id": 211895482,
        "sender_full_name": "SnowFox",
        "timestamp": 1601551117
    },
    {
        "content": "<p>What should <code>f_of_nat 2</code> be?</p>",
        "id": 211895546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601551176
    },
    {
        "content": "<p>Ah, good point. Lets say I have a reserved illegal variant. :)</p>",
        "id": 211895653,
        "sender_full_name": "SnowFox",
        "timestamp": 1601551249
    },
    {
        "content": "<p>Or just option; both work.</p>",
        "id": 211895931,
        "sender_full_name": "SnowFox",
        "timestamp": 1601551461
    },
    {
        "content": "<p>It might also be fine to just assume a safe default; putting it on the caller to ensure the number is valid.</p>",
        "id": 211895965,
        "sender_full_name": "SnowFox",
        "timestamp": 1601551510
    },
    {
        "content": "<p>It seems like somewhere there ought to be some <code>noncomputable def function.left_inverse_of_injective (f : α → β) (h : injective f) : β → α := sorry</code> which you could use here</p>",
        "id": 211896800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601552190
    },
    {
        "content": "<p>Hm?</p>",
        "id": 211897152,
        "sender_full_name": "SnowFox",
        "timestamp": 1601552446
    },
    {
        "content": "<p>I don't see any such or similar function.</p>",
        "id": 211897170,
        "sender_full_name": "SnowFox",
        "timestamp": 1601552463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> This?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The inverse of a function (which is a left inverse if `f` is injective</span>\n<span class=\"sd\">  and a right inverse if `f` is surjective). -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inv_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inv_fun_on</span> <span class=\"n\">f</span> <span class=\"n\">set.univ</span>\n</code></pre></div>",
        "id": 211898082,
        "sender_full_name": "SnowFox",
        "timestamp": 1601553109
    },
    {
        "content": "<p>Yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.inv_fun\">docs#function.inv_fun</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.partial_inv\">docs#function.partial_inv</a> look like what you want</p>",
        "id": 211898290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601553233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Given the <code>noncomputable</code> keyword, I'm not seeing how?</p>",
        "id": 211898498,
        "sender_full_name": "SnowFox",
        "timestamp": 1601553372
    },
    {
        "content": "<p>I mean, I now have a <code>noncomputable def of_nat</code> but I need it to be computable.</p>",
        "id": 211899472,
        "sender_full_name": "SnowFox",
        "timestamp": 1601554039
    },
    {
        "content": "<p>Ah, you didn't say it needed to be computable ;)</p>",
        "id": 211900013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601554425
    },
    {
        "content": "<p>I thought that was the default! :P</p>",
        "id": 211900093,
        "sender_full_name": "SnowFox",
        "timestamp": 1601554454
    },
    {
        "content": "<p>We generally like noncomputable stuff (-;</p>",
        "id": 211900171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601554520
    },
    {
        "content": "<p>One idea I had, adding <code>@[pattern]</code> to the <code>to_nat</code> and trying to implement <code>def of_nat | (to_nat x) := x</code> but that hits \"invalid function application in pattern, cannot be reduced to a constructor, possible solution mark as inaccessible\"</p>",
        "id": 211901040,
        "sender_full_name": "SnowFox",
        "timestamp": 1601555098
    },
    {
        "content": "<p>Unless someone has a better idea; I guess I'll go with a <code>list (t \\x nat)</code> and hack together lookups over this...</p>",
        "id": 211901595,
        "sender_full_name": "SnowFox",
        "timestamp": 1601555399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328454\">@SnowFox</span> I think you need to be clearer about your actual application. It's certainly possible to write a tactic that does the necessary copy paste to make two functions the way you would expect</p>",
        "id": 211944596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601573037
    },
    {
        "content": "<p>To be concrete; I want a map between representations of RISC-V opcodes. An inductive type to introduce names and exhaustive coverage, and its numerical representation. However, some mappings depend on the integer length, XLEN. I.e. <code>(opcode.system, any XLEN) &lt;=&gt; nat.shiftl 3 5 + nat.shiftl 4 2 + 3</code>, and both <code>(opcode.c_fld, 32 or 64)</code> and <code>(opcode.c_lq, 128)</code> map to <code>nat.shiftl 1 13 + 0</code>.</p>",
        "id": 212005965,
        "sender_full_name": "SnowFox",
        "timestamp": 1601616061
    },
    {
        "content": "<p>Ok, so you want an assembler/dissassembler pair?  (assembler being mnemonics -&gt; words and disassembler being words -&gt; mnemonics, the mnemonics encoded as inductive types?)</p>",
        "id": 212006261,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601616430
    },
    {
        "content": "<p>Precisely, yes.</p>",
        "id": 212006273,
        "sender_full_name": "SnowFox",
        "timestamp": 1601616455
    },
    {
        "content": "<p>Are you saying RISC-V has multiple mnemonics that have the same encoding?</p>",
        "id": 212006276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601616467
    },
    {
        "content": "<p>I'm not sure if you're going to be able to get around having to write a disassembler.  At least in Lean you'll be able to prove the disassembler is a right inverse to the assembler to verify you probably did it right!</p>",
        "id": 212006348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601616564
    },
    {
        "content": "<p>The mnemonics for RV{32,64,128}I are shared despite being incompatible due to the differing integer lengths; but RVC, the compressed extension has several mnemonics which don't exist under different XLENs, so they share the word/encoding.</p>",
        "id": 212006349,
        "sender_full_name": "SnowFox",
        "timestamp": 1601616579
    },
    {
        "content": "<p>All uncompressed mnemonics are XLEN independent. Only the compressed opcodes depend on XLEN.</p>",
        "id": 212006416,
        "sender_full_name": "SnowFox",
        "timestamp": 1601616624
    },
    {
        "content": "<p>Just out of curiosity, are the compressed extensions like ARM Thumb instructions?</p>",
        "id": 212006423,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601616655
    },
    {
        "content": "<p>Er, not mnemonics in the sense of addi, sub, etc. These are the opcodes which determine the set of instructions by format. I.e. <code>addi</code> and <code>slli</code> are both under the <code>op_imm</code> opcode.</p>",
        "id": 212006446,
        "sender_full_name": "SnowFox",
        "timestamp": 1601616705
    },
    {
        "content": "<p>I don't know the details of ARM Thumb instructions but I do know they differ. IIUC Thumb instructions are necessary, whereas for RISC-V the compressed instructions are only a hot subset of the uncompressed.</p>",
        "id": 212006505,
        "sender_full_name": "SnowFox",
        "timestamp": 1601616751
    },
    {
        "content": "<p>So this function is only for encoding the instruction format as an integer? How many of these are there?</p>",
        "id": 212006548,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601616840
    },
    {
        "content": "<p>Unless I've miscounted, 28 uncompressed (XLEN independent) and 33 compressed (XLEN dependent). But some of these are reserved or custom, for user defined instruction ranges.</p>",
        "id": 212006672,
        "sender_full_name": "SnowFox",
        "timestamp": 1601616975
    },
    {
        "content": "<p>There are 6 uncompressed + 9 compressed \"instruction formats\", which are different to the opcodes.</p>",
        "id": 212006714,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617054
    },
    {
        "content": "<p>I've never done this, but in principle I think you could do Lean metaprogramming to read in your definition for the assembler and generate an inverse function.  I'm not aware of anything like this that already exists, and I'm also new to Lean so take my advice with that in mind</p>",
        "id": 212006724,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601617075
    },
    {
        "content": "<p><a href=\"https://github.com/riscv/riscv-isa-manual/releases/download/draft-20200727-8088ba4/riscv-spec.pdf\">https://github.com/riscv/riscv-isa-manual/releases/download/draft-20200727-8088ba4/riscv-spec.pdf</a></p>",
        "id": 212006778,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617120
    },
    {
        "content": "<p>Page 112 has the RVC opcodes.</p>",
        "id": 212006784,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617136
    },
    {
        "content": "<p>Page 129 has the standard RVI opcode map.</p>",
        "id": 212006799,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617169
    },
    {
        "content": "<p>If you have a nice data format to represent all the instruction types, you might also consider doing code generation, either within Lean or in another language.  (A number assemblers use a database of opcode and instruction encodings after all.)</p>",
        "id": 212006801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601617172
    },
    {
        "content": "<p>The proof that these are inverses of each other in a suitable sense could probably be mostly automated with tactics</p>",
        "id": 212006862,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601617230
    },
    {
        "content": "<p>You should definitely do this with a tactic</p>",
        "id": 212006863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601617233
    },
    {
        "content": "<p>Yes, this would be ideal. I considered it too but didn't know how to approach this.</p>",
        "id": 212006865,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Define the function itself with a tactic?</p>",
        "id": 212006875,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601617264
    },
    {
        "content": "<p>You can calibrate the input to be whatever is easiest and the tactic makes the definitions</p>",
        "id": 212006876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601617265
    },
    {
        "content": "<p>Pages 130 to 136 have the actual instructions.</p>",
        "id": 212006881,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617280
    },
    {
        "content": "<p>I've done disassembly for an ISA before and you get a lot more flexibility to generate the functions and proof producing assembler/disassembler with a custom input format</p>",
        "id": 212006965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601617385
    },
    {
        "content": "<p>I could write code to extract the opcodes from the .tex. Though there may be better formats available. I know rv8 has some opcode maps but they are old. I could manually update these; but at that point I may as well just start from scratch and define the format myself.</p>",
        "id": 212007059,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617483
    },
    {
        "content": "<p>Oh, I was thinking of you manually transcribing the tex (or the part of it you need), possibly with some regex preprocessing first</p>",
        "id": 212007073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601617533
    },
    {
        "content": "<p>If you want to stay up to date with a changing spec it would make sense to parse the .tex but otherwise it's just a one time job</p>",
        "id": 212007128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601617579
    },
    {
        "content": "<p><a href=\"https://github.com/riscv/riscv-opcodes\">https://github.com/riscv/riscv-opcodes</a> These should be up to date</p>",
        "id": 212007130,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617588
    },
    {
        "content": "<p>aha, it's already formalized (in python, but still)</p>",
        "id": 212007163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601617650
    },
    {
        "content": "<p>so you could write a python program that spits out a lean file</p>",
        "id": 212007178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601617666
    },
    {
        "content": "<p>I'd like to take the lean route. Metaprogramming, reading in these opcode files.</p>",
        "id": 212007232,
        "sender_full_name": "SnowFox",
        "timestamp": 1601617703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Did you mean anything specifically by a custom input format?  Like, write some top-level command to read in a data file and generate Lean code?</p>",
        "id": 212007243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601617732
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">reg</span> <span class=\"bp\">|</span> <span class=\"n\">rs1</span> <span class=\"bp\">|</span> <span class=\"n\">rs2</span> <span class=\"bp\">|</span> <span class=\"n\">rd</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">instr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">imm</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"o\">:</span> <span class=\"n\">reg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bits</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">reg3</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"n\">r3</span> <span class=\"o\">:</span> <span class=\"n\">reg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">make_defs</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">instr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.skip</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">reg</span> <span class=\"n\">instr</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">make_defs</span> <span class=\"o\">[</span>\n  <span class=\"n\">imm</span> <span class=\"bp\">`</span><span class=\"n\">ADD</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"mi\">12</span><span class=\"o\">,</span>\n  <span class=\"n\">reg3</span> <span class=\"bp\">`</span><span class=\"n\">SUB</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"n\">rs2</span>\n<span class=\"o\">]</span>\n</code></pre></div>",
        "id": 212007430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618007
    },
    {
        "content": "<p>the details are entirely made up, but something like this</p>",
        "id": 212007438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618021
    },
    {
        "content": "<p>Ah, ok.  I guess you could take the Python program in that repository and generate the code that goes into the <code>run_cmd</code></p>",
        "id": 212007511,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601618066
    },
    {
        "content": "<p>the idea is that you have some terse syntax for defining instruction formats tailored for RISC-V, and then <code>make_defs</code> massages it into lean exprs</p>",
        "id": 212007528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618088
    },
    {
        "content": "<p>and it could do what it likes with the data, for example defining the inductive type of instructions, a function to <code>list byte</code>, a function from <code>list byte</code>, a tactic that parses an instruction, etc etc</p>",
        "id": 212007618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618166
    },
    {
        "content": "<p>Yes, something like this would be ideal. But I really don't know anything about tactic writing yet.</p>",
        "id": 212007650,
        "sender_full_name": "SnowFox",
        "timestamp": 1601618246
    },
    {
        "content": "<p>You could also write a program (either in python or lean) to autogenerate lean definitions as strings</p>",
        "id": 212007683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618283
    },
    {
        "content": "<p>or you could do the simpler thing and just write it manually (with lots of find/replace and multicursor editing)</p>",
        "id": 212007741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618372
    },
    {
        "content": "<p>but I think the effort spent to write the metaprogram would pay off</p>",
        "id": 212007796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618406
    },
    {
        "content": "<p>That's basically what I already have, though only for the opcode maps, not the addi/slli/add/sub/etc instructions. Though that may have been unnecessarily lower level.</p>",
        "id": 212007861,
        "sender_full_name": "SnowFox",
        "timestamp": 1601618496
    },
    {
        "content": "<p>I don't think opcode maps are the best way to represent the instructions, since it's unnecessarily case-bashy</p>",
        "id": 212007964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  It should be possible to make it so the tactic reads in the opcode file directly right?  I just don't know what kind of file I/O you can do.  (The parsing into some data type should be easy enough with the parser combinator library, assuming it's anything like Haskell's)</p>",
        "id": 212008021,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601618666
    },
    {
        "content": "<p>Yeah you can do file IO</p>",
        "id": 212008039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618680
    },
    {
        "content": "<p>I would be inclined to copy and paste into the lean file for stability though</p>",
        "id": 212008054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618702
    },
    {
        "content": "<p>Or maybe a hash commitment on the Lean side to detect changes.</p>",
        "id": 212008160,
        "sender_full_name": "SnowFox",
        "timestamp": 1601618804
    },
    {
        "content": "<p>well you don't really need to guard things on the lean side because your code will break</p>",
        "id": 212008188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618832
    },
    {
        "content": "<p>Depends on what changes, but probably.</p>",
        "id": 212008210,
        "sender_full_name": "SnowFox",
        "timestamp": 1601618863
    },
    {
        "content": "<p>but putting everything in the lean file makes it more portable, you don't need to worry about users not being able to read your files the same way</p>",
        "id": 212008218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618874
    },
    {
        "content": "<p>plus parsing is going to be pretty slow, comparatively speaking</p>",
        "id": 212008276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618896
    },
    {
        "content": "<p>the approach I showed is basically leveraging the C++ lean parser to do the dirty work</p>",
        "id": 212008310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/bidirectional.20maps.3F/near/212008218\">said</a>:</p>\n<blockquote>\n<p>but putting everything in the lean file makes it more portable, you don't need to worry about users not being able to read your files the same way</p>\n</blockquote>\n<p>I don't really understand this concern -- if it's a data file in the project, what would be the matter?  But it does seem reasonable re-encoding the data file as a Lean file (especially since the repository has a translator with multiple backends already)</p>",
        "id": 212008510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601619030
    },
    {
        "content": "<p>Hmm. Reading over the python, I think it might be decent to emit at least the array to paste into the Lean file.</p>",
        "id": 212008661,
        "sender_full_name": "SnowFox",
        "timestamp": 1601619194
    },
    {
        "content": "<p>Time to learn Python I guess...</p>",
        "id": 212008666,
        "sender_full_name": "SnowFox",
        "timestamp": 1601619202
    },
    {
        "content": "<p>My main experience with loading large files into lean is in the metamath import; running a pure lean parser over the metamath file directly was unusably slow, but translating the file into lean and then loading that was much better</p>",
        "id": 212008683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601619220
    },
    {
        "content": "<p>Regarding registers; I'm using abbreviations for <code>fin 32</code>  for each of <code>xreg</code> <code>freg</code> and <code>vreg</code>. The inductive type mocked above doesn't look right to me.</p>",
        "id": 212008844,
        "sender_full_name": "SnowFox",
        "timestamp": 1601619372
    },
    {
        "content": "<p>Like I said, completely made up</p>",
        "id": 212008858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601619388
    },
    {
        "content": "<p>if you showed me a snippet of your ISA model I could make something a little more accurate</p>",
        "id": 212008897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601619424
    },
    {
        "content": "<p>I have a model of x86 <a href=\"https://github.com/digama0/mm0/blob/master/mm0-lean/x86/x86.lean\">here</a> if it helps</p>",
        "id": 212009302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601619485
    },
    {
        "content": "<p>I haven't done RISC-V before though</p>",
        "id": 212009338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601619547
    },
    {
        "content": "<p>The spec is my model. Page 130-136 list all the instructions, starting with the uncompressed format list for the standard extensions.</p>\n<p><a href=\"https://github.com/riscv/riscv-isa-manual/releases/download/draft-20200727-8088ba4/riscv-spec.pdf\">https://github.com/riscv/riscv-isa-manual/releases/download/draft-20200727-8088ba4/riscv-spec.pdf</a></p>",
        "id": 212009341,
        "sender_full_name": "SnowFox",
        "timestamp": 1601619549
    },
    {
        "content": "<p>Your link is a 404</p>",
        "id": 212009345,
        "sender_full_name": "SnowFox",
        "timestamp": 1601619559
    },
    {
        "content": "<p>fixed</p>",
        "id": 212009347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601619563
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 212009357,
        "sender_full_name": "SnowFox",
        "timestamp": 1601619580
    },
    {
        "content": "<p>I mean your lean interpretation of the spec</p>",
        "id": 212009416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601619619
    },
    {
        "content": "<p>Not sure you want that ;)</p>",
        "id": 212010030,
        "sender_full_name": "SnowFox",
        "timestamp": 1601619825
    },
    {
        "content": "<p>Current mess =&gt; <a href=\"https://gist.github.com/WildCryptoFox/6b95260808f8d1bf9fd6d7ca831ef5f2\">https://gist.github.com/WildCryptoFox/6b95260808f8d1bf9fd6d7ca831ef5f2</a></p>",
        "id": 212010304,
        "sender_full_name": "SnowFox",
        "timestamp": 1601620009
    },
    {
        "content": "<p>Any and all restructuring or Lean tips welcome.</p>",
        "id": 212010490,
        "sender_full_name": "SnowFox",
        "timestamp": 1601620091
    },
    {
        "content": "<p>Here's my hand translation of the first few instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">R_type</span> <span class=\"o\">(</span><span class=\"n\">funct3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">I_type</span> <span class=\"o\">(</span><span class=\"n\">funct3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">B_type</span> <span class=\"o\">(</span><span class=\"n\">funct3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">U_type</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">J_type</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">make_defs</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.skip</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">type</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">make_defs</span> <span class=\"o\">[</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LUI</span><span class=\"o\">,</span>   <span class=\"mi\">0b0110111</span><span class=\"o\">,</span> <span class=\"n\">U_type</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">AUIPC</span><span class=\"o\">,</span> <span class=\"mi\">0b0010111</span><span class=\"o\">,</span> <span class=\"n\">U_type</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">JAL</span><span class=\"o\">,</span>   <span class=\"mi\">0b1101111</span><span class=\"o\">,</span> <span class=\"n\">J_type</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">JALR</span><span class=\"o\">,</span>  <span class=\"mi\">0b1100111</span><span class=\"o\">,</span> <span class=\"n\">I_type</span> <span class=\"mi\">0b000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">BEQ</span><span class=\"o\">,</span>   <span class=\"mi\">0b1100011</span><span class=\"o\">,</span> <span class=\"n\">B_type</span> <span class=\"mi\">0b001</span><span class=\"o\">)</span>\n<span class=\"o\">]</span>\n</code></pre></div>",
        "id": 212011056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601620235
    },
    {
        "content": "<p>also this should probably move to the <a class=\"stream\" data-stream-id=\"236449\" href=\"/#narrow/stream/236449-Program-verification\">#Program verification</a> stream before everyone else gets bored to tears <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 212011177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601620317
    },
    {
        "content": "<p>My objective is an Equality Saturation enriched RVSDG -&gt; RISC-V optimizing compiler for a Lean-like language enriched with Resourceful Dependent Types. With sensitive data annotated a la resources to taint along data dependencies. I want a language and optimizing compiler for cryptography, such that cryptography can be specified as a clean reference and optimizations may be specified orthogonality and be applied without fear of leaking sensitive data through crypto-unsafe optimizations, like branching on secrets.</p>\n<p>RVSDG = <a href=\"https://www.sintef.no/contentassets/11da6d67207348db98a30ddbdf3b0bba/reissmann_poster.pdf\">https://www.sintef.no/contentassets/11da6d67207348db98a30ddbdf3b0bba/reissmann_poster.pdf</a><br>\nEquality Saturation = <a href=\"https://www.cs.cornell.edu/~ross/publications/eqsat/\">https://www.cs.cornell.edu/~ross/publications/eqsat/</a><br>\nResourceful Dependent Types = <a href=\"http://www.cse.chalmers.se/~abela/talkTYPES18.pdf\">http://www.cse.chalmers.se/~abela/talkTYPES18.pdf</a> + <a href=\"http://www.cse.chalmers.se/~abela/types18.pdf\">http://www.cse.chalmers.se/~abela/types18.pdf</a></p>",
        "id": 212013731,
        "sender_full_name": "SnowFox",
        "timestamp": 1601620547
    },
    {
        "content": "<p>Well, that sounds like a good move. ;)</p>",
        "id": 212014309,
        "sender_full_name": "SnowFox",
        "timestamp": 1601620574
    },
    {
        "content": "<p>(moved to <a href=\"#narrow/stream/236449-Program-verification/topic/RISC-V.20ISA.20in.20Lean/near/212017762\">https://leanprover.zulipchat.com/#narrow/stream/236449-Program-verification/topic/RISC-V.20ISA.20in.20Lean/near/212017762</a>)</p>",
        "id": 212018263,
        "sender_full_name": "SnowFox",
        "timestamp": 1601620743
    }
]