[
    {
        "content": "<p>Is the Dirichlet's theorem on arithmetic progressions already implemented, or any of the special cases (like the infinitude of primes of the form 4k+1, 4k-1, etc)?<br>\nI didn't find this after doing a google site search or after looking through <a href=\"http://nat.prime\">nat.prime</a> and through the list of 100 theorems.</p>",
        "id": 232829607,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617313594
    },
    {
        "content": "<p>This is a nontrivial theorem; the standard proof involves a bunch of complex analysis and we have essentially no complex analysis. The special cases such as 4k+1, 4k-1 are easily accessible; we have enough about cyclotomic polynomials to do 1 mod N and indeed this might also be done.</p>",
        "id": 232829713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617313663
    },
    {
        "content": "<p>I'll like to implement those, if you don't mind. How should I call them (still don't fully get the naming convention), and where should I place them? in <a href=\"http://nat.prime\">nat.prime</a>?</p>",
        "id": 232829893,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617313759
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/number_theory/primes_congruent_one.html\">https://leanprover-community.github.io/mathlib_docs/number_theory/primes_congruent_one.html</a> Here's the case for 1 mod N</p>",
        "id": 232830151,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617313895
    },
    {
        "content": "<p>As a special case we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_prime_ge_modeq_one\">docs#nat.exists_prime_ge_modeq_one</a> for primes congruent to <code>1</code> mod <code>N</code></p>",
        "id": 232830165,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617313904
    },
    {
        "content": "<p>ah, nice!</p>",
        "id": 232830285,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617313965
    },
    {
        "content": "<p>If you do 4k-1 you can also do 6k-1, this is the other elementary one. In general you can prove there's infinitely many primes not in a proper subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mi mathvariant=\"double-struck\">Z</mi><msup><mo stretchy=\"false\">)</mo><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\Z/N\\Z)^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> by elementary methods but you only get a concrete equality when this group has order 2</p>",
        "id": 232833493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617315837
    },
    {
        "content": "<p>There are a couple more special cases which should be doable without the heavy complex analysis, eg in <a href=\"https://kconrad.math.uconn.edu/blurbs/ugradnumthy/squaresandinfmanyprimes.pdf\">https://kconrad.math.uconn.edu/blurbs/ugradnumthy/squaresandinfmanyprimes.pdf</a></p>",
        "id": 232855590,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617334096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359379\">Manuel Candales</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Dirichlet's.20theorem.20on.20arithmetic.20progressions.3F/near/232829893\">said</a>:</p>\n<blockquote>\n<p>How should I call them (still don't fully get the naming convention)?</p>\n</blockquote>\n<p>Don't worry about that. Once you have a statement in Lean, you can post it here, and then more experienced users will be able to explain to you how to deduce the Lean name from the statement.</p>",
        "id": 232859455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617338339
    },
    {
        "content": "<p>Yeah if you allow quadratic reciprocity (which we have in mathlib) then you can get a little further. There are very elementary methods (which don't use Z/pZ^* cyclic) for classifying when -1 and -3 are squares mod p which is why you don't even need QR for the cases I originally mentioned</p>",
        "id": 232873808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617351530
    },
    {
        "content": "<p>I would be remiss to not mention the proof of dirichlet's theorem in the form \"every arithmetic progression contains infintely many primes\" done in lean by translation from metamath. See <a href=\"#narrow/stream/113488-general/topic/Prime.20number.20theorem.20in.20lean/near/168472336\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Prime.20number.20theorem.20in.20lean/near/168472336</a></p>",
        "id": 232874185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617351817
    },
    {
        "content": "<p>It's not in mathlib, though, because it has a dependency on the metamath library</p>",
        "id": 232874281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617351900
    },
    {
        "content": "<p>Is there any progress on this - perhaps more complex analysis tools were implemented since April? A student of mine is thinking about this topic as a 4th year project (for a CS students).</p>",
        "id": 257668418,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1634289353
    },
    {
        "content": "<p>There's ongoing work on getting complex analysis off the ground. I think Yury more or less has Cauchy's theorem?</p>",
        "id": 257668982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634289654
    },
    {
        "content": "<p>I'm waiting for a review of <a href=\"https://github.com/leanprover-community/mathlib/issues/9496\">#9496</a>. Unfortunately, I don't know how to help <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> with the review.</p>",
        "id": 257857032,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634414470
    },
    {
        "content": "<p>(it is &gt;4K lines)</p>",
        "id": 257857068,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634414507
    },
    {
        "content": "<p>Wrong topic?</p>",
        "id": 257857430,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634414817
    },
    {
        "content": "<p>Oh no, nevermind <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 257857465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634414850
    },
    {
        "content": "<p>The obvious thing to make it easier to digest is to split it. Are you planning on doing that? I have a few comments on the finset lemmas.</p>",
        "id": 257857693,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634415008
    },
    {
        "content": "<p>I don't see any finset lemmas in this PR. Currently it has &lt;100 LOC outside of <code>analysis.box_integral</code> and lots of code in this directory. I'm not sure that it makes sense to merge some files in this directory before others but if Sebastien will greenlight a part of the PR, then I'll move it to a new PR and merge to master.</p>",
        "id": 257858389,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634415583
    },
    {
        "content": "<p>Oh sorry, just set. But nevermind because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pairwise_disjoint\">docs#set.pairwise_disjoint</a> is too specialized.</p>",
        "id": 257858777,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634415934
    },
    {
        "content": "<p>I thought Sébastien was handling it. I'll try to help.</p>",
        "id": 257861241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634418257
    },
    {
        "content": "<p>Sébastien already reviewed a large part of the PR. I was not trying to complain. I just wanted to say that there is a lot of code to review here, so one shouldn't expect this PR to be merged very quickly.</p>",
        "id": 257870963,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634427913
    }
]