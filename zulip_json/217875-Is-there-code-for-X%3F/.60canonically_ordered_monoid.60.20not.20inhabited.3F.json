[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>fails. I would assume that a <code>canonically_ordered_monoid</code> needs to have at least a neutral element?</p>\n<p>Of course,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">canonically_ordered_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i.one</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>works. The question is why this is not deduced automatically.</p>",
        "id": 297658909,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662578805
    },
    {
        "content": "<p>Inhabited carries data, so I imagine making any monoid <code>inhabited</code> with 1 would cause diamonds (e.g. a ring is a monoid and an add monoid so inhabited.default would be both 0 and 1, which will likely cause issues). Does using <code>nonempty</code> instead work for your purposes.</p>",
        "id": 297659850,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662579169
    },
    {
        "content": "<p>I want to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.le_prod_of_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">canonically_ordered_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">l.prod</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(which apparently does not exist in mathlib) and in my proof need <code>list.head</code>, which requires the type to be <code>inhabited</code>.</p>",
        "id": 297662499,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662580265
    },
    {
        "content": "<p>I can, of course, produce that instance locally.</p>",
        "id": 297662588,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662580306
    },
    {
        "content": "<p>That sounds fine, you could also use some other defs like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.head'\">docs#list.head'</a> coupled with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.get_or_else\">docs#option.get_or_else</a></p>",
        "id": 297663048,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662580490
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nthd\">docs#list.nthd</a> even</p>",
        "id": 297663161,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662580527
    },
    {
        "content": "<p>just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.coe_prod\">docs#multiset.coe_prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.le_prod_of_mem\">docs#multiset.le_prod_of_mem</a>?<br>\n<code>by { rw ← multiset.coe_prod, exact multiset.le_prod_of_mem h }</code></p>",
        "id": 297666733,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662581971
    },
    {
        "content": "<p>Ah, I had not found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.coe_prod\">docs#multiset.coe_prod</a>, only <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.prod_to_list\">docs#multiset.prod_to_list</a>, which goes the wrong way. I had expected <code>list.prod_to_multiset</code> or something like that...</p>",
        "id": 297778212,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662642562
    }
]