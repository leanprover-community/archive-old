[
    {
        "content": "<p>Is there a way to prove this elegantly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_coe_nat</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231614300,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1616583126
    },
    {
        "content": "<p>There's a lemma in the library saying that finite sums commute with an additive group homomorphism so you could rewrite the statement so that it deals with an add monoid hom and then apply that</p>",
        "id": 231617227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616584647
    },
    {
        "content": "<p>I don't know the name of the add_monoid_hom whose underlying function is the coercion though</p>",
        "id": 231618560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616585357
    },
    {
        "content": "<p>that's probably <code>nat_cast_hom.map_sum</code></p>",
        "id": 231619493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616585953
    },
    {
        "content": "<p>Ah, it's <code>int.of_nat_hom.map_sum _ _</code>. I guess there are two different casts from nat to int, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_ring_hom\">docs#nat.cast_ring_hom</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.of_nat_hom\">docs#int.of_nat_hom</a></p>",
        "id": 231619698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616586072
    },
    {
        "content": "<p>I don't really see how I can use those 2 to prove my lemma right now, can you elaborate a little more? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 232888463,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617362774
    },
    {
        "content": "<p><code>int.of_nat_hom.map_sum _ _</code> is literally the entire proof</p>",
        "id": 232891203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617365006
    },
    {
        "content": "<p>At least, that was my claim</p>",
        "id": 232891229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617365029
    },
    {
        "content": "<p>Oh, I see, thank you!</p>",
        "id": 232892846,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617366159
    }
]