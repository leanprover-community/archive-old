[
    {
        "content": "<p>I have an <code>x^(int.of_nat n)</code> (where <code>n</code> is <code>nat</code>) in my goal, and I wanted to convert it into just <code>x^n</code>.</p>\n<p>I found <code>int.cast_of_nat</code>, but it seems like the conversion arrow thing is required for it to work. Is there some way I can still do this convertion?</p>",
        "id": 226818408,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613658932
    },
    {
        "content": "<p>You can write <code>show (some new expression)</code> if it is definitionally equal to your current goal</p>",
        "id": 226818633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613659008
    },
    {
        "content": "<p>And <code>int.of_nat n</code> is defeq to <code>(n : \\Z)</code></p>",
        "id": 226818720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613659045
    },
    {
        "content": "<p>Ah, this worked! Thank you very much!</p>",
        "id": 226818886,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613659111
    },
    {
        "content": "<p>After that, there should be a lemma called <code>gpow_eq_pow</code> or something like that, that will convert from powers with integers in the exponent to powers with nat in the exponent</p>",
        "id": 226818930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613659131
    },
    {
        "content": "<p>Though I wonder how you ended up with <code>of_nat</code> in the first place</p>",
        "id": 226819390,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1613659322
    },
    {
        "content": "<p>You can also apply <code>simp</code> and see how it changes your expression to something more canonical.</p>",
        "id": 226819679,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1613659427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Converting.20from.20one.20type.20to.20another/near/226819390\">said</a>:</p>\n<blockquote>\n<p>Though I wonder how you ended up with <code>of_nat</code> in the first place</p>\n</blockquote>\n<p>I used <code>cases</code> on an integer, since for this lemma I needed to split into positive and negative branches.</p>",
        "id": 226820322,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613659671
    },
    {
        "content": "<p>There might be a better way though.</p>",
        "id": 226820508,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613659723
    },
    {
        "content": "<p>It probably makes sense to first prove whatever you are proving for nats, and then apply that lemma twice in the two branches for int</p>",
        "id": 226821002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613659874
    },
    {
        "content": "<p>But I'm just guessing</p>",
        "id": 226821015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613659879
    },
    {
        "content": "<p>You're probably right, and it might've been wiser to prove some other lemmas before it in order to be able to do this more generically.</p>",
        "id": 226821282,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613659986
    },
    {
        "content": "<p>Doing cases on an int is breaking the abstraction layer. I would just do by_cases on a statement about positivity, or cases lt_or_ge. Then you wouldn't be in a situation where you have to deal with the underlying definition of int</p>",
        "id": 226823041,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613660575
    },
    {
        "content": "<p><code>induction using int.induction_on</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.induction_on\">docs#int.induction_on</a>) is often a good bet too</p>",
        "id": 226823376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613660683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Converting.20from.20one.20type.20to.20another/near/226823376\">said</a>:</p>\n<blockquote>\n<p><code>induction using int.induction_on</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.induction_on\">docs#int.induction_on</a>) is often a good bet too</p>\n</blockquote>\n<p>Yesss, This is <strong>exactly</strong> what I needed. Thank you very much ^^!</p>",
        "id": 226827346,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613662175
    }
]