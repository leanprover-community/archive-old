[
    {
        "content": "<p>Do we have changes of indices in sums like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nci</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n₀</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">shift_sum</span> <span class=\"o\">{</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">Nci</span> <span class=\"n\">n₀</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Actually that might be an XY problem, what I need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'a</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>and I reached the above by following <code>has_sum_subtype_iff_of_support_subset</code>but that might be overly general for what I need.</p>",
        "id": 282895928,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652948329
    },
    {
        "content": "<p><code>Nci</code> is <code>Ici</code></p>",
        "id": 282896132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652948435
    },
    {
        "content": "<p>Ah I thought <code>Ici</code> was for reals, should have thought a little more</p>",
        "id": 282896264,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652948499
    },
    {
        "content": "<p>That will do for now, but feels like reinventing the wheel several times in a row:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">set.Ici</span> <span class=\"n\">n₀</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n₀</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.Ici</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">n₀</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_cancel_left</span><span class=\"o\">],</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">subtype.mk_eq_mk</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">shift'</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set.Ici</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">finset.map</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"n\">n₀</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">finset.map</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"n\">n₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_map_equiv</span><span class=\"o\">,</span> <span class=\"n\">equiv.coe_eq_to_embedding</span><span class=\"o\">,</span>\n    <span class=\"n\">equiv.symm_symm</span><span class=\"o\">,</span> <span class=\"n\">equiv.symm_apply_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_map_equiv</span><span class=\"o\">,</span> <span class=\"n\">equiv.coe_eq_to_embedding</span><span class=\"o\">,</span>\n    <span class=\"n\">equiv.symm_symm</span><span class=\"o\">,</span> <span class=\"n\">equiv.apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_shift'_at_top</span> <span class=\"o\">{</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">shift'</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">filter.tendsto_at_top_finset_of_monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">finset.map_subset_map.mpr</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨{</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">n₀</span><span class=\"o\">},</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">shift'</span><span class=\"o\">,</span> <span class=\"n\">shift</span><span class=\"o\">,</span> <span class=\"n\">equiv.coe_eq_to_embedding</span><span class=\"o\">,</span> <span class=\"n\">equiv.coe_fn_mk</span><span class=\"o\">,</span> <span class=\"n\">finset.map_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">equiv.to_embedding_apply</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">subtype.mk_eq_mk</span><span class=\"o\">],</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">shift_sum</span> <span class=\"o\">{</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">set.Ici</span> <span class=\"n\">n₀</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_sum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">shift'</span> <span class=\"n\">n₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">shift'</span> <span class=\"n\">n₀</span><span class=\"o\">))</span>\n    <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp.assoc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">shift'</span> <span class=\"n\">n₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">shift'</span> <span class=\"n\">n₀</span><span class=\"o\">),</span> <span class=\"n\">equiv.symm_comp_self</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto.comp</span> <span class=\"n\">_</span> <span class=\"n\">tendsto_shift'_at_top</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"n\">shift'</span> <span class=\"n\">n₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">shift'</span><span class=\"o\">,</span> <span class=\"n\">shift</span><span class=\"o\">,</span> <span class=\"n\">equiv.coe_eq_to_embedding</span><span class=\"o\">,</span> <span class=\"n\">equiv.coe_fn_symm_mk</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_map</span><span class=\"o\">,</span>\n    <span class=\"n\">equiv.to_embedding_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282901541,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652951603
    },
    {
        "content": "<p>You can look around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_eq_zero_add\">docs#tsum_eq_zero_add</a></p>",
        "id": 282903685,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1652952915
    }
]