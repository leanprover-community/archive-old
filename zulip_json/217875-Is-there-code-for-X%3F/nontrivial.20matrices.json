[
    {
        "content": "<p>Is there some pi instance that matches the following? Or is this just a missing hole in the lib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">ι'</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">exists.elim</span> <span class=\"o\">(</span><span class=\"n\">exists_pair_ne</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}⟩⟩</span>\n</code></pre></div>",
        "id": 226790228,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613643868
    },
    {
        "content": "<p>It's in the library:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">ι'</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"o\">],</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 226790607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613644057
    },
    {
        "content": "<p>Thanks Scott! But it isn't automatically inferred without this declaration. Worth including?</p>",
        "id": 226791020,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613644243
    },
    {
        "content": "<p>I think so.</p>",
        "id": 226792155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613644857
    },
    {
        "content": "<p>Similarly could add a subsingleton instance for <code>[subsingleton R]</code>, and when we eventually have the typeclass, a <code>unique</code> instance for each of <code>[empty ι]</code> and <code>[empty ι']</code></p>",
        "id": 226793824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613645852
    },
    {
        "content": "<p>We do already have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subsingleton_of_empty_left</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nonempty</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">i</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subsingleton_of_empty_right</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">j</span> <span class=\"o\">}⟩</span>\n</code></pre></div>",
        "id": 226845619,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613668419
    }
]