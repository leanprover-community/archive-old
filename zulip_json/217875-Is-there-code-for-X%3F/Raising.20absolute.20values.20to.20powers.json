[
    {
        "content": "<p>Does anyone know of a simple way to prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">|^</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">|^</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm fairly flexible with the spelling... for example, I'm happy to use <code>nnnorm</code> or <code>norm</code> instead of the absolute value, etc.</p>\n<p>More generally, does mathlib know that raising an absolute value to a real power <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>p</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\le p \\le 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> gives another absolute value?</p>",
        "id": 291772764,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659476610
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.le_sum_of_subadditive\">docs#finset.le_sum_of_subadditive</a></p>",
        "id": 291772869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659476666
    },
    {
        "content": "<p>That's a start...</p>",
        "id": 291772962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659476731
    },
    {
        "content": "<p>the api seach comes up empty with <code>pow subadditive</code></p>",
        "id": 291773029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659476762
    },
    {
        "content": "<p>Surely that would rather be <code>pow_add_le</code>?</p>",
        "id": 291773134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659476821
    },
    {
        "content": "<p>ha we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal.rpow_add_le_add_rpow\">docs#nnreal.rpow_add_le_add_rpow</a></p>",
        "id": 291773289,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659476911
    },
    {
        "content": "<p>(contrary to the assumption there, it's also true for <code>p = 0</code> ;)</p>",
        "id": 291773502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659477064
    },
    {
        "content": "<p>(got bored and fixed that <a href=\"https://github.com/leanprover-community/mathlib/pull/15823\">#15823</a>)</p>",
        "id": 291778007,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659479836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Raising.20absolute.20values.20to.20powers/near/291772764\">said</a>:</p>\n<blockquote>\n<p>More generally, does mathlib know that raising an absolute value to a real power <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>p</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\le p \\le 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> gives another absolute value?</p>\n</blockquote>\n<p>LTE knows that you can rescale <code>has_p_norm</code> (or whatever it is called) like that.</p>",
        "id": 291967738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659592659
    }
]