[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">apply_mem_span_of_mem_span</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n   <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n   <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">is_there_code_for_X</span>\n</code></pre></div>",
        "id": 227403726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614073285
    },
    {
        "content": "<p>is hopefully in the library somewhere already, and I'm just not finding it.</p>",
        "id": 227403744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614073299
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submodule.mem_span</span><span class=\"o\">,</span> <span class=\"n\">submodule.mem_map</span><span class=\"o\">,</span> <span class=\"n\">submodule.span_image</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>suffices.</p>",
        "id": 227403758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614073306
    },
    {
        "content": "<p>I wouldn't be surprised it is missing...</p>",
        "id": 227403896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614073376
    },
    {
        "content": "<p>I'm remembering why I avoid doing linear algebra in lean...</p>",
        "id": 227404545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614073716
    },
    {
        "content": "<p>Relatedly, do we have iterates of linear maps, as a bundled linear map?</p>",
        "id": 227404574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614073734
    },
    {
        "content": "<p>I found <code>src/algebra/iterate_hom.lean</code>, but this is just the lemmas about <code>nat.iterate</code> applied to a <code>*_hom</code>.</p>",
        "id": 227404660,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614073770
    },
    {
        "content": "<p>I'm not aware of such iterates. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> do you know if this is in mathlib?</p>",
        "id": 227405266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614074062
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1822\">#1822</a> has a bit about iterating linear maps</p>",
        "id": 227408382,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1614075840
    },
    {
        "content": "<p>Thanks. It's a pity the easy bits there about <code>iterate</code> didn't make it into mathlib when the rest of the PR stalled.</p>",
        "id": 227410949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614077316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mem_span_of_mem_span/near/227410949\">said</a>:</p>\n<blockquote>\n<p>Thanks. It's a pity the easy bits there about <code>iterate</code> didn't make it into mathlib when the rest of the PR stalled.</p>\n</blockquote>\n<p>That's fixable - <a href=\"https://github.com/leanprover-community/mathlib/issues/6377\">#6377</a></p>",
        "id": 227426499,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1614085621
    }
]