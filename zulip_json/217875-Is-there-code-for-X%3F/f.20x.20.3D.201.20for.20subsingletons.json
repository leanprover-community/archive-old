[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_monoid_hom_of_subsingleton</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">subsingleton.elim</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">map_one</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>do we have this already? I don't really like this name, what should I call it?</p>\n<p>The things I do for <code>nontriviality</code> to work smoothly...</p>",
        "id": 292969868,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660237354
    },
    {
        "content": "<p>Some inspiration: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_of_subsingleton\">docs#norm_of_subsingleton</a></p>",
        "id": 292970040,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660237430
    }
]