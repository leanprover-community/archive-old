[
    {
        "content": "<p>For example, here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.intermediate_field</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_splitting_field</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291576509,
        "sender_full_name": "FR",
        "timestamp": 1659361093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> recently proved this but hasn't finished PR'ing its dependencies: <a href=\"#narrow/stream/304774-FLT-regular/topic/Project.20status/near/291324611\">https://leanprover.zulipchat.com/#narrow/stream/304774-FLT-regular/topic/Project.20status/near/291324611</a></p>",
        "id": 291578322,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659361993
    },
    {
        "content": "<p>I'm actually writing a PR for this result right now, but <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> is correct that there are dependencies.</p>",
        "id": 291578503,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1659362075
    },
    {
        "content": "<p>I should probably say dependencies have been PR'd but not all merged yet?</p>",
        "id": 291578624,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659362138
    },
    {
        "content": "<p>Thanks! Looking forward to it.</p>",
        "id": 291579044,
        "sender_full_name": "FR",
        "timestamp": 1659362326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">FR</span> has marked this topic as resolved.</p>",
        "id": 291579071,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659362338
    },
    {
        "content": "<p>Here's the PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/15795\">#15795</a><br>\nAnd here's the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">adjoin_root_set_is_splitting_field</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.is_splitting_field</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">p.root_set</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 291579675,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1659362585
    },
    {
        "content": "<p>An alternative way (IMO better) would be a construction that turns <code>[algebra F K] [algebra K E] [algebra F E] [is_scalar_tower F K E]</code> into <code>K' : intermediate_field F E</code>. Or more generally using a tower of <code>algebra</code> instances instead of <code>intermediate_field</code>s.</p>",
        "id": 291584461,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659364797
    },
    {
        "content": "<p>That construction exists as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.restrict_scalars\">docs#intermediate_field.restrict_scalars</a> applied to <code>E := ⊥</code>, but I don't see how that helps the current result.</p>",
        "id": 291588675,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659366625
    },
    {
        "content": "<p>Not quite: <code>restrict_scalars</code> is a map from <code>intermediate_field</code> to <code>intermediate_field</code>. I'm proposing a map from <code>Type*</code> to <code>intermediate_field</code>.</p>",
        "id": 291588792,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659366704
    },
    {
        "content": "<p>You just apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.restrict_scalars\">docs#intermediate_field.restrict_scalars</a> to <br>\n<code>⊥ : intermediate_field K E</code> right?</p>",
        "id": 291589756,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659367188
    },
    {
        "content": "<p>Ooh I see, good idea!</p>",
        "id": 291590077,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659367334
    },
    {
        "content": "<p>I think you get the same construction when you apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.map\">docs#intermediate_field.map</a> with <code>f</code> being <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower.to_alg_hom\">docs#is_scalar_tower.to_alg_hom</a> and <code>S = ⊤</code>; the contrast between ⊥ and ⊤ is interesting ...</p>",
        "id": 291590883,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659367709
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.is_splitting_field.map\">docs#polynomial.is_splitting_field.map</a> looks like it might help?</p>",
        "id": 291591178,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659367843
    },
    {
        "content": "<p>Indeed, if we don't insist on showing that the intermediate field is obtained by adjoining the roots, there's a more direct construction using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.map\">docs#intermediate_field.map</a>, but it requires the <code>image_root_set</code> lemma introduced by one of Thomas's PRs and the fact that is_splitting_field is preserved by alg_equiv:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"n\">is_alg_closed.lift</span> <span class=\"o\">(</span><span class=\"n\">algebra.is_algebraic_of_finite</span> <span class=\"n\">ℚ</span> <span class=\"bp\">$</span> <span class=\"n\">splitting_field</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"n\">rotate</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ℂ</span> <span class=\"o\">},</span> <span class=\"n\">iterate</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">intermediate_field.map</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">splitting_field</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span> <span class=\"bp\">.</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The following times out :</span>\n<span class=\"cm\">  intermediate_field.map (is_alg_closed.lift (algebra.is_algebraic_of_finite ℚ $ splitting_field p)) ⊤</span>\n<span class=\"cm\">  If you don't have the right imports it's also easy to timeout. -/</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">L'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">image_root_set</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.splits</span> <span class=\"bp\">$</span> <span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">p.root_set</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">p.root_set</span> <span class=\"n\">L'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">root_set</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.coe_image</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">multiset.to_finset_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">f.coe_to_ring_hom</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">roots_map</span> <span class=\"bp\">↑</span><span class=\"n\">f</span>\n      <span class=\"o\">((</span><span class=\"n\">splits_id_iff_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">f.comp_algebra_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">root_set</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.is_splitting_field.of_alg_equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n  <span class=\"o\">[</span><span class=\"n\">is_splitting_field</span> <span class=\"n\">K</span> <span class=\"n\">L'</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_splitting_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">f.symm.to_alg_hom.comp_algebra_map</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">splits_comp_of_splits</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_splitting_field.splits</span> <span class=\"n\">L'</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.map_injective</span> <span class=\"n\">f.to_alg_hom</span> <span class=\"n\">f.injective</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.map_top</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">algebra.range_top_iff_surjective</span> <span class=\"n\">f.to_alg_hom</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">f.surjective</span><span class=\"o\">],</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">algebra.adjoin_image</span><span class=\"o\">,</span> <span class=\"n\">image_root_set</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_splitting_field.adjoin_roots</span> <span class=\"n\">L'</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_splitting_field</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">polynomial.is_splitting_field.of_alg_equiv</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">splitting_field</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">subalgebra.map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">ℚ</span> <span class=\"n\">p.splitting_field</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_subalgebra</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">iff.rfl</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">subalgebra.equiv_of_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">algebra.map_top</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">alg_equiv.of_injective_field</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291611009,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659376614
    }
]