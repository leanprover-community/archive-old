[
    {
        "content": "<p>Do we have something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">units_op</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">⟨</span><span class=\"n\">unop</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span> <span class=\"n\">op_injective</span> <span class=\"n\">u.4</span><span class=\"o\">,</span> <span class=\"n\">op_injective</span> <span class=\"n\">u.3</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">op_induction</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span> <span class=\"n\">unop_injective</span> <span class=\"bp\">$</span> <span class=\"n\">u.4</span><span class=\"o\">,</span> <span class=\"n\">unop_injective</span> <span class=\"n\">u.3</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">unop_injective</span> <span class=\"bp\">$</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">unop_injective</span> <span class=\"bp\">$</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 240328643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622037585
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7723\">#7723</a></p>",
        "id": 240334956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622040021
    }
]