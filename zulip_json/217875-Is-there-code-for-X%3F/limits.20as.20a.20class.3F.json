[
    {
        "content": "<p>Do we have some idiomatic way to do something similar to the following? Should we? (ping <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> )</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.is_limit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_cone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cone</span> <span class=\"o\">:</span> <span class=\"n\">F.cones.obj</span> <span class=\"bp\">$</span> <span class=\"n\">opposite.op</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">as_cone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_cone</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">has_cone.cone</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_cone</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_limit</span> <span class=\"o\">:</span> <span class=\"n\">limits.is_limit</span> <span class=\"o\">(</span><span class=\"n\">as_cone</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_cone</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F.obj</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">as_cone</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">π.app</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_cone</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">as_cone</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">w</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_limit</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_cone</span> <span class=\"n\">F</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">is_limit.is_limit.lift</span> <span class=\"o\">(</span><span class=\"n\">as_cone</span> <span class=\"n\">F</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- etc...</span>\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 247014056,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627064531
    },
    {
        "content": "<p>I don't think this is a great idea, at least not as a typeclass: there could be multiple ways in which an object is a limit and hiding that data in the typeclass system seems not great</p>",
        "id": 247014556,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627064804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/limits.20as.20a.20class.3F/near/247014556\">said</a>:</p>\n<blockquote>\n<p>there could be multiple ways in which an object is a limit</p>\n</blockquote>\n<p>Do you have an example in mind?</p>",
        "id": 247014674,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627064874
    },
    {
        "content": "<p>I like to pass around an is_limit predicate a lot instead, which takes the cone rather than just its point, though I'd need to see your use case to be sure</p>",
        "id": 247018572,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627067042
    },
    {
        "content": "<p>Not a specific example, but this feels similar to <a href=\"https://ncatlab.org/nlab/show/skeleton#uniqueness_of_constructions\">https://ncatlab.org/nlab/show/skeleton#uniqueness_of_constructions</a></p>",
        "id": 247018723,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627067109
    },
    {
        "content": "<p>Yes, of course if you compose with an automorphism of <code>X</code> you can a \"new\" way to express that <code>X</code> is a limit, but when does this show up in practice? It seems that in practice we always use <code>limit F</code> and the assocaited <code>limit.\\pi</code>, <code>limit.lift</code>, etc., API. We can compose <code>limit F</code> with an automorphism, to obtain a \"new\" way of seeing <code>limit F</code> as a limit. I mostly want a way to have a similar nice API in cases where have some object <code>X</code> which we know is a limit in some other way.</p>",
        "id": 247021057,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627068328
    },
    {
        "content": "<p>Right, I think the correct thing to do here is for API to take in the entire cone expressing that X is a limit, using the <code>is_limit</code> existing things</p>",
        "id": 247023011,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627069441
    },
    {
        "content": "<p>For instance, in <a href=\"https://github.com/leanprover-community/mathlib/issues/8380\">#8380</a> we could say that X \"is a pullback\" and derive that it's initial but we might as well have the pullback data as an explicit argument</p>",
        "id": 247023288,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627069579
    },
    {
        "content": "<p>One issue with using the existing <code>is_limit</code> thing is that it's cumbersome to say that <code>C : cone F</code> is a cone whose cone point is <code>X</code>.</p>",
        "id": 247023311,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627069597
    },
    {
        "content": "<p>My main issue with your code is that it's putting data into the typeclass system, I think it's less objectionable if those are passed around explicitly (or made into Props)</p>",
        "id": 247023479,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627069691
    },
    {
        "content": "<p>Yes, I understand, but we put data into classes all the time (e.g. any of the algebraic classes). We don't seem to care that I can put a different ring structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> by composing with some permutation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>",
        "id": 247023572,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627069754
    },
    {
        "content": "<p>Sure, but the statement you give involves equality of objects on paper anyway, right? So it's not a shock that its awkward to work with in Lean</p>",
        "id": 247023586,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627069763
    },
    {
        "content": "<p>In that case why are all the existing limit classes propositions?</p>",
        "id": 247023700,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627069812
    },
    {
        "content": "<p>In any case, do you have a specific example where you'd find this useful?</p>",
        "id": 247023751,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627069852
    },
    {
        "content": "<p>One example I can think of is for zero obejcts in an abelian category.</p>",
        "id": 247023795,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627069878
    },
    {
        "content": "<p>It would be really useful to be able to write <code>[is_zero_object X]</code>.</p>",
        "id": 247023822,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627069892
    },
    {
        "content": "<p>That's reasonable, but in that case the solution is a lot easier since the cone here carries no information other than the raw object; you can adapt is_terminal for is_zero_object</p>",
        "id": 247024154,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627070082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I think all the annoying duplication in <a href=\"https://github.com/leanprover-community/mathlib/issues/8467\">#8467</a> would be solved if we had something similar to what I outlined above.</p>",
        "id": 247607619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627576361
    }
]