[
    {
        "content": "<p>Is there a way for typeclass inference to find the metric space structure on an inner product space?  It doesn't seem to be the case at the moment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inner_product_space.to_normed_group</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_metric_space</span>\n</code></pre></div>\n<p>The situation is as follows:  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a> has a <code>to_normed_group</code> field, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_group\">docs#normed_group</a> has a <code>to_metric_space</code> field.</p>",
        "id": 219726089,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607804527
    },
    {
        "content": "<p>Actually,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>fails as well.  I can't see why the <code>normed_group</code> structure can't be found but the <code>normed_space</code> structure can be.</p>",
        "id": 219726421,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607805078
    },
    {
        "content": "<p>What happens if you <code>include 𝕜</code>? Otherwise, your inner product space instance is probably not included in your examples.</p>",
        "id": 219727000,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607805901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inner.20product.20space.20is.20metric.20space/near/219727000\">said</a>:</p>\n<blockquote>\n<p>What happens if you <code>include 𝕜</code>?</p>\n</blockquote>\n<p>This works, thank you!</p>",
        "id": 219727070,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607806002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inner.20product.20space.20is.20metric.20space/near/219727000\">said</a>:</p>\n<blockquote>\n<p>Otherwise, your inner product space instance is probably not included in your examples.</p>\n</blockquote>\n<p>Could you explain this a little more?</p>",
        "id": 219727079,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607806019
    },
    {
        "content": "<p>When you have variables and instances in scope, Lean does not include all of them in lemmas. For instance, if you have two variables <code>a</code> and <code>b</code>, and the statement of a lemma only involves <code>a</code>, then Lean will not make the lemma have the <code>b</code> variable. For instances, it only includes all the instances for which all the variables are present in the statement.</p>",
        "id": 219727175,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607806134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inner.20product.20space.20is.20metric.20space/near/219727175\">said</a>:</p>\n<blockquote>\n<p>For instances, it only includes all the instances for which all the variables are present in the statement.</p>\n</blockquote>\n<p>I didn't know this, but it makes perfect sense.  Thank you!</p>",
        "id": 219727263,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607806238
    }
]