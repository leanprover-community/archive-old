[
    {
        "content": "<p>Dear All,</p>\n<p>is something like the lemma below already in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.regular.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_left_regular.inj</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_left_regular</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I know that I was the one who defined <code>regular</code> elements, but at the time, I had a much more limited understanding of Lean.</p>\n<p>If the lemma above (and its various sided/additive forms) is not in mathlib, should I PR it?</p>\n<p>Thanks!</p>",
        "id": 296144529,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661872726
    },
    {
        "content": "<p>(Side comment: now that dot-notation works better, <code>is_left_regular</code> can be defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_left_regular</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n</code></pre></div>\n<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 296145018,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661872869
    },
    {
        "content": "<p>I PRed in the end.  The deciding factor was that I could not wait to shorten the definitions of <code>regular</code> using dot-notation!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16312\">#16312</a></p>",
        "id": 296150488,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661874203
    },
    {
        "content": "<p>Since when did lean support that new dot notation?</p>",
        "id": 296176721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661880573
    },
    {
        "content": "<p>3.47 (5 days ago) I believe, thanks to <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 296178503,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661881086
    },
    {
        "content": "<p>And for mathlib, today!</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16315\">#16315</a> is a small PR to add dot notation for modus tollens (<code>function.mt</code> and <code>function.mtr</code>)</p>",
        "id": 296178981,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661881245
    },
    {
        "content": "<p>What's the point of <code>function.mt</code> <del>given it could never save a character</del> (edit: see below for an example showing this is false)? And should <code>function.mtr</code> simply be <code>mtr</code> for consistency?</p>",
        "id": 296188947,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661884249
    },
    {
        "content": "<p>It could save characters, if you avoid needing parentheses.</p>",
        "id": 296192204,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661885325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I don't think saving keystrokes should be a primary consideration in most cases, especially if the difference is only a handful of keystrokes, or in this case none at all.</p>\n<p>Here are a few reasons that come to mind justifying <code>function.mt</code>:</p>\n<ul>\n<li>Perhaps <code>function.mt</code> should replace <code>mt</code> entirely, since a two-letter function name is polluting the global namespace (it's plausible <code>mt</code> could be a local).</li>\n<li>Dot notation is familiar with <code>iff</code>, and this makes implications behave similarly (though <code>iff</code> uses <code>h.not.symm</code> or <code>h.not.mpr</code> for its modus tollens).</li>\n<li><code>h1.mt h2</code> has different parsing rules from <code>mt h1 h2</code>, and one might like the aesthetics of dot notation more. I like it because I think of modus tollens as a transformation of the implication.</li>\n</ul>",
        "id": 296193969,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661885903
    },
    {
        "content": "<p>It would be cool if dot notation on <code>Prop → Prop</code> tried <a href=\"https://leanprover-community.github.io/mathlib_docs/find/implies\">docs#implies</a> as the namespace first</p>",
        "id": 296194812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661886162
    },
    {
        "content": "<p><code>implies.mt</code> feels like a much less weird name</p>",
        "id": 296194879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661886186
    },
    {
        "content": "<p>I think the other two are good points, but I can't make sense of</p>\n<blockquote>\n<p>Dot notation is familiar with iff, and this makes implications behave similarly (though iff uses h.not.symm or h.not.mpr for its modus tollens).</p>\n</blockquote>\n<p>Can you explain? What does it have to do with <code>iff</code>?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/is_regular.2Einj/near/296192204\">said</a>:</p>\n<blockquote>\n<p>It could save characters, if you avoid needing parentheses.</p>\n</blockquote>\n<p>Can you give an example? If it's not a single name you'd need to enclose it in <code>()</code> to write <code>.mt</code> right?</p>",
        "id": 296195628,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661886441
    },
    {
        "content": "<p>I meant something like <code>f (mt g)</code> can now be spelled <code>f g.mt</code>: 6 chars instead of 8!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 296195946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661886565
    },
    {
        "content": "<p>Actually, more than decreased number of characters, I think that this can be slightly more readable.  At least, it is good to have the option!</p>",
        "id": 296196244,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661886674
    },
    {
        "content": "<p>Nice! I think I never encountered unapplied <code>mt _</code> so I didn't realize that's a possibility.</p>",
        "id": 296196435,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661886742
    },
    {
        "content": "<p>Regarding <code>iff</code>: I think it makes sense to introduce a coercion from <code>iff</code> to <code>implies</code> (maybe an equiv_like instance; I don't think we have these currently), analogous to the <code>equiv.to_fun</code> cocercion.</p>",
        "id": 296197183,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661887020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> It has to do with <code>iff</code> since we already interact with <code>iff</code> using dot notation frequently, and so it makes things more consistent if implications can use dot notation for similar tasks.</p>",
        "id": 296197296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661887059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/is_regular.2Einj/near/296197183\">said</a>:</p>\n<blockquote>\n<p>Regarding <code>iff</code>: I think it makes sense to introduce a coercion from <code>iff</code> to <code>implies</code> (I don't think we have this currently), analogous to the <code>equiv.to_fun</code> cocercion.</p>\n</blockquote>\n<p>This idea comes up every once in a while (I think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I were the last to propose it), but there is relatively strong opposition.</p>\n<p>If I remember correctly, it would be acceptable (or rather, it wouldn't immediately be unacceptable) if it were hidden behind a locale, since then it wouldn't lead to students being confused about implications vs iffs.</p>",
        "id": 296197787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661887217
    },
    {
        "content": "<p>So IIUC, you mean that we use dot notations <code>.mp</code>, <code>.mpr</code> (which are, specifically, structure projections) to get <code>implies/function</code> from <code>iff</code>, so it's natural to concatenate dot notations after <code>.mp(r)</code> which necessitates more dot notations for <code>implies/function</code>. I agree this is also a good point!</p>",
        "id": 296198004,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661887316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/is_regular.2Einj/near/296194812\">said</a>:</p>\n<blockquote>\n<p>It would be cool if dot notation on <code>Prop → Prop</code> tried <a href=\"https://leanprover-community.github.io/mathlib_docs/find/implies\">docs#implies</a> as the namespace first</p>\n</blockquote>\n<p>Yes, it would be. This might have to wait until the mathlib port is complete to simplify coordinating changes to Lean 3 and 4, but if Lean 4 adopts this feature, I'll happily backport it to Lean 3.</p>\n<p>Here's a general version I was thinking about before for namespaces:</p>\n<ul>\n<li>If it's a non-dependent <code>Prop</code>-valued pi, then <code>implies</code>, otherwise</li>\n<li>If it's a dependent <code>Prop</code>-valued pi, then <code>forall</code>, otherwise</li>\n<li>If it's a non-dependent pi, then <code>function</code>, otherwise</li>\n<li>If it's a dependent pi, then <code>pi</code>.</li>\n</ul>\n<p>This also defines the search order if the name in that namespace does not exist. In particular, it's a diamond, and these are the possible search orders:</p>\n<ul>\n<li><code>implies</code>, <code>forall</code>, <code>function</code>, <code>pi</code></li>\n<li><code>forall</code>, <code>pi</code></li>\n<li><code>function</code>, <code>pi</code></li>\n<li><code>pi</code></li>\n</ul>",
        "id": 296201840,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661887761
    },
    {
        "content": "<p>It might not be necessary to have all four. (For example, perhaps <code>forall</code> and <code>implies</code> could be merged.)</p>",
        "id": 296204944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661887855
    },
    {
        "content": "<p>I am torn between \"this is a super-cool feature\" and \"this will be really confusing for newcomers\"</p>",
        "id": 296209087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661888591
    }
]