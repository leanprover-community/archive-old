[
    {
        "content": "<p>I'm missing an instance that says that <code>cyclotomic_field n F</code> is finite if <code>F</code> is a finite field.<br>\n<span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Is this something that could be included in <a href=\"https://github.com/leanprover-community/mathlib/pull/14463\">#14463</a>?</p>",
        "id": 284667030,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654116328
    },
    {
        "content": "<p>Or maybe, this should work via: <code>cyclotomic_field n F</code> is a finite(-dimensional) extension of <code>F</code>; a finite extension of a finite field is finite.</p>",
        "id": 284667137,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654116387
    },
    {
        "content": "<p>Yes, that will work immediately.  I have some draft code (I will open a PR maybe tomorrow) to show that <code>cyclotomic_field n F</code> is always a cyclotomic extension of <code>F</code> (I mean, even if <code>n = 0</code> in <code>F</code>, it isn't a <code>n</code>-th cyclotomic extension but a <code>m</code>-th one, where <code>n = p^k * m</code> where <code>p = char(F)</code>), so this will work in general.</p>",
        "id": 284668027,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654116917
    },
    {
        "content": "<p>Note that <code>cyclotomic_field n F</code> is just <code>(cyclotomic n K).splitting_field</code>, so you can already use all the API for <code>splitting_field</code>.</p>",
        "id": 284668066,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654116950
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.fintype_of_fintype\">docs#finite_dimensional.fintype_of_fintype</a> already works (but it cannot be an <code>instance</code>)</p>",
        "id": 284668227,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654117039
    },
    {
        "content": "<p>In general all the theorems saying that <code>L</code> is finite because <code>K</code> satisfies some condition and <code>L</code> is related to <code>K</code>, cannot be instances, since Lean cannot guess <code>K</code>.</p>",
        "id": 284668910,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654117357
    },
    {
        "content": "<p>OK. So this appears to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">FF</span> <span class=\"o\">:=</span> <span class=\"n\">cyclotomic_field</span> <span class=\"mi\">8</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">FF</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.is_splitting_field.finite_dimensional</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">FF</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional.fintype_of_fintype</span> <span class=\"n\">F</span> <span class=\"n\">FF</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 284669069,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654117437
    },
    {
        "content": "<p>Do you need the first <code>haveI</code>?</p>",
        "id": 284669664,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654117714
    },
    {
        "content": "<p>Yes; otherwise the second <code>haveI</code> complains.</p>",
        "id": 284669732,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654117751
    },
    {
        "content": "<p>Mmh, this makes me thinking that maybe <code>cyclotomic_field</code> should be just an <code>abbreviation</code> rather than a <code>def</code>, so Lean can automatically use all the instances for <code>splitting_field</code></p>",
        "id": 284669799,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654117785
    },
    {
        "content": "<p>I will see after <a href=\"https://github.com/leanprover-community/mathlib/pull/14463\">#14463</a> gets merged</p>",
        "id": 284669860,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654117805
    },
    {
        "content": "<p>Can't we just @derive it?</p>",
        "id": 284674339,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1654120359
    },
    {
        "content": "<p>Sure, but we have to do it for all the instance <code>splitting_field</code> has, right?</p>",
        "id": 284709578,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654155182
    }
]