[
    {
        "content": "<p>One way to define this relation is using an inductive proposition (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> section 7.3). You can take a look at how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.sigma.sigma_hom\">docs#category_theory.sigma.sigma_hom</a> is defined, which is very similar.</p>",
        "id": 264366938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639084323
    },
    {
        "content": "<p>Defining an inductive proposition would be nicer, but you can also do this directly by using <code>subst</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ds_union_broke</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n    <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">adj</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"o\">[(</span><span class=\"n\">G</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">adj_comm</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(I used <code>simp!</code> to get <code>simp</code> to unfold the sub-definition that the lambda pattern matching creates.)</p>",
        "id": 264369734,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639085637
    },
    {
        "content": "<p>Or a version without that pattern matching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ds_union_broke</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">_</span> <span class=\"k\">else</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n      <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">adj</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">G</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">adj_comm</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264369979,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639085758
    },
    {
        "content": "<p>BTW, your <code>worthless_coe</code> is basically <code>eq.rec</code>.</p>",
        "id": 264370064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639085792
    },
    {
        "content": "<p>Thank you, I've gotten the inductive version working and the definition all proved, but I think I'm going to look into how Kyles version works as well.</p>",
        "id": 264372335,
        "sender_full_name": "Sigma",
        "timestamp": 1639086857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436145\">Sigma</span> has marked this topic as resolved.</p>",
        "id": 264372646,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639087031
    },
    {
        "content": "<p>(<code>subst</code> is the tactic version of <code>worthless_coe</code>)</p>\n<p>It occurred to me that I didn't need to include <code>decidable_eq</code>. I forgot <code>exists</code> is a sort of proposition version of that <code>if</code> (a dependent \"and\").</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ds_union_broke</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">adj</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">G</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">adj_comm</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264373253,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639087293
    },
    {
        "content": "<p><code>subst</code> is significantly more powerful than <code>worthless_coe</code> :)</p>",
        "id": 264373610,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639087395
    },
    {
        "content": "<p>Maybe worth mentioning that <code>∃ (h : p), q h</code> is a logically equivalent but less clunky way to write <code>p ∧ (p → q h)</code> (which is relying on a implicit binder <code>h : p</code>)</p>",
        "id": 264373900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639087511
    },
    {
        "content": "<p>or wait, now I'm not even sure what was going on in the original code</p>",
        "id": 264373964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639087536
    },
    {
        "content": "<p>aha right, the implicit binder is actually <img alt=\":ahat:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/19435.png\" title=\"ahat\"></p>",
        "id": 264374011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639087561
    },
    {
        "content": "<p>sorry for my naming conventions, or lack thereof</p>",
        "id": 264374107,
        "sender_full_name": "Sigma",
        "timestamp": 1639087593
    }
]