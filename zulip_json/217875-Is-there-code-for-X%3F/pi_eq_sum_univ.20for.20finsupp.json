[
    {
        "content": "<p>Is there any equivalent to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_eq_sum_univ\">docs#pi_eq_sum_univ</a> but for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a>? I guess it could be called <code>finsupp.eq_sum_smul_single</code>, or similar.</p>",
        "id": 254855076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632590146
    },
    {
        "content": "<p>I'd expect the statement to not include a smul</p>",
        "id": 254855895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632590876
    },
    {
        "content": "<p>Something like <code> ∑ x in f.support, single x (f x) = f</code> is the statement I'd expect</p>",
        "id": 254856095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632591029
    },
    {
        "content": "<p>Interesting...</p>",
        "id": 254856384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632591281
    },
    {
        "content": "<p>While I'm there, do we not have an equivalent of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.single_le_sum\">docs#finset.single_le_sum</a>, and instances <code>pseudo_metric_space (ι →₀ ℝ)</code>, <code>topological_space (ι →₀ ℝ)</code> and similar?</p>",
        "id": 254856434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632591335
    },
    {
        "content": "<p>Are those even sensemaking? In my mind, <code>ι →₀ α</code> behaves basically like <code>ι → α</code>. But maybe I'm topologically wrong.</p>",
        "id": 254856539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632591406
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum_single\">docs#finsupp.sum_single</a> is the statement</p>",
        "id": 254861426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632595876
    },
    {
        "content": "<p>Which is defeq to the version I gave above</p>",
        "id": 254861454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632595910
    },
    {
        "content": "<p>Thanks! This is the lemma I wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finsupp.linear_combi_single_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">finsupp.single</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp.smul_single</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f.sum_single</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254867305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632601001
    },
    {
        "content": "<p>Name suggestions are welcome.</p>",
        "id": 254867422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632601121
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254867638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632601331
    },
    {
        "content": "<p>Is there anything special about <code>finsupp.single a 1</code> that makes that useful?</p>",
        "id": 254867675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632601375
    },
    {
        "content": "<p>Yes, it matches <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.center_mass_eq_of_sum_1\">docs#finset.center_mass_eq_of_sum_1</a></p>",
        "id": 254867763,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632601458
    },
    {
        "content": "<p>Also I think you should have <code>b</code> instead of <code>f a</code> there</p>",
        "id": 254867769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632601466
    },
    {
        "content": "<p>Because the whole point in <code>finsupp.sum f g</code> is that <code>g</code> gets called as <code>g a (f a)</code></p>",
        "id": 254867785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632601487
    },
    {
        "content": "<p>Hmm... What's that point, actually?</p>",
        "id": 254867819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632601528
    },
    {
        "content": "<p>Note that I'm redefining <a href=\"https://leanprover-community.github.io/mathlib_docs/find/std_simplex\">docs#std_simplex</a> in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a> and that I use this lemma at the interface with the non-<code>finsupp</code> land of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.center_mass\">docs#finset.center_mass</a>. Eventually, <code>finset.center_mass</code> will take in finsupps and maybe that weirdness will disappear?</p>",
        "id": 254868026,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632601750
    },
    {
        "content": "<p>The branch is <a href=\"https://github.com/leanprover-community/mathlib/tree/std_simplex_finsupp\">branch#std_simplex_finsupp</a>. This will be of interest to <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>.</p>",
        "id": 254868060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632601795
    },
    {
        "content": "<p>(I feel like I'm hitting a wall of bricks, so help is more than welcome!)</p>",
        "id": 254868134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632601834
    },
    {
        "content": "<p>I think that Eric is suggesting that you lemma should prove <code>f.sum (λ a b, b • finsupp.single a (1 : M)) = f</code> (note the <code>b</code> instead of <code>f a</code>) since <code>f.sum g</code> is the sum over <code>a</code> of <code>g a (f a)</code>.</p>",
        "id": 254868312,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632602026
    },
    {
        "content": "<p>Yes yes, I got that and I changed it. What I do not get is why we have <code>g a (f a)</code> in the first place, and not just <code>g a</code>.</p>",
        "id": 254868501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632602193
    },
    {
        "content": "<p>Ah, is it because we have many lemmas that assume <code>h a 0 = 0</code>, or similar?</p>",
        "id": 254868532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632602252
    },
    {
        "content": "<p>you are looking for something that uses only the support of <code>f</code> and not its values then? You want to sum <code>g</code> over the support of <code>f</code></p>",
        "id": 254868601,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632602289
    },
    {
        "content": "<p>with only <code>g a</code> and not <code>g a (f a)</code> it sounds more like a finset affair than finsupp</p>",
        "id": 254868647,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632602341
    },
    {
        "content": "<p>Well, I can ad hoc define <code>g' := λ a, g a (f a)</code>. That's using the values of <code>f</code>.</p>",
        "id": 254868659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632602355
    },
    {
        "content": "<p>indeed, as you did in the code above. That's right.</p>",
        "id": 254868696,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632602393
    },
    {
        "content": "<p>I am not very familiar with finsupp, so I don't have much to add to that :)</p>",
        "id": 254868763,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632602422
    },
    {
        "content": "<p>the lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum_add_index\">docs#finsupp.sum_add_index</a> looks like a good reason for wanting the <code>g a b</code> version (for some applications)</p>",
        "id": 254869438,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632603059
    }
]