[
    {
        "content": "<p>Does something like this exist anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">commute.mul_self_sub_mul_self_eq</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">h.eq</span><span class=\"o\">],</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">commute.mul_self_sub_mul_self_eq'</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">h.eq</span><span class=\"o\">],</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273518534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646066851
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_self_sub_mul_self\">docs#mul_self_sub_mul_self</a> exists but requires commutativity</p>",
        "id": 273518578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646066874
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12366\">#12366</a></p>",
        "id": 273623097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646132605
    },
    {
        "content": "<p>Does it make sense to flip these, and call them <code>commute.add_mul_sub_eq</code> and <code>commute.sub_mul_add_eq</code>?</p>",
        "id": 273623428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646132743
    },
    {
        "content": "<p>I was certainly tempted to do that</p>",
        "id": 273627112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646134655
    },
    {
        "content": "<p>Although arguably <code>add_mul_sub</code> is more ambiguous than <code>mul_self_sub_mul_self</code></p>",
        "id": 273627142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646134675
    },
    {
        "content": "<p>I figured that whoever added the lemma in the first place probably thought of that name too, and since I didn't feel that strongly I'd just leave it unchanged.</p>",
        "id": 273629716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646136269
    }
]