[
    {
        "content": "<p>Does mathlib have one and/or both of the following facts?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_nhds_Lim</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F.1</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">Lim</span> <span class=\"n\">F.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Lim_eq_iff_le_nhds</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lim</span> <span class=\"n\">F.1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">F.1</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212734693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602183524
    },
    {
        "content": "<p>I have a (currently very messy) proof of the equivalence between compact Hausdorff spaces and the category of algebras for the ultrafilter monad. These would help cleaning it up a bit.</p>\n<p>In case anyone is interested: <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/ca24ce9856e8d2b4e2d6148f1030cda171c8ba49/src/topology/category/Compactum.lean#L578\">https://github.com/leanprover-community/mathlib/blob/ca24ce9856e8d2b4e2d6148f1030cda171c8ba49/src/topology/category/Compactum.lean#L578</a></p>",
        "id": 212735266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602183801
    },
    {
        "content": "<p>It seems that the answer is \"no\" but we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/compact_iff_ultrafilter_le_nhds\">docs#compact_iff_ultrafilter_le_nhds</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lim_spec\">docs#Lim_spec</a></p>",
        "id": 212747611,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602190369
    },
    {
        "content": "<p>The second one follows from the first one and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lim_eq\">docs#Lim_eq</a>.<br>\nBTW,</p>\n<ul>\n<li>have a look at the trick I used in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lim_spec\">docs#Lim_spec</a> to avoid a <code>[nonempty]</code> assumption;</li>\n<li>could you please<ul>\n<li>rename <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lim_spec\">docs#Lim_spec</a> to <code>le_nhds_Lim</code> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lim_spec\">docs#lim_spec</a> to <code>tendsto_nhds_lim</code>;</li>\n<li>add <code>Lim_eq_iff (h : ∃ a, Lim f ≤ nhds a) {a} : Lim f = a ↔ F ≤ nhds a</code> and <code>lim_eq_iff (h : ∃ a, tendsto g f (nhds a)) {a} : lim f g = a ↔ tendsto g f a</code>?</li>\n</ul>\n</li>\n</ul>",
        "id": 212748220,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602190744
    },
    {
        "content": "<p>Right, I've seen <a href=\"https://leanprover-community.github.io/mathlib_docs/find/compact_iff_ultrafilter_le_nhds\">docs#compact_iff_ultrafilter_le_nhds</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lim_spec\">docs#Lim_spec</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lim_eq\">docs#Lim_eq</a> (they're actually used in the linked file above, but I'm still working on cleaning it up). I'm not sure what you mean about the nonempty assumption. It's a little subtle, since one has to use the fact that <code>X</code> is empty if and only if <code>ultrafilter X</code> is empty.</p>",
        "id": 212748886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191074
    },
    {
        "content": "<p>I opened issue <a href=\"https://github.com/leanprover-community/mathlib/issues/4543\">#4543</a>.</p>",
        "id": 212749080,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191167
    },
    {
        "content": "<p>If you'll try to prove this (do <code>cases</code> on <code>compact_iff_ultrafilter_le_nhds</code>, then use <code>Lim_spec</code>), then the only place where you'll need <code>nonempty</code> is the implicit argument of <code>Lim</code>.</p>",
        "id": 212749263,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191265
    },
    {
        "content": "<p>Ah, I see. That's not a problem for the second lemma (you can supply <code>⟨x⟩</code> as <code>[nonempty α]</code>)</p>",
        "id": 212749466,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191357
    },
    {
        "content": "<p>And same for the first one, since you have an ultrafilter.</p>",
        "id": 212749600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191405
    },
    {
        "content": "<p>The branch above also proves this<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/ca24ce9856e8d2b4e2d6148f1030cda171c8ba49/src/order/filter/ultrafilter.lean#L267\">https://github.com/leanprover-community/mathlib/blob/ca24ce9856e8d2b4e2d6148f1030cda171c8ba49/src/order/filter/ultrafilter.lean#L267</a><br>\nwhich gives a <code>nonempty X</code> from <code>nonempty (ultrafilter X)</code>.</p>",
        "id": 212749781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191468
    },
    {
        "content": "<p>For the first one you can supply <code>nonempty_of_ne_bot F.1</code></p>",
        "id": 212749789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191470
    },
    {
        "content": "<p>That's for sets.</p>",
        "id": 212749840,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191495
    },
    {
        "content": "<p>I think.</p>",
        "id": 212749859,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191506
    },
    {
        "content": "<p>AFAIR, we have an instance <code>{F : ultrafilter α} [ne_bot (F.1)]</code></p>",
        "id": 212749863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191510
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.nonempty_of_ne_bot\">docs#filter.nonempty_of_ne_bot</a></p>",
        "id": 212749881,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191517
    },
    {
        "content": "<p>We don't have this instance!</p>",
        "id": 212749986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191558
    },
    {
        "content": "<p>Oops!</p>",
        "id": 212750007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191568
    },
    {
        "content": "<p>Just add it: <code>instance {F : ultrafilter α} : ne_bot F.1 := F.2</code></p>",
        "id": 212750105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191627
    },
    {
        "content": "<p>I guess our <code>is_ultrafilter</code> API is much better.</p>",
        "id": 212750178,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191647
    },
    {
        "content": "<p>If you have time, you may want to migrate <code>mathlib</code> to bundled ultrafilters.</p>",
        "id": 212750236,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191678
    },
    {
        "content": "<p>I never have time.</p>",
        "id": 212750311,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191741
    },
    {
        "content": "<p>But I'll try to find some nonexistent time to take care of that issue.</p>",
        "id": 212750329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191758
    },
    {
        "content": "<p>Probably with definition like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ultrafilter</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_filter</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ne_bot'</span> <span class=\"o\">:</span> <span class=\"n\">ne_bot</span> <span class=\"n\">to_filter</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_of_le'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ne_bot</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">to_filter</span> <span class=\"bp\">→</span> <span class=\"n\">to_filter</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212750418,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191794
    },
    {
        "content": "<p>If you do this, then lemmas assuming <code>is_ultrafilter</code> in <code>order/filter/filter_product</code> can become instances.</p>",
        "id": 212750504,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602191845
    },
    {
        "content": "<p>Why not keep <code>ultrafilter</code> as is, and just restate the lemmas.</p>",
        "id": 212750507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602191848
    },
    {
        "content": "<p>I don't think that it makes sense to have both <code>is_ultrafilter</code> and <code>ultrafilter</code>.</p>",
        "id": 212752714,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602193251
    },
    {
        "content": "<p>If you have an ultrafilter, then most probably (unless it's <code>pure a</code>) it is defined using <code>classical.some</code>, and being an ultrafilter is its main property.</p>",
        "id": 212752802,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602193316
    },
    {
        "content": "<p>And if you leave only <code>ultrafilter</code>, then using a <code>structure</code> makes it possible to use <code>{ to_filter := ..., ne_bot := ..., le_of_le := ... }</code> in a constructor instead of just <code>subtype.mk</code>.</p>",
        "id": 212752950,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602193412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/lim_spec_cleanup\">https://github.com/leanprover-community/mathlib/compare/lim_spec_cleanup</a></p>\n<p>I'll wait for github's checks to finish before opening a PR. Is this what you had in mind?</p>",
        "id": 212755212,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602194911
    },
    {
        "content": "<p>You can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_ultrafilter.le_nhds_Lim</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.1</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Lim</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">F.1.nonempty_of_ne_bot</span> <span class=\"n\">F.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">compact_iff_ultrafilter_le_nhds.mp</span> <span class=\"n\">compact_univ</span> <span class=\"n\">F.1</span> <span class=\"n\">F.2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_nhds_Lim</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212755596,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602195173
    },
    {
        "content": "<p><code>unknown identifier 'is_compact_univ'</code><br>\nAm I missing an import?</p>",
        "id": 212755800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602195311
    },
    {
        "content": "<p>It's <code>compact_univ</code></p>",
        "id": 212756112,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602195529
    },
    {
        "content": "<p>Sorry, I made lots of typos. Hopefully, fixed.</p>",
        "id": 212756166,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602195571
    },
    {
        "content": "<p>No worries. Found it now.</p>",
        "id": 212756255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602195616
    },
    {
        "content": "<p>Pushed the change just now.</p>",
        "id": 212756347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602195683
    },
    {
        "content": "<p>I'll still wait for the checks to pass, just to make sure the renaming didn't cause any issues I didn't notice.</p>",
        "id": 212756380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602195718
    },
    {
        "content": "<p>You can already open a PR. It won't get merged till it passes CI anyway.</p>",
        "id": 212757136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602196206
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4545\">#4545</a></p>",
        "id": 212758540,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602197346
    }
]