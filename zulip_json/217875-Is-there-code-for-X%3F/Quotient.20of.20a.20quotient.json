[
    {
        "content": "<p>I would like to show that the <code>quotient</code> of a <code>quotient</code> of <code>V : Type</code> can be written as a <code>quotient</code> of <code>V</code>, and although I manage to prove something in this direction, the proof I am getting is extremely awkward (see <code>left_inv</code> and <code>right_inv</code> below). Would what I am looking for already be somewhere in mathlib? If not, what would be the \"right\" way to write this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.function</span> <span class=\"n\">data.quot</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">classical</span> <span class=\"n\">quotient</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n        <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s''</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s''</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">quotient</span> <span class=\"n\">s'</span><span class=\"o\">),</span> <span class=\"n\">bijective</span> <span class=\"n\">φ</span>\n\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">h</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">s'</span> <span class=\"k\">with</span> <span class=\"n\">r'</span> <span class=\"n\">h</span><span class=\"bp\">ᵣ'</span><span class=\"o\">,</span>\n\n        <span class=\"k\">let</span> <span class=\"n\">r''</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">eqv</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">r''</span>\n            <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">ᵣ'.</span><span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">ᵣ'.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">ᵣ'.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">eqv_r'</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">r'</span> <span class=\"bp\">=</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"n\">equivalence.eqv_gen_eq</span> <span class=\"n\">h</span><span class=\"bp\">ᵣ'</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">eqv_r''</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">r''</span> <span class=\"bp\">=</span> <span class=\"n\">r''</span> <span class=\"o\">:=</span> <span class=\"n\">equivalence.eqv_gen_eq</span> <span class=\"n\">eqv</span><span class=\"o\">,</span>\n\n        <span class=\"k\">let</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">xx</span><span class=\"o\">,</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">quot.out</span> <span class=\"n\">xx</span><span class=\"o\">)),</span>\n        <span class=\"k\">let</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">xx</span><span class=\"o\">,</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r''</span> <span class=\"o\">(</span><span class=\"n\">quot.out</span> <span class=\"o\">(</span><span class=\"n\">quot.out</span> <span class=\"n\">xx</span><span class=\"o\">)),</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n            <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">,</span><span class=\"n\">ψ</span><span class=\"o\">],</span>\n            <span class=\"n\">refine</span> <span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">quot.out_eq</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n            <span class=\"n\">apply</span> <span class=\"n\">quot.eq.mpr</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">eqv_r''</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r''</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">eqv_r'</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">quot.eq.mp</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eqv_r'</span><span class=\"o\">,</span><span class=\"n\">quot.out_eq</span><span class=\"o\">,</span><span class=\"n\">quot.out_eq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">right_inverse</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n            <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">,</span><span class=\"n\">ψ</span><span class=\"o\">],</span>\n            <span class=\"k\">have</span> <span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">r''</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">quot.out_eq</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">quot.out_eq</span> <span class=\"n\">x.out</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">h2</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">quot.eq.mpr</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">eqv_r'</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">eqv_r''</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">quot.eq.mp</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eqv_r''</span><span class=\"o\">,</span><span class=\"n\">quot.out_eq</span><span class=\"o\">,</span><span class=\"n\">quot.out_eq</span><span class=\"o\">,</span><span class=\"n\">quot.out_eq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">φ</span>\n            <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">left_inverse.injective</span> <span class=\"n\">left_inv</span><span class=\"o\">,</span> <span class=\"n\">right_inverse.surjective</span> <span class=\"n\">right_inv</span><span class=\"o\">⟩,</span>\n\n        <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">r''</span><span class=\"o\">,</span><span class=\"n\">eqv</span><span class=\"o\">⟩,</span><span class=\"n\">φ</span><span class=\"o\">,</span><span class=\"n\">this</span><span class=\"o\">⟩</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267800040,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642028884
    },
    {
        "content": "<p>I feel like you should be able to prove this quicker in terms of composition of surjective functions.</p>",
        "id": 267800631,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1642029190
    },
    {
        "content": "<p>Or you could come up with the relation for the associated setoid directly.</p>",
        "id": 267800880,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642029316
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.function</span> <span class=\"n\">data.quot</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">classical</span> <span class=\"n\">quotient</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">setoid.compose</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">setoid</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">setoid.r</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">quotient.eq'</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">quotient.eq'</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h.symm</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">quotient.eq'</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">setoid.quotient_compose_equiv</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">s.compose</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">quotient.mk'</span> <span class=\"bp\">$</span> <span class=\"n\">quotient.mk'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">quotient.mk'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267801826,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642029771
    },
    {
        "content": "<p>I would be surprised if we don't already have something similar.</p>",
        "id": 267801867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642029786
    },
    {
        "content": "<p>The relation itself is clear enough (<code>λ x y, r' (quot.mk r x) (quot.mk r y)</code>), it's the proofs of <code>left_inv</code> and <code>right_inv</code> that I have trouble with. I will try your suggestion :-)</p>",
        "id": 267802356,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642030054
    },
    {
        "content": "<p>Here's a slightly different way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s''</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s''</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s'</span><span class=\"o\">),</span> <span class=\"n\">bijective</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">setoid.quotient_ker_equiv_of_surjective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">surjective_quotient_mk</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">surjective_quotient_mk</span> <span class=\"n\">V</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">setoid.ker</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.bijective</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267802370,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1642030060
    },
    {
        "content": "<p>What I'm mostly saying is that it doesn't make sense to have an existential statement, when you can construct the relation itself, and obtain a useful bijection between the quotients, not just the fact that some random bijection exists.</p>",
        "id": 267802558,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642030156
    },
    {
        "content": "<p>(my definition of <code>setoid.compose</code> should be a <code>def</code> not a <code>lemma</code>)</p>",
        "id": 267803022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642030434
    },
    {
        "content": "<p>Mixing the two:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">setoid.comp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n        <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span>\n    <span class=\"k\">in</span> <span class=\"n\">setoid.ker</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">setoid.comp.iso</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">setoid.comp</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n        <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span>\n    <span class=\"k\">in</span> <span class=\"n\">setoid.quotient_ker_equiv_of_surjective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n        <span class=\"o\">((</span><span class=\"n\">surjective_quotient_mk</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">surjective_quotient_mk</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">setoid.comp.iso'</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">setoid.comp</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">gof</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span> <span class=\"bp\">∘</span> <span class=\"n\">quotient.mk</span>\n    <span class=\"k\">in</span> <span class=\"n\">setoid.quotient_ker_equiv_of_surjective</span> <span class=\"n\">gof</span>\n        <span class=\"o\">((</span><span class=\"n\">surjective_quotient_mk</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">surjective_quotient_mk</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 267805123,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642031702
    },
    {
        "content": "<p>You can make everything computable if you don't use <code>setoid.ker_equiv_of_surjective</code></p>",
        "id": 267805289,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642031801
    },
    {
        "content": "<p>Is <code>compose</code> just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.comap\">docs#setoid.comap</a> <a href=\"http://quotient.mk\">quotient.mk</a>?</p>",
        "id": 267806044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642032175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> yes, that's right</p>",
        "id": 267806159,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642032239
    },
    {
        "content": "<p>Hi again, so I managed to make a computable version like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.setoid.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">setoid.comp</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n    <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span>\n<span class=\"k\">in</span> <span class=\"n\">setoid.ker</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">setoid.comp.iso</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">s.comp</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk'</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">s.comp</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk'</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">s.rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.eq'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">t.rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.eq'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"o\">(</span><span class=\"n\">s.comp</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.eq'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p₄</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">s.comp</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">setoid.ker_def</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p₅</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">s.rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p₃</span><span class=\"o\">,</span><span class=\"n\">p₄</span><span class=\"o\">,</span><span class=\"bp\">&lt;-</span><span class=\"n\">p₁</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">s.comp</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y.lift_on'</span> <span class=\"n\">h</span> <span class=\"n\">p₅</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">p₆</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">t.rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ζ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">ζ</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">refine</span> <span class=\"n\">a.induction_on'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">refine</span> <span class=\"n\">b.induction_on'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">p₂</span><span class=\"o\">],</span> <span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p₃</span><span class=\"o\">,</span><span class=\"n\">p₄</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"n\">exact</span> <span class=\"o\">{</span>\n        <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.lift_on'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">),</span>\n        <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y.lift_on'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y.lift_on'</span> <span class=\"n\">h</span> <span class=\"n\">p₅</span><span class=\"o\">)</span> <span class=\"n\">p₆</span><span class=\"o\">,</span>\n        <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on'</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n        <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on'</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on'</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)),</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>It kind of works but there are too many <code>quotient.eq'</code>s and <code>quotient.mk'</code>s for my taste. Am I missing something?</p>",
        "id": 269417566,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643206562
    }
]