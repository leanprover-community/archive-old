[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.functor_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.types</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_colimits</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- Do we have this somewhere?</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- Do we have this somewhere?</span>\n</code></pre></div>",
        "id": 219105596,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607360043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 219107846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607360981
    },
    {
        "content": "<p>It's definitely somewhere</p>",
        "id": 219108125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607361116
    },
    {
        "content": "<p>for diagrams in any (co)complete category</p>",
        "id": 219108181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607361131
    },
    {
        "content": "<p>Yeah, that's what I was expecting too, which is why the <code>import category_theory.limits.types</code> import is there</p>",
        "id": 219108229,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607361157
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.functor_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.functor_category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_colimits</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 219108368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607361242
    },
    {
        "content": "<p>Got it!</p>",
        "id": 219108411,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607361244
    },
    {
        "content": "<p><code>import category_theory.limits.functor_category</code> was missing.</p>",
        "id": 219108434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607361255
    },
    {
        "content": "<p>I don't presume the universal property of presheaves as being the free cocompletion is in mathlib?</p>",
        "id": 219108611,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607361336
    },
    {
        "content": "<p>Yup as Reid says this is in mathlib</p>",
        "id": 219109210,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607361600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> It is, look in <code>ct/limits/presheaf</code> iirc</p>",
        "id": 219109268,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607361608
    },
    {
        "content": "<p>For a little context.... I'd like to define <code>Ind C</code> as the subcategory of <code>Cᵒᵖ ⥤ Type</code> generated by filtered colimits of representables. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Any thoughts on whether this is a good idea?</p>",
        "id": 219109989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607361953
    },
    {
        "content": "<p>My instinct is that this might get awkward but I don't know for sure, and off the top of my head I don't have better suggestions. You probably want to use <code>is_limit</code> rather than isomorphisms with <code>limit</code> though if you do go about it this way</p>",
        "id": 219110428,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607362148
    }
]