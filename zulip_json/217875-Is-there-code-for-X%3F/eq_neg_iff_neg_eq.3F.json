[
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_neg_iff_eq_neg\">docs#eq_neg_iff_eq_neg</a> (<code>a = -b ↔ b = -a</code>) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/neg_eq_iff_neg_eq\">docs#neg_eq_iff_neg_eq</a> (<code>-a = b ↔ -b = a</code>), but I can't seem to find a statement that says <code>a = -b ↔ -a = b</code>. In fact, <code>library_search</code> on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>comes up with <code>neg_eq_iff_neg_eq.mp (eq.symm h)</code>, which seems to indicate that something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_neg_iff_neg_eq\">docs#eq_neg_iff_neg_eq</a> does not exist.<br>\nI find this a bit annoying when rewriting equalities (<code>eq.symm</code> is not an <code>iff</code> statement, so cannot be used for rewriting).</p>\n<p>Is there a reason that this is missing (or am I just to stupid to find it)?</p>",
        "id": 309195127,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668174237
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_comm\">docs#eq_comm</a> for rewriting</p>",
        "id": 309195263,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668174287
    },
    {
        "content": "<p>This one has bitten me too; i feel like we shouldn't have eq_neg_iff_eq_neg  and should have eq_neg_iff_neg_eq instead</p>",
        "id": 309199544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668175833
    },
    {
        "content": "<p>I don't think it hurts to have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_neg_iff_eq_neg\">docs#eq_neg_iff_eq_neg</a>, but I do think it hurts to not have eq_neg_iff_neg_eq.</p>",
        "id": 309199931,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668175977
    },
    {
        "content": "<p>Unfortunately, <code>algebra.group.basic</code> has already been ported to mathlib4, so adding it there would require making the corresponding change in mathlib4, which I'm not yet able to do (I have to learn lean 4 first...). Otherwise I'd submit a PR.</p>",
        "id": 309200395,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668176118
    },
    {
        "content": "<p>You may as well submit the PR anyway, but put a warning on it noting that it needs an upstream port</p>",
        "id": 309200573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668176176
    },
    {
        "content": "<p>Then either someone else can help you with that, or do it for you</p>",
        "id": 309200601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668176193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/eq_neg_iff_neg_eq.3F/near/309195263\">said</a>:</p>\n<blockquote>\n<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_comm\">docs#eq_comm</a> for rewriting</p>\n</blockquote>\n<p>OK, thanks for the reminder -- I tend to forget that there is <code>symm</code> <em>and</em> <code>comm</code> here...</p>",
        "id": 309202655,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668176888
    },
    {
        "content": "<p><code>eq_comm</code> is also annoying because you often have to use it as <code>@eq_comm _ a</code></p>",
        "id": 309202712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668176915
    },
    {
        "content": "<p>Looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_comm\">docs#eq_comm</a> and around, I notice</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">eq_comm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n <span class=\"kd\">theorem</span> <span class=\"n\">and.comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span>\n <span class=\"kd\">theorem</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>which does not look terribly consistent...</p>",
        "id": 309203065,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668177022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/eq_neg_iff_neg_eq.3F/near/309200601\">said</a>:</p>\n<blockquote>\n<p>Then either someone else can help you with that, or do it for you</p>\n</blockquote>\n<p>If I'd want to find out how to do that, where would I look? (On the main \"Lean community\" page there seem to be no links referring to lean4 or mathlib4.)</p>",
        "id": 309205615,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668177886
    },
    {
        "content": "<p>Honestly, Lean 4 is pretty much the same as Lean 3, and if it's just one lemma then for someone like me who has taken the plunge and ported a couple of Lean 4 files it will hopefully be pretty easy to create the Lean 4 PR. If you make the PR and somehow tag it \"waiting for Lean 4 PR\" then this might be a way to proceed.</p>\n<p>I learnt at the porting meeting yesterday that there's even a program you can run your Lean 3 lemma through and it will quickly give you hopefully working Lean 4 code. Before you could only really run this program on e.g. all of mathlib, but now you can run it \"oneshot\" on just one file.</p>",
        "id": 309206800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668178294
    },
    {
        "content": "<p>What is the analogue of <code>leanproject get -b mathlib:blah</code> for mathlib4 (plus everything one has to do beforehand if one hasn't touched lean4 yet)?</p>",
        "id": 309208346,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668178776
    },
    {
        "content": "<p>There is no <code>leanproject</code> for Lean 4 yet, but something like the following should be sufficient to get Lean 4 up and running.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">self</span> <span class=\"n\">update</span>\n<span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">mathlib4</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"n\">blah</span>\n</code></pre></div>",
        "id": 309209685,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668179203
    },
    {
        "content": "<p>See also the build instructions here: <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a></p>",
        "id": 309209989,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668179303
    },
    {
        "content": "<p>OK, thanks! I'll try it out if I have time over the weekend...</p>",
        "id": 309211244,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668179700
    },
    {
        "content": "<p>In any case, looking at the file in both versions near the relevant place, it looks identical except for spacing and replacing <code>$</code> by <code>&lt;|</code>, so I assume it would not be a big deal to make the corresponding change in the mathlib4 file.<br>\nI assume this woul be two distinct PRs, one for mathlib3 and one four mathlib4?<br>\nCan I submit PRs for mathlib4 if I can do it for mathlib3, or do I need separate access?</p>",
        "id": 309214578,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668180779
    },
    {
        "content": "<p>I'm not sure if you're given automatic access if you have push access to mathlib...</p>",
        "id": 309216588,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668181440
    },
    {
        "content": "<p>Pretty sure access isn't automatic</p>",
        "id": 309220209,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668182564
    },
    {
        "content": "<p>I was looking in the wrong place. <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, I have invited you to mathlib4.</p>",
        "id": 309223860,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668183832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thanks!</p>",
        "id": 309223941,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668183854
    },
    {
        "content": "<p>I've now made the mathlib3 PR:  <a href=\"https://github.com/leanprover-community/mathlib/pull/17483\">#17483</a><br>\nIf somebody wants to do it for mathlib4, please go ahead! Otherwise, I'll try to have a go at it later.<br>\nBTW, is there a mechanism for synchronizing PRs between mathlib3 and mathlib4?</p>",
        "id": 309244928,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668192361
    },
    {
        "content": "<p>No mechanism beyond putting links in both directions.</p>",
        "id": 309267198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668204884
    }
]