[
    {
        "content": "<p>Do we have the following: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">quot_triv</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">quotient_group.quotient</span> <span class=\"n\">H</span> <span class=\"bp\">≃</span> <span class=\"n\">quotient_group.quotient</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can prove it, but before trying PR it I thought I'd check I wasn't hidden somewhere as<br>\n it feels like something we must have somewhere.</p>",
        "id": 252199570,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1630946939
    },
    {
        "content": "<p>I think the thing to prove is <code>subsingleton (quotient_group.quotient H) -&gt; H = top</code></p>",
        "id": 252199980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630947176
    },
    {
        "content": "<p>In any case, I think it would be better to assume an isomorphism with <code>punit</code> as opposed to the quotient of G by G</p>",
        "id": 252200188,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630947288
    },
    {
        "content": "<p>Presumably we already know that G/G is isomorphic to punit</p>",
        "id": 252200213,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630947310
    },
    {
        "content": "<p>Oh, yeah, Kevin's suggestion is indeed the way to go</p>",
        "id": 252200285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630947350
    },
    {
        "content": "<p>But then one would have to transfer a subsingleton instance from punit. Can <code>transport_instance</code> handle <code>subsingleton</code>?</p>",
        "id": 252200406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630947416
    },
    {
        "content": "<p>Well in the proof I did, I was using <code>trunc</code>. I started by showing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">triv_rel</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rel_triv</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">≃</span> <span class=\"n\">trunc</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">triv_rel</span> <span class=\"n\">α</span> <span class=\"o\">:=</span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and built up from here. Is there a reason to use one of <code>subsingleton </code>, <code>trunc </code>,<code>punit</code> over the others?</p>",
        "id": 252200556,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1630947495
    },
    {
        "content": "<p>Kevin's suggestion says that whenever G/H has at most one element, one has H=G. If you have some subgroup for which you have an equivalence between G/H and punit, you would then need to transport a subsingleton instance to G/H to be able to use such a lemma.</p>",
        "id": 252200974,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630947720
    },
    {
        "content": "<p>It depends on how you intend to use this lemma</p>",
        "id": 252201031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630947734
    },
    {
        "content": "<p>Sure I guess Kevin's suggestion is the most natural. The reason it came up was I was proving some subgroup is equal to top, so using the version I wrote reduced me to checking some quotient which I already knew was trivial.</p>",
        "id": 252202950,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1630948792
    },
    {
        "content": "<p>In any case, I guess this isn't already somewhere.</p>",
        "id": 252203105,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1630948859
    },
    {
        "content": "<p>OK so I've made a draft PR for this here <a href=\"https://github.com/leanprover-community/mathlib/issues/9092\">#9092</a>,  the main result is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">quot_subsingleton_triv</span>  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Any comments on things to improve are very welcome.  Specially the names of some of these lemmas.</p>",
        "id": 252605520,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631184728
    }
]