[
    {
        "content": "<p>Is there code for a tactic which proves that some proof does or doesn’t use all of its assumptions?</p>\n<p>For example, imagine someone writes a proof for a group that happens to not use the inverse assumption. Is there a way to automatically detect this so that a flag could be raised that the inverse assumption wasn’t used and therefore that proof is equally valid for a monoid?</p>\n<p>In terms of what it means to <em>use</em> an assumption, it seems that tactics like <code>by</code> and <code>show from</code> are sufficient. Not sure what’s necessary because there’s probably edge cases like pmi</p>",
        "id": 292346481,
        "sender_full_name": "Edwin Agnew",
        "timestamp": 1659913507
    },
    {
        "content": "<p>The linter does check if there are unused arguments</p>",
        "id": 292346503,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659913538
    },
    {
        "content": "<p>And is there a way to access this linter or does it already raise a warning? I’m new to lean sorry</p>",
        "id": 292346706,
        "sender_full_name": "Edwin Agnew",
        "timestamp": 1659913816
    },
    {
        "content": "<p>Try adding the <code>#lint</code> command below a lemma</p>",
        "id": 292346811,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659914007
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">/- The `unused_arguments` linter reports: -/</span>\n<span class=\"cm\">/- UNUSED ARGUMENTS. -/</span>\n<span class=\"cm\">#check @foo /- argument 1: (n : ℕ) -/</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 292346866,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659914060
    },
    {
        "content": "<p>wow thats perfect!  thanks :)</p>",
        "id": 292346955,
        "sender_full_name": "Edwin Agnew",
        "timestamp": 1659914189
    },
    {
        "content": "<p>That doesn't really address your original question though</p>",
        "id": 292348503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659916536
    },
    {
        "content": "<p>It won't detect that you wrote <code>[group G]</code> but only needed <code>[monoid G]</code>, as the argument is still \"used\", just not all of it</p>",
        "id": 292348548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659916570
    },
    {
        "content": "<p>Alex has a complex linter/tactic that does this search</p>",
        "id": 292348554,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659916606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>'s paper about that should be linked on the community website somewhere</p>",
        "id": 292348565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659916645
    },
    {
        "content": "<p>There's probably a talk on YouTube too</p>",
        "id": 292348578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659916664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>: \"<a href=\"https://www.youtube.com/watch?v=pudd4F749tE\">Automatically Generalizing Theorems Using Typeclasses</a>\" at Formal Mathematics for Mathematicians 2021.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"pudd4F749tE\" href=\"https://www.youtube.com/watch?v=pudd4F749tE\"><img src=\"https://uploads.zulipusercontent.net/0fe1fd40d7673fd4f243768f1c16863711cbf4a0/68747470733a2f2f692e7974696d672e636f6d2f76692f70756464344637343974452f64656661756c742e6a7067\"></a></div>",
        "id": 292369826,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659944537
    },
    {
        "content": "<p>For <a href=\"https://alexjbest.github.io/talks/auto-generalization/#/9\">example</a>, Alex's linter detects that a <code>comm_ring</code> has been used in a lemma when it would be sufficient to use a <code>comm_semiring</code>.</p>",
        "id": 292370209,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659944866
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/An.20example.20of.20why.20formalization.20is.20useful/near/278293462\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/An.20example.20of.20why.20formalization.20is.20useful/near/278293462</a> has a list of these generalisations applied to mathlib (a while ago). maybe it'd be nice to rerun it on current mathlib!</p>",
        "id": 292385176,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659955198
    },
    {
        "content": "<p>I can do it, but it took a few days last time, so we need to wait.</p>",
        "id": 292386002,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659955720
    },
    {
        "content": "<p>I can also run it again sometime and post the output if people want, I keep hoping to improve it first/or at least fix the obvious bugs, but never seem to find the time</p>",
        "id": 292386241,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659955893
    },
    {
        "content": "<p>I am running it. The last version at <a href=\"https://github.com/alexjbest/lean-generalisation\">https://github.com/alexjbest/lean-generalisation</a> seems working</p>",
        "id": 292387773,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659956971
    },
    {
        "content": "<p>How many cores? I think it still recommends euclidean domain as better than comm_ring sometimes</p>",
        "id": 292388023,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659957129
    },
    {
        "content": "<p>So while most of the output is ok still there are still somethings not to be trusted <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 292388050,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659957151
    },
    {
        "content": "<p>There are 16 cores in the computer I am using, and it is using all of them at the moment. If I remember correctly, last time at some point it switched to use only one core, after it produced the rubbish output at the beginning</p>",
        "id": 292388239,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659957303
    },
    {
        "content": "<p>The result is here</p>",
        "id": 292954473,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1660232396
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/flt-regular/blob/master/res\">https://github.com/leanprover-community/flt-regular/blob/master/res</a></p>",
        "id": 292954483,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1660232400
    },
    {
        "content": "<p>(it's in the flt project just because it was in a computer I can access using my phone and this was the easiest way to make it public)</p>",
        "id": 292954698,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1660232467
    },
    {
        "content": "<p>Feel free to create a gist or whatever</p>",
        "id": 292955089,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1660232582
    },
    {
        "content": "<p><code>ordered_comm_semiring ↝ linear_ordered_semifield</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 292958380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660233598
    },
    {
        "content": "<p>What is a <code>linear_ordered_semifield</code>?</p>",
        "id": 292959236,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1660233753
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_semifield\">docs#linear_ordered_semifield</a>. It's a linearly ordered field, but without negation. Typically, <code>nnreal</code></p>",
        "id": 292959300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660233775
    },
    {
        "content": "<p><del> and does it exist in nature?</del>  <span aria-label=\"palm tree\" class=\"emoji emoji-1f334\" role=\"img\" title=\"palm tree\">:palm_tree:</span></p>",
        "id": 292959373,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1660233802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/checking.20a.20proof.20uses.20all.20its.20assumptions/near/292958380\">said</a>:</p>\n<blockquote>\n<p><code>ordered_comm_semiring ↝ linear_ordered_semifield</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>the linter loves <code>euclidean_domain</code></p>",
        "id": 292959554,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660233854
    },
    {
        "content": "<p>And the advantage out of <code>ordered_comm_semiring</code> is that you can divide easily?</p>",
        "id": 292959608,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1660233874
    },
    {
        "content": "<p>The linter is completely wrong here. <code>linear_ordered_semifield</code> implies <code>ordered_comm_semiring</code>, so it makes no sense to \"weaken\" the latter to the former.</p>",
        "id": 292959753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660233931
    },
    {
        "content": "<p>gist: <a href=\"https://gist.github.com/ericrbg/b89109c674b3e04a8f708afa13357911\">https://gist.github.com/ericrbg/b89109c674b3e04a8f708afa13357911</a></p>",
        "id": 292960468,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660234174
    },
    {
        "content": "<p>the original version is <a href=\"https://github.com/leanprover-community/flt-regular/blob/d5053b1b3214433ef801f2f9e996a59e59924297/res\">here</a>, I've force-pushed flt-regular to keep the history clean</p>",
        "id": 292961533,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660234523
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16012\">#16012</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/16013\">#16013</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/16014\">#16014</a> for some of these (I think <a href=\"https://github.com/leanprover-community/mathlib/pull/16014\">#16014</a> will actually be very helpful!)</p>",
        "id": 292976912,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660239851
    },
    {
        "content": "<p>Wow! I didn't think division monoids would actually help further than basic files!</p>",
        "id": 292977280,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660239997
    },
    {
        "content": "<p>The linear ordered field thing is probably the same as the Euclidean domain issue mentioned above. But I still haven't had time to look into it.</p>",
        "id": 293040788,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1660275253
    },
    {
        "content": "<p>I wonder if these are broken classes because linear ordered semifield is the class that causes the olean bug</p>",
        "id": 293054867,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660287145
    },
    {
        "content": "<p>That seems unlikely to me but who knows, it could be relevant somehow. My best guess is that there something wrong with the type class graph it constructs, maybe some instance with many arguments that isn't interpreted properly</p>",
        "id": 293066317,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1660293197
    }
]