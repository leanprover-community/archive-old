[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">fintype</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Do we have this?</p>",
        "id": 206457884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597064785
    },
    {
        "content": "<p><code>fintype.of_equiv</code></p>",
        "id": 206458381,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1597065099
    },
    {
        "content": "<p>That's the function, not the equiv</p>",
        "id": 206459224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597065603
    },
    {
        "content": "<p>Do we even have ext for fintype?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">elems</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">elems</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">fintype</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">fX</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">fX</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">fY</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">fY</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">congr&#39;</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">congr&#39;</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Is this PR'able?</p>",
        "id": 206459260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597065620
    },
    {
        "content": "<p>Does it have the right name?</p>",
        "id": 206459303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597065655
    },
    {
        "content": "<p>I expect the proofs can be <code>by cc</code></p>",
        "id": 206463824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068242
    },
    {
        "content": "<p>ext for fintype is <code>subsingleton.elim</code>, you don't need <code>a.elems = b.elems</code> (and <code>instance (α : Type*) : subsingleton (fintype α)</code> is already in mathlib).</p>",
        "id": 206501394,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1597086931
    },
    {
        "content": "<p>What Joseph says. I suggest PR'ing this version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">fintype</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">fX</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">fX</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">fY</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">fY</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206503609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597088131
    },
    {
        "content": "<p>Or more generally:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">mk_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">fintype</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">mk_equiv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">fX</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">fX</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">fY</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">fY</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206504318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597088511
    },
    {
        "content": "<p>AFAIR, we already have the first equiv.</p>",
        "id": 206773070,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597283114
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/equiv/basic.html#equiv_of_subsingleton_of_subsingleton\">https://leanprover-community.github.io/mathlib_docs/data/equiv/basic.html#equiv_of_subsingleton_of_subsingleton</a></p>",
        "id": 206773151,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597283267
    },
    {
        "content": "<p>btw isn't <code>equiv_rw</code> supposed to do things like this?</p>",
        "id": 206773279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597283481
    },
    {
        "content": "<p>Yes, <code>equiv_rw</code> does this, but it needs an additional instance about <code>fintype</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">equiv_rw</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">equiv_functor_fintype</span> <span class=\"o\">:</span> <span class=\"n\">equiv_functor</span> <span class=\"n\">fintype</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_bijective</span> <span class=\"n\">e</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">bijective</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">fintype</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">equiv_rw</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>This isn't merely pushing the work around, because the <code>equiv_functor_fintype</code> instance means that <code>equiv_rw</code> can do more complicated things too, if the <code>fintype</code> is \"deeper\":</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"err\">⊕</span> <span class=\"n\">punit</span> <span class=\"err\">≃</span> <span class=\"n\">fintype</span> <span class=\"n\">Y</span> <span class=\"err\">⊕</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">equiv_rw</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206782224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597296975
    },
    {
        "content": "<p>Oh cool! Can we prove that something isomorphic to a Noetherian local ring is Noetherian local?</p>",
        "id": 206786218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597302433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fintype.2Eequiv_congr/near/206786218\">said</a>:</p>\n<blockquote>\n<p>Oh cool! Can we prove that something isomorphic to a Noetherian local ring is Noetherian local?</p>\n</blockquote>\n<p>again this is <code>transfer</code> territory right</p>",
        "id": 206786910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597303197
    },
    {
        "content": "<p>Why isn't it an equiv_rw on <code>is_local</code>?</p>",
        "id": 206787016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597303301
    },
    {
        "content": "<p>Because the current version of <code>equiv_rw</code> only knows about <code>equiv</code>. It can't cope with \"extra\" information, e.g. that it is a morphism of rings as well as being an equivalence.</p>",
        "id": 206790522,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597306593
    },
    {
        "content": "<p>I should get back to my <code>hygienic</code> branch at some point...</p>",
        "id": 206790556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597306626
    },
    {
        "content": "<p>I put this instance in <a href=\"https://github.com/leanprover-community/mathlib/issues/3783\">#3783</a>.</p>",
        "id": 207006043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597467936
    }
]