[
    {
        "content": "<p>For the exercise, I'm trying to redo the lemma Kyle wrote above, and defined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bInter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Snempty</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Snempty.some</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and I'm now confused because I feel like using this <code>Snempty.some</code> like that is extracting a value from a Prop into a larger type which I understand to be illegal. Is lean doing some magic here?</p>",
        "id": 291426494,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1659184336
    },
    {
        "content": "<p>.some uses choice, I think</p>",
        "id": 291426745,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659184707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 291426869,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659184815
    },
    {
        "content": "<p>Mmh, I wanted to provide an example where using <code>.some</code> would make lean complain about not eliminating to <code>Prop</code> but couldn't.<br>\nThere is something I'm misunderstanding but not sure what. Thanks!</p>",
        "id": 291426925,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1659184882
    },
    {
        "content": "<p>Is something like this what you had in mind?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bInter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Snempty</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">nempty</span> <span class=\"o\">:=</span> <span class=\"n\">Snempty</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">nempty</span><span class=\"o\">,</span>  <span class=\"c1\">--works</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Snempty</span><span class=\"o\">,</span>   <span class=\"c1\">--fails with the elimination thing</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291427207,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659185166
    },
    {
        "content": "<p>Yeah, I'm not sure of the <code>choose</code> thing (I mean, I'm not familiar with this tactic), but your <code>case Snempty</code> is a typical example</p>",
        "id": 291427502,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1659185636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> It should be <code>choose x h using nempty</code></p>",
        "id": 291427656,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1659185833
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bInter_of_directed_nonempty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Snempty</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">allsnempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">finset.nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dir</span> <span class=\"o\">:</span> <span class=\"n\">directed_on</span> <span class=\"o\">(</span><span class=\"bp\">⊇</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset.nonempty</span> <span class=\"o\">(</span><span class=\"n\">bInter</span> <span class=\"n\">S</span> <span class=\"n\">Snempty</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">s₀</span> <span class=\"o\">:=</span> <span class=\"n\">function.argmin_on</span> <span class=\"o\">(</span><span class=\"n\">finset.card</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_wf</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"n\">Snempty</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">hs₀</span> <span class=\"o\">:=</span> <span class=\"n\">argmin_on_mem</span> <span class=\"o\">(</span><span class=\"n\">finset.card</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_wf</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"n\">Snempty</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">s₀</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">bInter</span> <span class=\"n\">S</span> <span class=\"n\">Snempty</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">allsnempty</span> <span class=\"n\">s₀</span> <span class=\"n\">hs₀</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">xs₀</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_bInter_iff</span> <span class=\"n\">S</span> <span class=\"n\">Snempty</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">dir</span> <span class=\"n\">s₀</span> <span class=\"n\">hs₀</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">ht</span><span class=\"o\">,</span><span class=\"n\">ts₀</span><span class=\"o\">,</span><span class=\"n\">ts</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s₀</span><span class=\"o\">,{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">ts</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ts</span> <span class=\"n\">xs₀</span><span class=\"o\">,},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">finset.card</span> <span class=\"n\">s₀</span> <span class=\"bp\">≤</span> <span class=\"n\">finset.card</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">function.argmin_on_le</span> <span class=\"o\">(</span><span class=\"n\">finset.card</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_wf</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finset.eq_of_subset_of_card_le</span> <span class=\"n\">ts₀</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">xI</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mem_bInter_iff</span> <span class=\"n\">S</span> <span class=\"n\">Snempty</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">xI</span> <span class=\"n\">s₀</span> <span class=\"n\">hs₀</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Happy enough with this. At first I wanted to argue by contradiction: assume that the inter is empty and fix some <code>s₀ \\in S</code>, then there is for each x in s₀ some s_x not containing it, then we take an element of S below all s_x and this must be empty. I wonder if your proof is more constructive, or better in any sense.</p>",
        "id": 291429761,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1659188795
    },
    {
        "content": "<p>This is orthogonal to the discussion, but having propositions in data where it's not strictly needed to give an output is usually a bad idea. There's two main problems:</p>\n<ul>\n<li>Rewrite conflicts. Because some tactics like <code>rw</code> don't fully understand proof irrelevance, you sometimes need to write proofs in a more general way to take in the proof argument even when it could be built from what's given.</li>\n<li>Proof duplication. For instance, every time you take the intersection of a singleton set, you need to give a proof that singletons are nonempty, instead of that being implicit in the results you prove.</li>\n</ul>",
        "id": 291448570,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659211634
    },
    {
        "content": "<p>If you really want to define this intersection of a set of finsets (which is really <code>sInter</code>), I recommend you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sInter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">hs.some</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span>\n</code></pre></div>",
        "id": 291448620,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659211694
    },
    {
        "content": "<p>I'm having trouble parsing \"having propositions in data where it's not strictly needed to give an output\", can you expand on that?</p>",
        "id": 291489019,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1659271995
    },
    {
        "content": "<p>I'm confused, isn't <code>sInter</code> just <code>Inf</code>?</p>",
        "id": 291490608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659273999
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.conditionally_complete_lattice\">docs#finset.conditionally_complete_lattice</a></p>",
        "id": 291490703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659274095
    },
    {
        "content": "<p>Yeah, that just needs a fintype.</p>",
        "id": 291490755,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659274165
    },
    {
        "content": "<p>Huh, nevermind</p>",
        "id": 291490759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659274172
    },
    {
        "content": "<p>Why does it need a fintype?</p>",
        "id": 291490936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659274396
    },
    {
        "content": "<p>Because <code>Inf \\empty = univ</code>, and you can't define both <code>conditionally_complete_lattice (finset \\a)</code> without <code>fintype \\a</code> and <code>complete_lattice (finset \\a)</code> with <code>fintype \\a</code> because that would form a non-defeq diamond.</p>",
        "id": 291491140,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659274674
    },
    {
        "content": "<p>Maybe that's an argument for having separate <code>cInf</code> and <code>cSup</code> functions, for orders that are conditionally complete more generally than when they're complete.</p>",
        "id": 291491230,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659274772
    },
    {
        "content": "<p>Can't they be made defeq?</p>",
        "id": 291491301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659274831
    },
    {
        "content": "<p>What makes the cInf version not work for both?</p>",
        "id": 291491327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659274897
    },
    {
        "content": "<p>For them to be defeq (or even just equal), we need to have <code>cInf \\empty = Inf empty = univ</code>, so we need a fintype.</p>",
        "id": 291491508,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659275142
    },
    {
        "content": "<p>We don't need that to be definitionally equal to univ though. I'll take a look at how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.complete_lattice\">docs#finset.complete_lattice</a> is defined</p>",
        "id": 291492668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659276667
    },
    {
        "content": "<p>Do we even have that?</p>",
        "id": 291492675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659276679
    },
    {
        "content": "<p>This is NOT about definitional equality, but about propositional equality.</p>",
        "id": 291493094,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659277238
    },
    {
        "content": "<p>We seem to be missing <code>finset.complete_lattice</code>, but you can get it from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.to_complete_lattice\">docs#fintype.to_complete_lattice</a>.</p>",
        "id": 291493126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659277303
    },
    {
        "content": "<p>Wouldn't something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">α</span> <span class=\"k\">then</span> <span class=\"n\">h.some.univ</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>work?</p>",
        "id": 291493547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659277813
    },
    {
        "content": "<p>Erhm... I guess, but that's not a scalable solution.</p>",
        "id": 291493581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659277879
    },
    {
        "content": "<p>What does it need to scale to?</p>",
        "id": 291494331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659278967
    },
    {
        "content": "<p>(also, what would the _ be there?)</p>",
        "id": 291494382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659279016
    },
    {
        "content": "<p>To \"orders that are conditionally complete more generally than when they're complete\".</p>",
        "id": 291495180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659280091
    },
    {
        "content": "<p>You can fill the <code>_</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.inf'\">docs#finset.inf'</a>.</p>",
        "id": 291495379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659280385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span> If you have a <code>def</code> taking in <code>Prop</code> arguments, but you can output some trash data without it, then you should prefer that. All theorems will have the same hypotheses but now you don't need to write these down when you build the data.</p>",
        "id": 291505362,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659292433
    },
    {
        "content": "<blockquote>\n<p>You can fill the <code>_</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.inf'\">docs#finset.inf'</a>.</p>\n</blockquote>\n<p>Not quite, but I guess you can if you start with checking if <code>s</code> is finite</p>",
        "id": 291512550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659301646
    }
]