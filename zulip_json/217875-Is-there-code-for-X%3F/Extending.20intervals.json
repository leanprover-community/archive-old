[
    {
        "content": "<p>We have lemmas like <code>Ico_insert_right (h : a ≤ b) : insert b (Ico a b) = Icc a b</code> for extending open intervals to closed intervals, but do we also have lemmas for extending closed intervals by inserting the next element?  For example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ioc</span> <span class=\"mi\">0</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">insert</span> <span class=\"n\">n.succ</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Ico_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">Ico_insert_right</span> <span class=\"o\">(</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">hn.le</span><span class=\"o\">),</span> <span class=\"n\">Ico_succ_right</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289320368,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657631260
    },
    {
        "content": "<p>We have something like that for <code>succ_order</code>s</p>",
        "id": 289320497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657631309
    },
    {
        "content": "<p>There's also a bunch missing that I'm PRing soon.</p>",
        "id": 289320550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657631339
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.Icc_succ_right\">docs#order.Icc_succ_right</a></p>",
        "id": 289320582,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657631351
    },
    {
        "content": "<p>Unfortunately, <code>nat.succ</code> is not <strong>syntactically</strong> equal to <code>order.succ</code></p>",
        "id": 289320626,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657631374
    },
    {
        "content": "<p>But they're definitionally equal.</p>",
        "id": 289320736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657631407
    },
    {
        "content": "<p>We also don't appear to have <code>[succ_order ℕ]</code></p>",
        "id": 289321124,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657631601
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_order\">docs#nat.succ_order</a></p>",
        "id": 289321154,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657631618
    },
    {
        "content": "<p>So why does <code>have := @order.Ioc_succ_right ℕ _ _ </code> give</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">succ_order</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 289321294,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657631677
    },
    {
        "content": "<p>Well, are you importing <code>data.nat.succ_pred</code>?</p>",
        "id": 289321333,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657631695
    },
    {
        "content": "<p>Just added the import of <code>import data.nat.succ_pred</code></p>",
        "id": 289321580,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657631808
    },
    {
        "content": "<p>Sorry, continuing to be stupid: is there a version of <code>Ioc_succ_right</code> for <code>finset.Ioc</code> rather than <code>set.Ioc</code>?</p>",
        "id": 289322259,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657632129
    },
    {
        "content": "<p>No, this is part of what I'm adding soon.</p>",
        "id": 289322978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657632473
    }
]