[
    {
        "content": "<p>Is there an explicit construction in mathlib of pullbacks in the category of types? I'd like to have something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.category</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pullback_obj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">p.2</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>along with the associated cone and <code>is_limit</code>.</p>\n<p>I think I see where such a construction would be -- category_theory.limits.shapes.types -- and I don't see it there. But I know I could be missing something.</p>",
        "id": 232539298,
        "sender_full_name": "Greg Price",
        "timestamp": 1617169149
    },
    {
        "content": "<p>Yep, it's missing. Definitely okay to add it. Make sure to add both the isomorphism to the pullback coming from <code>has_pullbacks</code>, and the <code>@[simp]</code> lemmas saying how that isomorphism commutes with <code>pullback.fst</code> and <code>pullback.snd</code>.</p>",
        "id": 232539389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617169225
    },
    {
        "content": "<p>Cool. I actually have an implementation already, which I wrote the other day -- I'd be glad to send a PR. And I'll be sure to add those pieces.</p>\n<p>Could I have an invitation to be able to push a branch?</p>",
        "id": 232539548,
        "sender_full_name": "Greg Price",
        "timestamp": 1617169336
    },
    {
        "content": "<p>What's your github username?</p>",
        "id": 232539588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617169389
    },
    {
        "content": "<p>gnprice</p>",
        "id": 232539592,
        "sender_full_name": "Greg Price",
        "timestamp": 1617169393
    },
    {
        "content": "<p>I'm also interested in the specialization where one of the maps is mono:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mono_pullback_obj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(Or perhaps the better setup would be for <code>m</code> to be the inclusion of a subtype too? Not sure.)</p>\n<p>That's probably most natural to do after the more general case, though.</p>",
        "id": 232539612,
        "sender_full_name": "Greg Price",
        "timestamp": 1617169440
    },
    {
        "content": "<p>Sent.</p>",
        "id": 232539652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617169449
    },
    {
        "content": "<p>Got it, thanks!</p>",
        "id": 232539722,
        "sender_full_name": "Greg Price",
        "timestamp": 1617169507
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6973\">#6973</a></p>",
        "id": 232548743,
        "sender_full_name": "Greg Price",
        "timestamp": 1617176544
    }
]