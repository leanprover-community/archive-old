[
    {
        "content": "<p>Is there a nice way to show</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 252443609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631100592
    },
    {
        "content": "<p><code>λ h2, h $ by injection h2</code> works, but is a little annoying</p>",
        "id": 252443713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631100647
    },
    {
        "content": "<p>You can use <code>function.injective.ne</code> along with whichever injectivity lemma is needed here.</p>",
        "id": 252444177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631100888
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.inj</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 252449644,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1631103485
    },
    {
        "content": "<p>So my solution should be (untested because I'm in the orange bar hell...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod.mk.inj_left.ne</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 252450158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631103768
    },
    {
        "content": "<p><code>prod.mk.inj</code> is not stated in terms of <code>injective</code>, it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y₁</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span> <span class=\"bp\">∧</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span>\n</code></pre></div>",
        "id": 252450291,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1631103833
    },
    {
        "content": "<p>Edited <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 252450380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631103863
    },
    {
        "content": "<p>Still wrong :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prod.mk.inj_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(and <code>inj_right</code> isn't right either, since that assumes the second element of the tuples are the same, which in Eric's example it's not)</p>",
        "id": 252450481,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1631103922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/inequality.20of.20prod.20constructor/near/252450481\">said</a>:</p>\n<blockquote>\n<p>Still wrong :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prod.mk.inj_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(and <code>inj_right</code> isn't right either, since that assumes the second element of the tuples are the same, which in Eric's example it's not)</p>\n</blockquote>\n<p>are the names of <code>prod.mk.inj_(left|right)</code>backwards? <code>inj_left</code> says it's injective on the second argument (while fixing the first), and <code>inj_right</code> says it's injective on the first argument (while fixing the second).</p>",
        "id": 252450812,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1631104097
    },
    {
        "content": "<p>Sounds like it, yeah.</p>",
        "id": 252450881,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631104148
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod.fst</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 252456921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631106881
    },
    {
        "content": "<p>Or is that too low-level for your taste?</p>",
        "id": 252456977,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631106904
    }
]