[
    {
        "content": "<p>There's already code for <code>ideal</code>s (over commutative rings), but there's nothing for ideals over <code>algebra</code>s.</p>\n<p><code>subalgebra</code> does most of the heavy lifting, but  the API seems either lacking or hard for me to follow.</p>\n<p>As an example of the type of thing I want in mathlib somewhere:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- produce the setoid corresponding to the ideal of a subalgebra</span>\n<span class=\"n\">def</span> <span class=\"n\">setoid_ideal_of_subalgebra</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">A</span>\n<span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">subalgebra</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">subalgebra</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">hac</span> <span class=\"o\">:=</span> <span class=\"n\">subalgebra</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"bp\">_</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_add</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hac</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hac</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span><span class=\"bp\">⟩</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">setoid_ideal_of_subalgebra</span> <span class=\"n\">sorry</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">v</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"err\">⟦</span><span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"err\">⟧</span><span class=\"o\">)</span>\n    <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span>\n    <span class=\"err\">$</span> <span class=\"k\">begin</span>\n      <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">smul_sub</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">subalgebra</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205386486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043319
    },
    {
        "content": "<p>Apologies in advance, my terminology is likely a little off the mark</p>",
        "id": 205386571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043351
    },
    {
        "content": "<p>Hmm? Why are you using <code>setoid</code>?</p>",
        "id": 205386993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596043564
    },
    {
        "content": "<p>I'm confused about the kind of maths that you want</p>",
        "id": 205387011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596043573
    },
    {
        "content": "<p>I think probably just the quotient R-module</p>",
        "id": 205387058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596043596
    },
    {
        "content": "<p>being a subalgebra (closed under <code>*</code>) isn't useful for any sort of quotient I think</p>",
        "id": 205387125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596043631
    },
    {
        "content": "<p>I think I'm looking for <code>subalgebra.quotient</code>, given the alraedy-existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient\">docs#submodule.quotient</a></p>",
        "id": 205387212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043678
    },
    {
        "content": "<p>You need an ideal for that</p>",
        "id": 205387301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596043704
    },
    {
        "content": "<p>My ideal is the <code>sorry</code> in the above snippet</p>",
        "id": 205387393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043763
    },
    {
        "content": "<p>I think</p>",
        "id": 205387406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043773
    },
    {
        "content": "<p>Would a patch be accepted that copied <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient\">docs#submodule.quotient</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient_rel\">docs#submodule.quotient_rel</a> to <code>subalgebra.quotient</code> and <code>subalgebra.quotient_rel</code>, and tweaked the associated proofs?</p>",
        "id": 205387568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043839
    },
    {
        "content": "<p>You have an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and a subalgebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, what do you want to construct in math?</p>",
        "id": 205387587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596043848
    },
    {
        "content": "<p>To un-#xy, I want to construct the clifford algebra from the tensor algebra</p>",
        "id": 205387621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043870
    },
    {
        "content": "<p>I pretty much have what I need, but I had to build too much of it just for this use case</p>",
        "id": 205387668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043888
    },
    {
        "content": "<p>That's a quotient by an ideal, right?</p>",
        "id": 205387670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596043888
    },
    {
        "content": "<p>Yes, I think so</p>",
        "id": 205387686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043894
    },
    {
        "content": "<p>I guess I'm confused by <code>(s : subalgebra R A)</code> then</p>",
        "id": 205387693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596043900
    },
    {
        "content": "<p><code>s</code> is my ideal, but the type isn't quite right</p>",
        "id": 205387776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043924
    },
    {
        "content": "<p>I can't actually use <code>ideal A</code>, because <code>A</code> is not commutative</p>",
        "id": 205387800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043935
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 205387838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596043947
    },
    {
        "content": "<p>I suppose an ideal is stricter than just a subalgebra though, but it seems I haven't actually needed the quotient to be an ideal yet...</p>",
        "id": 205387939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596043998
    },
    {
        "content": "<p>you need it for multiplication</p>",
        "id": 205388195,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596044115
    },
    {
        "content": "<p>I don't think we have two-sided ideals</p>",
        "id": 205388737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596044332
    },
    {
        "content": "<p>In general, noncommutative algebra is underdeveloped.</p>",
        "id": 205389254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596044572
    },
    {
        "content": "<p>Are you telling me that not all rings are commutative? They lied to me!</p>",
        "id": 205390248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596045048
    },
    {
        "content": "<p>I think you need to take the two-sided ideal generated by things of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>v</mi><mn>2</mn></msup><mo>−</mo><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">v^2 - Q(v) \\cdot 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is your quadratic form.<br>\nThis is inside the tensor algebra of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>.</p>",
        "id": 205390499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596045185
    },
    {
        "content": "<p>The Clifford algebra would be the quotient by this two-sided ideal.</p>",
        "id": 205390537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596045206
    },
    {
        "content": "<p>Yeah, that's what I'm doing, except I'd hoped I could call it a subalgebra not an ideal</p>",
        "id": 205390553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596045213
    },
    {
        "content": "<p>I've since been told I should know better than to try that!</p>",
        "id": 205390578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596045231
    },
    {
        "content": "<p>(I'm building on top of your PR, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>)</p>",
        "id": 205390595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596045241
    },
    {
        "content": "<p>It's not a subalgebra, since it doesn't contain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 205390650,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596045249
    },
    {
        "content": "<p>The <code>cdot 1</code> there is just a <code>coe</code>, right?</p>",
        "id": 205390717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596045298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205390248\">said</a>:</p>\n<blockquote>\n<p>Are you telling me that not all rings are commutative? They lied to me!</p>\n</blockquote>\n<p>Only non-commutative rings are non-commutative...</p>",
        "id": 205390769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596045331
    },
    {
        "content": "<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">Q(v) \\cdot 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is the same as the map from the base field. But I don't think I introduced this coersion in the PR you're looking at.</p>",
        "id": 205390925,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596045385
    },
    {
        "content": "<p>I'm currently using</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">ga_ideal</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"o\">{</span>\n  <span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">univ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">univ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205390962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596045404
    },
    {
        "content": "<p>where <code>pre Q</code> is <code>tensor_algebra R M</code></p>",
        "id": 205391005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596045422
    },
    {
        "content": "<p>Which as you annoyingly point out, is wrong because an ideal is not a subalgebra</p>",
        "id": 205391103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596045469
    },
    {
        "content": "<p>I'm fairly sure mathlib has quotients of rings by two sided ideals, so I don't think the whole <code>pre</code> dance is necessary here.</p>",
        "id": 205392074,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596045888
    },
    {
        "content": "<p>wait. I'm confused. Whats going on there?</p>",
        "id": 205392163,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596045928
    },
    {
        "content": "<p>Are you sure you want to adjoin things?</p>",
        "id": 205392183,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596045938
    },
    {
        "content": "<p>This is an over-ring of the tensor algebra.</p>",
        "id": 205392243,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596045963
    },
    {
        "content": "<p>oh, I didn't even find two-sided ideals</p>",
        "id": 205392283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596045973
    },
    {
        "content": "<blockquote>\n<p>I'm fairly sure mathlib has quotients of rings by two sided ideals</p>\n</blockquote>\n<p>Yeah, I couldn't find these</p>",
        "id": 205392496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596046069
    },
    {
        "content": "<p>Well, that's a problem...</p>",
        "id": 205392554,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596046084
    },
    {
        "content": "<blockquote>\n<p>Are you sure you want to adjoin things?</p>\n</blockquote>\n<p>No, I definitely don't - I was just looking for the a plausible subalgebra constructor</p>",
        "id": 205392579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596046099
    },
    {
        "content": "<p>When in fact I should not have been</p>",
        "id": 205392595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596046108
    },
    {
        "content": "<p>What you can do is define a relation using the generators of the ideal, compatibility with addition, multiplication, etc., and take the quotient by that.</p>",
        "id": 205392646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596046135
    },
    {
        "content": "<p>But in reality, mathlib should have code for:</p>\n<ol>\n<li>two-sided ideals.</li>\n<li>two-sided ideals generated by some set.</li>\n<li>quotients by two-sided iddeals.</li>\n</ol>",
        "id": 205392745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596046173
    },
    {
        "content": "<p>two-sided ideals form a closure system (they are closed under arbitrary intersection), so you get ideal spans for free. As for quotients, you can quotient by an arbitrary set, and prove that the kernel of such a quotient is a two sided ideal</p>",
        "id": 205393153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596046355
    },
    {
        "content": "<p>namely the ideal span of the input set</p>",
        "id": 205393197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596046378
    },
    {
        "content": "<p>How do you take the quotient by a set? You have to define some relation which identifies the elements of the set with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, and ensures compatibility with the algebra operations. Does mathlib already have some code to do this?</p>",
        "id": 205393368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596046454
    },
    {
        "content": "<p>There is <code>quot</code> for quotients by arbitrary relations, <code>quotient</code> for equivalence relations, and for additive groups <code>quotient_add_group</code></p>",
        "id": 205394185,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596046824
    },
    {
        "content": "<p>There's <code>submodule.quotient</code> too</p>",
        "id": 205394314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596046891
    },
    {
        "content": "<p>Sure, you can define a relation like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">s</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_compat_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_compat_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_compat_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_compat_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>What I'm wondering is whether mathlib already has some code to automate this.</p>",
        "id": 205394617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596047040
    },
    {
        "content": "<p>Are you looking for submodule.closure or something?</p>",
        "id": 205394925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596047177
    },
    {
        "content": "<p>Nevermind, missed the mul</p>",
        "id": 205395036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596047226
    },
    {
        "content": "<p>When you take <code>quot</code>by such a relation, you get the quotient of the ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> by the two-sided ideal generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</p>",
        "id": 205395070,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596047248
    },
    {
        "content": "<p>I guess you can get by with the submodule (with a left action) closure of the set of all elements of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>⋅</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">s \\cdot a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">s\\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">a\\in A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>",
        "id": 205397408,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596048307
    },
    {
        "content": "<p>Seems like the way to go here is make <code>ideal</code> not defeq <code>submodule</code>, but instead extending <code>add_subgroup</code></p>\n<p>I've made a start on this locally, and spawned the trivial PR <a href=\"https://github.com/leanprover-community/mathlib/issues/3631\">#3631</a></p>",
        "id": 205462580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596104888
    },
    {
        "content": "<p>This turns out to be quite a massive undertaking, as every lemma about <code>add_subgroup</code> has to be wrapped</p>",
        "id": 205468252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596109736
    },
    {
        "content": "<p>Does submodule not extend add_subgroup?</p>",
        "id": 205468679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596110091
    },
    {
        "content": "<p>Does submodule not extend add_subgroup?</p>",
        "id": 205468709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596110122
    },
    {
        "content": "<p>Yes, I suppose it does (well, <code>add_submonoid</code>, which sort of implies <code>add_subgroup</code> if <code>add_group</code> is around somewhere)</p>",
        "id": 205471385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596111949
    },
    {
        "content": "<p>PR so far is at <a href=\"https://github.com/leanprover-community/mathlib/issues/3635\">#3635</a></p>",
        "id": 205471444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596111966
    },
    {
        "content": "<p>Most of the tedious work is taking the proof in <code>submodule</code> and replacing statements about <code>mem_smul</code> with either <code>mem_mul_left</code> or <code>mem_mul_right</code></p>",
        "id": 205471560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596112059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , have you considered doing something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">two_sided_ideal</span> <span class=\"kn\">extends</span> <span class=\"n\">submodule</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">right_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205477557,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596115361
    },
    {
        "content": "<p>Of course, the mathematically correct way to do this is to define bimodules, so that two sided ideals are sub-bimodules of the ring.</p>\n<p><a href=\"https://en.m.wikipedia.org/wiki/Bimodule\">https://en.m.wikipedia.org/wiki/Bimodule</a></p>",
        "id": 205478414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596115858
    },
    {
        "content": "<p>Does submodule not extend add_subgroup?</p>",
        "id": 205478622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596115976
    },
    {
        "content": "<p>It does I think</p>",
        "id": 205478687,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596116032
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule/src\">src#submodule</a></p>",
        "id": 205478904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596116126
    },
    {
        "content": "<p>add_submonoid</p>",
        "id": 205478960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596116159
    },
    {
        "content": "<p>Sorry, I have ropey internet right now, hence multiple messages (I only posted once). A submonoid of a module is not the same as a subgroup, but when you add the ring action you can use a multiplication by -1 trick to show they're the same.</p>",
        "id": 205479128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596116261
    },
    {
        "content": "<p>Oh yeah Eric mentioned this above</p>",
        "id": 205479130,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596116263
    },
    {
        "content": "<p>Yes of course.</p>",
        "id": 205479224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596116302
    },
    {
        "content": "<p>But the same argument works also for right and left modules</p>",
        "id": 205479290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596116346
    },
    {
        "content": "<p>Just to be clear, the bimodule route would look something like:</p>\n<ul>\n<li>Rename the current <code>semimodule</code> to <code>semileftmodule</code></li>\n<li>Rename the current <code>submodule</code> to <code>leftsubmodule</code></li>\n<li>Create copies of all the <code>left</code> code for <code>right</code></li>\n<li>Create <code>bimodule</code> as <code>extends semileftmodule, semirightmodule</code></li>\n<li>Create <code>subbimodule</code> similarly</li>\n<li>alias <code>semimodule R M</code> to <code>semibimodule R R M</code></li>\n<li>alias <code>submodule R M</code> to <code>subbimodule R R M</code></li>\n<li>split <code>has_smul</code> into <code>has_right_smul</code> and <code>has_left_smul</code></li>\n<li>...</li>\n</ul>\n<p>This feels like a very substantial amount of work</p>",
        "id": 205492670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596122587
    },
    {
        "content": "<p>Another approach is to define an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">AB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>-bimodule as a (left) module over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><msup><mi>B</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">A \\otimes B^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 205493848,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596123162
    },
    {
        "content": "<p>So a two-sided ideal in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is a submodule of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> considered as a module over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><msup><mi>A</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">A \\otimes A^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> where a basic tensor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⊗</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\otimes b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> acts on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">x \\in A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>x</mi><mo>⋅</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\cdot x \\cdot b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>.</p>",
        "id": 205494022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596123249
    },
    {
        "content": "<p>the best implementation of the <code>left_</code> and <code>right_</code> approach probably requires metaprogramming (cf. <code>to_additive</code>)</p>",
        "id": 205494773,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596123621
    },
    {
        "content": "<p>Yeah, I was thinking the same</p>",
        "id": 205494840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596123656
    },
    {
        "content": "<p>There may also be notation issues with a right scalar multiplication...</p>",
        "id": 205494848,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596123660
    },
    {
        "content": "<p>Frankly, looking at <code>subgroup</code> vs <code>submonoid</code>, it feels like there's already a dire need for metaprogramming</p>",
        "id": 205494923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596123696
    },
    {
        "content": "<p>So many of the lemmas and they're proofs are textually identical other than the type names</p>",
        "id": 205495037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596123736
    },
    {
        "content": "<p>But of course <code>some_lemma</code> in one file is not the same lemma as <code>some_lemma</code> in the other file</p>",
        "id": 205495077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596123760
    },
    {
        "content": "<p>So a proof that is <code>by simp only [some_lemma]</code> still has to be repeated</p>",
        "id": 205495097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596123774
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3634\">#3634</a> is a good example, the lemmas there are copy-pasted</p>",
        "id": 205495193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596123841
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"bp\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"err\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 205496126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596124285
    },
    {
        "content": "<p>Unfortunately </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"bp\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"err\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 205496335,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596124396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> </p>\n<p>I wonder if we really need the ideal. Could we just use quotient type like in the <code>tensor_algebra</code> code?</p>",
        "id": 205766647,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596440268
    },
    {
        "content": "<p>I have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> which is not working yet:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">quadratic_form</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">quadratic_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">clifford_algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tensor_algebra</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">cliff_rel</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"c1\">-- clifford equiv</span>\n<span class=\"bp\">|</span> <span class=\"n\">contraction</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">qv</span><span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cliff_rel</span> <span class=\"o\">((</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)))</span> <span class=\"o\">((</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">of_scalar</span> <span class=\"o\">(</span><span class=\"n\">qv</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">clifford_algebra</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">_inst_1 : field R,</span>\n<span class=\"cm\">M : Type u_2,</span>\n<span class=\"cm\">_inst_2 : add_comm_group M,</span>\n<span class=\"cm\">_inst_3 : module R M,</span>\n<span class=\"cm\">_inst_4 : quadratic_form R M</span>\n<span class=\"cm\">⊢ quadratic_form R M</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">clifford_algebra</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">clifford_algebra</span><span class=\"bp\">.</span><span class=\"n\">cliff_rel</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205766650,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596440276
    },
    {
        "content": "<p>Q1: How to \"inherit\" an inductive type?</p>\n<p>Namely <code>tensor_algebra.rel</code> here, so that the final <code>cliff_ref</code>will contain what's in <code>rel</code> and also some additional equivalencies.</p>",
        "id": 205766847,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596440435
    },
    {
        "content": "<p>Q2: Why \"failed to synthesize type class instance\" for <code>quadratic_form</code> when there's already <code>quadratic_form</code>?</p>",
        "id": 205766913,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596440518
    },
    {
        "content": "<p>Q2: <code>quadratic_form</code> is not a class, so will not be inferred</p>",
        "id": 205767096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596440654
    },
    {
        "content": "<p>I'd make qv an argument of  <code>cliff_rel</code> or <code>pre</code> instead</p>",
        "id": 205767205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596440753
    },
    {
        "content": "<p>Q3: How to use the contractors in <code>tensor_algebra.pre</code> like <code>of</code> or <code>of_scalar</code>? They seem to disappear after the quotient.</p>",
        "id": 205767451,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596440975
    },
    {
        "content": "<p>I think you shouldn't attempt to use the constructors. Indeed, after the universal property has been defined no one should ever interact with <code>.pre</code> again.</p>",
        "id": 205768328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596441729
    },
    {
        "content": "<p>Should <code>pre</code> be marked private then?</p>",
        "id": 205769597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596442662
    },
    {
        "content": "<p><code>of</code> is exposed as <code>\\iota</code>, of_scalar is <code>algebra_map K T</code> I guess</p>",
        "id": 205769683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596442714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205492670\">said</a>:</p>\n<blockquote>\n<p>Just to be clear, the bimodule route would look something like:</p>\n<ul>\n<li>Rename the current <code>semimodule</code> to <code>semileftmodule</code></li>\n<li>Rename the current <code>submodule</code> to <code>leftsubmodule</code></li>\n<li>Create copies of all the <code>left</code> code for <code>right</code></li>\n<li>Create <code>bimodule</code> as <code>extends semileftmodule, semirightmodule</code></li>\n<li>Create <code>subbimodule</code> similarly</li>\n<li>alias <code>semimodule R M</code> to <code>semibimodule R R M</code></li>\n<li>alias <code>submodule R M</code> to <code>subbimodule R R M</code></li>\n<li>split <code>has_smul</code> into <code>has_right_smul</code> and <code>has_left_smul</code></li>\n<li>...</li>\n</ul>\n<p>This feels like a very substantial amount of work</p>\n</blockquote>\n<p>In the future, <code>module</code> will be renamed into <code>left_noncommunitalsemiring_addcommgroup_module</code></p>",
        "id": 205771490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596444197
    },
    {
        "content": "<p>It does feel like there are a lot of places where wikipedia / wolfram defines something over a ring, but then mathlib says \"actually a semiring is enough\" and either ends up with <code>X</code> and <code>semiX</code>, or needs <code>[ring K] [X K ...]</code>to get the definition used by others. Is there any consensus on which of these two options is preferred?</p>",
        "id": 205772205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596444788
    },
    {
        "content": "<p>What's the problem with defining bimodules as modules over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><msup><mi>B</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">A \\otimes B^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 205787432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596457586
    },
    {
        "content": "<p>And yeah, one should never use <code>pre</code>. Iota is not exactly of, but rather it's the composition of of with the quotient map</p>",
        "id": 205787685,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596457763
    },
    {
        "content": "<p>I didn't want to use <code>pre</code> initially. But it seems that there's no similar way to construct the tensor algebra after the quotient.</p>",
        "id": 205788741,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596458486
    },
    {
        "content": "<p>Anything you can do with pre, you can do by using iota, the algebra_map, and the ring structure of the tensor algebra.</p>",
        "id": 205789027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596458691
    },
    {
        "content": "<p>Sorry, I meant to say the semiring structure of the tensor algebra <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 205789081,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596458735
    },
    {
        "content": "<p>I see. One can only access it as what it is (after the quotient), but not what it was (before the quotient). I was confused by not seeing the general pattern.</p>",
        "id": 205789360,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596458897
    },
    {
        "content": "<p>Are you trying to define the Clifford algebra?</p>",
        "id": 205789497,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596459010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205787432\">said</a>:</p>\n<blockquote>\n<p>What's the problem with defining bimodules as modules over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><msup><mi>B</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">A \\otimes B^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span>?</p>\n</blockquote>\n<p>That route seems fine. I was trying to figure out if it's the only way and if one more concept is necessary.</p>",
        "id": 205789503,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596459014
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I are working on this.</p>",
        "id": 205789529,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596459045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205766847\">said</a>:</p>\n<blockquote>\n<p>Q1: How to \"inherit\" an inductive type?</p>\n<p>Namely <code>tensor_algebra.rel</code> here, so that the final <code>cliff_ref</code>will contain what's in <code>rel</code> and also some additional equivalencies.</p>\n</blockquote>\n<p>Any comments on Q1?</p>",
        "id": 205789580,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596459087
    },
    {
        "content": "<p>If you start by defining your relation on the tensor algebra itself, those relations already hold true!</p>",
        "id": 205789850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596459286
    },
    {
        "content": "<p>So I suggest defining your cliff_rel as a relation on the tensor algebra</p>",
        "id": 205789882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596459318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205771490\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205492670\">said</a>:</p>\n<blockquote>\n<p>Just to be clear, the bimodule route would look something like:</p>\n<ul>\n<li>Rename the current <code>semimodule</code> to <code>semileftmodule</code></li>\n<li>Rename the current <code>submodule</code> to <code>leftsubmodule</code></li>\n<li>Create copies of all the <code>left</code> code for <code>right</code></li>\n<li>Create <code>bimodule</code> as <code>extends semileftmodule, semirightmodule</code></li>\n<li>Create <code>subbimodule</code> similarly</li>\n<li>alias <code>semimodule R M</code> to <code>semibimodule R R M</code></li>\n<li>alias <code>submodule R M</code> to <code>subbimodule R R M</code></li>\n<li>split <code>has_smul</code> into <code>has_right_smul</code> and <code>has_left_smul</code></li>\n<li>...</li>\n</ul>\n<p>This feels like a very substantial amount of work</p>\n</blockquote>\n<p>In the future, <code>module</code> will be renamed into <code>left_noncommunitalsemiring_addcommgroup_module</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Have you heard of <a href=\"https://ncatlab.org/nlab/show/red+herring+principle\">The red herring principle</a>?</p>\n<p>I'm afraid the inaccuracies of the names are inevitable, one has to settle on what's short and about right.</p>",
        "id": 205790010,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596459413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205789850\">said</a>:</p>\n<blockquote>\n<p>If you start by defining your relation on the tensor algebra itself, those relations already hold true!</p>\n</blockquote>\n<p>I tried that first, then stuck at Q3 so I fell back to pre. Now as Q3 is resolved, it seems that I can go back on that route.</p>",
        "id": 205790172,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596459518
    },
    {
        "content": "<p>But I'm still seeking a general pattern here, about \"inheriting\" an inductive type.</p>",
        "id": 205790508,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596459711
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">quadratic_form</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tensor_algebra</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">cliff_rel</span> <span class=\"o\">:</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">cliff_rel</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_compat</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cliff_rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cliff_rel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_compat_left</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cliff_rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cliff_rel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_compat_right</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cliff_rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cliff_rel</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">clifford_algebra</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">cliff_rel</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205790784,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596459864
    },
    {
        "content": "<p>Where're the <code>*compat*</code> coming from?</p>",
        "id": 205791553,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596460364
    },
    {
        "content": "<p>What's the convention of using <code>of</code>? (Maybe it hints that this is the essence of the definition?)</p>",
        "id": 205791618,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596460412
    },
    {
        "content": "<p>The compat stuff ensures the quotient inherits a ring structure from the tensor algebra.</p>",
        "id": 205792049,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596460654
    },
    {
        "content": "<p>Of is because these are essentially the generators of the ideal.</p>",
        "id": 205792084,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596460679
    },
    {
        "content": "<p>How much is the definition above (without ideal) different from the one with ideal? Mostly technical, I presume?</p>",
        "id": 205792356,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596460819
    },
    {
        "content": "<p>This is the relation that generates the  equivalence relation you would get from the two sided ideal. But mathlib doesn't (yet) have two sided ideals...</p>",
        "id": 205792825,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596461059
    },
    {
        "content": "<p>What's your plan after working on tensor algebra?</p>",
        "id": 205793140,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596461263
    },
    {
        "content": "<p>I would be happy to help you with the Clifford algebra, if you like. I did the tensor algebra stuff because someone mentioned they needed the exterior algebra for something, and I think Scott suggested to define the tensor algebra first.</p>",
        "id": 205793249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596461320
    },
    {
        "content": "<p>Yes, we would really appreciate that! We would like to work on Clifford algebra and it would be awesome to have more guidance on how to do it mathematically correctly and possibly a roadmap with sorry and we'll try to work out the details.</p>",
        "id": 205793663,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596461540
    },
    {
        "content": "<p>The path might be: two sided ideals -&gt; Grassmann Algebra -&gt; Clifford Algebra</p>",
        "id": 205793765,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596461601
    },
    {
        "content": "<p>About the motivation for exterior algebras, I think the main expected milestone is to get differential forms.</p>",
        "id": 205793901,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596461674
    },
    {
        "content": "<p>I agree differential forms are the main motivation. I would eventually also like to define Milnor K-theory, which is defined as a certain quotient of the tensor algebra (and is related to logarithmic differential forms).</p>",
        "id": 205794855,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596462130
    },
    {
        "content": "<p>The natural next step for Geometric Algebra (a reformulation from Clifford Algebra mainly for geometric applications) is <a href=\"https://en.wikipedia.org/wiki/Geometric_calculus\">Geometric Calculus</a> and somewhere in the middle we'll need to have differential forms. But Grassmann Algebra, on its own, also has many important geometric applications that we're interested in.</p>",
        "id": 205794932,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596462172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, that code sample above is missing a function to lift a scalar to the algebra, right?</p>",
        "id": 205797495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596463425
    },
    {
        "content": "<p>No, the scalar action is just multiplication in an algebra</p>",
        "id": 205797700,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596463524
    },
    {
        "content": "<p>I'm probably missing something silly then - how would I define the canonical <code>K → clifford_algebra K  V Q</code> function?</p>",
        "id": 205797805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596463579
    },
    {
        "content": "<p>Compose the algebra map to the tensor algebra and the quotient map</p>",
        "id": 205797882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596463633
    },
    {
        "content": "<p>Ah, I was forgetting that a quotient map is implemented</p>",
        "id": 205798071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596463759
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> could  I (github username <code>utensil</code> have push access to non-master branches of mathlib? <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  and I plan to work on Clifford Algebra and its dependencies. Thanks!</p>",
        "id": 205819881,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596474269
    },
    {
        "content": "<p>Done</p>",
        "id": 205825795,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596477407
    },
    {
        "content": "<p>Thanks! <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 205826050,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596477519
    },
    {
        "content": "<p>Another thing we should do now that we have the tensor algebra is define the universal enveloping algebra of a Lie algebra (<span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>?), prove the universal property, and show that it preserves representation categories.</p>",
        "id": 205855926,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596494673
    },
    {
        "content": "<p>I have had this same thought <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and had been anxiously waiting for the tensor algebra PR to merge for this reason. Unfortunately however I am likely to have a lot less time for Mathlib for the next month or two so I personally don't expect to PR this (or much at all) in the near future.</p>",
        "id": 205939654,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1596564390
    }
]