[
    {
        "content": "<p>Hi, Sorry for a novice question. I am trying to define a circle and then a function over it (see code below):</p>\n<p>structure point :=<br>\n  (x y: ℝ)<br>\nstructure circle :=<br>\n  (center: point) (radius: ℝ)</p>\n<p>def circle1.standard (radius: ℝ): circle :=<br>\n<a href=\"http://circle.mk\">circle.mk</a> (<a href=\"http://point.mk\">point.mk</a> 0 0) radius</p>\n<p>def c: circle := circle.standard 10<br>\n#print <a href=\"http://c.center\">c.center</a></p>\n<p>However, it is not working. It says \"unknown identifier <a href=\"http://c.center\">c.center</a>\". Can some one please tell me what I am doing wrong? Thanks in advance.</p>",
        "id": 310836529,
        "sender_full_name": "learnreal",
        "timestamp": 1668782510
    },
    {
        "content": "<p>Mind reading <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and editing accordingly?</p>",
        "id": 310839009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668783251
    },
    {
        "content": "<p>I think here you probably wanted <code>#eval</code> or <code>#check</code>, not <code>#print</code></p>",
        "id": 310839246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668783329
    },
    {
        "content": "<p>Also, it seems that in practice your <code>circle</code> is given by three real numbers, without any condition, so it doesn't look like a circle to me.</p>",
        "id": 310840074,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668783570
    },
    {
        "content": "<p>It's centre and radius of a circle in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 310846547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668785278
    },
    {
        "content": "<p>are <code>(0, 0), 5</code> and <code>(0, 0), -5</code> different circles?</p>",
        "id": 310846914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668785394
    },
    {
        "content": "<p>The answer to the question is that <code>c.center</code> is fine, but you can't <code>#print</code> it because Lean doesn't know how to #print a point. You can do <code>#check c.center</code> to see that indeed it is a <code>point</code>, and you could even prove that the point is (0,0).</p>",
        "id": 310847555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668785557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Defining.20functions.20for.20structures/near/310847555\">said</a>:</p>\n<blockquote>\n<p>but you can't <code>#print</code> it because Lean doesn't know how to #print a point.</p>\n</blockquote>\n<p>It's more fundamental than this, <code>#print</code> isn't for printing values at all</p>",
        "id": 310848492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668785819
    },
    {
        "content": "<p>Ahh. Got that now. Thanks a lot. #eval works.</p>",
        "id": 310849036,
        "sender_full_name": "learnreal",
        "timestamp": 1668785963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Defining.20functions.20for.20structures/near/310846914\">said</a>:</p>\n<blockquote>\n<p>are <code>(0, 0), 5</code> and <code>(0, 0), -5</code> different circles?</p>\n</blockquote>\n<p>Right. I see the point. How do I enforce the constraint that radius should be positive?</p>",
        "id": 310849431,
        "sender_full_name": "learnreal",
        "timestamp": 1668786044
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal\">docs#nnreal</a> for the radius if you're happy with radius 0</p>",
        "id": 310859378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668788685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Defining.20functions.20for.20structures/near/310859378\">said</a>:</p>\n<blockquote>\n<p>You could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal\">docs#nnreal</a> for the radius if you're happy with radius 0</p>\n</blockquote>\n<p>Yes. That works for me.</p>\n<p>However, what is best way to have general checks? Like \"if radius is &lt; 0 then return error else return my circle\" kind of a thing.</p>",
        "id": 310863290,
        "sender_full_name": "learnreal",
        "timestamp": 1668789778
    },
    {
        "content": "<p>I have no idea what you're trying to implement. This is literal answer to your question, but I doubt it's what you actually want.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk_circ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">⊕</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n<span class=\"k\">then</span> <span class=\"n\">sum.inl</span> <span class=\"s2\">\"Radius cannot be negative\"</span>\n<span class=\"k\">else</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩,</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 310865684,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668790459
    },
    {
        "content": "<p>Thank you. This helps.</p>\n<p>I am actually trying to define a circle, a tangent and prove that tangent is right angle to the radius. It might not need what I actually wrote above. But, still struggling to model the scenario correctly and move to the proof part.</p>",
        "id": 310872833,
        "sender_full_name": "learnreal",
        "timestamp": 1668792428
    },
    {
        "content": "<blockquote>\n<p>However, what is best way to have general checks? Like \"if radius is &lt; 0 then return error else return my circle\" kind of a thing.</p>\n</blockquote>\n<p>You don't need this type of check if you use <code>nnreal</code>. Just like in C you don't need a \"if this is not a whole number error\" if you use <code>int</code> instead of <code>float</code>.</p>",
        "id": 310873107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668792507
    },
    {
        "content": "<p>To give an alternative to nnreal, just for sake of example, here's how you can model a circle with positive radius:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">center</span><span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">radius</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">radius_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">radius</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 310873612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668792656
    },
    {
        "content": "<p>It's just impossible to create a circle with non-positive radius with this, since they require a proof of positivity to be constructed.</p>",
        "id": 310873697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668792691
    },
    {
        "content": "<p>It might be useful elsewhere. For eg.,</p>\n<div class=\"codehilite\" data-code-language=\"structure\"><pre><span></span><code>  (x y: \\real)\n\nstructure circle :=\n  (center: point) (radius: ℝ)\n\ndef circle.makenew (d e f: ℝ): circle :=\n    circle.mk c (point.mk (-d/2) (-e/2)) (real.sqrt ((((d*d)+(e*e))/4)-f))\n</code></pre></div>\n<p>I might want to return an error if d<em>d+e</em>e &lt; 4f. Do you suggest a better way to handle this instead of doing \"if ... else\"?</p>",
        "id": 310873996,
        "sender_full_name": "learnreal",
        "timestamp": 1668792790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Defining.20functions.20for.20structures/near/310873612\">said</a>:</p>\n<blockquote>\n<p>To give an alternative to nnreal, just for sake of example, here's how you can model a circle with positive radius:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">center</span><span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">radius</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">radius_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">radius</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Trying to understand here. Are we saying \"radius_pos is a proposition and this prop has to be true for the proof to proceed\"?</p>",
        "id": 310874227,
        "sender_full_name": "learnreal",
        "timestamp": 1668792859
    },
    {
        "content": "<p>It's saying <code>circle.mk</code> takes three arguments to construct a <code>circle</code>: a <code>point</code>, a <code>real</code>, and a proof of <code>0 &lt; radius</code>.</p>",
        "id": 310874540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668792965
    },
    {
        "content": "<p>if <code>0 &lt; radius</code> is false then you won't be able to construct a circle since you can't supply a proof</p>",
        "id": 310874636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668792998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Defining.20functions.20for.20structures/near/310874540\">said</a>:</p>\n<blockquote>\n<p>It's saying <code>circle.mk</code> takes three arguments to construct a <code>circle</code>: a <code>point</code>, a <code>real</code>, and a proof of <code>0 &lt; radius</code>.</p>\n</blockquote>\n<p>Understood. Thanks a lot. This clears up quite a few things for me.</p>",
        "id": 310874675,
        "sender_full_name": "learnreal",
        "timestamp": 1668793012
    },
    {
        "content": "<p>(Lean can't automatically compute whether <code>0 &lt; radius</code> is true for you, but if you're lucky something like <code>by norm_num</code> or <code>by linarith</code> will work)</p>",
        "id": 310874711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668793025
    },
    {
        "content": "<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">point</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">center</span><span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">radius</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">radius_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">radius</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">circle.makenew</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n    <span class=\"n\">circle.mk</span> <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"o\">((</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">real.sqrt_pos</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c2</span><span class=\"o\">:</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span> <span class=\"n\">circle.makenew</span> <span class=\"mi\">10</span> <span class=\"mi\">10</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">c2</span><span class=\"o\">,</span> <span class=\"n\">circle.makenew</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">c2.radius</span>\n<span class=\"c1\">-- real.sqrt 49</span>\n</code></pre></div>",
        "id": 310875063,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668793133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Defining.20functions.20for.20structures/near/310874711\">said</a>:</p>\n<blockquote>\n<p>(Lean can't automatically compute whether <code>0 &lt; radius</code> is true for you, but if you're lucky something like <code>by norm_num</code> or <code>by linarith</code> will work)</p>\n</blockquote>\n<p>Got it. Learnt about norm_num in another thread. Separating proof vs compute looks very tricky to me. May be some thing fundamental that I am missing. But, got the basic idea to get some work progressing.</p>",
        "id": 310875138,
        "sender_full_name": "learnreal",
        "timestamp": 1668793158
    },
    {
        "content": "<p>I modified <code>circle.makenew</code> to include a condition on the variables that guarantee the square root is positive.</p>",
        "id": 310875204,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668793175
    },
    {
        "content": "<p>Just to give another way to write it for sake of example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">circle.makenew</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n  <span class=\"n\">circle.mk</span> <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"o\">((</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">real.sqrt_pos</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 310875440,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668793242
    },
    {
        "content": "<p>Cool. I like this much better (the condition h: ...). Thanks for this suggestion.</p>\n<p>I actually got real.sqrt 49 with out rwa or linarith. May be just lucked out on this example.</p>",
        "id": 310875517,
        "sender_full_name": "learnreal",
        "timestamp": 1668793270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"563020\">learnreal</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Defining.20functions.20for.20structures/near/310875517\">said</a>:</p>\n<blockquote>\n<p>Cool. I like this much better (the condition h: ...). Thanks for this suggestion.</p>\n<p>I actually got real.sqrt 49 with out rwa or linarith (that was with out the h condition). May be just lucked out on this example.</p>\n</blockquote>",
        "id": 310876146,
        "sender_full_name": "learnreal",
        "timestamp": 1668793486
    }
]