[
    {
        "content": "<p>I couldn't find a suitable instance in mathlib. Is this really missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">ulift</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282741352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652852271
    },
    {
        "content": "<p>This sounds right: it came up in a recent Zulip discussion, maybe nobody PRed the code that was generated in the thread</p>",
        "id": 282750999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652860293
    },
    {
        "content": "<p>I also need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282759011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652864621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is this something that transfer can do already?</p>",
        "id": 282759110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652864657
    },
    {
        "content": "<p>This opens up a whole can of worms about putting bornologies and uniformities on ulift.</p>",
        "id": 282759340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652864777
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/universes/near/272699801\">here</a> is a link to the previous discussion (in the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream but I think it's about Lean 3? That's what I was talking about, at least!)</p>",
        "id": 282759907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652865098
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift\">docs#ulift</a> now lists all the instances that we do have, which should make it easier to spot the ones we don't</p>",
        "id": 282759925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865108
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">ulift_instances</span>\n<span class=\"mi\">97</span> <span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">ulift_instances</span>\n</code></pre></div>",
        "id": 282760102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652865193
    },
    {
        "content": "<p>Probably we need a new <code>order/ulift.lean</code> file</p>",
        "id": 282760127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865210
    },
    {
        "content": "<p>That's at least an order of magnitude off the mark that it should be</p>",
        "id": 282760135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652865214
    },
    {
        "content": "<p>What makes you say that?</p>",
        "id": 282760158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865232
    },
    {
        "content": "<p>I think we have over 970 interesting classes in our hierarchy</p>",
        "id": 282760260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652865271
    },
    {
        "content": "<p>How easy is it to count that?</p>",
        "id": 282760295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865299
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"s2\">\"^class\"</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">956</span>\n</code></pre></div>",
        "id": 282760343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652865329
    },
    {
        "content": "<p>That's a first approximation</p>",
        "id": 282760355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652865334
    },
    {
        "content": "<p>Anyways, it would be very helpful for LTE if someone could provide that <code>semi_normed_group</code> instances with the right defeqs.</p>",
        "id": 282760566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652865478
    },
    {
        "content": "<p>Does LTE need both that and the order instances?</p>",
        "id": 282760629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/preorder.20on.20ulift/near/282760127\">said</a>:</p>\n<blockquote>\n<p>Probably we need a new <code>order/ulift.lean</code> file</p>\n</blockquote>\n<p>Note this span off a new thread, <a href=\"#narrow/stream/113488-general/topic/Instance.20files\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Instance.20files</a></p>",
        "id": 282761761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866156
    },
    {
        "content": "<p>The conclusion was to create <code>algebra/order/ulift.lean</code>, but put <code>ulift.preorder</code> next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.preorder\">docs#pi.preorder</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.preorder\">docs#prod.preorder</a>.</p>",
        "id": 282762438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866538
    },
    {
        "content": "<p>(And no, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, the <code>transport</code> tactic cannot cope with <code>semi_normed_group</code>. There is some low hanging fruit that would let it make further progress. <del>Just providing the <code>equiv_functor</code> instance for <code>filter</code>, for example.</del> Scratch that <code>equiv_functor filter</code> is available already.)</p>",
        "id": 282764274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652867519
    },
    {
        "content": "<p>Isn't <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transport\">tactic#transport</a> useless for ulift? I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv_functor\">docs#equiv_functor</a> isn't universe polymorphic</p>",
        "id": 282764377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652867567
    },
    {
        "content": "<p>Either way, we basically never seem to use the transport tactic for this kind of thing, and instead use things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group\">docs#function.injective.add_comm_group</a></p>",
        "id": 282764474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652867635
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_group.induced\">docs#normed_group.induced</a></p>",
        "id": 282764540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652867657
    },
    {
        "content": "<p>No, <code>transport</code> and <code>equiv_functor</code> are universe polymorphic.</p>",
        "id": 282764872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652867873
    },
    {
        "content": "<p>It's just we never put enough work into it, because there is a surprising lack of need for transporting structures across equivalences...</p>",
        "id": 282764958,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652867910
    },
    {
        "content": "<p>(I tested that I can transport <code>add_comm_group</code> over <code>equiv.ulift</code>.)</p>",
        "id": 282764989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652867936
    },
    {
        "content": "<p><code>equiv_functor</code> is not, iirc, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.option_congr\">docs#equiv.option_congr</a> or something like that talks about it</p>",
        "id": 282765404,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652868142
    },
    {
        "content": "<p>Is not what?</p>",
        "id": 282765492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652868230
    },
    {
        "content": "<p>Scott, thanks for testing.</p>",
        "id": 282765495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652868233
    },
    {
        "content": "<p>Universe-polymorphic, sorry</p>",
        "id": 282765673,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652868342
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv_functor.map\">docs#equiv_functor.map</a> requires both sides of the equiv to be in the same universe</p>",
        "id": 282766840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652869047
    },
    {
        "content": "<p>So since<code>transport</code> works, it's because it does the ulifting internally:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.transport</span>\n\n<span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">it_does_work</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">transport</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">equiv.ulift</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 282766858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652869062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> so what would be needed to make it transport semi normed groups?</p>",
        "id": 282768205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652869917
    },
    {
        "content": "<p>(IMO) There's no point (other than being able to say \"look, transport could do this too\")</p>",
        "id": 282768256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652869927
    },
    {
        "content": "<p>Just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_group.induced\">docs#semi_normed_group.induced</a></p>",
        "id": 282768258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652869933
    },
    {
        "content": "<p>Thanks, that at least solves the LTE issue.</p>",
        "id": 282769518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652870814
    },
    {
        "content": "<p>Note that nothing<br>\n<span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/preorder.20on.20ulift/near/282760566\">said</a>:</p>\n<blockquote>\n<p>Anyways, it would be very helpful for LTE if &lt;snip&gt;</p>\n</blockquote>\n<p>Presumably eventually there'll be a paper that comes out of LTE; have there been any thoughts about crediting non-LTE mathlib contributors in such a paper? Obviously this particular change is trivial, but if someone were to make 100 such changes that might start to make the question relevant</p>",
        "id": 282770059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652871177
    },
    {
        "content": "<p>There have been some thoughts, but no conclusive thoughts.</p>",
        "id": 282770898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652871650
    },
    {
        "content": "<p>In general, I think I would rather err on the side of being too generous with crediting <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 282770947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652871689
    },
    {
        "content": "<p>I suppose one option would be to add a contributor list appendix like the Scipy paper did</p>",
        "id": 282772751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652872933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/preorder.20on.20ulift/near/282768258\">said</a>:</p>\n<blockquote>\n<p>Just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_group.induced\">docs#semi_normed_group.induced</a></p>\n</blockquote>\n<p>Added in <a href=\"https://github.com/leanprover-community/mathlib/pull/14217\">#14217</a></p>",
        "id": 282774303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652873902
    },
    {
        "content": "<p>(which adds 14 new instances)</p>",
        "id": 282775905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652874943
    },
    {
        "content": "<p>I'll leave the order ones to someone else</p>",
        "id": 282776058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652875042
    },
    {
        "content": "<p>I love how the old trick (\"stop being focussed on transferring data over equivalences, data often transfers over far more general classes of morphisms\") keeps coming up again and again.</p>",
        "id": 282782070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652878330
    },
    {
        "content": "<p>Looks like I forgot the <code>normed_field</code> instance in that PR, but I guess that's a problem for whoever finds themselves needing it</p>",
        "id": 282826241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652897172
    }
]