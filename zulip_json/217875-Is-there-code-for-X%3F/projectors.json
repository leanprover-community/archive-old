[
    {
        "content": "<p>What of the following do we have?</p>\n<ul>\n<li>predicate for <code>f ∘ f = f</code>;</li>\n<li><code>Π (p q : subspace k E), p  ⊓ q = ⊥ → p ⊔ q = ⊤ → (E →ₗ[k] p)</code>?</li>\n</ul>",
        "id": 195913299,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588287926
    },
    {
        "content": "<p>Is that square the right character?<br>\nEDIT: oh i see that it's the inf character. sad that it doesn't display the same here as in VSCode.<br>\nEDIT: oh there's two of them, one for inf and one for bot. I guess whenever one encouners a zulip message with squares in it, one should copy out to VSCode to be able to read it</p>",
        "id": 195913582,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588288142
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">algebra</span><span class=\"o\">]</span> <span class=\"n\">class</span> <span class=\"n\">is_idempotent</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">idempotent</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>which you could apply with <code>alpha=X-&gt;X</code> and op = <code>function.comp</code>. For the second one, x=p and y=q presumably?</p>",
        "id": 195913714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588288230
    },
    {
        "content": "<p>kevin what do you mean by x and y?</p>",
        "id": 195914358,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588288702
    },
    {
        "content": "<p>There was a typo. I fixed it after Kevin's comment.</p>",
        "id": 195914575,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588288910
    },
    {
        "content": "<p>You can click on \"edited X minutes ago\" to view the edit history and see the now-fixed typos. As for the squares, this is presumably a font issue. They look like the lean sup and inf to me on a pc and they're rendering as junk right now on my phone</p>",
        "id": 195914690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588288990
    },
    {
        "content": "<p>Here is a version without unicode: <code>p (inf)  q = (bot) -&gt; p (sup) q = (top) -&gt; (linear_map k E p)</code></p>",
        "id": 195914701,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588289015
    },
    {
        "content": "<p>and presumably you want that linear map to be the projection onto p?</p>",
        "id": 195914802,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588289084
    },
    {
        "content": "<p>Yes, and have <code>ker = q</code>.</p>",
        "id": 195914828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588289106
    },
    {
        "content": "<p>the linear map character I wasn't able to investigate by bringing it into lean, but probably that's just because I don't have the right linear algebra importa</p>",
        "id": 195914836,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588289117
    },
    {
        "content": "<p>We don't want to say that E= p oplus q because this is type theory, but I guess the projections plus the proof that they're one sided inverses with the right kernel is the correct substitute</p>",
        "id": 195914844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588289123
    },
    {
        "content": "<p>Another way to express this is to define <code>linear_equiv</code> between <code>E</code> and <code>p × q</code>.</p>",
        "id": 195914957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588289204
    },
    {
        "content": "<p>(and the glue between those two definitions seems easier than the content of either one)</p>",
        "id": 195915032,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588289267
    }
]