[
    {
        "content": "<p>I have a map <code>b : α -&gt; β</code> and a finset <code>s : finset β</code>. Is there a way to get a finset <code>s.comap b</code>, such that for each <code>x ∈ s</code> such that for each <code>x ∈ s</code>, either <code>s.comap b</code> contains exactly one <code>i</code> with <code>b i = x</code>, or there is no such <code>i : α</code>. In other words, how do I define <code>s.comap b</code> such that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s.comap</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(assuming <code>f x = 0</code> if <code>x ∉ set.range b</code>).</p>",
        "id": 218817034,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1607078808
    },
    {
        "content": "<p>I don't think you can easily avoid choice for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">s.bind</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"n\">classical.some</span> <span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span>\n</code></pre></div>",
        "id": 218817864,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1607079339
    },
    {
        "content": "<p>I'm not sure if I'd call this comap because it's not at all functorial</p>",
        "id": 218818050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607079470
    },
    {
        "content": "<p>You could define a map from beta to option alpha which is an attempt at an inverse</p>",
        "id": 218818167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607079530
    },
    {
        "content": "<p>There is <code>finset.preimage</code> if <code>f</code> is injective.</p>",
        "id": 218818207,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1607079559
    },
    {
        "content": "<p>Send b to a preimage if there is one. And then you're <code>map</code>ping along this noncanonical inverse and then intersecting with alpha</p>",
        "id": 218818266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607079600
    },
    {
        "content": "<p>I think I'll go with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finset.unique_preimage</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s.image</span> <span class=\"o\">(</span><span class=\"n\">function.partial_inv</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">option.some</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 218818531,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1607079765
    },
    {
        "content": "<p>Or <code>finset.noncanonical_preimage</code> or something</p>",
        "id": 218818579,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1607079796
    },
    {
        "content": "<p>Instead of noncomputable <code>preimage option.some</code> you can use <code>bind</code> and <code>option.to_finset</code>.</p>",
        "id": 219534086,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607634482
    },
    {
        "content": "<p>Nevermind, <code>function.partial_inv</code> is noncomputable anyway.</p>",
        "id": 219534241,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607634564
    }
]