[
    {
        "content": "<p>I have a function of type <code>X → X</code> and I want to create some representation of the infinite sequence starting from one element of X through the repeated application of the function. <br>\nI intend to prove that there is a duplicate element in the list since X is a <code>fintype</code> and then create a finite sublist between those two elements. <br>\nWhat constructs, if any, would exist to make this sort of thing easier? I've seen <code>seq</code>, but I'm not sure how to make it apply to my situation. Thanks!</p>",
        "id": 213694517,
        "sender_full_name": "Chase Norman",
        "timestamp": 1603007996
    },
    {
        "content": "<p>The infinite sequence is defined by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.iterate\">docs#stream.iterate</a> (note: <code>stream α</code> is just <code>ℕ → α</code>). I don't know how much lemmas about it are useful for you.</p>",
        "id": 213694798,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603008464
    },
    {
        "content": "<p>The duplicate element should come from an cardinality argument. You want that a function from <code>nat</code> into a <code>fintype</code> is not injective...</p>",
        "id": 213694868,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603008569
    },
    {
        "content": "<p>Searching for <code>not_injective_nat_fintype</code> gave <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_injective_infinite_fintype\">docs#not_injective_infinite_fintype</a>.</p>",
        "id": 213694919,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603008610
    },
    {
        "content": "<p>Then the finite sublist can be created in different ways, depending on what you exactly want to do with that list. If you want to make sure you get a minimal list back (with no more duplicates), <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> will be useful at some point.</p>",
        "id": 213695026,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603008834
    },
    {
        "content": "<p>Thanks so much for your response! Right now I have a statement (in a proof) that for <code>∀ (x : X), ∃ (y : X), useful_property x y</code>, do you have any ideas on how to construct the associated function to create the stream?</p>",
        "id": 213695260,
        "sender_full_name": "Chase Norman",
        "timestamp": 1603009166
    },
    {
        "content": "<p>It will be something like <code>λ x, classical.some (my_lemma x)</code> (and the property can be proven by <code>λ x, classical.some_spec (my_lemma x)</code>).</p>\n<p>(if you are in the middle of a proof you can do this with the tactic <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#choose\">tactic#choose</a>, but it is often better to separate things out in separate definitions/lemmas).</p>",
        "id": 213695424,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603009388
    },
    {
        "content": "<p>there's also <code>nat.iterate</code> notated as <code>f ^[n]</code></p>",
        "id": 213697556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603012739
    },
    {
        "content": "<p>And there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.is_periodic_pt\">docs#function.is_periodic_pt</a></p>",
        "id": 213703922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603023482
    },
    {
        "content": "<p>This file doesn't have a theorem <code>[fintype α] (f : α → α) : periodic_pts f = univ</code> yet. Feel free to PR it.</p>",
        "id": 213703972,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603023562
    }
]