[
    {
        "content": "<p>I thought we had the below, but an UG just asked for it and I can't find it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">abs_pos</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"n\">hx2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)),</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I tried <code>library_search</code> after <code>import all</code> but Lean thinks for a long time and then segfaults. Yay for a massive library!</p>",
        "id": 291198749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659018367
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/squeeze_zero_norm\">docs#squeeze_zero_norm</a></p>",
        "id": 291199068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659018493
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_of_forall_dist_le\">docs#eq_of_forall_dist_le</a></p>",
        "id": 291201156,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659018742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_forall_dist_le</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">dist_zero_right</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">real.norm_eq_abs</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291201744,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659019017
    },
    {
        "content": "<p><code>|x| ≤ ε</code> is a more general version of it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_forall_dist_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">real.dist_0_eq_abs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291217945,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1659025795
    }
]