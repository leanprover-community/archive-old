[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase_singleton_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 198523616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590219799
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase_singleton_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>it seems it should go in the library, as a <code>@[simp]</code> lemma</p>",
        "id": 198525435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590223136
    },
    {
        "content": "<p>I'm surprised it's not already there!</p>",
        "id": 198526391,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590224785
    },
    {
        "content": "<p>probably the move from insert to singleton was a factor</p>",
        "id": 198526840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590225643
    },
    {
        "content": "<p>Not at a computer right now but I think there should be an easier proof using insert_eq and erase_insert?</p>",
        "id": 198532168,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590235436
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase_singleton_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">insert_emptyc_eq</span><span class=\"o\">,</span> <span class=\"n\">erase_insert</span> <span class=\"o\">(</span><span class=\"n\">not_mem_empty</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 198535402,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590239936
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/irYYOrKM_TkmVdTkAE6ZjdTP/2020-05-23.png\"><img src=\"/user_uploads/3121/irYYOrKM_TkmVdTkAE6ZjdTP/2020-05-23.png\"></a></div>",
        "id": 198535533,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590240166
    },
    {
        "content": "<p>????</p>",
        "id": 198535535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590240169
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/970d47ce28b1637375a76f490339baffa165fc2c/library/init/core.lean#L404-L409\">https://github.com/leanprover-community/lean/blob/970d47ce28b1637375a76f490339baffa165fc2c/library/init/core.lean#L404-L409</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">is_lawful_singleton</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_emptyc</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_insert</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_singleton</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">insert_emptyc_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_singleton</span> <span class=\"o\">(</span><span class=\"n\">singleton</span><span class=\"o\">)</span>\n<span class=\"kn\">export</span> <span class=\"n\">is_lawful_singleton</span> <span class=\"o\">(</span><span class=\"n\">insert_emptyc_eq</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198535610,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590240248
    },
    {
        "content": "<p>those damn <code>export</code>s</p>",
        "id": 198535611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590240253
    }
]