[
    {
        "content": "<p>Is there a typeclass expressing that a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action\">docs#mul_action</a> is transitive?</p>",
        "id": 232733362,
        "sender_full_name": "David Wärn",
        "timestamp": 1617272092
    },
    {
        "content": "<p>What does that mean?</p>",
        "id": 232733526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617272165
    },
    {
        "content": "<p>Oh -- just has one orbit? I don't think there is! This is a completely different usage of the word transitive to the equivalence relation usage, right? (I agree it's standard though, I was just temporarily confused by this)</p>",
        "id": 232733599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617272207
    },
    {
        "content": "<p>What does that mean as a lean theorem statement?</p>",
        "id": 232740186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617275860
    },
    {
        "content": "<p>From the wikipedia page, we have \"sharply transitive\" as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_torsor\">docs#add_torsor</a> (swapping the <code>+</code> symbol for <code>*</code>). Yury has a PR that unifies the <code>*</code> and <code>+</code> versions of these things</p>",
        "id": 232740608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617276115
    },
    {
        "content": "<p>Since <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>'s PR makes the analogy between <code>•</code> and <code>+ᵥ</code>, should we introduce a <code>•⁻¹</code> to parallel <code>-ᵥ</code>?</p>",
        "id": 232740804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617276235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_transitive</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_torsor</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 232743841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617277941
    },
    {
        "content": "<p>Now fix some <code>s : S</code> (by nonemptiness) and you can prove that <code>m : M</code> has an inverse by considering the unique term of type <code>M</code> which bubs <code>m • s</code> back to <code>s</code> and using uniqueness. The \"exists unique\" thing is a nonconstructive (multiplicative) version of <code>vsub</code>.</p>",
        "id": 232744327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617278246
    },
    {
        "content": "<p>BTW, this pr is awaiting review</p>",
        "id": 232765554,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617287307
    },
    {
        "content": "<p>Sorry, which PR number?</p>",
        "id": 232765765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617287382
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6914\">#6914</a></p>",
        "id": 232765785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617287387
    },
    {
        "content": "<p>Ooh, that looks like a nice refactor! Sorry, I had missed it before</p>",
        "id": 232766023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617287468
    },
    {
        "content": "<p>Eric just left a question, but otherwise: LGTM from me</p>",
        "id": 232766152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617287513
    },
    {
        "content": "<p>I think I was waiting for a merge with master and forgot about it</p>",
        "id": 232766235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617287530
    }
]