[
    {
        "content": "<p>Is there the definition of a simple ring?</p>",
        "id": 257606577,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634245871
    },
    {
        "content": "<p>Is this a concept from non-commutative ring theory? We're not very good at that yet, the algebraic geometers got here first</p>",
        "id": 257612322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634248614
    },
    {
        "content": "<p>Yeah, it looks like it needs two-sided ideals, which we don't have</p>",
        "id": 257613408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634249145
    },
    {
        "content": "<p>At a guess, maybe it's enough to have quotients by two-sided ideals (which we do have), as something awful like <code>∀ r : R → R → Prop, nonempty (ring_quot r ≃+* R ⊕ ring_quot r ≃+* unit)</code>.</p>",
        "id": 257613649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634249260
    },
    {
        "content": "<p><del>Which at even more of a guess, is the same as <code>∀ r : R → R → Prop, (=) &lt; r → subsingleton (ring_quot r)</code></del></p>",
        "id": 257613792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634249322
    },
    {
        "content": "<p>We do have quotients. A simple ring is a ring whose only quotients are the trivial ring and the ring itself</p>",
        "id": 257615505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634250193
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> just saw Eric's message</p>",
        "id": 257615640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634250261
    },
    {
        "content": "<p>Maybe what I meant by the simplified version is <code>∀ r : setoid R, ⊥ &lt; r → subsingleton (ring_quot r.rel)</code></p>",
        "id": 257615839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634250384
    },
    {
        "content": "<p>We can also say that the quotient map associated to <code>r</code> is injective when the quotient is nontrivial</p>",
        "id": 257615948,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634250478
    },
    {
        "content": "<p>What sort of things do you want to prove about simple rings <span class=\"user-mention\" data-user-id=\"297452\">@Eloi Torrents</span> ?</p>",
        "id": 257616142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634250583
    },
    {
        "content": "<p>At the moment I need an instance <code>has_inv R</code> given <code>is_simple_ring R</code>.</p>",
        "id": 257616604,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634250818
    },
    {
        "content": "<p>Are two by two matrices over the complexes a simple ring? They have no nontrivial two-sided ideals but they don't have inverses either</p>",
        "id": 257617214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634251134
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 257617266,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634251173
    },
    {
        "content": "<p>I messed this up, I want to prove that the center of a simple algebra is a field.</p>",
        "id": 257617695,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634251414
    },
    {
        "content": "<p>Sounds like you should prove that the center of a simple ring is simple</p>",
        "id": 257618174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634251653
    },
    {
        "content": "<p>(I don't actually know if that's the most straightforward way to prove this)</p>",
        "id": 257618631,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634251924
    },
    {
        "content": "<p>Having <code>is_simple_ring R</code> would be really nice. It's time that we do some central simple algebras in Lean (-;</p>",
        "id": 257647658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634275229
    },
    {
        "content": "<p>Is there some way to write lemmas for left and right ideals at once?</p>",
        "id": 257674479,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634292627
    },
    {
        "content": "<p>I think that at the moment only left ideals are defined in mathlib.</p>",
        "id": 257677186,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634294169
    },
    {
        "content": "<p>Right ideals are <code>submodule (opposite R) R</code>, and <code>ideal = submodule R R</code> is a left-ideal</p>",
        "id": 257677258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634294229
    },
    {
        "content": "<p>We only have API for the left ideals, but lots of it is just copied from the submodule API anyway.</p>",
        "id": 257677307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634294267
    },
    {
        "content": "<p>You could declare a two-sided ideal as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">sub_bimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n    <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">submodule</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span> <span class=\"kn\">renaming</span> <span class=\"n\">smul_mem'</span> <span class=\"bp\">→</span> <span class=\"n\">op_smul_mem'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">two_sided_ideal</span> <span class=\"o\">:=</span> <span class=\"n\">sub_bimodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 257677583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634294429
    },
    {
        "content": "<p>Do you want commutation of the two actions (as the name bimodule evokes)  or would it be better to put that elsewhere?</p>",
        "id": 257685030,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634298650
    },
    {
        "content": "<p>Something like the following should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">sub_bimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n    <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">submodule</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span> <span class=\"kn\">renaming</span> <span class=\"n\">smul_mem'</span> <span class=\"bp\">→</span> <span class=\"n\">op_smul_mem'</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_comm'</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">((</span><span class=\"n\">opposite.op</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">two_sided_ideal</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sub_bimodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 257687086,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634299741
    },
    {
        "content": "<p>Having two actions and being closed under both certainly seems like a useful notion in and of itself. Commutation just is a very common use case. Another one: ideals in additive categories</p>",
        "id": 257687367,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634299888
    },
    {
        "content": "<p>We should really just define bimodules already...</p>",
        "id": 257687467,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634299927
    },
    {
        "content": "<p>Is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><msub><mo>⊗</mo><mi mathvariant=\"double-struck\">Z</mi></msub><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">R\\otimes_{\\mathbb Z} S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33222299999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">Z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>-modules a bad idea?</p>",
        "id": 257687582,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634300017
    },
    {
        "content": "<p>We played with that idea a little while ago. I don't remember what the conclusion was.</p>",
        "id": 257687617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634300039
    },
    {
        "content": "<p>I remember seeing it</p>",
        "id": 257687698,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634300058
    },
    {
        "content": "<p>I like this renaming trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span> <span class=\"kn\">renaming</span>\n    <span class=\"n\">_to_distrib_mul_action</span> <span class=\"bp\">→</span> <span class=\"n\">_to_op_distrib_mul_action</span>\n    <span class=\"n\">add_smul</span> <span class=\"bp\">→</span> <span class=\"n\">add_op_smul</span>\n    <span class=\"n\">zero_smul</span> <span class=\"bp\">→</span> <span class=\"n\">zero_op_smul</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_comm</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 257688041,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634300225
    },
    {
        "content": "<p>That seems like the least complex definition. One can then relate it to modules over the tensor product</p>",
        "id": 257688464,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634300448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Simple.20algebra.20.2F.20ring/near/257685030\">said</a>:</p>\n<blockquote>\n<p>Do you want commutation of the two actions (as the name bimodule evokes)  or would it be better to put that elsewhere?</p>\n</blockquote>\n<p>That's already covered by <code>smul_comm_class R Sᵒᵖ M</code>, so we probably don't want to add a <code>smul_comm'</code> field like <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>'s message below yours does.</p>",
        "id": 257705869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634307817
    },
    {
        "content": "<p>I didn't include that as a typeclass in my <code>subbimodule</code> definition because it's not needed for the definition</p>",
        "id": 257706053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634307876
    },
    {
        "content": "<p>The question is whether it's actually useful to have <code>[bimodule R S M]</code> vs <code>[module R M] [module Sᵒᵖ M] [smul_comm_class R Sᵒᵖ M]</code></p>",
        "id": 257706115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634307909
    },
    {
        "content": "<p>I think bimodule is a common enough thing that mathematicians would prefer the former over always invoking the latter. But I don't think there is anything beyond the existence of the notation</p>",
        "id": 257707074,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634308272
    },
    {
        "content": "<p>The downside is that any lemmas you write about <code>[bimodule R S M]</code> won't apply if you only have <code>[module R M] [module Sᵒᵖ M] [smul_comm_class R Sᵒᵖ M]</code> available</p>",
        "id": 257715997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634311502
    },
    {
        "content": "<p>Whereas the reverse is not true. So having <code>bimodule</code> is a fine idea, but actually using it in lemmas makes them much harder to use</p>",
        "id": 257716080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634311542
    },
    {
        "content": "<p>In particular, we would likely need to add an <code>instance : bimodule</code> in every place we currently have <code>instance : smul_comm_class</code></p>",
        "id": 257716184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634311575
    },
    {
        "content": "<p>And then the question becomes; do we also want <code>bi_distrib_mul_action</code>, <code>bi_mul_action</code>, etc...</p>",
        "id": 257716355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634311655
    },
    {
        "content": "<p>I think before an biactions, we need to settle on a notation class for actions on the right. Eric had some suggestions in his \"actions in mathlib\" paper. I think <code>•&gt;</code> and <code>&lt;•</code>, right?</p>",
        "id": 257722639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634314013
    },
    {
        "content": "<p>Yes, probably hidden behind a locale so that people who only care about left-actions can continue using and seeing <code>•</code> in the infoview</p>",
        "id": 257726558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634315581
    },
    {
        "content": "<p>We could also replace the <code>&lt;&gt;</code> with some kind of arrow symbol, since less-than/greater-than are not really semantically relevant.</p>",
        "id": 257726629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634315618
    },
    {
        "content": "<p><code>m ⮈ s</code> and <code>r ⮊ m</code>could also work</p>",
        "id": 257727054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634315773
    },
    {
        "content": "<p>Or maybe <code>m •⃔ s</code> and <code>r •⃕ m</code>, but those don't render on zulip (or vscode), even as plaintext: m •⃔ s and r •⃕ m</p>",
        "id": 257736530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634319674
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/hGxULTu7mkeujcufW6ZzNzHQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hGxULTu7mkeujcufW6ZzNzHQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hGxULTu7mkeujcufW6ZzNzHQ/image.png\"></a></div>",
        "id": 257736736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634319771
    },
    {
        "content": "<p>I feel watched.</p>",
        "id": 257737095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634319937
    }
]