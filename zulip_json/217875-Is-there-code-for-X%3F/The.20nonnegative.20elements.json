[
    {
        "content": "<p>Given a ordered ring, do we have properties about the subtype of nonnegative elements <code>{x : α // 0 ≤ x}</code>? Like that it is an additive monoid, and sometimes even a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_add_monoid\">docs#canonically_ordered_add_monoid</a>?</p>\n<p>Related:<br>\n<a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/The.20submonoid.20of.20positive.20elements\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/The.20submonoid.20of.20positive.20elements</a></p>",
        "id": 247971413,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1627938274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> was thinking about this in the context of toric varieties and there was even some minor development on some LTE branch but then I think he rather went down the inequality rabbithole...</p>",
        "id": 247974558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627940159
    },
    {
        "content": "<p>Indeed, I had been thinking about this, but did not push anything to mathlib.  Also, a couple of days ago, Eric asked about the positive elements in this stream (I am on mobile and do not know how to get a link for the topic).</p>",
        "id": 248178475,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1627960928
    },
    {
        "content": "<p>I've started something on <a href=\"https://github.com/leanprover-community/mathlib/tree/ordered_sub_continue\">branch#ordered_sub_continue</a>, and use it to simplify some instances for <code>nnreal</code>. <br>\nI already linked to the positive element thread in my previous post :)</p>",
        "id": 248183491,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1627968417
    },
    {
        "content": "<p>Note that LTE has a file <code>for_mathlib/nnrat.lean</code> which can hopefully also be simplified using this method.</p>",
        "id": 248183716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627968739
    },
    {
        "content": "<p><code>nonneg R</code> for a linearly ordered field can get an instance of linearly ordered comm group with zero.</p>",
        "id": 248183728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627968776
    },
    {
        "content": "<p>Ok, I'll add that instance as well</p>",
        "id": 248183748,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1627968841
    },
    {
        "content": "<p>Floris, I should have at least read the URL address that you had linked!</p>\n<p>I am very happy that this is happening!  I have been a little drained by the initial part of the <code>order</code> refactor, but seeing it progressing is very encouraging!</p>",
        "id": 248184080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1627969289
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/9598\">#9598</a></p>",
        "id": 256737068,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633698658
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 256737765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633698995
    },
    {
        "content": "<p>Hopefully it will now be really easy to port <code>nnrat</code> from LTE to mathlib.</p>",
        "id": 256737798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633699012
    },
    {
        "content": "<p>Does your <code>nnrat</code> take in a natural or integer numerator?</p>",
        "id": 256738810,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633699457
    },
    {
        "content": "<p><code>nnrat</code> should just be <code>{x : rat // 0 \\le x}</code></p>",
        "id": 256742587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633701149
    },
    {
        "content": "<p>Could you please double check that your instances don't create diamonds about <code>min</code>/<code>max</code>?</p>",
        "id": 256742856,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633701254
    },
    {
        "content": "<p>I guess, <code>function.injective.linear_ordered_semiring</code> and some other <code>subtype</code> instance can define different <code>min</code>/<code>max</code>.</p>",
        "id": 256743058,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633701344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/The.20nonnegative.20elements/near/256742856\">said</a>:</p>\n<blockquote>\n<p>Could you please double check that your instances don't create diamonds about <code>min</code>/<code>max</code>?</p>\n</blockquote>\n<p>I checked, and they're all are definitionally equal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">linear_ordered_add_comm_monoid.max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">linear_ordered_cancel_add_comm_monoid.max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">linear_ordered_semiring.max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">linear_ordered_comm_monoid_with_zero.max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">linear_ordered_comm_group_with_zero.max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">canonically_linear_ordered_add_monoid.max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span>\n</code></pre></div>\n<p>(I was a little surprised that they were even definitionally equal when unfolding only reducible decls, since it feels like we need to unfold non-reducible instances for this. Maybe there is something weird going on since <code>max</code> is a field of a class)</p>",
        "id": 257368269,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634133018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <br>\nAh, I think I see what you're referring to.<br>\nThis fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"bp\">∅</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order_bot.max</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nonneg.conditionally_complete_linear_order_bot</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span>\n</code></pre></div>\n<p>But it succeeds with semireducible transparency. This is likely the cause of the error I encountered in the PR:</p>\n<blockquote>\n<p>We currently do not yet define conditionally_complete_linear_order_bot nnreal using nonneg, since that causes some errors (I think Lean then thinks that there are two orders that are not definitionally equal (unfolding only instances)).</p>\n</blockquote>\n<p>This probably involves making a few definitions reducible. I'll try to do that and make a PR.</p>",
        "id": 257371070,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634133964
    }
]