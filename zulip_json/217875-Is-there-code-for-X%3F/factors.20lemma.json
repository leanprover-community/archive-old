[
    {
        "content": "<p>Is there a lemma that says the list of factors of a prime to a power is the prime, n times?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"bp\">=</span> <span class=\"n\">list.repeat</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247368065,
        "sender_full_name": "Ines Wright",
        "timestamp": 1627408684
    },
    {
        "content": "<p>this should be in another thread - Zulip can be confusing! but no, should be pretty straightforward though</p>",
        "id": 247368149,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627408743
    },
    {
        "content": "<p>this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factors\">docs#nat.factors</a>, right?</p>",
        "id": 247368178,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627408762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424746\">@Ines Wright</span> Hi! Would you mind editing your message to change it's topic to a new thread name?</p>",
        "id": 247368180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627408764
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factors_prime\">docs#nat.factors_prime</a>, but I couldn't find <code>nat.factors_mul</code>.</p>",
        "id": 247368493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627408891
    },
    {
        "content": "<p>The problem with <code>nat.factors_mul</code> is that <code>nat.factors</code> is a <em>list</em> not a multiset, presumably for CS reasons.</p>",
        "id": 247368704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627408996
    },
    {
        "content": "<p>So you'd have to state it with <code>~</code> rather than <code>=</code>. I could imagine trying to use FTA to prove it by saying \"list.repeat p y has the property that its <code>prod</code> is p^y so done by FTA\" but then you have to prove that if <code>list.repeat p y ~ L</code> then <code>list.repeat p y = L</code>. Is this in mathlib?</p>",
        "id": 247368924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627409087
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factors_unique\">docs#nat.factors_unique</a></p>",
        "id": 247369184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627409195
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.repeat_perm\">docs#list.repeat_perm</a></p>",
        "id": 247369602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627409363
    },
    {
        "content": "<p>Kevin, nat.factors is a list gives you the additional nice property that it is in increasing order.</p>",
        "id": 247369836,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627409457
    },
    {
        "content": "<p>yeah but given a multiset I'm sure any CS person can put it into increasing order if they _want_...</p>",
        "id": 247370457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627409751
    },
    {
        "content": "<p>and you can see that it screws up <code>nat.factors_mul</code> ;-)</p>",
        "id": 247370536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627409774
    },
    {
        "content": "<p>More seriously, to a mathematician the \"canonical\" way of expressing the factors of a natural is as a multiset, because this is precisely the kind of data which can be canonically associated to the natural. When thinking of the factors there's no conceptual reason to include the ordering.</p>",
        "id": 247370715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627409869
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat.factor_multiset\">docs#pnat.factor_multiset</a></p>",
        "id": 247372984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627410965
    },
    {
        "content": "<p>Which also fixes the weirdness where <code>factors 1 = factors 0</code> despite it not being the case that <code>1 = 0</code></p>",
        "id": 247373139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627411057
    },
    {
        "content": "<p>pnat factor multiset is a PITA</p>",
        "id": 247373816,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627411389
    },
    {
        "content": "<p>from having looked at this bit of mathlib lately the best rn is definitely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factors_subset_right\">docs#nat.factors_subset_right</a>, but that's miles off</p>",
        "id": 247374399,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627411669
    },
    {
        "content": "<p>All this <code>pnat</code> part of mathlib has been written a few years and is never used anywhere. Parts of it are poorly written and others are redundant with more general stuff. That's my take. But yeah I guess you can use it and give it some love.</p>",
        "id": 247375866,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627412328
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/7960\">#7960</a> for a more thorough explanation of mine.</p>",
        "id": 247376128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627412427
    },
    {
        "content": "<p>We can redefine factors as the multiset via <a href=\"http://quotient.mk\">quotient.mk</a>, and retain the original as factors_list</p>",
        "id": 247378211,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627413453
    },
    {
        "content": "<p>We don't have a multiset.repeat?</p>",
        "id": 247378291,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627413485
    },
    {
        "content": "<p>i think the <code>smul</code> is repeat, basically</p>",
        "id": 247379011,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627413876
    },
    {
        "content": "<p>no clue where it's defined, though</p>",
        "id": 247379074,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627413898
    },
    {
        "content": "<p>yep: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset</span>\n<span class=\"kd\">def</span> <span class=\"n\">asdg</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk</span> <span class=\"bp\">$</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">])</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">asdg</span>\n<span class=\"c1\">-- quot.mk list.perm [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]</span>\n</code></pre></div>",
        "id": 247379458,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627414108
    },
    {
        "content": "<p>it's just the default smul, which makes a lot of sense as add is just appending two multisets</p>",
        "id": 247380437,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627414571
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.repeat\">docs#multiset.repeat</a></p>",
        "id": 247381341,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627415066
    },
    {
        "content": "<p>sadly they're not defeq, but probably a lemma that should be in <code>mathlib</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">asda</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">multiset.repeat</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">asda</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">succ_nsmul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 247382800,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627415809
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span>   <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"bp\">=</span> <span class=\"n\">list.repeat</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have a proof -- but did we yet decide on whether this lemmas is called <code>factors_pow_prime</code> or <code>prime_pow_factors</code> or what?</p>",
        "id": 247742278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627668140
    },
    {
        "content": "<p><code>prime_pow_factors</code> sounds good to me!</p>",
        "id": 247745989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627670132
    },
    {
        "content": "<p>I would go with <code>prime.factors_pow</code> where <code>hp</code> is explicit</p>",
        "id": 247746100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627670194
    }
]