[
    {
        "content": "<p>Do we have \"integer powers of a relation\"? e.g. if <code>r : ι → ι → Prop</code>, I would like the relations that say things like: there is a length <code>k</code> chain <code>r i0 i1</code>, <code>r i1 i2</code> ... <code>r _ r ik</code>. (Ideally for both positive and negative lengths, interpreting negative lengths by reversing the relation.)</p>",
        "id": 233418315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617760338
    },
    {
        "content": "<p>There is <code>list.chain</code></p>",
        "id": 233418464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617760463
    },
    {
        "content": "<p>you could existentially quantify over the chain to get this</p>",
        "id": 233418481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617760478
    },
    {
        "content": "<p>hmm... seems maybe easier to define it by induction. The fact that I want negative lengths makes it pretty messy, however.</p>",
        "id": 233418532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617760527
    },
    {
        "content": "<p>Oh I missed the negative thing</p>",
        "id": 233418548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617760543
    },
    {
        "content": "<p>yeah you are on your own for that</p>",
        "id": 233418560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617760551
    },
    {
        "content": "<p>Or you could use <code>^[k]</code> to apply the function <code>comp R</code> to <code>eq</code></p>",
        "id": 233418613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617760568
    },
    {
        "content": "<p>I guess it will be cleanest if I do the <code>nat</code> case first, and then just tack on negative lengths as an outside layer.</p>",
        "id": 233418663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617760624
    }
]