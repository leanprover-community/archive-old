[
    {
        "content": "<p>Is there any bundled way to encode the fact that <code>pow</code> is a monoid morphism from the additive structure on <code>nat</code> to the multiplicative structure, of say, a monoid M (for a fixed base <code>m : M</code>).</p>",
        "id": 265105115,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639621814
    },
    {
        "content": "<p>We can make a tropical hom and untropical homs, I guess.</p>",
        "id": 265109936,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639627198
    },
    {
        "content": "<p>My problem is very low key for this much technology! I'll just leave the three lemmas unbundled for now.</p>",
        "id": 265111360,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639629009
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/powers_hom\">docs#powers_hom</a></p>",
        "id": 265125268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639643929
    },
    {
        "content": "<p>Much of mathematics (and this was very surprising to me) is very good at sticking to the principle that the natural maps which show up in the theory don't just commute with random monoid structures, they commute with monoid structures which have the same notation for the monoid law. There are <code>-&gt;+</code> and <code>-&gt;*</code> everywhere. <code>pow n _</code> and <code>exp</code> are rare exceptions where the notation changes, and <code>log</code> is the canonical example the other way. Note that things called <code>exp</code> and <code>log</code> appear in several different branches of geometry, with exp often being used to map a linear structure (eg a tangent space) to a nonlinear structure like a Lie group (where addition may not even be defined). However there are sufficiently few of these things in mathlib right now for us not to have had any need to come up with a bundled typeclass for (and notation for!) the predicate on functions f such that f(a+b)=f(a)*f(b) or f(ab)=f(a)+f(b). I thought that we were going to have to make one when doing valuation theory because the p-adic valuation on the integers satisfies v(ab)=v(a)+v(b) but there's a strange thing about that function -- it really wants to take the value +infinity at 0 and this is inconvenient in type theory. We dealt with it by only using multiplicative valuations N taking values in a monoid with zero, and now N(ab)=N(a)N(b) and N(0)=0 and it looks much more like the kind of function that mathlib likes.</p>",
        "id": 265125338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639643980
    },
    {
        "content": "<p>We have two ways to express things like this: <code>M →+ additive N</code>and <code>multiplicative M →* N</code>.</p>",
        "id": 265227588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639692888
    },
    {
        "content": "<p>I see, so if I understand correctly <code>multiplicative nat</code> is simply the monoid structure  <code>*</code> over <code>nat</code> defined as <code>a * b = a + b</code>. Thanks!</p>",
        "id": 265238790,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639700207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monoid_hom.20from.20additive.20to.20multiplicative.20structures/near/265125268\">said</a>:</p>\n<blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/powers_hom\">docs#powers_hom</a></p>\n</blockquote>\n<p>Is it worth adding a lemma saying that <code>pow (n : M) : multiplicative nat \\to (powers n)</code> is a <code>monoid_hom</code> or is it better to just unravel <a href=\"https://leanprover-community.github.io/mathlib_docs/find/powers_hom\">docs#powers_hom</a> and use some <code>subtype</code> lemmas whenever the above <code>monoid_hom</code> structure is needed?</p>",
        "id": 265239651,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639700961
    },
    {
        "content": "<blockquote>\n<p>defined as <code>a * b = a + b</code>. Thanks</p>\n</blockquote>\n<p>It's less confusing to think of it as <code>of_add a * of_add b = of_add (a + b)</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_add_add\">docs#of_add_add</a>)</p>",
        "id": 265239866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639701143
    },
    {
        "content": "<p><del>Don't you mean is a <code>mul_equiv</code>?</del></p>",
        "id": 265239917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639701200
    },
    {
        "content": "<p>I think that's just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.mrange_restrict\">docs#monoid_hom.mrange_restrict</a>. Although there might be some complications if <a href=\"https://leanprover-community.github.io/mathlib_docs/find/powers\">docs#powers</a> isn't defeq to <code>powers_hom.range</code></p>",
        "id": 265240049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639701307
    }
]