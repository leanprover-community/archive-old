[
    {
        "content": "<p>Do we have anything like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list.to_pexpr</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span> <span class=\"bp\">→</span> <span class=\"n\">pexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">([])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">%%</span><span class=\"n\">xs.to_pexpr</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- list.cons 1 (list.cons 2 list.nil)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"o\">([</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)]</span><span class=\"bp\">.</span><span class=\"n\">to_pexpr</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 287077493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655914681
    },
    {
        "content": "<p>If I understand correctly, you can also define your function as follows, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list.to_pexpr</span> <span class=\"o\">(</span><span class=\"n\">lp</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lp.drop</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">%%</span><span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">lp.nth</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"bp\">``</span><span class=\"o\">([]))</span>\n</code></pre></div>\n<p>Even if this is the case, I am not sure this is better...</p>",
        "id": 287079868,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655915737
    },
    {
        "content": "<p>With my version, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"o\">([</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)]</span><span class=\"bp\">.</span><span class=\"n\">to_pexpr</span><span class=\"o\">)</span>\n<span class=\"c1\">-- list.cons 1 2</span>\n</code></pre></div>\n<p>that maybe suggests that what I proposed is not what you want...</p>",
        "id": 287080339,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655915927
    },
    {
        "content": "<p><code>list.cons 1 2</code> is nonsense because <code>2</code> is not a list</p>",
        "id": 287080403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655915971
    },
    {
        "content": "<p>Is this better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list.to_pexpr1</span> <span class=\"o\">(</span><span class=\"n\">lp</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span>\n<span class=\"n\">lp.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">%%</span><span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">``</span><span class=\"o\">([])</span>\n</code></pre></div>",
        "id": 287081302,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655916384
    },
    {
        "content": "<p>yes, that means the same as what I wrote, but it doesn't answer the question of whether such a construct already exists</p>",
        "id": 287081359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655916411
    },
    {
        "content": "<p>I could not find it, but, given the explanations that I needed to understand what the issue was, this is probably not an interesting data point...  <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 287081587,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655916506
    },
    {
        "content": "<p>Perhaps this would be a reasonable sort of thing to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_to_pexpr\">docs#has_to_pexpr</a> for</p>",
        "id": 287111319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655930897
    }
]