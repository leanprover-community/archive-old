[
    {
        "content": "<p>Any suggestions on how to get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails!</span>\n</code></pre></div>\n<p>If I add <code>local attribute [instance] module.add_comm_monoid_to_add_comm_group</code> then instead of failing the typeclass search hits max depth.</p>",
        "id": 237613274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620283916
    },
    {
        "content": "<p>(The idea here being that you pick up negation on the linear maps by multiplying by <code>-1 : R</code>, which is central.)</p>",
        "id": 237613373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620283964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think you've been struggling(?) with similar things lately in the graded project, right?</p>",
        "id": 237613515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620284082
    },
    {
        "content": "<p>My guess is that a global instance could cause diamonds for the <code>sub</code> and <code>neg</code> fields.</p>",
        "id": 237613558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620284119
    },
    {
        "content": "<p>But it's really strange that you get timeouts with that local instance.</p>",
        "id": 237613612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620284156
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_smul</span><span class=\"o\">],</span>  <span class=\"o\">},</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span> <span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">one_smul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">add_smul</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">))}</span>\n</code></pre></div>\n<p>works, but hopefully someone who has been fighting with modules/semimodules recently knows better than me if this belongs somewhere.</p>",
        "id": 237614201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620284459
    },
    {
        "content": "<p>(Or is easier to achieve.)</p>",
        "id": 237614235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620284472
    },
    {
        "content": "<p>Does this actually happen in the wild? I thought Eric wrote an instance in mathlib making M into an add_comm_group it's an add_comm_monoid which is a module over a ring but I've never had to use it. In the grading work in LTE we just avoid this issue by only working with subgroups when grading rings.</p>",
        "id": 237616814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620285789
    },
    {
        "content": "<p>My gut feeling is that you should make M and N add_comm_groups first and that there's an instance somewhere which does this, or maybe it's just a def? [edit: oh, I just realised you knew this already!]</p>",
        "id": 237616957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620285867
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.add_comm_monoid_to_add_comm_group\">docs#module.add_comm_monoid_to_add_comm_group</a> . It's a def, not an instance.</p>",
        "id": 237619400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620287405
    },
    {
        "content": "<p>As Johan points out, the instance you're asking for is one that mathlib can't provide without introducing diamonds</p>",
        "id": 237619822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620287676
    },
    {
        "content": "<p>What if instead of <code>local attribute</code> you summon the M and N instances with <code>have</code>?</p>",
        "id": 237619944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620287746
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.add_comm_monoid_to_add_comm_group\">docs#module.add_comm_monoid_to_add_comm_group</a> can't be an instance even if we ignored the diamonds it would create, because typeclass search explodes looking for an <code>R</code>, and it creates a loop with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group.to_add_comm_monoid\">docs#add_comm_group.to_add_comm_monoid</a></p>",
        "id": 237620033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620287793
    },
    {
        "content": "<p>I think that in the end, you need to explain to Lean why <code>N</code> is a group, and then the rest can be done automatically by TC.</p>",
        "id": 237620265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620287913
    },
    {
        "content": "<p>Scott, are you really in a situation where you need this? I can't really imagine that one finds oneself with an add_monoid that magically only becomes a group because it has an action of a ring.  An action of a ring is much stronger than an action of the integers.</p>",
        "id": 237620396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620287995
    },
    {
        "content": "<p>In the grading file in LTE I proved that an add_comm_group graded by add_submonoids has the property that all the add_submonoids are add_subgroups, but I can't imagine ever using it.</p>",
        "id": 237620697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620288123
    },
    {
        "content": "<p>The thing I'm trying (and abjectly failing at) is proving that the general notion of <code>projective</code> in any category specializes in <code>Module R</code> to something that agrees with Kevin's <code>is_projective</code> predicate.</p>",
        "id": 237622442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289133
    },
    {
        "content": "<p><code>Module R</code> is set up so that is expects <code>R</code> to be a ring, not just a semi-ring, and the objects to have <code>add_comm_group</code> instances, not just <code>add_comm_monoid</code> instances.</p>",
        "id": 237622529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289201
    },
    {
        "content": "<p>That in itself is fine.</p>",
        "id": 237622577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289207
    },
    {
        "content": "<p>The difficulty comes when I try to use <code>is_projective.of_lifting_property</code>, which quantifies over <code>add_comm_monoid</code>s, even when we know we're looking at a ring, not a semiring.</p>",
        "id": 237622671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289260
    },
    {
        "content": "<p>And there is just typeclass hell. :-(</p>",
        "id": 237622684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289269
    },
    {
        "content": "<p>One possibility that I haven't tried out yet is pushing this all into the explicit/non-categorical side, and proving a variant of <code>of_lifting_property</code> that knows we're working over a ring, and then only quantifies over <code>add_comm_group</code>s.</p>",
        "id": 237622829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289328
    },
    {
        "content": "<p>(but probably this is just pushing the work around? at least no categorical machinery would be involved)</p>",
        "id": 237622886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289367
    },
    {
        "content": "<p>Okay, so I think this is the challenge: add to <code>algebra/module/projective.lean</code> the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">of_lifting_property'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- If for all surjections of `R`-modules `M →ₗ N`, all maps `P →ₗ N` lift to `P →ₗ M`,</span>\n  <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exactI</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exactI</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">f.comp</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- then `P` is projective.</span>\n  <span class=\"n\">is_projective</span> <span class=\"n\">R</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 237623577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289757
    },
    {
        "content": "<p>It \"should\" just follow immediately from <code>of_lifting_property</code>, using that all modules over <code>R</code> are have an <code>add_comm_group</code> structure anyway. But it doesn't seem to be so easy. :-(</p>",
        "id": 237623628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289799
    },
    {
        "content": "<p>I would definitely write the sensible version quantifying over add_comm_groups! If I set things up for semirings then it was only to placate the \"max generality\" people. Who cares in practice about projective modules over a semiring which isn't a ring??</p>",
        "id": 237623702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620289817
    },
    {
        "content": "<p>Huh... interestingly, if you don't bother trying to prove it <em>using</em> the existing <code>of_lifting_property</code>, but instead just copy and paste the proof with no changes, it works just fine. :-)</p>",
        "id": 237623828,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620289896
    },
    {
        "content": "<p>I'd just be tempted to reprove it. I had the same sort of issue with grading.lean in LTE. I couldn't reuse code because I had a map to subgroups and lean wanted a map to submonoids and I ran into problems so just gave up and duplicated code, and then later on when I was unhappy with the duplicated code I fixed it by deleting the submonoid stuff because we never used it</p>",
        "id": 237623953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620289978
    },
    {
        "content": "<p>I agree this should just be done over rings. Semimodules and semirings are, in my opinion, mainly useful when you want to use matrices with natural coefficients to do combinatorics. More abstract stuff is certainly fine with rings.</p>",
        "id": 237623955,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620289980
    },
    {
        "content": "<p>Yes, I also copy pasted code and it worked no problem</p>",
        "id": 237624031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620290013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/modules.20over.20a.20ring/near/237620265\">said</a>:</p>\n<blockquote>\n<p>I think that in the end, you need to explain to Lean why <code>N</code> is a group, and then the rest can be done automatically by TC.</p>\n</blockquote>\n<p>Even this turns out to be a nightmare, as the <code>module</code> you can produce is not the right type any more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">add_comm_monoid</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">module.add_comm_monoid_to_add_comm_group</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_map.add_comm_group</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">_inst_5</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ret</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237624260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620290150
    },
    {
        "content": "<p>Okay, now that I've realised I can prove <code>of_lifting_property'</code> by copy and paste, my proposed course of action is:</p>\n<ol>\n<li>a first PR that shows that the existing defn of <code>is_projective</code> agrees with the categorical <code>projective</code>.</li>\n<li>an optional second PR to restrict the existing defn of <code>is_projective</code> to modules over rings.</li>\n</ol>",
        "id": 237624439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620290254
    },
    {
        "content": "<p>Ah, got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">module.add_comm_monoid_to_add_comm_group</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">_</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">‹</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">›</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">letI</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_map.add_comm_group</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">_inst_5</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">ret</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">key</span><span class=\"o\">},</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">cast_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237625144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620290698
    },
    {
        "content": "<p>possibly golfable</p>",
        "id": 237625227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620290743
    },
    {
        "content": "<p>The fact that <code>key</code> is not (and cannot be?) true by <code>rfl</code> is what dooms that proof</p>",
        "id": 237627397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620291909
    }
]