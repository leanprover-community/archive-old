[
    {
        "content": "<p>The canonical topology of <code>roption</code> is very unclear to me. It seems that the topology can be constructed by either inducing on some map with specific preimages or with filters of complements of compact + closed sets. But I couldn't really find the names/definitions of these filters or maps in Zulip or mathlib. I apologize if this is a stupid question. Any help will be appreciated.</p>",
        "id": 247797249,
        "sender_full_name": "Yourong Zang",
        "timestamp": 1627726869
    },
    {
        "content": "<p>I see no instances for <code>topological_space (roption X)</code> or <code>topological_space (option X)</code> in <code>mathlib</code>. Do you want to define it as the one point compactification or you see this definition somewhere and can't understand it?</p>",
        "id": 248412285,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628113056
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.cocompact\">docs#filter.cocompact</a>. Will it help you?</p>",
        "id": 248412577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628113235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/One.20point.20compactification/near/248412285\">said</a>:</p>\n<blockquote>\n<p>I see no instances for <code>topological_space (roption X)</code> or <code>topological_space (option X)</code> in <code>mathlib</code>. Do you want to define it as the one point compactification or you see this definition somewhere and can't understand it?</p>\n</blockquote>\n<p>Thank you for the information! I saw <a href=\"#narrow/stream/116395-maths/topic/topological.20space.20from.20filter\">this</a> thread and <a href=\"#narrow/stream/116395-maths/topic/topology.20on.20roption\">this one</a>, but I've never seen an actual instance in the forms mentioned in those posts. It seems that people agree that the construction in the first post is not done in the correct generality.</p>\n<p>I want to define the one-point compactification as a topological structure on <code>roption</code> rather than a quotient of <code>sum X X</code>.</p>\n<blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.cocompact\">docs#filter.cocompact</a>. Will it help you?</p>\n</blockquote>\n<p>I'm sure this would do the job for the compactification of <code>roption</code> on a Hausdorff space. Thanks a lot!</p>",
        "id": 248481010,
        "sender_full_name": "Yourong Zang",
        "timestamp": 1628172122
    },
    {
        "content": "<p>Are you sure you want use <code>roption</code> and not <code>option</code>? <code>roption</code> is intended for computability results and mostly necessary to get around decidability issues.</p>",
        "id": 248481473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628172335
    },
    {
        "content": "<p>I've seen comments that say \"roption and option have a different topology\", but don't have the background to understand what is meant by that.</p>",
        "id": 248482231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628172642
    },
    {
        "content": "<p>Oh, are people using them as type synonyms or something?</p>",
        "id": 248482719,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628172855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/One.20point.20compactification/near/248482231\">said</a>:</p>\n<blockquote>\n<p>I've seen comments that say \"roption and option have a different topology\", but don't have the background to understand what is meant by that.</p>\n</blockquote>\n<p>I also saw a similar comment. <a href=\"#narrow/stream/113489-new-members/topic/discrete_topology/near/218941998\">This one</a></p>",
        "id": 248483642,
        "sender_full_name": "Yourong Zang",
        "timestamp": 1628173276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/One.20point.20compactification/near/248481473\">said</a>:</p>\n<blockquote>\n<p>Are you sure you want use <code>roption</code> and not <code>option</code>? <code>roption</code> is intended for computability results and mostly necessary to get around decidability issues.</p>\n</blockquote>\n<p>I can use <code>option</code> if there is no huge difference in the topological construction :).</p>",
        "id": 248484332,
        "sender_full_name": "Yourong Zang",
        "timestamp": 1628173546
    },
    {
        "content": "<p>They \"morally\" have a topology based on their intuitionistic structure, but the topology is not literally implemented as an instance of <code>topological_space</code> in mathlib because these types are usually too generic to be used directly for their topologies. The topologies in question are:</p>\n<ul>\n<li><code>option A</code> has the disjoint sum topology, the same as <code>A + 1</code>: sets in <code>A</code> are open and <code>{none}</code> is also open.</li>\n<li><code>roption A</code> has the one point compactification topology: sets in <code>A</code> are open and sets containing <code>none</code> and also cocompact are also open.</li>\n</ul>",
        "id": 248484490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628173607
    },
    {
        "content": "<p>I would strongly recommend <code>option</code>. It's much easier to use.</p>",
        "id": 248484495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628173611
    },
    {
        "content": "<p>The \"topology\" which people are talking about is something to do with constructive mathematics and you can imagine it as unrelated to the topology questions you're thinking about.</p>",
        "id": 248484557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628173644
    },
    {
        "content": "<p>If you want these types for their topologies, I recommend adding a type synonym that implements the topology. In practice I think you would want to use <code>option A</code> as the base type for both topologies anyway</p>",
        "id": 248484661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628173684
    },
    {
        "content": "<p>e.g. when Mario says \"<code>roption A</code> has the one point compactification topology\" he doesn't actually mean \"if A has a topology then roption A will get one too and it will be the one point compactification\", he is just explaining the way constructivists think topologically about things.</p>",
        "id": 248484675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628173685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/One.20point.20compactification/near/248484490\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>option A</code> has the disjoint sum topology, the same as <code>A + 1</code>: sets in <code>A</code> are open and <code>{none}</code> is also open.</li>\n<li><code>roption A</code> has the one point compactification topology: sets in <code>A</code> are open and sets containing <code>none</code> and also cocompact are also open.</li>\n</ul>\n</blockquote>\n<p>This feels like a type job's synonym.</p>",
        "id": 248484729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628173718
    },
    {
        "content": "<p>*A type synonym's job!</p>",
        "id": 248484747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628173727
    },
    {
        "content": "<p>I assume the moral claim is something like \"if you swap the topologies around you'd need <code>choice</code> to define at leats one of them\"?</p>",
        "id": 248484820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628173769
    },
    {
        "content": "<p>it's actually somewhat hard to write the moral claim formally, because constructivist's \"continuous\" means \"definable without <code>choice</code>\"</p>",
        "id": 248484943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628173815
    },
    {
        "content": "<p>so the literal implementations using <code>topological_space</code> don't and can't capture this</p>",
        "id": 248485019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628173851
    },
    {
        "content": "<p>it's similar to the distinction between computable functions meaning things without <code>noncomputable</code> marker in lean, vs computable meaning having a proof of <code>computable f</code> using the computability library</p>",
        "id": 248485148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628173905
    },
    {
        "content": "<p>In particular Yourong, as a classical mathematician you have no interest in the statements that Mario and Eric are making about \"topology\" -- all they are doing is confusing the issue.</p>",
        "id": 248485167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628173917
    },
    {
        "content": "<p>If you want the one point compactification, just define it using <code>filter.cocompact</code> and pretend you never saw <code>roption</code> :)</p>",
        "id": 248485300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628173961
    },
    {
        "content": "<p>I agree we should have type synonyms for this</p>",
        "id": 248485543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628174059
    },
    {
        "content": "<p>I think there is a reasonable argument for giving <code>option A</code> itself the disjoint sum topology (rather than a type synonym), since I think <code>sum A B</code> also has a topology</p>",
        "id": 248485673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628174114
    },
    {
        "content": "<p>Right, so <code>def one_point_compactification (X : Type*) [topological_space X] := option X</code> should be fine, and then put a topology on it.</p>",
        "id": 248486301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628174393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/One.20point.20compactification/near/248486301\">said</a>:</p>\n<blockquote>\n<p>Right, so <code>def one_point_compactification (X : Type*) [topological_space X] := option X</code> should be fine, and then put a topology on it.</p>\n</blockquote>\n<p>Great! Thank you for the comments.</p>",
        "id": 248486940,
        "sender_full_name": "Yourong Zang",
        "timestamp": 1628174648
    }
]