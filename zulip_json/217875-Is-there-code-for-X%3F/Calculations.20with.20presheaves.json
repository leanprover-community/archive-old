[
    {
        "content": "<p>Hi! I asked this in the Category Theory zulip before. I'm not very familiar with Lean.<br>\nIs there a way to calculate the Hom-sets of presheaves in Lean?<br>\nIn other words, can Lean generate a list of all morphisms from F to G, where F and G are two presheaves?<br>\nOr equivalently, can Lean generate a list of natural transformations between two functors?</p>\n<p>I'm thinking of presheaves with only a few sections, over a category that has only a few objects and morphisms (so that the set of natural transformations doesn't become too big).</p>",
        "id": 199152683,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590758417
    },
    {
        "content": "<p>The usage of \"calculate\" in mathematics and in Lean (i.e. CS) are very different. In mathematics the process does not need to be automated</p>",
        "id": 199152787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590758484
    },
    {
        "content": "<p>and I suspect there is any automatic algorithm to do what you ask</p>",
        "id": 199152825,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590758505
    },
    {
        "content": "<p>how \"calculate the morphisms from F to G\" might translate into Lean is \"establish an <code>equiv</code> between the type of morphisms from F to G and some nicer type\"</p>",
        "id": 199152973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590758560
    },
    {
        "content": "<p>Ok, thanks! I'll try to find another way.</p>",
        "id": 199153898,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590759017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307445\">@Jens Hemelaer</span> If everything in sight is finite, then it might work</p>",
        "id": 199154645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590759384
    },
    {
        "content": "<p>But otherwise, I think you have to be more precise about what you really mean</p>",
        "id": 199154668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590759400
    },
    {
        "content": "<p>E.g.: can you compute all function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>?<br>\n(That's a baby example of sections of a presheaf.)</p>",
        "id": 199154762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590759460
    },
    {
        "content": "<p>Yes, everything in sight is finite. For example a directed graph is a presheaf on a category with two objects and two morphisms, and in this case I would be interested in the set of graph morphisms from one graph to another. In order to make this realistic computationally, both graphs should have only very few vertices and edges (say 5 or 6).</p>",
        "id": 199156107,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590760074
    },
    {
        "content": "<p>Yup, such things would be possible in lean.</p>",
        "id": 199157045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590760537
    },
    {
        "content": "<p>but fast it would not be</p>",
        "id": 199157075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590760557
    },
    {
        "content": "<p>Yup, being fast would probably require you to consider graphs with 1 or 2 vertices (-; <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 199157155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590760585
    },
    {
        "content": "<p>On the other hand, if you are willing to write some tactics, you can make it fast.</p>",
        "id": 199157218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590760615
    },
    {
        "content": "<p>After all, lean can also prove that 5 digit numbers are prime, and can compute the first 10 digits of pi.</p>",
        "id": 199157269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590760641
    },
    {
        "content": "<p>Both require a fair amount of computation. But the computation is not done by definitional reductions.</p>",
        "id": 199157309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590760659
    },
    {
        "content": "<blockquote>\n<p>compute the first 10 digits of pi</p>\n</blockquote>\n<p>with certificates</p>",
        "id": 199157395,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590760684
    },
    {
        "content": "<p>By \"slow\" do you mean that it would take a lot of computation time, or that it would take a lot of time to implement?</p>",
        "id": 199157511,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590760757
    },
    {
        "content": "<p>the former</p>",
        "id": 199157551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590760774
    },
    {
        "content": "<p>The kind of thing that Lean can do is to understand the definition of a morphism of presheaves, and prove theorems about Hom(F,G) even if it's uncountably infinite.</p>",
        "id": 199163871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590763708
    },
    {
        "content": "<p>So I guess that, while it might be possible in theory, Lean is not the right tool for what I want to do.</p>",
        "id": 199181292,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590771212
    },
    {
        "content": "<p>To decide that, you would have to be more explicit about what you want to do</p>",
        "id": 199183386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590772187
    },
    {
        "content": "<p>If you want to compute with explicit graphs, maybe not. If you want to compute with explicit presheaves, maybe yes.</p>",
        "id": 199183471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590772219
    },
    {
        "content": "<p>Why is Lean bad for computing explicit graphs?</p>",
        "id": 199183577,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590772281
    },
    {
        "content": "<p>Because we have nothing about graphs at all, whereas other languages have huge libraries</p>",
        "id": 199184381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590772745
    },
    {
        "content": "<p>My instinct is that presheaves might compute quite nicely in lean but I can't be sure - things with fintype seem to compute reasonably well in my experience</p>",
        "id": 199184618,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590772885
    },
    {
        "content": "<p>I'm sorry for being vague, I only know the absolute basics of theorem proving in Lean.<br>\nWhat I want to do is not theorem proving. I just thought I could take advantage of existing \"definitions\" in Lean, instead of implementing presheaves and natural transformations from scratch in e.g. Python.</p>\n<p>To be more explicit, what I want to do is the following:</p>\n<ul>\n<li>define a specific category C, as a list of &lt;10 objects and &lt;10 morphisms</li>\n<li>define two presheaves F and G on them, i.e. for each presheaf and each object a short list of sections, and a function defining restriction</li>\n<li>get as output of the program a list of presheaf morphisms from F to G.</li>\n</ul>\n<p>I could do this by hand, but then it's easy to make mistakes.</p>",
        "id": 199201044,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590780689
    },
    {
        "content": "<p>Right. So what we have in Lean is all the machinery to make the definition, but very few algorithms to compute the answer explicitly. Instead we can prove theorems about the answer, e.g. one could prove there are infinitely many presheaves on the real numbers with its usual topology. Now one <em>could</em> write code to do what you want to do, and it would be an interesting exercise, but it would be harder to do than in python because for each algorithm you write, you would also have to write a formal proof that the algorithm always terminated under some specific finiteness conditions which you'd have to make precise and which would cover your use case, and furthermore that it always gave the right answer -- or at least you'd have to do this if you wanted the algorithm to output something which you wanted to know for sure was the set of morphisms. If you did this, then it would be essentially impossible to make mistakes, however it would also be some work. And there would be no guarantee that it would run quickly in Lean 3.</p>",
        "id": 199202044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590781172
    },
    {
        "content": "<p>Well... you could use the existing definitions, and just write <code>meta</code> algorithms afterwards.</p>",
        "id": 199202408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590781367
    },
    {
        "content": "<p>That way you can skip all the proofy bits</p>",
        "id": 199202416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590781374
    },
    {
        "content": "<p>I guess here is an algorithm: assuming each set of sections is finite (of size 10, say), one could literally just define the presheaf morphisms to be the subset of the product over all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>G</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(F(U),G(U))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> consisting of those things which obeyed the presheaf axiom. Now you get an algorithm for free, but the moment you try to apply it Lean will make a set possibly of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><msup><mn>0</mn><mn>10</mn></msup><msup><mo stretchy=\"false\">)</mo><mn>10</mn></msup></mrow><annotation encoding=\"application/x-tex\">(10^{10})^{10}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> and then start going through it and printing out the elements which satisfy the axiom. But in practice Lean will never even make the set of course.</p>",
        "id": 199202474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590781398
    },
    {
        "content": "<p>Right, I think if you went through and added a bunch of <code>fintype</code> instances, you could get <code>#eval</code> to do the calculation in principle, but it would be slow even by \"who needs algorithm design?\" standards.</p>",
        "id": 199202693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590781521
    },
    {
        "content": "<p>What would be a lot more effective (and fun) would be to have some tactic which can spit out a SAT encoding of what it means to be a morphism of presheaves from the definitions, and then hand that to a SAT solver. However, we don't have anything like that yet.</p>",
        "id": 199202832,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590781586
    },
    {
        "content": "<p>Say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a top space with 1 element, and we consider two presheaves taking values in sets of size at most 5. In practice this is just two sets of size at most 5, and a morphism between them. Enumerating all morphisms between two such sets involves looking at a set of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mn>5</mn><mn>5</mn></msup><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">(5^5)^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> and then picking out the elements for which the diagram commutes. Already this is presumably completely unfeasible for Lean.</p>",
        "id": 199202919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590781639
    },
    {
        "content": "<p>These numbers like 10 in the original question will just exponentially blow up the size of the answer.</p>",
        "id": 199203033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590781696
    },
    {
        "content": "<p>I will take a look at <code>#eval</code>. Yes, the presheaves should have very small size, 10 sections might already be too much.</p>",
        "id": 199205178,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590782732
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199383258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1591025488
    }
]