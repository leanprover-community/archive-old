[
    {
        "content": "<p>I would like to break the abstraction barrier between polynomials and <code>finsupp ℕ</code> briefly for the following purpose: I have a linear map from <code>finsupp ℕ R</code> to <code>finsupp ℕ R</code> and would like to interpret it as a linear map from <code>polynomial R</code> to <code>polynomial R</code>.  Is there a good way to do this?</p>",
        "id": 267923454,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642104512
    },
    {
        "content": "<p>This sounds like you need the \"identity\" equivalences between the type and its synonym, in the vein of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.to_dual\">docs#order_dual.to_dual</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.of_dual\">docs#order_dual.of_dual</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_lex\">docs#to_lex</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_lex\">docs#of_lex</a>.</p>",
        "id": 267923696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642104625
    },
    {
        "content": "<p>That's so ugly, though!  In my opinion what ought to exist is some kind of constructor for linear maps to/from polynomials, right before <code>polynomial</code> is marked irreducible.  I haven't thought through the exact right form though, so I wondered if someone else had.</p>",
        "id": 267923845,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642104711
    },
    {
        "content": "<p>I'm surprised we don't have a finsupp version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.coeff\">docs#polynomial.coeff</a></p>",
        "id": 267923914,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642104735
    },
    {
        "content": "<p>Or a <code>polynomial.of_finsupp</code>.</p>",
        "id": 267923940,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642104754
    },
    {
        "content": "<p>Ah we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.to_finsupp\">docs#polynomial.to_finsupp</a> (which is the field in the structure defining a polynomial)</p>",
        "id": 267923987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642104782
    },
    {
        "content": "<p>Even that, though, is not a linear map.</p>",
        "id": 267924044,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642104827
    },
    {
        "content": "<p>Right.</p>",
        "id": 267924105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642104846
    },
    {
        "content": "<p>We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.basis_monomials\">docs#polynomial.basis_monomials</a> so you could use that to obtain the linear iso.</p>",
        "id": 267924158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642104886
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has thought about this, he was behind the <code>irreducible</code> refactor I think.</p>",
        "id": 267924389,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642105012
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.mv_polynomial.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">polynomial.basis_monomials</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span>\n</code></pre></div>",
        "id": 267924421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642105033
    },
    {
        "content": "<p>But it should also work to just define <code>polynomial.to_finsupp.linear_map</code> as <code>linear_equiv.refl</code>, before the irreducible attribute is introduced.</p>",
        "id": 267924625,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642105145
    },
    {
        "content": "<p>... which is exactly what I proposed</p>",
        "id": 267924684,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642105186
    },
    {
        "content": "<p><code>polynomial</code> isn't irreducible, it's a structure</p>",
        "id": 267924686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642105186
    },
    {
        "content": "<p>Ah, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.to_finsupp_iso_alg\">docs#polynomial.to_finsupp_iso_alg</a></p>",
        "id": 267924714,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642105202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/linear.20maps.20of.20polynomials/near/267924684\">said</a>:</p>\n<blockquote>\n<p>... which is exactly what I proposed</p>\n</blockquote>\n<p>But what I'm saying is that I hate it :)</p>",
        "id": 267924771,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642105211
    },
    {
        "content": "<p>We do have <code>polynomial.of_finsupp</code>, it's the constructor of the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial/src\">src#polynomial</a> structure</p>",
        "id": 267924828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642105246
    },
    {
        "content": "<p>The docstring of <code>to_finsupp_iso_alg</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Algebra</span> <span class=\"n\">isomorphism</span> <span class=\"n\">between</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"n\">and</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">R</span> <span class=\"n\">ℕ.</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">just</span> <span class=\"n\">an</span> <span class=\"n\">implementation</span> <span class=\"n\">detail</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">useful</span> <span class=\"n\">to</span> <span class=\"n\">transfer</span> <span class=\"n\">results</span> <span class=\"k\">from</span> <span class=\"n\">finsupp</span> <span class=\"n\">to</span> <span class=\"n\">polynomials.</span>\n</code></pre></div>",
        "id": 267924882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642105273
    },
    {
        "content": "<p>We have our general mathlib principle never to use an equiv if you can do it for a morphism ... it'd be great if there were a more functorial version here</p>",
        "id": 267924884,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642105274
    },
    {
        "content": "<p>so \"lift\" rather than \"transport\"</p>",
        "id": 267924911,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642105294
    },
    {
        "content": "<p>It seems that doc-gen doesn't record constructor names which is why you couldn't find <code>of_finsupp</code></p>",
        "id": 267925047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642105377
    }
]