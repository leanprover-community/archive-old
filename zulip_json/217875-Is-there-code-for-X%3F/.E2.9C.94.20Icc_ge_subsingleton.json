[
    {
        "content": "<p>Hi, I don't seem to find a lemma stating that if <code>x ≥ y</code>, then <code>set.Icc x y</code> is a subsingleton. Does that exist somewhere?</p>",
        "id": 322958636,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1674460951
    },
    {
        "content": "<p>Seems plausible that it doesn't exist</p>",
        "id": 322959654,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674461431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 322959715,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674461464
    },
    {
        "content": "<p>Thanks! I'm a bit wary of having to do the mathlib4 dance to make it exist</p>",
        "id": 322959791,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1674461497
    },
    {
        "content": "<p>Just prove it locally wherever you need it.</p>",
        "id": 322960450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674461764
    },
    {
        "content": "<p>And add a to-do saying it needs moving</p>",
        "id": 322960642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674461840
    },
    {
        "content": "<p>Can you expand? I'm doing this: <a href=\"https://github.com/leanprover-community/mathlib/blob/66171007be2a1c26e5c156103d9ee67ebdce4780/src/analysis/bounded_variation.lean#L651\">https://github.com/leanprover-community/mathlib/blob/66171007be2a1c26e5c156103d9ee67ebdce4780/src/analysis/bounded_variation.lean#L651</a></p>",
        "id": 322960916,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1674461936
    },
    {
        "content": "<p>Just add a comment in my code, or actually have the lemma somewhere around it? I think the latter option wouldn't get merged, and the former would get me a \"then do the change\", no?</p>",
        "id": 322961125,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1674462015
    },
    {
        "content": "<p>Are the next four lines the same proof again for different parameters?</p>",
        "id": 322962190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674462483
    },
    {
        "content": "<p>yes, they are</p>",
        "id": 322962266,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1674462504
    },
    {
        "content": "<p>I would suggest putting a lemma somewhere convenient in the same file, with a TODO comment to move the lemma to some specific place in mathlib, after the port is done</p>",
        "id": 322962301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674462526
    },
    {
        "content": "<p>I'd use the existing API:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_subsingleton_of_ge</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.subsingleton</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Icc_self</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subsingleton_singleton</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Icc_eq_empty</span> <span class=\"n\">h.not_le</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subsingleton_empty</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n</code></pre></div>",
        "id": 322962365,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674462560
    },
    {
        "content": "<p>Thanks! I'll see what my local reviewer prefers and include the lemma if needed!</p>",
        "id": 322963129,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1674462843
    }
]