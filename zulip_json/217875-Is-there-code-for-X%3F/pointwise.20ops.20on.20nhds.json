[
    {
        "content": "<p>Does anyone know of an efficient way to prove lemmas of the following form?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ring</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 293761807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660669471
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"488744\">@Jack McKoen</span></p>",
        "id": 293761834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660669481
    },
    {
        "content": "<p>Look for a lemma about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter\">docs#filter</a>.map₂</p>",
        "id": 293762314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660669634
    },
    {
        "content": "<p>If it desn't exist, look for the <code>set</code> or <code>finset</code> version</p>",
        "id": 293762363,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660669662
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map₂_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_prod_eq_map₂</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nhds_prod_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_mul.tendsto</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293764497,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660670429
    },
    {
        "content": "<p>Nice! Thanks!</p>",
        "id": 293764857,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660670545
    }
]