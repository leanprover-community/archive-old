[
    {
        "content": "<p>Is there a preferred way to say that a functor preserves binary products?<br>\nSomething like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">preserves_binary_products</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_binary_products</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_binary_products</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⥤</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 210743689,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600696349
    },
    {
        "content": "<p>See the file <code>preserves_binary_products.lean</code>.</p>",
        "id": 210746801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600697583
    },
    {
        "content": "<p>Ah thanks. I looked in the <code>preserves</code> folder and didn't find anything.</p>",
        "id": 210747434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600697824
    },
    {
        "content": "<p>(It's in the <code>shapes.constructions</code> folder)</p>",
        "id": 210747493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600697844
    },
    {
        "content": "<p>Indeed. That's ... suboptimal. :-)</p>",
        "id": 210747666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600697901
    },
    {
        "content": "<p>It seems I made the <code>limits/preserves/</code> subfolder, without being aware that file was already in <code>limits/shapes/constructions/</code>.</p>",
        "id": 210747991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600698035
    },
    {
        "content": "<p>If you're using either of those files, feel free to clean up / relocate, etc. I may get to it someday. :-)</p>",
        "id": 210748047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600698064
    },
    {
        "content": "<p>Yeah I've been thinking about moving these files as well - there's quite a bit I want to add about functors preserving things so I think it might be a good idea to shift everything into <code>preserves</code></p>",
        "id": 210751355,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600699535
    },
    {
        "content": "<p>Also, since we have abbreviations for a category having equalizers etc, do we want abbreviations for a functor to preserve them? So far I've been using <code>preserves_limits_of_shape walking_parallel_pair F</code> and <code>\\fo J, preserves_limits_of_shape (discrete J) F</code> etc but they're pretty cumbersome</p>",
        "id": 210751516,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600699598
    },
    {
        "content": "<p>Like <code>notation `⇉` := walking_parallel_pair</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 210751907,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600699763
    },
    {
        "content": "<p>I was thinking more like <code>preserves_equalizers := preserves_limits_of_shape walking_parallel_pair F</code> but I guess <code>preserves_limits_of_shape ⇉ F</code> works and for pullbacks we can use <code>preserves_limits_of_shape →← F</code></p>",
        "id": 210754349,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600700691
    },
    {
        "content": "<p>By the way <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> you might like to be aware of: <a href=\"https://github.com/leanprover-community/mathlib/pull/4163\">https://github.com/leanprover-community/mathlib/pull/4163</a></p>",
        "id": 210754673,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600700846
    },
    {
        "content": "<p>After that's sorted I've also got a proof of preserves binary products + preserves terminal =&gt; preserves finite products too</p>",
        "id": 210754833,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600700896
    }
]