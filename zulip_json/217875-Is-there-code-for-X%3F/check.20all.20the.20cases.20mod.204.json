[
    {
        "content": "<p>This is more annoying than I want it to be. What tricks am I missing? The proof is \"check all the cases mod 4\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"c1\">-- This was a mild pain. Can it be golfed?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">x_eq_1_zmod4</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- It's a finite check!</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">≡</span> <span class=\"n\">_</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">≡</span> <span class=\"n\">_</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_eq_int_coe_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- generalize misbehaves otherwise?</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">xbar</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ybar</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- aaand...just check all the cases!</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- idea for removing `change`</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">≡</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">ZMOD'</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int.modeq</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"n\">ZMOD'</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD'</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_eq_int_coe_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">xbar</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ybar</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293692240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660646904
    },
    {
        "content": "<p>A related thing that came up when thinking about this: The maths proof of the below is \"(note that p is odd)\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">annoying</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≡</span> <span class=\"mi\">3</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simpa</span><span class=\"o\">,</span> <span class=\"c1\">-- put there so nobody can cheat and remove the `fact`</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpne2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">},</span>\n    <span class=\"n\">delta</span> <span class=\"n\">nat.modeq</span> <span class=\"n\">at</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h8</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zmod.nat_coe_zmod_eq_zero_iff_dvd</span> <span class=\"mi\">4</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption_mod_cast</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">},</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">fact.out</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">delta</span> <span class=\"n\">nat.modeq</span> <span class=\"n\">at</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h4</span> <span class=\"n\">h5</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">subst</span> <span class=\"n\">h8</span><span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293692634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660647102
    },
    {
        "content": "<p>The first lemma can be proved as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x_eq_1_zmod4_aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pro</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">y</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.int_coe_eq_int_coe_iff_dvd_sub</span><span class=\"o\">,</span> <span class=\"n\">int.modeq_iff_dvd</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- This was a mild pain. Can it be golfed?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">x_eq_1_zmod4</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">pro</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span> <span class=\"n\">x_eq_1_zmod4_aux</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">pro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You can also compress the last to a single line, if you really want to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">x_eq_1_zmod4</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">x_eq_1_zmod4_aux</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">pro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 293697913,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660649709
    },
    {
        "content": "<p>This is also a possibility for the second one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">annoying</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≡</span> <span class=\"mi\">3</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simpa</span><span class=\"o\">,</span> <span class=\"c1\">-- put there so nobody can cheat and remove the `fact`</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_ne_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">zmod.prime_ne_zero</span> <span class=\"n\">p</span> <span class=\"mi\">2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">p2</span> <span class=\"n\">at</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">not_ne_iff.mpr</span> <span class=\"n\">h8</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Not sure if it is really better.</p>",
        "id": 293700617,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660650904
    },
    {
        "content": "<p>This can probably be tidied up a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">annoying</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≡</span> <span class=\"mi\">3</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simpa</span><span class=\"o\">,</span> <span class=\"c1\">-- put there so nobody can cheat and remove the `fact`</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">zmod.nat_coe_zmod_eq_zero_iff_dvd</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">hp4</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.dvd_of_mod_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.mod_self</span> <span class=\"n\">p</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.modeq.modeq_of_dvd</span> <span class=\"n\">hp4</span> <span class=\"n\">h8</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:=</span> <span class=\"n\">nat.dvd_gcd_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp3</span><span class=\"o\">,</span> <span class=\"n\">hp4</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hp1</span><span class=\"o\">,</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">nat.not_prime_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hp1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fact_iff.1</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293718861,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1660656701
    }
]