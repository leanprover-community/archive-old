[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.lintegral_coe_eq_integral\">docs#measure_theory.lintegral_coe_eq_integral</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lintegral_coe_eq_integral</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfi</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫⁻</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"bp\">∫</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't find the following variant (real-valued functions assumed to be nonnegative instead of nnreal-valued functions), which I nevertheless end up needing often:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lintegral_coe_eq_coe_integral</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfi</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_nn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does it exist and do others agree it is worth having as a rewrite lemma?</p>",
        "id": 280088881,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1650901828
    },
    {
        "content": "<p>Just noting that you call it<code>coe</code> but the function is named <code>of_real</code>.</p>",
        "id": 280089009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650901883
    },
    {
        "content": "<p>Given <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lintegral_coe_eq_integral\">docs#lintegral_coe_eq_integral</a>, the essence of the proof is just coercions between reals, nnreal, and ennreals. I did not find a much shorter proof than the following, so consider this also an invitation to golfers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.bochner</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_comp_to_nnreal_comp</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_nn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">real.to_nnreal</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">real.coe_to_nnreal</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f_nn</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal_coe_comp_to_nnreal_comp</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_nn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">real.to_nnreal</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">funext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.of_real_eq_coe_nnreal</span> <span class=\"o\">(</span><span class=\"n\">f_nn</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">ennreal.coe_eq_coe</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype.coe_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">max_eq_left_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">f_nn</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lintegral_coe_eq_coe_integral</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfi</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_nn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">real.to_nnreal</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">def_g</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">coe_g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">coe_comp_to_nnreal_comp</span> <span class=\"n\">f_nn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">of_real_g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"k\">from</span> <span class=\"n\">ennreal_coe_comp_to_nnreal_comp</span> <span class=\"n\">f_nn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g_intble</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">μ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">coe_g</span> <span class=\"n\">at</span> <span class=\"n\">hfi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">coe_g</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">lintegral_coe_eq_integral</span> <span class=\"n\">g</span> <span class=\"n\">g_intble</span><span class=\"o\">,</span> <span class=\"n\">of_real_g</span><span class=\"o\">,</span> <span class=\"n\">coe_g</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280089038,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1650901897
    },
    {
        "content": "<p>With this, you might be able to golf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.of_real_integral_norm_eq_lintegral_nnnorm\">docs#measure_theory.of_real_integral_norm_eq_lintegral_nnnorm</a></p>",
        "id": 280089132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650901925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/lintegral_coe_eq_coe_integral/near/280089009\">said</a>:</p>\n<blockquote>\n<p>Just noting that you call it<code>coe</code> but the function is named <code>of_real</code>.</p>\n</blockquote>\n<p>True, the naming could be improved --- I mainly wanted to emphasize the analogy to the existing named lemma.</p>",
        "id": 280089297,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1650901995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/lintegral_coe_eq_coe_integral/near/280089132\">said</a>:</p>\n<blockquote>\n<p>With this, you might be able to golf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.of_real_integral_norm_eq_lintegral_nnnorm\">docs#measure_theory.of_real_integral_norm_eq_lintegral_nnnorm</a></p>\n</blockquote>\n<p><code>nnnorm</code> still lands in <code>nnreal</code>, whereas I want <code>real</code> values.</p>",
        "id": 280089492,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1650902064
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13701\">#13701</a></p>\n<p>I hope others agree this is a rewrite lemma worth having; I plan to soon use it in two separate PRs. Following Yaël's remark, I changed the naming. I also switched the two sides of the equality, because at least in my opinion the new RHS (old LHS) is simpler, since it makes mathematical sense without integrability assumptions and <code>lintegral</code>naturally yields <code>ennreal</code> anyway.</p>\n<p>Golfing is still welcome! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 280125529,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1650919123
    }
]