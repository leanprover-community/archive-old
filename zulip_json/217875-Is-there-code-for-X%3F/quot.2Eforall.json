[
    {
        "content": "<p>Do we really not have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">quot.forall</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">quot.ind</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I was sure I saw some variant of it somewhere. Obviously we'd want it for <code>quotient.mk</code>, <code>ideal.quotient.mk</code>, etc too{</p>",
        "id": 249117606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628692926
    },
    {
        "content": "<p>Oh, I guess you can prove it with <code>quotient.surjective_quotient_mk'.forall</code></p>",
        "id": 249119109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628693614
    },
    {
        "content": "<p>You probably mean <code>surjective_quot_mk</code>.</p>",
        "id": 249304508,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628809651
    },
    {
        "content": "<p>Right, that's the one that actually matches my theorem statement syntactically</p>",
        "id": 249306297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628811154
    },
    {
        "content": "<p>Do you think we should have the forall lemma for each quotient constructor anyway, or should we just sure we have a proof of surjectivity for each of our plethora of aliases of <code>quot.mk</code></p>",
        "id": 249306408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628811272
    }
]