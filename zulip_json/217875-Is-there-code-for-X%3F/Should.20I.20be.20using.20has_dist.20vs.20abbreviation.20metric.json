[
    {
        "content": "<p>In the following I have an <code>abbreviation metric</code> which says much the same thing as <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/metric_space/basic.html#has_dist\">has_dist</a>.  Should I be using <code>has_dist</code> here somehow or is this OK?  I am trying to define an example metric function prior to defining a metric space that uses it.  I feel like I should be able to replace <code>metric X</code> in a function with <code>has_dist X</code> but it doesn't fit exactly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"c1\">-- Metric: α → α → ℝ</span>\n\n<span class=\"n\">abbreviation</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"c1\">-- kind of recapitulates has_dist but has_dist α doesn't work as a function type</span>\n\n<span class=\"c1\">-- Example 1</span>\n\n<span class=\"n\">abbreviation</span> <span class=\"n\">RealPoint</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"c1\">-- real points</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">d_taxicab</span> <span class=\"o\">:</span> <span class=\"n\">metric</span> <span class=\"n\">RealPoint</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">y.1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">-</span> <span class=\"n\">y.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">d_euclid</span> <span class=\"o\">:</span> <span class=\"n\">metric</span> <span class=\"n\">RealPoint</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">real.sqrt</span> <span class=\"o\">((</span><span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">y.1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">-</span> <span class=\"n\">y.2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">d_taxicab</span> <span class=\"c1\">-- d_taxicab : metric RealPoint</span>\n<span class=\"k\">#check</span> <span class=\"n\">d_euclid</span> <span class=\"c1\">-- d_euclid : metric RealPoint</span>\n</code></pre></div>",
        "id": 219033182,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607302684
    },
    {
        "content": "<p>Providing a <code>has_dist</code> instance for some type, would allow you to say <code>dist</code> and have the function you provided in the <code>has_dist</code> statement be inferred. You will run into issues if you have two separate non-equal <code>has_dist</code> defined for the same type.</p>\n<p>Can you give an example (that might not compile) of how you picture using <code>has_dist</code> instead?</p>",
        "id": 219033441,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607303133
    },
    {
        "content": "<p>I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbreviation</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>and <code>mathlib</code> has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_dist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>They are declaring the same type for the same purpose.</p>\n<p>I am creating a distance function such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">d_L1</span> <span class=\"o\">:</span> <span class=\"n\">metric</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This goes into a <code>metric_space</code> such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MES_L1</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"n\">d_L1</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MES_L1</span> <span class=\"c1\">-- MES_L1 : metric_space ℝ</span>\n</code></pre></div>\n<p>It's a very small point but I am just asking whether there is a more <code>mathlib</code>-onic way of declaring <code>d_L1</code> which uses <code>has_dist</code> so I don't have to create the  redundant type abbreviation <code>metric</code>.</p>",
        "id": 219038004,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607310569
    },
    {
        "content": "<p>You should not be using <code>abbreviation metric</code>.<br>\nYou should be using instances of the <code>has_dist</code> typeclass.<br>\nYou should use those instances via the function <code>dist</code> (which assumes an instance of <code>has_dist</code> as one of its arguments).</p>",
        "id": 219045104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607321257
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> .  So the paradigm is to:</p>\n<ul>\n<li>Declare a type of functions which includes my distance function</li>\n<li>Provide that type with a <code>has_dist</code>, like this:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bounded_continuous_function</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→ᵇ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">bounded_continuous_function</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>Can you help me adapt the above example to the case where <code>α = β = ℝ</code> and <code>d= λ x y, abs (x - y)</code>, so that the resulting <code>d</code> can be incorporated into the definition of a metric space?</p>",
        "id": 219083448,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607350082
    },
    {
        "content": "<p>OK I got it.  <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes\">Section 10.3</a>.  Here we go, please correct me if I'm wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">d_L1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">R_has_dist</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">d_L1</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MES_L1</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"n\">d_L1</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MES_L1</span> <span class=\"c1\">-- MES_L1 : metric_space ℝ</span>\n</code></pre></div>",
        "id": 219170018,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607401158
    },
    {
        "content": "<p>Done, revised to avoid instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mport</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"c1\">-- Example 1</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">d_L1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R_has_dist_L1</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">d_L1</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MES_L1</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"n\">d_L1</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MES_L1</span> <span class=\"c1\">-- MES_L1 : metric_space ℝ</span>\n\n<span class=\"c1\">-- Example 2</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">d_L2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">real.sqrt</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R_has_dist_l2</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">d_L1</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MES_L2</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"n\">d_L2</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MES_L2</span> <span class=\"c1\">-- MES_L2 : metric_space ℝ</span>\n\n<span class=\"c1\">-- Example 3</span>\n\n<span class=\"n\">abbreviation</span> <span class=\"n\">RealPoint</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"c1\">-- real points</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">d_taxicab</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">RealPoint</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">y.1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">-</span> <span class=\"n\">y.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">RealPoint_has_dist_taxicab</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"n\">RealPoint</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">d_taxicab</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MES_taxicab</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">RealPoint</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"n\">d_taxicab</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MES_taxicab</span> <span class=\"c1\">-- MES_taxicab : metric_space RealPoint</span>\n\n<span class=\"c1\">-- Example 4</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">d_euclid</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">RealPoint</span><span class=\"o\">),</span> <span class=\"n\">real.sqrt</span> <span class=\"o\">((</span><span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">y.1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">-</span> <span class=\"n\">y.2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">RealPoint_has_dist_euclid</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"n\">RealPoint</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">d_taxicab</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MES_euclid</span><span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">RealPoint</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"n\">d_euclid</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MES_euclid</span> <span class=\"c1\">-- MES_taxicab : metric_space RealPoint</span>\n</code></pre></div>",
        "id": 219208296,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607435558
    },
    {
        "content": "<p>Typo: <code>R_has_dist_l2 : has_dist ℝ := ⟨ d_L1 ⟩</code> should be <code>R_has_dist_l2 : has_dist ℝ := ⟨ d_L2 ⟩</code></p>",
        "id": 219210223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607436518
    },
    {
        "content": "<p>Thanks, fixed.</p>",
        "id": 219215915,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607439500
    }
]