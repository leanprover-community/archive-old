[
    {
        "content": "<p>Hello. I'm trying to fine-tune the parameters of an inductive variant but hit a type error. Is there a coersion trick I need?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Q</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"k\">else</span> <span class=\"n\">Q</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">ite</span> <span class=\"bp\">↥</span><span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">Q</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">Q</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213705756,
        "sender_full_name": "SnowFox",
        "timestamp": 1603026553
    },
    {
        "content": "<p>I know I can do <code>inductive Q | a (b : bool) (c : if b then nat else unit)</code> but this doesn't suffice for my use case.</p>",
        "id": 213705826,
        "sender_full_name": "SnowFox",
        "timestamp": 1603026709
    },
    {
        "content": "<p>I don't think this is valid in any schema for inductive types I've ever seen</p>",
        "id": 213705895,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603026841
    },
    {
        "content": "<p>what would the recursor look like?</p>",
        "id": 213706089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603027121
    },
    {
        "content": "<p>You have to do <code>inductive Q | a (b : bool) (c : if b then nat else unit)</code>. But you can still define a wrapper function that has the type you want</p>",
        "id": 213706090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603027121
    },
    {
        "content": "<p>My real code for reference. This works, but I want to encode that <code>rs3</code> isn't unit but doesn't exist for all other operations. Similarly, I want to inline <code>reg_imm</code> which is currently <code>inductive reg_imm | register reg | imm int</code>. But I'm fine either way on the <code>reg_imm</code> case because I can just <code>coe</code> reg and <code>int</code> to it respectively.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">arith</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">arith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"o\">:</span> <span class=\"n\">reg</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">rs2_imm</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"n\">xor</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"o\">,</span> <span class=\"n\">shiftl</span><span class=\"o\">,</span> <span class=\"n\">shiftr</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">]</span> <span class=\"k\">then</span> <span class=\"n\">reg_imm</span> <span class=\"k\">else</span> <span class=\"n\">reg</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">rs3</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"n\">fmadd</span><span class=\"o\">,</span> <span class=\"n\">fnmadd</span><span class=\"o\">,</span> <span class=\"n\">fmsub</span><span class=\"o\">,</span> <span class=\"n\">fnmsub</span><span class=\"o\">]</span> <span class=\"k\">then</span> <span class=\"n\">reg</span> <span class=\"k\">else</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213706111,
        "sender_full_name": "SnowFox",
        "timestamp": 1603027196
    },
    {
        "content": "<p>Could you elaborate about the wrapper function? Not sure if it'd apply here. The easiest hack I can see as sugar for the consumer is to use <code>opt_param unit ()</code> in place of <code>unit</code> but I still need to discard it when matching.</p>",
        "id": 213706224,
        "sender_full_name": "SnowFox",
        "timestamp": 1603027343
    },
    {
        "content": "<p>I'm perfectly fine to just discard it, I'm not matching it too many times. Just wanted to know if I could avoid it.</p>",
        "id": 213706227,
        "sender_full_name": "SnowFox",
        "timestamp": 1603027373
    },
    {
        "content": "<p>You could have <code>rs2</code> and <code>rs3</code> in a type like <code>arith_args : arith -&gt; Type</code> defined by pattern matching</p>",
        "id": 213706290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603027448
    },
    {
        "content": "<p>this seems a little smelly though</p>",
        "id": 213706294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603027459
    },
    {
        "content": "<p>Why not just pretend you're writing Haskell</p>",
        "id": 213706375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603027606
    },
    {
        "content": "<p>and then try to factor out as much repetition as possible</p>",
        "id": 213706390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603027633
    },
    {
        "content": "<p>I guess I'll go with the code above with <code>opt_param unit ()</code>. Thanks anyway.</p>",
        "id": 213706395,
        "sender_full_name": "SnowFox",
        "timestamp": 1603027655
    },
    {
        "content": "<p>I am trying to factor out the repetition here :)</p>",
        "id": 213706398,
        "sender_full_name": "SnowFox",
        "timestamp": 1603027663
    },
    {
        "content": "<p>e.g. <code>op</code> can have three variants depending on which kind of <code>rs2_imm</code> and <code>rs3</code> it takes</p>",
        "id": 213706448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603027697
    },
    {
        "content": "<p>right, but you're using way too powerful features to do so. You skipped the step \"pretend you're writing in Haskell\"</p>",
        "id": 213706453,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603027715
    },
    {
        "content": "<p>I'm not sure what you're proposing here. I did start with less powerful tools. I'm trying to reduce repetition and have done so. The only caveat which remained is that the last parameter doesn't belong in most cases but doesn't deserve its own variant.</p>",
        "id": 213706713,
        "sender_full_name": "SnowFox",
        "timestamp": 1603028135
    },
    {
        "content": "<p>combine the <code>op</code> and <code>rs2_imm</code> and <code>rs3</code> fields into one type, with three constructors</p>",
        "id": 213706883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603028377
    },
    {
        "content": "<p>It just seems to me that with putting <code>if then else</code> in the middle of your types, the best case scenario is that the <code>if</code>s always reduce and you end up with something no harder to use than if you wrote something Haskell-style</p>",
        "id": 213706961,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603028469
    },
    {
        "content": "<p>Or just throw everything into one <code>arg</code> type, that can be all of those things. That's what most assemblers do</p>",
        "id": 213707261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603028922
    },
    {
        "content": "<p>I had this earlier too but felt it too verbose.</p>",
        "id": 213707273,
        "sender_full_name": "SnowFox",
        "timestamp": 1603028957
    },
    {
        "content": "<p>Hmm. This was unexpected to fail.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Q</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">ℕ</span> <span class=\"k\">else</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Q.a</span> <span class=\"mi\">0</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Q.a</span> <span class=\"n\">b</span> <span class=\"o\">())</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- Lean doesn't know b /= 0</span>\n</code></pre></div>",
        "id": 213708840,
        "sender_full_name": "SnowFox",
        "timestamp": 1603031508
    },
    {
        "content": "<p>I expected the pattern matching to recognize that if a parameter's type is assumed, then the condition must hold, constraining in this case <code>b</code>. :/</p>",
        "id": 213708953,
        "sender_full_name": "SnowFox",
        "timestamp": 1603031663
    },
    {
        "content": "<p>Even if you had a hypothesis <code>h : b /= 0</code> in the context, it would still fail</p>",
        "id": 213708985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603031734
    },
    {
        "content": "<p>because <code>if b = 0 then ℕ else unit</code> would not be <em>definitionally</em> equal to <code>unit</code></p>",
        "id": 213709029,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603031768
    },
    {
        "content": "<p>so you would need to insert a cast along (a proof of) the propositional equality <code>(if b = 0 then ℕ else unit) = unit</code></p>",
        "id": 213709041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603031805
    },
    {
        "content": "<p>and that cast will cause headaches when you want to prove things about it later</p>",
        "id": 213709048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603031822
    },
    {
        "content": "<p>This issue only goes away when the <code>if then else</code> <em>reduces</em> to one of the branches--when precisely that happens depends on the <code>decidable</code> instance for the condition, but in your original example, it would only happen once <code>op</code> is a constructor</p>",
        "id": 213709115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603031892
    },
    {
        "content": "<p>and at that point, you are basically forced to treat the type the same way as if it had a separate constructor for each value of <code>op</code>, since you had to do <code>cases</code> on <code>op</code> in order to get the types of the fields to reduce</p>",
        "id": 213709142,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603031946
    },
    {
        "content": "<p>That's why I said the best case scenario with this approach is that you get back what you would have had with the simple approach anyways</p>",
        "id": 213709151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603031968
    },
    {
        "content": "<p>To be more specific; what I was trying to do was match <code>| (arith op rd rs1 (rs2 : reg) ())</code> which I expected should imply <code>(rs3 : unit)</code> and <code>op \\in ..</code> for this branch.</p>",
        "id": 213709158,
        "sender_full_name": "SnowFox",
        "timestamp": 1603031978
    },
    {
        "content": "<p>This is exactly an IFF, lacking the inverse implication. :/</p>",
        "id": 213709216,
        "sender_full_name": "SnowFox",
        "timestamp": 1603032036
    },
    {
        "content": "<p>You could write a custom recursor which takes hypotheses of this form. But the application <code>arith op rd rs1 (rs2 : reg) ()</code> is <em>still ill-typed</em> even when you \"know\" that <code>op \\in ...</code></p>",
        "id": 213709246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603032111
    },
    {
        "content": "<p>If you replace the variable <code>op</code> by a specific constructor then it could be well-typed</p>",
        "id": 213709312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603032172
    },
    {
        "content": "<p>(and you wouldn't need the <code>( _ : reg)</code> part)</p>",
        "id": 213709319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603032190
    },
    {
        "content": "<p>Right, but then we're manually matching every case which is what I was trying to avoid. :/</p>",
        "id": 213709336,
        "sender_full_name": "SnowFox",
        "timestamp": 1603032241
    },
    {
        "content": "<p>New plan; inline the op splits and call a helper. <em>shrugs</em></p>",
        "id": 213709469,
        "sender_full_name": "SnowFox",
        "timestamp": 1603032399
    },
    {
        "content": "<p>You could have another sub-inductive type to chunk up the different classes of arith op</p>",
        "id": 213712711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603036896
    },
    {
        "content": "<p>or multiple arith variants in the top level instruction inductive type</p>",
        "id": 213712719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603036916
    },
    {
        "content": "<p>Each variation I try has more implications than I'd like... :/</p>",
        "id": 213713775,
        "sender_full_name": "SnowFox",
        "timestamp": 1603038367
    },
    {
        "content": "<p>I have had and will just return to using two arith variants.</p>",
        "id": 213714293,
        "sender_full_name": "SnowFox",
        "timestamp": 1603039136
    },
    {
        "content": "<p>You can also map your one inductive type to multiple inductive types for categorization along different axes</p>",
        "id": 213714688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603039746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Current code -&gt; <a href=\"https://gist.github.com/4d56511885f5b44514b0fcf006a5546a\">https://gist.github.com/4d56511885f5b44514b0fcf006a5546a</a></p>",
        "id": 213715600,
        "sender_full_name": "SnowFox",
        "timestamp": 1603040993
    },
    {
        "content": "<p>Note the redundancies of <code>arith</code> <code>arith_f</code> and <code>atomic_op</code>.</p>",
        "id": 213715646,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041007
    },
    {
        "content": "<p>However, a really really neat detail of Lean which I didn't catch until just now is that names can be shared between types. I.e. <code>add</code> is defined in all of these, yet Lean knows which one to match based on the types. :)</p>",
        "id": 213715686,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041085
    },
    {
        "content": "<p>I mean, overlapping names in <code>open arith arith_f</code></p>",
        "id": 213715753,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041142
    },
    {
        "content": "<p>If only I could share the <code>arith</code> name inside the <code>inst</code> variants... the register types would distinguish the cases.</p>",
        "id": 213715832,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041253
    },
    {
        "content": "<p><code>arith_f</code> is fine though</p>",
        "id": 213715839,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041270
    },
    {
        "content": "<p>Wait. Can open rename bindings? If so, then this might be viable for consumers? :O</p>",
        "id": 213715858,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041314
    },
    {
        "content": "<p>I think the syntax is <code>open arith (renaming foo -&gt; bar)</code></p>",
        "id": 213715869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603041341
    },
    {
        "content": "<p><code>open inst (renaming arith_f -&gt; arith)</code> in this case.</p>",
        "id": 213715919,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041373
    },
    {
        "content": "<p>This looks like it might just work. :D</p>",
        "id": 213715935,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041398
    },
    {
        "content": "<p>And yeah, if the same name is available in multiple open namespaces then Lean will make some effort to infer which one is needed based on the types</p>",
        "id": 213715956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603041438
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">arith</span> <span class=\"n\">arith_f</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"kn\">renaming</span> <span class=\"n\">arith_f</span> <span class=\"bp\">→</span> <span class=\"n\">arith</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">arith</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">reg</span> <span class=\"n\">integer</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n<p>Close! It doesn't know which to pick between <code>arith_f.add</code> and <code>arith.add</code>. Despite the register types forcing <code>arith.add</code>.</p>",
        "id": 213716061,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041586
    },
    {
        "content": "<p>I might revert to the clearly distinguished cases and just rename the variants to overload it. :)</p>",
        "id": 213716147,
        "sender_full_name": "SnowFox",
        "timestamp": 1603041706
    },
    {
        "content": "<p>Yay. Moral of the story; match fat but simple. Overload the imports. :D</p>",
        "id": 213716362,
        "sender_full_name": "SnowFox",
        "timestamp": 1603042028
    }
]