[
    {
        "content": "<p>Do we know that Grp (the category of groups) is not a Cartesian Closed Category (CCC)?</p>",
        "id": 200972836,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592282631
    },
    {
        "content": "<p>this boils down to producing three groups A, B, C with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∗</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>C</mi><mo>≆</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>×</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>×</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A \\ast B) \\times C \\ncong (A \\times C) \\ast (B \\times C)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.09657em;vertical-align:-0.30274em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">≆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 200973158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592283025
    },
    {
        "content": "<p>I think this could be a fun kata</p>",
        "id": 200973177,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592283070
    },
    {
        "content": "<p>well the mathlib in CW isn't up to date</p>",
        "id": 200973184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592283089
    },
    {
        "content": "<p>btw A = B = C1, C = C2, by cardinality arguments</p>",
        "id": 200973198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592283120
    },
    {
        "content": "<p>I think it's easier to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>≃</mo><msup><mi>X</mi><mn>1</mn></msup><mo>=</mo><msup><mi>X</mi><mn>0</mn></msup><mo>≃</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X \\simeq X^1 = X^0 \\simeq 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, which shows that any CCC with a zero object is trivial.</p>",
        "id": 201197044,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1592426213
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/10290/can-a-topos-ever-be-an-abelian-category\">https://mathoverflow.net/questions/10290/can-a-topos-ever-be-an-abelian-category</a></p>",
        "id": 201199032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592427199
    },
    {
        "content": "<p>Once it's in mathlib, someone should post a comment to Reid's MO post. :-)</p>",
        "id": 201217868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592440921
    },
    {
        "content": "<p>just 10 years later</p>",
        "id": 201217954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592440984
    },
    {
        "content": "<p>We need an \"is_trivial\" predicate for categories</p>",
        "id": 201229249,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592457899
    },
    {
        "content": "<p>is it the same as \"category equivalence to 1\"?</p>",
        "id": 201229260,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592457940
    },
    {
        "content": "<blockquote>\n<p>We need an \"is_trivial\" predicate for categories</p>\n</blockquote>\n<p>Why? </p>\n<p>I remember once noting that in stark contrast to eg groups or graphs, there are no lists of finite categories of small size (that I know of, at least). Maybe it's because classifying them up to equivalence is the correct thing, not isomorphism? Nobody talks about the classification of categories of size at most 6, whatever size means</p>",
        "id": 201231707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592461586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Grp.20is.20not.20CCC/near/201231707\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>We need an \"is_trivial\" predicate for categories</p>\n</blockquote>\n<p>Why? </p>\n</blockquote>\n<p>to formalize the statement \"any CCC with a zero object is trivial\"</p>",
        "id": 201231839,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592461763
    },
    {
        "content": "<p>Why is that statement ever of any use?</p>",
        "id": 201232341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592462294
    },
    {
        "content": "<p>It's just a zany example sheet question</p>",
        "id": 201232364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592462324
    },
    {
        "content": "<p>Yeah, <code>is_trivial C</code> is surely just <code>C ≌ punit</code>.</p>",
        "id": 201247256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592473642
    },
    {
        "content": "<p>what would the characteristic properties be?</p>",
        "id": 201247344,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592473696
    },
    {
        "content": "<p>maybe something like <code>\\forall x y : C, unique (X \\hom Y)</code>?</p>",
        "id": 201247378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592473711
    },
    {
        "content": "<p>that looks more like a subsingleton than a singleton</p>",
        "id": 201247982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592474231
    },
    {
        "content": "<p>not sure which is more appropriate in this situation though</p>",
        "id": 201248012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592474254
    },
    {
        "content": "<p>the counter-example is <code>discrete bool</code></p>",
        "id": 201248186,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592474389
    },
    {
        "content": "<p>counterexample to what? I'm not sure which definition you are working with</p>",
        "id": 201248280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592474442
    },
    {
        "content": "<p><code>discrete bool</code> is a category that satisfies the <code>subsingleton</code> condition but is not trivial</p>",
        "id": 201248358,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592474502
    },
    {
        "content": "<p><code>discrete bool</code> looks equivalent to punit to me, if I understand categorical equivalence correctly</p>",
        "id": 201248446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592474537
    },
    {
        "content": "<p>in fact that's the canonical example when showing that equivalence is not the same as isomorphism</p>",
        "id": 201248492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592474577
    },
    {
        "content": "<p>No, it isn't, because if you send * to ff, tt will be sent to * and then back to ff, which is not isomorphic to tt</p>",
        "id": 201248516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592474597
    },
    {
        "content": "<p>Mario, I think you're thinking <code>indiscrete bool</code> (which we don't have) but which is equivalent to <code>punit</code>.</p>",
        "id": 201248554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592474620
    },
    {
        "content": "<p><code>#Hom(ff,tt) = 0</code> while <code>#Hom(*,*) = 1</code></p>",
        "id": 201248563,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592474627
    },
    {
        "content": "<p>I think you are right</p>",
        "id": 201248566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592474631
    },
    {
        "content": "<p>theorem: <code>C</code> is trivial iff <code>C</code> is <em>isomorphic</em> to <code>indiscrete C</code></p>",
        "id": 201248616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592474651
    },
    {
        "content": "<p>is a group trivial as a one-object category?</p>",
        "id": 201248677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592474682
    },
    {
        "content": "<p>is the empty category trivial?</p>",
        "id": 201248753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592474737
    },
    {
        "content": "<p>it is not equivalent to punit but it is isomorphic to <code>indiscrete empty</code></p>",
        "id": 201248853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592474798
    },
    {
        "content": "<p>revised theorem: <code>C</code> is trivial iff <code>C</code> is nonempty and isomorphic to <code>indiscrete C</code></p>",
        "id": 201249561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592475313
    },
    {
        "content": "<p>It seems you fell into the old trap of characterising \"pretrivial\" categories! That gives (-1)-categories, whereas you want (-2)-categories</p>",
        "id": 201250083,
        "sender_full_name": "David Wärn",
        "timestamp": 1592475665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> what do those terms mean in English?</p>",
        "id": 201250846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592476212
    },
    {
        "content": "<p>Equivalence means bijective on hom sets and bijective on iso classes of objects, so equivalent to trivial means one iso class of objects and a unique iso between each pair</p>",
        "id": 201251282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592476548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Grp.20is.20not.20CCC/near/201250846\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> what do those terms mean in English?</p>\n</blockquote>\n<p>I was just observing that this is the \"too simple to be simple\" thing. When you define, say, connected graphs, the obvious thing to say is \"for any two vertices there is a path\", but you don't want the empty graph to be connected. It's the relation between subsingleton and singleton. I'm using \"pretrivial\" analogously to mathlib's \"preconnected\" and \"preirreducible\", so \"pretrivial\" is to \"trivial\" what \"subsingleton\" is to \"singleton\".</p>\n<p>Roughly speaking, and working up to equivalence, if you accept that a (-2)-category is just <code>punit</code>, then a (-1)-category is a category where all the hom-sets are (-2)-categories, i.e. for any two objects there is a unique hom, i.e. the category is <code>punit</code> or <code>empty</code>. Then a 0-category is where the hom-sets are (-1)-categories, i.e. <code>punit</code> or <code>empty</code>, so a 0-category is a discrete category. Then a 1-category is just an ordinary category.</p>",
        "id": 201252692,
        "sender_full_name": "David Wärn",
        "timestamp": 1592477657
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/4924\">https://github.com/leanprover-community/mathlib/pull/4924</a></p>",
        "id": 215889737,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604689427
    },
    {
        "content": "<p>oops I linked to the wrong MO post :)</p>",
        "id": 215889753,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604689435
    }
]