[
    {
        "content": "<p>Is there a tactic for splitting all product-like hypotheses? E.g. for the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>the tactic would produce</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"n\">Q</span>\n<span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">i_1</span>\n<span class=\"n\">j_1</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">j_2</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 237590994,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620263895
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cases_matching%20/%20casesm\">https://leanprover-community.github.io/mathlib_docs/tactics.html#cases_matching%20/%20casesm</a> or the next one maybe</p>",
        "id": 237591627,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620264574
    },
    {
        "content": "<p>Thanks! This doesn't do exactly what I want (I'd like to split things like <code>∀ x, P x ∧ Q x</code> as well), so I'll probably have to implement it myself.</p>",
        "id": 237591908,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620264818
    }
]