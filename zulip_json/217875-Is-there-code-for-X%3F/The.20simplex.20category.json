[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">simplicial_sigma</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"k\">if</span> <span class=\"n\">htk</span> <span class=\"o\">:</span> <span class=\"n\">t.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">t.1</span> <span class=\"k\">else</span> <span class=\"n\">t.1.succ</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Do we have this function in Lean already? I need to know some API for it for an experimental version of group cohomology, which I am trying to make a concrete model of in Lean 3 to see just how far we can get nowadays. I think it would be interesting to pit Lean 4 against Lean 3 for a definition of group cohomology. We mathematicians seem to be getting a good understanding of how to encode our ideas in your type theory and a Lean 3 definition of group cohomology could be regarded as a blueprint for a port to Lean 4.</p>",
        "id": 240718635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622318679
    },
    {
        "content": "<p>This is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ_above\">docs#fin.succ_above</a> (I think)</p>",
        "id": 240718656,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622318729
    },
    {
        "content": "<p>What tools do we need in Lean 4 to get a spectral sequence for group cohomology?</p>",
        "id": 240718659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622318735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/The.20simplex.20category/near/240718656\">said</a>:</p>\n<blockquote>\n<p>This is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ_above\">docs#fin.succ_above</a> (I think)</p>\n</blockquote>\n<p>maybe upto composition with a cast</p>",
        "id": 240718721,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622318829
    },
    {
        "content": "<p>Why the heck is there an assumption <code>p \\le n</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ_above\">docs#fin.succ_above</a> ? Why can't <code>p</code> just be a <code>nat</code>? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `succ_above' rfl p` is the embedding `fin i ↪o fin i.succ` with a hole around `min p i`.</span>\n<span class=\"sd\">In other words, it sends t to t if t &lt; p and t.succ otherwise. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fin.succ_above'</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">fin</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">i</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">fin</span> <span class=\"n\">i.succ</span> <span class=\"o\">:=</span> <span class=\"n\">fin.succ_above</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span>\n  <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">nat.lt_succ_iff.mpr</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">i</span><span class=\"o\">⟩)</span> <span class=\"k\">in</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Isn't my variant a more flexible object? What is all this cast_succ nonsense?</p>",
        "id": 240720778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622321971
    },
    {
        "content": "<p>We are imagining that <code>this</code> will range through the i+1 inclusions \"leave a hole at <code>p : fin i.succ</code> but if we model the map as \"if you pass the <code>_ &lt; p</code> test I will leave you alone, otherwise I will apply <code>succ</code>\" then there is no clear reason to me why the fact that all these tests give the same answer the moment <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>≥</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">p\\geq i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is relevant.</p>",
        "id": 240721209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622322417
    },
    {
        "content": "<p>Kevin, is your goal to define group cohomology with homogeneous cocycles? If so, you could write down the classifying space of a group as a simplicial set, and use the existing simplicial machinery... (This is all talking about lean 3 with current mathlib, of course)</p>",
        "id": 240723913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622325791
    },
    {
        "content": "<p>We'll port the alternating coface complex from LTE to mathlib soon, and then you can get group cohomology \"for free\"</p>",
        "id": 240723978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622325895
    },
    {
        "content": "<p>If you make the classifying space construction functorial as well, then you get the change of group operations easily as well</p>",
        "id": 240724011,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622325952
    },
    {
        "content": "<p>(well, except for corestriction)</p>",
        "id": 240724065,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622325986
    },
    {
        "content": "<p>One of the major annoyances I had with the simplicial stuff in lean 3 is the fact that <code>fin n</code> is not universe polymorphic. I wonder if we can have a universe polymorphic <code>fin n</code> right from the start in lean 4 without <code>ulift</code> nonsense</p>",
        "id": 240724491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622326655
    }
]