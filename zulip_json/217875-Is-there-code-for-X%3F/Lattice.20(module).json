[
    {
        "content": "<p>Is there code for this kind of lattices? <a href=\"https://en.m.wikipedia.org/wiki/Lattice_(module)\">https://en.m.wikipedia.org/wiki/Lattice_(module)</a></p>\n<p>I'm interested in proving things about its endomorphisms...</p>",
        "id": 257821563,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634380812
    },
    {
        "content": "<p>That definition does not exist in Lean (as far as I know), but it would not be difficult to make.</p>",
        "id": 257821636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634380917
    },
    {
        "content": "<p>Yup, we have all the ingredients for it.</p>",
        "id": 257824042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634383344
    },
    {
        "content": "<p>You can just use something like <code>submodule int E</code></p>",
        "id": 257856404,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634413937
    },
    {
        "content": "<p>Is this definition good enough to get started?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">module_of_subring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">module.lattice</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n    <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">is_basis</span><span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure if this should be a structure or a class, if I should use parameters or the keyword \"extends\", ...</p>",
        "id": 258275916,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634679177
    },
    {
        "content": "<p>I think your <code>module_of_subring</code> might just be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.restrict_scalars\">docs#submodule.restrict_scalars</a>?</p>",
        "id": 258296633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634691273
    },
    {
        "content": "<p>But since it carries data it's not the only way to fill that sorry</p>",
        "id": 258296693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634691332
    },
    {
        "content": "<p>I figured out that what I need is <code>[is_scalar_tower R K V]</code>. This needs an instance <code>[has_scalar R V]</code>,  I made one, but Lean doesn't find it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_scalar_R_V</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">_inst_3.to_fun</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">module.lattice</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n    <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">is_basis</span><span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    failed to synthesize type class instance for</span>\n<span class=\"cm\">    R : Type ?,</span>\n<span class=\"cm\">    K : Type ?,</span>\n<span class=\"cm\">    V : Type ?,</span>\n<span class=\"cm\">    _inst_1 : integral_domain R,</span>\n<span class=\"cm\">    _inst_2 : field K,</span>\n<span class=\"cm\">    _inst_3 : algebra R K,</span>\n<span class=\"cm\">    _inst_4 : is_fraction_ring R K,</span>\n<span class=\"cm\">    _inst_5 : add_comm_group V,</span>\n<span class=\"cm\">    _inst_6 : module K V</span>\n<span class=\"cm\">    ⊢ has_scalar R V</span>\n<span class=\"cm\">    -/</span>\n</code></pre></div>",
        "id": 258321691,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634713578
    }
]