[
    {
        "content": "<p>Hello! Suppose that one have, for example, a group G and its subgroup H in a mathematical sense, but both G and H have type Type. For example we can define special linear group as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SL</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">GL</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">x.det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I think it would be convenient to have class denoting that one type can be considered as a subgroup of another. Maybe something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_subgroup</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">H</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">coe_inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mem_1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">mem_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">mem_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I haven't found this in mathlib. Is there a way to do this using an existing <code>subgroup</code> class or some other convenient way?</p>",
        "id": 308472273,
        "sender_full_name": "Vasily Nesterov",
        "timestamp": 1667854711
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_sort\">docs#has_coe_to_sort</a> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup\">docs#subgroup</a> so you can use terms of <code>subgroup G</code> as if they were types themselves (you get the subtype associated to the carrier set). So you could define your <code>SL</code> as a term of <code>subgroup (GL n R)</code>.</p>",
        "id": 308474707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667855660
    },
    {
        "content": "<p>Alternatively, you can work with injective morphisms of groups</p>",
        "id": 308474760,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667855685
    },
    {
        "content": "<p>For arbitrary (not necessarily injective) coercion you may use <a href=\"https://github.com/leanprover-community/mathlib/pull/17048/files#diff-d4d5ac537b1b6e8a0b23ec79c1df79649054d51a602c65512161dc147c00334aR1346\">#17048</a></p>",
        "id": 308482836,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667859130
    },
    {
        "content": "<p>Thank you for the tips! I once again looked through what there is about this in mathlib, but some questions are still open. In this case objects such as GL and SL are already defined, and I do not want to change them by define SL as a subgroup of GL and then use coercion to Sort. <br>\nAnother approach is to use <code>coe_is_monoid_hom</code>, but this requires H to already be a group, and I think it would be more natural to prove that H is a group <em>from</em> the <code>is_subgroup H G</code> as  in <code>subgroup.to_group</code>. </p>\n<p>So my question is: assume that I have class <code>is_subgroup</code> as described above. I can define the function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subgroup_of_type</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">H</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which take the type H and produce the corresponding object of type <code>subgroup G</code>. But is it possible to mark this as a coercion? Something like a \"dependent\" coercion.</p>",
        "id": 308963300,
        "sender_full_name": "Vasily Nesterov",
        "timestamp": 1668077780
    },
    {
        "content": "<p>You can easily construct a monoid_hom <code>H →* G</code>  from your <code>is_subgroup H G</code>, then you can take <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.range\">docs#monoid_hom.range</a></p>",
        "id": 309010586,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668093422
    },
    {
        "content": "<p>But I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.special_linear_group.group\">docs#matrix.special_linear_group.group</a> should probably be made a subgroup.</p>",
        "id": 309011184,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668093595
    },
    {
        "content": "<blockquote>\n<p>But is it possible to mark this as a coercion? Something like a \"dependent\" coercion.</p>\n</blockquote>\n<p>You want <code>H : Type</code> be coerced to <code>subgroup_of_type H : subgroup G</code>? That seems pretty strange and I don't think Lean can infer G.</p>",
        "id": 309011616,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668093720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/is_subgroup.20H.20G/near/309011184\">said</a>:</p>\n<blockquote>\n<p>But I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.special_linear_group.group\">docs#matrix.special_linear_group.group</a> should probably be made a subgroup.</p>\n</blockquote>\n<p>A subgroup of what? <code>units (matrix n n R)</code>?</p>",
        "id": 309066650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668109875
    },
    {
        "content": "<p>Oh I see special_linear_group is currently a subtype of <code>matrix n n R</code> which may be easier to work with than <code>unit (matrix n n R)</code>.</p>",
        "id": 309067484,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668110135
    }
]