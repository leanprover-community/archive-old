[
    {
        "content": "<p>We do not have semigroup morphisms in mathlib, right?</p>",
        "id": 208538755,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598868029
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom\">docs#monoid_hom</a>?</p>",
        "id": 208539173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598868283
    },
    {
        "content": "<p>yeah unfortunately we don't have them for semigroups</p>",
        "id": 208539206,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598868311
    },
    {
        "content": "<p>This is for monoids only it seems</p>",
        "id": 208539226,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598868327
    },
    {
        "content": "<p>Oh yes, this is not general enough.</p>",
        "id": 208539237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598868339
    },
    {
        "content": "<p>But we used to have them unbundled, I'm sure.</p>",
        "id": 208539258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598868354
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_mul_hom\">docs#is_mul_hom</a></p>",
        "id": 208539312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598868370
    },
    {
        "content": "<p>Even more general than semigroup.</p>",
        "id": 208539327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598868384
    },
    {
        "content": "<p>Ok I do not plan to implement them but I'm proving results that are valid for them as well so I guess I'll just write some TODOs</p>",
        "id": 208539463,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598868494
    },
    {
        "content": "<p>what results?</p>",
        "id": 208539504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598868532
    },
    {
        "content": "<p>Some sufficient conditions for multiplication to be continuous in topological monoids</p>",
        "id": 208539549,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598868596
    },
    {
        "content": "<p>I guess there would be no harm in writing a bundled <code>mul_hom</code>, but we already used the <code>\\to*</code> notation for monoid homs. If it's just a few lemmas then perhaps one doesn't need notation at all?</p>",
        "id": 208540720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598869575
    },
    {
        "content": "<p>PS isn't multiplication by definition continuous in a topological monoid?</p>",
        "id": 208540760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598869613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Semigroup.20morphisms/near/208540760\">said</a>:</p>\n<blockquote>\n<p>PS isn't multiplication by definition continuous in a topological monoid?</p>\n</blockquote>\n<p>Yeah sure haha I mean just one of the two monoids is a priori a topological monoid, I did not give a precise answer because my point was really about semigroups, so I thought people did not care too much about other details</p>",
        "id": 208542217,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598870762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Semigroup.20morphisms/near/208540720\">said</a>:</p>\n<blockquote>\n<p>I guess there would be no harm in writing a bundled <code>mul_hom</code>, but we already used the <code>\\to*</code> notation for monoid homs. If it's just a few lemmas then perhaps one doesn't need notation at all?</p>\n</blockquote>\n<p>Yeah I think there is no need for notation! I do not have a lot of time to write bundled mul_homs and generalize lemmas for them but if someone wants to do it I think that'd be cool</p>",
        "id": 208542617,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598871073
    },
    {
        "content": "<p>the usual API for these things is just <code>id</code> and <code>comp</code>, plus maybe the fact that if you have an equiv between has_muls such that one of the maps is mul_hom, then so is the other one.</p>",
        "id": 208543825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598872040
    },
    {
        "content": "<p>Do you need much more than this?</p>",
        "id": 208543836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598872051
    },
    {
        "content": "<p>Presumably the approach here would be to replace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one'</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">mul_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_one'</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>and move some of the <code>monoid_hom.*</code> lemmas to <code>mul_hom.*</code>?</p>",
        "id": 212162623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601717165
    },
    {
        "content": "<p>Worth a shot!</p>",
        "id": 212165495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601721925
    },
    {
        "content": "<p>I've tried replacing the <code>monoid M</code> and <code>monoid N</code> assumptions by <code>has_mul M, has_one M</code> and <code>has_mul N, has_one N</code>.... that refactor is a disaster. I gave up.</p>",
        "id": 212165995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601722621
    },
    {
        "content": "<p>I've attempted to do this in <a href=\"https://github.com/leanprover-community/mathlib/issues/4423\">#4423</a></p>",
        "id": 212276254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601890286
    },
    {
        "content": "<p>It seems that homomorphisms are in dire need of some combination of metaprogramming or type classes</p>",
        "id": 212276801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601890577
    }
]