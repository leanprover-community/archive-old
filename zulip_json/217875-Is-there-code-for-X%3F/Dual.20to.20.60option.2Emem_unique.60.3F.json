[
    {
        "content": "<p>Do we already have something like this, a kind of dual to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.mem_unique\">docs#option.mem_unique</a>?  I tried <code>library_search</code> and it couldn't find anything.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">o1</span> <span class=\"n\">o2</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">o1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">o2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">o1</span> <span class=\"bp\">=</span> <span class=\"n\">o2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">option.mem_def</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>  <span class=\"n\">exact</span> <span class=\"n\">eq.trans</span> <span class=\"n\">h1</span> <span class=\"n\">h2.symm</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If not, is it worth adding to <code>data/option/basic</code>?  Under what name?</p>",
        "id": 266247666,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640687139
    },
    {
        "content": "<p>I would call it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.eq_of_mem_of_mem\">docs#option.eq_of_mem_of_mem</a></p>",
        "id": 266247767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640687224
    },
    {
        "content": "<p>Which doesn't exist yet...</p>",
        "id": 266247776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640687237
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11098\">#11098</a></p>",
        "id": 266248648,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640688034
    },
    {
        "content": "<p>it can be written more simply as <code>h1.trans h2.symm</code></p>",
        "id": 266248711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640688108
    },
    {
        "content": "<p>I think this theorem is more useful in the one sided form,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 266248810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640688181
    },
    {
        "content": "<p>Ah, <code>h1.trans h2.symm</code> is what I was looking for!  I didn't realise I could treat an expression of the form <code>a ∈ o1</code> like an equality without rewriting it first.</p>",
        "id": 266249447,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640688739
    },
    {
        "content": "<p>In that case I guess <code>eq_of_mem_of_mem</code> (or the one-sided version) is too trivial to be worth naming?</p>",
        "id": 266249662,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640688920
    },
    {
        "content": "<p>I don't mind having <code>option.mem.bi_unique</code></p>",
        "id": 266275900,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640711820
    },
    {
        "content": "<p>(and <code>option.mem.right_unique</code>)</p>",
        "id": 266275918,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640711840
    },
    {
        "content": "<p>I like <code>eq_of_mem_of_mem</code> better as a name.</p>",
        "id": 266293736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640726616
    },
    {
        "content": "<p>I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relator.bi_unique\">docs#relator.bi_unique</a></p>",
        "id": 266296823,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640729354
    }
]