[
    {
        "content": "<p>Every functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"script\">C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathscr{C}^{op} \\implies \\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.724em;vertical-align:-0.024em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.1689em;\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span> is a colimit of functors of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mo><mi mathvariant=\"script\">C</mi></msub><mo stretchy=\"false\">(</mo><mo>−</mo><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}_{\\mathscr{C}}(-, X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33999999999999997em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathscr mtight\" style=\"margin-right:0.1689em;\">C</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 205735047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596387288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 205735059,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596387318
    },
    {
        "content": "<p>I think I proved it in a branch at some point but I don't know the current status</p>",
        "id": 205735276,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596387707
    },
    {
        "content": "<p>I'd also like to see this in mathlib, and I haven't seen it done anywhere. I'd particularly like to see the more general version <a href=\"/user_uploads/3121/sI546dKU_WLuPWeHXPC3rpd5/image.png\">image.png</a>, from which the original follows nicely (just set A=yoneda)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sI546dKU_WLuPWeHXPC3rpd5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sI546dKU_WLuPWeHXPC3rpd5/image.png\"></a></div>",
        "id": 205735850,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596388798
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/adjunctions/near/147503855\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/adjunctions/near/147503855</a> but I don't know what happened to the branch</p>",
        "id": 205735981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596389037
    },
    {
        "content": "<p>what is the integral sign in the picture?</p>",
        "id": 205736024,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596389070
    },
    {
        "content": "<p>category of elements</p>",
        "id": 205736031,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596389090
    },
    {
        "content": "<p>I found the branch locally, but obviously it's super old.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gi\">+def cocontinuous_equiv : (C ⥤ D) ≌ cocontinuous_functor.{(v+1) u₂ v} (presheaf C) D :=</span>\n</code></pre></div>",
        "id": 205736087,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596389174
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/old-adjunctions\">https://github.com/leanprover-community/mathlib/tree/old-adjunctions</a> in case it's of interest</p>",
        "id": 205736589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596389994
    },
    {
        "content": "<p>Haha I forgot about this proof</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    dsimp [canonical_diagram.cocone, canonical_diagram,</span>\n<span class=\"cm\">      canonical_diagram.colimit_cocone, id_iso_yoneda_extension_yoneda,</span>\n<span class=\"cm\">      adjunction.nat_iso_equiv, adjunction.nat_trans_equiv,</span>\n<span class=\"cm\">      equiv.refl, equiv.symm, equiv.trans, iso.hom_equiv_of_isos,</span>\n<span class=\"cm\">      adjunction.mate, adjunction.nat_equiv, adjunction.nat_equiv&#39;,</span>\n<span class=\"cm\">      adjunction.hom_equiv, adjunction.id, adjunction.adjunction_of_equiv_left,</span>\n<span class=\"cm\">      adjunction.adjunction_of_equiv, adjunction.left_adjoint_of_equiv,</span>\n<span class=\"cm\">      yoneda_extension_adj, yoneda_extension_e,</span>\n<span class=\"cm\">      equiv.subtype_equiv_subtype, equiv.subtype_equiv_of_subtype, equiv.Pi_congr_right,</span>\n<span class=\"cm\">      equiv.arrow_congr,</span>\n<span class=\"cm\">      is_colimit.equiv,</span>\n<span class=\"cm\">      restricted_yoneda, yoneda_extension, yoneda_extension_obj,</span>\n<span class=\"cm\">      restricted_yoneda_yoneda_iso_id,</span>\n<span class=\"cm\">      nat_iso.of_components, iso_of_equiv, yoneda_equiv], -/</span>\n</code></pre></div>",
        "id": 205736665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596390083
    },
    {
        "content": "<p>I've chucked together a quick version of this (both the theorem I posted and the original result): <a href=\"https://github.com/b-mehta/topos/blob/master/src/category/colimits.lean\">https://github.com/b-mehta/topos/blob/master/src/category/colimits.lean</a> if people are interested - I'll PR it to mathlib hopefully soon</p>",
        "id": 206276352,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596816675
    },
    {
        "content": "<p>Soon finally came :) <a href=\"https://github.com/leanprover-community/mathlib/pull/4401\">https://github.com/leanprover-community/mathlib/pull/4401</a></p>",
        "id": 212929676,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602356026
    }
]