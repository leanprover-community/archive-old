[
    {
        "content": "<p>I have the following subtype and want to show it satisfies associativity of addition. As the definitions of addition are the same for the subtype, is there a better way of expressing <code>lemma even_natural_number.add_assoc</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_natural_number</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subtype</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_natural_number.add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">even_natural_number</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even_natural_number</span>\n  <span class=\"o\">:=</span> <span class=\"n\">subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">dvd_add</span> <span class=\"n\">a.property</span> <span class=\"n\">b.property</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">even_natural_number</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">even_natural_number.add</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Is there a one liner here...?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">even_natural_number.add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">even_natural_number</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subtype.ext_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or is this the best way, I could see this failing if addition had a different definition to the base type</p>",
        "id": 310182958,
        "sender_full_name": "Ben",
        "timestamp": 1668512716
    },
    {
        "content": "<p>Additionally I am bit confused why this only works with the <code>import tactic</code> import. Removing that import and replacing with <code>import algebra.ring.divisibility</code> and <code>import data.subtype</code> causes the inference <code>dvd_add</code> and <code>add_assoc</code> to fail...?</p>",
        "id": 310183472,
        "sender_full_name": "Ben",
        "timestamp": 1668512895
    },
    {
        "content": "<p>You likely want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_monoid\">docs#function.injective.add_comm_monoid</a></p>",
        "id": 310185430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668513604
    },
    {
        "content": "<p>Ah would that then automatically derive <code>add_comm_monoid</code> for <code>even_natural_number</code>? How would I start that? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">enn_add_is_homo</span><span class=\"o\">:</span> <span class=\"n\">function.injective.add_comm_monoid</span> <span class=\"n\">even_natural_number.add</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n   <span class=\"c1\">-- todo</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 310191852,
        "sender_full_name": "Ben",
        "timestamp": 1668516040
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">even_natural_number.add</span> <span class=\"o\">:=</span>\n<span class=\"n\">function.injective.add_comm_monoid</span> <span class=\"n\">_</span> <span class=\"n\">subtype.coe_injective</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>or similar</p>",
        "id": 310193228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668516568
    },
    {
        "content": "<p>Ah that's cool! so that function effectively generates the structure definition without having to write all the members <span aria-label=\"mind blown\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"mind blown\">:mind_blown:</span></p>",
        "id": 310196384,
        "sender_full_name": "Ben",
        "timestamp": 1668517685
    }
]