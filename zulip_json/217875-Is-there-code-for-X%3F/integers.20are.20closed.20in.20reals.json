[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a statement like this in mathlib somewhere?</p>",
        "id": 237699571,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620322926
    },
    {
        "content": "<p>It's called is_closed.eq or something like that... Works with t2 instance</p>",
        "id": 237699737,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620323018
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_closed_eq\">docs#is_closed_eq</a></p>",
        "id": 237699824,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620323050
    },
    {
        "content": "<p>Ah wait not quite, but should be easy with that</p>",
        "id": 237699841,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620323056
    },
    {
        "content": "<p>I don't think that applies here -- right</p>",
        "id": 237699855,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620323062
    },
    {
        "content": "<p>Oh that's a Z, sorry yeah that's a bit different</p>",
        "id": 237699960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620323124
    },
    {
        "content": "<p>Presumably the correct formulation is to have a closed embedding from Z to R</p>",
        "id": 237700264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620323252
    },
    {
        "content": "<p>Here's how I ended up doing it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span><span class=\"n\">is_open_compl_iff</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">=</span> <span class=\"bp\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">),</span> <span class=\"n\">Ioo</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">mem_Ioo</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">floor</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">floor_le</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_floor_add_one</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hz‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hz‚ÇÅ</span> <span class=\"n\">hz‚ÇÇ</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_open_Union</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open_Ioo</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237700630,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620323404
    },
    {
        "content": "<p>I wanted to have a quick look at Zulip before resuming work after dinner. I saw this. I thought I should do it properly. Then I found a couple of API holes (also called rabbit holes). One hour later...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">uniform_space</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">uniform_space.mem_closure_iff_symm_ball</span>  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">symmetric_rel</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">‚à©</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mem_closure_iff_nhds_basis</span> <span class=\"o\">(</span><span class=\"n\">has_basis_nhds</span> <span class=\"n\">x</span><span class=\"o\">)],</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">uniform_space.mem_closure_iff_ball</span>  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">V</span> <span class=\"bp\">‚à©</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mem_closure_iff_nhds</span><span class=\"o\">,</span> <span class=\"n\">mem_nhds_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">V</span> <span class=\"n\">V_in</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V_in</span><span class=\"o\">,</span> <span class=\"n\">subset.refl</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V_in</span><span class=\"o\">,</span> <span class=\"n\">Vt</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nonempty.mono</span> <span class=\"o\">(</span><span class=\"n\">inter_subset_inter_left</span> <span class=\"n\">s</span> <span class=\"n\">Vt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">V_in</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_uniformity</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">separated_def.mp</span> <span class=\"o\">‚Äπ</span><span class=\"n\">separated_space</span> <span class=\"n\">X</span><span class=\"o\">‚Ä∫</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_uniformity_basis</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_uniformity</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">V</span> <span class=\"n\">V_in</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hs.mem_iff.mp</span> <span class=\"n\">V_in</span> <span class=\"k\">in</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hi</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_forall_symmetric</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">symmetric_rel</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_uniformity_basis</span> <span class=\"n\">has_basis_symmetric</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">uniform_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ball_inter_left</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">‚à©</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">ball_mono</span> <span class=\"o\">(</span><span class=\"n\">inter_subset_left</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ball_inter_right</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">‚à©</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"n\">ball_mono</span> <span class=\"o\">(</span><span class=\"n\">inter_subset_right</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_closed_of_spaced_out</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">V‚ÇÄ_in</span> <span class=\"o\">:</span> <span class=\"n\">V‚ÇÄ</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V‚ÇÄ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">is_closed</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">comp_symm_mem_uniformity_sets</span> <span class=\"n\">V‚ÇÄ_in</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">V‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">V‚ÇÅ_in</span><span class=\"o\">,</span> <span class=\"n\">V‚ÇÅ_symm</span><span class=\"o\">,</span> <span class=\"n\">h_comp</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_closed_of_closure_subset</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_closure_iff_ball</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"n\">V‚ÇÅ_in</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hy'</span><span class=\"o\">‚ü©,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_forall_symmetric</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">V</span> <span class=\"n\">V_in</span> <span class=\"n\">V_symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">inter_mem_sets</span> <span class=\"n\">V‚ÇÅ_in</span> <span class=\"n\">V_in</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hz'</span><span class=\"o\">‚ü©,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ball_inter_right</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hz</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"n\">hz'</span> <span class=\"n\">hy'</span> <span class=\"o\">(</span><span class=\"n\">h_comp</span> <span class=\"bp\">$</span> <span class=\"n\">mem_comp_of_mem_ball</span> <span class=\"n\">V‚ÇÅ_symm</span> <span class=\"o\">(</span><span class=\"n\">ball_inter_left</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_closed_of_spaced_out</span> <span class=\"o\">(</span><span class=\"n\">metric.uniformity_basis_dist.mem_of_mem</span> <span class=\"bp\">$</span> <span class=\"n\">one_half_pos</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"o\">‚ü®</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  p q : ‚Ñ§,</span>\n<span class=\"cm\">  h : (abs (p - q) : ‚Ñù) &lt; 1 / 2</span>\n<span class=\"cm\">  ‚ä¢ p = q</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237720579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620331650
    },
    {
        "content": "<p>If I remember correctly, there is a lemma that says that an integer of absolute value less than one is zero, though it might be for <code>nat.abs</code>.  I'm on mobile, though</p>",
        "id": 237722538,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620332594
    },
    {
        "content": "<p>I certainly hope this sorry is provable. But I have no interest at all in proving it. All the fun is above the example.</p>",
        "id": 237722877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620332758
    },
    {
        "content": "<p>Sure, I just felt proud, since I think that the lemma about abs was my first PRed <code>simp</code> lemma!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 237723482,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620333060
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/int/basic.html#int.eq_zero_iff_abs_lt_one\">https://leanprover-community.github.io/mathlib_docs/data/int/basic.html#int.eq_zero_iff_abs_lt_one</a></p>",
        "id": 237724193,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620333360
    },
    {
        "content": "<p>You never forget your first simp lemma...</p>",
        "id": 237724439,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620333454
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_closed_of_spaced_out</span> <span class=\"o\">(</span><span class=\"n\">metric.uniformity_basis_dist.mem_of_mem</span> <span class=\"bp\">$</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"o\">‚ü®</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">int.eq_zero_iff_abs_lt_one.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237724668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620333552
    },
    {
        "content": "<p>Indeed it does the job</p>",
        "id": 237724685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620333559
    },
    {
        "content": "<p>Note that I opened <a href=\"https://github.com/leanprover-community/mathlib/issues/7538\">#7538</a> containing all preliminaries for the above proof.</p>",
        "id": 237724747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620333600
    },
    {
        "content": "<p>Nice! I also used <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.eq_zero_iff_abs_lt_one\">docs#int.eq_zero_iff_abs_lt_one</a> for similar proofs :D</p>",
        "id": 237743250,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620341999
    }
]