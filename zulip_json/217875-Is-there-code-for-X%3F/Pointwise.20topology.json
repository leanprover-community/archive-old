[
    {
        "content": "<p>Where could such a lemma go?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">interior_mul_interior_subset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">interior</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">interior</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I'd say <code>topology.pointwise</code> but this doesn't exist yet.</p>",
        "id": 263920932,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638822959
    },
    {
        "content": "<p>This comes from <a href=\"https://github.com/leanprover-community/mathlib/issues/10648\">#10648</a></p>",
        "id": 263921632,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638823309
    },
    {
        "content": "<p>Create it?</p>",
        "id": 263943376,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638836173
    },
    {
        "content": "<p><code>topology.pointwise</code> or <code>topology.algebra.pointwise</code>?</p>",
        "id": 263943409,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638836196
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.top_closure_mul_self_eq\">docs#submonoid.top_closure_mul_self_eq</a> in <code>topology.algebra.monoid</code>.</p>",
        "id": 263943467,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638836255
    },
    {
        "content": "<p>Doesn't seem like a new file would do it. This stuff needs to be between lemmas about groups with continuous multiplication, and lemmas about topological groups. Both live in <code>topology.algebra.group</code>, so I'll land my lemmas there.</p>",
        "id": 263995227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638881217
    },
    {
        "content": "<p>While I'm at it, is the following true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">closure_mul_subset</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">closure</span> <span class=\"n\">t</span>  <span class=\"o\">:=</span>\n<span class=\"n\">closure_minimal</span> <span class=\"o\">(</span><span class=\"n\">set.mul_subset_mul</span> <span class=\"n\">subset_closure</span> <span class=\"n\">subset_closure</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"n\">is_closed_closure.mul</span> <span class=\"n\">is_closed_closure</span>\n</code></pre></div>\n<p>For it to work, I need that the multiplication of closed sets is a closed set, which sounds reasonable but I can't think of a proof.</p>",
        "id": 264003241,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638884975
    },
    {
        "content": "<p>Ah nope it's wrong. Thanks Analysis &amp; Topology Example Sheet 3.</p>",
        "id": 264003405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638885048
    },
    {
        "content": "<p>Which way round are you asking about/</p>",
        "id": 264003672,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638885169
    },
    {
        "content": "<p><code>closure (s * t) ⊆ closure s * closure t ⊆ closure (s * t) </code> doesn't look like lean will be happy to me</p>",
        "id": 264003754,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638885210
    },
    {
        "content": "<p>Ahah oops. I was being indecise.</p>",
        "id": 264003918,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638885285
    },
    {
        "content": "<p>The counterexample is <code>((λ x, x + 1/x) '' {n : ℕ | 0 &lt; n}) + ((λ x, -x) '' (univ : set ℕ))</code>.</p>",
        "id": 264004321,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638885456
    }
]