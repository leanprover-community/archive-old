[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ring_char_of_prime_eq_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hprime</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ring_char</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">A</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">ring_char.dvd</span> <span class=\"n\">hp0</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nat.prime</span> <span class=\"n\">at</span> <span class=\"n\">hprime</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:=</span> <span class=\"n\">hprime.2</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">hchar</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">char_p.ring_char_ne_one</span> <span class=\"n\">heq</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">heq</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there code for this?</p>",
        "id": 268759932,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1642713798
    },
    {
        "content": "<p>don't think there is</p>",
        "id": 268769238,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642718841
    },
    {
        "content": "<p>for your last cases <code>or.resolve_{left,right}</code> may help with the golf but this would be nice in  mathlib, somewhere within <code>char_p.basic</code> probably</p>",
        "id": 268769276,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642718871
    },
    {
        "content": "<p>Cool, will do :) ~Also I probably will add something for character of algebras~ nevermind I found it</p>",
        "id": 268847289,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1642774140
    }
]