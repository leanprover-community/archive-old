[
    {
        "content": "<p>Dear All,</p>\n<p>I am interested in proving the lemma below, but I am having a hard time.  Can someone help me find a proof?</p>\n<p>Thank you very much!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_lt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224662657,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612124557
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_le_tsum\">docs#tsum_le_tsum</a> which gets you almost all the way there :)</p>",
        "id": 224662782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612124759
    },
    {
        "content": "<p>I had seen it, but I got stuck when I wanted to extract an element from the sum...</p>",
        "id": 224663006,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612125058
    },
    {
        "content": "<p>I am also going to remove the unnecessary assumption <code>summable f</code></p>",
        "id": 224663024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612125104
    },
    {
        "content": "<p>Yeah this is still a bit messy even after tsum_le_tsum :-/ I would be tempted to define a new sequence h which is 0 away from i, and g(i)-f(i) at i, and then apply tsum_le_tsum to (f+h) and g.</p>",
        "id": 224663116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612125208
    },
    {
        "content": "<p>Ok, it seems a bit more laborious than I would have liked, but maybe it is simply a reflection of the fact that the API is not there yet...</p>",
        "id": 224663167,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612125252
    },
    {
        "content": "<p>Presumably there's some lemma which gives you <code>summable f</code> straight back after you removed it.</p>",
        "id": 224663170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612125261
    },
    {
        "content": "<p>Well, the summable <code>f</code> follows from <code>summable_of_nonneg_of_le</code> which is already there...  so that is only a minor issue...</p>",
        "id": 224663200,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612125349
    },
    {
        "content": "<p>API: Right -- there don't seem to be any results which give you that a sum is less than another sum. My proposal was the simplest way around this which I could think of.</p>",
        "id": 224663203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612125359
    },
    {
        "content": "<p>I'm getting an error with this code <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">add_comm_monoid</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>red squiggle under the first <code>∑'</code></p>",
        "id": 224663241,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612125364
    },
    {
        "content": "<p>Anyway, I'll give up for tonight and try again tomorroq!</p>\n<p>Thanks for your suggestions!</p>",
        "id": 224663252,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612125386
    },
    {
        "content": "<p>Adam, that is weird: it works for me with only that import...</p>",
        "id": 224663265,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612125412
    },
    {
        "content": "<p>Oh, just parens missing</p>",
        "id": 224663266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612125413
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_lt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224663270,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612125422
    },
    {
        "content": "<p>The code works fine for me too. Are you on an old mathlib?</p>",
        "id": 224663281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612125444
    },
    {
        "content": "<p>I just upgraded mathlib....</p>",
        "id": 224663290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612125455
    },
    {
        "content": "<p>I think Eric or someone changed priorities of sums a week or two ago.</p>",
        "id": 224663292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612125459
    },
    {
        "content": "<p>Maybe I'm on an old mathlib then!</p>",
        "id": 224663298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612125465
    },
    {
        "content": "<p>Oh, I upgraded mathlib, but didn't restart the server.</p>",
        "id": 224663344,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612125486
    },
    {
        "content": "<p>All good now :)</p>",
        "id": 224663347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612125488
    },
    {
        "content": "<p>Oh, we don't even have <code>tsum_pos</code> :(</p>",
        "id": 224663543,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612125744
    },
    {
        "content": "<p>Ok, I am glad that it was not just me, then!</p>\n<p>If no one else does it earlier, I may try to prove some of these results tomorrow!</p>",
        "id": 224664965,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612127578
    },
    {
        "content": "<p>(If someone else wants to do it, though, I would be very grateful!)</p>",
        "id": 224664977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612127596
    },
    {
        "content": "<p>It was Johan, but I was the one who jogged his memory into fixing it</p>",
        "id": 224670040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612132625
    },
    {
        "content": "<p>Below is a proof of <code>tsum_lt</code>.</p>\n<p>In case anyone feels like they want to simplify these proofs, please go ahead!  Otherwise, I might open a PR to include them somewhere.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.ennreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_ite_eq_add</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsum_add</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">tsum_eq_single</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ji</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">if_neg</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ji</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">has_sum_ite_eq</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">congr</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_eq</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hfg</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_ite_eq_extract</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tsum_ite_eq_add</span> <span class=\"o\">(</span><span class=\"n\">hf.summable_of_eq_zero_or_self</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">tsum_eq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)]</span><span class=\"bp\">;</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ji</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ji</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_lt</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsum_ite_eq_extract</span> <span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">tsum_ite_eq_extract</span> <span class=\"n\">hg</span> <span class=\"n\">i</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">add_lt_add_of_lt_of_le</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">tsum_le_tsum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ji</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ji</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">hf.summable_of_eq_zero_or_self</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ji</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ji</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">hg.summable_of_eq_zero_or_self</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ji</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ji</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_lt_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">tsum_lt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">summable_of_nonneg_of_le</span> <span class=\"n\">h0</span> <span class=\"n\">h</span> <span class=\"n\">hg</span><span class=\"o\">)</span> <span class=\"n\">hg</span> <span class=\"n\">hi</span>\n</code></pre></div>",
        "id": 224709201,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612176313
    },
    {
        "content": "<p>I slightly golfed the proofs and changed the statement of <code>tsum_lt</code>: what was <code>tsum_lt</code> at the beginning of the thread is now <code>tsum_lt_of_nonneg</code>.</p>",
        "id": 224711352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612177726
    },
    {
        "content": "<p><code>tsum_congr</code> might be a good name for <code>tsum_eq</code>, especially since it can be proved as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tsum_congr</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"n\">hfg</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224711989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612178156
    },
    {
        "content": "<p>Eric, thank you very much for always checking my stuff!  I like your suggestion and I updated the code above!</p>",
        "id": 224712243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612178319
    },
    {
        "content": "<p>Similarly, you seem to be suffering because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_ite_eq\">docs#tsum_ite_eq</a> is missing a decidable assumption</p>",
        "id": 224712698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612178631
    },
    {
        "content": "<p>Which means it only applies to <code>classical.dec</code>, and not to the <code>nat.decidable_eq</code> that your proof uses</p>",
        "id": 224712762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612178654
    },
    {
        "content": "<p>I have <code>open_locale classical</code> in my actual file, although, since I could erase it and the proofs still went through, I did not include it in this snippet.  What could I simplify, using <code>classical</code>?  I know that some things become easier, but I do not really have a feel for what...</p>",
        "id": 224713091,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612178928
    },
    {
        "content": "<p>Almost all of your <code>tsum_ite_eq_add</code> proof should be solved by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_ite_eq\">docs#tsum_ite_eq</a>, but it's not because the instances don't unify</p>",
        "id": 224713664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612179318
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/5993\">#5993</a></p>",
        "id": 224713745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612179363
    },
    {
        "content": "<p>Ah, thank you so much!  This means that, once your PR gets accepted, the proofs here can be simplified, right?</p>",
        "id": 224713835,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612179430
    },
    {
        "content": "<p>Yes. In the meantime, you can add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- fixed version of tsum_ite_eq until 5993 is merged</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">tsum_ite_eq'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">tsum_ite_eq</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224713907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612179481
    },
    {
        "content": "<p>Alright, that pr is now merged</p>",
        "id": 224806317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612220579
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 224834091,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612248033
    },
    {
        "content": "<p>I created a PR introducing these lemmas: <a href=\"https://github.com/leanprover-community/mathlib/issues/6017\">#6017</a></p>\n<p>Eric, I took advantage of your simplifications, but there are certainly more simplifications to be made!</p>",
        "id": 224985680,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612340535
    },
    {
        "content": "<p>I think the best statement of this lemma might actually be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tsum_lt_congr</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>although the lemmas to make this easy to work with are missing (xref <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/lt.20on.20functions\">this thread</a>)</p>",
        "id": 225021895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612362278
    }
]