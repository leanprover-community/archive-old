[
    {
        "content": "<p>Is there a non-meta version of <code>is_def_eq</code> or the like? My specific use case would be being able to decidably conclude that, say, <code>[a, b, c] = [a, b, c]</code> even if <code>a,b,c</code> are of a type without decidable equality... though I may be misunderstanding the entire notion of \"decidability\" then</p>",
        "id": 285210119,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654584934
    },
    {
        "content": "<p>Well, more specifically, I want to write code to take a symbolic list, partition it into disjoint pieces, and conclude that certain operations (like sum) are equivalent if taken over the original list or if combined from the disjoint pieces</p>\n<p>and to do this whether or not I'm working on a type with decidable equality, purely on the basis of reflexivity</p>",
        "id": 285210207,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654585005
    },
    {
        "content": "<p>and I suppose that could be a tactic, but it feels like it could also be a lemma...</p>",
        "id": 285210223,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654585017
    },
    {
        "content": "<p><code>rfl</code>?</p>",
        "id": 285210852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654585491
    },
    {
        "content": "<p>If <code>rfl</code> does not work, maybe you could try to get  <code>congr</code> to break up the proofs?</p>",
        "id": 285211146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654585790
    },
    {
        "content": "<p>mmm<br>\nmaybe<br>\nthe other thing I want to do is to filter a list for things that are defeq to the input -- again, working on the basis of \"same symbol\" rather than \"same value\"</p>",
        "id": 285211429,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654586010
    },
    {
        "content": "<p>mm, maybe I can just include that in the assumptions and let the 'end user' provide a proof that the join of the lists are the same as the original list...? (up to permutation)</p>",
        "id": 285211690,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654586207
    },
    {
        "content": "<p>(I would use multiset for this, except multiset seems to have even less in the way of filtering...?)</p>",
        "id": 285211783,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654586290
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.filter\">docs#multiset.filter</a>?)</p>",
        "id": 285214755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654588440
    },
    {
        "content": "<p>requires <code>decidable_pred</code>, which gets back to \"how can I use definitional equality within a lemma\"<br>\nmind you I don't really see a great way of using <code>list</code> to filter without also running into decidability issues, but at least it isn't part of the interface...?</p>",
        "id": 285215426,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654588808
    },
    {
        "content": "<p>it's a shame we don't have something like javascript's <code>===</code></p>",
        "id": 285216690,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654589669
    },
    {
        "content": "<p>oh, wait, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.filter_map\">docs#multiset.filter_map</a> has exactly the same requirements as the <code>list</code> theorem I was looking at</p>",
        "id": 285217344,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654590132
    },
    {
        "content": "<p>so okay, I'll probably go back to multisets</p>",
        "id": 285217354,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654590141
    },
    {
        "content": "<p>but problem regarding defeq stands</p>",
        "id": 285217370,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654590151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Definitional.20equality/near/285216690\">said</a>:</p>\n<blockquote>\n<p>it's a shame we don't have something like javascript's <code>===</code></p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq\">docs#heq</a></p>",
        "id": 285218238,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1654590696
    },
    {
        "content": "<p>isn't that the opposite of what we want? I want something that checks for equality at the unification/symbolic level; this seems like it tries to make equality work even when unification fails...?</p>",
        "id": 285218691,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654591015
    },
    {
        "content": "<blockquote>\n<p>I want to write code to take a symbolic list,</p>\n</blockquote>\n<p>Are you sure you don't want to do this in <code>meta</code> land?</p>",
        "id": 285219332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654591420
    },
    {
        "content": "<p>Can you maybe give a longer explanation of what you're trying to do, preferably with some pseudo-code?</p>",
        "id": 285219430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654591471
    },
    {
        "content": "<p>I mean, JS <code>===</code> is just false if they have different types instead of not typechecking, just like <code>heq</code>.</p>",
        "id": 285219630,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1654591574
    },
    {
        "content": "<p>I'm not at all sure I don't want to do this in <code>meta</code> land, in fact! but it seems like the sort of thing that would also need a lemma that says \"and after I do this symbolic level manipulation I do in fact get an equivalent expression at the end\"</p>",
        "id": 285219727,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654591659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Definitional.20equality/near/285219630\">said</a>:</p>\n<blockquote>\n<p>I mean, JS <code>===</code> is just false if they have different types instead of not typechecking, just like <code>heq</code>.</p>\n</blockquote>\n<p>the relevant thing is that I want, say, <code>a===a</code> because of symbolic level reflexivity, rather than requiring that <code>a</code> have a type that has decidable equality (so, e.g. not being real or complex)</p>",
        "id": 285219826,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654591709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Definitional.20equality/near/285219430\">said</a>:</p>\n<blockquote>\n<p>Can you maybe give a longer explanation of what you're trying to do, preferably with some pseudo-code?</p>\n</blockquote>\n<p>Basically, this is ultimately going into a mathematica-style \"collect and un-distribute like terms\" lemma/tactic</p>",
        "id": 285219872,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654591737
    },
    {
        "content": "<p>\"symbolic level reflexivity\" is a stronger notion than definitional equality</p>",
        "id": 285219900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654591759
    },
    {
        "content": "<p><code>n + 0 = n</code> definitionally (for <code>n : nat</code>), but not symbolically. Symbolic level reflexivity is equality of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr\">docs#expr</a></p>",
        "id": 285220017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654591822
    },
    {
        "content": "<blockquote>\n<p>Basically, this is ultimately going into a mathematica-style \"collect and un-distribute like terms\" lemma/tactic</p>\n</blockquote>\n<p>That very much sounds like a job for a tactic, where you'll be working with <code>expr</code>s</p>",
        "id": 285220062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654591862
    },
    {
        "content": "<p>so that, say, <code>a•r + b•s + c•r + d•s + e•s + f•r</code> becomes <code>(a + c + f)•r + (b + d + e)•s</code></p>",
        "id": 285220071,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654591866
    },
    {
        "content": "<p>(note that <code>expr</code> has decidable equality)</p>",
        "id": 285220107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654591896
    },
    {
        "content": "<p>hmmm, okay</p>",
        "id": 285220115,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654591902
    },
    {
        "content": "<p>alright, I'll start there then</p>",
        "id": 285220127,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654591909
    },
    {
        "content": "<p>Typically the approach is to oush around the symbols, and then build up a proof term programmatically that shows the shuffling was allowed.</p>\n<p>If you're not aware, there's a <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a> stream that can be helpful for questions about this kind of thing</p>",
        "id": 285220228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654591992
    },
    {
        "content": "<p>I was not! Thanks!</p>",
        "id": 285220605,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654592232
    },
    {
        "content": "<p>I have very recently started meta-programming myself and got involved in a similar project: in my case, I wanted to prove terms in a sum can be moved around to produce the same sum.  Working at the meta-level gives you quick access to formulating the equality that you want.  After that, you set up the goal (similar to a <code>have</code> where you supply the end-result by unchecked meta code) and you use some version of <code>simp [add_smul, add_comm, add_assoc, add_left_comm]</code> to check that the meta-code happened to produce the correct final result.</p>",
        "id": 285230926,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654598140
    },
    {
        "content": "<p>If you want to look at the project in which I was involved, it is not in mathlib, but it is <a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a>.</p>",
        "id": 285231013,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654598191
    },
    {
        "content": "<p>I for one am glad that we don't have a predicate for definitional equality</p>",
        "id": 285335303,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654652657
    },
    {
        "content": "<p>The whole point of equality as a concept is that when two things are equal, they share every single possible property imaginable</p>",
        "id": 285335325,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654652678
    },
    {
        "content": "<p>Distinguishing definitional equality would break this</p>",
        "id": 285335334,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654652691
    },
    {
        "content": "<p>Not to mention, definitional equality will change in Lean 4! Eta reduction isn't currently definitional but will be</p>",
        "id": 285335354,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654652721
    }
]