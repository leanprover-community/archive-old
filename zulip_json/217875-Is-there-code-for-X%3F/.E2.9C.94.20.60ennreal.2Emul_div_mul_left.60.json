[
    {
        "content": "<p>If you already have a proof you would like to simplify, you should show us the proof including all necessary imports.</p>",
        "id": 319214618,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672758367
    },
    {
        "content": "<p>I actually gave up on the proof!</p>",
        "id": 319215997,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1672758783
    },
    {
        "content": "<p>Show us what you have.</p>",
        "id": 319216138,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672758832
    },
    {
        "content": "<p>huh, let me dig my history then</p>",
        "id": 319216363,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1672758852
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.ennreal.mul_div_mul_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">],</span>  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">ennreal.zero_div</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">ennreal.div_zero</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">ennreal.div_zero</span> <span class=\"o\">(</span><span class=\"n\">mul_ne_zero</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319217503,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1672759173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.mul_div_mul_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ennreal.mul_inv</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">ha'</span><span class=\"o\">),</span> <span class=\"n\">mul_mul_mul_comm</span><span class=\"o\">,</span> <span class=\"n\">ennreal.mul_inv_cancel</span> <span class=\"n\">ha</span> <span class=\"n\">ha'</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319218400,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672759468
    },
    {
        "content": "<p>wow, neat, thanks!</p>",
        "id": 319218488,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1672759495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 319218501,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672759498
    },
    {
        "content": "<p>So, it seems the correct path is via <code>inv</code>. I never really understood the relation between <code>inv</code> and <code>div</code> in practice, and when to prefer which.</p>",
        "id": 319219021,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1672759637
    },
    {
        "content": "<p>I have the same gap in my understanding.</p>",
        "id": 319219133,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672759682
    },
    {
        "content": "<p>I'm not sure if that is the lesson here. In this case the lemma <code>ennreal.mul_inv</code> already exists and does most of the work.<br>\nSince <code>inv</code> is a simpler function, when library building I generally recommend proving lemmas first for <code>inv</code> and then for <code>div</code>. In this case, <code>ennreal.mul_div_mul_left</code> is a lemma that should be added to the library</p>",
        "id": 319219775,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672759861
    },
    {
        "content": "<p>OK, I will PR it. It hasn't been ported to mathlib4 yet.</p>",
        "id": 319220449,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672760079
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18051\">https://github.com/leanprover-community/mathlib/pull/18051</a></p>",
        "id": 319225121,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672761437
    },
    {
        "content": "<p>Note that <code>nnreal</code> (as well as <code>ℝ</code>) has it already provided via <code>comm_group_with_zero</code> which takes it from <code>division_comm_monoid</code>.<br>\nIn all three cases, the lemma is called <code>mul_div_mul_left</code>.</p>",
        "id": 319226788,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672761878
    },
    {
        "content": "<p>Thanks for the PR!</p>",
        "id": 319227477,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1672762048
    }
]