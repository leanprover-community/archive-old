[
    {
        "content": "<p>Hi all, hopefully just a quick one.<br>\nI'm trying to prove this goal with these hypotheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">irreducible</span> <span class=\"bp\">↑</span><span class=\"n\">p</span>\n</code></pre></div>\n<p>In previous parts of the proof lean casted p to an integer, is there a way I can cast it back so I can use<code>exact hp</code>? Thanks</p>",
        "id": 307354725,
        "sender_full_name": "Will Midwood",
        "timestamp": 1667320958
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">tactic#norm_cast</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_cast\">tactic#push_cast</a> are your friends</p>",
        "id": 307355480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667321178
    },
    {
        "content": "<p>actually maybe these don't help directly in this case.</p>",
        "id": 307355854,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667321284
    },
    {
        "content": "<p>Yeah I don't think those tactics know about the lemmas <a href=\"https://leanprover-community.github.io/mathlib_docs/find/irreducible_iff_nat_prime\">docs#irreducible_iff_nat_prime</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime_iff_prime_int\">docs#nat.prime_iff_prime_int</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique_factorization_monoid.irreducible_iff_prime\">docs#unique_factorization_monoid.irreducible_iff_prime</a>, which is the shortest path I could find.</p>",
        "id": 307356197,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667321401
    },
    {
        "content": "<p>We do have something for units though...</p>",
        "id": 307356293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667321418
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.of_nat_is_unit\">docs#int.of_nat_is_unit</a></p>",
        "id": 307356534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667321498
    },
    {
        "content": "<p>That's tagged with <code>norm_cast</code>. Presumably we should do something similar for <code>irreducible</code>.</p>",
        "id": 307356625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667321522
    },
    {
        "content": "<p>Maybe that could make <a href=\"https://github.com/leanprover-community/mathlib/pull/16998#issuecomment-1286304214\">this</a> (<code>squarefree</code>) automatic as well.</p>",
        "id": 307356750,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667321560
    },
    {
        "content": "<p>I have the following in a project somewhere, where I think I had this in mind, not sure I ever PRed it though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">irreducible_of_map_irreducible</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">β</span><span class=\"bp\">ˣ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">not_unit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">h.not_unit</span> <span class=\"o\">(</span><span class=\"n\">hn.map</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">is_unit_or_is_unit'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">map_mul</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hab</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.imp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h.is_unit_or_is_unit</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">ua</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span><span class=\"bp\">;</span>\n    <span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"n\">hf</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hf</span> <span class=\"n\">b</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_unit_one</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ha</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 307357812,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667321865
    },
    {
        "content": "<p>that should probably be called <code>irreducible.of_map</code>; also we can write that with more familar injective hypotheses for stricter restrictions on alpha, beta I guess</p>",
        "id": 307358415,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1667322017
    },
    {
        "content": "<p>What do you mean more precisely? (btw it turns out I was using it for something else but I think it applies here)</p>",
        "id": 307359046,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667322181
    }
]