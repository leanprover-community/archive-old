[
    {
        "content": "<p>Does mathlib have some notation/abbreviations for fibered products (just for types)? Do I have to introduce the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fibered_product</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 210926542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600806257
    },
    {
        "content": "<p>I don't think it's there.</p>",
        "id": 210926599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600806296
    },
    {
        "content": "<p>You might find that Scott proved all limits exist in <code>Type</code> I guess</p>",
        "id": 210929985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600808077
    },
    {
        "content": "<p>This doesn't seem to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.pullbacks</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⟶</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">⟶</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory.limits.pullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n</code></pre></div>\n\n<p>Lean fails to find an instance of <code>category_theory.limits.has_pullback f g</code>. Maybe I'm missing an import?</p>",
        "id": 210931302,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600808870
    },
    {
        "content": "<p><code>ct.limits.types</code> iirc</p>",
        "id": 210933567,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600810163
    },
    {
        "content": "<p>Yep! That's the missing import.</p>",
        "id": 210933916,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600810370
    },
    {
        "content": "<p>I'm not sure if it would be useful to have a specific <code>is_limit</code> definition for the fibered product you gave above, so lemmas can be applied directly instead of needing to go through the canonical iso</p>",
        "id": 210934016,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600810442
    }
]