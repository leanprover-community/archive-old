[
    {
        "content": "<p>Hi, do we have the \"kernel of an action\" ?</p>",
        "id": 304016454,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665749263
    },
    {
        "content": "<p>(of a monoid on a type, presumably?)</p>",
        "id": 304017614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665749699
    },
    {
        "content": "<p>Yes, that's right</p>",
        "id": 304019449,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665750242
    },
    {
        "content": "<p>Surely of a monoid on a semiring, rather?</p>",
        "id": 304019592,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1665750282
    },
    {
        "content": "<p>Sure, is there anything like that?</p>",
        "id": 304019764,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665750338
    },
    {
        "content": "<p>Currently, I have a semiring action of a group on a field and I want  the kernel of that action.</p>",
        "id": 304020381,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665750510
    },
    {
        "content": "<p>what's your definition of the kernel of the action?</p>",
        "id": 304022148,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665751080
    },
    {
        "content": "<p>a member of the monoid that stabilises the whole type?</p>",
        "id": 304022223,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665751099
    },
    {
        "content": "<p>I want the set of all group elements which act as the identity</p>",
        "id": 304022855,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665751319
    },
    {
        "content": "<p>So not just a member</p>",
        "id": 304023045,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665751373
    },
    {
        "content": "<p>I think that will be <code>(mul_semiring_action.to_ring_aut G R).ker</code> once your PR goes through</p>",
        "id": 304031460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665754008
    },
    {
        "content": "<p>Nice, thanks a lot</p>",
        "id": 304131705,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665789042
    },
    {
        "content": "<p>Although actually, I think you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.stabilizer\">docs#mul_action.stabilizer</a></p>",
        "id": 304195446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665837793
    },
    {
        "content": "<p>No I don't think so -- that's the things which fix one element. Michail wants the Inf of all of these.</p>",
        "id": 304195754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665837956
    },
    {
        "content": "<p>Aha, then it's <code>(mul_action.to_perm_hom G R).ker</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.to_perm_hom\">docs#mul_action.to_perm_hom</a>) which doesn't need <a href=\"https://github.com/leanprover-community/mathlib/pull/16857\">#16857</a> or R to be a ring</p>",
        "id": 304196818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665838446
    },
    {
        "content": "<p>(but is propositionally equal to my suggestion above)</p>",
        "id": 304196896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665838492
    },
    {
        "content": "<p>Yes, <code>(mul_action.to_perm_hom G R).ker </code> seems to work. Thank you</p>",
        "id": 304209632,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665844870
    }
]