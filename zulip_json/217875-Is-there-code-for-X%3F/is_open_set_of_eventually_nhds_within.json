[
    {
        "content": "<p>Do we have this in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_open_set_of_eventually_nhds_within</span> <span class=\"o\">[</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t1_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â†</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_open_iff_mem_nhds</span><span class=\"o\">,</span> <span class=\"n\">eventually_nhds_within_iff</span><span class=\"o\">,</span> <span class=\"n\">_root_.eventually_nhds_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">z</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht1</span><span class=\"o\">,</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"n\">ht3</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">filter.mem_of_superset</span> <span class=\"o\">(</span><span class=\"n\">ht2</span> <span class=\"n\">z</span> <span class=\"n\">ht3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht1</span><span class=\"o\">,</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"n\">ht3</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span> <span class=\"bp\">‚à©</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">}</span><span class=\"bp\">·∂ú</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">‚ü®</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"o\">‚ü©</span> <span class=\"n\">hx3</span><span class=\"o\">,</span> <span class=\"n\">ht1</span> <span class=\"n\">x</span> <span class=\"n\">hx1</span> <span class=\"n\">hx2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">‚ü®</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"o\">‚ü©,</span> <span class=\"n\">filter.inter_mem</span> <span class=\"o\">(</span><span class=\"n\">ht2</span> <span class=\"n\">x</span> <span class=\"n\">hx1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_open_compl_singleton.mem_nhds</span> <span class=\"n\">hx2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Also, I would like to know how to golf the proof and possibly whether <code>[t1_space Œ±]</code> is really needed, it does not feel absurd to have it but I don't have a good intuition about this.)</p>",
        "id": 298384381,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1662990405
    },
    {
        "content": "<p>Here is a cleaner proof with the same assumptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_on</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.separation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open_set_of_eventually_nhds_within'</span> <span class=\"o\">[</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t1_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â†</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_open_iff_mem_nhds</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">eventually_nhds_nhds_within.mpr</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h.symm.nhds_within_compl_singleton</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eventually_nhds_within_of_eventually_nhds</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'll have to think more about removing <code>t1_space</code></p>",
        "id": 298390196,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662992187
    },
    {
        "content": "<p>Ah, thanks! Basically I was reproving <code>ne.nhds_within_compl_singleton</code> which I missed from the library. (And the fact that this lemma also depends on <code>t1_space</code> is kind of reassuring.)</p>",
        "id": 298396082,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1662994047
    },
    {
        "content": "<p>A T0 counterexample is the affine line: an infinite space with a distinguished \"generic\" point whose nonempty open sets are cofinite sets containing the generic point. If you take <code>p</code> to be true at all points except at the generic point, then <code>{x | ‚àÄ·∂† y in ùìù[‚â†] x, p y}</code> is the singleton {generic point}, which is not open.</p>",
        "id": 298433277,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663005426
    },
    {
        "content": "<p>PR'd at <a href=\"https://github.com/leanprover-community/mathlib/pull/16489\">#16489</a> (together with the uniqueness theorem for analytic functions, which was the motivation for the statement).</p>",
        "id": 298580970,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663074652
    }
]