[
    {
        "content": "<p>Dear All,</p>\n<p>working with degrees on Laurent polynomials, I would like to have a negation on <code>with_bot ℤ</code>.</p>\n<p>Is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounded_order</span>\n\n<span class=\"sd\">/--  If a Type `α` has a negation, then `with_bot α` inherits one as well. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">with_bot.neg</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"o\">[</span><span class=\"n\">add</span> <span class=\"n\">standard</span> <span class=\"bp\">`</span><span class=\"n\">neg</span><span class=\"bp\">`-</span><span class=\"n\">hyerarchy</span> <span class=\"n\">lemmas</span><span class=\"bp\">/</span><span class=\"n\">instances.</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>already in mathlib?  If not, is there some problem with adding it?</p>\n<p>I can get by without this, but it starts to get annoying.</p>\n<p>Thanks!</p>",
        "id": 289410516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657680940
    },
    {
        "content": "<p>It doesn't send bot to top (if e.g. alpha had a top already?)</p>",
        "id": 289410578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681030
    },
    {
        "content": "<p>No, since bot is supposed to model <code>degree 0</code>...  It should really by <code>with_zero (multiplicative ℤ)</code>, but I have been resisting this, probably just for psychological reasons...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 289410649,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657681122
    },
    {
        "content": "<p>Oh lol is it because the reciprocal of 0 is 0 instead of the \"geometrically correct\" infinity?</p>",
        "id": 289410651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681136
    },
    {
        "content": "<p>Oh but I think <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> has been using <code>with_zero (multiplicative ℤ)</code> and may even have an API for it?</p>",
        "id": 289410665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681170
    },
    {
        "content": "<p>Though I understand now why it may not be in mathlib: I was so focused on degrees, that I did not think about negation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span>!</p>",
        "id": 289410666,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657681175
    },
    {
        "content": "<p>If you use the with_zero (mult int) thing then what you want is just <code>inv</code>.</p>",
        "id": 289410722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681209
    },
    {
        "content": "<p>Maybe additively your instinct is to negate -infty to +infty -- we're all told at school \"two minuses make a plus\".</p>",
        "id": 289410747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681256
    },
    {
        "content": "<p>Ok, if there is some API for <code>with_zero (multiplicative ℤ)</code> I can probably use it.  Although I would not want the definition of degree on Laurent polynomials and on \"usual\" polynomials to diverge too much, since I want to use results about <code>polynomial.degree</code> for <code>laurent_polynomial.degree</code>.</p>",
        "id": 289410756,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657681283
    },
    {
        "content": "<p>It would be an interesting project to formalise the assertion that two minuses make a plus. Anyway, for addition it seems very weird to send -infty to -infty. But multiplicatively it now seems much more normal to me, it's not a good geometric definition but when it comes to arithmetic it's a very good choice to have 1/0=0.</p>",
        "id": 289410813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681331
    },
    {
        "content": "<p>Yes, is the conversion between add and mul that feels weird.  Somehow, I find it more natural that when I multiply polynomials, their degrees add.</p>",
        "id": 289410815,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657681336
    },
    {
        "content": "<p>I know that you have thought a lot about valuations: maybe we should use them more aggressively.  Degrees of polynomials are so last millennium...</p>",
        "id": 289410854,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657681428
    },
    {
        "content": "<p>Why do you want to change notation? This is what Leo taught us! You have to have a good reason to change notation, for example if you're linearising a nonlinear object such as exp and log between Lie groups and Lie algebras then you can do it, because you're passing through some notational phase space where * becomes + and + becomes Lie bracket or something.</p>",
        "id": 289410856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681432
    },
    {
        "content": "<p>or algebraic geometry becomes tropical geometry</p>",
        "id": 289410935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681522
    },
    {
        "content": "<p>Here the transition is <code>add</code> on polys becomes <code>max</code> on degrees and <code>mul</code> on polys becomes <code>add</code> on degrees.</p>",
        "id": 289410936,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657681522
    },
    {
        "content": "<p>right, that's very tropical.</p>",
        "id": 289410941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657681535
    },
    {
        "content": "<p>Yes, I have thought of using <code>tropical (with_bot ℤ)</code>, but this one is defined with min, so I would have to <code>order_dual</code> it as well. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 289410990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657681572
    },
    {
        "content": "<p>Currently, I have a proof that the degree of the product of two Laurent polynomials is the sum of their degrees.  However, it feels very clunky and I think that it is because <code>with_bot ℤ</code> does not have too much structure.  I was hoping that I could make it smoother, but maybe it is messy and I have to live with it!</p>",
        "id": 289411104,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657681746
    },
    {
        "content": "<p>For instance, I use this lemma at some point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">with_bot.exists_eq_add</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and it would be somewhat easier if I could simply use <code>a-b</code> directly.</p>",
        "id": 289411289,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657682027
    },
    {
        "content": "<p>Damiano, we can change <code>tropical</code> to be using <code>max</code> instead. Some things state better with min, some with max. Since you have an actual use case, and I never pushed my tropical polynomial convex optimization code, seems like <code>max</code> should win.</p>",
        "id": 289415070,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657687113
    },
    {
        "content": "<p>Regarding a <code>with_bot.neg</code>, I had a doomed PR <a href=\"https://github.com/leanprover-community/mathlib/pull/8889\">#8889</a> where I thought of something similar, but it really broke down</p>",
        "id": 289415098,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657687154
    },
    {
        "content": "<p>And Eric Wieser explored this too here: <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/with_zero.20.28multiplicative.20A.29.20.E2.89.83*.20multiplicative.20.28with_bot.20A.29/near/272981162\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/with_zero.20.28multiplicative.20A.29.20.E2.89.83*.20multiplicative.20.28with_bot.20A.29/near/272981162</a></p>",
        "id": 289415137,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657687198
    },
    {
        "content": "<p>For Laurent polynomials, the <code>int_degree</code> API in <a href=\"https://github.com/leanprover-community/mathlib/pull/12245\">#12245</a> might be of use.</p>",
        "id": 289415350,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657687447
    },
    {
        "content": "<p>Yakov, thanks a lot for the information!</p>\n<p>tropical with bot vs top: this seems another of these cases where there is the need for a <code>to_top/bot</code> tag, like <code>to_additive</code>.  I am using now <code>max-plus</code>, but <code>min-plus</code> is also natural.  In fact, if I end up implementing also <code>trailing_degree</code> for Laurent polynomials, then I'd want the other.</p>",
        "id": 289415353,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657687455
    },
    {
        "content": "<p>Your <code>with_bot.neg</code> is <code>with_bot.map (fun x, -x)</code>, which might be enough for what you need for now?</p>",
        "id": 289415376,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657687510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60with_bot.2Eneg.60/near/289415350\">said</a>:</p>\n<blockquote>\n<p>For Laurent polynomials, the <code>int_degree</code> API in <a href=\"https://github.com/leanprover-community/mathlib/pull/12245\">#12245</a> might be of use.</p>\n</blockquote>\n<p>Thanks!  I'll take a look.   I was planning to follow more closely the definition using supports, since Laurent polynomials are defined via <code>add_monoid_algebra int</code>, but if there is already work on <code>int_degree</code>, I might as well try to use it!</p>",
        "id": 289415463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657687630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60with_bot.2Eneg.60/near/289415376\">said</a>:</p>\n<blockquote>\n<p>Your <code>with_bot.neg</code> is <code>with_bot.map (fun x, -x)</code>, which might be enough for what you need for now?</p>\n</blockquote>\n<p>Ah, good point!  I just made PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15294\">#15294</a> with the lemmas that I am using so far.  If it stays like this, then it is not so bad.  I am slightly worried that it will creep, but we will see.</p>",
        "id": 289415551,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657687745
    },
    {
        "content": "<p>I am already aware that in the review process I will add the analogous <code>with_top</code> lemmas.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 289415563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657687784
    },
    {
        "content": "<p>Ah, yes, more \"low-level\" <code>int_degree</code> directly from the underlying support makes sense. But hopefully users never have to see that, and there is some lemma that says <code>(f : K[T;T^-]) = (p : K[X]) / (q : K[X])</code>, if I understand the theory correctly. Please let me know if I've made an error here.</p>",
        "id": 289415718,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657688033
    },
    {
        "content": "<p>Or I just confused that with rational functions.</p>",
        "id": 289415777,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657688098
    },
    {
        "content": "<p>I do not have that lemma yet, since I have not gotten to rational functions... yet!  Another issue that I see is that the current <code>int_degree</code> is defined for a base <em>field</em>, whereas the one that I am planning is on any semiring, since it only looks at the support.</p>",
        "id": 289415862,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657688194
    },
    {
        "content": "<p>Rephrasing of my lemma, <code>int_degree (f : K[T;T^-1) = (nat_degree ((my_pair f).1) : int) - (my_pair f).2</code>, where <code>my_pair f</code> is the <code>(p : K[X], n : nat)</code> such that <code>X ^ n * f = coe p</code>.</p>",
        "id": 289415929,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657688294
    },
    {
        "content": "<p>In case you are curious, what I have so far is on <a href=\"https://github.com/leanprover-community/mathlib/tree/adomani_degs_lp\">branch#adomani_degs_lp</a>, in <a href=\"https://github.com/leanprover-community/mathlib/blob/9fa4f59fef9667c134fbdd5bc04cc2e572466abd/src/data/polynomial/laurent.lean\">data/polynomial/laurent</a>.</p>",
        "id": 289415998,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657688404
    },
    {
        "content": "<p>Yeah, in the <code>ratfunc</code> file, most of the reasonable lemmas one can define require a <code>field</code>. But I meant that the \"surface\" of the API can look very similar, with similarly named/shaped lemmas. And then later, <code>ratfunc.int_degree</code> lemmas might go through easier proofs from the extension from Laurent polynomials (if that makes sense)</p>",
        "id": 289416006,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657688415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60with_bot.2Eneg.60/near/289415929\">said</a>:</p>\n<blockquote>\n<p>Rephrasing of my lemma, <code>int_degree (f : K[T;T^-1) = (nat_degree ((my_pair f).1) : int) - (my_pair f).2</code>, where <code>my_pair f</code> is the <code>(p : K[X], n : nat)</code> such that <code>X ^ n * f = coe p</code>.</p>\n</blockquote>\n<p>Ah, I see what you meant.  Yes, this would be a way.  Once you have <code>X ^ n * f = coe p</code>, then you can also define it directly as <code>pnat_degree - n</code>, appropriately coerced to int.</p>",
        "id": 289416114,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657688560
    },
    {
        "content": "<p>Defining directly is probably not desired because knowing what that <code>n</code> is is precisely what <code>int_degree</code> helps determine.</p>",
        "id": 289416179,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657688663
    }
]