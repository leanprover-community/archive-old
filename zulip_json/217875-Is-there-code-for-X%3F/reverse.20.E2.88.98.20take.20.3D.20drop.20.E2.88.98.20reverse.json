[
    {
        "content": "<p>Do we have this anywhere?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">reverse_take</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"k\">take</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Context – I'm trying to prove the following statement:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">to_append_reverse</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">palindrome</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">take</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"k\">take</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n\n<p>and it's pretty straightforward except for swapping the <code>reverse</code> and <code>take</code>.</p>",
        "id": 205221557,
        "sender_full_name": "Chris Wong",
        "timestamp": 1595933421
    },
    {
        "content": "<p>Nope, I don't think we have this</p>",
        "id": 205221694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595933560
    },
    {
        "content": "<p>You can prove it pretty easily using <code>take_drop</code></p>",
        "id": 205222077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595933940
    },
    {
        "content": "<p>What do you mean by <code>take_drop</code>? I don't see it in the docs</p>",
        "id": 205222302,
        "sender_full_name": "Chris Wong",
        "timestamp": 1595934131
    },
    {
        "content": "<p>(and I'm aware of <code>take_append_drop</code>, that's the \"pretty straightforward\" part <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> )</p>",
        "id": 205223034,
        "sender_full_name": "Chris Wong",
        "timestamp": 1595934824
    },
    {
        "content": "<p>Progress:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">reverse_take</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"k\">take</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">H</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">take_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">length_reverse</span><span class=\"o\">,</span> <span class=\"n\">drop_length</span><span class=\"o\">,</span> <span class=\"n\">reverse_nil</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hₗ</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">length_reverse</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">drop_append_of_le_length</span> <span class=\"n\">hₗ</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205227712,
        "sender_full_name": "Chris Wong",
        "timestamp": 1595938577
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">reverse_take</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"k\">take</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">congr_arg</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">take_append_drop</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">reverse_append</span><span class=\"o\">,</span> <span class=\"n\">drop_left&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205227800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595938666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why do you need <code>congr_arg reverse</code> in <code>rw</code> here?</p>",
        "id": 205236624,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595943875
    },
    {
        "content": "<p>the alternative would be <code>conv {to_rhs, to_rhs, rw ← take_append_drop n l}</code></p>",
        "id": 205236671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595943901
    },
    {
        "content": "<p>Ok, I see. You're avoiding rewriting all the <code>l</code>. I was worried for a moment it was another instance of the unification issues I had with <code>rw</code> with the QPF project</p>",
        "id": 205236897,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595944019
    }
]