[
    {
        "content": "<p>We don't have this, right? Do we want it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.bounded</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">metric</span> <span class=\"n\">set</span> <span class=\"n\">bounded_continuous_function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">bounded_continuous_function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_dist_iff_tendsto_uniformly</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µá</span> <span class=\"n\">Œ≤</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µá</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto_uniformly</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">iff.intro</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">metric.tendsto_nhds.mpr</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">Œµ</span> <span class=\"n\">Œµ_pos</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">dist_mem_uniformity</span> <span class=\"bp\">$</span> <span class=\"n\">half_pos</span> <span class=\"n\">Œµ_pos</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">mem_uniformity_dist.mp</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">Œµ_pos</span><span class=\"o\">,</span> <span class=\"n\">hŒµ</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">tendsto_iff_forall_eventually_mem.mp</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"mi\">0</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ball_mem_nhds</span> <span class=\"n\">_</span> <span class=\"n\">Œµ_pos</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n      <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hŒµ</span> <span class=\"bp\">$</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dist_coe_le_dist</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">real.norm_of_nonneg</span> <span class=\"n\">dist_nonneg</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">dist_zero_right</span><span class=\"o\">,</span> <span class=\"n\">real.norm_of_nonneg</span> <span class=\"n\">dist_nonneg</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">((</span><span class=\"n\">dist_le</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">Œµ_pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"bp\">$</span> <span class=\"n\">hn</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">half_lt_self</span> <span class=\"n\">Œµ_pos</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276285623,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648007588
    },
    {
        "content": "<p>sorry, I should have rephrased the lhs as <code>tendsto F l (ùìù f)</code></p>",
        "id": 276285863,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648007968
    },
    {
        "content": "<p>I think this can be two more restricted lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendsto_dist_iff</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto</span> <span class=\"n\">F</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bounded_continuous_function.tendsto_iff_tendsto_uniformly</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µá</span> <span class=\"n\">Œ≤</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µá</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">F</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto_uniformly</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 276286379,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648008571
    },
    {
        "content": "<p>I mean, the first one is silly, and we likely already have it, I actually meant to write the second one, I just wasn't thinking when I originally typed it up.</p>",
        "id": 276286478,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648008716
    },
    {
        "content": "<p>Ah, the first one is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_iff_dist_tendsto_zero\">docs#tendsto_iff_dist_tendsto_zero</a></p>",
        "id": 276286479,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648008717
    },
    {
        "content": "<p>For the second one, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.tendsto_iff_tendsto_uniformly\">docs#continuous_map.tendsto_iff_tendsto_uniformly</a> ?</p>",
        "id": 276286728,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648009023
    },
    {
        "content": "<p>That's a little different, in fact -- for continuous functions on compact spaces, not for bounded continuous on arbitrary spaces.</p>",
        "id": 276286745,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648009074
    },
    {
        "content": "<p>So yes, I guess it's missing!</p>",
        "id": 276286792,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648009107
    }
]