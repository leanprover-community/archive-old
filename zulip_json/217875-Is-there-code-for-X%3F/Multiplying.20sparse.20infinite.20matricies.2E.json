[
    {
        "content": "<p>In theory, would it be possible to define matrix multiplication for infinite matrices where enough of the entries are zero that you only have finitely supported sums? Like, if row i of M has finitely many non-zero entries, and column j of N has finitely many non-zero entries, then entry ij of MN is defined in terms of a sum of finitely many non-zero entries. So as long as every row of M has finitely many non-zero entries (that is to say, for all i, j -&gt; M i j is a finitely supported function) and vice-versa for N and columns, you can perform the multiplication, no?</p>\n<p>Do we already have the machinery to do this?</p>",
        "id": 290359659,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658400482
    },
    {
        "content": "<p>You could write the multiplication using <code>tsum</code> I guess</p>",
        "id": 290360154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658400927
    },
    {
        "content": "<p>Let me also mention <a href=\"https://github.com/leanprover-community/mathlib/pull/11656\">#11656</a>, that does exactly this for locally finite orders.</p>",
        "id": 290361584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658401947
    },
    {
        "content": "<p>Oh, that's cool.</p>",
        "id": 290362015,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658402273
    },
    {
        "content": "<p>You only need one of (every row of M has finitely many non-zero entries) and (every column of N has finitely many non-zero entries) to be able to do the multiplication. You see this with matrices representing finite rank maps. Columns are all finitely supported but rows are not in general (e.g. the projection sending each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">e_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has matrix with first line all 1s, but you can still multiply it by another finite rank matrix).</p>",
        "id": 290368163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658406204
    },
    {
        "content": "<p>Oh, so you do, yes.</p>",
        "id": 290369630,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658407031
    },
    {
        "content": "<p>I suppose what this correspond to is: if you have something of type <code>f : m → n →₀ α</code>, you can turn this into a matrix <code>M : m → n → α</code> by <code>M i j = f i j</code> or you can turn it into <code>M : n → m → α</code> via <code>M j i = f i j</code>.</p>\n<p>What we're talking about here, then, are operations <code>(m → n →₀ α) → matrix n k → matrix m k</code> and <code>matrix m n → (k → n →₀ α) → matrix m k</code>?</p>",
        "id": 290380757,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658412852
    }
]