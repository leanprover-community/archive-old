[
    {
        "content": "<p>do we have the statement that if <code>a.coprime b</code>, then there exists <code>k l : nat</code> with <code>ak + bl = 1</code> mod (a/b)? I don't mind the stronger gcd statement but this is good enough for me</p>",
        "id": 267865256,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642078991
    },
    {
        "content": "<p>i'd rather not go to <code>int</code> because then i have to start messing with <code>zpow</code> (i'm proving that the <code>(1 - zeta^k)</code> are all associated to each other)</p>",
        "id": 267865425,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642079076
    },
    {
        "content": "<p>This is the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_coprime\">docs#is_coprime</a></p>",
        "id": 267865445,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642079089
    },
    {
        "content": "<p>Wait, it is false if you want everything in <code>N</code>, isn't it?</p>",
        "id": 267865532,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642079143
    },
    {
        "content": "<p><strong>mod</strong> a and mod b</p>",
        "id": 267865597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642079170
    },
    {
        "content": "<p>I think I don't understand the exact question, what does <code>mod (a/b)</code> mean?</p>",
        "id": 267865734,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642079260
    },
    {
        "content": "<p>What I just said, I assume</p>",
        "id": 267866102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642079448
    },
    {
        "content": "<p>I meant mod either , but I was using nat.coprime</p>",
        "id": 267866372,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642079611
    },
    {
        "content": "<p>There's probably some compatibility lemmas though, thanks!</p>",
        "id": 267866392,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642079625
    },
    {
        "content": "<p>There is some stuff on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat\">docs#pnat</a>, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat.gcd_rel_left\">docs#pnat.gcd_rel_left</a>.</p>",
        "id": 267866454,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642079652
    },
    {
        "content": "<p>I see. In that case I would try to use chinese remainder theorem to work modulo <code>a * b</code>.</p>",
        "id": 267866486,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642079677
    },
    {
        "content": "<p>Sorry, I keep thinking about integers</p>",
        "id": 267866530,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642079716
    },
    {
        "content": "<p>If you are doing this for flt-regular maybe the best thing is to go to the units group, so integer powers are not a problem.</p>",
        "id": 267866670,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642079778
    },
    {
        "content": "<p>this is for proving that these things are in the units group ;b I'll check that out, thanks Floris!</p>",
        "id": 267868145,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642080598
    },
    {
        "content": "<p>(the is_coprime connection is through the <code>int</code> cast sadly)</p>",
        "id": 267868208,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642080610
    },
    {
        "content": "<p>ah, it is there! in data/int/gcd, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_mul_mod_eq_one_of_coprime\">docs#nat.exists_mul_mod_eq_one_of_coprime</a>. thanks!</p>",
        "id": 267868535,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642080804
    },
    {
        "content": "<p>What happened to the old definition of cyclotomic_unit we had?</p>",
        "id": 267869926,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642081496
    },
    {
        "content": "<p>Oh it was deleted in 5dc5d5c9a91a6f0ac89e0a478e853a9641596f91</p>",
        "id": 267870288,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642081587
    },
    {
        "content": "<p>yeah i broke it in the zeta refactor and i was trying to restart it</p>",
        "id": 267870595,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642081781
    },
    {
        "content": "<p>i think this question is what <code>aux</code> was</p>",
        "id": 267870614,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642081794
    },
    {
        "content": "<p>Yeah I think that mathlib declaration is pretty much what I wanted, but a <code>def</code> rather than exists</p>",
        "id": 267871270,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642082104
    },
    {
        "content": "<p>ahh, so it could be done constructively?</p>",
        "id": 267871425,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642082173
    },
    {
        "content": "<p>Yeah not that it matters too much, its just seems a bit odd to have to use choice to invert something mod a prime</p>",
        "id": 267871520,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642082221
    },
    {
        "content": "<p>i guess <code>mul_mod_eq_gcd</code> gives the exact number</p>",
        "id": 267871547,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642082232
    },
    {
        "content": "<p>Is that a def somewhere?</p>",
        "id": 267871633,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642082280
    },
    {
        "content": "<p>it's the statement above it which it uses in the proof, it has a refine step with the explicit number</p>",
        "id": 267871883,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642082388
    },
    {
        "content": "<p>Oh right yes thats exactly the same as what I had defined aux, I guess there is only one obvious choice!</p>",
        "id": 267873005,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642082874
    },
    {
        "content": "<p>I just pushed an updated version, feel free to toy around with it^^ sorry for breaking it in the first place!</p>",
        "id": 267876920,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642084548
    },
    {
        "content": "<p>No need to apologize, I was just confused where it was lol <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> its my bad for writing such half-baked code <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 267879354,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642085579
    }
]