[
    {
        "content": "<p>In mathlib, is there any proof that <code>p^φ(n)</code> is the inverse of <code>p</code> modulo <code>n</code> when <code>p</code> and <code>n</code> are co-prime?</p>",
        "id": 190610928,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1584214734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> <span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span></p>",
        "id": 190611077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214871
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">totient</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">order_of_element</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">φ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">totient</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"bp\">_</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">units_equiv_coprime</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_units_eq_totient</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_congr</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">units_equiv_coprime</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_congr</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val_injective</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_veq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">])</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">finish</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pow_totient</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">card_units_eq_totient</span><span class=\"o\">,</span> <span class=\"n\">pow_card_eq_one</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 190611808,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584216055
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"bp\">_</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">units_equiv_coprime</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>\n\n\n<p>Hmm, shouldn't there be an instance that says that <code>units R</code> is a fintype if <code>R</code> is?</p>",
        "id": 190612413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584216923
    },
    {
        "content": "<p>Nice! How do I bring that back into <code>nat</code>?</p>",
        "id": 190612786,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1584217413
    },
    {
        "content": "<p>This is surprisingly difficult. <code>zmod</code> should take a <code>nat</code> really, <code>pnat</code>s are messy to work with.</p>",
        "id": 190613097,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584217917
    },
    {
        "content": "<p>What if I keep the reasoning in int and just bring the result back into nat? Basically, I have a nat and I'm implementing a probabilistic test of primality (Fermat's test). All I need is to conclude that the number is not prime.</p>",
        "id": 190613219,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1584218090
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">zmod</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">def</span> <span class=\"n\">unit_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">gcd_a</span> <span class=\"n\">x</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_one</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"o\">)]</span><span class=\"bp\">;</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">gcd_a_modeq</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">gcd_a</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">zmod</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">totient_zero</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pow_totient&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">unit_of_coprime</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">pow_totient</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_nat&#39;</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span><span class=\"o\">:</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">:</span><span class=\"n\">zmod</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190621924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584232217
    },
    {
        "content": "<p>Wonderful! Thank you! Do you guys want to PR all that or do you want me to do it?</p>",
        "id": 190623419,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1584235140
    },
    {
        "content": "<p>I might get round to it tomorrow, but I'd be very happy for you to do it.</p>",
        "id": 190623622,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584235551
    },
    {
        "content": "<p>I can do it. What files would you put those in?</p>",
        "id": 190625634,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1584239212
    },
    {
        "content": "<p><code>unit_of_coprime</code> should go immediately before <code>coprime_equiv_unit</code> (it is generalized from that), <code>totient_zero</code> should be right after <code>totient</code>, not sure about the ones Chris wrote, which are in the join of a few theories</p>",
        "id": 190626605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584240856
    }
]