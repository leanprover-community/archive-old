[
    {
        "content": "<p>Do we have something which gives a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.has_terminal\">docs#category_theory.limits.has_terminal</a> instance from a term of type <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.is_terminal\">docs#category_theory.limits.is_terminal</a> ?</p>",
        "id": 232474785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617129242
    },
    {
        "content": "<p>Here's a rather messy solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.terminal</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.category</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_terminal</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">has_limit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">has_limit.mk</span> <span class=\"o\">{</span>\n    <span class=\"n\">cone</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">)},</span>\n    <span class=\"n\">is_limit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t.lift</span> <span class=\"o\">(</span><span class=\"n\">as_empty_cone</span> <span class=\"n\">s.X</span><span class=\"o\">),</span>\n      <span class=\"n\">uniq'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n        <span class=\"n\">is_limit.uniq</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">as_empty_cone</span> <span class=\"n\">s.X</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">)),</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 232482307,
        "sender_full_name": "Greg Price",
        "timestamp": 1617132088
    },
    {
        "content": "<p>I am surprised not to find a lemma for it, but I may be just missing it.</p>",
        "id": 232482367,
        "sender_full_name": "Greg Price",
        "timestamp": 1617132119
    },
    {
        "content": "<p>I also can't find it. Here's my attempt at a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_terminal</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">has_limit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">has_limit</span> <span class=\"o\">(</span><span class=\"n\">functor.empty</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">has_limit.mk</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">has_limit_of_iso</span> <span class=\"o\">(</span><span class=\"n\">functor.empty_ext</span> <span class=\"o\">(</span><span class=\"n\">functor.empty</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 232487536,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1617134260
    },
    {
        "content": "<p>I might add it to this later on: <a href=\"https://github.com/leanprover-community/mathlib/issues/6966\">#6966</a></p>",
        "id": 232488499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617134606
    }
]