[
    {
        "content": "<p>Is the following result somewhere in mathlib? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Cantor_Bernstein</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span><span class=\"n\">function.injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">c1</span> <span class=\"o\">:=</span> <span class=\"n\">cardinal.mk_le_of_injective</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">c2</span> <span class=\"o\">:=</span><span class=\"n\">cardinal.mk_le_of_injective</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.mk</span> <span class=\"n\">α</span> <span class=\"bp\">=</span><span class=\"n\">cardinal.mk</span> <span class=\"n\">β</span> <span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n<span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cardinal.eq.1</span> <span class=\"n\">c3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It feels like it should, but I couldn't find it. If not, any ideas where to put it?</p>",
        "id": 257226691,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1634054301
    },
    {
        "content": "<p>I'm inclined to say that it should go somewhere around set_theory.cardinal. Also, it would be better to not require <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> to be in the same universe.</p>",
        "id": 257227479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634054580
    },
    {
        "content": "<p>I would be surprised if this isn't there yet</p>",
        "id": 257227630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634054635
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.schroeder_bernstein\">docs#function.embedding.schroeder_bernstein</a></p>",
        "id": 257227742,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634054670
    },
    {
        "content": "<p>I know this result as Cantor-Schröder-Bernstein, so I searched for each of the names in turn until I found it :D</p>",
        "id": 257227907,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634054746
    },
    {
        "content": "<p>ahh wonderful! I knew it had to be somewhere</p>",
        "id": 257228137,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1634054840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Cantor_Bernstein/near/257227742\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.schroeder_bernstein\">docs#function.embedding.schroeder_bernstein</a></p>\n</blockquote>\n<p>The proof of this is 25 lines long!</p>",
        "id": 257228162,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634054852
    },
    {
        "content": "<p>Yes but does it assume le_antisymm for cardinals?</p>",
        "id": 257228310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634054896
    },
    {
        "content": "<p><code>set_theory/cardinal.lean</code> depends on the theorem, so probably not</p>",
        "id": 257228339,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634054911
    },
    {
        "content": "<p>Right!</p>",
        "id": 257228358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634054917
    },
    {
        "content": "<p>Ah :)</p>",
        "id": 257228379,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634054925
    },
    {
        "content": "<p>So in fact your proof is probably circular Chris :-)</p>",
        "id": 257228503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634054992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Cantor_Bernstein/near/257228503\">said</a>:</p>\n<blockquote>\n<p>So in fact your proof is probably circular Chris :-)</p>\n</blockquote>\n<p>Ah yes the best kind of proof!</p>",
        "id": 257228671,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1634055041
    },
    {
        "content": "<p><code>le_antisymm</code> is proved by <code>le_antisymm := by { rintros ⟨α⟩ ⟨β⟩ ⟨e₁⟩ ⟨e₂⟩, exact quotient.sound (e₁.antisymm e₂) },</code> and <code>antisymm</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">antisymm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">schroeder_bernstein</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"k\">in</span>\n  <span class=\"o\">⟨</span><span class=\"n\">equiv.of_bijective</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>So it's indeed circular :)</p>",
        "id": 257228839,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634055109
    },
    {
        "content": "<p>BTW, a good method to find it is to look for the <code>linear_order</code> instance on <code>cardidal</code>, that is found automatically by Lean, and see how antisymmetry is proved.</p>",
        "id": 257229066,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634055188
    },
    {
        "content": "<p>I always use Kevin's trick described <a href=\"#narrow/stream/113488-general/topic/Where.20is.20.60has_coe_to_sort.20.28subalgebra.20R.20A.29.60.3F/near/217021408\">here</a> to explicitly  find the instance. No idea if there are better ways of doing it.</p>",
        "id": 257229809,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634055458
    }
]