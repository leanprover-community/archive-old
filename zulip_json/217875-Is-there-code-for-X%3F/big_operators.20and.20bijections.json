[
    {
        "content": "<p>I would like to use the fact that one can pull back a sum over a fintype under a bijection.  I can prove this as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_bij''</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_surj</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_bij</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">i_inj</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">i_surj</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha.symm</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213630222,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602899791
    },
    {
        "content": "<p>As one can see, the key point of the proof is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_bij\">docs#finset.sum_bij</a>.  I found the hypotheses there quite hard to check, which is why I wrote my own lemma (for now -- not sure whether it's appropriate for a PR).</p>",
        "id": 213630235,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602899836
    },
    {
        "content": "<p>But I was wondering if I am missing some folk wisdom on how to use a lemma like this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_bij\">docs#finset.sum_bij</a> neatly.</p>",
        "id": 213630292,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602899891
    },
    {
        "content": "<p>For example, the \"surjectivity\" hypothesis on that lemma is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Is there a cleaner way of deducing this from <code>surjective i</code> than what I wrote?</p>",
        "id": 213630320,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602899975
    },
    {
        "content": "<p>And perhaps more generally, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_bij\">docs#finset.sum_bij</a> is written for a strange object of type <code>Π (a : α), a ∈ s → γ</code> -- effectively a partially defined function.  I can see why that choice is made, but how do I turn my actual function <code>i</code> into an object like this?</p>",
        "id": 213630381,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602900054
    },
    {
        "content": "<p>I think there is also <code>sum_equiv</code></p>",
        "id": 213634513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602908330
    },
    {
        "content": "<p>Let me search a bit</p>",
        "id": 213634514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602908334
    },
    {
        "content": "<p>Test: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_comp\">docs#equiv.sum_comp</a></p>",
        "id": 213634686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602908691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> If you upgrade your map <code>i</code> to an <code>equiv</code> then you're done by that lemma.</p>",
        "id": 213634704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602908749
    },
    {
        "content": "<p>Great!  Thank you!  Actually my map was already an equiv, I downgraded it to try to match the other lemma :)</p>",
        "id": 213634765,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602908869
    }
]