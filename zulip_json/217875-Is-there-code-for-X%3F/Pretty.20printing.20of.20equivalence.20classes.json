[
    {
        "content": "<p>When working with several equivalence relations on the same type, it often happens that we have <code>⟦u⟧ = ⟦v⟧</code> in the context, <code>⟦u⟧ = ⟦v⟧</code> in the goal but they have different meanings. One can always click in the info view and figure it out, but is there a way to always have it displayed?</p>",
        "id": 269571430,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643290242
    },
    {
        "content": "<p>It sounds like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. Normally, you should never work with different equivalence relations on a tpy e(and most often you won't work with equivalence relations at all). Can you explain quickly what you are trying to do?</p>",
        "id": 269572238,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643290665
    },
    {
        "content": "<p>Yes, definitely an XY problem here... I am trying to clean up composition of equivalence relations, I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">setoid.comp</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n    <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span>\n<span class=\"k\">in</span> <span class=\"n\">setoid.ker</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I want to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">setoid.comp.iso</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">s.comp</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(i.e., somehow <code>⟦⟦u⟧⟧ = ⟦⟦v⟧⟧ &lt;-&gt; ⟦u⟧ = ⟦v⟧</code>)</p>",
        "id": 269572777,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643290940
    },
    {
        "content": "<p>Maybe doing something like <code>let V' : Type := V</code> somewhere would help, but as I understand it that would change the definition and I would have to trade my problem for a lot of <code>(x : V')</code> all over the place to select which relation I am talking about.</p>",
        "id": 269573020,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291067
    },
    {
        "content": "<p>Following a previous hint here, I am in fact doing <code>let f : V -&gt; quotient s := quotient.mk'</code> and replacing the bracket notation with <code>f u</code>, which makes input clearer but confuses <code>rw</code> a lot</p>",
        "id": 269573260,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291138
    },
    {
        "content": "<p>(and then applying lemmas from mathlib ends up with brackets in the context anyway)</p>",
        "id": 269573389,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291186
    },
    {
        "content": "<p>If you are trying to clean up composition of equivalence relations, I am not surprised you run into difficulties related to equivalence relations. To un-xy even more, why would you want to work with equivalence relations? (Essentially, these show up very seldom, and that's probably why you run into API problems).</p>",
        "id": 269573704,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643291325
    },
    {
        "content": "<p>I am playing around with graphs and I want to define the transitivity of the contraction operation (as in, the contraction of a contraction can be obtained as a contraction of the initial graph). It felt natural to define the contraction of a graph as a graph on the quotient by whatever I am contracting.</p>",
        "id": 269574159,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291510
    },
    {
        "content": "<p>Like so,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotient_graph</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"n\">x'</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">⟦</span><span class=\"n\">y'</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">G.adj</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span><span class=\"o\">,</span>\n    <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₃</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">h₀.symm</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₃.symm</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">h₀</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 269574405,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291597
    },
    {
        "content": "<p>Do you imply that I should rather do this instead,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">push_graph</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span>\n</code></pre></div>\n<p>or something similar?</p>",
        "id": 269574697,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291737
    },
    {
        "content": "<p>Yes, your last proposition would seem more natural (since it is strictly more general). But I've not played at all with our graph library, so I am not in a good position to give a better advice, sorry!</p>",
        "id": 269575083,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643291886
    },
    {
        "content": "<p>Indeed it is better that way because it doesn't constrain the end type.</p>",
        "id": 269575478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643292049
    },
    {
        "content": "<p>Ah, and in addition <code>push G (f.comp g)</code> ends up being exactly the same as <code>push (push G g) f</code> rather than isomorphic by some abstract nonsense stuff.</p>",
        "id": 269575629,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643292120
    }
]