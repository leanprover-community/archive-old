[
    {
        "content": "<p>Is there code for the following :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">If</span> <span class=\"n\">Q</span> <span class=\"n\">is</span> <span class=\"n\">symmetric</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">R</span> <span class=\"n\">D</span> <span class=\"n\">R</span><span class=\"bp\">^</span><span class=\"n\">T</span> <span class=\"n\">for</span> <span class=\"n\">some</span> <span class=\"n\">orthonormal</span> <span class=\"n\">matrix</span> <span class=\"n\">R</span> <span class=\"n\">and</span> <span class=\"n\">diagonal</span> <span class=\"n\">matrix</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">columns</span> <span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">constitute</span> <span class=\"n\">an</span> <span class=\"n\">orthonormal</span> <span class=\"n\">basis</span> <span class=\"n\">of</span> <span class=\"n\">eigenvectors</span> <span class=\"n\">of</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">diagonal</span> <span class=\"n\">matrix</span> <span class=\"n\">D</span> <span class=\"n\">is</span> <span class=\"n\">comprised</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">corresponding</span> <span class=\"n\">eigenvalues</span> <span class=\"n\">of</span> <span class=\"n\">Q.</span>\n</code></pre></div>\n<p>This proposition involves other helping lemmas, like showing that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">If</span> <span class=\"n\">Q</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">symmetric</span> <span class=\"n\">matrix</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"n\">Q</span> <span class=\"n\">has</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">distinct</span><span class=\"o\">)</span> <span class=\"n\">eigenvectors</span> <span class=\"n\">that</span> <span class=\"n\">form</span> <span class=\"n\">an</span> <span class=\"n\">orthonormal</span> <span class=\"n\">basis</span> <span class=\"n\">for</span> <span class=\"n\">ℜ</span><span class=\"bp\">^</span><span class=\"n\">n.</span>\n</code></pre></div>\n<p>and that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">If</span> <span class=\"n\">Q</span> <span class=\"n\">is</span> <span class=\"n\">symmetric</span> <span class=\"n\">positive</span> <span class=\"n\">semi</span><span class=\"bp\">-</span><span class=\"n\">definite</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">eigenvalues</span> <span class=\"n\">of</span> <span class=\"n\">Q</span> <span class=\"n\">are</span> <span class=\"n\">nonnegative.</span>\n</code></pre></div>\n<p>so, if there is code close to any of those, it would help as well. Thank you! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 233302181,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617708254
    },
    {
        "content": "<p>I'm not aware of anything in that direction. But <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> is the local linalg expert (-;</p>",
        "id": 233302315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617708332
    },
    {
        "content": "<p>I wish we had any matrix decompositions! I think this one is not too hard compared to say the LU-decomposition, though. We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.eigenspace\">docs#module.End.eigenspace</a>, and if we have a basis on that, then we can probably get quite close with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis_to_matrix_mul_linear_map_to_matrix\">docs#is_basis_to_matrix_mul_linear_map_to_matrix</a></p>",
        "id": 233302683,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617708569
    },
    {
        "content": "<p>Looks like the eigen-stuff is less developed than I remembered. So this is still quite far away I'm afraid :(</p>",
        "id": 233303287,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617708938
    },
    {
        "content": "<p>On the other hand, I'm about to start using the eigen stuff and I might end up filling in some holes. I even just made a small PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/7059\">https://github.com/leanprover-community/mathlib/pull/7059</a></p>",
        "id": 233304166,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617709482
    },
    {
        "content": "<p>I was pretty happy to see there's a decent start already in place.</p>",
        "id": 233304196,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617709503
    },
    {
        "content": "<p>Oh, I see! I was trying to follow the proofs from <a href=\"http://s3.amazonaws.com/mitsloan-php/wp-faculty/sites/30/2016/12/15032137/Symmetric-Matrices-and-Eigendecomposition.pdf\">http://s3.amazonaws.com/mitsloan-php/wp-faculty/sites/30/2016/12/15032137/Symmetric-Matrices-and-Eigendecomposition.pdf</a> so I though maybe some partial work has been done towards any small lemma there. I was thinking of writing the eigenstuff from the beginning, but I am not sure it can lead anywhere. So far, I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">has_eigen</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">has_eigen</span> <span class=\"n\">M</span> <span class=\"n\">μ</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">has_eigen</span> <span class=\"n\">M</span> <span class=\"n\">μ</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">symmetric_matrix</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">ᵀ</span>\n</code></pre></div>\n<p>For the following lemmas, I supposed that M is symmetric.<br>\nLemma 1 : The eigenvectors that correspond to different eigenvalues are orthogonal (DONE)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">different_eigenvalues_orthogonal_eigenvectors</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric_matrix</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">μ'</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H_ne</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">≠</span> <span class=\"n\">μ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">has_eigen</span> <span class=\"n\">M</span> <span class=\"n\">μ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">has_eigen</span> <span class=\"n\">M</span> <span class=\"n\">μ'</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Lemma 2: If there are two eigenvectors that have the same correspoding eigenvalue, then any linear combination of them (not 0) is also an eigenvector. (DONE)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">same_eigenvalue_linear_combination</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric_matrix</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H_ne</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">has_eigen</span> <span class=\"n\">M</span> <span class=\"n\">μ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">has_eigen</span> <span class=\"n\">M</span> <span class=\"n\">μ</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvector</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Lemma 3 : M has a full orthonormal basis of eigenvectors v1, . . . , vn. All eigenvalues and eigenvectors are real.<br>\n( I don't even have a formulation for this part, which is quite a crucial lemma <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> )</p>\n<p>Lemma 4 : M is diagonalizable. (main focus)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">orthogonal_matrix</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"bp\">⬝</span> <span class=\"n\">M</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">diagonal_matrix</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- A real square matrix M is orthogonally diagonalizable if there exist an orthogonal matrix U and a</span>\n<span class=\"c1\">-- diagonal matrix D such that M = U ⬝ D ⬝ Uᵀ.</span>\n<span class=\"kd\">def</span> <span class=\"n\">diagonalizable_matrix</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">orthogonal_matrix</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">diagonal_matrix</span> <span class=\"n\">D</span> <span class=\"bp\">∧</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"bp\">⬝</span> <span class=\"n\">D</span> <span class=\"bp\">⬝</span> <span class=\"n\">U</span><span class=\"bp\">ᵀ</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix_diagonalization</span> <span class=\"o\">(</span><span class=\"n\">H_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric_matrix</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">diagonalizable_matrix</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>I am not quit sure I can get anywhere with what I started, I was following the material from : </p>\n<ul>\n<li><a href=\"https://ocw.mit.edu/courses/mathematics/18-409-topics-in-theoretical-computer-science-an-algorithmists-toolkit-fall-2009/lecture-notes/MIT18_409F09_scribe1.pdf\">https://ocw.mit.edu/courses/mathematics/18-409-topics-in-theoretical-computer-science-an-algorithmists-toolkit-fall-2009/lecture-notes/MIT18_409F09_scribe1.pdf</a></li>\n<li><a href=\"http://s3.amazonaws.com/mitsloan-php/wp-faculty/sites/30/2016/12/15032137/Symmetric-Matrices-and-Eigendecomposition.pdf\">http://s3.amazonaws.com/mitsloan-php/wp-faculty/sites/30/2016/12/15032137/Symmetric-Matrices-and-Eigendecomposition.pdf</a><br>\nand trying to implement what they prove. Any suggestion is more than welcomed, since I am not a very experienced Lean programmer, nor a very good mathematician <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></li>\n</ul>",
        "id": 233305685,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617710315
    }
]