[
    {
        "content": "<p>If I go to <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group/defs.html#group.to_monoid\">group.to_monoid</a>, the doc exists.   When I press on <a href=\"https://github.com/leanprover-community/mathlib/blob/065bd5fc1c5a5c65e56162360e9e0647155b6069/src/algebra/group/defs.lean#L295\">source</a>, the string <code>to_monoid</code> occurs 0 times in the source code.  Yet if I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n<span class=\"k\">#check</span> <span class=\"n\">group.to_monoid</span> <span class=\"c1\">-- group.to_monoid : Π (α : Type u_1) [s : group α], monoid α</span>\n</code></pre></div>\n<p>it is there.  How does it get implemented?  If a class <code>B</code> extends a class <code>A</code>, does <code>A.to_B</code> automatically get defined?</p>",
        "id": 218969370,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607230834
    },
    {
        "content": "<p>That's right, its automatically generated, when you extend structures the extending structure has all the fields of the structure being extended so <code>to_blah</code> can be done by just restricting to those fields.<br>\nIn this case even though its not written anywhere we  can still <code>#print</code> it to see what it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">group.to_monoid</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[instance, priority 100, to_additive_aux id.{1} name add_group.to_add_monoid]</span>\n<span class=\"kd\">def</span> <span class=\"n\">group.to_monoid</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">group.mul</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">group.mul_assoc</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">group.one</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">group.one_mul</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">group.mul_one</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218969749,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607231432
    }
]