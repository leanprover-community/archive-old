[
    {
        "content": "<p>I'm sure we have this somewhere....</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 219503294,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607620212
    },
    {
        "content": "<p>I reduced to <code>example (a b : ℤ) : set.finite (Icc a b) := sorry</code>, but that doesn't seem to be there either</p>",
        "id": 219520075,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1607627787
    },
    {
        "content": "<p>I've been trying to use the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> is discrete, that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a,b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> is coompact in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> (which is in mathlib), and the fact that a compact subspace of a discrete space is finite. But it looks like mathlib doesn't have <code>embedding (coe : \\Z \\to \\R)</code>...</p>",
        "id": 219520267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607627883
    },
    {
        "content": "<p>But there is an \"easy\" list we can write down that enumerates all elements of <code>Icc a b</code> for integers <code>a b</code>, so maybe it's not too bad?</p>",
        "id": 219520414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607627965
    },
    {
        "content": "<p>This definitely sounds like overkill</p>",
        "id": 219520872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607628161
    },
    {
        "content": "<p>I know....</p>",
        "id": 219520999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607628199
    },
    {
        "content": "<p>Ruben's suggestion  sounds like the right way</p>",
        "id": 219521009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607628201
    },
    {
        "content": "<p>I'm just trying to find the shortest proof with what's currently in mathlib...</p>",
        "id": 219521134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607628228
    },
    {
        "content": "<p>I don't know where to go from there, sadly</p>",
        "id": 219521174,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1607628234
    },
    {
        "content": "<p>I guess define an injective function into <code>fin (b - a + 1)</code></p>",
        "id": 219521471,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607628294
    },
    {
        "content": "<p>or a surjective function from <code>fin ...</code></p>",
        "id": 219521536,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607628308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> We will definitely want the (topological) embedding of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> at some point anyway...</p>",
        "id": 219521867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607628446
    },
    {
        "content": "<p>We definitely have this somewhere.</p>",
        "id": 219523228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607629151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you mean the embedding? That would be great!</p>",
        "id": 219523288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607629195
    },
    {
        "content": "<p>Otherwise <code>interval_cases</code> couldn't do its magic.</p>",
        "id": 219523432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607629260
    },
    {
        "content": "<p>I mean finiteness of intervals in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span></p>",
        "id": 219523455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607629275
    },
    {
        "content": "<p>Oh. Even that would be great :)</p>",
        "id": 219523468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607629286
    },
    {
        "content": "<p>actually I'm not sure why I thought Adam's approach was so overkill</p>",
        "id": 219523563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607629329
    },
    {
        "content": "<p>You have to prove discreteness somehow...</p>",
        "id": 219523597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607629347
    },
    {
        "content": "<p>as long as you don't think too hard about the proof of compactness</p>",
        "id": 219523601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607629350
    },
    {
        "content": "<p>compactness of the real closed intervals is in mathlib... zero thinking :)</p>",
        "id": 219523635,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607629367
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Ico_ℤ_fintype\">docs#set.Ico_ℤ_fintype</a></p>",
        "id": 219523706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607629400
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ico_finite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">set.Ico_ℤ_fintype</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_finite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">finite_empty</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Icc_eq_empty</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">set.Ico_union_right</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finite.union</span> <span class=\"o\">(</span><span class=\"n\">Ico_finite</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finite_singleton</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Icc_finite</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">int.cast_abs</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">le_floor</span><span class=\"o\">,</span> <span class=\"n\">abs_le</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219534523,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1607634699
    },
    {
        "content": "<p>For <code>Icc_finite</code> you can also convert it to <code>Ico_finite a (b + 1)</code>.</p>",
        "id": 219540925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607638178
    },
    {
        "content": "<p>A little golfing following <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> 's suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ico_finite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">set.Ico_ℤ_fintype</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_finite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Ico_finite</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int.lt_add_one_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Icc_finite</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">int.cast_abs</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">le_floor</span><span class=\"o\">,</span> <span class=\"n\">abs_le</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219552154,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607645991
    }
]