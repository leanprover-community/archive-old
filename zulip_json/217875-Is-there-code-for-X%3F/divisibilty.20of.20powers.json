[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/17632\">my PR</a>, I also proved the following statements</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">odd_pow_lem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sub_one_dvd_pow_sub_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I wasn't able to find these in mathlib. Technically I only need the case when <code>k = 1</code> for <code>odd_pow_lem</code>. If they aren't already in mathlib, do they belong?<br>\nI also have proofs of the more general <code>lemma ab_lem (a b n : ℕ) : (a - b) ∣ (a^n - b^n)</code> and Kevin Buzzard suggested that I reformalize <code>odd_pow_lem</code> as <code>lemma odd_pow_lem (a : ℤ) (q k : ℕ) (h₂ : odd q) : a^k + 1 ∣ a^(q * k) + 1</code> to avoid natural number division.</p>",
        "id": 317027835,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671565747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"398581\">@Mantas Baksys</span>, thoughts?</p>",
        "id": 317028441,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671565948
    },
    {
        "content": "<p>I think that <code>lemma ab_lem (a b n : ℕ) : (a - b) ∣ (a^n - b^n)</code> is extremely useful.</p>",
        "id": 317029657,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671566420
    },
    {
        "content": "<p>This one is not in your PR, is it?</p>",
        "id": 317030419,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671566716
    },
    {
        "content": "<p>It used to be, but I removed it because I only ever used the <code>b = 1</code> case.<br>\nIt has a (ungolfed) proof <a href=\"https://github.com/osbourn/fermat-pseudoprimes/blob/99bba0e1a33779abc8d4cb0c02c26f25f89fc0f5/src/fermat_psp.lean#L178\">here</a></p>",
        "id": 317030624,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671566806
    },
    {
        "content": "<p>I would say that <code>odd_pow_lem</code> is better stated off as <code>odd q -&gt; a + 1 | a^q + 1</code> avoiding natural division and the divisibility hypothesis, and then you can apply with <code>a = a^k</code> if you want your version. As for <code>sub_one_dvd_pow_sub_one</code> I think it's probably better stated for <code>a : int</code>, and deduced for naturals afterwards (note that it looks true for a=0 so <code>h</code> should be removed in the final version, but you can do cases on a when proving the natural version)</p>",
        "id": 317030901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671566913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/divisibilty.20of.20powers/near/317030624\">said</a>:</p>\n<blockquote>\n<p>It used to be, but I removed it because I only ever used the <code>b = 1</code> case.<br>\nIt has a (ungolfed) proof <a href=\"https://github.com/osbourn/fermat-pseudoprimes/blob/99bba0e1a33779abc8d4cb0c02c26f25f89fc0f5/src/fermat_psp.lean#L178\">here</a></p>\n</blockquote>\n<p>Nice!</p>\n<p>Just one comment... for me, the terms with \"triangle\" are hard to read.<br>\nInstead of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">h₈</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">h₇</span>\n</code></pre></div>\n<p>I'd write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">h₈</span> <span class=\"n\">at</span>  <span class=\"n\">h₇</span>\n</code></pre></div>",
        "id": 317031679,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671567236
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/geom_sum.html#geom_sum%E2%82%82_mul\">docs#geom_sum₂_mul</a> and friends might be useful.</p>",
        "id": 317032238,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1671567466
    },
    {
        "content": "<p>(This came up in my seminar a while ago. I was certain I had seen this somewhere in mathlib, but could not find it when I was looking for it. The name is not what I had expected...)</p>",
        "id": 317032368,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1671567509
    },
    {
        "content": "<blockquote>\n<p>I would say that <code>odd_pow_lem</code> is better stated off as <code>odd q -&gt; a + 1 | a^q + 1</code> avoiding natural division and the divisibility hypothesis, and then you can apply with <code>a = a^k</code> if you want your version.</p>\n</blockquote>\n<p>I agree, for some reason it never occurred to me that the two forms are actually equivalent</p>",
        "id": 317033057,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671567724
    },
    {
        "content": "<p>Here are some short proofs of <code>ab_lem</code> for <code>ℤ</code> and <code>ℕ</code> using the lemma Michael Stoll suggested</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">ab_lem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">dvd.intro_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">geom_sum₂_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">ab_lem'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">ab_lem</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.sub_eq_zero_iff_le.mpr</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">dvd_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 317036655,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671569047
    },
    {
        "content": "<p>You can <code>cases le_total b a</code></p>",
        "id": 317040435,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671570528
    },
    {
        "content": "<p>Or split on <code>le_or_lt</code>.</p>",
        "id": 317055088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671576959
    },
    {
        "content": "<p><a href=\"https://artofproblemsolving.com/wiki/index.php/Sum_and_difference_of_powers\">This link</a> suggests that for all <code>a, b, n</code> where <code>n</code> is odd then <code>a + b ∣ a^n + b^n</code>, which is basically a more general version of what I proved. Since <code>geom_sum₂_mul</code> is in the library, is there something similar for sums of odd powers?</p>",
        "id": 317271576,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671668586
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/geom\">docs#geom</a>_sum₂_mul</p>",
        "id": 317271986,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671668889
    },
    {
        "content": "<p>oh great the linkifier is broken</p>",
        "id": 317272001,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671668901
    },
    {
        "content": "<p>geom_sum2_mul seems to pretty much be that lemma with <code>x = a, y = -b</code>, no?</p>",
        "id": 317272044,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671668953
    },
    {
        "content": "<p>Yeah it does, I was just wondering if there was a more convenient form to use</p>",
        "id": 317272222,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671669071
    },
    {
        "content": "<p>I don't think so, I also don't think a PR that makes it would be unwelcome though! not sure how far away <code>geom_sum</code> is from a port but some lemma called <code>odd.pow_add_X</code> or something of the sort would be nice</p>",
        "id": 317272964,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671669600
    },
    {
        "content": "<p>I tried proving that <code>(finset.range n).sum (λ (i : ℕ), (-1)^i * a ^ i * b ^ (n - 1 - i)) * (a + b) = a^n + b^n</code>. Proving that <code>(finset.range n).sum (λ (i : ℕ), (a ^ i * (-b) ^ (n - 1 - i)) * (a + b) = a^n + b^n</code> is basically a direct result of <code>geom_sum₂_mul</code>. Proving that the two finset sums are equal is harder, as it requires showing that <code>(-1 : ℤ) ^ i = (-1) ^ (n - 1 - i)</code>, for odd n, which is not true in general due to how natural number subtraction works.</p>\n<p>I don't actually care about what is inside the finset sum for my PR because it only depends on divisibility, but I could try finishing the proof if it would be helpful to have in the library.</p>",
        "id": 317275526,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671671658
    },
    {
        "content": "<p>I'd say just upload the divisibility proof and if people want the \"proper\" proof, they'll ask. Mention these details in the PR description!</p>",
        "id": 317275597,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671671725
    },
    {
        "content": "<p>Which file and namespace would these go into? I'm planning on doing <code>a - b | a^n - b^n</code> and <code>odd n -&gt; a + b | a^n + b^n</code> for both <code>a b : nat</code> and <code>a b : int</code> (maybe it works for any comm ring in general)?</p>",
        "id": 317275798,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671671926
    },
    {
        "content": "<p>I'd try to stick to comm_rings if you can, I find it unlikely it'd be accepted for <code>a b : int</code> only. I'd put the second one in the <code>odd</code> namespace (not sure about the name) and the first one, I'd call <code>sub_dvd_pow_sub_pow</code> maybe?</p>",
        "id": 317275928,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671672029
    },
    {
        "content": "<p>I don't know how far down the import chain <code>algebra.geom_sum</code> is, but I'd imagine it would be after <code>data.nat.parity</code>. Should these just go in <code>algebra.geom_sum</code>?</p>",
        "id": 317276089,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671672183
    },
    {
        "content": "<p>It may be easier to plug in <code>x = -a, y = b</code> into geom_sum2_mul to get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and cancel a minus sign from both sides (when n is odd).</p>",
        "id": 317276502,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671672580
    },
    {
        "content": "<p>That definitely would help if I was trying to provide a version of <code>geom_sum₂_mul</code> for subtraction. I don't think it matters for just divisibility though.<br>\nIt would avoid all problems with natural number subtraction in my attempted proof above though.</p>",
        "id": 317276666,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671672722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"521331\">@Niels Voss</span> I don't understand why <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/geom_sum.html#geom_sum%E2%82%82_mul\">docs#geom_sum₂_mul</a> doesn't solve all your problems? What are you trying to prove?</p>",
        "id": 317277069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671673113
    },
    {
        "content": "<p>To get <code>a + b ∣ a^n + b^n</code> for <code>n</code> odd and <code>a</code>, <code>b</code> naturals, just prove it for integers and then observe that a natural divides another one iff the corresponding integer divides the other one.</p>",
        "id": 317277160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671673205
    },
    {
        "content": "<p>It does, I just thought that it would be nice if the lemmas were in a more convenient and <code>library_search</code> friendly form for the rest of the library. If this isn't necessary, my PR could just use <code>geom_sum₂_mul</code> directly.</p>",
        "id": 317277307,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671673337
    },
    {
        "content": "<p>I was just referring to the fact that you seemed to be re-proving results about <code>(finset.range n).sum (λ (i : ℕ), (-1)^i * a ^ i * b ^ (n - 1 - i))</code>, which should not be necessary. You don't want to go there.</p>",
        "id": 317277745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671673841
    },
    {
        "content": "<p>Yeah, I don't really know why I was trying to do that (I guess I thought it would add something to <code>algebra.geom_sum</code>?) but you are right that it isn't necessary for divisibility.</p>",
        "id": 317277830,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671673934
    },
    {
        "content": "<p>Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sub_dvd_pow_sub_pow</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dvd.intro_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">geom_sum₂_mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat.sub_dvd_pow_sub_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">sub_dvd_pow_sub_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"n\">h.le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.sub_eq_zero_of_le</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">dvd_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">odd.add_dvd_pow_add_pow</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">geom_sum₂_mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">odd.neg_pow</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dvd.intro_left</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat.add_dvd_pow_add_pow_of_odd</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">odd.add_dvd_pow_add_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>I don't really know if I should change any of the names.</p>",
        "id": 317278182,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671674375
    },
    {
        "content": "<p>Nice! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.geom_sum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>for the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 317278650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671674828
    },
    {
        "content": "<p>Oh yeah, sorry I forgot to mention that this is in <code>algebra/geom_sum.lean</code> (outside of any namespace though). It can be moved if needed.</p>",
        "id": 317278731,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671674899
    },
    {
        "content": "<p>As a general guideline, is there always a space between <code>x</code> and <code>^</code> in <code>x ^ y</code>? Because I haven't always been adding them.</p>",
        "id": 317279832,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671675989
    },
    {
        "content": "<p>I always put them in, others often don't; it's a bit weird because usually there are concrete conventions for everything.</p>",
        "id": 317282272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671678329
    },
    {
        "content": "<p>I put them too.</p>",
        "id": 317703709,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671878936
    },
    {
        "content": "<p>It is an infix operator. As such, it <em>should</em> get spaces around it. But this rule is loosely enforced.</p>",
        "id": 317720400,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671886190
    }
]