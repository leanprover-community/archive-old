[
    {
        "content": "<p>Just for fun, I wanted to prove the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>which I proved doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pi.le_def</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and I was wondering why I can't do <code>by {funext, linarith}</code>. I guess this is because function extensionality is meant to be an axiom (?) about <em>equality</em> of functions; but is there any deep reason why function extensionality cannot be an axiom about any relation of functions, rather than only about <code>eq</code>? Would it be nonsensical to be able to add some <code>@[funext]</code> attribute to a lemma like <code>pi.le_def</code> that would turn the goal of my example to the inequality between natural numbers that can be solved with <code>linarith</code>?  Is the problem (for the example at hand) related to the fact that <code>eq : α → Prop</code> while <code>le : α → α → Prop</code>?</p>",
        "id": 251521701,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630484909
    },
    {
        "content": "<p>There is nothing inherent about <code>le</code> or any other relation that would make a funext-like theorem true. This one is only true because this is how <code>le</code> on functions is defined (and that's what <code>pi.le_def</code> is saying)</p>",
        "id": 251521922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485023
    },
    {
        "content": "<p>You obviously wouldn't want such a theorem for <code>ne</code>!</p>",
        "id": 251521951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485034
    },
    {
        "content": "<p>The theorem is also false for <code>lt</code></p>",
        "id": 251521999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485072
    },
    {
        "content": "<p>RIght: you mean that two functions are different even if somewhere they coincide.</p>",
        "id": 251522027,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485090
    },
    {
        "content": "<p>And <code>ext</code> is really saying something like \"the relation you want between functions is \"equivalent\" to the relation you want between their values\".</p>",
        "id": 251522139,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485125
    },
    {
        "content": "<p>But for <code>le</code> is true, so it should be possible to add my <code>@[funext]</code> stuff to it, and not to <code>ne</code> or <code>lt</code>, no?</p>",
        "id": 251522199,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485163
    },
    {
        "content": "<p>Well that attribute would be <code>@[ext]</code> I suppose</p>",
        "id": 251522258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485202
    },
    {
        "content": "<p>but it seems a little niche</p>",
        "id": 251522273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485210
    },
    {
        "content": "<p>But I tried to add it; in the sense that in my file I copied with a different name the <code>lemma pi.le_def</code> and put a <code>@[ext]</code> before it. Yet funext was not advancing.</p>",
        "id": 251522339,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485243
    },
    {
        "content": "<p>indeed, because <code>ext</code> assumes it's working with equality</p>",
        "id": 251522392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485261
    },
    {
        "content": "<p>Ah, so it only looks for equalities, not for every lemma which is marked <code>@[ext]</code> that would match the current goal?</p>",
        "id": 251522507,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485315
    },
    {
        "content": "<p>That would be too inefficient</p>",
        "id": 251522534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485333
    },
    {
        "content": "<p>it could be extended to allow arbitrary relations, but at that point it's really just applying random theorems that have some vague topical resemblance to extensionality</p>",
        "id": 251522544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485340
    },
    {
        "content": "<p>But isn't it what <code>simp</code> does?</p>",
        "id": 251522564,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485354
    },
    {
        "content": "<p>not quite, <code>simp</code> also uses indexing to speed up the search</p>",
        "id": 251522666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485389
    },
    {
        "content": "<p><code>ext</code> uses indexing on the type of the equality that is the goal</p>",
        "id": 251522713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485414
    },
    {
        "content": "<p>if it's not equality then it is less clear where to find the type</p>",
        "id": 251522755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485440
    },
    {
        "content": "<p>I see, this seems to answer my initial question. Thanks!</p>\n<p>But on the other hand, wouldn't it be nice to add the <code>@[simp]</code> attribute to <code>pi.le_def</code>? This works in my example.</p>",
        "id": 251522828,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485472
    },
    {
        "content": "<p>I suppose, although it is only indexed on <code>le</code> and matches anything so it might be expensive</p>",
        "id": 251522936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485513
    },
    {
        "content": "<p>that is, any application of <code>simp</code> to any inequality will apply this lemma</p>",
        "id": 251523003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485542
    },
    {
        "content": "<p>Got it! On the other hand, it seems that \"inequalities of functions\" show up pretty often and it would look natural to me that they immediately simplify to inequalities of values.</p>",
        "id": 251523068,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485586
    },
    {
        "content": "<p>Actually on second thought it's not a good idea even ignoring the performance angle, because that kind of expansion is not always desirable</p>",
        "id": 251523162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485607
    },
    {
        "content": "<p>Ah, right.</p>",
        "id": 251523211,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485633
    },
    {
        "content": "<p>OKOK, thanks for your time, I have a much clearer picture now.</p>",
        "id": 251523292,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485668
    },
    {
        "content": "<p>Usually, theorems that you apply right at the beginning of the proof, unfolding definitions in the theorem statement, are not good simp lemmas because in most other cases you won't want to unfold the definitions, and this theorem is some internal API theorem that wants to unfold</p>",
        "id": 251523363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485713
    },
    {
        "content": "<p>And what is the general philosophy behind <em>good</em> <code>simp</code> lemmas?</p>",
        "id": 251523528,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485781
    },
    {
        "content": "<p>they are things that \"simplify\" the goal</p>",
        "id": 251523729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485874
    },
    {
        "content": "<p>things that make the goal smaller are usually good, but things that reduce the complexity of the statement in other senses can also be useful</p>",
        "id": 251523794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485911
    },
    {
        "content": "<p>OK, so it is really a matter of experience to understand what <em>simple</em> or <em>complex</em> mean (a part from trivial examples).</p>",
        "id": 251523885,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630485956
    },
    {
        "content": "<p>we have the concept of \"simp-normal form\" for the terms that <code>simp</code> will not simplify any longer, and it helps to keep in mind what you want the simp normal form to look like</p>",
        "id": 251523889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630485957
    },
    {
        "content": "<p>Having <code>pi.le_def</code> as a simp lemma is saying that we don't want inequalities of function types to ever be part of simp normal form</p>",
        "id": 251524038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630486013
    },
    {
        "content": "<p>but I can certainly imagine proofs where you want to work at that level and having <code>simp</code> undo that would be annoying</p>",
        "id": 251524129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630486062
    },
    {
        "content": "<p>AH! This I can understand is bad.</p>",
        "id": 251524134,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630486063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/funext.20for.20inequalities/near/251524129\">said</a>:</p>\n<blockquote>\n<p>but I can certainly imagine proofs where you want to work at that level and having <code>simp</code> undo that would be annoying</p>\n</blockquote>\n<p>Sure <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 251524160,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630486075
    },
    {
        "content": "<p>unfortunately it's hard to give a precise definition because <code>simp</code> is used across all domains in mathlib and the notion of simp-normal form is defined in some semi-consistent way across the board</p>",
        "id": 251524368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630486158
    },
    {
        "content": "<p>And will some of this change in <code>lean-4</code>? I mean to ask: will the simplifier be more or less the same as in <code>lean-3</code>?</p>",
        "id": 251524405,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630486177
    },
    {
        "content": "<p>so you will probably just have to get a feel for it</p>",
        "id": 251524433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630486194
    },
    {
        "content": "<p>I don't think so; <code>simp</code> already exists in lean 4 and we're likely to use it in more or less the same way</p>",
        "id": 251524446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630486202
    },
    {
        "content": "<p>Note that instead of <code>simp [pi.le_def]</code>you can just do <code>intro x</code></p>",
        "id": 251529212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630488692
    },
    {
        "content": "<p>I have checked this and something which I can't really understand happens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nice</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pi.le_def</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>gives me a <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>, while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ugly</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does not finish, ending with <code>linarith failed to find a contradiction</code>. The (to me) incredible thing is that the state both after <code>intro n</code> in the first and after <code>simp</code> in the second is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">⊢</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>(and hovering over all terms, it seems that they are interpreted as being of the same type, both in <code>nice</code> and in <code>ugly</code>). Yet, in one case <code>linarith</code> works and in the other it does not, although the local hypotheses seem identical.</p>",
        "id": 251537369,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630492538
    },
    {
        "content": "<p>Adding a <code>dsimp</code> after the <code>simp</code> fixes it</p>",
        "id": 251539109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630493648
    },
    {
        "content": "<p><code>ugly</code> is about <code>has_le.le ((λ (n : nat), nat) n)</code>, <code>nice</code> is about <code>has_le.le nat</code></p>",
        "id": 251539134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630493670
    },
    {
        "content": "<p>Great! Thanks.</p>",
        "id": 251544547,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630496997
    },
    {
        "content": "<p>I also recently wrote a bunch of proofs that began with <code>simp only [pi.le_def],</code>, and was a bit sad about it. I think it would be a very reasonable extension of <code>ext</code> to handle inequalities, although, as Mario essentially says, not obviously worth the effort of implementing.</p>",
        "id": 252137759,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630913782
    }
]