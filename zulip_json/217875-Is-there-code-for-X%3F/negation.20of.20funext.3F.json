[
    {
        "content": "<p>Does <code>example (f : α → β) (g : α → β) : f ≠ g ↔ ∃ a : α, f a ≠ g a</code> exist? I've looked everywhere and I can't find it at all, but I refuse to believe this isn't in mathlib</p>",
        "id": 233468935,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617793763
    },
    {
        "content": "<p>Apparently not? If you need a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">not_congr</span> <span class=\"n\">function.funext_iff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">not_forall</span>\n</code></pre></div>",
        "id": 233471968,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1617795515
    },
    {
        "content": "<p>Proof was no big dealio was just confused it wasn't in mathlib ;b Feels like something worth PRing, I'd do it but you've written all the code now! Not sure where it'd fit in, maybe in <code>logic.function.basic</code>?</p>",
        "id": 233472221,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617795687
    },
    {
        "content": "<p>This doesn't scale very well - if we're going to add this lemma, we will probably want to add such a variant for every <code>ext</code> lemma in mathlib.</p>",
        "id": 233473026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617796172
    },
    {
        "content": "<p>I guess if we have 1000 proofs of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\iff B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> then I'm not sure we want 1000 new proofs of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>A</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">¬</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">\\lnot A\\iff \\lnot B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.</p>",
        "id": 233473879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617796622
    },
    {
        "content": "<p>Would it maybe work better as an extension to the <code>ext</code> tactic, maybe <code>ext!</code>?</p>",
        "id": 233473930,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617796654
    },
    {
        "content": "<p>What's the goal state you ended up needing this for, <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>?</p>",
        "id": 233492580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617804106
    },
    {
        "content": "<p>Just looked, and I ended up deleting it, and just using<code>contrapose!</code> earlier. It probably makes the code far more readable, tbh</p>",
        "id": 233492982,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617804236
    }
]