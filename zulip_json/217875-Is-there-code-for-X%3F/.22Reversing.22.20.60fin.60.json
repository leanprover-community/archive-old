[
    {
        "content": "<p>Does this exist?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- map [0..n-1] to [n-1..0]-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fin.flip</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_lt_of_pos_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_pos</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_of_lt</span> <span class=\"n\">k.prop</span><span class=\"o\">)⟩,</span>\n  <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fin.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_eq_iff_eq_add</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_of_lt</span> <span class=\"n\">k.prop</span><span class=\"o\">),</span>\n      <span class=\"bp\">←</span><span class=\"n\">nat.sub_add_comm</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_of_lt</span> <span class=\"n\">l.prop</span><span class=\"o\">),</span>\n      <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">nat.sub_eq_iff_eq_add</span> <span class=\"o\">(</span><span class=\"n\">le_add_right</span> <span class=\"bp\">$</span> <span class=\"n\">nat.succ_le_of_lt</span> <span class=\"n\">l.prop</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">nat.succ.inj</span> <span class=\"bp\">$</span> <span class=\"n\">nat.add_left_cancel</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228117683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614503472
    },
    {
        "content": "<p>Are you better off proving it's an <code>equiv</code> and deducing it's an injection? Sometimes the easiest way to prove something is an injection is just to write down a one sided inverse</p>",
        "id": 228117950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614503770
    },
    {
        "content": "<p>Sure, maybe easier to prove using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.involutive.to_equiv\">docs#function.involutive.to_equiv</a> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- map [0..n-1] to [n-1..0]-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fin.flip</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">function.involutive.to_equiv</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_lt_of_pos_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_pos</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_of_lt</span> <span class=\"n\">k.prop</span><span class=\"o\">)⟩)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">fin.ext</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I was kind of hoping the fins stuff would already exist somewhere</p>",
        "id": 228118211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614504159
    },
    {
        "content": "<p>Even better, just define this as a function and prove that it is an involution</p>",
        "id": 228118241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614504229
    },
    {
        "content": "<p>That's exactly what my previous message does?</p>",
        "id": 228118287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614504246
    },
    {
        "content": "<p>No, like two definitions</p>",
        "id": 228118300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614504254
    },
    {
        "content": "<p>Is <code>flip</code> even a good name?</p>",
        "id": 228119257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614505522
    },
    {
        "content": "<p><code>reverse</code>?</p>",
        "id": 228126915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614514374
    },
    {
        "content": "<p>reverse seems more apt for <code>(f : fin n -&gt; a) : fin n -&gt; a := f \\comp flip</code></p>",
        "id": 228127445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614514988
    },
    {
        "content": "<p>\"complement\" is maybe at least as good as \"flip\"?</p>",
        "id": 228127564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614515120
    }
]