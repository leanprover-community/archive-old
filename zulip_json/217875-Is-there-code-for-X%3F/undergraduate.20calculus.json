[
    {
        "content": "<p>Can we do things like this now?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 193772230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586784970
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_mul</span> <span class=\"o\">(</span><span class=\"n\">differentiable_at</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">differentiable_cos</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">differentiable_sin</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">differentiable_exp</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">deriv</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">differentiable_cos</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">differentiable_sin</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">deriv_cos</span><span class=\"o\">,</span> <span class=\"n\">deriv_sin</span><span class=\"o\">,</span> <span class=\"n\">deriv_exp</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</pre></div>",
        "id": 193772766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586785404
    },
    {
        "content": "<p>I cheated rather (un)subtly though</p>",
        "id": 193772784,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586785417
    },
    {
        "content": "<p>Kevin's question was clearly under-specified.</p>",
        "id": 193773494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586785881
    },
    {
        "content": "<p>So I think it's fair.</p>",
        "id": 193773503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586785891
    },
    {
        "content": "<p><code>deriv.comp</code> being expressed in term of <code>smul</code> is bugging me. I guess this comes from our general base field bias, but it's still bugging me. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ?</p>",
        "id": 193773825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586786106
    },
    {
        "content": "<p>So you changed the question from real to complex? Can we not do real yet?</p>",
        "id": 193774589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586786532
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">deriv_exp</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"err\">∘</span> <span class=\"n\">sin</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">deriv_sin</span><span class=\"o\">,</span> <span class=\"n\">deriv_cos</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_cos</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_sin</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_cos</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">differentiable_sin</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_exp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193774606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586786547
    },
    {
        "content": "<p>That's for real</p>",
        "id": 193774621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586786555
    },
    {
        "content": "<p>Johan, your version is complex as well</p>",
        "id": 193774655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586786583
    },
    {
        "content": "<p>It works for real</p>",
        "id": 193774663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586786595
    },
    {
        "content": "<p>Sure</p>",
        "id": 193774708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586786629
    },
    {
        "content": "<p>You can put <code>(x : real)</code> in the statement</p>",
        "id": 193774722,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586786640
    },
    {
        "content": "<p>gaagh if I had found <code>deriv.comp</code> I probably wouldn't have even asked this. I thought I checked? Maybe I tried <code>deriv_comp</code>?</p>",
        "id": 193774885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586786714
    },
    {
        "content": "<p>I found <code>deriv_cos</code>, maybe that was what threw me off.</p>",
        "id": 193774927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586786744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193774655\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193774655\">said</a>:</p>\n<blockquote>\n<p>Johan, your version is complex as well</p>\n</blockquote>\n<p>Why is my version complex? After the funext I have a <code>x : real</code> in my goal state</p>",
        "id": 193774934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586786746
    },
    {
        "content": "<p>if you change <code>open real</code> to <code>open complex</code> it still works</p>",
        "id": 193775012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586786777
    },
    {
        "content": "<p>The most readable version so far is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_mul</span><span class=\"o\">,</span> <span class=\"n\">deriv</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">deriv_cos</span><span class=\"o\">,</span> <span class=\"n\">deriv_sin</span><span class=\"o\">,</span> <span class=\"n\">deriv_exp</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_cos</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_sin</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_cos</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">differentiable_sin</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_exp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193775072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586786813
    },
    {
        "content": "<p>Anyway, the interesting question is... how do we make this <code>by simp; ring</code></p>",
        "id": 193775098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586786831
    },
    {
        "content": "<p>Which clearly shows we need a tactic taking care of the four apply at the end.</p>",
        "id": 193775113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586786844
    },
    {
        "content": "<p>Or <code>by power_through_analysis</code></p>",
        "id": 193775121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586786848
    },
    {
        "content": "<p>I was wondering how readable we could get it. I was thinking of undergraduates.</p>",
        "id": 193775126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586786850
    },
    {
        "content": "<p>I am pretty sure that an UG at my university solves this question using an algorithm</p>",
        "id": 193775151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586786866
    },
    {
        "content": "<p>They could even differentiate <code>log(x)+log(-x)</code> using the same algorithm</p>",
        "id": 193775209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586786884
    },
    {
        "content": "<p>This is all very weird. Does anyone know why</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">differentiable_cos</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>gives a time-out? I would expect it to fail very quickly. Note that sin and cos mistake is intentional. I want a typing error, but not a timeout.</p>",
        "id": 193776607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586787788
    },
    {
        "content": "<p>Had the same problem!</p>",
        "id": 193776675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586787831
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">differentiable_cos</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 193777810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586788536
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/b995aa029459a043b807695ea6d84ae7\" title=\"https://gist.github.com/kbuzzard/b995aa029459a043b807695ea6d84ae7\">https://gist.github.com/kbuzzard/b995aa029459a043b807695ea6d84ae7</a></p>",
        "id": 193777934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586788594
    },
    {
        "content": "<p>It is plausible that <code>sin = cos</code></p>",
        "id": 193778000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586788634
    },
    {
        "content": "<p>It takes a long time to fail, and it seems to ask this question many many times</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [18]: sin x&#39; =?= cos x&#39;\n[type_context.is_def_eq_detail] [19]: (exp (-x&#39; * I) - exp (x&#39; * I)) * I / 2 =?= (exp (x&#39; * I) + exp (-x&#39; * I)) / 2\n[type_context.is_def_eq_detail] [20]: algebra.div ((exp (-x&#39; * I) - exp (x&#39; * I)) * I) 2 =?= algebra.div (exp (x&#39; * I) + exp (-x&#39; * I)) 2\n[type_context.is_def_eq_detail] unfold left&amp;right: algebra.div\n[type_context.is_def_eq_detail] [21]: (exp (-x&#39; * I) - exp (x&#39; * I)) * I * 2⁻¹ =?= (exp (x&#39; * I) + exp (-x&#39; * I)) * 2⁻¹\n[type_context.is_def_eq_detail] [22]: mul_zero_class.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I) 2⁻¹ =?= mul_zero_class.mul (exp (x&#39; * I) + exp (-x&#39; * I)) 2⁻¹\n[type_context.is_def_eq_detail] [23]: semiring.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I) 2⁻¹ =?= semiring.mul (exp (x&#39; * I) + exp (-x&#39; * I)) 2⁻¹\n[type_context.is_def_eq_detail] [24]: ring.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I) 2⁻¹ =?= ring.mul (exp (x&#39; * I) + exp (-x&#39; * I)) 2⁻¹\n[type_context.is_def_eq_detail] [25]: division_ring.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I) 2⁻¹ =?= division_ring.mul (exp (x&#39; * I) + exp (-x&#39; * I)) 2⁻¹\n[type_context.is_def_eq_detail] [26]: field.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I) 2⁻¹ =?= field.mul (exp (x&#39; * I) + exp (-x&#39; * I)) 2⁻¹\n[type_context.is_def_eq_detail] [27]: comm_ring.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I) 2⁻¹ =?= comm_ring.mul (exp (x&#39; * I) + exp (-x&#39; * I)) 2⁻¹\n[type_context.is_def_eq_detail] [28]: (exp (-x&#39; * I) - exp (x&#39; * I)) * I * 2⁻¹ =?= (exp (x&#39; * I) + exp (-x&#39; * I)) * 2⁻¹\n[type_context.is_def_eq_detail] [29]: (λ (z w : ℂ), {re := z.re * w.re - z.im * w.im, im := z.re * w.im + z.im * w.re})\n  ((exp (-x&#39; * I) - exp (x&#39; * I)) * I)\n  2⁻¹ =?= (λ (z w : ℂ), {re := z.re * w.re - z.im * w.im, im := z.re * w.im + z.im * w.re}) (exp (x&#39; * I) + exp (-x&#39; * I))\n  2⁻¹\n[type_context.is_def_eq_detail] after whnf_core: {re := ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re - ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im,\n im := ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.im + ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.re} =?= {re := (exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re - (exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im,\n im := (exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.im + (exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.re}\n[type_context.is_def_eq_detail] [30]: ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re - ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im =?= (exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re - (exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im\n[type_context.is_def_eq_detail] [31]: algebra.sub (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re) (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im) =?= algebra.sub ((exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re) ((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im)\n[type_context.is_def_eq_detail] unfold left&amp;right: algebra.sub\n[type_context.is_def_eq_detail] [32]: ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re + -(((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im) =?= (exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re + -((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im)\n[type_context.is_def_eq_detail] [33]: add_semigroup.add (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re)\n  (-(((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im)) =?= add_semigroup.add ((exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re) (-((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im))\n[type_context.is_def_eq_detail] [34]: add_monoid.add (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re)\n  (-(((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im)) =?= add_monoid.add ((exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re) (-((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im))\n[type_context.is_def_eq_detail] [35]: add_group.add (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re)\n  (-(((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im)) =?= add_group.add ((exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re) (-((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im))\n[type_context.is_def_eq_detail] [36]: add_comm_group.add (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re)\n  (-(((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im)) =?= add_comm_group.add ((exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re) (-((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im))\n[type_context.is_def_eq_detail] [37]: ring.add (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re) (-(((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im)) =?= ring.add ((exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re) (-((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im))\n[type_context.is_def_eq_detail] [38]: comm_ring.add (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re)\n  (-(((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im)) =?= comm_ring.add ((exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re) (-((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im))\n[type_context.is_def_eq_detail] [39]: comm_ring.add (((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re)\n  (-(((exp (-x&#39; * I) - exp (x&#39; * I)) * I).im * 2⁻¹.im)) =?= comm_ring.add ((exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re) (-((exp (x&#39; * I) + exp (-x&#39; * I)).im * 2⁻¹.im))\n[type_context.is_def_eq_detail] [40]: ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re * 2⁻¹.re =?= (exp (x&#39; * I) + exp (-x&#39; * I)).re * 2⁻¹.re\n[type_context.is_def_eq_detail] [41]: no_zero_divisors.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re 2⁻¹.re =?= no_zero_divisors.mul (exp (x&#39; * I) + exp (-x&#39; * I)).re 2⁻¹.re\n[type_context.is_def_eq_detail] [42]: domain.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re 2⁻¹.re =?= domain.mul (exp (x&#39; * I) + exp (-x&#39; * I)).re 2⁻¹.re\n[type_context.is_def_eq_detail] [43]: linear_ordered_ring.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re 2⁻¹.re =?= linear_ordered_ring.mul (exp (x&#39; * I) + exp (-x&#39; * I)).re 2⁻¹.re\n[type_context.is_def_eq_detail] [44]: linear_ordered_comm_ring.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re 2⁻¹.re =?= linear_ordered_comm_ring.mul (exp (x&#39; * I) + exp (-x&#39; * I)).re 2⁻¹.re\n[type_context.is_def_eq_detail] [45]: comm_ring.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re 2⁻¹.re =?= comm_ring.mul (exp (x&#39; * I) + exp (-x&#39; * I)).re 2⁻¹.re\n[type_context.is_def_eq_detail] [46]: comm_ring.mul ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re 2⁻¹.re =?= comm_ring.mul (exp (x&#39; * I) + exp (-x&#39; * I)).re 2⁻¹.re\n[type_context.is_def_eq_detail] [47]: ((exp (-x&#39; * I) - exp (x&#39; * I)) * I).re =?= (exp (x&#39; * I) + exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [48]: (exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re - (exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im =?= (exp (x&#39; * I)).re + (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [49]: algebra.sub ((exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re) ((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im) =?= distrib.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] unfold left: algebra.sub\n[type_context.is_def_eq_detail] [50]: (exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re + -((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im) =?= distrib.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [51]: add_semigroup.add ((exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re) (-((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im)) =?= ring.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [52]: add_monoid.add ((exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re) (-((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im)) =?= comm_ring.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [53]: add_group.add ((exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re) (-((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im)) =?= comm_ring.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [54]: add_comm_group.add ((exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re) (-((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im)) =?= comm_ring.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [55]: ring.add ((exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re) (-((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im)) =?= comm_ring.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [56]: comm_ring.add ((exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re) (-((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im)) =?= comm_ring.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [57]: comm_ring.add ((exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re) (-((exp (-x&#39; * I) - exp (x&#39; * I)).im * I.im)) =?= comm_ring.add (exp (x&#39; * I)).re (exp (-x&#39; * I)).re\n[type_context.is_def_eq_detail] [58]: (exp (-x&#39; * I) - exp (x&#39; * I)).re * I.re =?= (exp (x&#39; * I)).re\n[type_context.is_def_eq_detail] [59]: no_zero_divisors.mul (exp (-x&#39; * I) - exp (x&#39; * I)).re I.re =?= (exp (x&#39; * I)).re\n[type_context.is_def_eq_detail] [60]: domain.mul (exp (-x&#39; * I) - exp (x&#39; * I)).re I.re =?= (exp (x&#39; * I)).re\n[type_context.is_def_eq_detail] [61]: linear_ordered_ring.mul (exp (-x&#39; * I) - exp (x&#39; * I)).re I.re =?= (exp (x&#39; * I)).re\n[type_context.is_def_eq_detail] [62]: linear_ordered_comm_ring.mul (exp (-x&#39; * I) - exp (x&#39; * I)).re I.re =?= (exp (x&#39; * I)).re\n[type_context.is_def_eq_detail] [63]: comm_ring.mul (exp (-x&#39; * I) - exp (x&#39; * I)).re I.re =?= (exp (x&#39; * I)).re\n[type_context.is_def_eq_detail] [64]: comm_ring.mul (exp (-x&#39; * I) - exp (x&#39; * I)).re I.re =?= (exp (x&#39; * I)).re\n[type_context.is_def_eq_detail] [65]: comm_ring.mul =?= re\n</pre></div>",
        "id": 193778165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586788730
    },
    {
        "content": "<p><code>attribute [irreducible] sin cos</code> doesn't seem to help</p>",
        "id": 193778327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586788816
    },
    {
        "content": "<p>Lean gets into a loop trying to prove <code>sin x' =?= cos x'</code>. If you search for this string in the gist you can see it first occurs at depth [8], then [9], then [10] etc.</p>",
        "id": 193778533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586788923
    },
    {
        "content": "<p>Yes, but shouldn't it help to make them irreducible?</p>",
        "id": 193778614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586788979
    },
    {
        "content": "<p>The poison, or part of it, is this line:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [5]: asymptotics.is_o (λ (x&#39; : ?m_1), sin x&#39; - sin x - ⇑f&#39; (x&#39; - x)) (λ (x&#39; : ?m_1), x&#39; - x) (nhds x) =?= asymptotics.is_o (λ (x&#39; : ℂ), cos x&#39; - cos ?m_8 - ⇑f&#39; (x&#39; - ?m_8)) (λ (x&#39; : ℂ), x&#39; - ?m_8) (nhds ?m_8)\n</pre></div>",
        "id": 193778753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586789045
    },
    {
        "content": "<p>Lean never recovers from this, it seems.</p>",
        "id": 193778783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586789064
    },
    {
        "content": "<p>I should remark that because this stream was somehow added in a way that most people didn't notice, I can see right now that e.g. Reid and Rob are not subscribed to it.</p>",
        "id": 193778875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586789107
    },
    {
        "content": "<p>or Gabriel</p>",
        "id": 193778894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586789122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> are you interested in this stream?</p>",
        "id": 193778918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586789137
    },
    {
        "content": "<p>I'll post in #general</p>",
        "id": 193779015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586789171
    },
    {
        "content": "<p>I think when it was created I was a little confused about why, but given that people are now using it then sure.</p>",
        "id": 193779022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586789175
    },
    {
        "content": "<p>It's also true that this stream is very easy to derail. For instance, Kevin's question was legitimate in this thread, but then I should have switched when I hit this issue.</p>",
        "id": 193779553,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586789518
    },
    {
        "content": "<p>Here is my version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at</span><span class=\"bp\">.</span><span class=\"n\">deriv</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">((</span><span class=\"n\">has_deriv_at_cos</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_sin</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_exp</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The <code>smul_eq_mul</code> shouldn't be here, I'll work on removing it.</p>",
        "id": 193788621,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586794499
    },
    {
        "content": "<p>This becomes</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(((</span><span class=\"n\">has_deriv_at_cos</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_sin</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_exp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">deriv</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>with my next PR. The best thing is if you don't want to compute the derivative by hand. You write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(((</span><span class=\"n\">has_deriv_at_cos</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_sin</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_exp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">deriv</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>which of course doesn't work, but the goal after the last <code>ring</code> is <code>0 = -(sin (sin x) * cos x * exp x) + (cos ∘ sin) x * exp x</code>, giving you on the right a formula for the derivative.</p>",
        "id": 193807496,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586804406
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/2410\" title=\"https://github.com/leanprover-community/mathlib/issues/2410\">#2410</a></p>",
        "id": 193808537,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586804934
    },
    {
        "content": "<p>If there were a chain rule emoji, I would use it now (-;</p>",
        "id": 193808914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586805145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193775113\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193775113\">said</a>:</p>\n<blockquote>\n<p>Which clearly shows we need a tactic taking care of the four apply at the end.</p>\n</blockquote>\n<p>The right tactic to build on is <code>solve_by_elim</code>. In general, if a sequence of <code>apply Xi</code> and <code>exact Xj</code> succeed, then <code>solve_by_elim [X1, X2, ..., Xn]</code> should also succeed.</p>",
        "id": 193839944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586825134
    },
    {
        "content": "<p>You can also specify an attribute, so tagging <code>differentiable_cos, differentiable_sin, differentiable_cos.comp, differentiable_exp</code> with <code>[differentiable]</code> and writing <code>solve_by_elim with differentiable</code> should succeed.</p>",
        "id": 193840025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586825184
    },
    {
        "content": "<p>We can also provide ways to automatically collect families of lemmas, I think!</p>",
        "id": 193840048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586825219
    },
    {
        "content": "<p>I think it would be great to see how far continuity and differentiability problems can be solved like this.</p>",
        "id": 193840180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586825340
    },
    {
        "content": "<p>Does the apply bug cause any problems here? Does <code>solve_by_elim</code> use <code>apply</code> or a homegrown version?</p>",
        "id": 193840288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586825432
    },
    {
        "content": "<p>Can you remind me \"the apply bug\"?</p>",
        "id": 193845426,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586832208
    },
    {
        "content": "<p>We recently fixed a bug in <code>solve_by_elim</code> because of stuck metavariables.</p>",
        "id": 193845429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586832228
    },
    {
        "content": "<p>Something about <code>apply</code> being confused about the number of <code>_</code>s to insert</p>",
        "id": 193845472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586832250
    },
    {
        "content": "<p>Which I think would have prevented this example working, because the second application of <code>differentiable_sin</code> would have been blocked by having different values of the hidden implicit metavariables.</p>",
        "id": 193845483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586832261
    },
    {
        "content": "<p><code>solve_by_elim</code> uses the built-in <code>apply</code>.</p>",
        "id": 193845503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586832275
    },
    {
        "content": "<p>So it would be great to know of an example where it fails because of whatever this issue is!</p>",
        "id": 193845507,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586832289
    },
    {
        "content": "<p>i.e. <code>apply f x</code> is really <code>refine f x _ _ ... _</code> and if you get the number of <code>_</code>s wrong then it probably won't work (since the type will be a function and not a Prop/whatever, or vice versa)</p>",
        "id": 193845514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586832307
    },
    {
        "content": "<p>try applying any lemma for continuity that doesn't take exactly one argument, IIRC</p>",
        "id": 193845520,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586832331
    },
    {
        "content": "<p>Any such solution will hit <a href=\"#narrow/stream/113488-general/topic/sin.20.3D.20cos.20timeout\" title=\"#narrow/stream/113488-general/topic/sin.20.3D.20cos.20timeout\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/sin.20.3D.20cos.20timeout</a> with or without the apply bug. This is what started this sin vs cos discussion.</p>",
        "id": 193861116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586850919
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/2416\" title=\"https://github.com/leanprover-community/mathlib/issues/2416\">#2416</a> making <code>is_o</code> irreducible. I think it should be possible to get formulas for the derivative just by tagging some lemmas as simp lemmas, I will try this now.</p>",
        "id": 193884615,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586864874
    },
    {
        "content": "<p>Will it help to make only <code>is_O_with</code> irreducible?</p>",
        "id": 193932640,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586886100
    },
    {
        "content": "<p>I also want to have an easy way to \"apply\" <code>is_o</code> to <code>h : 0 &lt; c</code>. If it isn't possible with <code>irreducible</code> <code>is_o</code> (didn't test), could you please add something like <code>is_o.def : ∀ {{c}}, 0 &lt; c → ∃ C, ...</code> and <code>is_o.def' : ∀ {{c}}, 0 &lt; c → is_O_with c f g l</code>?</p>",
        "id": 193933287,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586886370
    },
    {
        "content": "<p>BTW, why do you make only two of three <code>irreducible</code>?</p>",
        "id": 193933318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586886391
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>see <a href=\"https://github.com/leanprover-community/mathlib/issues/2419\" title=\"https://github.com/leanprover-community/mathlib/issues/2419\">#2419</a></p>",
        "id": 193952549,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586895962
    },
    {
        "content": "<p>Doesn't it mean too many simp lemmas? Do we need a simp set attribute here?</p>",
        "id": 193952732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586896067
    },
    {
        "content": "<p>Yes, that's one of the options I considered. Since all the lemmas I tag start with <code>differentiable</code> or <code>differentiable_at</code> or <code>deriv</code>, they should be very easy to discard in other situations, so I don't expect any serious performance hit, but I might be wrong on this and I would be happy to hear more informed opinions.</p>",
        "id": 193953344,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586896394
    },
    {
        "content": "<p>In fact, I don't think it is important that Lean is able to compute directly the derivative of <code>(λ x, cos (sin x) * exp x)</code> (we never do this in real maths), except for one reason: to show to undergrads that Lean can do nice things. And for this goal this feature should be as simple as possible, and I think it is hard to make something more simple than just a <code>simp</code> call.</p>",
        "id": 193953577,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586896516
    },
    {
        "content": "<p><code>simp with deriv</code> is slightly more complicated, but not too bad, if this turns out to be a performance hit</p>",
        "id": 193953810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586896640
    },
    {
        "content": "<p>Yes, if there is a performance hit I will definitely go for a simpset attribute. A dedicated tactic would be even more efficient (here, to check differentiability of <code>exp (exp (exp (... x)))</code>, <code>simp</code> will go through the whole expression (length <code>n</code>), reach the last <code>exp</code>, and then ask if the rest of the expression (with <code>n-1</code> functions) is differentiable. Then if will again go through the complete subexpression (length <code>n-1</code>) and so on, giving in the end something quadratic while this should be linear). I don't really mind since this should never be applied in real complicated examples.</p>",
        "id": 193954473,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586896983
    },
    {
        "content": "<p>A nice project for someone (not me) would be to formalize the following Arnold's problem:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>sin</mi><mo>⁡</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo>−</mo><mi>tan</mi><mo>⁡</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo><mi>tan</mi><mo>⁡</mo></mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>x</mi><mo>−</mo><msup><mo><mi>tan</mi><mo>⁡</mo></mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>x</mi></mrow></mfrac><mo>=</mo><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\">\\lim_{x\\to 0}\\frac{\\sin\\tan x-\\tan\\sin x}{\\sin^{-1}\\tan^{-1} x - \\tan^{-1}\\sin^{-1} x}=?</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.190058em;vertical-align:-0.845198em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.382892em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.717108em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3448600000000002em;\"><span style=\"top:-2.2381320000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop\">sin</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.871868em;\"><span style=\"top:-3.12076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">tan</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8190879999999999em;\"><span style=\"top:-3.06798em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\"><span class=\"mop\">tan</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8190879999999999em;\"><span style=\"top:-3.06798em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">sin</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.871868em;\"><span style=\"top:-3.12076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">tan</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\">tan</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845198em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mclose\">?</span></span></span></span></span></p>\n<p>The legend (as told by his nephew) says that he came up with a similar limit while commuting to MSU, computed it, then understood how to prove the answer with no computation, then asked it on the oral exam for PhD students (though he understood that the problem is too hard for students, so he asked professors).</p>",
        "id": 193955449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586897468
    },
    {
        "content": "<p><code> ```latex </code></p>",
        "id": 193955489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586897490
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>```latex\nx + y\n```\n</pre></div>",
        "id": 193955497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586897494
    },
    {
        "content": "<p>Stupid mathjax doesn't know <code>\\arcsin</code>?</p>",
        "id": 193955644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586897552
    },
    {
        "content": "<p>Of course I asked this question precisely for undergraduate-related reasons, I don't care if simp does it, but perhaps one of the CS guys should tell us their opinion</p>",
        "id": 193960632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586900616
    },
    {
        "content": "<p>I don't think it's unreasonable to have different tactics doing different jobs, hardly anyone at Xena knows what simp does, they just try it on anything</p>",
        "id": 193960716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586900662
    },
    {
        "content": "<p>I guess Chris knows:-)</p>",
        "id": 193960746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586900685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193954473\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193954473\">said</a>:</p>\n<blockquote>\n<p>[..] to check differentiability of <code>exp (exp (exp (... x)))</code>, <code>simp</code> will go through the whole expression (length <code>n</code>), reach the last <code>exp</code>, and then ask if the rest of the expression (with <code>n-1</code> functions) is differentiable. Then if will again go through the complete subexpression (length <code>n-1</code>) and so on, giving in the end something quadratic while this should be linear).</p>\n</blockquote>\n<p>Did you actually have this issue?  The simplifier has a cache, so this should have linear runtime.</p>",
        "id": 193998826,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586939382
    },
    {
        "content": "<p>Isn't the output quadratic anyway? (The dedup term is linear but I doubt lean can keep that up.)</p>",
        "id": 193998995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586939485
    },
    {
        "content": "<p>As far as I understand, the only way to avoid quadratic output with the current setup is to use <code>has_fderiv_at</code></p>",
        "id": 194014317,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586949223
    },
    {
        "content": "<p>Though of course I may be wrong</p>",
        "id": 194014368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586949246
    },
    {
        "content": "<p>In fact I don't really care about the quadratic behavior because I think we will just use this on toy examples. And if simp indeed has a cache (I didn't know this), then it might not even be there.</p>",
        "id": 194020360,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586953134
    }
]