[
    {
        "content": "<p>Is there a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_clopen_bInter_finset\">docs#is_clopen_bInter_finset</a> for <code>is_open</code>?</p>",
        "id": 293029325,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660263330
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_bInter\">docs#is_open_bInter</a> I think?</p>",
        "id": 293029466,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660263447
    },
    {
        "content": "<p>Or do you really need a finest version?</p>",
        "id": 293029495,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660263480
    },
    {
        "content": "<p>yes, I need it for<code>finset</code></p>",
        "id": 293029564,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660263532
    },
    {
        "content": "<p>You could combine it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.of_finset\">docs#set.finite.of_finset</a></p>",
        "id": 293029587,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660263572
    },
    {
        "content": "<p>ah, cool. Thanks</p>",
        "id": 293029595,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660263592
    },
    {
        "content": "<p>Or rather <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.finite_to_set\">docs#finset.finite_to_set</a></p>",
        "id": 293029643,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660263616
    },
    {
        "content": "<p>this did the job in the end: <code>refine is_open_bInter (to_finite _) _,</code> since it is not obvious, should we add this as a new lemma?</p>",
        "id": 293032105,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660266072
    },
    {
        "content": "<p>Can you give the lean version of the statement that you're asking for?</p>",
        "id": 293066352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660293227
    },
    {
        "content": "<p>I haven't checked it in Lean, but it should be this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_open_bInter_finset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_bInter</span> <span class=\"o\">(</span><span class=\"n\">to_finite</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 293066984,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660293509
    },
    {
        "content": "<p>but Adam's answer helped me to get a solution, so the only (if any) question would be whether this lemma should be in mathlib</p>",
        "id": 293067079,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660293570
    },
    {
        "content": "<p>IMO this is worth a lemma in mathlib, because the term mode proof you gave is about <code> ∈ ↑s</code> not <code>∈ s</code></p>",
        "id": 293082819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660301038
    },
    {
        "content": "<p>The problem is that we have many lemmas that are about either <code>set.finite</code> or <code>finset</code>, but not the other one to match, and that seems to work fine precisely because <code>a ∈ ↑s ↔ a ∈ s</code>. Further, this lemma is not an equality, so you can't rewrite with it and the syntactical difference won't matter.</p>",
        "id": 293083100,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660301141
    },
    {
        "content": "<p>I have no strong opinion, aside from my general view that I rather have (slightly) redundant lemmas, so that if you don't know that certain things are definitionally equal you still find a lemma that applies to your situation.</p>",
        "id": 293097000,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660306699
    }
]