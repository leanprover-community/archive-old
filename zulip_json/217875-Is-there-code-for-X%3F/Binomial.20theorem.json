[
    {
        "content": "<p>Is the <a href=\"https://en.wikipedia.org/wiki/Binomial_theorem#Statement\">binomial theorem</a> encoded somewhere in mathlib?</p>",
        "id": 319092627,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672692128
    },
    {
        "content": "<p>Yes, various versions. See e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/commute.add_pow\">docs#commute.add_pow</a></p>\n<p>A good way to search for things like this is to use the search box in the top right here <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 319092868,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672692267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Thank you! I gave that a try, however, wasn't able to find it with any key words involving the word \"binomial\".</p>",
        "id": 319093178,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672692474
    },
    {
        "content": "<p>How odd, here's what I see (before even clicking anything):</p>",
        "id": 319093280,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672692517
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/l12_5QpdGbj8SpqcmUBFkLZj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/l12_5QpdGbj8SpqcmUBFkLZj/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/l12_5QpdGbj8SpqcmUBFkLZj/image.png\"></a></div>",
        "id": 319093292,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672692522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Fair enough, the name just didn't strike me, so I didn't have a look, my fault entirely!</p>",
        "id": 319093484,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672692612
    },
    {
        "content": "<p>Certainly not your fault. Just a little tip that somebody once told me.</p>",
        "id": 319093499,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672692628
    },
    {
        "content": "<p>It certainly is a bit surprising at first that the search is not only performed on what we see (the lemma name) but also on what we don't (the docstring).</p>",
        "id": 319095320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672693927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Binomial.20theorem/near/319092868\">said</a>:</p>\n<blockquote>\n<p>Yes, various versions. See e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/commute.add_pow\">docs#commute.add_pow</a></p>\n<p>A good way to search for things like this is to use the search box in the top right here <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>\n</blockquote>\n<p>Why does it even hold for non-commutative semirings? Say <code>n = 2</code>. How do you go from <code>x^2 + x*y + y*x + y^2</code> to <code>x^2 + x*y*2 + y^2</code> here?</p>",
        "id": 319550821,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672913443
    },
    {
        "content": "<p>It holds if x and y commute.</p>",
        "id": 319550926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672913491
    },
    {
        "content": "<p>Oh I see now!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">h</span>\n\n<span class=\"sd\">/-- A version of the **binomial theorem** for noncommutative semirings. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_pow</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 319551173,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672913566
    },
    {
        "content": "<p>My belief that explicit arguments should not be taken out of the declaration and stored in <code>variables</code> has been further reinforced.</p>",
        "id": 319551471,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672913682
    },
    {
        "content": "<p>Hmm, I would rather say that <code>include</code> is almost always evil. (But sometimes convenient.)</p>",
        "id": 319552914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672914229
    },
    {
        "content": "<p><code>variables</code> is fine, but <code>include</code> is a bit of a code smell.</p>",
        "id": 319552942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672914241
    },
    {
        "content": "<p>At certain points, I decided to never use <code>variables</code> for explicit arguments and refactored my code accordingly.</p>",
        "id": 319553158,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672914338
    },
    {
        "content": "<p>Basically <code>variables (anything)</code> is a no-go.</p>",
        "id": 319553261,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672914369
    },
    {
        "content": "<p>In that case, everything is in the <code>commute</code> namespace, so everything takes a <code>commute x y</code> assumption.</p>",
        "id": 319555694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672915120
    },
    {
        "content": "<p>I understand what it does. I am just saying I was feeling very uncomfortable from locally reading</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A version of the **binomial theorem** for noncommutative semirings. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_pow</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and not being able to make sense of it.</p>",
        "id": 319555976,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672915221
    },
    {
        "content": "<p>In lean 4 the fact that you're in the <code>commute</code> namespace is indicated in the breadcrumbs</p>",
        "id": 319559544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672916420
    },
    {
        "content": "<p>But that's no more than a hint, right? I agree with <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> that it would be nice to see <code>commute x y</code> explicitly in that statement.</p>",
        "id": 319561400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672917065
    },
    {
        "content": "<p>I think maybe this depends on how much you use explicit arguments in general. Like if you want to make <code>x</code> and <code>y</code> explicit in <code>add_comm x y</code>, then you won't want to write <code>x y</code> in every theorem statement.</p>",
        "id": 319567858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672919457
    },
    {
        "content": "<p>Yep, so I'm not against <code>variables (x y : A)</code> at all. I just think that <code>include</code> is often suspicious.</p>",
        "id": 319571381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672920573
    },
    {
        "content": "<p>I think explicit arguments that are mentioned in a lemma statement are fine to put in <code>variables</code>. <br>\nIt is a nicer style to write arguments that are not mentioned in the lemma statement (usually hypotheses/side conditions) explicitly for each lemma (this usually requires an <code>include</code>, but not always).</p>",
        "id": 319582909,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672924530
    },
    {
        "content": "<p>Some time ago, we had a similar discussion and most of us afair agreed on writing explicit arguments explicitly for each declaration.</p>",
        "id": 319635408,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672939949
    },
    {
        "content": "<p>An advantage of keeping them out in a <code>variables</code> line is that it standardizes argument order across similar lemmas.</p>",
        "id": 319635822,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672940063
    },
    {
        "content": "<p>Look at the core analysis files for this in practice, e.g.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/ed005a8c91df8f75bf3a92255114659c2dad9907/src/analysis/calculus/fderiv.lean#L185\">https://github.com/leanprover-community/mathlib/blob/ed005a8c91df8f75bf3a92255114659c2dad9907/src/analysis/calculus/fderiv.lean#L185</a></p>",
        "id": 319636142,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672940169
    },
    {
        "content": "<p>Only one of them is explicit here. Hence standardizing their order doesn't bring much to the table.</p>",
        "id": 319636308,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672940215
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18071\">https://github.com/leanprover-community/mathlib/pull/18071</a></p>",
        "id": 319682982,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672957217
    }
]