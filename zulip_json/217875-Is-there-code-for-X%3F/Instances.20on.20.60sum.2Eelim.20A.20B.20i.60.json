[
    {
        "content": "<p>Do instances like this exist somewhere? Should they?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">sum.elim.add_comm_monoid</span> <span class=\"o\">{</span><span class=\"n\">ι₁</span> <span class=\"n\">ι₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ι₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">ι₂</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">i.elim</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 218484619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606858337
    },
    {
        "content": "<p>You can just take the pi type and then the product, right?</p>",
        "id": 218487801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606859856
    },
    {
        "content": "<p>Can you elaborate on that?</p>",
        "id": 218488202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606860030
    },
    {
        "content": "<p>Isn't this just (Pi i, M i) x (Pi j, N j)?</p>",
        "id": 218488540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606860179
    },
    {
        "content": "<p>Isomorphic to, yes; but I can't express that as a bundled isomorphism without the instances on each end</p>",
        "id": 218488739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606860288
    },
    {
        "content": "<p>And in this case, I need it as a single pi type in order to pass it to <code>multilinear_map</code></p>",
        "id": 218488805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606860337
    },
    {
        "content": "<p>There is precedent for <code>sum.elim</code> instance(-ish) definitions: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.sum_type\">docs#linear_independent.sum_type</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable.sum_elim\">docs#measurable.sum_elim</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.pi.sum_elim_category\">docs#category_theory.pi.sum_elim_category</a></p>",
        "id": 218492677,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606862532
    },
    {
        "content": "<p>This surely can't be sustainable</p>",
        "id": 218492799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606862639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, because they'd be needed for other recursors too?</p>",
        "id": 218492874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606862683
    },
    {
        "content": "<p>Duplicating the algebra pi instances for sum.elim doesn't strike me as too bad</p>",
        "id": 218492928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606862738
    },
    {
        "content": "<p>In principle it's every class</p>",
        "id": 218493101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606862849
    },
    {
        "content": "<p>The pi instances at least have something to do with the classes</p>",
        "id": 218493114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606862855
    },
    {
        "content": "<p>Ah, I see your point</p>",
        "id": 218493386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606863021
    },
    {
        "content": "<p>I'm not sure what the right way to handle this is though</p>",
        "id": 218493440,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606863076
    },
    {
        "content": "<p>So to be clear, the issue here is not that it makes <code>sum</code> look special, but that a sum_elim instance ends up written for every typeclass</p>",
        "id": 218493600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606863189
    },
    {
        "content": "<p>I think there are more issues lurking around the corner, like whether Lean will realize that the instance for <code>(sum.inl i).elim M N</code> is the same as that for <code>M i</code></p>",
        "id": 218493609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606863196
    },
    {
        "content": "<p>Those two things are equal by rfl though?</p>",
        "id": 218493660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606863234
    },
    {
        "content": "<p>Is that iota reduction, or am I misremembering?</p>",
        "id": 218493719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606863253
    },
    {
        "content": "<p>Sure but that doesn't mean instance selection will necessarily understand they are the same</p>",
        "id": 218493738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606863268
    },
    {
        "content": "<p>This stuff is easier with bundled objects I think</p>",
        "id": 218493930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606863388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Instances.20on.20.60sum.2Eelim.20A.20B.20i.60/near/218493600\">said</a>:</p>\n<blockquote>\n<p>So to be clear, the issue here is not that it makes <code>sum</code> look special, but that a sum_elim instance ends up written for every typeclass</p>\n</blockquote>\n<p>You could also find other things in place of <code>sum</code>, like <code>sigma</code> or <code>ite</code></p>",
        "id": 218494120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606863535
    },
    {
        "content": "<p>Like if <code>C x</code> is a group and <code>C y</code> is a group then <code>C (if b then x else y)</code> is a group</p>",
        "id": 218494179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606863584
    },
    {
        "content": "<p>or technically it could be nested too, like if <code>C (X i)</code> and <code>C (Y j)</code> are groups then <code>C (s.elim X Y)</code> is a group</p>",
        "id": 218494303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606863648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Instances.20on.20.60sum.2Eelim.20A.20B.20i.60/near/218493609\">said</a>:</p>\n<blockquote>\n<p>I think there are more issues lurking around the corner, like whether Lean will realize that the instance for <code>(sum.inl i).elim M N</code> is the same as that for <code>M i</code></p>\n</blockquote>\n<p>I don't expect any issues here.  I'd be more worried about the <code>∀ i, ...</code> assumption; this causes Lean to do higher-order unification.  Sébastien has had all kinds of bad experiences with that. In any case, it's a lot of instances but that can and should be automated.</p>",
        "id": 218533198,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1606901813
    },
    {
        "content": "<p>I did run into a problem here where I couldn't unify <code>sum.elim (fun _, T) (fun _, T)</code> with <code>(fun _, T)</code></p>",
        "id": 218540544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606906359
    },
    {
        "content": "<p>That's because it's not definitionally equal.</p>",
        "id": 218540715,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1606906478
    },
    {
        "content": "<p>Indeed</p>",
        "id": 218541264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606906815
    },
    {
        "content": "<p>But you could add an instance like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"n\">κ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">⊕</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">i.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 218541416,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1606906919
    },
    {
        "content": "<p>In my case my actual problem was that I had <code>multilinear_map R (sum.elim (λ i : ι₁, M) (λ i : ι₂, M)) N</code> but I wanted <code>multilinear_map R (λ i : ι₁ ⊕ ι₂, M) N</code>. I think I'm going to simplify things and avoid these <code>sum.elim</code> types - I only care about the non-dependent arguments anyway, and trying to generalize just creates headaches that no one needs right now.</p>",
        "id": 218550883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606913405
    },
    {
        "content": "<p>Yes, this kind of operation is a perfectly sensible thing to do, but unfortunately tricky to express in type theory <span aria-label=\"half frown\" class=\"emoji emoji-1f615\" role=\"img\" title=\"half frown\">:half_frown:</span></p>",
        "id": 218550994,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606913502
    },
    {
        "content": "<p>I spun <a href=\"https://github.com/leanprover-community/mathlib/issues/5178\">#5178</a> out of what I was trying to do here, and am finding I need it even for some non-dependent functions</p>",
        "id": 218560226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606918141
    }
]