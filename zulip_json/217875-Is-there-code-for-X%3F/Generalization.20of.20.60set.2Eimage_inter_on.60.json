[
    {
        "content": "<p>Just wanted to make sure, does the following generalization of <code>set.image_inter_on</code> exist under some different form that I should be using?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">image_inter_on'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">y</span><span class=\"bp\">∈</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset.antisymm</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">b</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">ha₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">ha₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hs</span><span class=\"bp\">;</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n        <span class=\"n\">rwa</span> <span class=\"n\">h₁.symm</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">h₂.symm</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">not_or_distrib.mp</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">ha₁</span> <span class=\"n\">_</span> <span class=\"n\">ha₂</span> <span class=\"n\">this.1</span> <span class=\"n\">this.2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span><span class=\"o\">)),</span>\n    <span class=\"kd\">end</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">image_inter_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(though I wouldn't be surprised if we haven't found a use for this yet)</p>",
        "id": 270634298,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1643930526
    },
    {
        "content": "<p>I think that we should replace <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_inter_on\">docs#set.image_inter_on</a> with this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">image_inter_on'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subset.antisymm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">image_inter_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hbt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hat</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hab</span> <span class=\"bp\">▸</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hat</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hbs</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">hbs</span><span class=\"o\">,</span> <span class=\"n\">hbt</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hat</span><span class=\"o\">⟩</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">hbt</span><span class=\"o\">,</span> <span class=\"n\">hbs</span><span class=\"o\">⟩</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hbs</span> <span class=\"n\">has</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270646085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643932694
    },
    {
        "content": "<p>(or you can use a version of your proof)</p>",
        "id": 270646104,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643932705
    },
    {
        "content": "<p>IMHO <code>∀ (x ∈ s \\ t) (y ∈ t \\ s),</code> is more readable than <code>∀x∈s, ∀y∈t, x ∉ s ∩ t → y ∉ s ∩ t </code></p>",
        "id": 270646143,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643932731
    },
    {
        "content": "<p>It makes no sense to leave both old and new version because currently <code>set.image_inter_on</code> is used exactly once.</p>",
        "id": 270646199,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643932773
    },
    {
        "content": "<p>Sounds good, thank you! (and I'll take a few hints from how you wrote your proof lol)</p>\n<p>BTW the <code>f x = f y → x = y</code> in the hypothesis can be replaced with <code>f x ≠ f y</code></p>",
        "id": 270647666,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1643933527
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">image_inter_on'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subset.antisymm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">image_inter_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hbt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hat</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hab</span> <span class=\"bp\">▸</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hat</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hbs</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">hbs</span><span class=\"o\">,</span> <span class=\"n\">hbt</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hab</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hat</span><span class=\"o\">⟩</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">hbt</span><span class=\"o\">,</span> <span class=\"n\">hbs</span><span class=\"o\">⟩)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270649062,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1643934367
    }
]