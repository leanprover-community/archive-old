[
    {
        "content": "<p>Dear All,</p>\n<p>after the major breakdown that my last attempt with <code>instances</code> caused, I am a little worried about this one.  Is there a <code>ring</code> instance on a semiring that is a ℤ-algebra?</p>\n<p>In the code below, replacing the instances with <code>by apply_instance</code> does not work.  Also, I imagine that there are easier proofs of the unique fact that this instance requires.</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">negZ</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zalg.to_ring</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">has_neg.neg</span><span class=\"o\">)],</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span> <span class=\"n\">one_smul</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.neg</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">neg_add_self</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228533270,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614745045
    },
    {
        "content": "<p>In fact, instead of ℤ, you could get the proof to work for a general <code>comm_ring</code>, instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">negZ</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zalg.to_ring</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">has_neg.neg</span><span class=\"o\">)],</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span> <span class=\"n\">one_smul</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.neg</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n      <span class=\"n\">convert</span> <span class=\"n\">neg_add_self</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">negZ</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228534081,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614745689
    },
    {
        "content": "<p>Yeah this was an issue that came up a while ago. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> do you remember how this ended up?</p>",
        "id": 228534247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614745864
    },
    {
        "content": "<p>I am worried that this might cause more trouble than the whole \"subsets of semirings closed under addition and multiplication are semirings\" mess. (PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6489\">#6489</a> et al)</p>",
        "id": 228534663,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614746162
    },
    {
        "content": "<p>Was it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.semiring_to_ring\">docs#algebra.semiring_to_ring</a>?</p>",
        "id": 228545295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614754201
    },
    {
        "content": "<p>Which isn't safe to use unless you know <code>A</code> and know you will be the only one to give it a ring instance</p>",
        "id": 228545428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614754292
    },
    {
        "content": "<p>Thanks, this looks exactly what I was looking for!  I will try to use it with care!</p>",
        "id": 228555372,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614760824
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/semimodule.add_comm_monoid_to_add_comm_group\">docs#semimodule.add_comm_monoid_to_add_comm_group</a> is similar</p>",
        "id": 228555565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614760942
    },
    {
        "content": "<p>Great, thanks!  I may indeed want to convert between (semi)modules, when acquiring/losing subtractions!</p>",
        "id": 228556072,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614761232
    }
]