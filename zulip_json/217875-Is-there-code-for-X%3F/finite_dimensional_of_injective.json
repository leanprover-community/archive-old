[
    {
        "content": "<p>Surely we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finite_dimensional_of_injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f.ker</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 280608578,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651224975
    },
    {
        "content": "<p>(Or with <code>w : function.injective f</code>.)</p>",
        "id": 280608612,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651225005
    },
    {
        "content": "<p>I guess</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finite_dimensional_of_injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">k</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian.iff_fg.mpr</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">module.finite.of_injective</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works, and it's just a matter of API not being built for <code>finite_dimensional</code>.</p>",
        "id": 280608892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651225188
    },
    {
        "content": "<p>That matches what we do in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.finite_dimensional/src\">src#continuous_linear_map.finite_dimensional</a></p>",
        "id": 280609055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651225261
    },
    {
        "content": "<p>Okay. I'll just roll this into the PR that needs it.</p>",
        "id": 280609630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651225632
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.finite.of_injective\">docs#module.finite.of_injective</a> should do the job</p>",
        "id": 280612932,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651227704
    },
    {
        "content": "<p><code>finite_dimensional</code> is defined as <code>finite</code> (I promise sooner or later I will finish the refactor)</p>",
        "id": 280612987,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651227725
    },
    {
        "content": "<p>ah sorry, you already found this</p>",
        "id": 280613050,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651227757
    }
]