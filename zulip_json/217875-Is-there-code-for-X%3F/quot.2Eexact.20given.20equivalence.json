[
    {
        "content": "<p>One part of the <code>quot</code> API is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.exact\">docs#quot.exact</a>, which is less-than-convenient when you know the relation is an equivalence relation already.  While <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exact\">docs#quotient.exact</a> exists, it's in terms of setoids, and it doesn't put the relation syntactically into the correct form.</p>\n<p>Is there something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eqv_gen.of_eqv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">induction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h.left</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h.right.left</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">},</span>\n <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h.right.right</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>That lets you write something like <code>(quot.exact r h).of_eqv proof_of_equivalence</code> for <code>h : quot.mk r x = quot.mk r y</code> to get <code>r x y</code>.</p>\n<p>(This seems more general than having parallel <code>quot</code> lemmas that take an additional <code>equivalence r</code> argument.)</p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>)</p>",
        "id": 259915326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635798007
    },
    {
        "content": "<p>Pretty sure we have that</p>",
        "id": 259918441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635799416
    },
    {
        "content": "<p>Probably in <a href=\"https://tqft.net/mathlib/data/setoid/basic\">file#data/setoid/basic</a></p>",
        "id": 259918468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635799429
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/eqv_gen_eq_of_equivalence\">docs#eqv_gen_eq_of_equivalence</a></p>",
        "id": 259920478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635800293
    },
    {
        "content": "<p>Thanks (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.eqv_gen_iff_of_equivalence\">docs#relation.eqv_gen_iff_of_equivalence</a> is a bit closer).  It still seems like it would be nice for the <code>quot</code> API to have it be more amenable to dot notation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eqv_gen.of_eqv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">relation.eqv_gen_iff_of_equivalence</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 259921523,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635800746
    },
    {
        "content": "<p>I'd probably put it in the <code>equivalence</code> namespace instead</p>",
        "id": 259975382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635848272
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10105\">#10105</a></p>",
        "id": 259981748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635852130
    }
]