[
    {
        "content": "<p>Is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">quot</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Z</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>definable?</p>",
        "id": 199447161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591068420
    },
    {
        "content": "<p>(computably)</p>",
        "id": 199447177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591068463
    },
    {
        "content": "<p>Nope</p>",
        "id": 199447710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591069401
    },
    {
        "content": "<p>This comes up every once in a while. It has some reasonably obvious computational interpretation, but you can't prove it from lean's axioms</p>",
        "id": 199447762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591069458
    },
    {
        "content": "<p>I think we could remove the <code>noncomputable</code> keyword by using a <code>vm_override</code> though. Am I wrong? (I haven't used them that way yet)</p>",
        "id": 199447798,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1591069547
    },
    {
        "content": "<p>This is also relevant for the QPF implementation that Jeremy, Simon and I worked on last year. I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> told me that this makes the definitional equality problem much harder because you have to work under binders; I forget the details now. It might end up like cubical type theory reduction</p>",
        "id": 199447845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591069599
    },
    {
        "content": "<p>To answer my own question: <code>vm_override</code> don't do that yet</p>",
        "id": 199447920,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1591069754
    },
    {
        "content": "<p>Oh, I also remembered a trick that <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> pointed out:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">trunc</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">trunc</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>you can do some really funny things with this function, because the VM representation of this function does not respect equality</p>",
        "id": 199447994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591069873
    },
    {
        "content": "<p>Ah, here it is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">quot</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Z</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">unchecked_cast</span> <span class=\"n\">f</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">trunc</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">trunc</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">lie</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ff</span><span class=\"o\">)))</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">]</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">lie</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">to_bool_tt</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">lie</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 199448334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591070410
    },
    {
        "content": "<p>Ok, to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> the problem, what I really wanted was:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_quotient_fin_card</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">r</span><span class=\"o\">]:</span>\n   <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"err\">⟦</span><span class=\"n\">x</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">}))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>which I can construct using <code>foo</code>, but so far not otherwise.</p>",
        "id": 199448439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591070611
    },
    {
        "content": "<p>I think this can be proven. First you fix an ordering of the base type, then this induces an order on every equivalence class and you get the map to fin that way</p>",
        "id": 199448616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591070849
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_quotient_fin_card</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"err\">⟦</span><span class=\"n\">x</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">}))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">fa</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hS₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">rec_on_subsingleton</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hS₁</span> <span class=\"n\">hS₂</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hS₂</span> <span class=\"n\">hS₁</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_preimage_equiv</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_congr_right</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">equiv_fin_of_forall_mem_list</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_pmap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">h₂</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nodup_pmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nodup_filter</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">)))),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199450091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591073022
    },
    {
        "content": "<p>Excellent, thanks. I'll upgrade this to a <code>trunc (Σ' e : α ≃ Σ (q : quotient s), fin (fintype.card {x // ⟦x⟧ = q}), ∀ x, (e x).1 = ⟦x⟧)</code>, recording the \"fibre-wise\" property, and eventually include it in a PR.</p>",
        "id": 199451908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591076070
    },
    {
        "content": "<p>That could be a subtype instead of a Sigma'</p>",
        "id": 199453768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591078923
    }
]