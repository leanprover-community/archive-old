[
    {
        "content": "<p>Hi. Does something exist for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sqrtn</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">sqrt</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">sqrt</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">coe_sqrt</span><span class=\"o\">,</span> <span class=\"n\">mul_self_sqrt</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left_iff</span><span class=\"o\">,</span> <span class=\"n\">coe_to_nnreal'</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">,</span> <span class=\"n\">le_max_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265167389,
        "sender_full_name": "Julian Berman",
        "timestamp": 1639666648
    },
    {
        "content": "<p>Is it just <code>exact_mod_cast sqrt_mul_self h</code>?</p>",
        "id": 265227112,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639692741
    },
    {
        "content": "<p>Or <code>rw [← of_real_mul, sqrt_mul_self h]</code></p>",
        "id": 265227164,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639692761
    },
    {
        "content": "<p>BTW, <code>h</code> should be an explicit argument.</p>",
        "id": 265227283,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639692791
    },
    {
        "content": "<p>Aha, thank you! The rewrites indeed drop right in to my proof. I've never used <code>exact_mod_cast</code> before but seems like something I should know about too, appreciated.</p>",
        "id": 265230151,
        "sender_full_name": "Julian Berman",
        "timestamp": 1639694398
    }
]