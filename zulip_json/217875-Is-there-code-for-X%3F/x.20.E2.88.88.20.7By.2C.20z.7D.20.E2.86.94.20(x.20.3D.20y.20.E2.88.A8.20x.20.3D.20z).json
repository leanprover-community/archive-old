[
    {
        "content": "<p>I couldn't find anything like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>I'm not sure how to prove this either. Any tips?</p>",
        "id": 291510244,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659298597
    },
    {
        "content": "<p><code>by simp</code>should do. Maybe it's even <code>refl</code>.</p>",
        "id": 291510269,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659298676
    },
    {
        "content": "<p>For some reason, I'm getting a <code>don't know how to synthesize placeholder</code> error in the y of <code>x ∈ {y, z}</code>.</p>",
        "id": 291510725,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659299176
    },
    {
        "content": "<p>You probably need to tell lean what type the {} is, like <code>({y, z} : set ...)</code></p>",
        "id": 291510811,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659299321
    },
    {
        "content": "<p>Ah, that was it. Thanks.</p>",
        "id": 291510853,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659299400
    },
    {
        "content": "<p>This seems not to exist, and it should! We could have <code>set.mem_pair_iff</code>, <code>finset.mem_pair_iff</code>, and <code>multiset.mem_pair_iff</code>.</p>",
        "id": 291511141,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659299798
    },
    {
        "content": "<p>Yes because it's just <code>mem_insert</code> + <code>mem_singleton</code>.</p>",
        "id": 291511175,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659299857
    },
    {
        "content": "<p>I'm adding it to my \"extras\".</p>",
        "id": 291511256,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659299918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/x.20.E2.88.88.20.7By.2C.20z.7D.20.E2.86.94.20.28x.20.3D.20y.20.E2.88.A8.20x.20.3D.20z.29/near/291511175\">said</a>:</p>\n<blockquote>\n<p>Yes because it's just <code>mem_insert</code> + <code>mem_singleton</code>.</p>\n</blockquote>\n<p>True, but it's not any less useful because of this. Worth mentioning is that <code>multiset.mem_insert</code> doesn't exist, and we have mismatched names <code>finset.mem_insert</code> and <code>set.mem_insert_iff</code>, and <code>finset.mem_singleton</code> and <code>set.mem_singleton_iff</code>.</p>",
        "id": 291511370,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659300118
    },
    {
        "content": "<p>But then you will also want to write <code>mem_triple</code>, <code>mem_quadruple</code>, etc... Consider lemmas as shortcuts to tactic calls. Here you're effectively suggesting to replace one tactic call by a countable number of lemmas. This is loosely analogous to how we don't write down all inequalities between any two natural numbers, but instead use <code>norm_num</code> to generate them. This is a time vs space tradeoff.</p>",
        "id": 291511590,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659300367
    },
    {
        "content": "<p>I would imagine that pairs are much more common than triples or higher n-tuples.</p>",
        "id": 291511630,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659300431
    },
    {
        "content": "<p>We can just stop at two</p>",
        "id": 291511632,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659300448
    },
    {
        "content": "<p>I see no point in doing so, because you won't ever need the lemmas in reverse (as opposed to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Inf_pair\">docs#Inf_pair</a> for example), so you can always just call one tactic that'll solve it.</p>",
        "id": 291511713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659300521
    },
    {
        "content": "<p>This reminds me of those associative/commutative lemmas that involve 2,3,4 variables. I didn't expect specialized versions for e.g. 4 variables - I was expected some generalized tactic that handles all cases, but I was wrong.</p>",
        "id": 291511906,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659300785
    },
    {
        "content": "<p>If you're thinking about <code>op_op_op_comm</code> lemmas, we have them because this specific pattern shows up all the time when doing convexity (and surely other things) and it's not always true for the same reasons (eg the <code>sub</code> version needs special treatment, and the <code>add</code>-<code>tsub</code> one is even worse).</p>",
        "id": 291512072,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659301018
    },
    {
        "content": "<p>However, we do not have <code>mul_assoc3 : ((a * b) * c) * d = a * (b * (c * d))</code> because this is always true for the same reasons and doesn't need a complicated rewriting scheme.</p>",
        "id": 291512142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659301087
    },
    {
        "content": "<p>All these special concesions makes things complicated in my opinion, but c'est la vie.</p>",
        "id": 291512188,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659301185
    },
    {
        "content": "<p>For a left associative commutative op, like <code>and</code> or <code>add</code>, <code>simp [and.comm, and.assoc, and.left_assoc]</code> will normalize both sides of an equality</p>",
        "id": 291513160,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659302416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/x.20.E2.88.88.20.7By.2C.20z.7D.20.E2.86.94.20.28x.20.3D.20y.20.E2.88.A8.20x.20.3D.20z.29/near/291511906\">said</a>:</p>\n<blockquote>\n<p>This reminds me of those associative/commutative lemmas that involve 2,3,4 variables. I didn't expect specialized versions for e.g. 4 variables - I was expected some generalized tactic that handles all cases, but I was wrong.</p>\n</blockquote>\n<p>We have <code>rw_assoc</code> but I've found it very finicky to use, and it doesn't deal with commutativity.</p>",
        "id": 291513781,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659303353
    }
]