[
    {
        "content": "<p>In linear_algebra/basic.lean there is a lemma I am trying to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">span_smul_eq_of_is_unit</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>When I try to use this in my context, ( <code>R =  𝕜, r = c, s = {g}, M =  𝕜[X]</code>  )</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">should_be_simple</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">span</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"o\">({</span><span class=\"n\">g</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">({</span><span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>lean complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"bp\">𝕜</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">],</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_scalar</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>I am trying to see if I'm just reading the syntax wrong, so I want to chase down the <code>has_scalar</code> instance that is being used in the lemma above. I did some text searches like 'instance : has_scalar...' but I feel like there has to be a better way. I am looking more for strategies to get me past questions like this more than just an answer to this particular instance.</p>",
        "id": 275929513,
        "sender_full_name": "Justin Thomas",
        "timestamp": 1647723740
    },
    {
        "content": "<p>If you go to the docs, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_scalar\">docs#has_scalar</a>, you'll see a list of all of the instances.  This is a good place to start.</p>",
        "id": 275929539,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647723797
    },
    {
        "content": "<p>Here I see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.has_scalar\">docs#polynomial.has_scalar</a> on that list.</p>",
        "id": 275929589,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647723856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477005\">@Justin Thomas</span> Did you intend to write <code>(c • ({g}: set 𝕜[X]))</code>? Or do you mean <code>({c • g}: set 𝕜[X])</code>?</p>",
        "id": 275929590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647723857
    },
    {
        "content": "<p>They are the same thanks to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.smul_singleton\">docs#set.smul_singleton</a></p>",
        "id": 275929605,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647723900
    },
    {
        "content": "<p>That list doesn't contain \"transitive\" instances (e.g. a normed space is a module is a <code>distrib_mul_action</code> is a <code>mul_action</code> is a <code>has_scalar</code>), so there's still some guesswork.</p>",
        "id": 275929691,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647723996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> thanks. I did not know about that. Is it auto-generated? So guaranteed to be up to date?  seems like lean should combine set.has_scalar and polynomial.has_scalar. I don't know how to give it a hint to find these.</p>",
        "id": 275929860,
        "sender_full_name": "Justin Thomas",
        "timestamp": 1647724236
    },
    {
        "content": "<p>Yes, it's autogenerated every two hours.</p>",
        "id": 275929864,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647724254
    },
    {
        "content": "<p>In this case you might need to say <code>open_locale pointwise</code> to get the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_scalar_set\">docs#set.has_scalar_set</a>  instance.</p>",
        "id": 275929937,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647724360
    },
    {
        "content": "<p>See the docstring on that instance.</p>",
        "id": 275929939,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647724369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I mean <code>(c • ({g}: set 𝕜[X]))</code>because I am trying to match <code>(r • s)</code>in <code>span_smul_eq_of_is_unit</code>.</p>",
        "id": 275929964,
        "sender_full_name": "Justin Thomas",
        "timestamp": 1647724413
    },
    {
        "content": "<p>Fair enough. So yeah, then you probably need to have <code>open_locale pointwise</code> as Heather points out.</p>",
        "id": 275930039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647724514
    },
    {
        "content": "<p><strong>Heather Macbeth</strong> thanks so much! <code>open_locale pointwise</code> is what I was missing!! (off to figure out what that means...)</p>",
        "id": 275930101,
        "sender_full_name": "Justin Thomas",
        "timestamp": 1647724576
    },
    {
        "content": "<p>bonus question. Why do I need to put the <code>{g}: set 𝕜[X]</code> extra type annotation?<br>\nHere is what I had at one point that lean really dislikes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- maybe is_unit c ?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">should_be_simple</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">span</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"bp\">𝕜</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 275930234,
        "sender_full_name": "Justin Thomas",
        "timestamp": 1647724797
    },
    {
        "content": "<p>Here <code>{g}</code> is just a notation, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_singleton\">docs#has_singleton</a>, and Lean has to figure out what kind of singleton is meant (set? finset? ...)</p>",
        "id": 275930298,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647724874
    },
    {
        "content": "<p>I actually introduced a notation before because of precisely this issue</p>",
        "id": 275930309,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647724895
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/48eacc63751375da61238b90773c4208e768eabc/src/linear_algebra/span.lean#L307\">https://github.com/leanprover-community/mathlib/blob/48eacc63751375da61238b90773c4208e768eabc/src/linear_algebra/span.lean#L307</a></p>",
        "id": 275930360,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647724937
    },
    {
        "content": "<p>So you can write <code>𝕜[X] ∙ g</code> for <code>span 𝕜[X] {g}</code> (and it builds in that it's the <code>set</code>-singleton that's meant.)</p>",
        "id": 275930391,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647725012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/finding.20instance.20declaration/near/275930391\">said</a>:</p>\n<blockquote>\n<p>So you can write <code>𝕜[X] ∙ g</code> for <code>span 𝕜[X] {g}</code> (and it builds in that it's the <code>set</code>-singleton that's meant.)</p>\n</blockquote>\n<p>much nicer. Is there a way to discover notations in the docs similar to instances?</p>",
        "id": 275930472,
        "sender_full_name": "Justin Thomas",
        "timestamp": 1647725110
    },
    {
        "content": "<p>No, in fact; it would be nice but there's currently no autogeneration of documentation for notation.</p>",
        "id": 275930489,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647725146
    }
]