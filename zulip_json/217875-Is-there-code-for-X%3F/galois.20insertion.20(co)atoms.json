[
    {
        "content": "<p>I found myself proving something like these lemmas twice recently, so I realized this generalization should exist. Do we have this somewhere that I missed? Of course, there would be versions that apply to coinsertions too.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>galois insertion (co)atom lemmas</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.atoms</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">order_top</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_top</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">gi</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">galois_insertion.is_coatom_of_l_top</span> <span class=\"o\">(</span><span class=\"n\">htop</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">is_coatom</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_coatom</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">hb₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span> <span class=\"k\">in</span>\n  <span class=\"o\">⟨</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gi.gc.u_top.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hb₁</span><span class=\"o\">),</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">,</span> <span class=\"n\">htop</span> <span class=\"bp\">▸</span> <span class=\"n\">gi.l_u_eq</span> <span class=\"n\">b'</span> <span class=\"bp\">▸</span> <span class=\"n\">congr_arg</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">hb₂</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">gi.strict_mono_u</span> <span class=\"n\">hb'</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">galois_insertion.is_coatom_iff</span> <span class=\"o\">[</span><span class=\"n\">is_coatomic</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">htop</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_coatom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">is_coatom</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_coatom</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">is_coatom</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">gi.is_coatom_of_l_top</span> <span class=\"n\">htop</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb_ne</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hb.1</span> <span class=\"bp\">$</span> <span class=\"n\">htop</span> <span class=\"bp\">▸</span> <span class=\"n\">gi.l_u_eq</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"n\">congr_arg</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">eq_top_or_exists_le_coatom</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">hb_ne</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hb.le_iff.mp</span> <span class=\"o\">((</span><span class=\"n\">gi.l_u_eq</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"n\">gi.gc.monotone_l</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hla</span><span class=\"o\">,</span> <span class=\"n\">ha.1</span> <span class=\"o\">(</span><span class=\"n\">gi.gc.u_top</span> <span class=\"bp\">▸</span> <span class=\"n\">h_coatom</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">congr_arg</span> <span class=\"n\">u</span> <span class=\"n\">hla</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">h_coatom</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">order_top</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">order_bot</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">gi</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">galois_insertion.is_atom_of_u_bot</span> <span class=\"o\">(</span><span class=\"n\">hbot</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">is_atom</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_atom</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">hb₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span> <span class=\"k\">in</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hb₁</span> <span class=\"bp\">$</span> <span class=\"n\">hbot</span> <span class=\"bp\">▸</span> <span class=\"n\">congr_arg</span> <span class=\"n\">u</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">,</span>\n   <span class=\"n\">gi.gc.l_bot</span> <span class=\"bp\">▸</span> <span class=\"n\">gi.l_u_eq</span> <span class=\"n\">b'</span> <span class=\"bp\">▸</span> <span class=\"n\">congr_arg</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">hb₂</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gi.strict_mono_u</span> <span class=\"n\">hb'</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">galois_insertion.is_atom_iff</span> <span class=\"o\">[</span><span class=\"n\">is_atomic</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hbot</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_atom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">is_atom</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_atom</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">is_atom</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">gi.is_atom_of_u_bot</span> <span class=\"n\">hbot</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb_ne</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hb.1</span> <span class=\"bp\">$</span> <span class=\"n\">gi.gc.l_bot</span> <span class=\"bp\">▸</span> <span class=\"n\">gi.l_u_eq</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"n\">congr_arg</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">eq_bot_or_exists_atom_le</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">hb_ne</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hb.le_iff.mp</span> <span class=\"o\">((</span><span class=\"n\">gi.l_u_eq</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"n\">gi.gc.monotone_l</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hla</span><span class=\"o\">,</span> <span class=\"n\">ha.1</span> <span class=\"o\">(</span><span class=\"n\">hbot</span> <span class=\"bp\">▸</span> <span class=\"n\">h_atom</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">congr_arg</span> <span class=\"n\">u</span> <span class=\"n\">hla</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">h_atom</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">order_bot</span>\n</code></pre></div>\n</div></div>",
        "id": 300693614,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664142425
    },
    {
        "content": "<p>Supposing not, where would be a good place to put them? In <code>order/atoms</code>?</p>",
        "id": 300825320,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664202261
    }
]