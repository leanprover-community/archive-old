[
    {
        "content": "<p>This is related to <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's comment on <a href=\"https://github.com/leanprover-community/mathlib/issues/3531\">#3531</a> </p>\n<p><code>by apply_instance</code> failed for this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"bp\">_</span>  <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">this</span><span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span><span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"k\">show</span> <span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Does mathlib have this?</p>",
        "id": 204968473,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595625762
    },
    {
        "content": "<p>This isn't suitable as an instance (<code>R</code> is undetermined), but I don't know whether it exists as a <code>def</code></p>",
        "id": 204968685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595625930
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/4252\">#4252</a>, name suggestions appreciated</p>",
        "id": 211235155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601025683
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/semimodule.add_comm_monoid_to_add_comm_group\">docs#semimodule.add_comm_monoid_to_add_comm_group</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.semiring_to_ring\">docs#algebra.semiring_to_ring</a></p>",
        "id": 211412388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601206817
    },
    {
        "content": "<p>Is it true that the resulting add_comm_group structure is independent of the choice of R? If so, can this be made a type class anyway?</p>",
        "id": 211414740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601210437
    },
    {
        "content": "<p>Additive inverses are unique since (-x)+x+(~x) can be simplified either to -x or ~x, so it can't matter which coefficient ring you use to construct the additive inverses? I'd still be pretty wary of adding these as instances.</p>",
        "id": 211415556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601211603
    },
    {
        "content": "<p>That's a nice and simple proof, thanks!</p>",
        "id": 211415872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601212072
    },
    {
        "content": "<p>Although I can't think of a way to exploit it to make the R arg implicit</p>",
        "id": 211417090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601213972
    },
    {
        "content": "<p>There are really two reasons this should not be an instance</p>",
        "id": 211417469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601214494
    },
    {
        "content": "<p>First, it just won't work because there is no way for Lean to guess what <code>R</code> you have in mind</p>",
        "id": 211417474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601214514
    },
    {
        "content": "<p>But even if that wasn't a problem, most of the time there will be a better instance available already</p>",
        "id": 211417482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601214533
    },
    {
        "content": "<p>So since you almost never want to use this instance anyways, much easier if it's not an instance and it's just used explicitly where desired</p>",
        "id": 211417572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601214667
    },
    {
        "content": "<p>As a general principle, instances shouldn't be for variables like in <code>ring A</code>.</p>",
        "id": 211417586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601214712
    },
    {
        "content": "<p>Not sure what you mean by your last message. Either way, I've run into trouble making this an instance even for specific instantiations, as in <a href=\"https://github.com/leanprover-community/mathlib/issues/4289\">#4289</a></p>",
        "id": 211424410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601225469
    },
    {
        "content": "<p>Reid's last message is saying that you should never have \"general\" instances <code>S A</code> that work for <em>any</em> <code>A</code>. Instances like this will fire every time someone wants an <code>S A</code>, and so contribute very heavily to typeclass search (particularly if people looking for <code>R A</code> might be sent looking for <code>S A</code> along the way).</p>\n<p>Instead ideally instances are doing a sort of \"structural recursion\", e.g. they provide an instance of some <code>S (B A)</code> in terms of <code>S A</code>. When this is happening, you can be more confident typeclass search will be efficient, and you're also much less likely to get non-definitionally equal instances colliding with each other.</p>",
        "id": 211440068,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601249720
    },
    {
        "content": "<p>There's a linter warning about general instances that will always match, which suggests lowering the priority. Arguably it should suggest thinking very carefully about whether you <em>really</em> want this instance available in typeclass search, and if you're sure you do to only create it with low priority (so all the honest instances get to fire first).</p>",
        "id": 211440130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601249804
    },
    {
        "content": "<p>Would you be able to comment on whether the instances in <a href=\"https://github.com/leanprover-community/mathlib/issues/4289\">#4289</a> are a bad idea, and if so how best to handle them?</p>",
        "id": 211467335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601283836
    },
    {
        "content": "<p>I believe the instances in <a href=\"https://github.com/leanprover-community/mathlib/issues/4289\">#4289</a> are fine because the scalars are part of the type (thus avoiding the underdetermined parameter in typeclass search). I agree with your assessment that the problem is a diamond issue, and I want to understand it. I bet there is also a simpler way to get it to manifest.</p>",
        "id": 211470164,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1601285672
    },
    {
        "content": "<p>Yes, this is just non-definitionally equal typeclasses instances. Typeclass <em>search</em> is working fine, you just don't like what you're getting!</p>",
        "id": 211471579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601286606
    },
    {
        "content": "<p>I'm worried that the only fix is going to be to tweak the inductive construction to do something different for the free ring...</p>",
        "id": 211471626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601286634
    },
    {
        "content": "<p>Interestingly the <code>free_algebra</code> typeclass seems to cause no problem, it's just the <code>tensor_algebra</code> one that does</p>",
        "id": 211472000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601286887
    },
    {
        "content": "<p>(as an aside, the <code>derive [algebra R]</code> attribute on <code>tensor_algebra</code> creates an instance <code>tensor_algebra.inst</code> instead of <code>tensor_algebra.algebra</code>, which is minorly unhelpful when debugging)</p>",
        "id": 211472073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601286947
    }
]