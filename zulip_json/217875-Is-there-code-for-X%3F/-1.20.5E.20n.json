[
    {
        "content": "<p>Is this function defined anywhere in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.parity</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 266087085,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640486254
    },
    {
        "content": "<p>Does <code>(-1)^(n % 2)</code> work? Does <code>a % b</code> even exist?</p>",
        "id": 266087368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640486824
    },
    {
        "content": "<p>Is the <code>if .. then .. else ..</code> form any better than just <code>(-1)^n</code>?</p>",
        "id": 266087435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640486969
    },
    {
        "content": "<p>There doesn't seem to be a general <code>has_pow ℤ ℤ</code> since zero breaks things.<br>\nOr is there a type of nonzero integers?</p>",
        "id": 266087439,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640486986
    },
    {
        "content": "<p>hmm it doesn't have the support I thought; for <code>\\N</code> you could easily swap between them both with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_eq_mod_order_of\">docs#pow_eq_mod_order_of</a></p>",
        "id": 266087442,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640487001
    },
    {
        "content": "<p>Well, that would be has pow with Nat exponents.</p>",
        "id": 266087486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640487016
    },
    {
        "content": "<p>you'd need Q for Z-powers?</p>",
        "id": 266087488,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640487017
    },
    {
        "content": "<p>If you take the remainder, that is.</p>",
        "id": 266087491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640487030
    },
    {
        "content": "<p>And if you consider <code>-1</code> as a <code>unit Int</code>, then you would be able to take integer powers</p>",
        "id": 266087499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640487082
    },
    {
        "content": "<p>The type of <code>%</code> seems to be <code>has_mod.mod : Π {α : Type} [self : has_mod α], α → α → α</code>, so it still gives an <code>int</code>.<br>\nIf there is also a proof that it is nonnegative, I might be able to cast it into a nat, but I'm not sure if it is easy to work with</p>",
        "id": 266087548,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640487170
    },
    {
        "content": "<p>I think the <code>unit int</code> idea may be a fruitful one</p>",
        "id": 266087565,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640487242
    },
    {
        "content": "<p>Yeah, you can take the power of the unit <code>-1</code>, then coerce back to an int</p>",
        "id": 266087609,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640487273
    },
    {
        "content": "<p>That works great. Thanks!<br>\nIs this map worthy of being added to mathlib?</p>",
        "id": 266087713,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640487550
    },
    {
        "content": "<p>fwiw, the only few instances I can find of a similar pattern in the library:</p>\n<p>(I wrote this):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">neg_one_geom_sum</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">geom_sum</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>\\+ it's also used in the definition of cos/sin. Meanwhile, I can't seem to find a single use of (-1)^(x : Z) anywhere</p>",
        "id": 266087761,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640487605
    },
    {
        "content": "<p>I think it'd be nice to have a few lemmas; but also, tbf, <code>(-1) ^ nat_abs n</code> works; maybe it's just worth adding that as a simp lemma</p>",
        "id": 266087817,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640487653
    }
]