[
    {
        "content": "<p>Dear All,</p>\n<p>the two lemmas below assume that there is a multiplicative, injective homomorphism between two types.  As you can see, one bundles injectivity in the map and assumes separately that the map respects products.  The other does the symmetric choice of bundling multiplication and assuming injectivity.</p>\n<p>Is there a full bundling?  If not, is one of the two forms below preferable?  Or should I unbundle all the way?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b0</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"c1\">--  bundles multiplicativity</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_hom_image_iff</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">unique_mul</span> <span class=\"o\">(</span><span class=\"n\">A.image</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.image</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">unique_mul</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span>\n\n<span class=\"c1\">--  bundles injectivity</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_hom_map_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">↪</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">unique_mul</span> <span class=\"o\">(</span><span class=\"n\">A.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">unique_mul</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 296647746,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662048160
    },
    {
        "content": "<p>I think the first one is more common</p>",
        "id": 296683493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662059601
    },
    {
        "content": "<p>Ok and would it make sense to use <code>map</code> in the first one by passing <code>\\&lt;f, hf\\&gt;</code> and remove the decidable assumption, or should I simply accept unbundling for injectivity?</p>",
        "id": 296690714,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662062399
    },
    {
        "content": "<p>Probably accept unbundling for injectivity.</p>",
        "id": 296697780,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662065553
    }
]