[
    {
        "content": "<p>I’m looking at reviving an old abondonned PR (Showing that ωCPO forms a complete category), so I am exploring the category theory APIs right now. That PR proves relates <code>X ⨯ Y</code> (the binary product object) and <code>X × Y</code> (the product on types), and in the proofs then goes from one world to the other, together with a bunch of helper lemmas relatings <code>fst</code> and <code>lift</code> of the two worlds etc.<br>\nBut I’d expect that many concrete categories have the structure that the product object is isomorphic to the (normal) product, so I wonder if there is generic machinery for that somewhere that I can just instantiate?<br>\nOr is it a sign that the proofs are not “category theoryish” enough if I have to leave the world of arrows and objects and drop to concrete tuples?</p>",
        "id": 280784343,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1651397233
    },
    {
        "content": "<p>There are various <code>preserves_limits</code> typeclasses for functors, and you may be looking for one of those for your forgetful functor.</p>",
        "id": 280784486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651397446
    },
    {
        "content": "<p>Then you can use <code>preserves_product.iso : G.obj (∏ f) ≅ ∏ (λ j, G.obj (f j))</code>.</p>",
        "id": 280784516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651397490
    },
    {
        "content": "<p>or <code>preserves_limit_pair.iso : G.obj (X ⨯ Y) ≅ G.obj X ⨯ G.obj Y</code> for the binary product version</p>",
        "id": 280784522,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651397516
    },
    {
        "content": "<p>Thanks! I would still need something that relates the binary categorical product in the category of types with the product type, would I?</p>",
        "id": 280785246,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1651398319
    },
    {
        "content": "<p>Probably &lt;<a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/limits/shapes/types.html\">https://leanprover-community.github.io/mathlib_docs/category_theory/limits/shapes/types.html</a>&gt; is relevant somehow. Maybe I need to browse through the docs some more.</p>",
        "id": 280785707,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1651399036
    },
    {
        "content": "<p>Yeah, that file is not as useful as it might be, because it doesn't interact with the <code>has_limits</code> world.</p>",
        "id": 280785792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651399166
    },
    {
        "content": "<p>You want things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.kernel_iso_ker\">docs#Module.kernel_iso_ker</a></p>",
        "id": 280786016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651399339
    },
    {
        "content": "<p>I'm a bit mystified to not find these for <code>Type</code>...</p>",
        "id": 280786026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651399366
    },
    {
        "content": "<p>Ok, so I’d instantiate <code>perserves_limits</code> for <code>forget</code> for ωCPO, like &lt;<a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/category/Group/limits.html#Group.forget_preserves_limits\">https://leanprover-community.github.io/mathlib_docs/algebra/category/Group/limits.html#Group.forget_preserves_limits</a>&gt; does for <code>Group</code>.<br>\nThen I can use &lt;<a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/limits/preserves/shapes/binary_products.html#category_theory.limits.preserves_limit_pair.iso\">https://leanprover-community.github.io/mathlib_docs/category_theory/limits/preserves/shapes/binary_products.html#category_theory.limits.preserves_limit_pair.iso</a>&gt; to relate the <code>⨯</code> on ωCPO to the <code>⨯</code> on types.<br>\nAnd then someone has to find the thing relating <code>⨯</code> with <code>×</code>, or I have to add that.<br>\nAnd then I can only hope that enough <code>simp</code> lemmas are around so that the proofs are actually easy :-) (or can I expect all the identifications above to hold definitionally? probably not)</p>",
        "id": 280787302,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1651401418
    },
    {
        "content": "<p>If you can construct the <code>preserves_limits</code> instance for <code>forget</code>, everything after that should be boilerplate, and we can help you get it right in the PR.</p>",
        "id": 280787660,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651401963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, I made a PR with the \"missing\" explicit isomorphisms between the \"opaque\" (co)limits in <code>Type</code> and the usual ones. <a href=\"https://github.com/leanprover-community/mathlib/pull/13854\">#13854</a></p>",
        "id": 280788996,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651403897
    },
    {
        "content": "<p>Be warned, however, that the reason they haven't existed so far, is that usually if you need to use these isomorphisms, you probably should have been using the <code>has_limit</code> API in the first place, but instead use the <code>limit_data</code> API to control the form of your limits.</p>",
        "id": 280789005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651403943
    },
    {
        "content": "<p>“you should” or “you should not”?</p>",
        "id": 280789343,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1651404459
    },
    {
        "content": "<p>I have no ideas if my requests are sensible, and if they are a sign that I am doing something wrong, then maybe I shouldn’t do that, and the missing isomorphisms shouldn’t be added?</p>",
        "id": 280789398,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1651404507
    },
    {
        "content": "<p>Also, what is <code>limit_data</code>? It’s mentioned only once:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">-</span><span class=\"n\">docs</span> <span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"n\">limit_data</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">limits</span><span class=\"bp\">/</span><span class=\"n\">shapes</span><span class=\"bp\">/</span><span class=\"n\">types.lean</span><span class=\"o\">:</span><span class=\"n\">we</span> <span class=\"n\">instead</span> <span class=\"n\">construct</span> <span class=\"n\">terms</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">limit_data</span><span class=\"bp\">`.</span>\n</code></pre></div>",
        "id": 280789607,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1651404801
    },
    {
        "content": "<p>oops, it got renamed, and the doc wasn't updated, and I was reading that doc just now :-)</p>",
        "id": 280790030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651405415
    },
    {
        "content": "<p>Just <code>limit_cone</code>. It is just a cone, bundled with the fact it is a limit cone.</p>",
        "id": 280790079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651405454
    },
    {
        "content": "<p>More generally I should have said \"use the <code>is_limit</code> API rather than the <code>has_limit</code> API\"</p>",
        "id": 280790084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651405469
    },
    {
        "content": "<p>basically, if you can work purely formally with universal properties, the <code>has_limit</code> API is great. It picks limits for you!</p>",
        "id": 280790091,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651405492
    },
    {
        "content": "<p>But if you need to \"get your hands dirty\" with a specific construction of a limit, you probably want to be talking about the particular <code>limit_cone</code> and <code>is_limit</code> terms that you care about.</p>",
        "id": 280790107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651405521
    },
    {
        "content": "<p>(I've fixe that stray <code>limit_data</code> mention in my PR now.)</p>",
        "id": 280790170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651405617
    },
    {
        "content": "<p>Unfortunately I've never looked at the <code>ωCPO</code> stuff, so I don't have a specific opinion about what you should be doing. :-)</p>",
        "id": 280790186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651405662
    }
]