[
    {
        "content": "<p>Hello,</p>\n<p>Is there a code for one of the following results: Let q = p^k, where p is prime and k &gt;= 1. Then...</p>\n<ol>\n<li>For any x \\in F_q, any algebraic conjugate of x is of form x^{p^m} for some 0 &lt;= m &lt; k.</li>\n<li>The Galois group of F_q/F_p consists of iterations of Frobenius endomorphisms.</li>\n</ol>",
        "id": 287402211,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656119414
    },
    {
        "content": "<p>After some search I did not find the exact result in mathlib . However, at least we know <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_field.is_galois\">docs#galois_field.is_galois</a>, where galois_field is the construction of a finite field of cardinality p^k as splitting field of x^(p^k)-1. And we know that every finite field is equivalent to a galois_field (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_field.alg_equiv_galois_field\">docs#galois_field.alg_equiv_galois_field</a>).</p>\n<p>The Galois group Gal(E/F) is spelt <code>E ≃ₐ[F] E</code> in mathlib, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/frobenius\">docs#frobenius</a> is just a ring homomorphism and doesn't seem to have a alg_hom (over <code>zmod p</code>) version, but it's easy to see it fixes <code>zmod p</code>. Then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normal.alg_hom_equiv_aut\">docs#normal.alg_hom_equiv_aut</a> gets you from alg_hom to alg_equiv (≃ₐ). So there's a homomorphism from <code>multiplicative (zmod k)</code> to Gal(F_q/F_p) using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.lift\">docs#zmod.lift</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_field.frobenius_pow\">docs#finite_field.frobenius_pow</a>, and it is injective because a X^(p^k)-X cannot have more than p^k roots when k &lt; n. Finally use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_galois.card_aut_eq_finrank\">docs#is_galois.card_aut_eq_finrank</a> to conclude it's an isomorphism. Hope this helps!</p>",
        "id": 287405434,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656124229
    },
    {
        "content": "<p>I'll try this method and see if I can make it work. Thank you very much!</p>",
        "id": 287411538,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656131702
    },
    {
        "content": "<p>Yeah these would be nice additions! Do we even have Galois conjugates?</p>",
        "id": 287416609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656137591
    },
    {
        "content": "<p>Hmm... I can't find one. Maybe that should be added first. I don't know what results should we add for algebraic conjugates though.</p>",
        "id": 287417559,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656138617
    },
    {
        "content": "<p>The concept is a bit delicate because for an algebraic non-Galois extension you can still define an equivalence relation on the top field by \"we have the same min poly over the bottom field\" but recent discussions about normal closures in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a>  have convinced me that it's not obviously a useful notion.</p>",
        "id": 287418407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656139651
    },
    {
        "content": "<p>In the algebraic normal (perhaps infinite, perhaps nonseparable) case is it true that if two elements of the top field have the same min poly then there's an automorphism of the top field sending one to the other? Probably this can be extracted from what we have if it's true</p>",
        "id": 287418574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656139807
    },
    {
        "content": "<p>One thing we don't have, as far as I know, is that L/K is normal iff any K-alg hom from L to any other K-field has image independent of the hom. I'm in the process of adding that in a branch called something like <code>kbuzzard-normal-universal</code> (on mobile, sorry)</p>",
        "id": 287418682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656139928
    },
    {
        "content": "<blockquote>\n<p>In the algebraic normal (perhaps infinite, perhaps nonseparable) case is it true that if two elements of the top field have the same min poly then there's an automorphism of the top field sending one to the other? Probably this can be extracted from what we have if it's true</p>\n</blockquote>\n<p>Just use<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/normal.html#alg_equiv.lift_normal\">https://leanprover-community.github.io/mathlib_docs/field_theory/normal.html#alg_equiv.lift_normal</a> ?</p>",
        "id": 287421138,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656143125
    },
    {
        "content": "<p>I'm confused with using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normal.alg_hom_equiv_aut\">docs#normal.alg_hom_equiv_aut</a> to get the alg_equiv. So instead, I'm trying to prove that φ^n = 1, use that to get a perfect ring instance for F_q, and get frobenius_equiv from that instance.</p>",
        "id": 287425037,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656149278
    },
    {
        "content": "<p>I'm surprised we don't have that yet! What are you confused about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normal.alg_hom_equiv_aut\">docs#normal.alg_hom_equiv_aut</a>?</p>",
        "id": 287426071,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656150798
    },
    {
        "content": "<p>I'll also say, a <code>def</code> I told myself to write a while ago is a theoretical <code>def power_basis.map_conjugate (s : S) (pb : power_basis R S) (h : pb.minpoly_gen = minpoly R s) : power_basis R S </code>, which, using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_basis.lift\">docs#power_basis.lift</a>, should immediately give you the correct results. The problem with this was that figuring out the right conditions is hard; it definitely works for fields, but I'm not sure if it even generalises at all from there. (The proof from fields is simple, but a bit finicky in Lean). I wonder if this is the important thing we're missing</p>",
        "id": 287426161,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656150951
    },
    {
        "content": "<blockquote>\n<p>I'm surprised we don't have that yet! What are you confused about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normal.alg_hom_equiv_aut\">docs#normal.alg_hom_equiv_aut</a>?</p>\n</blockquote>\n<p>I've deleted my code that uses it. Now I'm trying to remember...</p>",
        "id": 287426222,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656151041
    },
    {
        "content": "<p>So I tried using this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">frobenius_alg</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ring_hom.map_frobenius</span><span class=\"o\">,</span> <span class=\"n\">zmod.frobenius_zmod</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_equiv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">normal.alg_hom_equiv_aut</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But then I got an error message like this:<br>\n<code>synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  galois_field.algebra p n\n inferred\n  zmod.algebra (galois_field p n) p</code></p>\n<p>Aside: Should we a good alternative notation for <code>galois_field p n</code>, like <code>GF(p, n)</code> or something like that?</p>",
        "id": 287426746,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656151795
    },
    {
        "content": "<p>aah dear lord there's a diamond, can you try do something like (on the lines before this) do <code>local attribute [-instance] galois_field.algebra</code>?</p>",
        "id": 287426797,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656151838
    },
    {
        "content": "<p>I'm in favour of a notation; <code>galois_field</code> is relatively new!</p>",
        "id": 287426810,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656151865
    },
    {
        "content": "<p>Good news: the line now works. Thanks!</p>",
        "id": 287427000,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656152145
    },
    {
        "content": "<p>I'm now stuck at this line.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finite_field.frobenius_pow</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pth_root'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">],</span>\n  <span class=\"n\">frobenius_pth_root'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">function.comp_iterate_pred_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n           <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n  <span class=\"n\">pth_root_frobenius'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">((</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">]),</span> <span class=\"n\">function.iterate_pred_comp_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n           <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zmod.lift</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In the bottom definition, <code>frobenius_alg_of_int</code> is a map <code>ℤ → (R ≃ₐ[zmod p] R)</code> defined by <code>1 ↦ frobenius</code>. Now I'm stuck because Lean tells me it fails to synthesize type class instance for <code>perfect_ring (galois_field p n) p</code>... which is the instance I defined right above it.</p>",
        "id": 287431511,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656158695
    },
    {
        "content": "<p>can you post your imports as well so we can just copy+paste everything in? (<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 287431522,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656158726
    },
    {
        "content": "<p>Alright.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span>\n  <span class=\"n\">field_theory.galois</span>\n  <span class=\"n\">field_theory.normal</span>\n  <span class=\"n\">field_theory.finite.galois_field</span>\n  <span class=\"n\">data.zmod.algebra</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">galois_field</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">galois_field.algebra</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finite_field.frobenius_pow</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pth_root'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">],</span>\n  <span class=\"n\">frobenius_pth_root'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">function.comp_iterate_pred_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n           <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n  <span class=\"n\">pth_root_frobenius'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">((</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">]),</span> <span class=\"n\">function.iterate_pred_comp_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n           <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zmod.lift</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">galois_field</span>\n</code></pre></div>\n<p>Edit: Uh my bad, the previous one wasn't minimal. Should be trimmed good enough now.</p>",
        "id": 287431579,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656158796
    },
    {
        "content": "<p>Sorry Gian, this slipped my mind -  I'm away from the computer today, but I'll have a look at this tomorrow, if someone hasn't helped you yet</p>",
        "id": 287437462,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656167013
    },
    {
        "content": "<p>No problem.</p>",
        "id": 287454092,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656189476
    },
    {
        "content": "<p>So the problem with the instance is that it has an argument that lean can't supply automatically, the <code>0 &lt; n</code> hypothesis for the instance. The linter (type <code>#lint</code>) at the end of the file will tell you about this sort of problem.<br>\nThere are a couple of ways to fix this sort of thing.</p>\n<ul>\n<li>You could remove the hypothesis, as when <code>n = 0</code> we have <code>galois_field p 0</code> is just <code>zmod p</code> again the result should still be true.</li>\n<li>use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fact\">docs#fact</a> to put the fact that <code>n</code> is positive into the typeclass system, you can see examples of this in <a href=\"https://tqft.net/mathlib/data/zmod/basic\">file#data/zmod/basic</a></li>\n</ul>",
        "id": 287454961,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656190797
    },
    {
        "content": "<p>I'm talking about the instance <code>instance perfect_ring</code> you have written</p>",
        "id": 287455013,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656190827
    },
    {
        "content": "<p>Or use pnat / n + 1</p>",
        "id": 287455629,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1656191763
    },
    {
        "content": "<p>Yeah I guess it depends what you want to do with it. Ideally the instance should fire for explicit small primes. I'm not sure how to do that with making the instance for a Coe of a pnat?</p>",
        "id": 287456609,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656193367
    },
    {
        "content": "<p>Thanks for the suggestions. I'm now using <code>[fact (0 &lt; n)]</code>; I think handling the case n = 0 will require case divisions for the <code>instance perfect_ring</code> and I want to avoid it for now. Maybe it will be the better alternative.</p>",
        "id": 287464322,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656205533
    },
    {
        "content": "<p>I got a bit bored and did the zero case,  hope its useful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span>\n  <span class=\"n\">field_theory.galois</span>\n  <span class=\"n\">field_theory.normal</span>\n  <span class=\"n\">field_theory.finite.galois_field</span>\n  <span class=\"n\">data.zmod.algebra</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">galois_field</span>\n\n<span class=\"kn\">section</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finite_field.frobenius_pow</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n  <span class=\"c1\">--used in normal.of_is_splitting_field too</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_splitting_field_self</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_splitting_field</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">splits_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n   <span class=\"c1\">-- TODO Const and X sub C versions? anything obviously small degree</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">zmod.algebra</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">galois_field_zero_equiv_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">polynomial.is_splitting_field.alg_equiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_galois_field_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">fintype.card_of_bijective</span> <span class=\"o\">(</span><span class=\"n\">galois_field_zero_equiv_zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.bijective</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pth_root'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">],</span>\n  <span class=\"n\">frobenius_pth_root'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">finite_field.frobenius_pow</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zero_lt_iff</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">function.comp_iterate_pred_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n           <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">pth_root_frobenius'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">finite_field.frobenius_pow</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zero_lt_iff</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">((</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">]),</span> <span class=\"n\">function.iterate_pred_comp_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n            <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zmod.lift</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">galois_field</span>\n</code></pre></div>",
        "id": 287496737,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656254674
    },
    {
        "content": "<p>I changed some <code>eq_or_ne</code> with <code>eq_zero_or_pos</code>. After some addition, now it looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span>\n  <span class=\"n\">field_theory.galois</span>\n  <span class=\"n\">field_theory.normal</span>\n  <span class=\"n\">field_theory.finite.galois_field</span>\n  <span class=\"n\">data.zmod.algebra</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">ring_hom.map_frobenius</span><span class=\"o\">,</span> <span class=\"n\">zmod.frobenius_zmod</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pth_root_alg</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">eq_pth_root_iff</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">ring_hom.map_frobenius</span><span class=\"o\">,</span> <span class=\"n\">zmod.frobenius_zmod</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_equiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">pth_root_alg</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">pth_root_alg</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">left_inverse_pth_root_frobenius</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">pth_root_alg</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">right_inverse_pth_root_frobenius</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_of_int</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">additive.of_mul</span> <span class=\"o\">((</span><span class=\"n\">frobenius_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_zero</span><span class=\"o\">,</span> <span class=\"n\">of_mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_add</span><span class=\"o\">,</span> <span class=\"n\">of_mul_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">additive.of_mul</span> <span class=\"o\">((</span><span class=\"n\">frobenius_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_zero</span><span class=\"o\">,</span> <span class=\"n\">of_mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_add</span><span class=\"o\">,</span> <span class=\"n\">of_mul_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">galois_field</span>\n\n<span class=\"kn\">section</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finite_field.frobenius_pow</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n  <span class=\"c1\">--used in normal.of_is_splitting_field too</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_splitting_field_self</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_splitting_field</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">splits_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n   <span class=\"c1\">-- TODO Const and X sub C versions? anything obviously small degree</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">zmod.algebra</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">galois_field_zero_equiv_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">polynomial.is_splitting_field.alg_equiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_galois_field_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">fintype.card_of_bijective</span> <span class=\"o\">(</span><span class=\"n\">galois_field_zero_equiv_zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.bijective</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pth_root'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">],</span>\n  <span class=\"n\">frobenius_pth_root'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">n.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">finite_field.frobenius_pow</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">function.comp_iterate_pred_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n           <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">pth_root_frobenius'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">n.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">finite_field.frobenius_pow</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">((</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">]),</span> <span class=\"n\">function.iterate_pred_comp_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n            <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_alg_pow_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg_of_int</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">alg_equiv.ext</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">---- I don't know how to change the goal into `(frobenius (galois_field p n) p ^ n) a = a`</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">galois_field.algebra</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_zmod'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zmod.lift</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">frobenius_alg_pow_eq_zero</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">galois_field.algebra</span> <span class=\"n\">zmod.algebra</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_alg_of_zmod_bij</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_zmod'</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.bijective_iff_injective_and_card</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">---- First show that the cardinality are equal</span>\n  <span class=\"c1\">-- this line fails: rw [zmod.card, fintype.of_equiv_card (@additive.of_mul (galois_field p n ≃ₐ[zmod p] galois_field p n))],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">---- Now show that the function is injective</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_zmod'</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_zmod_bij</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">galois_field</span>\n</code></pre></div>",
        "id": 287516065,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656280529
    },
    {
        "content": "<p>Also, I'm curious about these:</p>\n<ol>\n<li>Would it be better to directly prove the result for any finite field of size p^n?</li>\n<li>Should we make a bijection between <code>zmod n</code> and ℤ / nℤ? So, instead of working over  <code>zmod n</code>, we use <code>quotient_group</code> and the first isomorphism theorem to get the desired isomorphism.</li>\n<li>I feel like the <code>frobenius_alg_of_int</code> map could be re-written, but I don't know how.</li>\n</ol>",
        "id": 287516313,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656280895
    },
    {
        "content": "<ol start=\"3\">\n<li>I think this definition is nicer:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zpowers_hom</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_additive''</span>\n</code></pre></div>\n<ol>\n<li>I think we should strive to define</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_equiv_of_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional.finrank</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>such that the forward map is the <code>zmod.lift</code> of <code>(zpowers_hom _ (frobenius_alg_equiv F p)).to_additive''</code>, which probably has the best defeq property. I don't know a general description of the inverse map, so maybe just construct it \"by choice\" from bijectivity. These are the only data involved in this definition; the rest are proofs and we don't care how proofs are done, and you are free to use equivalence with <code>galois_field</code> to complete the proofs.</p>\n<ol start=\"2\">\n<li>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.quotient_span_equiv_zmod\">docs#int.quotient_span_equiv_zmod</a> but I don't think we need to invoke it.</li>\n</ol>\n<p>Finally, I was able to fill in your first two sorries by introducing two lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">alg_equiv.coe_pow</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_coe_pow</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">})</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">frobenius_alg_of_int_apply</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius_alg_of_int</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"n\">frobenius_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">alg_equiv.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_alg_pow_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">frobenius_alg_of_int_apply</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_alg_of_zmod_bij</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_zmod'</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.bijective_iff_injective_and_card</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c1\">---- First show that the cardinality are equal</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.card</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">fintype.card_congr</span> <span class=\"n\">additive.of_mul</span><span class=\"o\">,</span> <span class=\"n\">is_galois.card_aut_eq_finrank</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">galois_field.finrank</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span> <span class=\"o\">},</span>\n  <span class=\"c1\">---- Now show that the function is injective</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It took me a while to find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.coe_pow\">docs#ring_hom.coe_pow</a>, and the API seems underdeveloped and many lemmas missing.</p>",
        "id": 287524267,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656293231
    },
    {
        "content": "<p>With three more lemmas, I am able to close the last sorry. These would be nice additions to mathlib, if they don't already exist. <span class=\"user-mention\" data-user-id=\"246632\">@Gian Cordana Sanjaya</span> Would you try to generalize the proof to all finite fields?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zmod.lift_injective_iff</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">zmod.lift</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">map_zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">he</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">map_sub</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">he</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iterate_pow</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.iterate_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_pow_X_sub_X</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">nat_degree_add_eq_left_of_nat_degree_lt</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">nat_degree_X_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_neg</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_X</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_alg_of_zmod_bij</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_zmod'</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.bijective_iff_injective_and_card</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c1\">---- First show that the cardinality are equal</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.card</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">fintype.card_congr</span> <span class=\"n\">additive.of_mul</span><span class=\"o\">,</span> <span class=\"n\">is_galois.card_aut_eq_finrank</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">galois_field.finrank</span> <span class=\"n\">p</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n  <span class=\"c1\">---- Now show that the function is injective</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg_of_zmod'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zmod.lift_injective_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zmod.lift_apply_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.nat_cast_val</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">alg_equiv.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">by_contra</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k.val</span> <span class=\"bp\">-</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hPd</span> <span class=\"o\">:</span> <span class=\"n\">P.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k.val</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">nat_degree_pow_X_sub_X</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.one_lt_pow</span><span class=\"o\">,</span>\n      <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">nat.pos_of_ne_zero</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">zmod.val_eq_zero</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">nat_degree</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hPd</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pow_ne_zero</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">P.root_set</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_root_set_iff</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">aeval_X</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">frobenius_alg_of_int_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">],</span>\n        <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k.val</span><span class=\"o\">])</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">iterate_pow</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hP</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">P.roots.card</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">P.roots.to_finset_card_le</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">galois_field.card</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">finset.mem_univ</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">hmem</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">roots</span> <span class=\"n\">map_id.symm</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hle.trans</span> <span class=\"o\">(</span><span class=\"n\">polynomial.card_roots'</span> <span class=\"n\">P</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hPd</span><span class=\"o\">,</span> <span class=\"n\">pow_le_pow_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">this.not_lt</span> <span class=\"n\">k.val_lt</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287530629,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656302048
    },
    {
        "content": "<p>By the way, I never understand why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.root_set\">docs#polynomial.root_set</a> is defined to be a <code>set</code> coerced from <code>finset</code> to <code>set</code>. Shouldn't we keep it a <code>finset</code>?</p>",
        "id": 287531011,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656302590
    },
    {
        "content": "<p>If anyone spot any lemma above that already exist in mathlib, please let me know! This thread happens to be in the correct stream for this purpose.</p>",
        "id": 287531093,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656302668
    },
    {
        "content": "<p>I'll try reconstructing the proof now. I was away doing some random stuff.<br>\nI'll also try generalizing; I feel like it will be just nicer as you remove their dependency on the Galois field case.</p>",
        "id": 287531528,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656303311
    },
    {
        "content": "<p>Also, I saw that Alex added <code>is_splitting_field_self</code>. I added the case X - c as below, which we can add to mathlib if needed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">--used in normal.of_is_splitting_field too</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_splitting_field_self_zero</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_splitting_field</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">splits_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">is_splitting_field_self_X_sub_C</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_splitting_field</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">splits_X_sub_C</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 287531656,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656303490
    },
    {
        "content": "<p>Weirdly enough after updating mathlib to its current state, I cannot solve <code>galois_field_zero_equiv_zmod</code>. I'll send the whole code down, if no one minds; it'll be very long.<br>\n<span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>  Thanks for making the rest work!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span>\n  <span class=\"n\">field_theory.galois</span>\n  <span class=\"n\">field_theory.normal</span>\n  <span class=\"n\">field_theory.finite.galois_field</span>\n  <span class=\"n\">data.zmod.algebra</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">ring_hom.map_frobenius</span><span class=\"o\">,</span> <span class=\"n\">zmod.frobenius_zmod</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pth_root_alg</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">eq_pth_root_iff</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">ring_hom.map_frobenius</span><span class=\"o\">,</span> <span class=\"n\">zmod.frobenius_zmod</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_equiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">pth_root_alg</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">pth_root_alg</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">left_inverse_pth_root_frobenius</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">pth_root_alg</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">right_inverse_pth_root_frobenius</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_of_int</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">additive.of_mul</span> <span class=\"o\">((</span><span class=\"n\">frobenius_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_zero</span><span class=\"o\">,</span> <span class=\"n\">of_mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_add</span><span class=\"o\">,</span> <span class=\"n\">of_mul_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zpowers_hom</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_additive''</span>\n\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">galois_field</span>\n\n<span class=\"kn\">section</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finite_field.frobenius_pow</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n  <span class=\"c1\">--used in normal.of_is_splitting_field too</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_splitting_field_self</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_splitting_field</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">splits_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n   <span class=\"c1\">-- TODO Const and X sub C versions? anything obviously small degree</span>\n\n\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">galois_field_zero_equiv_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">polynomial.is_splitting_field.alg_equiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)),</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">],</span>\n  <span class=\"c1\">---- The lines below this should NOT be necessary</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_galois_field_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">fintype.card_of_bijective</span> <span class=\"o\">(</span><span class=\"n\">galois_field_zero_equiv_zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.bijective</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">perfect_ring</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pth_root'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">],</span>\n  <span class=\"n\">frobenius_pth_root'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">n.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">finite_field.frobenius_pow</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">function.comp_iterate_pred_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n           <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">pth_root_frobenius'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">n.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">finite_field.frobenius_pow</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">function.comp_app</span> <span class=\"o\">((</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.pred</span><span class=\"o\">]),</span> <span class=\"n\">function.iterate_pred_comp_of_pos</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n            <span class=\"bp\">←</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_one</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">alg_equiv.coe_pow</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_coe_pow</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">})</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">frobenius_alg_of_int_apply</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius_alg_of_int</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"n\">frobenius_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">alg_equiv.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_alg_pow_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">frobenius_alg_of_int_apply</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pow_eq_one</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">galois_field.algebra</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_zmod'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zmod.lift</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">frobenius_alg_pow_eq_zero</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod.lift_injective_iff</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">zmod.lift</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">map_zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">he</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">map_sub</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">he</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iterate_pow</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.iterate_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_pow_X_sub_X</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">nat_degree_add_eq_left_of_nat_degree_lt</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">nat_degree_X_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_neg</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_X</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">frobenius_alg_of_zmod_bij</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_zmod'</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.bijective_iff_injective_and_card</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c1\">---- First show that the cardinality are equal</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.card</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">fintype.card_congr</span> <span class=\"n\">additive.of_mul</span><span class=\"o\">,</span> <span class=\"n\">is_galois.card_aut_eq_finrank</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">galois_field.finrank</span> <span class=\"n\">p</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n  <span class=\"c1\">---- Now show that the function is injective</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg_of_zmod'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zmod.lift_injective_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zmod.lift_apply_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.nat_cast_val</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">alg_equiv.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">by_contra</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k.val</span> <span class=\"bp\">-</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hPd</span> <span class=\"o\">:</span> <span class=\"n\">P.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k.val</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">nat_degree_pow_X_sub_X</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.one_lt_pow</span><span class=\"o\">,</span>\n      <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">nat.pos_of_ne_zero</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">zmod.val_eq_zero</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">nat_degree</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hPd</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pow_ne_zero</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">P.root_set</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_root_set_iff</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">aeval_X</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">frobenius_alg_of_int_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">],</span>\n        <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k.val</span><span class=\"o\">])</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">iterate_pow</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hP</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">P.roots.card</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">P.roots.to_finset_card_le</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">galois_field.card</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">finset.mem_univ</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">hmem</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">roots</span> <span class=\"n\">map_id.symm</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hle.trans</span> <span class=\"o\">(</span><span class=\"n\">polynomial.card_roots'</span> <span class=\"n\">P</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hPd</span><span class=\"o\">,</span> <span class=\"n\">pow_le_pow_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">this.not_lt</span> <span class=\"n\">k.val_lt</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_zmod'</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_of_zmod_bij</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">galois_field</span>\n</code></pre></div>",
        "id": 287532867,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656305336
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">galois_field_zero_equiv_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">polynomial.is_splitting_field.alg_equiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)),</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">galois_field.is_splitting_field_self</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This solves the goal (though <code>is_splitting_field_self</code> is in the wrong namespace).</p>\n<p><code>is_splitting_field_self_X_sub_C</code> looks like a nice lemma to have, but I'm not sure if it should be an instance. What do people think?</p>",
        "id": 287533528,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656306137
    },
    {
        "content": "<p>Thanks. It works!<br>\nIt seems that there's no instance of <code>is_galois (zmod p) K</code> for K a finite field of characteristic p. I don't know much about diamonds, but my guess is that it would conflict with <code>is_galois (zmod p) (galois_field p n)</code>?</p>",
        "id": 287536198,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656309699
    },
    {
        "content": "<p>I don't think that's a problem; <code>is_galois</code> is a Prop and since any two proofs of the Prop are defeq, there are no diamond problems with Prop-valued classes. <code>is_galois</code> for a finite field would be a nice addition to mathlib, and can be easily proven using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_galois.of_alg_equiv\">docs#is_galois.of_alg_equiv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_field.alg_equiv_galois_field\">docs#galois_field.alg_equiv_galois_field</a> (a version with <code>n</code> replaced by <code>finite_dimensional.finrank (zmod p) K)</code> would be easier to use).</p>",
        "id": 287537088,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656310726
    },
    {
        "content": "<p>Notice that my proof of the last sorry shares great similarity with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_field.finrank/src\">src#galois_field.finrank</a>. I think there's potential of extracting lemmas and golfing both proofs.</p>",
        "id": 287538148,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656311989
    },
    {
        "content": "<p>Speaking of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_galois.alg_equiv_galois_field\">docs#is_galois.alg_equiv_galois_field</a> uses <code>[algebra (zmod p) K]</code> as an instance as opposed to <code>[char_p K p]</code>. Should it be changed, or is it fine as it?</p>",
        "id": 287538805,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656312675
    },
    {
        "content": "<p>You mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_field.alg_equiv_galois_field\">docs#galois_field.alg_equiv_galois_field</a>? The choice of <code>[algebra (zmod p) K]</code> is probably intentional. There is such an instance inferred from <code>[char_p K p]</code>, but using <code>[algebra (zmod p) K]</code> as an argument allows not only the inferred instance, but possibly other non-defeq instances, like the one from splitting_field (of course we know they are all equal propositionally).</p>",
        "id": 287539255,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656313125
    },
    {
        "content": "<p>Ah yes, I mean that. Ah I think I see what you mean now.</p>",
        "id": 287539899,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656313659
    },
    {
        "content": "<p>Proof of result generalized to any finite field. Should I send the whole code here, or make a PR through GitHub?</p>",
        "id": 287541185,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656314661
    },
    {
        "content": "<p>You are welcome to make a PR, which will make review/comments easier. I just fixed a problem at <a href=\"https://github.com/leanprover-community/mathlib/pull/14947\">#14947</a> and will sleep now; see you tomorrow :)</p>",
        "id": 287541513,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656314886
    },
    {
        "content": "<p>Alright, thanks a lot for your help!</p>",
        "id": 287541587,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656314955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246632\">@Gian Cordana Sanjaya</span> do you have push access to non master branches of mathlib?</p>\n<p><span class=\"user-mention\" data-user-id=\"125393\">@Junyan Xu</span> you have two accounts here with the same pic so I don't know if I'm tagging the right one, but as you probably know you can access <code>roots</code> as a multiset which is arguably better than a finset.</p>",
        "id": 287541729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656315032
    },
    {
        "content": "<p>I've never asked for any access before, so I'm guessing no. I'll check GitHub though as well.</p>",
        "id": 287541896,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656315140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes and I'm actually considering a refactor that first shows the number of roots is finite in a domain and each root has finite multiplicity (holds in any nontrivial ring), then synthesize the multiset from the finset + multiplicity. (btw I think you can reach me with either account.)</p>",
        "id": 287542106,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656315306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246632\">@Gian Cordana Sanjaya</span> what is your GitHub userid?</p>",
        "id": 287542571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656315595
    },
    {
        "content": "<p>userid: mortarsanjaya</p>",
        "id": 287542669,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656315644
    },
    {
        "content": "<p>invite sent</p>",
        "id": 287542977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656315883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Algebraic.20Conjugate.20over.20Finite.20Fields/near/287533528\">said</a>:</p>\n<blockquote>\n<p><code>is_splitting_field_self_X_sub_C</code> looks like a nice lemma to have, but I'm not sure if it should be an instance. What do people think?</p>\n</blockquote>\n<p>I think all versions of this with small polynomials should be instances yes, like <code>X_add_C</code>, <code>X</code>, <code>C_mul_X</code>, <code>C_mul_X_add_C</code>, <code>C</code>, maybe there is a clever way to make an instance chain that covers all these, but I cant immediately think of one.</p>",
        "id": 287590455,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656342146
    },
    {
        "content": "<p>Some lemmas that were used were not written by me. They also fit on some other files already existing in mathlib. Should I still make the PR for them?</p>",
        "id": 287592899,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656343222
    },
    {
        "content": "<p>I also have a question for one of the lemmas in the above category.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lift_injective_iff</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">zmod.lift</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f.val</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">map_zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">he</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">map_sub</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">he</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Should we make it a <code>simp</code> lemma?</p>",
        "id": 287596352,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656344620
    },
    {
        "content": "<p>People tend to be not too fussed about precise attribution here -- the goal is to make an amazing mathematics library together. Thanks for asking though! Please go ahead and make the PR.</p>",
        "id": 287600169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656346101
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> what Kevin says, but you can add a co-authored-by line as the last line before the <code>---</code> in the PR message: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/.github/CONTRIBUTING.md\">https://github.com/leanprover-community/mathlib/blob/master/.github/CONTRIBUTING.md</a> if you want to acknowledge someone as having contributed to the PR (this happens automatically if more than one person pushes commits to a branch).</p>",
        "id": 287600710,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656346329
    },
    {
        "content": "<blockquote>\n<p>I think all versions of this with small polynomials should be instances yes, like <code>X_add_C</code>, <code>X</code>, <code>C_mul_X</code>, <code>C_mul_X_add_C</code>, <code>C</code>, maybe there is a clever way to make an instance chain that covers all these, but I cant immediately think of one.</p>\n</blockquote>\n<p>I think there is the problem that a polynomial can be written in many non-defeq or syntactically different ways, and an enormous amount of instances are needed to cover all combinations, which would probably slow down typeclass inference. For example, <code>X + C r</code> may be written as <code>C r + X</code> or <code>X - C (-r)</code>, <code>C r * X ^ n</code> may be written as <code>monomial n r</code>, <code>X</code> can be written as <code>C 1 * X</code> or <code>X ^ 1</code>, etc. So some <code>convert</code> or <code>rewrite</code> would still be necessary in many cases, defying the purpose of instances. Maybe some tactic can put them in a normal form. (I've seen discussion of incorporating <code>compute_degree</code> into <code>norm_num</code>, may be a good idea?)</p>",
        "id": 287602288,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656347016
    },
    {
        "content": "<p>BTW, feel free to include lemmas I wrote in your PR!</p>",
        "id": 287602493,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656347107
    },
    {
        "content": "<p>I'm only thinking of things which are \"syntactically linear\" and in a reasonable looking format, but yes its certainly a trade-off between usefulness and not overloading tc-search, seeing as the head symbol is <code>is_splitting_field</code> I wouldn't think this would slow down many other uses of typeclass search.</p>",
        "id": 287602712,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656347199
    },
    {
        "content": "<p>Thanks for the comments! Added one small PR, now I'll sleep.</p>",
        "id": 287609704,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656350299
    },
    {
        "content": "<p>Just took a look at that PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/15012\">#15012</a>); I think you just needed to find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/injective_iff_map_eq_zero\">docs#injective_iff_map_eq_zero</a>!</p>",
        "id": 287649570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656370989
    },
    {
        "content": "<p>I should have checked first... Replacing them directly doesn't work (rather obviously), but it seems it should work well with some unfolding.</p>",
        "id": 287650392,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656371501
    },
    {
        "content": "<p>seems you just need to replace <code>rw [frobenius_alg_of_int_apply,</code> by <code>erw</code>. (at least for my original less general proof)</p>",
        "id": 287653529,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656373671
    },
    {
        "content": "<p>I'm thinking of removing <code>alg_equiv.coe_pow</code>, but the only proof I could think of for <code>frobenius_alg_of_int_apply</code> now uses induction on <code>n</code>, which is sort of sad. Would <code>alg_equiv.coe_pow</code> be a good addition? Is induction fine?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span>\n  <span class=\"n\">field_theory.normal</span>\n  <span class=\"n\">field_theory.finite.galois_field</span>\n  <span class=\"n\">data.zmod.algebra</span>\n\n\n\n<span class=\"c1\">---- The definitions in this section does not seem to fit in any current file for some reason</span>\n<span class=\"kn\">section</span> <span class=\"n\">frobenius</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Frobenius automorphism as an `alg_hom`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">ring_hom.map_frobenius</span><span class=\"o\">,</span> <span class=\"n\">zmod.frobenius_zmod</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- `p`-th root of an element in a perfect ring as an `alg_hom`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pth_root_alg</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">eq_pth_root_iff</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">ring_hom.map_frobenius</span><span class=\"o\">,</span> <span class=\"n\">zmod.frobenius_zmod</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Frobenius automorphism of a perfect ring as an `alg_equiv`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_equiv</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">pth_root_alg</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">left_inverse_pth_root_frobenius</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">pth_root_alg</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">right_inverse_pth_root_frobenius</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">frobenius_alg</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The homomorphism from `int` to the automorphism group of R as a ring,</span>\n<span class=\"sd\">  sending 1 to `frobenius_equiv`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_of_int</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">additive.of_mul</span> <span class=\"o\">((</span><span class=\"n\">frobenius_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_zero</span><span class=\"o\">,</span> <span class=\"n\">of_mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_add</span><span class=\"o\">,</span> <span class=\"n\">of_mul_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The homomorphism from `int` to the automorphism group of R as a `zmod p`-algebra,</span>\n<span class=\"sd\">  sending 1 to `frobenius_alg_equiv`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">frobenius_alg_of_int</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zpowers_hom</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">frobenius_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_additive''</span>\n\n<span class=\"c1\">---- As the name suggest, this fits in alg_equiv section of \"algebra/algebra/basic.lean\"</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">alg_equiv.coe_pow</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_coe_pow</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">})</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">frobenius_alg_of_int_apply</span> <span class=\"o\">[</span><span class=\"n\">perfect_ring</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius_alg_of_int</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"n\">frobenius_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">alg_equiv.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_pow</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">frobenius</span>\n</code></pre></div>",
        "id": 287665554,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1656385832
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib/algebra/hom/iterate\">file#algebra/hom/iterate</a> has a bunch of <code>coe_pow</code> lemmas and I think we should also add the alg_hom, alg_equiv, ring_equiv, mul_equiv versions. However the file doesn't import the file where alg_hom is defined. I am wondering whether we can generalize to [monoid_hom_class] so we don't need to have multiple versions.</p>",
        "id": 287666346,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656386645
    },
    {
        "content": "<p>monoid_hom_class doesn't even cover the version <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.coe_pow\">docs#equiv.perm.coe_pow</a>. Maybe we should introduce an [endomorphism_class] which would extend <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like\">docs#fun_like</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid\">docs#monoid</a>, satisfying the conditions in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hom_coe_pow\">docs#hom_coe_pow</a>? Or should the monoid instance be defined in terms of the <code>fun_like F M (λ _, M)</code>? Notice all the coe_pow lemmas are proved by <code>hom_coe_pow _ rfl (λ f g, rfl) _ _</code> (the alg_equiv version can too!), so in practice the mul and one are always defeq to function composition and the identity function.</p>",
        "id": 287667161,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656387599
    }
]