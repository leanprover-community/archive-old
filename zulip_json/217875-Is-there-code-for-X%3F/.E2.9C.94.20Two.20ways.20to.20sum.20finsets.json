[
    {
        "content": "<p>Is there a way to fill in this sorry?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_convert</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x.val</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319482155,
        "sender_full_name": "Niels Voss",
        "timestamp": 1672870237
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_subtype\">docs#finset.sum_subtype</a></p>",
        "id": 319482209,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672870262
    },
    {
        "content": "<p>I'm surprised we don't have the one specifically about the case of a coerced finset (but with <code>coe</code> not <code>subtype.val</code> as in the question)</p>",
        "id": 319482453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672870373
    },
    {
        "content": "<p>Aha, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_coe_sort\">docs#finset.sum_coe_sort</a></p>",
        "id": 319482669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672870454
    },
    {
        "content": "<p>I don't know how you find these theorems so quickly<br>\nAnyways, here's the finished lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_convert</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x.val</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finset.sum_subtype</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319482747,
        "sender_full_name": "Niels Voss",
        "timestamp": 1672870490
    },
    {
        "content": "<p>Actually, finset.sum_coe_sort just solves the lemma directly</p>",
        "id": 319482848,
        "sender_full_name": "Niels Voss",
        "timestamp": 1672870551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> has marked this topic as resolved.</p>",
        "id": 319483018,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672870621
    },
    {
        "content": "<p>there's a running joke that <code>yael_search</code> is the fastest way you'll find any piece of mathlib code :P</p>",
        "id": 319483088,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1672870679
    },
    {
        "content": "<p>I have <a href=\"https://leanprover-community.github.io/mathlib_docs\">https://leanprover-community.github.io/mathlib_docs</a> open and I know the naming convention. Here your theorem involves <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a>, so it will be in the <code>finset</code> namespace. Then it is about <code>finset.sum</code> over a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a> or even more specifically over the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_sort\">docs#coe_sort</a> of a finset, so I typed <code>finsumsub</code> in the search bar on the top right without hitting enter, and it gave me <code>finset.sum_subtype</code>.</p>",
        "id": 319483154,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672870700
    },
    {
        "content": "<p>In that case I should have read the statement more closely before giving it to you, because I had forgotten about <code>finset.sum_coe_sort</code>.</p>",
        "id": 319483499,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672870873
    },
    {
        "content": "<p>See I didn't even realize that the left hand side of the statement involved a coercion until I thought to unfold it using tactics, then it took me over 2 minutes to read the type of the function</p>",
        "id": 319483692,
        "sender_full_name": "Niels Voss",
        "timestamp": 1672870936
    },
    {
        "content": "<blockquote>\n<p>See I didn't even realize that the left hand side of the statement involved a coercion</p>\n</blockquote>\n<p>Did you see the arrow in the goal view? All vertical arrows are coercions, no need to unfold until you see the letters <code>coe</code></p>",
        "id": 319483828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672871005
    },
    {
        "content": "<p>Well I think the goal view just displayed the ∑ notation, and I somehow didn't see the arrow next to the <code>s</code><br>\nCoercions are somewhat magical to me, just recently I had a coercion in a goal state and when I copied it to the code it broke</p>",
        "id": 319484122,
        "sender_full_name": "Niels Voss",
        "timestamp": 1672871120
    },
    {
        "content": "<p>That's not magic at all. That's Lean 3's pretty-printing not round-tripping. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 319484206,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672871159
    }
]