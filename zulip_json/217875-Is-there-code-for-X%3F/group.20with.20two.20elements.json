[
    {
        "content": "<p>Hi, do we have a canonical multiplicative group with 2 elements? Extra points for a group that works well with <code>@[to_additive]</code>.</p>",
        "id": 303712593,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1665605007
    },
    {
        "content": "<p>I mean, sort of by the by but does <code>multiplicative G</code> actually additivise properly?</p>",
        "id": 303713995,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665605511
    },
    {
        "content": "<p>Last time I checked, it didn't.</p>",
        "id": 303714185,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1665605576
    },
    {
        "content": "<p>But <code>@[to_additive]</code> becomes more powerful once in a while.</p>",
        "id": 303714232,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1665605595
    },
    {
        "content": "<p>I guess you could use the dihedral group of 1? Or maybe units of zmod 3</p>",
        "id": 303714675,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665605763
    },
    {
        "content": "<p>But none of those additivise well</p>",
        "id": 303714714,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665605777
    },
    {
        "content": "<p>Or <code>multiplicative (fin 2) = multiplicative (zmod 2)</code>.</p>",
        "id": 303714827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1665605840
    },
    {
        "content": "<p>I thought that option was ugly, but it will work better if to_additive is improved to use it</p>",
        "id": 303715173,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665605986
    },
    {
        "content": "<p>I can use any ugly option with local notation. Though I won't be able to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_fun</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 303715556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1665606136
    },
    {
        "content": "<p>There is <code>![_, _]</code> to write a function from <code>multiplicative (fin 2)</code> or <code>multiplicative (zmod 2)</code> (as you probably know).</p>",
        "id": 303716209,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665606408
    },
    {
        "content": "<p>When María Inés needed the multiplicative infinite cyclic group she just used <code>multiplicative int</code>.</p>",
        "id": 303716954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665606696
    },
    {
        "content": "<p>This won’t additivize well, but you could use <code>units int</code> (this is the return type of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.sign\">docs#equiv.perm.sign</a> for example)</p>",
        "id": 303718045,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665607139
    },
    {
        "content": "<p>Related, <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> asked me if there could be a way to simply designate one group as the <code>to_additive</code> of another.  I'm currently redoing Fourier theory on the additive circle (<a href=\"https://github.com/leanprover-community/mathlib/tree/fourier-add-circle\">branch#fourier-add-circle</a>) and it's nearly an exact copy of Fourier theory on the multiplicative circle.</p>",
        "id": 303718432,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665607311
    },
    {
        "content": "<p>I guess this would need some choice of isomorphism though, right? I don't think <code>to_additive</code> has any kind of support for that. I guess there's only one continuous one in this case, but lots of discontinuous ones. What exactly would you want this designation to do?</p>",
        "id": 303950623,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665712188
    }
]