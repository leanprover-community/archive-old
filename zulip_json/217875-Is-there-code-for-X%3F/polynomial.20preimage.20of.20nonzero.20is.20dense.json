[
    {
        "content": "<p>Hi y'all.<br>\nI was able to show the following for finite dimensional polynomials:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">poly_nonzero_dense</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dense</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">polynomial.eval</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This should also hold for multivariable polynomials:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mvpoly_nonzero_dense</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dense</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">mv_polynomial.eval</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this somewhere in mathlib? If not, does it seem plausible to  prove with the state of mathlib right now?<br>\nI'd be okay with having <code>[fintype σ]</code> floating around if it makes it easier.</p>",
        "id": 276513676,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648143634
    },
    {
        "content": "<p>If it's helpful, here are my imports and locale:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.ring_division</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.prod</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n</code></pre></div>",
        "id": 276514176,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648143838
    },
    {
        "content": "<p>The first one is true for general <code>0</code> and because the complement of your set is finite, right?</p>",
        "id": 276516289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648144695
    },
    {
        "content": "<p>What do you mean by general <code>0</code>?</p>",
        "id": 276517008,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648144955
    },
    {
        "content": "<p>Sorry <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">poly_nonzero_dense</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dense</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">polynomial.eval</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 276517138,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648145004
    },
    {
        "content": "<p>Or maybe you have to spell it <code>a • C</code>.</p>",
        "id": 276517268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648145051
    },
    {
        "content": "<p>Oh yeah, this is also true, but this should also be true for the <code>mv_poly</code> case, since you can subtract by <code>a</code> and get the same example</p>",
        "id": 276517446,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648145122
    },
    {
        "content": "<p>But it is true that the way I showed it for the single variable case was just using that it was a finite subset of ℝ</p>",
        "id": 276517524,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648145161
    },
    {
        "content": "<p>Or rather, complement of a finite subset of ℝ</p>",
        "id": 276517597,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648145176
    },
    {
        "content": "<p>Speaking of which, is there code for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">compl_finset_dense_in_R</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dense</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>?</p>",
        "id": 276517695,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648145233
    },
    {
        "content": "<p>I would call it <code>set.finite.dense_compl</code> (by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> and the correct generality of topological spaces), and that doesn't seem to exist. But I find that mildly surprising.</p>",
        "id": 276517950,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648145335
    },
    {
        "content": "<p>I have code for it. Is it worth PRing?<br>\nI did use the auxiliary lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.finite.min_diff</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&gt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 276518344,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648145492
    },
    {
        "content": "<p>If you have a greater generality, I would say yes. You can spell this auxiliary lemma using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pairwise\">docs#set.pairwise</a>.</p>",
        "id": 276518540,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648145570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/polynomial.20preimage.20of.20nonzero.20is.20dense/near/276517950\">said</a>:</p>\n<blockquote>\n<p>I would call it <code>set.finite.dense_compl</code> (by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> and the correct generality of topological spaces), and that doesn't seem to exist. But I find that mildly surprising.</p>\n</blockquote>\n<p>This isn't always true, though, right? You need something like connected maybe?</p>",
        "id": 276518644,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1648145617
    },
    {
        "content": "<p>I think the hypothesis for <code>set.finite.dense_compl</code> to be true for general <code>S</code> is that the space has no isolated points.</p>",
        "id": 276521522,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648146904
    },
    {
        "content": "<p>Oh, found it: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense.diff_finset\">docs#dense.diff_finset</a></p>",
        "id": 276521740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648146999
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_compl_singleton\">docs#dense_compl_singleton</a> does it for singleton sets without the t1 axiom.</p>",
        "id": 276522373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648147312
    },
    {
        "content": "<p>It seems like you need the t1 axiom for finsets in general since, if you're inducting on the cardinality of the finset, you need to take intersections of dense sets, and it suffices having complements of points being open.</p>",
        "id": 276523174,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648147666
    },
    {
        "content": "<p>It would probably be good to have the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_compl_singleton\">docs#dense_compl_singleton</a> version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense.diff_finset\">docs#dense.diff_finset</a> (maybe <code>dense_compl_finset</code>?)</p>",
        "id": 276523288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648147708
    }
]