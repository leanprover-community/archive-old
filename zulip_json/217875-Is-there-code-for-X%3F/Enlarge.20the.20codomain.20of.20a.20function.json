[
    {
        "content": "<p>Really basic question: I have <code>S U : set α</code>, <code>h : S ⊆ U</code>, and <code>f : X → ↥S</code>. Is there a <code>coextension</code> function such that <code>coextension f h U : X → ↥U</code> is <code>f</code> with codomain <code>U</code>?</p>\n<p>I tried to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but found nothing (other searches, like <code>#find (_ → _) → (_ ⊆ _)  → (_ → _)</code> resulted in “excessive memory consumption”).<br>\nMeta question: How do I look for things like this without bothering you??</p>",
        "id": 319687635,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1672959237
    },
    {
        "content": "<p>You could try something like <code>inclusion h \\circ f</code>.</p>",
        "id": 319689558,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1672960031
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inclusion\">docs#set.inclusion</a></p>",
        "id": 319689594,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1672960043
    },
    {
        "content": "<p>At least in my opinion Lean is a hard language to learn, and asking questions should be encouraged - it certainly helped me a lot when I was learning!</p>",
        "id": 319689724,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1672960096
    },
    {
        "content": "<p>One way to find functions that you might not know about is <code>library_search</code>. If you write a (precise enough) function signature, lean can try to search for a function that it knows about to basically fill in that function in any way it knows. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">set.inclusion</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You might have seen this in the context of writing proofs, where <code>library_search</code> gives a proof that's already in mathlib, but there's no real difference between proofs and other terms in Lean, so <code>library_search</code> can help you with both. Of course, it doesn't know what you're actually trying to do, so <code>library_search</code> won't always give you the correct answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- Try this: exact n</span>\n</code></pre></div>",
        "id": 319690465,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1672960439
    }
]