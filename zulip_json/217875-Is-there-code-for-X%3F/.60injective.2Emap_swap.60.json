[
    {
        "content": "<p>Do we have something like the following result? The closest I could find was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.comp_swap_eq_update\">docs#equiv.comp_swap_eq_update</a>, and <code>library_search</code> does not help.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">function.injective.map_swap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm.swap</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.perm.swap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">swap_apply_def</span> <span class=\"o\">},</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">swap_apply_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">swap_apply_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">swap_apply_of_ne_of_ne</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">h₂</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231831633,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616689303
    },
    {
        "content": "<p>Can you just upgrade the <code>f</code> into an equiv, and use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.comp_swap_eq_update\">docs#equiv.comp_swap_eq_update</a>?</p>",
        "id": 231838502,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616691729
    },
    {
        "content": "<p><code>comp_swap_eq_update</code> does not need <code>f</code> to be an equiv</p>",
        "id": 231840005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616692228
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.update_comp_eq_of_injective\">docs#function.update_comp_eq_of_injective</a> also came to mind, but I can't work out how to apply it here</p>",
        "id": 231840856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616692532
    }
]