[
    {
        "content": "<p>I am not finding the first isomorphism theorem for rings... is it somewhere? I am asking because I would be surprised if it weren't there, but in that case I can prove it without problems.</p>",
        "id": 225897175,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612986656
    },
    {
        "content": "<p>For rings or commutative rings?</p>",
        "id": 225897532,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612986846
    },
    {
        "content": "<p>Sorry, commutative rings</p>",
        "id": 225897566,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612986867
    },
    {
        "content": "<p>I think it should be there for <code>comm_rings</code>.</p>",
        "id": 225897624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612986896
    },
    {
        "content": "<p>I am not finding it in <code>ring_theory/ideal/basic</code> nor in <code>ring_theory/ideal/operations</code>. If you think it can be somewhere else I can look for it</p>",
        "id": 225897923,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612987034
    },
    {
        "content": "<p>We have this: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.quotient.mkₐ_ker\">docs#ideal.quotient.mkₐ_ker</a></p>",
        "id": 225897933,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612987039
    },
    {
        "content": "<p>I wrote it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>  But that is the point, I want a generic surjective map, not the natural map to the quotient</p>",
        "id": 225898030,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612987090
    },
    {
        "content": "<p>Oh.</p>",
        "id": 225898075,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612987114
    },
    {
        "content": "<p>Well, it should be easy enough to patch together what's already there, but yeah I don't see the precise statement.</p>",
        "id": 225898103,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612987130
    },
    {
        "content": "<p>Sure, I will do it</p>",
        "id": 225898315,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612987234
    },
    {
        "content": "<p>Hmm.... looks like we don't have the lemma that modding out by the kernel gives an injective morphism.</p>",
        "id": 225899265,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612987622
    },
    {
        "content": "<p>We have <code>ring_hom.lift_of_surjective</code>, so it should be OK</p>",
        "id": 225900113,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612987975
    },
    {
        "content": "<p>Here's the quick sketch I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.ker.quotient</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient.lift</span> <span class=\"n\">f.ker</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">f.mem_ker.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n<span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ring_hom.injective_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ideal.quotient.mk_surjective</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ideal.quotient.lift_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ring_hom.mem_ker</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">ideal.quotient.eq_zero_iff_mem</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">cond</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225900363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612988088
    },
    {
        "content": "<p>The first proof there is injectivity, and I think it should probably be a separate lemma, analogous to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.ker_lift_injective\">docs#quotient_group.ker_lift_injective</a></p>",
        "id": 225900441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612988125
    },
    {
        "content": "<p>Ah yes, following what is done for groups is probably the best idea</p>",
        "id": 225900668,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612988233
    },
    {
        "content": "<p>This <code>mk_surjective</code> name seems to conflict with things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exists_rep\">docs#quotient.exists_rep</a></p>",
        "id": 225900951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612988355
    },
    {
        "content": "<p>remark: the name <code>surjective</code> should be in the lemma iff the lemma statement actually uses <code>function.surjective</code></p>",
        "id": 225901231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612988474
    },
    {
        "content": "<p>not sure if that addresses <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>'s point</p>",
        "id": 225901302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612988508
    },
    {
        "content": "<p>Yeah, it does.</p>",
        "id": 225901325,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612988518
    },
    {
        "content": "<p>But since I'm used to <code>quotient.exists_rep</code>, I tried using <code>ideal.quotient.exists_rep</code> which doesn't exist, and had to go searching for something else.</p>",
        "id": 225901449,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612988559
    },
    {
        "content": "<p>That might be useful as a lemma as well, but the lemma name is more about how the theorem is concretely presented and not so much about what it abstractly means</p>",
        "id": 225901581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612988614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Are you doing it? If not don't worry, I can do it... if yes it would also be useful (to me...) to have the version for algebras.</p>",
        "id": 225901778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612988688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> please go ahead, I don't have much time for cleaning up this code and/or any PR today.</p>",
        "id": 225902217,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612988865
    },
    {
        "content": "<p>Feel free to use the code above if you want.</p>",
        "id": 225902257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612988879
    },
    {
        "content": "<p>Here's a version of this in the noncommutative case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring_quot</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">ring_quot</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">ring_quot.lift</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">f.map_sub</span><span class=\"o\">}⟩)</span>\n<span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ring_quot.mk_ring_hom_surjective</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ring_quot.mk_ring_hom_surjective</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_quot.lift_mk_ring_hom_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">sub_eq_zero_of_eq</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">f.map_sub</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_quot.mk_ring_hom</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">quot.sound</span> <span class=\"o\">(</span><span class=\"n\">ring_quot.rel.of</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">cond</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ring_quot.mk_ring_hom</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225906318,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612990542
    },
    {
        "content": "<p>But for this it probably makes sense to wait until we have two-sided ideals.</p>",
        "id": 225906452,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612990583
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6166\">#6166</a></p>",
        "id": 225928638,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612999960
    },
    {
        "content": "<p>Working with algebras I noticed that if <code>f : A →ₐ[R] B</code> then we cannot write <code>f.ker</code>, but we have to use <code>f.to_ring_hom.ker</code>. I do not see any reason to avoid <code>f.ker</code> for algebra morphisms, defined as <code>f.to_ring_hom.ker</code>: if everybody agrees I can do this modification.</p>",
        "id": 225930062,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613000800
    },
    {
        "content": "<p>If you add <code>alg_hom.ker</code>, then you will probably also need to either:</p>\n<ul>\n<li>Add a simp lemma converting <code>x.ker</code> to <code>x.to_ring_hom.ker</code></li>\n<li>Copy across every single lemma about <code>ring_hom.ker</code> to <code>alg_hom</code> (thankfully the proofs can just be <code>:= the_ring_hom_lemma</code>)</li>\n</ul>",
        "id": 225932149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613002105
    },
    {
        "content": "<p>Mmh, you're right, rewriting all the lemmas is a little annoying... especially since a quick <code>grep</code> gives just three occurrences for <code>to_ring_hom.ker</code> (and probably all written by myself...)</p>",
        "id": 225933076,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613002869
    },
    {
        "content": "<p>This is part of my secret plan to remove <code>comm_ring</code> from mathlib and to get it replaced by <code>algebra</code> <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 225933381,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613003116
    },
    {
        "content": "<p>Just joking of course, even if  I really think one should try to work with algebras rather than rings if possible, but this is just my algebraic geometry oriented opinion.</p>",
        "id": 225933515,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613003211
    },
    {
        "content": "<p><code>algebra</code> or <code>comm_algebra</code>?</p>",
        "id": 225953940,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1613026133
    }
]