[
    {
        "content": "<p>Do we have either of these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- I couldn't find this in mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">alg_hom.eq_of_id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.of_id</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">alg_hom.ext</span> <span class=\"bp\">$</span> <span class=\"n\">f.commutes</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">subsingleton.intro</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.eq_of_id</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.eq_of_id</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 289348930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657642538
    },
    {
        "content": "<p>Or maybe <code>unique</code> instead of <code>subsingleton</code></p>",
        "id": 289349385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657642734
    },
    {
        "content": "<p>Probably if we have this it's not an instance because adding <code>subsingleton</code> instances is basically forbidden at this point</p>",
        "id": 289349442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657642761
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_hom.subsingleton\">docs#alg_hom.subsingleton</a> not an instance for performance reasons ...</p>",
        "id": 289349474,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657642782
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">alg_hom.subsingleton</span>\n<span class=\"kd\">instance</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 289349593,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657642821
    },
    {
        "content": "<p>In our application we need <code>eq_of_id</code> rather than the subsingleton instance. This is for proving that the identity morphism is formally smooth.</p>",
        "id": 289349696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657642877
    },
    {
        "content": "<p>Is someone working on formally smooth morphisms? I just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/15242\">#15242</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/15243\">#15243</a>.</p>",
        "id": 289350251,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657643112
    },
    {
        "content": "<p>I could close them though. I don't need the results for now.</p>",
        "id": 289350272,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657643122
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib/pull/15244\">#15244</a> is also related.</p>",
        "id": 289350578,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657643250
    },
    {
        "content": "<p>There's a conference going on this week and I got chatting to <span class=\"user-mention\" data-user-id=\"267278\">@Judith Ludwig</span> and <span class=\"user-mention\" data-user-id=\"513555\">@Jackie Lang</span> about making these definitions and proving a basic API for them.</p>",
        "id": 289350837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657643352
    },
    {
        "content": "<p>Oh wow what an interesting coincidence! No we're just experimenting.</p>",
        "id": 289350993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657643417
    }
]