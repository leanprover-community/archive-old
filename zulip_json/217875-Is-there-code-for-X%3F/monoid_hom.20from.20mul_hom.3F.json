[
    {
        "content": "<p>Do we have the constructor that promotes a mul_hom to a monoid_hom when the source and target are groups?</p>",
        "id": 278548870,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649681733
    },
    {
        "content": "<p>(I guess the source only needs to be a monoid?)</p>",
        "id": 278548887,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649681743
    },
    {
        "content": "<p>I would expect it to be called <code>mul_hom.to_monoid_hom</code>, so it seems like we don't. However, we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_mul_hom.to_is_monoid_hom\">docs#is_mul_hom.to_is_monoid_hom</a></p>",
        "id": 278549005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649681800
    },
    {
        "content": "<p>In the olden days we had <code>is_mul_hom.to_is_monoid_hom</code> for this.</p>",
        "id": 278549006,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649681800
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.mk'\">docs#monoid_hom.mk'</a>?</p>",
        "id": 278549688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649682094
    },
    {
        "content": "<p>Can <code>fun_like</code>do this automatically, BTW?</p>",
        "id": 278549794,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649682130
    },
    {
        "content": "<p>Not until Lean 4, because typeclass loop.</p>",
        "id": 278549826,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649682147
    },
    {
        "content": "<p>Not quite a single argument, but <code>monoid_hom.mk' f f.map_mul</code> probably works.</p>",
        "id": 278549831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649682152
    },
    {
        "content": "<p>I'm not convinced we want this to happen automatically anyway</p>",
        "id": 278549877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649682180
    },
    {
        "content": "<p>I believe we should change <code>monoid_hom.mk'</code> to use <code>mul_hom</code></p>",
        "id": 278549883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649682184
    },
    {
        "content": "<p>We do, Eric, we do.</p>",
        "id": 278549904,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649682192
    },
    {
        "content": "<p>Typically, for stuff like <a href=\"https://github.com/leanprover-community/mathlib/tree/GroupWithZero_equiv_Group\">branch#GroupWithZero_equiv_Group</a></p>",
        "id": 278549959,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649682226
    },
    {
        "content": "<p>Does whether it's \"automatic\" or explicit really make much difference there?</p>",
        "id": 278550072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649682288
    },
    {
        "content": "<p>Eh, I guess not</p>",
        "id": 278550208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649682356
    },
    {
        "content": "<p>Automatic is best for things that are unambiguous, unsurprising, and frequent</p>",
        "id": 278550427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649682458
    }
]