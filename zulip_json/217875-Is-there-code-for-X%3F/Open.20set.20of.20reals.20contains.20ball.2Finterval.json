[
    {
        "content": "<p>I'm struggling to find something of this form, though I'm sure it's there somewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ordered</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS₁</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234679176,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618494889
    },
    {
        "content": "<p><del>Presumably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_basis_ball\">docs#nhds_basis_ball</a> ?</del> <span aria-label=\"down\" class=\"emoji emoji-2b07\" role=\"img\" title=\"down\">:down:</span></p>",
        "id": 234679948,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618495130
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.is_open_iff\">docs#metric.is_open_iff</a> ?</p>",
        "id": 234680009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618495148
    },
    {
        "content": "<p>(or go via neighbourhood filters)</p>",
        "id": 234680230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618495208
    },
    {
        "content": "<p>Now I have a goal of the form <code>Icc (x - ε / 2) (x + ε / 2) ⊆ metric.ball x ε</code></p>",
        "id": 234680548,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495298
    },
    {
        "content": "<p><code>linarith</code> is your friend now</p>",
        "id": 234680715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618495338
    },
    {
        "content": "<p>It can't seem to handle the <code>dist</code></p>",
        "id": 234680829,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495377
    },
    {
        "content": "<p>oh I think it's defeq to abs so maybe you need to unfold abs?</p>",
        "id": 234680920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618495397
    },
    {
        "content": "<p><code>rw real.dist_eq</code> did that, but now linarith can't handle the abs</p>",
        "id": 234681066,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495440
    },
    {
        "content": "<p>Alright here's what I ended up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS₁</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric.is_open_iff</span> <span class=\"n\">at</span> <span class=\"n\">hS₁</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε₁</span><span class=\"o\">,</span> <span class=\"n\">hε₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hS₁</span> <span class=\"n\">x</span> <span class=\"n\">hS₂</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">half_pos</span> <span class=\"n\">hε₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.subset.trans</span> <span class=\"n\">_</span> <span class=\"n\">hε₂</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real.dist_eq</span><span class=\"o\">,</span> <span class=\"n\">abs_sub_lt_iff</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">metric.mem_ball</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234681270,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495495
    },
    {
        "content": "<p>That's surprisingly long for an \"obvious\" statement</p>",
        "id": 234681286,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495503
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS₁</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric.is_open_iff</span> <span class=\"n\">at</span> <span class=\"n\">hS₁</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε₁</span><span class=\"o\">,</span> <span class=\"n\">hε₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hS₁</span> <span class=\"n\">x</span> <span class=\"n\">hS₂</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">half_pos</span> <span class=\"n\">hε₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">closed_ball_Icc</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.subset.trans</span> <span class=\"o\">(</span><span class=\"n\">metric.closed_ball_subset_ball</span> <span class=\"o\">(</span><span class=\"n\">half_lt_self</span> <span class=\"n\">hε₁</span><span class=\"o\">))</span> <span class=\"n\">hε₂</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Golfed a bit to this</p>",
        "id": 234681632,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495609
    },
    {
        "content": "<p>I think we've missed some library function. I think I've struggled to find this before.</p>",
        "id": 234681771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618495667
    },
    {
        "content": "<p><code>closed_ball_Icc</code> made it a bit nicer at least</p>",
        "id": 234681935,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495707
    },
    {
        "content": "<p>Would <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.closed_ball_subset_ball\">docs#metric.closed_ball_subset_ball</a> help you ?</p>",
        "id": 234682130,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1618495775
    },
    {
        "content": "<p>That's what I used in the golfed version, it did help!</p>",
        "id": 234682163,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495785
    },
    {
        "content": "<p>It's working in my actual case too now - thanks everyone! It was <code>closed_ball_Icc</code> together with <code>metric.is_open_iff</code> that were the things I couldn't find</p>",
        "id": 234682334,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618495832
    },
    {
        "content": "<p>Oh indeed, I should have read it with more attention <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234682394,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1618495853
    },
    {
        "content": "<p>Maybe the interval thing can also be simplified with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">mem_nhds_sets</span> <span class=\"n\">hS₁</span> <span class=\"n\">hS₂</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">mem_nhds_iff_exists_Ioo_subset.mp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 234683012,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618496064
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ordered</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS₁</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε₁</span><span class=\"o\">,</span> <span class=\"n\">hε₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">metric.nhds_basis_closed_ball</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"n\">is_open_iff_mem_nhds.1</span> <span class=\"n\">hS₁</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">hS₂</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε₁</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">closed_ball_Icc</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"bp\">▸</span> <span class=\"n\">hε₂</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 234684551,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1618496577
    },
    {
        "content": "<p>Ahh this is great Shing, thanks so much!</p>",
        "id": 234685204,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618496790
    },
    {
        "content": "<p>Do we still not have a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.is_open_iff\">docs#metric.is_open_iff</a> for <code>closed_ball</code>?</p>",
        "id": 305239415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666300542
    },
    {
        "content": "<p>it's easy to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">yael</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">metric.closed_ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_open_iff_mem_nhds</span><span class=\"o\">,</span> <span class=\"n\">metric.nhds_basis_closed_ball.mem_iff</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>essentially the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.is_open_iff\">docs#metric.is_open_iff</a></p>",
        "id": 305243536,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666302386
    },
    {
        "content": "<p>So I assume the answer is \"no\" <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 305243618,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666302454
    },
    {
        "content": "<p>We have it but in greater generality, by saying that closed balls form a basis of the neighborhoods of a point, and then you deduce whatever you like from general properties of bases.</p>",
        "id": 305297697,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1666338884
    }
]