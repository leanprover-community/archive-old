[
    {
        "content": "<p>Is there a better way of doing the following? Should it be in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">int.sign_trichotomy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.sign</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a.sign</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a.sign</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">int.cases_on</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat.cases_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 314125490,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670274764
    },
    {
        "content": "<p>Yes: Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sign_type\">docs#sign_type</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.sign\">docs#int.sign</a>.</p>",
        "id": 314126365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670275105
    },
    {
        "content": "<p>But <code>a.sign</code> does not live in <code>sign_type</code>. What I have is an integer, whose sign I'm conisdering, and <code>a.sign</code> is an integer.</p>",
        "id": 314126540,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670275176
    },
    {
        "content": "<p>I think Yaël is suggesting to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sign\">docs#sign</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.sign\">docs#int.sign</a></p>",
        "id": 314126869,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1670275307
    },
    {
        "content": "<p>But I also need that <code>a</code> is its sign multiplied by <code>a.nat_abs</code>. I don't think I can get this easily via <code>sign</code>.</p>",
        "id": 314127056,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670275373
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.sign_eq_sign\">docs#int.sign_eq_sign</a></p>",
        "id": 314127108,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1670275386
    },
    {
        "content": "<p>Right now, I'm doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">int.sign_trichotomy</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">h₀</span> <span class=\"bp\">|</span> <span class=\"n\">hpos</span> <span class=\"bp\">|</span> <span class=\"n\">hneg</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>and deal with the three cases (which involve showing that some expression involving <code>a.sign</code> equals <code>1</code>). How would I do this using <code>sign</code>instead?</p>",
        "id": 314127800,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670275640
    },
    {
        "content": "<p>OK, I guess it's something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"n\">int.sign_eq_sign</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">sign</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Still, having <code>int.sign_trichotomy</code> seems to make for a shorter proof...<br>\n(For example, to rewrite, I need to coerce explicitly back to an integer.)</p>",
        "id": 314129030,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670276065
    },
    {
        "content": "<p>the whole idea of <code>sign_type</code> is that it spends most of its life coerced and the API should work pretty smoothly with that</p>",
        "id": 314129561,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1670276310
    },
    {
        "content": "<p><code>sign_trichotomy</code> should just be something like <code>cases (sign a)</code></p>",
        "id": 314129604,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1670276328
    },
    {
        "content": "<p>I forgot how but there's some explicit syntax for doing <code>cases</code> on non-trivial terms, <code>induction h : sign z</code> works but seems weird to someone not used to Lean</p>",
        "id": 314129889,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1670276450
    },
    {
        "content": "<p>(also, this pretty prints as below - how can we make it preferrably use numerals instead of constructors?)</p>\n<p><a href=\"/user_uploads/3121/GgBqmAi-FQM_pIHu_Mr_R2CI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GgBqmAi-FQM_pIHu_Mr_R2CI/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/GgBqmAi-FQM_pIHu_Mr_R2CI/image.png\"></a></div>",
        "id": 314130118,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1670276531
    },
    {
        "content": "<blockquote>\n<p>how can we make it preferrably use numerals instead of constructors</p>\n</blockquote>\n<p>By defining a custom recursor instead of using the builtin one, but then you can't use <code>cases</code></p>",
        "id": 314141595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670281258
    },
    {
        "content": "<p>Yeah, I wanted to remove <code>int.sign</code> entirely but it's used in core.</p>",
        "id": 314158031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670291166
    },
    {
        "content": "<p>Used in C++ code in core, or used in lemmas in core that could themselves move to mathlib? I think we should remove both <code>int.sign</code> and <code>real.sign</code> after adding versions of their lemmas that apply to the generic <code>sign</code> and <code>sign_type</code>. (But I don't know what the std4 maintainers think - that's where <code>int.sign</code> is now for Lean 4.) <code>real.sign</code> should be easy to remove since the only import of <code>data.real.sign</code> is <code>linear_algebra.quadratic_form.real</code>, which is a leaf file.</p>",
        "id": 314164645,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1670297510
    }
]