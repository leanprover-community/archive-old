[
    {
        "content": "<p>Is this instance missing from mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 208219520,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598536549
    },
    {
        "content": "<p>Should it even be an instance?</p>",
        "id": 208220909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598537166
    },
    {
        "content": "<p>isn't it also a bit more tricky to define than one would think</p>",
        "id": 208222108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598537729
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 208222738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598537998
    },
    {
        "content": "<p>Or maybe this is better:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 208222926,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598538062
    },
    {
        "content": "<p>Well... looking around zulip, it seems that this would cause <code>out_param</code> issues :(</p>",
        "id": 208234338,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598542607
    },
    {
        "content": "<p>But I think this might be safe: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">mult_subgroup</span> <span class=\"o\">:=</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mult_subgroup</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">mult_subgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">mult_subgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">mult_subgroup</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  Can you confirm?</p>",
        "id": 208234787,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598542774
    },
    {
        "content": "<p>I think the <code>mult_subgroup</code> is going to obscure the underlying <code>subgroup</code>, meaning that you need a whole bunch of duplicate api</p>",
        "id": 208267346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598557978
    },
    {
        "content": "<p>I agree. What about the <code>out_param</code> thing?</p>",
        "id": 208267773,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598558195
    },
    {
        "content": "<p>Is there any safe way to define/write <code>a \\in H</code> where <code>a : A</code> and <code>H : subgroup (units A)</code>?</p>",
        "id": 208267878,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598558260
    }
]