[
    {
        "content": "<p>No one has <code>finset.sup'</code> (for nonempty finsets, but only requiring <code>semilattice_sup</code> rather than <code>semilattice_sup_bot</code>) up their sleeves, do they? It seems like an obvious omission, but I'm not so keen to go fill it in right now. :-)</p>",
        "id": 234105824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618205970
    },
    {
        "content": "<p>There's a recent open PR for this</p>",
        "id": 234106076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618206226
    },
    {
        "content": "<p>I better go review it! :-)</p>",
        "id": 234106128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618206257
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7087\">#7087</a></p>",
        "id": 234106187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618206303
    },
    {
        "content": "<p>It already looks in great shape. (Thanks, <span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span>, for having exactly what I wanted ready. :-)</p>",
        "id": 234106523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618206591
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 234106635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618206675
    },
    {
        "content": "<p>That PR raises an omission in our naming guide, with <code>finset.of_sup_of_forall</code> - how should lemmas be named when their conclusion is <code>p (f x)</code>, where <code>p</code> is an argument passed to the lemma?</p>",
        "id": 234108090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618207913
    },
    {
        "content": "<p>That theorem actually looks like an induction principle. I would call it <code>sup_induction</code> or something like that</p>",
        "id": 234110166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618209554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span>, I'm finding I need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">lt_sup'_iff</span> <span class=\"o\">[</span><span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Any chance you want to do the <code>le</code> version, and the <code>inf'</code> analogues?</p>",
        "id": 234126336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618218533
    },
    {
        "content": "<p>I have a terrible proof of the above...</p>",
        "id": 234126373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618218548
    },
    {
        "content": "<p>How do you feel about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_of_mem</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.sup</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset.sup'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">option.get</span> <span class=\"bp\">$</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"n\">option.is_some_iff_exists.2</span> <span class=\"o\">(</span><span class=\"n\">sup_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sup'_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sup'_le_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">not_lt'</span> <span class=\"o\">[</span><span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">total_of</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h1.lt_or_eq.resolve_left</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">total_of</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_le</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">lt_sup'_iff</span> <span class=\"o\">[</span><span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">not_congr</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt'</span><span class=\"o\">,</span> <span class=\"n\">sup'_le_iff</span> <span class=\"n\">H</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234130503,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618220737
    },
    {
        "content": "<p>Why doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_lt\">docs#not_lt</a> work for you there? Do we have examples where <code>[is_total α (≤)]</code> but not <code>[linear_order α]</code>?</p>",
        "id": 234131149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618221041
    },
    {
        "content": "<p><code>not_lt'</code> golfs slightly to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">not_lt'</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">not_lt</span> <span class=\"n\">_</span> <span class=\"o\">{</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"n\">is_total.total</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">classical.dec_rel</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"n\">classical.dec_eq</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_lt</span> <span class=\"o\">:=</span> <span class=\"n\">classical.dec_rel</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 234132043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618221486
    },
    {
        "content": "<p>But this feels silly, because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 234132172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618221568
    },
    {
        "content": "<p>So I think <code>is_total</code> is probably a wrong turn in <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s requested statement</p>",
        "id": 234132262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618221612
    },
    {
        "content": "<p>It's nicer with <code>linear_order</code>, definitely.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">lt_sup'_iff</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">sup'_le_iff</span> <span class=\"n\">H</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Even better if <code>contrapose</code> handled iffs</p>",
        "id": 234134135,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618222641
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, that's nice! I can roll this, and the variations, into an upcoming PR, unless you feel like getting to them first!</p>",
        "id": 234140609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618226272
    },
    {
        "content": "<p>No, go for it</p>",
        "id": 234141017,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618226507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.2Esup'/near/234131149\">said</a>:</p>\n<blockquote>\n<p>Why doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_lt\">docs#not_lt</a> work for you there? Do we have examples where <code>[is_total α (≤)]</code> but not <code>[linear_order α]</code>?</p>\n</blockquote>\n<p>I don't know if we have examples in mathlib yet but it's not hard to come up with examples in maths - Peter mentioned one a couple of days ago: consider the order given by <code>inv_image</code> where the target is a linear order, then the new order is a total preorder but it's not antisymmetric</p>",
        "id": 234142566,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618227378
    },
    {
        "content": "<p>In the example above there was already a <code>[semilattice_sup α]</code> assumption - but I see I didn't make it clear in that question</p>",
        "id": 234149469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618231022
    },
    {
        "content": "<p>Following the pattern in the rest of the file, one would first prove that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt_sup_iff</span> <span class=\"o\">[</span><span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(It should be in there anyway for completeness.) Then it's pretty straightforward to do a version for <code>sup'</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt_sup'_iff</span> <span class=\"o\">[</span><span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">with_bot.coe_lt_coe</span><span class=\"o\">,</span> <span class=\"n\">coe_sup'</span><span class=\"o\">,</span> <span class=\"n\">lt_sup_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bex_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">with_bot.coe_lt_coe</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234176904,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1618240327
    },
    {
        "content": "<p>There was some reason why I had to go down the <code>is_total</code> route rather than <code>linear_order</code> but I can't remember right now</p>",
        "id": 234177128,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1618240426
    },
    {
        "content": "<p>I would probably have proved <code>lt_sup_iff</code> by induction like so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt_sup_iff</span> <span class=\"o\">[</span><span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">finset.cons_induction</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"n\">hb</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">not_lt_bot</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup_cons</span><span class=\"o\">,</span> <span class=\"n\">_root_.lt_sup_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mem_cons.2</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hlt</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">mem_cons.2</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">hc</span><span class=\"o\">),</span> <span class=\"n\">hlt</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hlt</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hlt</span> <span class=\"o\">(</span><span class=\"n\">le_sup</span> <span class=\"n\">hb</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But maybe Ruben's proof points to a better way... let me check.</p>",
        "id": 234178608,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1618240885
    },
    {
        "content": "<p>You probably went down the <code>is_total</code> route because <code>[linear_order α] [semilattice_sup α]</code> introduced two different <code>has_le</code>s</p>",
        "id": 234188522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618244634
    },
    {
        "content": "<p>But <code>[linear_order α]</code> by itself induces a <code>semilattice_sup α</code> anyway, so there's no need for both</p>",
        "id": 234188690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618244706
    },
    {
        "content": "<p>I've made a branch for this. Based on Ruben's proof although it turns out there is such a thing as <code>as_linear_order</code> which makes it considerably shorter. <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> or <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> would either of you like to make changes and/or a PR? I suppose Scott will be asleep atm.</p>",
        "id": 234193054,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1618246434
    },
    {
        "content": "<p>Oops <a href=\"https://github.com/leanprover-community/mathlib/tree/lt_sup_iff\">https://github.com/leanprover-community/mathlib/tree/lt_sup_iff</a></p>",
        "id": 234193160,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1618246465
    },
    {
        "content": "<blockquote>\n<p>You probably went down the <code>is_total route</code> because...</p>\n</blockquote>\n<p>Maybe something about having <code>bot</code>? I'll check later</p>",
        "id": 234193483,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1618246582
    },
    {
        "content": "<p>I'd missed that your last PR already added the <code>is_total</code> arguments  - I'll play with removing them</p>",
        "id": 234193760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618246696
    },
    {
        "content": "<p>Do we have those arguments on lemmas about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max'\">docs#finset.max'</a>?</p>",
        "id": 234193792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618246712
    },
    {
        "content": "<p>Oh you're right, <code>bot</code> is indeed the issue</p>",
        "id": 234194785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618247059
    },
    {
        "content": "<p>Which was needed for <code>sup</code>, but not <code>sup'</code></p>",
        "id": 234195008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618247154
    },
    {
        "content": "<p>But <code>sup</code> is still a mess for similar reasons. Perhaps we should have a <code>linear_order_bot</code> and <code>linear_order_top</code> class, to sit between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order\">docs#linear_order</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_linear_order\">docs#complete_linear_order</a>?</p>",
        "id": 234195828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618247504
    },
    {
        "content": "<p>When I was a lad back in 2017, there was just lattice, semilattice_sup_bot, semilattice_inf_top, conditionally_complete_lattice, and then complete_lattice. Then people wanted semilattice_sup_top and semilattice_inf_bot, and now we're getting variants with total orders. Similarly we now seem to have monoids with 0, add_monoids with 1 and so on. My impression is that given any subset of the set of all notation coming up in the topological hierarchy, sooner or later someone will want an object which has all of the subset but nothing else, because their favourite mathematical object has precisely this subset but not the rest. The same is happening in the algebraic heirarchy -- all this distrib_mul_action stuff is what you get with + and * but no 0 or 1, for example, with added heterogeneous issues thrown in. People seem really reluctant to pull off everything into pieces, because then complete_lattice would extend has_bot, has_top, has_sup, has_Sup, has_inf, has_Inf and then there would be a gazillion Props on top. But my impression is that this is somehow the way we're moving. Is there some more principled way of doing this stuff rather than just inventing 2^N new typeclasses?</p>",
        "id": 234208775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618252595
    },
    {
        "content": "<p>I believe that the defs in core around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_total/src\">src#is_total</a> was an attempt at such a principled approach - there seems to be an <code>@[algebra]</code> attribute for some feature that I can only assume never materialized.</p>",
        "id": 234227340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618260319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  So should we regard <code>is_total</code> as a great thing or as an outdated piece of junk? You don't seem to approve of it but for example a version of <code>exists_mem_eq_sup</code> written for <code>[semilattice_sup_bot α] [is_total α (≤)]</code> instead of <code>[complete_linear_order  α ]</code> would resolve the problem with <code>ℕ</code> that cropped up in this thread <a href=\"#narrow/stream/113489-new-members/topic/strict.20instance.20requirement\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/strict.20instance.20requirement</a>.</p>",
        "id": 234279850,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1618298392
    },
    {
        "content": "<p>I'm no longer sure</p>",
        "id": 234280025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618298480
    },
    {
        "content": "<p>It's useful when working with general relations that aren't the le on the type</p>",
        "id": 234280173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618298580
    },
    {
        "content": "<p>If <code>is_total (\\le)</code> is a good thing, then we should change as many lemmas as possible to use it instead of linear_order</p>",
        "id": 234280216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618298612
    },
    {
        "content": "<p>A total semilattice is a lattice</p>",
        "id": 234280320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618298676
    },
    {
        "content": "<p>in fact it is a linear order</p>",
        "id": 234280331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618298693
    },
    {
        "content": "<p>Maybe we need <code>linear_order_bot</code>?</p>",
        "id": 234280430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618298757
    },
    {
        "content": "<p>Either we need that, or we need to switch to using is_total as a mixing for totality</p>",
        "id": 234280495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618298779
    },
    {
        "content": "<p>how many theorems need this combo?</p>",
        "id": 234280543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618298817
    },
    {
        "content": "<p>Currently we're in a middle ground where we have to switch between the two and end up reproving things like <code>not_lt_iff</code> as happened up thread</p>",
        "id": 234280549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618298820
    },
    {
        "content": "<p>I think I found 2 within finset.lattice, and another two for the top version</p>",
        "id": 234280587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618298845
    },
    {
        "content": "<p>if it's only those then I guess the <code>is_total</code> mixin is fine</p>",
        "id": 234280635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618298875
    },
    {
        "content": "<p>I haven't searched mathlib-wide</p>",
        "id": 234280706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618298899
    },
    {
        "content": "<p>That's okay, you can just convert lemmas when you find them / need them</p>",
        "id": 234280750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618298924
    },
    {
        "content": "<p>Looking <code>is_total</code> up is more expensive since it's two typeclass searches with one dependent on the other, so I don't think we want to use too many mixins</p>",
        "id": 234280846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618298990
    },
    {
        "content": "<p>Doesn't the dependency make it less expensive?</p>",
        "id": 234282458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618299892
    }
]