[
    {
        "content": "<p>Beginner question.  I'm working through a functional programming book I like and trying to learn by converting haskell and scala code to lean.  I'm trying to reason about function composition.  In haskell you can write functions g and f and compose them as follows.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span>\n<span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span>\n<span class=\"n\">g</span> <span class=\"bp\">.</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>In haskell, you can write as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">val</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span>\n<span class=\"n\">val</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C</span>\n<span class=\"n\">g</span> <span class=\"n\">compose</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I know in Lean there is a <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Function.comp\">composition shorthand</a> g ∘ f .  But is there a way of naming a function and it's type (A-&gt;B) without providing a function body in lean?  Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>But this code isn't valid because the first two lines need a \":=\" and a function body.</p>",
        "id": 301133954,
        "sender_full_name": "Robert Osazuwa Ness",
        "timestamp": 1664320858
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>work?</p>",
        "id": 301136272,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664322633
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  that helps!</p>",
        "id": 301148071,
        "sender_full_name": "Robert Osazuwa Ness",
        "timestamp": 1664331387
    },
    {
        "content": "<p>might be worth noting that one other way to do this is to simply declare the functions as constants, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">constant</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 301152181,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664334638
    },
    {
        "content": "<p>on second thought, that's probably the wrong way to go about it... it looks like <code>#check g ∘ f</code> has metavariables rather than the expected types</p>",
        "id": 301152339,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664334832
    }
]