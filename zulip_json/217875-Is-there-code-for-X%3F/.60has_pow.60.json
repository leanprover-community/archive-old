[
    {
        "content": "<p>Dear All,</p>\n<p>is the definition/instance below already in mathlib?  Does it seem a valuable addition?  I may use it for proving monotonicity of powers in the appropriate context, without having to assume some crazy-strong hypothesis like <code>monoid</code>... <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> </p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nat_pow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">nat_pow</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">α</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">nat_pow</span> <span class=\"n\">α</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- tiny API</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">my.pow_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">my.pow_succ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 240328694,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622037603
    },
    {
        "content": "<p>That's bad, because some other types already have a nat power instance and it might not be defeq to this one. The function you're defining is called <code>npow_rec</code>, see the comments about it in <code>algebra/group/defs.lean</code>.</p>",
        "id": 240329526,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622037898
    },
    {
        "content": "<p>Ok, thanks!  I had lowered the priority, since <code>simp</code> was picking this instance instead of the \"usual\" one on a monoid, but I understand better now the issue!  I am glad that I had guessed the \"correct\" side on which to multiply, though!  I was only a <code>flip</code> away from <code>npow_rec</code>!</p>",
        "id": 240330089,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622038120
    },
    {
        "content": "<p>If you have a use-case outside of the world of monoids, we could instead consider moving the <code>npow</code> field of <code>monoid</code> to this class.</p>",
        "id": 240330993,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622038509
    },
    {
        "content": "<p>I do not have a use-case: I was really just goofing around proving the lemma below and trying to aim for \"the greatest possible generality that I can think of\".</p>\n<p>The only \"mathlib use-case\" that I can think of is a <code>mul_one_class</code>Type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- with the power definition, you could prove this for a `mul_one_class` type.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">left.pow_le_one_of_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pow_zero</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pow_succ</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n                              <span class=\"bp\">...</span> <span class=\"bp\">≤</span>  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>    <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_left'</span> <span class=\"o\">(</span><span class=\"n\">left.pow_le_one_of_le</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n                              <span class=\"bp\">...</span> <span class=\"bp\">=</span>  <span class=\"n\">x</span>        <span class=\"o\">:</span> <span class=\"n\">mul_one</span> <span class=\"n\">x</span>\n                              <span class=\"bp\">...</span> <span class=\"bp\">≤</span>  <span class=\"mi\">1</span>        <span class=\"o\">:</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 240331779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622038819
    },
    {
        "content": "<p>But, admittedly, I do not know any \"real\" <code>mul_one_class</code>es that are not secretly trying to be close to groups/rings...</p>",
        "id": 240331936,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622038879
    },
    {
        "content": "<p>If you don't have a real use case, I'd stay with what we currently have. The only thing you can weaken is removing the associativity, right?</p>",
        "id": 240332497,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622039093
    },
    {
        "content": "<p>Yes, indeed: not assuming associativity is all that you would gain.  The only non-associative algebras that I have ever really thought about are Lie algebras, but there, I never thought of inequalities!</p>",
        "id": 240332788,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622039191
    },
    {
        "content": "<p>Yes, inequalities and powers seem to be in a different world than non-associative algebras (for instance, the powers in a Lie algebra are trivial!)</p>",
        "id": 240334177,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622039729
    }
]