[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hŒµ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Œµ</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What's the easiest way to show this?</p>",
        "id": 281046008,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651598011
    },
    {
        "content": "<p>What about breaking <code>x ^ Œµ</code> into <code>x ^ (Œµ/2) * x ^ (Œµ/2)</code> and then use <code>log x / x ^ (Œµ/2)</code> tends to <code>0</code> (and <code>log (log x) ‚â§ log x</code>)?</p>",
        "id": 281046597,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1651598267
    },
    {
        "content": "<p>Yeah that's what I have right now but it feels like there should be a better way than splitting the rpow up into two</p>",
        "id": 281046705,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651598310
    },
    {
        "content": "<p>Not sure.. You can't really bound <code>log (log x)</code> by anything else than <code>log x</code> here.</p>",
        "id": 281047088,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1651598478
    },
    {
        "content": "<p>The best way would probably be to convince Manuel Eberl to switch to Lean :-) <a href=\"https://www21.in.tum.de/~eberlm/pubs/diss.html\">https://www21.in.tum.de/~eberlm/pubs/diss.html</a></p>",
        "id": 281048198,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1651598959
    },
    {
        "content": "<p>Here's what I settled on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">log_log_mul_log_div_rpow</span> <span class=\"o\">{</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hŒµ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_o.tendsto_div_nhds_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">is_o_log_id_at_top.comp_tendsto</span> <span class=\"n\">tendsto_log_at_top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_is_O</span> <span class=\"o\">(</span><span class=\"n\">is_O_refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">is_o_log_rpow_at_top</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hŒµ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">congr'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">filter_upwards</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">eventually_ge_at_top</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">rpow_two</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">rpow_mul</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span> <span class=\"n\">Œµ</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281048708,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651599159
    },
    {
        "content": "<p>That looks short enough! I would just add <code>is_O_rfl</code> to shorten a bit.</p>",
        "id": 281048805,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1651599199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/log.20over.20rpow/near/281048805\">said</a>:</p>\n<blockquote>\n<p>That looks short enough! I would just add <code>is_O_rfl</code> to shorten a bit.</p>\n</blockquote>\n<p>This doesn't exist</p>",
        "id": 281048877,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651599239
    },
    {
        "content": "<p>Yeah, that's why I would add it.</p>",
        "id": 281048933,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1651599250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/log.20over.20rpow/near/281048198\">said</a>:</p>\n<blockquote>\n<p>The best way would probably be to convince Manuel Eberl to switch to Lean :-) <a href=\"https://www21.in.tum.de/~eberlm/pubs/diss.html\">https://www21.in.tum.de/~eberlm/pubs/diss.html</a></p>\n</blockquote>\n<p>We've tried that so many times...</p>",
        "id": 281065658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1651606601
    }
]