[
    {
        "content": "<p>Is there a better way of proving the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">cons</span> <span class=\"mi\">0</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"n\">dec_trivial</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"n\">dec_trivial</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hs'</span><span class=\"o\">,</span> <span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">sum_singleton</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(bearing in mind that what I really want is the analogous statement for <code>zmod 8</code>...)</p>",
        "id": 284181801,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653683601
    },
    {
        "content": "<p><code>norm_num</code> should do this, I think</p>",
        "id": 284181921,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653683672
    },
    {
        "content": "<p>hmm... seems not. I thought <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  had made a tactic for this recently.</p>",
        "id": 284182021,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653683752
    },
    {
        "content": "<p><code>norm_num</code> does basically nothing here. Perhaps because <code>norm_num</code> does not work well with <code>zmod</code>?</p>",
        "id": 284182024,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653683754
    },
    {
        "content": "<p>For <code>fin</code> rather than <code>zmod</code>, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 284182323,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653683946
    },
    {
        "content": "<p>I figured it out: you need the import <code>import algebra.big_operators.norm_num</code></p>",
        "id": 284182343,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653683967
    },
    {
        "content": "<p>but this still doesn't work for zmod, you need to <code>change</code> some stuff:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.norm_num</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zmod</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I guess this is fixable</p>",
        "id": 284182371,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653683994
    },
    {
        "content": "<p>(also for some reason <code>norm_num</code> doesn't fix the <code>+ 0</code> here)</p>",
        "id": 284182428,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653684008
    },
    {
        "content": "<p>(and if you don't try <code>change</code>, <code>norm_num</code> errors hard)</p>",
        "id": 284182503,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653684078
    },
    {
        "content": "<p>Hmm. After <code>rw zmod at f</code>, the tactic state has two <code>f</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>What to make of that?</p>",
        "id": 284182644,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653684173
    },
    {
        "content": "<p>it's what should be expected, but just don't do this it's a bad idea</p>",
        "id": 284182664,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653684193
    },
    {
        "content": "<p>like very bad idea</p>",
        "id": 284182672,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653684200
    },
    {
        "content": "<p>Why do you do it then in your code above?</p>",
        "id": 284182834,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653684309
    },
    {
        "content": "<p>the issue is that <code>f</code> is already in the expression so it can't just get rid of the <code>f</code>, so  it has to make a copy</p>",
        "id": 284182837,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653684312
    },
    {
        "content": "<p>just to debug pretty much</p>",
        "id": 284182842,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653684317
    },
    {
        "content": "<p>Also, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.norm_num</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zmod</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the \"Goals accomplished\" message, but also an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">tactic.norm_num.finset.eval_sum_of_list</span> <span class=\"n\">R</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">R</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n</code></pre></div>\n<p>which I find rather confusing.</p>",
        "id": 284182989,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653684431
    },
    {
        "content": "<p>bug in the <code>norm_num</code> impl below:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.norm_num</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 284182995,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653684436
    },
    {
        "content": "<p>yeah, that's a sign of a buggy tactic. i'm not really sure what's up nor how to debug things</p>",
        "id": 284183025,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653684465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/explicit.20sums/near/284182323\">said</a>:</p>\n<blockquote>\n<p>For <code>fin</code> rather than <code>zmod</code>, you can do</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This doesn't seem to work when I replace <code>3</code> by <code>4</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>leaves the goal at <code>f 0 + (f 1 + (f 2 + f 2.succ)) = f 0 + (f 1 + (f 2 + f 3))</code>. Adding a <code>congr</code> at the end finishes it, though.</p>",
        "id": 284183322,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653684697
    },
    {
        "content": "<p>Confusingly,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">],</span> <span class=\"c1\">-- does not replace the sum</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does not work, but using <code>fin 8</code> in the statement instead of <code>zmod 8</code> does.</p>",
        "id": 284183625,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653684893
    },
    {
        "content": "<p>The following works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">sum8</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">f'</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sum8</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284183984,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653685127
    },
    {
        "content": "<p>But why it works in this form and not in the previous one, I do not understand.</p>",
        "id": 284184077,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653685189
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> re: norm_num extension bug</p>",
        "id": 284185101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653685814
    },
    {
        "content": "<p>But my proof (derived from <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> 's one) does not use <code>norm_num</code>.</p>",
        "id": 284185147,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653685852
    },
    {
        "content": "<p>the norm_num bug may or may not be related to your issue, but it's a bug in any case</p>",
        "id": 284185315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653686010
    },
    {
        "content": "<p>Why are you using <code>zmod 3</code> and not <code>fin 3</code>, the \"official\" type with 3 elements?</p>",
        "id": 284206686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653708311
    },
    {
        "content": "<p>I'm guessing f is some sort of character, so zmod makes more sense for those</p>",
        "id": 284221152,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653731329
    },
    {
        "content": "<p>Yes; in my use case, I want to expand a Gauss sum on Z/8Z into an explicit sum, so <code>zmod n</code> is the natural type.</p>",
        "id": 284240179,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653759908
    },
    {
        "content": "<p>Thanks for being guinea pigs for the tactic! :)</p>",
        "id": 284303058,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1653854940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/explicit.20sums/near/284182644\">said</a>:</p>\n<blockquote>\n<p>Hmm. After <code>rw zmod at f</code>, the tactic state has two <code>f</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>What to make of that?</p>\n</blockquote>\n<p>I recall something ending up with <code>fin (2+1)</code> before, not entirely sure where, and it confused <code>norm_num</code>, but I fixed it by making sure the tactics I called would always give <code>fin 3</code>. The other solution would be to replace some usages of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.to_nat\">docs#expr.to_nat</a> with something slightly smarter that understands <code>+1</code>.</p>",
        "id": 284303122,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1653855050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/explicit.20sums/near/284182989\">said</a>:</p>\n<blockquote>\n<p>Also, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.norm_num</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zmod</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the \"Goals accomplished\" message, but also an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">tactic.norm_num.finset.eval_sum_of_list</span> <span class=\"n\">R</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">R</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n</code></pre></div>\n<p>which I find rather confusing.</p>\n</blockquote>\n<p>Oof, that's an embarassing kind of bug :P</p>",
        "id": 284303140,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1653855114
    },
    {
        "content": "<p>I should have some time within the next days to fix both these issues.</p>",
        "id": 284303184,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1653855144
    },
    {
        "content": "<p>was this ever fixed, btw?</p>",
        "id": 290707431,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658708300
    },
    {
        "content": "<p>I don't think so, at leat I never got around to it</p>",
        "id": 290782356,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658765652
    }
]