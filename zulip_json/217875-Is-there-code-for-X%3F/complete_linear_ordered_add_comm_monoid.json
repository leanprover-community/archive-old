[
    {
        "content": "<p>Is there such a thing as a typeclass for complete linear orders which are also monoids? like <code>linear_ordered_add_comm_monoid</code> but with <code>Sup</code> and <code>Inf</code>.</p>",
        "id": 252102998,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630877287
    },
    {
        "content": "<p>I wish we had it. We don't. Closest thing I've seen is <code>(conditionally_)complete_linear_order</code> together with <code>add_comm_monoid</code>. There needs to be some refactoring of the architecture that marries the order hierarchy with the algebra hierarchy.</p>",
        "id": 252106929,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630881805
    },
    {
        "content": "<p>Is this not what <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> embarked upon recently?</p>",
        "id": 252107006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630881901
    },
    {
        "content": "<p>Do you mean that <code>add_comm_monoid</code> together with some <code>contra|covariant_class (+) (&lt;=)</code> gets us most of the way there?</p>",
        "id": 252107186,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630882114
    },
    {
        "content": "<p>I guess I don't know what Yael wants the relationship between &lt;= and + to be here. Presumably he wants more than <code>[complete_linear_order X] [add_comm_monoid X]</code>.</p>",
        "id": 252107935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630882963
    },
    {
        "content": "<p>You're right. <code>ordered_add_comm_monoid</code> is just <code>add_comm_monoid</code>, <code>partial_order</code>, and the <code>covariant (+) (&lt;=)</code> and <code>contravariant (+) (&lt;)</code>.</p>",
        "id": 252108051,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630883105
    },
    {
        "content": "<p>So <code>linear_ordered_add_comm_monoid</code> should be constructable from the relevant pieces. Does that imply if one has <code>complete_linear_order</code> <code>add_comm_monoid</code> and the right <code>contra/covariant_class</code>, then the laws about <code>Sup</code> and <code>Inf</code> will work?</p>",
        "id": 252108140,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630883214
    },
    {
        "content": "<p>Most likely, yes. But it would surely be better to have it as a class rather than calling the bare <code>covariant_class</code>.</p>",
        "id": 252132967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630910411
    },
    {
        "content": "<p>Having it as its own class results is an X^N explosion, of <code>partial/linear/conditionally_/complete_</code> x <code>add_comm_monoid/semiring/ring/field</code> x optionally with_top and/or with_bot. We can have all 16 or more. But there must be a better way. (This is also ignoring the <code>comm_</code> part of the hierarchy.)</p>",
        "id": 252133397,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630910785
    }
]