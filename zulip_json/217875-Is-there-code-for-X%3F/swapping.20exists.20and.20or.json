[
    {
        "content": "<p>Is there a way to prove this swap of order of operations simply, or do I have to spell it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212628858,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602110911
    },
    {
        "content": "<p>I think you want some additional parentheses.</p>",
        "id": 212630466,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602112028
    },
    {
        "content": "<p>because it's unreadable or because it's wrong?</p>",
        "id": 212630602,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112130
    },
    {
        "content": "<p>well at any rate what i mean is: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212630725,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112209
    },
    {
        "content": "<p>Your leftmost existential contains the iff in the original</p>",
        "id": 212630736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602112218
    },
    {
        "content": "<p>gotcha</p>",
        "id": 212630753,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112237
    },
    {
        "content": "<p>all right, now library_search finds it. thanks</p>",
        "id": 212630775,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112271
    },
    {
        "content": "<p>I'd hoped that <code>by { tidy, solve_by_elim* [or.inl, or.inr] { max_depth := 20 }, }</code> was going to solve it, but instead I seem to have found a bug in <code>solve_by_elim</code>.</p>",
        "id": 212630779,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602112276
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">kf</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">kg</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">kf</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">kg</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">|</span> <span class=\"n\">hg</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">finish</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 212630786,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602112287
    },
    {
        "content": "<p>yay <code>finish</code>!</p>",
        "id": 212630802,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602112311
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_or_distrib\">docs#exists_or_distrib</a></p>",
        "id": 212630865,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602112336
    },
    {
        "content": "<p>I was surprised <code>finish</code> can't do the <code>split</code> itself</p>",
        "id": 212630880,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602112350
    },
    {
        "content": "<p>May as well use rintro in place of intro, rcases in that long proof</p>",
        "id": 212630884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602112354
    },
    {
        "content": "<p>I couldn't get the right <code>rintro</code> invocation for the <code>mp</code> case, it was unfolding the nat instead for me</p>",
        "id": 212630912,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602112381
    },
    {
        "content": "<p>In fact, you can also prove this by two successive calls to <code>hint</code>. :-)</p>",
        "id": 212630931,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602112408
    },
    {
        "content": "<p>What spelling didn't work <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> ?</p>",
        "id": 212630955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602112429
    },
    {
        "content": "<p>once I fixed the syntax, <code>library_search</code> found <code>exists_or_distrib</code></p>",
        "id": 212630962,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112432
    },
    {
        "content": "<p>so <code>{ split; finish }</code> works but <code>{split, finish}</code> doesn't - what does the semicolon do that's different from the comma?</p>",
        "id": 212631025,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112466
    },
    {
        "content": "<p><code>X; Y</code> runs <code>Y</code> on every goal produced by <code>X</code></p>",
        "id": 212631056,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602112490
    },
    {
        "content": "<p>oh i see. so <code>x; y</code> is the same as saying <code>x, all_goals { y} </code> ?</p>",
        "id": 212631088,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112522
    },
    {
        "content": "<p>almost!</p>",
        "id": 212631097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602112531
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">kf</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">kg</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>does not do what I expected</p>",
        "id": 212631104,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602112535
    },
    {
        "content": "<p>If there were already multiple goals then they will behave differently.</p>",
        "id": 212631117,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602112546
    },
    {
        "content": "<p>why does there have to be a dozen different ways to do everything</p>",
        "id": 212631174,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112569
    },
    {
        "content": "<p>math is hard :-)</p>",
        "id": 212631517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602112818
    },
    {
        "content": "<p>well, thanks. on this particular instance where f and g are actually big formulas, running <code>split; finish</code> is taking like 4-5 seconds to compile. but <code>refine exists_or_distrib</code> is a lot faster so i'll go with that one</p>",
        "id": 212631597,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602112895
    },
    {
        "content": "<p><code>finish</code> can be slow because it's doing basically what my explicit proof is, breaks down everything to as far as it can go, then reconstructs by the \"obvious\" type matching expressions</p>",
        "id": 212631701,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602112982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, I think you can remove the outer angle brackets</p>",
        "id": 212632142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602113350
    },
    {
        "content": "<p>To fix that rintro</p>",
        "id": 212632149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602113360
    },
    {
        "content": "<p>Then the pipe doesn't work, <code>|</code> has to be inside angle brackets in rintro</p>",
        "id": 212632177,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602113395
    },
    {
        "content": "<p>Does it work in parentheses?</p>",
        "id": 212632273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602113457
    },
    {
        "content": "<p>OK, yeah, <code>  rintro (⟨kf, hf⟩|⟨kg, hg⟩),</code> works</p>",
        "id": 212632306,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602113482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/swapping.20exists.20and.20or/near/212630779\">said</a>:</p>\n<blockquote>\n<p>I'd hoped that <code>by { tidy, solve_by_elim* [or.inl, or.inr] { max_depth := 20 }, }</code> was going to solve it, but instead I seem to have found a bug in <code>solve_by_elim</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4519\">#4519</a></p>",
        "id": 212636508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602117483
    }
]