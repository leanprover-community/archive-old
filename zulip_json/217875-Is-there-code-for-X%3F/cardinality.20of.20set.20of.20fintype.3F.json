[
    {
        "content": "<p>Is there a way to express the cardinality of a set of a fintype as a natural number? I have a Prop that I would like to use to filter elements of a fintype into a subset. How might I write an expression to denote the cardinality of this set? Do I need to prove that the set of a fintype can be converted to a finset? I am having trouble constructively building the finset because of a problem with has_sep being unproven. Any ideas?</p>",
        "id": 211582112,
        "sender_full_name": "Chase Norman",
        "timestamp": 1601356999
    },
    {
        "content": "<p>You just need the set to be decidable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 211582347,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601357338
    },
    {
        "content": "<p>If you're doing classical reasoning (like with <code>open_locale classical</code>) then the <code>decidable_pred</code> isn't necessary.</p>",
        "id": 211582358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601357391
    },
    {
        "content": "<p>Also, if you want a finset from a set, there's <code>set.to_finset</code> in <code>data.fintype.basic</code>.  For example, you could write <code>s.to_finset.card</code> instead of <code>fintype.card s</code>.</p>",
        "id": 211582506,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601357597
    },
    {
        "content": "<p>Thank you for your response. How does one prove that a predicate is decidable? Also, is it generally possible in mathematics for a finite set to not have a cardinality if the predicate is not decidable?</p>",
        "id": 211582769,
        "sender_full_name": "Chase Norman",
        "timestamp": 1601357991
    },
    {
        "content": "<p>A finite set has a cardinality, it's just that there might not be an algorithm to count it. For example if X is the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msup><mi>π</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>6</mn><mo separator=\"true\">,</mo><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><msup><mi>n</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{\\pi^2/6,\\sum_{n=1}^{\\infty}n^{-2}\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.113818em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> has a cardinality which is either 1 or 2 depending on whether the two terms are equal or not. There's no <em>algorithm</em> for checking if a random infinite sum equals a value so asking a computer what it is is asking too much</p>",
        "id": 211583332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601358738
    },
    {
        "content": "<p><code>decidable_pred s</code> is essentially that for every <code>x</code>, you can write a function that can calculate true or false depending on whether <code>x ∈ s</code> (try following the definitions for <code>decidable_pred</code> to see how it works!).  It depends on knowing precisely how <code>s</code> is defined.  In fact, using typeclasses Lean is able to fill in this detail for you for many simple cases (for example with <code>{n : ℕ | n = 5}</code>).</p>\n<p>In mathematics, finite sets have a cardinality, but it might not be known since one only knows a bijection to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1,2,\\dots,n\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span> exists for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, but in Lean finite sets come with an explicit list of the elements, so the cardinality must be known ahead of time.</p>",
        "id": 211583406,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601358890
    },
    {
        "content": "<p>If you're a mathematician and are finding all this confusing then the answer is simply to switch on \"classical logic mode\" (the mode which mathematicians use to do mathematics) with <code>open_locale classical</code> and just forget about it</p>",
        "id": 211583488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601358992
    },
    {
        "content": "<p>(Does <img alt=\":not_not:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17937.png\" title=\"not not\"> mean \"no classical reasoning\" or \"eliminate double negation\"?)</p>",
        "id": 211583703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601359324
    }
]