[
    {
        "content": "<p>Do we have the following lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ideal.nat_cast</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 299730648,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1663673726
    },
    {
        "content": "<p>Is that true? If it were true, <code>span {2} = 2 = 1 + 1 = span {1} + span {1} = univ + univ = univ</code></p>",
        "id": 299730938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663673841
    },
    {
        "content": "<p><code>n : ideal R</code> looks to me like an unfortunate consequence of the \"if it has a + and a 0 and a 1, then it has an n for all n\" rule (which is gone in Lean 4 if I understand correctly).</p>",
        "id": 299733158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663674796
    },
    {
        "content": "<p>This indeed looks false. Addition on <code>ideal R</code> comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.pointwise_add_comm_monoid\">docs#submodule.pointwise_add_comm_monoid</a>, so it is the ideal generated by the two ideals, and <code>1</code> is the full ring. In particular <code>1+1+1+... = 1</code>. The notation <code>n : ideal R</code> is mathematically irrelevant.</p>",
        "id": 299733307,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663674860
    },
    {
        "content": "<p>OK, I see. The <code>(n : ideal R)</code> appeared after applying <code>simp</code> to an hypothesis of the form <code>n • I = 0</code>, for <code>I</code> an ideal, but it seems that this is not the correct  way to express this in Lean. Thanks!</p>",
        "id": 299733972,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1663675138
    },
    {
        "content": "<p>Can you squeeze the simp and see which lemma is applied?</p>",
        "id": 299734465,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663675321
    },
    {
        "content": "<p>Yes, it applied <code>nsmul_eq_mul</code>.</p>",
        "id": 299734543,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1663675344
    },
    {
        "content": "<p><code>n • I = I</code>, right?</p>",
        "id": 299734556,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663675348
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nsmul_eq_mul\">docs#nsmul_eq_mul</a> by any chance?</p>",
        "id": 299734570,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663675355
    },
    {
        "content": "<p>So I guess what is missing is a <code>simp</code> lemma saying <code>↑n * I = I</code></p>",
        "id": 299734844,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663675458
    },
    {
        "content": "<p>Wait</p>",
        "id": 299735035,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663675557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/ideal.2Enat_cast/near/299733158\">said</a>:</p>\n<blockquote>\n<p><code>n : ideal R</code> looks to me like an unfortunate consequence of the \"if it has a + and a 0 and a 1, then it has an n for all n\" rule (which is gone in Lean 4 if I understand correctly).</p>\n</blockquote>\n<p>If we keep the semifield instance on <code>fractional_ideal</code> then I'd imagine we will always have a way of writing numerals and getting fractional ideals at least</p>",
        "id": 299735144,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663675603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/ideal.2Enat_cast/near/299735035\">said</a>:</p>\n<blockquote>\n<p>Wait</p>\n</blockquote>\n<p>unless n is 0?</p>",
        "id": 299735217,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663675644
    },
    {
        "content": "<p>Yes, that's annoying</p>",
        "id": 299735251,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663675661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> it seems that <code>cases n; simp</code> is already able to do everything</p>",
        "id": 299735514,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663675792
    },
    {
        "content": "<p>It treats the cases as expected</p>",
        "id": 299735580,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663675807
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 299735928,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1663675944
    },
    {
        "content": "<p>Patrick gives this example (ideals) as the reason we need to have nonsense like semirings instead of just working with rings ;-) Great to see it working so well! ;-)</p>",
        "id": 299736478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663676145
    },
    {
        "content": "<p>I didn't know you hated <code>nat</code> so much, Kevin!</p>",
        "id": 299736834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663676254
    },
    {
        "content": "<p>long live <code>int</code>!</p>",
        "id": 299736899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663676278
    },
    {
        "content": "<p>We have a lot of lemmas proved for rings and then special cases nat.same_lemma and nnreal.same_lemma . If we dropped semirings we'd just have more of these.</p>",
        "id": 299737116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663676350
    },
    {
        "content": "<p>It would be nice if <code>simp</code> could do the <code>cases n</code> part by itself, but this is maybe impossible.</p>",
        "id": 299737807,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663676605
    }
]