[
    {
        "content": "<p>I have a permutation <code>σ : equiv.perm ℕ</code>, and I know that <code>σ</code> doesn't send anything <code>&lt; k</code> to anything <code>≥ k</code>. Is there a nice way to write <code>σ</code> as the composition of some <code>σ' : equiv.perm (fin k)</code> and <code>τ : equiv.perm ℕ</code>?</p>",
        "id": 246206677,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626431163
    },
    {
        "content": "<p>Take <code>σ' = 1</code>?</p>",
        "id": 246206760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626431209
    },
    {
        "content": "<p>I guess you mean some kind of horizontal composition</p>",
        "id": 246206826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626431262
    },
    {
        "content": "<p>Is there a function that takes the disjoint sum of permutations? That would at least let you write the theorem statement</p>",
        "id": 246206898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626431311
    },
    {
        "content": "<p>The statement is something like <code>σ = σ'.extend_domain (equiv.of_left_inverse coe _ _) * τ ∧ ∀ n, τ n ≠ n → n ≥ k</code></p>",
        "id": 246207090,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626431458
    },
    {
        "content": "<p>Oh, I was thinking of something more like <code>\\exists σ' τ, σ = e.perm_congr (perm.sum σ' τ)</code> where <code>e : ℕ ⊕ fin k ≃ ℕ</code></p>",
        "id": 246207329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626431635
    },
    {
        "content": "<p>the definitions of <code>equiv.perm_congr : A ~= B -&gt; perm A ~= perm B</code> and <code>perm.sum : perm A -&gt; perm B -&gt; perm (A ⊕ B)</code> should be obvious</p>",
        "id": 246207418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626431692
    },
    {
        "content": "<p>Ah, I see. That would be a lot nicer than what I have now :P</p>",
        "id": 246207435,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626431704
    },
    {
        "content": "<p>Those are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm_congr\">docs#equiv.perm_congr</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_congr\">docs#equiv.sum_congr</a> respectively</p>",
        "id": 246207482,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626431760
    },
    {
        "content": "<p>I just love it when I can wish theorems into existence like that <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 246207556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626431804
    },
    {
        "content": "<p>actually the second one is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.sum_congr\">docs#equiv.perm.sum_congr</a>, although I think that's defeq to an instantiation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_congr\">docs#equiv.sum_congr</a></p>",
        "id": 246207708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626431910
    },
    {
        "content": "<p>This lemma doesn't seem to exist.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">perm.compl_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">equiv.set.compl</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">subtype_equiv_right</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I'm wondering whether it's written the correct way. Should I replace <code>s</code> by a prop and <code>perm (sᶜ : set α)</code> by <code>perm {a // ¬p a}</code>?</p>",
        "id": 249403942,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628883414
    },
    {
        "content": "<p>Is the right-hand side <code>{f : perm α // f.support = s}</code>? (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.support\">docs#equiv.perm.support</a>)</p>",
        "id": 249404966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628883987
    },
    {
        "content": "<p>Oh, that's only for fintypes</p>",
        "id": 249405132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628884099
    },
    {
        "content": "<p>I've thought about generalizing <a href=\"http://perm.support\">perm.support</a> to arbitrary types, but it gets difficult to work with cardinality of supports then.</p>",
        "id": 249408575,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628885787
    },
    {
        "content": "<p>The equiv you're looking for can be made using the equiv that splits a type along a prop into a sum of compl subtypes, then refl for the left one. I worked and added the one recently, don't remember it's name.</p>",
        "id": 249408820,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628885924
    },
    {
        "content": "<p>I ended up making it by hand using <code>equiv.perm.subtype_perm</code> and <code>equiv.perm.of_subtype</code>. See <a href=\"https://github.com/leanprover-community/mathlib/issues/8691\">#8691</a></p>",
        "id": 249526770,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629055251
    }
]