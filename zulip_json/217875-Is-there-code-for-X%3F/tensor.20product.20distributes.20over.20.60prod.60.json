[
    {
        "content": "<p>I need that tensor product distributes over <code>prod</code> and over direct sums. I was on a plane so wrote the <code>prod</code> version (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>⊕</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>K</mi><mo>≅</mo><mi>M</mi><mo>⊗</mo><mi>K</mi><mo>⊕</mo><mi>N</mi><mo>⊗</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">M\\oplus N)\\otimes K\\cong M\\otimes K\\oplus N\\otimes K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>) from first principles because I couldn't find it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module.pid</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod.fst_def</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod.snd_def</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.prod_tensor</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">K</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product.lift</span> <span class=\"bp\">$</span> <span class=\"n\">linear_map.coprod</span>\n      <span class=\"o\">((</span><span class=\"n\">tensor_product.lift.equiv</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">K</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">linear_map.inl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n      <span class=\"o\">((</span><span class=\"n\">tensor_product.lift.equiv</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">K</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">linear_map.inr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.map_add</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.map_smul</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.coprod</span> <span class=\"o\">(</span><span class=\"n\">linear_map.rtensor</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">linear_map.inl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">linear_map.rtensor</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">linear_map.inr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.id</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">linear_map.ext_iff.1</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.ext'</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.lift.tmul</span><span class=\"o\">,</span> <span class=\"n\">linear_map.coprod_apply</span><span class=\"o\">,</span>\n      <span class=\"n\">linear_map.add_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.lift.equiv_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.inl_apply</span><span class=\"o\">,</span>\n      <span class=\"n\">linear_map.inr_apply</span><span class=\"o\">,</span> <span class=\"n\">prod.mk_add_mk</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">linear_map.rtensor_tmul</span><span class=\"o\">,</span>\n      <span class=\"n\">linear_map.coe_inl</span><span class=\"o\">,</span> <span class=\"n\">linear_map.coe_inr</span><span class=\"o\">,</span> <span class=\"n\">linear_map.id_coe</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">tensor_product.add_tmul</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.id</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">linear_map.ext_iff.1</span> <span class=\"o\">(</span><span class=\"n\">linear_map.prod_ext</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.ext'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">tensor_product.ext'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.id_comp</span><span class=\"o\">,</span> <span class=\"n\">linear_map.inl_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n          <span class=\"n\">linear_map.coprod_apply</span><span class=\"o\">,</span> <span class=\"n\">prod.fst_def</span><span class=\"o\">,</span> <span class=\"n\">linear_map.rtensor_tmul</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span>\n          <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">linear_map.inl_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.lift.tmul</span><span class=\"o\">,</span> <span class=\"n\">linear_map.coprod_apply</span><span class=\"o\">,</span>\n          <span class=\"n\">prod.fst_def</span><span class=\"o\">,</span> <span class=\"n\">prod.snd_def</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n          <span class=\"n\">tensor_product.lift.equiv_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.inl_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.id_comp</span><span class=\"o\">,</span> <span class=\"n\">linear_map.inr_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span>\n          <span class=\"n\">linear_map.coprod_apply</span><span class=\"o\">,</span> <span class=\"n\">prod.fst_def</span><span class=\"o\">,</span> <span class=\"n\">linear_map.rtensor_tmul</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span>\n          <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">linear_map.inr_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.lift.tmul</span><span class=\"o\">,</span> <span class=\"n\">linear_map.coprod_apply</span><span class=\"o\">,</span>\n          <span class=\"n\">prod.fst_def</span><span class=\"o\">,</span> <span class=\"n\">prod.snd_def</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n          <span class=\"n\">tensor_product.lift.equiv_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.inr_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It was a lot longer than I expected (<code>simp</code> would just time out so I had to work out the rewrites by hand). I suspect that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mo>⊕</mo><mi>i</mi></msub><msub><mi>M</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>K</mi><mo>≅</mo><msub><mo>⊕</mo><mi>i</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>M</mi><mi>i</mi></msub><mo>⊗</mo><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\oplus_i M_i)\\otimes K\\cong \\oplus_i (M_i \\otimes K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span> will be even worse. Do we have these things already? Should I be using the category theory library and arguing that tensor products commute with these colimits or will that be even worse?</p>",
        "id": 290752673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658752378
    },
    {
        "content": "<p>You can make that very slightly shorter by using <code>(tensor_product.mk R N K).compr₂</code> instead of <code>(tensor_product.lift.equiv R M K _).symm</code></p>",
        "id": 290753953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658753144
    },
    {
        "content": "<p>I guess it's pretty annoying how awkward it is to construct <code>M × N →ₗ[R] K →ₗ[R] M ⊗ K × N ⊗ K</code> when you really just want to write <code>λ (mn : M × N) k, (mn.1 ⊗ₜ[R] k, mn.2 ⊗ₜ[R] k)</code> (which is also definitionally better than the <code>coprod</code>/<code>inl</code>/<code>inr</code> spelling)</p>",
        "id": 290754731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658753623
    },
    {
        "content": "<p>Right, I could have done that but of course then I have to prove that everything is R-linear manually</p>",
        "id": 290756163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658754492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> we have something like this in LTE</p>",
        "id": 290763507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658758290
    },
    {
        "content": "<p>(But maybe only for Ab?)</p>",
        "id": 290763743,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658758398
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.direct_sum\">docs#tensor_product.direct_sum</a></p>",
        "id": 290763927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658758499
    },
    {
        "content": "<p>Oh thanks!</p>",
        "id": 290764215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658758657
    },
    {
        "content": "<p>Would it have been feasible to prove this using the category theory library? Just by arguing tensor preserves colimits because it has a right adjoint?</p>",
        "id": 290812469,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1658780149
    },
    {
        "content": "<p>Yes, but I don't think we have the adjunction in mathlib</p>",
        "id": 290814406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658781162
    },
    {
        "content": "<p>Note that biproducts are both colimits and limits, so if you show that tensoring is a left adjoint, you get that it commutes with colimits for free and since biproducts are in particular colimits, you get that they commute with biproducts</p>",
        "id": 290814499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658781213
    },
    {
        "content": "<p>We do have that adjunction, it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.category_theory.monoidal_closed\">docs#Module.category_theory.monoidal_closed</a></p>",
        "id": 290814725,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1658781316
    },
    {
        "content": "<p>Should be very similar to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Using.20the.20fact.20that.20a.20functor.20preserves.20limits\">#new members &gt; Using the fact that a functor preserves limits</a>, for which the solution has two lines of code. I'm not sure if the same universe issue would show up.</p>",
        "id": 290847259,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658808207
    }
]