[
    {
        "content": "<p><code>mathlib</code> has <code>B(‚Ñù)</code> and it has <code>probability_measure</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">real.borel_space</span> <span class=\"c1\">-- real.borel_space : borel_space ‚Ñù</span>\n<span class=\"k\">#check</span> <span class=\"n\">measure_theory.probability_measure</span> <span class=\"c1\">-- probability_measure : measure ?M_1 ‚Üí Prop</span>\n</code></pre></div>\n<p>With these tools, how do we construct a probability measure <code>P</code> of <code>B(‚Ñù)</code>?</p>\n<p>Suppose we have a closed unit interval <code>Icc01 = [0,1]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Icc01</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [0,1]</span>\n</code></pre></div>\n<p>In <code>mathlib</code>, how do we construct the Borel space <code>B([0,1])</code>?</p>\n<p>Given that we have constructed <code>B([0,1])</code>, how do we construct a probability measure <code>P</code> of <code>B([0,1])</code> such that for any subinterval <code>[a,b]</code> of <code>[0,1]</code>, <code>0 ‚â§ a ‚â§ b ‚â§ 1</code>, we have that <code>P([a,b]) = b-a</code>?</p>",
        "id": 219042405,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607317339
    },
    {
        "content": "<p>We already have the Lebesgue measure (available as the <code>volume</code> on <code>\\R</code>).</p>",
        "id": 219098148,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607356891
    },
    {
        "content": "<p>If you restrict this measure to <code>Icc 0 1</code>, then you will have the desired measure. You'll have to prove a <code>probability_measure</code> instance.</p>",
        "id": 219098267,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607356935
    },
    {
        "content": "<p><code>mathlib</code> doesn't have <code>real.volume</code>.  It does have <code>real.volume_Icc</code>.  I don't know how to apply it to [0,1].  This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">real.volume_Icc</span> <span class=\"c1\">-- real.volume_Icc : ‚áëmeasure_theory.measure_space.volume (set.Icc ?M_1 ?M_2) = ennreal.of_real (?M_2 - ?M_1)</span>\n<span class=\"k\">#check</span> <span class=\"n\">real.volume_Icc</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219106369,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607360394
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure_space.volume\">docs#measure_theory.measure_space.volume</a></p>",
        "id": 219140845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607376552
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.real.measure_space\">docs#measure_theory.real.measure_space</a></p>",
        "id": 219140973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607376607
    },
    {
        "content": "<p>So, if you write <code>(volume : measure \\R)</code>, then you get the Lebesgue meaure on <code>\\R</code>.</p>",
        "id": 219141114,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607376676
    },
    {
        "content": "<p>It seems that we don't have an instance <code>subtype.measure_space</code> yet. Adding this instance is a good exercise on understanding the definitions.</p>",
        "id": 219141280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607376745
    },
    {
        "content": "<p>You should define it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.comap\">docs#measure_theory.measure.comap</a> and coercion.</p>",
        "id": 219141511,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607376860
    },
    {
        "content": "<p>With much help from you all I have constructed an instance of a <code>measure_space</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">fin.fintype</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"bp\">ùí´</span> <span class=\"bp\">‚ä§</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_measurable'</span> <span class=\"o\">:=</span> <span class=\"n\">A1.algebra</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n  <span class=\"n\">is_measurable_compl</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n  <span class=\"n\">is_measurable_Union</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Œº_M1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">X</span> <span class=\"n\">M1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">measure_theory.measure.of_measurable</span> <span class=\"n\">_</span> <span class=\"n\">M1</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finset.card</span> <span class=\"n\">s.to_finset</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">M1_MS</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_measurable_space</span> <span class=\"o\">:=</span> <span class=\"n\">M1</span><span class=\"o\">,</span>\n  <span class=\"n\">volume</span> <span class=\"o\">:=</span> <span class=\"n\">Œº_M1</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">M1_MS</span> <span class=\"c1\">-- M1_MS : measure_space X</span>\n</code></pre></div>\n<p>The above introduces a <code>measure</code> this way, which I have been trying to unpack today:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Œº_M1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">X</span> <span class=\"n\">M1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">measure_theory.measure.of_measurable</span> <span class=\"n\">_</span> <span class=\"n\">M1</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finset.card</span> <span class=\"n\">s.to_finset</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In restricting the volume to <code>[0,1]</code> I am trying to get the Steinhaus probability space <code>([0,1], B([0,1]), Œº)</code> where <code>Œº</code> is the volume restricted to [0,1].  I am still lost trying to understand the differences between </p>\n<ul>\n<li>abbreviation</li>\n<li>definition</li>\n<li>structure</li>\n<li>type class</li>\n<li>extends</li>\n<li>instance<br>\nand what things get automatically defined, like <code>to_X</code> if you extend a class, and what you have to declare explicitly. </li>\n</ul>\n<p>Thanks for your advice, I will keep trying to unroll the definitions until I get there.</p>",
        "id": 219145878,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607379083
    },
    {
        "content": "<p>\"Steinhaus space\" is a term I got from Stack Exchange.  I think it is what is described <a href=\"https://arxiv.org/abs/1802.06071\">here on page 36</a> and <a href=\"http://www.math.uni-leipzig.de/old/prp/2004/p7-2004.pdf\">here on page 8</a>.</p>",
        "id": 219147356,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607379906
    },
    {
        "content": "<p>The definition of <code>measure_space</code> contains some notation which is quite hard to parse.    Looking at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">outer_measure</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">m_Union</span> <span class=\"o\">‚¶É</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n  <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">‚àë'</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">trimmed</span> <span class=\"o\">:</span> <span class=\"n\">to_outer_measure.trim</span> <span class=\"bp\">=</span> <span class=\"n\">to_outer_measure</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The notation <code>m_Union ‚¶Éf : ‚Ñï ‚Üí set Œ±‚¶Ñ</code> is hard to understand.  The <a href=\"https://leanprover.github.io/reference/lean_reference.pdf\">user's manual, section 4.9</a> seems to say (by omission) that the field names are just that: simple strings without type annotation.  Section 3.3 on implicit arguments says that <code>‚¶Éf : ‚Ñï ‚Üí set Œ±‚¶Ñ</code> is \"an implicit argument, weakly inserted\".  It doesn't say what \"weak insertion\" means.  The bound variable <code>f</code> is subsequently used in the (remainder of the) type of <code>m_union</code>, namely <code>(‚àÄi, is_measurable (f i)) ‚Üí pairwise (disjoint on f) ‚Üí  measure_of (‚ãÉi, f i) = (‚àë'i, measure_of (f i)))</code>.  It is not clear if this is trying to say that the type of <code>m_Union</code> is say <code>m_Union: Z</code> where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Œ†</span> <span class=\"o\">‚¶É</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>  <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">‚àë'</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 219153099,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607383800
    },
    {
        "content": "<p>In a structure field, <code>(foo {x: A} : bla x)</code> is the same as <code>(foo : \\all {x : A}, bla x)</code></p>",
        "id": 219153305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607383936
    },
    {
        "content": "<p>\"weak insertion\" is explained in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\">Section 6.5 of TPiL</a>.</p>",
        "id": 219153323,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607383955
    },
    {
        "content": "<p>It seems that your <code>A1</code> is equivalent to <code>Œª s, true</code>.</p>",
        "id": 219165467,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607395667
    },
    {
        "content": "<p>And I think that this instance of <code>measurable_space</code> is called either <code>\\top</code> or <code>\\bot</code> (see what's used for naturals).</p>",
        "id": 219165525,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607395735
    },
    {
        "content": "<p>And the measure is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.count\">docs#measure_theory.measure.count</a></p>",
        "id": 219165583,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607395807
    },
    {
        "content": "<p>I am trying to  unpack this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"bp\">ùí´</span> <span class=\"bp\">‚ä§</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">is_measurable'</span> <span class=\"o\">:=</span> <span class=\"n\">A1</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n  <span class=\"n\">is_measurable_compl</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n  <span class=\"n\">is_measurable_Union</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">A1</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">M1</span>\n<span class=\"kd\">instance</span> <span class=\"n\">XFT</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">fin.fintype</span> <span class=\"n\">_</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">amy</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Œº_M1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">X</span> <span class=\"n\">M1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">measure_theory.measure.of_measurable</span> <span class=\"n\">_</span> <span class=\"n\">M1</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finset.card</span> <span class=\"n\">s.to_finset</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Œº_M1</span> <span class=\"c1\">-- Œº_M1 : measure_theory.measure X</span>\n<span class=\"k\">#check</span> <span class=\"n\">Œº_M1.m_Union</span> <span class=\"c1\">-- ERROR</span>\n</code></pre></div>\n<p>The last expression causes an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foobar.lean</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">measurable_space</span> <span class=\"n\">X</span>\n<span class=\"n\">foobar.lean</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">‚Åá</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">M1</span>\n</code></pre></div>\n<p>but the declaration of <code>measure</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">outer_measure</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">m_Union</span> <span class=\"o\">‚¶É</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n  <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">‚àë'</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">trimmed</span> <span class=\"o\">:</span> <span class=\"n\">to_outer_measure.trim</span> <span class=\"bp\">=</span> <span class=\"n\">to_outer_measure</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Also if I want to break out the actual measure as a separate function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">actual_measure</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finset.card</span> <span class=\"n\">s.to_finset</span>\n</code></pre></div>\n<p>but I don't understand how to break it out because I don't quite understand the arguments.  I think <code>s</code> is of type <code>‚¶Éf : ‚Ñï ‚Üí set Œ±‚¶Ñ</code>.  I'm not sure what the underscore is supposed to match, maybe <code>(‚àÄi, is_measurable (f i)) </code>.  </p>\n<p>So 3 questions:</p>\n<ol>\n<li>\n<p>Is there any way to access the field <code>m_Union</code>, and what do you get if you do?</p>\n</li>\n<li>\n<p>Is there any way to separately define <code>actual_measure</code>, and insert it like this:</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Œº_M1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">X</span> <span class=\"n\">M1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">measure_theory.measure.of_measurable</span> <span class=\"n\">_</span> <span class=\"n\">M1</span>\n  <span class=\"o\">(</span><span class=\"n\">actual_measure</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>Why does this cause Lean to go into an infinite loop:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">Œº_M1</span>\n</code></pre></div>\n<p>P.S. I've had a very helpful realization when it comes to reading the code.  I have been trying to \"construct\" objects like distance functions and measures and sigma algebras and so on.  When I see what looks like an object in <code>mathlib</code> with a name like <code>measure</code> or <code>measure_space</code>, the grand realization is that this is, 99% of the time, a proof that that object's axioms hold.  Sometimes but not always the object may hold something like <code>m_Union</code> which represents the thing that is being proven about.  So, understanding that almost all objects in <code>mathlib</code> are proofs makes reading the code a lot easier (except for my questions above).  I came to this realization by <code>#reduce</code>-ing the objects.  However, attempting to <code>#reduce</code> some, like <code>measure</code>, causes Lean to loop.</p>",
        "id": 219292649,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607482787
    }
]