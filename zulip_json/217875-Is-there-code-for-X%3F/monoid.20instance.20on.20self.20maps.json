[
    {
        "content": "<p>I cannot seem to find this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.default</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">function.monoid</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>Is this really missing or am I missing the obvious?</p>",
        "id": 237391570,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620159590
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.monoid\">docs#pi.monoid</a></p>",
        "id": 237392095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620159800
    },
    {
        "content": "<p>I don't think it has the multiplication you want though</p>",
        "id": 237392123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620159822
    },
    {
        "content": "<p>But that's different, right? I'm talking about composing functions.</p>",
        "id": 237392129,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620159824
    },
    {
        "content": "<p>That would have to be a type alias then</p>",
        "id": 237392166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620159840
    },
    {
        "content": "<p>As in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">function.monoid</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span>        <span class=\"o\">:=</span> <span class=\"n\">function.comp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span>  <span class=\"o\">:=</span> <span class=\"n\">function.comp.assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span>        <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 237392215,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620159849
    },
    {
        "content": "<p>or even:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">function.monoid</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span>        <span class=\"o\">:=</span> <span class=\"n\">function.comp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span>  <span class=\"o\">:=</span> <span class=\"n\">function.comp.assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span>        <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">npow</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">],</span>\n  <span class=\"n\">npow_zero'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">npow_succ'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.iterate_succ'</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which leads me to my second question:</p>",
        "id": 237392249,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620159866
    },
    {
        "content": "<p>couldn't we use the above together with <code>monoid.has_pow</code> instead of <code>nat.iterate</code>?</p>",
        "id": 237392315,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620159905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monoid.20instance.20on.20self.20maps/near/237392166\">said</a>:</p>\n<blockquote>\n<p>That would have to be a type alias then</p>\n</blockquote>\n<p>Sorry I was too busy pasting in code and I missed this. I don't follow your point here. What does this mean?</p>",
        "id": 237392529,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620159995
    },
    {
        "content": "<p>If alpha is something like a monoid then probably alpha -&gt; alpha inherits a pointwise monoid structure which is not what you want.</p>",
        "id": 237392663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620160070
    },
    {
        "content": "<p>Oh right I see. Thanks.</p>",
        "id": 237392733,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620160090
    },
    {
        "content": "<p>Yeah,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum_graded</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>and it's not what you want</p>",
        "id": 237392792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620160118
    },
    {
        "content": "<p>PS do you have to fill in <code>npow</code>? Hopefully it happens by magic if you just leave it out.</p>",
        "id": 237392864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620160153
    },
    {
        "content": "<p>Like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.End.monoid\">docs#monoid.End.monoid</a></p>",
        "id": 237392865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620160153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monoid.20instance.20on.20self.20maps/near/237392864\">said</a>:</p>\n<blockquote>\n<p>PS do you have to fill in <code>npow</code>? Hopefully it happens by magic if you just leave it out.</p>\n</blockquote>\n<p>You don't have to fill it in. My second snippet (above the words \"or even\") omitted this.</p>",
        "id": 237393016,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620160224
    },
    {
        "content": "<p>I would check but my lightbulb is broken :-( <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 237393093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620160268
    },
    {
        "content": "<p>I saw that. No ideas I'm afraid.</p>",
        "id": 237393122,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620160288
    },
    {
        "content": "<p>Vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.comm_monoid\">docs#monoid_hom.comm_monoid</a>, which is elementwise</p>",
        "id": 237393384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620160425
    },
    {
        "content": "<p>So I guess you need <code>function.End</code> to exist</p>",
        "id": 237393402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620160438
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 237394255,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620160821
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.single_obj</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">@[derive monoid]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory.End</span> <span class=\"n\">α</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 237405416,
        "sender_full_name": "David Wärn",
        "timestamp": 1620164660
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.End\">docs#category_theory.End</a></p>",
        "id": 237406557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620165274
    }
]