[
    {
        "content": "<p>Why are the API of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.thickening\">docs#metric.thickening</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.cthickening\">docs#metric.cthickening</a> different? In particular, is the following not true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.hausdorff_distance</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A point in a metric space belongs to the (closed) `δ`-thickening of a subset `E` if and only if</span>\n<span class=\"sd\">it is at distance less than `δ` from some point of `E`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_cthickening_iff</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">cthickening</span> <span class=\"n\">δ</span> <span class=\"n\">E</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 268048510,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642182773
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, this is for <a href=\"https://github.com/leanprover-community/mathlib/pull/7288\">#7288</a></p>",
        "id": 268049079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642183068
    },
    {
        "content": "<p>Okay, it indeed seems wrong...</p>",
        "id": 268051662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642184240
    },
    {
        "content": "<p>And I assume I'm missing an outside <code>closure</code> here too?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cthickening_eq_bUnion_closed_ball</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">cthickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">closed_ball</span> <span class=\"n\">x</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mem_bUnion_iff</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mem_cthickening_iff</span> <span class=\"n\">E</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 268051757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642184284
    },
    {
        "content": "<p>For the closed thickening you don't necessarily have a point at distance <code>≤ δ</code>the thickening radius. It's an <code>inf_dist</code> (or <code>inf_edist</code>), so there are points at distance <code>≤ δ + ε</code>for any <code>ε &gt; 0</code>, but the lemma you state is not true in general.</p>",
        "id": 268081579,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1642199088
    },
    {
        "content": "<p>Yeah, I figured out...</p>",
        "id": 268081641,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642199130
    },
    {
        "content": "<p>Btw <a href=\"https://github.com/leanprover-community/mathlib/pull/7288\">#7288</a> is looking nicer and nicer! I'll PR <code>exists_disjoint_thickenings</code> tomorrow.</p>",
        "id": 268081667,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642199158
    },
    {
        "content": "<p>Concretely... The closed <code>37</code>-thickening of the negative reals <code>{x : ℝ | x &lt; 0}</code> contains <code>37</code>, but no negative real is at distance <code>≤ 37</code>from <code>37</code>.</p>",
        "id": 268081791,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1642199210
    },
    {
        "content": "<p>And the same example works to show the need for closure in the second lemma (as you observed). But sorry, I just arrived, and answered before reading two more lines to notice you had it figured out already in the messages after the first question... <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 268082782,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1642199749
    },
    {
        "content": "<p>I wanted something like <code>s + closed_ball 0 ε = cthickening ε s</code> to be true. Do you think I should require <code>s</code> to be closed or take the closure of the LHS?</p>",
        "id": 268082933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642199856
    },
    {
        "content": "<p>So as you observed, in that form it is not true. The open thickenings are much better behaved in this way. How to fix the \"closed thickening / closed ball\" case probably depends on the use case, but since the closed thickening is not generally well behaved with respect to this, are you sure it's what you want to do? (That said, both of your suggested fixes probably work. At least if you replace closed by compact. [EDIT: Sorry, closedness doesn't suffice but compactness indeed does. Below.])</p>",
        "id": 268083134,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1642199995
    },
    {
        "content": "<p>I don't need this, lemma, only the <code>thickening</code> version. I just wanted it for completeness.</p>",
        "id": 268083235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642200045
    },
    {
        "content": "<p>I didn't originally include them, because the closed thickenings are not super well-behaved for things like this, and therefore I did not see those lemmas as very useful. (My most concrete use case is portmanteau theorem, and there I certainly will not use any such closed thickening thing, mosty only getting the closed thickenings as intersections of larger thickenings). But potentially under the <code>is_compact s</code> assumption it is worth including? The other approach is to wait for a use case and then decide.</p>",
        "id": 268083608,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1642200282
    },
    {
        "content": "<p>I guess I'll just wait, then.</p>",
        "id": 268083879,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642200450
    },
    {
        "content": "<p>(Just to correct one thing again, the closedness does not suffice, compactness is the assumption under which it does naturally hold.)</p>",
        "id": 268083910,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1642200480
    },
    {
        "content": "<p>Oh right, always the same funky counterexample. Was on my example sheet last term.</p>",
        "id": 268083983,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642200512
    },
    {
        "content": "<p>One funny thing that I managed to prove is <code>convex ℝ s → convex ℝ (cthickening ε s)</code></p>",
        "id": 268084068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642200561
    },
    {
        "content": "<p>Perhaps a way to summarize these is to say that open thickenings behave well under unions, and closed thickenings behave well under intersections. (And under compactness additional miracles happen.) So maybe one should check if there are enough intersection lemmas for closed thickenings in the API. Or just wait for use cases to decide.</p>",
        "id": 268084954,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1642201096
    },
    {
        "content": "<p>Tomorrow happened <a href=\"https://github.com/leanprover-community/mathlib/pull/11458\">#11458</a></p>",
        "id": 268086304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642201934
    }
]