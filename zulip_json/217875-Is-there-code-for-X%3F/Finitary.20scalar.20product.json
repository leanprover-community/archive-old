[
    {
        "content": "<p>Is there anything to scalar multiply something by finitely many scalars not necessarily living in the same domain?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">smul_comm_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Morally `(∏ i in s, a i) • b`</span>\n<span class=\"kd\">def</span> <span class=\"n\">finset.scalar_prod</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 277718465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649072796
    },
    {
        "content": "<p>This is probably a question for you, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 277718716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649072983
    },
    {
        "content": "<p>i don't recall this one, but you should be able to build this out of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.fold\">docs#finset.fold</a>, right?</p>",
        "id": 277718727,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649072993
    },
    {
        "content": "<p>Can I? My <code>op</code>s are <code>α i → β → β</code>, not <code>β → β → β</code>.</p>",
        "id": 277718840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073050
    },
    {
        "content": "<p>Ah right, it's not quite as easy because it has to be commutative too.</p>",
        "id": 277718988,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649073125
    },
    {
        "content": "<p>But something like this should still work: <code>(s.map (λ i, (• a i))).fold (∘))</code></p>",
        "id": 277719108,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649073201
    },
    {
        "content": "<p>Except of course you can't use <code>finset.map</code> because you can't prove that the <code>a i</code>s are distinct.</p>",
        "id": 277719230,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649073258
    },
    {
        "content": "<p>But <code>(∘)</code> isn't commutative either <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 277719517,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073398
    },
    {
        "content": "<p>Good point, it is commutative on the image but not on the whole of its domain which is what fold requires.</p>",
        "id": 277719594,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649073460
    },
    {
        "content": "<p>My suggestion is then to define it using <code>list.foldr</code> and manually lift it through <code>multiset</code> to <code>finset</code>.</p>",
        "id": 277719664,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649073488
    },
    {
        "content": "<p>Let me drop this missing instance here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 277719676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073498
    },
    {
        "content": "<p>But does that not mean that our <code>finset.fold</code> is not general enough? Or is the additional generality a pain to take care of?</p>",
        "id": 277719749,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073534
    },
    {
        "content": "<p>Is it the same story as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.noncomm_prod\">docs#finset.noncomm_prod</a>? Should we define <code>finset.noncomm_fold</code>?</p>",
        "id": 277719845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073593
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> then</p>",
        "id": 277720039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finitary.20scalar.20product/near/277719749\">said</a>:</p>\n<blockquote>\n<p>But does that not mean that our <code>finset.fold</code> is not general enough? Or is the additional generality a pain to take care of?</p>\n</blockquote>\n<p>We need to add a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/left_commutative\">docs#left_commutative</a> which is restricted to a {fin,multi,}set. Then we should be able to state it in the required generality.</p>",
        "id": 277720127,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649073717
    },
    {
        "content": "<p><code>set.left_commutative</code>?</p>",
        "id": 277720231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073757
    },
    {
        "content": "<p>Or <code>set.left_comm_on</code>, cf. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inj_on\">docs#set.inj_on</a></p>",
        "id": 277720282,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649073790
    },
    {
        "content": "<p>Does it work for you if you use multiset.noncomm_foldr?</p>",
        "id": 277720354,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649073840
    },
    {
        "content": "<p>Would be happy with this.</p>",
        "id": 277720362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073841
    },
    {
        "content": "<p>Oh, do we have all missing ingredients except the <code>finset</code> <del>lift</del> restriction?</p>",
        "id": 277720463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073887
    },
    {
        "content": "<p>Since you're folding, you can use multiset</p>",
        "id": 277720510,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649073916
    },
    {
        "content": "<p>Why so?</p>",
        "id": 277720533,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649073933
    },
    {
        "content": "<blockquote>\n<p>Except of course you can't use <code>finset.map</code> because you can't prove that the <code>a i</code>s are distinct.</p>\n</blockquote>\n<p>You don't have to prove so when you're folding a multiset</p>",
        "id": 277720660,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649073996
    },
    {
        "content": "<p>Regarding the associativity though, that is a generalization you'd need</p>",
        "id": 277720683,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649074018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finitary.20scalar.20product/near/277720533\">said</a>:</p>\n<blockquote>\n<p>Why so?</p>\n</blockquote>\n<p>Since <code>finset</code> is a subtype of <code>multiset</code>.</p>",
        "id": 277720691,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649074022
    },
    {
        "content": "<p>multiset.nonassoc_foldr</p>",
        "id": 277720718,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649074044
    },
    {
        "content": "<p>But right now, multiset.noncomm_foldr makes no typeclass assumptions on the domain or codomain</p>",
        "id": 277720771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649074074
    },
    {
        "content": "<p>It just requires a proof obligation of left commutativity</p>",
        "id": 277720835,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649074094
    },
    {
        "content": "<p>Ah right, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_associative\">docs#is_associative</a> is annoyingly restricted to <code>α → α → α</code>.</p>",
        "id": 277720856,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649074104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finitary.20scalar.20product/near/277720691\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finitary.20scalar.20product/near/277720533\">said</a>:</p>\n<blockquote>\n<p>Why so?</p>\n</blockquote>\n<p>Since <code>finset</code> is a subtype of <code>multiset</code>.</p>\n</blockquote>\n<p>Sorry, I should have made it clearer. Why not defining the <code>finset</code> version when we have a bunch of duplicates already, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod\">docs#finset.prod</a>.</p>",
        "id": 277720956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649074168
    },
    {
        "content": "<p>Ah yes, please also define it for <code>finset</code>!</p>",
        "id": 277721212,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649074295
    },
    {
        "content": "<p>Okay so what is there to do?</p>\n<ul>\n<li>Define <code>set.left_comm_on</code></li>\n<li>Lift <code>multiset.noncomm_fold</code> to <code>finset.noncomm_fold</code> (and same for <code>_right</code>)</li>\n</ul>",
        "id": 277721819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649074601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finitary.20scalar.20product/near/277720683\">said</a>:</p>\n<blockquote>\n<p>Regarding the associativity though, that is a generalization you'd need</p>\n</blockquote>\n<p>I don't understand this, though.</p>",
        "id": 277721840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649074612
    },
    {
        "content": "<p>Do you mean generalizing <code>is_associative</code>?</p>",
        "id": 277721906,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649074665
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.noncomm_prod</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">smul_comm_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- As endomorphisms with multiplication as composition, `((•) a)` and `((•) b)` commute. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_End_commute</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">commute</span> <span class=\"o\">(</span><span class=\"n\">function.End</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">smul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Morally `(∏ i in s, a i) • b`</span>\n<span class=\"kd\">def</span> <span class=\"n\">multiset.scalar_prod</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">function.End</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">multiset.noncomm_prod</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">multiset.mem_map</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">smul_End_commute</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Morally `(∏ i in s, a i) • b`</span>\n<span class=\"kd\">def</span> <span class=\"n\">finset.scalar_prod</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.val.scalar_prod</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 277730954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649079092
    },
    {
        "content": "<p>You can play a huge number of tricks by working in endomorphism monoids</p>",
        "id": 277731292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649079263
    }
]