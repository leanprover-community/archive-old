[
    {
        "content": "<p>Hello. Is it possible to pattern match against propositions? I.e. <code>a &gt; 1 ∨ b = 3</code> to extract metavariables and (in)equalities. I'd like to be able to write constraints in a monad a la <code>do a &lt;- get_arg \"a\", b &lt;- get_arg \"b\", constrain (a &gt; 1 ∨ b = 3)</code> Let say the output is the ANDs-of-ORs-of-maybe-NOTs, as a string, canonicalized after all constraints have been added. I'd be okay with a partial solution which only recognizes some forms of propositions. Such as freely nested ANDs, ORs, and NOTs. But it needs to reduce higher level code, such as <code>a ∈ [1, 2, 3]</code> to ORs.</p>\n<p>If I understand correctly, we can't pattern match directly and would need to use metaprogramming to introduce the metavariables (<code>a</code> and <code>b</code> above) and to decompose the reduced type. But this should be possible. I hope.</p>",
        "id": 212907350,
        "sender_full_name": "SnowFox",
        "timestamp": 1602321869
    },
    {
        "content": "<p>Related. It'd also be nice to be able to write arithmetic constraints too. I.e. <code>3 * a - 2 * b + 5 * z = 0</code>.</p>",
        "id": 212907993,
        "sender_full_name": "SnowFox",
        "timestamp": 1602322903
    },
    {
        "content": "<p>Hmm.. Could double-quote an expression. Not as nice but certainly easier.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212908115,
        "sender_full_name": "SnowFox",
        "timestamp": 1602323070
    },
    {
        "content": "<p><code>rcases</code> can do lots of interesting pattern matching on props</p>",
        "id": 212908525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602323797
    },
    {
        "content": "<p>That said it doesn't exactly match the use case you describe later, which I don't really understand</p>",
        "id": 212908534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602323845
    },
    {
        "content": "<p>what is <code>get_arg</code></p>",
        "id": 212908539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602323864
    },
    {
        "content": "<p>Do you have a simple example of what you would like to do?</p>",
        "id": 212908582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602323908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'd like to be able to write both logical and arithmetic constraints as ordinary propositions, to compile them to a canonicalized inductive type which I can process over. Below an example for each variant.</p>\n<p>(Logical constraint system) Macaroons are a Hash-based credential constructed as a list of caveats where each caveat is an ORs-of-maybe-NOTs and the list is the AND of these. A naive attenuation may append many redundant caveats and grow the size of the credential quickly. Ideally, the attenuating actor can specify their caveats as propositions, then let a higher level canonicalize the prop to ANDs-of-ORs-of-maybe-NOTs, stripping out redundancies. The result should be zero or more caveats appended to the original set. The optimization must be correct / cannot match differently to the naive approach of just appending all caveats.</p>\n<p>Macaroons =&gt; <a href=\"https://research.google/pubs/pub41892/\">https://research.google/pubs/pub41892/</a></p>\n<p>(Arithmetic constraint system) Bulletproofs are zero-knowledge proofs that a set of possibly hidden variables of a rank-1 constraint system satisfy a set of constraints. The cryptography involved is more expensive when there are more gates. Thus the propositions need to be simplified to eliminate redundancies.</p>\n<p>Bulletproofs R1CS =&gt; <a href=\"https://doc-internal.dalek.rs/bulletproofs/notes/r1cs_proof/index.html\">https://doc-internal.dalek.rs/bulletproofs/notes/r1cs_proof/index.html</a></p>\n<p>To summarize: I want to write the potentially redundant constraints as propositions, then eliminate the redundancies at a post-processing stage.</p>",
        "id": 212910016,
        "sender_full_name": "SnowFox",
        "timestamp": 1602326507
    },
    {
        "content": "<p>I mean could you produce some code that approximates what you are attempting to do, perhaps with a <code>sorry</code> where you aren't sure what to put something</p>",
        "id": 212910181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602326743
    },
    {
        "content": "<p>Sorry, yes, crude example I wrote for a friend while explaining macaroons. The <code>get_arg</code> results are typed as <code>fn : string</code> and <code>arg1 : nat</code>. This monad style is not necessary, it just seemed like a natural option.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">fn</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_arg</span> <span class=\"s2\">\"fn\"</span><span class=\"o\">,</span>\n   <span class=\"n\">arg1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_arg</span> <span class=\"s2\">\"1\"</span><span class=\"o\">,</span>\n   <span class=\"n\">constrain</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"s2\">\"f\"</span><span class=\"o\">,</span> <span class=\"s2\">\"g\"</span><span class=\"o\">,</span> <span class=\"s2\">\"h\"</span><span class=\"o\">]),</span>\n   <span class=\"n\">implies</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"s2\">\"f\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212910338,
        "sender_full_name": "SnowFox",
        "timestamp": 1602326984
    },
    {
        "content": "<p>Here <code>implies p q</code> is <code>constrain ((not p) or q)</code>.</p>",
        "id": 212910566,
        "sender_full_name": "SnowFox",
        "timestamp": 1602327312
    },
    {
        "content": "<p>so how is <code>macaroon</code> defined?</p>",
        "id": 212911993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602329710
    },
    {
        "content": "<p>this looks doable, but it is not clear to me where  <code>\"fn\"</code>, <code>\"1\"</code> etc are coming from</p>",
        "id": 212912040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602329772
    },
    {
        "content": "<p>Uh. Connection cut and seems my last message was lost.</p>\n<p>Consider something like this. A caveat is a list of triples containing the key/name, (in)equality, and a value/string; where at least one must be true. Ideally the caveat should be any semi-lattice; but a string key-value should suffice for now.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">caveat</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ors</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">caveats</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">caveat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"n\">hmac_digest</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212913522,
        "sender_full_name": "SnowFox",
        "timestamp": 1602332526
    },
    {
        "content": "<p><code>\"fn\"</code> and <code>\"1\"</code> are the keys for the constraints.</p>",
        "id": 212913657,
        "sender_full_name": "SnowFox",
        "timestamp": 1602332782
    },
    {
        "content": "<p>To reiterate; I want to write <code>Prop</code>s because they are more natural and may not be canonicalized. Whereas the target type is canonically an ANDs-of-ORs-of-maybe-NOTs, or similarly structured when generalized to naturals or integers using less-than or greater-or-equal. Which is still the same thing just more expressive.</p>",
        "id": 212913915,
        "sender_full_name": "SnowFox",
        "timestamp": 1602333208
    },
    {
        "content": "<p>Or generalized further to any semilattice; but that just wouldn't need the <code>caveats.of_prop</code> method and would do its own thing.</p>",
        "id": 212914001,
        "sender_full_name": "SnowFox",
        "timestamp": 1602333316
    },
    {
        "content": "<p>The macaroon <code>tag</code> is computed as the <code>HMAC(previous tag, new caveat)</code> for each caveat appended to the list. The constraint builder would canonicalize and reduce the caveats before committing to them and updating the tag.</p>",
        "id": 212914075,
        "sender_full_name": "SnowFox",
        "timestamp": 1602333445
    },
    {
        "content": "<p>The test above would expand to, with these definitions, lazily treating hmac_digest as nat and <code>arg1</code> of type <code>string</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨[</span>\n    <span class=\"c1\">-- `fn ∈ [\"f\", \"g\", \"h\"]</span>\n    <span class=\"o\">⟨[</span>\n        <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"s2\">\"f\"</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"s2\">\"g\"</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"s2\">\"h\"</span><span class=\"o\">)</span>\n    <span class=\"o\">]⟩,</span>\n    <span class=\"c1\">-- `fn = \"f\" =&gt; arg1 = \"1\"</span>\n    <span class=\"o\">⟨[</span>\n        <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"s2\">\"f\"</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">arg1</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"s2\">\"1\"</span><span class=\"o\">)</span>\n    <span class=\"o\">]⟩</span>\n <span class=\"o\">],</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 212914578,
        "sender_full_name": "SnowFox",
        "timestamp": 1602334393
    },
    {
        "content": "<p>I think the nicest way to get good syntax and parse correctly is to use a tactic wrapper, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n\n<span class=\"kd\">@[derive has_reflect]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">caveat</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ors</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[derive has_reflect]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">caveats</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">caveat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- (tag : hmac_digest)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">macaroon.false</span> <span class=\"o\">:</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[⟨[]⟩]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">macaroon.true</span> <span class=\"o\">:</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">macaroon.and</span> <span class=\"o\">:</span> <span class=\"n\">macaroon</span> <span class=\"bp\">→</span> <span class=\"n\">macaroon</span> <span class=\"bp\">→</span> <span class=\"n\">macaroon</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span> <span class=\"bp\">++</span> <span class=\"n\">c₂</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">macaroon.or</span> <span class=\"o\">:</span> <span class=\"n\">macaroon</span> <span class=\"bp\">→</span> <span class=\"n\">macaroon</span> <span class=\"bp\">→</span> <span class=\"n\">macaroon</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">do</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"o\">[⟨</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">⟩]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">macaroon.sn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨[⟨[(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)]⟩]⟩</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">caveat</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">⟩,</span> <span class=\"n\">string.intercalate</span> <span class=\"s2\">\" ∨ \"</span> <span class=\"bp\">$</span> <span class=\"n\">l.map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">to_string</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"s2\">\" = \"</span> <span class=\"k\">else</span> <span class=\"s2\">\" ≠ \"</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">s</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">string.intercalate</span> <span class=\"s2\">\" ∧</span><span class=\"se\">\\n</span><span class=\"s2\"> \"</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">m</span><span class=\"o\">)⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">macaroonify_core</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">macaroon</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span> <span class=\"n\">transparency.all</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">∧</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">macaroon.and</span> <span class=\"k\">else</span> <span class=\"n\">macaroon.or</span><span class=\"o\">)</span>\n      <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">macaroonify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">macaroonify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">∨</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">macaroon.or</span> <span class=\"k\">else</span> <span class=\"n\">macaroon.and</span><span class=\"o\">)</span>\n      <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">macaroonify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">macaroonify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">→</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">macaroon.or</span> <span class=\"k\">else</span> <span class=\"n\">macaroon.and</span><span class=\"o\">)</span>\n      <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">macaroonify_core</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">macaroonify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">macaroon.false</span> <span class=\"k\">else</span> <span class=\"n\">macaroon.true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">macaroon.true</span> <span class=\"k\">else</span> <span class=\"n\">macaroon.false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">a.is_local_constant</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"n\">pb</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">macaroon.sn</span> <span class=\"n\">a.local_pp_name</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">pb</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">b.is_local_constant</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"n\">pa</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">macaroon.sn</span> <span class=\"n\">b.local_pp_name</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">pa</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">failed</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.macaroonify</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">open_lambdas</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">macaroonify_core</span> <span class=\"n\">e</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">macaroon</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">macaroonify</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span> <span class=\"n\">arg1</span><span class=\"o\">,</span>\n  <span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"s2\">\"f\"</span><span class=\"o\">,</span> <span class=\"s2\">\"g\"</span><span class=\"o\">,</span> <span class=\"s2\">\"h\"</span><span class=\"o\">]</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"s2\">\"f\"</span> <span class=\"bp\">→</span> <span class=\"n\">arg1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- (fn = \"f\" ∨ fn = \"g\" ∨ fn = \"h\") ∧</span>\n<span class=\"c1\">--  (fn ≠ \"f\" ∨ arg1 = 1)</span>\n</code></pre></div>",
        "id": 212917905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602339054
    },
    {
        "content": "<p>This... looks like exactly what I wanted, thanks. Just no <code>open_lambdas</code>. This intended as a sorry or missing an import?</p>",
        "id": 212918048,
        "sender_full_name": "SnowFox",
        "timestamp": 1602339258
    },
    {
        "content": "<p>Missing import I guess. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/binder_matching.html\">https://leanprover-community.github.io/mathlib_docs/tactic/binder_matching.html</a></p>",
        "id": 212918323,
        "sender_full_name": "SnowFox",
        "timestamp": 1602339764
    },
    {
        "content": "<p>Ah, I'm a few weeks too late!</p>",
        "id": 212918392,
        "sender_full_name": "SnowFox",
        "timestamp": 1602339884
    },
    {
        "content": "<p>After updating mathlib, I can confirm it works. Thanks again! Exactly what I was after. :)</p>",
        "id": 212919375,
        "sender_full_name": "SnowFox",
        "timestamp": 1602341521
    },
    {
        "content": "<p>The <code>whnf</code> normalization trick is really pretty. It had me wondering how nots were handled, needed to add a <code>tactic.trace e</code> to see what it presented the match. Elegant. :D</p>",
        "id": 212937907,
        "sender_full_name": "SnowFox",
        "timestamp": 1602369342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This produces garbage with inequalities on the LHS of an implication. Any idea how to fix this? I.e. <code>not a = 1 -&gt; b = 2</code> =&gt; <code>(a = 1 or b = 2) and (b = 2)</code>.</p>",
        "id": 212947554,
        "sender_full_name": "SnowFox",
        "timestamp": 1602388967
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 212947696,
        "sender_full_name": "SnowFox",
        "timestamp": 1602389233
    },
    {
        "content": "<p>I can't replicate the issue</p>",
        "id": 212949586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602393461
    },
    {
        "content": "<p>but be aware that I changed the code snippet above after you first saw it, because there was a bug in the translation of <code>true</code> and <code>false</code> when in negative mode</p>",
        "id": 212949624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602393503
    },
    {
        "content": "<p>Ah. I didn't notice the update. This fixes the issue. Thanks. :)</p>",
        "id": 212949850,
        "sender_full_name": "SnowFox",
        "timestamp": 1602394016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I've generalized it a bit to just Conjunctive Normal Form (instead of specifically macaroons). Added <code>&lt;-&gt;</code> and it now rejects bad inputs with descriptive errors. I.e. these are invalid <code>λ a, a = not a string ∧ b = \"b may exist but isn't a valid constraint name\"</code>. Next step: generalize to linear (in)equalities. For maximization, minimization and validation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n\n<span class=\"kd\">@[derive has_reflect]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">cnf</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ands_of_ors_of_maybe_nots</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cnf.false</span> <span class=\"o\">:</span> <span class=\"n\">cnf</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[[]]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">cnf.true</span> <span class=\"o\">:</span> <span class=\"n\">cnf</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">cnf.and</span> <span class=\"o\">:</span> <span class=\"n\">cnf</span> <span class=\"bp\">→</span> <span class=\"n\">cnf</span> <span class=\"bp\">→</span> <span class=\"n\">cnf</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span> <span class=\"bp\">++</span> <span class=\"n\">c₂</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">cnf.or</span> <span class=\"o\">:</span> <span class=\"n\">cnf</span> <span class=\"bp\">→</span> <span class=\"n\">cnf</span> <span class=\"bp\">→</span> <span class=\"n\">cnf</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">c₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">do</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">cnf.sn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cnf</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨[[(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)]]⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">cnf</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">string.intercalate</span> <span class=\"s2\">\" ∧</span><span class=\"se\">\\n</span><span class=\"s2\"> \"</span>\n  <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">),</span>\n    <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">string.intercalate</span> <span class=\"s2\">\" ∨ \"</span> <span class=\"bp\">$</span> <span class=\"n\">x.map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">⟩,</span>\n          <span class=\"n\">to_string</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"s2\">\" = \"</span> <span class=\"k\">else</span> <span class=\"s2\">\" ≠ \"</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n        <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">m</span><span class=\"o\">)⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cnfify_core</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">cnf</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span> <span class=\"n\">transparency.all</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- tactic.trace e,</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">∧</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">cnf.and</span> <span class=\"k\">else</span> <span class=\"n\">cnf.or</span><span class=\"o\">)</span>\n      <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span>\n      <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">∨</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">cnf.or</span> <span class=\"k\">else</span> <span class=\"n\">cnf.and</span><span class=\"o\">)</span>\n      <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span>\n      <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">→</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">cnf.or</span> <span class=\"k\">else</span> <span class=\"n\">cnf.and</span><span class=\"o\">)</span>\n      <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n      <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">↔</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">cnf.and</span>\n      <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">((</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">cnf.or</span> <span class=\"k\">else</span> <span class=\"n\">cnf.and</span><span class=\"o\">)</span>\n        <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n        <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n      <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">((</span><span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">cnf.or</span> <span class=\"k\">else</span> <span class=\"n\">cnf.and</span><span class=\"o\">)</span>\n        <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n        <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">cnf.false</span> <span class=\"k\">else</span> <span class=\"n\">cnf.true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"n\">cnf.true</span> <span class=\"k\">else</span> <span class=\"n\">cnf.false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">args</span> <span class=\"k\">then</span>\n      <span class=\"k\">do</span> <span class=\"n\">ba</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">whnf</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n         <span class=\"n\">pb</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">pp</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">ba.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">string_imp.mk</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">cnf.sn</span> <span class=\"n\">a.local_pp_name</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">pb</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">fail</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Expected string; found: \"</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">pb</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">fail</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Expected one of: \"</span>\n        <span class=\"bp\">++</span> <span class=\"n\">string.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">(</span><span class=\"n\">args.map</span> <span class=\"n\">to_string</span><span class=\"o\">)</span>\n        <span class=\"bp\">++</span> <span class=\"s2\">\"; found: \"</span> <span class=\"bp\">++</span> <span class=\"n\">a.local_pp_name.to_string</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"Unhandled proposition?\"</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.cnfify</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">open_lambdas</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">args</span> <span class=\"n\">e</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cnfify</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span> <span class=\"n\">arg1</span><span class=\"o\">,</span>\n  <span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"s2\">\"f\"</span><span class=\"o\">,</span> <span class=\"s2\">\"g\"</span><span class=\"o\">,</span> <span class=\"s2\">\"h\"</span><span class=\"o\">]</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"s2\">\"f\"</span> <span class=\"bp\">→</span> <span class=\"n\">arg1</span> <span class=\"bp\">=</span> <span class=\"s2\">\"1\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cnfify</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span> <span class=\"n\">target</span> <span class=\"n\">message</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- we may send and receive messages</span>\n  <span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"s2\">\"send\"</span><span class=\"o\">,</span> <span class=\"s2\">\"recv\"</span><span class=\"o\">]</span> <span class=\"bp\">∧</span>\n  <span class=\"c1\">-- if we send a message to alice, the message must be \"Hello\"</span>\n  <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"s2\">\"send\"</span> <span class=\"bp\">∧</span> <span class=\"n\">target</span> <span class=\"bp\">=</span> <span class=\"s2\">\"alice\"</span> <span class=\"bp\">→</span> <span class=\"n\">message</span> <span class=\"bp\">=</span> <span class=\"s2\">\"Hello\"</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"c1\">-- we can only receive messages as bob</span>\n  <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"s2\">\"recv\"</span> <span class=\"bp\">→</span> <span class=\"n\">target</span> <span class=\"bp\">=</span> <span class=\"s2\">\"bob\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212950903,
        "sender_full_name": "SnowFox",
        "timestamp": 1602396267
    },
    {
        "content": "<p>I think your translation of <code>&lt;-&gt;</code> isn't correct. When in positive mode <code>p &lt;-&gt; q</code> should translate to <code>(!p \\/ q) /\\ (!q \\/ p)</code>, which looks ok, but in negative mode it should translate to <code>(p \\/ q) /\\ (!p \\/ !q)</code>, while you are currently translating to <code>(p /\\ !q) /\\  (q /\\ !p)</code></p>",
        "id": 212951020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602396581
    },
    {
        "content": "<p>The <code>pos</code> argument is supposed to negate the whole proposition when false, so <code>&lt;-&gt;</code> should translate to xor in negative mode</p>",
        "id": 212951069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602396637
    },
    {
        "content": "<p>otherwise it looks good</p>",
        "id": 212951085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602396686
    },
    {
        "content": "<p>Oops, nice catch.</p>",
        "id": 212951131,
        "sender_full_name": "SnowFox",
        "timestamp": 1602396761
    },
    {
        "content": "<p>Hmm. I've adjusted it as follows but this just produces contradictions. <code>a = 1 and b = 2 and a /= 1 and b /= 2</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">↔</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span>\n      <span class=\"n\">cnf.and</span>\n        <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">cnf.or</span>\n          <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">ff</span>\n          <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n        <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">cnf.or</span>\n          <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">ff</span>\n          <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">cnf.and</span>\n        <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">cnf.and</span>\n          <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">tt</span>\n          <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n        <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">cnf.and</span>\n          <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">ff</span>\n          <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212951385,
        "sender_full_name": "SnowFox",
        "timestamp": 1602397384
    },
    {
        "content": "<p>For <code>not (a = \"1\" &lt;-&gt; b = \"2\")</code></p>",
        "id": 212951388,
        "sender_full_name": "SnowFox",
        "timestamp": 1602397421
    },
    {
        "content": "<p>Er duh. <code>cnf.or</code>***</p>",
        "id": 212951450,
        "sender_full_name": "SnowFox",
        "timestamp": 1602397530
    },
    {
        "content": "<p>All good now :)</p>",
        "id": 212951459,
        "sender_full_name": "SnowFox",
        "timestamp": 1602397548
    },
    {
        "content": "<p>Not quite.. fixed for real. :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">↔</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">cnf.and</span>\n        <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">cnf.or</span>\n          <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n          <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n        <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">cnf.or</span>\n          <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span>\n          <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212951696,
        "sender_full_name": "SnowFox",
        "timestamp": 1602398038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> BTW: It seemed necessary to switch from <code>tactic cnf</code> to <code>tactic expr</code> to support returning arbitrary expressions from the RHS of <code>=</code>. For instance, this now works as expected without returning <code>\"to_string 1\"</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_string</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">cnfify</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span>\n</code></pre></div>\n\n<p>Do you have any tips to clean it up? Notably the <code> return `(cnf.sn %%`(a.local_pp_name) %%`(pos) %%b) </code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cnfify_core</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span> <span class=\"n\">transparency.all</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">∧</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span><span class=\"o\">,</span>\n    <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.and</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.or</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">∨</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span><span class=\"o\">,</span>\n    <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.or</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.and</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">→</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">pos</span><span class=\"o\">),</span>\n    <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">pos</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.or</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.and</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">↔</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">pos</span><span class=\"o\">),</span>\n    <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n    <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₁</span> <span class=\"n\">pos</span><span class=\"o\">,</span>\n    <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">cnfify_core</span> <span class=\"n\">e₂</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.and</span> <span class=\"o\">(</span><span class=\"n\">cnf.or</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cnf.or</span> <span class=\"bp\">%%</span><span class=\"n\">c</span> <span class=\"bp\">%%</span><span class=\"n\">d</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.false</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.true</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.true</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.false</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">args</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">type</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.sn</span> <span class=\"bp\">%%`</span><span class=\"o\">(</span><span class=\"n\">a.local_pp_name</span><span class=\"o\">)</span> <span class=\"bp\">%%`</span><span class=\"o\">(</span><span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"k\">do</span>\n        <span class=\"n\">pb</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">to_string</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">pp</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">pt</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">to_string</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">pp</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n        <span class=\"n\">fail</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Expected string; found: \"</span> <span class=\"bp\">++</span> <span class=\"n\">pb</span> <span class=\"bp\">++</span> <span class=\"s2\">\" of type \"</span> <span class=\"bp\">++</span> <span class=\"n\">pt</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">fail</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Invalid variable; expected one of: \"</span>\n        <span class=\"bp\">++</span> <span class=\"n\">string.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">(</span><span class=\"n\">args.map</span> <span class=\"n\">to_string</span><span class=\"o\">)</span>\n        <span class=\"bp\">++</span> <span class=\"s2\">\"; found: \"</span> <span class=\"bp\">++</span> <span class=\"n\">a.local_pp_name.to_string</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"Unhandled proposition?\"</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.cnfify</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">open_lambdas</span><span class=\"o\">,</span>\n  <span class=\"n\">cnfify_core</span> <span class=\"n\">args</span> <span class=\"n\">e</span> <span class=\"n\">tt</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span>\n</code></pre></div>",
        "id": 212993185,
        "sender_full_name": "SnowFox",
        "timestamp": 1602471242
    },
    {
        "content": "<p>OOps that should read as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">a.local_pp_name</span> <span class=\"k\">in</span>\n        <span class=\"n\">return</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.sn</span> <span class=\"bp\">%%`</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%%`</span><span class=\"o\">(</span><span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Necessary because <code>a.local_pp_name</code> is meta and I don't want that meta to leak into the result.</p>",
        "id": 212993374,
        "sender_full_name": "SnowFox",
        "timestamp": 1602471512
    },
    {
        "content": "<p>The dynamic handling falls apart if the tactic can't reduce it to the terms it matches; so this fails.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cnfify</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n<p>But it is really nice that I could just implement this. Adding it to the special cases, but there will likely be more and it could be a bad objective to try to handle everything. More dynamic code should probably construct the CNF itself, without this sugar.</p>",
        "id": 212993773,
        "sender_full_name": "SnowFox",
        "timestamp": 1602472150
    },
    {
        "content": "<p>Hm. Counterexample discovered. <code>cnfify λ a b, (a = \"1\" -&gt; b = \"1\") \\or (a = \"2\" -&gt; b = \"2\")</code> compiles to <code>(a /= \"1\" or b = \"1\" or a /= \"2\" or b = \"2\")</code> which incorrectly accepts <code>a = \"1\" and b = 2</code>.</p>",
        "id": 212998188,
        "sender_full_name": "SnowFox",
        "timestamp": 1602479004
    },
    {
        "content": "<p>Actually I'm not sure if it is incorrect... <code>a = \"1\" and b = \"2\"</code> does indeed satisfy the right implication.</p>",
        "id": 212998558,
        "sender_full_name": "SnowFox",
        "timestamp": 1602479532
    },
    {
        "content": "<p>Just a weird concept to think of, heh.</p>",
        "id": 212998564,
        "sender_full_name": "SnowFox",
        "timestamp": 1602479547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328454\">@SnowFox</span> I sort of dodged the question of how you want to represent the RHS of the CNF equalities. All your examples so far have been integers or strings, so if that is sufficient you can evaluate the expression at the appropriate type, which would allow running arbitrary string returning functions like <code>to_string 1</code></p>",
        "id": 212999389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602480863
    },
    {
        "content": "<p>My current code with a few working as intended examples. These do run the arbitrary code. Just nothing \"too dynamic\" as demonstrated above where we can't reduce around an unknown list; but we can reduce around promised terms so long that their eventual result has type string.  <a href=\"https://gist.github.com/1fe4300d59a830320f603ab3f5a9a0b6\">https://gist.github.com/1fe4300d59a830320f603ab3f5a9a0b6</a></p>",
        "id": 212999533,
        "sender_full_name": "SnowFox",
        "timestamp": 1602481136
    },
    {
        "content": "<p>I'm not sure what you mean by evaluating the expression at the appropriate type? Do you mean the <code>tactic cnf</code> variant could evaluate the expression to produce its string in its result?</p>",
        "id": 212999619,
        "sender_full_name": "SnowFox",
        "timestamp": 1602481301
    },
    {
        "content": "<p>If so, then I don't think that'd cover the first two examples in this file. Which both work as intended with the <code>tactic expr</code> variant.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cnfify</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span> <span class=\"n\">arg1</span><span class=\"o\">,</span>\n  <span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"s2\">\"f\"</span><span class=\"o\">,</span> <span class=\"s2\">\"g\"</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"s2\">\"f\"</span> <span class=\"bp\">→</span> <span class=\"n\">arg1</span> <span class=\"bp\">=</span> <span class=\"s2\">\"1\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_string</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">cnfify</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 212999696,
        "sender_full_name": "SnowFox",
        "timestamp": 1602481432
    },
    {
        "content": "<p>If you stick this in the variable case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">if</span> <span class=\"n\">type</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">a.local_pp_name</span><span class=\"o\">,</span>\n          <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">eval_expr'</span> <span class=\"n\">string</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n          <span class=\"n\">return</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cnf.new</span> <span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>it works here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cnfify</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_string</span>\n<span class=\"k\">#print</span> <span class=\"n\">F</span>\n<span class=\"c1\">-- def F : ℕ → cnf :=</span>\n<span class=\"c1\">-- λ (n : ℕ),</span>\n<span class=\"c1\">--   (cnf.new (name.mk_string \"fn\" name.anonymous) tt \"1\").or</span>\n<span class=\"c1\">--     ((cnf.new (name.mk_string \"fn\" name.anonymous) tt (to_string n)).or</span>\n<span class=\"c1\">--        ((cnf.new (name.mk_string \"fn\" name.anonymous) tt \"3\").or cnf.false))</span>\n</code></pre></div>",
        "id": 212999868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602481671
    },
    {
        "content": "<p>It's kind of a hack, but here we are either evaluating the string or sticking the expression inline</p>",
        "id": 212999930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602481743
    },
    {
        "content": "<p>Right, but if I understand correctly this wouldn't work in the <code>tactic cnf</code> case due to the <code>return b</code> part. It'd only work when the expression can be reduced to a string. Thus little benefit to adding this tweak to my current code. The hack might be useful to reduce computation at runtime if the virtual machine doesn't hold onto a partially reduced program.</p>",
        "id": 213000272,
        "sender_full_name": "SnowFox",
        "timestamp": 1602482189
    },
    {
        "content": "<p>Thanks for the <code>eval_expr'</code> tip, I was looking for this earlier but didn't find it.</p>",
        "id": 213000496,
        "sender_full_name": "SnowFox",
        "timestamp": 1602482449
    },
    {
        "content": "<p>That's about right. It falls back to the behavior that you originally wrote, so it's really just a fancy inliner</p>",
        "id": 213000697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602482734
    },
    {
        "content": "<p>Where are these magical constants defined? In the C++? <code>tactic.eval_expr``tactic.whnf</code> et al.</p>",
        "id": 213000707,
        "sender_full_name": "SnowFox",
        "timestamp": 1602482760
    },
    {
        "content": "<p>Fancy inliner, yes. Unnecessary here but certainly useful for other uses.</p>",
        "id": 213000759,
        "sender_full_name": "SnowFox",
        "timestamp": 1602482786
    },
    {
        "content": "<p><code>eval_expr</code> and <code>whnf</code> are in core, <code>init.meta.tactic</code></p>",
        "id": 213000764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602482814
    },
    {
        "content": "<p>if you have vscode you should be able to ctrl-click on definitions to go to the source</p>",
        "id": 213000780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602482837
    },
    {
        "content": "<p><code>eval_expr'</code> is a mathlib patch of <code>eval_expr</code> because it has a bug</p>",
        "id": 213000797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602482876
    },
    {
        "content": "<p>I mean, I did exactly that and they are just <code>constant</code>, not code. Yet we use them as code. Are they defined in the C++ or are they just ordinary constants being reduced by other code?</p>",
        "id": 213000853,
        "sender_full_name": "SnowFox",
        "timestamp": 1602482918
    },
    {
        "content": "<p>they are in C++</p>",
        "id": 213000860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602482927
    },
    {
        "content": "<p>Okay.</p>",
        "id": 213000864,
        "sender_full_name": "SnowFox",
        "timestamp": 1602482935
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/eval.cpp\">https://github.com/leanprover-community/lean/blob/master/src/library/tactic/eval.cpp</a></p>",
        "id": 213000902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602483002
    },
    {
        "content": "<p>the <code>DECLARE_VM_BUILTIN</code> at the bottom is what hooks the big <code>eval()</code> function to the lean constant</p>",
        "id": 213000951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602483046
    },
    {
        "content": "<p>Speaking of the C++.. is there an ETA for Lean 4? ;)</p>",
        "id": 213000960,
        "sender_full_name": "SnowFox",
        "timestamp": 1602483061
    },
    {
        "content": "<p>heh, don't ask me, I'm just the rumor mill</p>",
        "id": 213000985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602483116
    },
    {
        "content": "<p>:)</p>",
        "id": 213001036,
        "sender_full_name": "SnowFox",
        "timestamp": 1602483138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't mean to push but I'm not sure how the pings work on zulip. I've pinged you in the RISC-V ISA thread. <a href=\"#narrow/stream/236449-Program-verification/topic/RISC-V.20ISA.20in.20Lean/near/213000987\">https://leanprover.zulipchat.com/#narrow/stream/236449-Program-verification/topic/RISC-V.20ISA.20in.20Lean/near/213000987</a></p>",
        "id": 213001404,
        "sender_full_name": "SnowFox",
        "timestamp": 1602483623
    },
    {
        "content": "<p>Pings are cheap. I use 100 pings per day (-;</p>",
        "id": 213001424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602483649
    },
    {
        "content": "<p>so you have</p>",
        "id": 213001464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602483695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Do they raise any indication that you've been ping'd?</p>",
        "id": 213001479,
        "sender_full_name": "SnowFox",
        "timestamp": 1602483717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328454\">@SnowFox</span> yup</p>",
        "id": 213001550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602483781
    },
    {
        "content": "<p>You can see them in the menu under <code>Mentions</code></p>",
        "id": 213001565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602483798
    },
    {
        "content": "<p>And the message get's a red background</p>",
        "id": 213001569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602483806
    },
    {
        "content": "<p>Thanks. I've noticed the red but didn't notice the mentions... Actually, not sure it even lit up before I switched back here.</p>",
        "id": 213001757,
        "sender_full_name": "SnowFox",
        "timestamp": 1602483995
    },
    {
        "content": "<p>it only lights up if you have unread mentions</p>",
        "id": 213001873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602484139
    },
    {
        "content": "<p>but you can click on mentions and see them all</p>",
        "id": 213001886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602484154
    }
]