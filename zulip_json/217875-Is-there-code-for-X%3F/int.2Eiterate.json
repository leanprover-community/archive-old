[
    {
        "content": "<p>I somehow found the group theory game, and looking through its files (specifically, the definition of power), and saw that it uses <code>int.iterate</code>, but I cant find such a method in the mathlib documentation, nor in my installation. Does this function actually exist, or is it made up for the game?</p>",
        "id": 227096385,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613833277
    },
    {
        "content": "<p>The parts that matter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">int.iterate</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mygroup</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n\n<span class=\"sd\">/-- left multiplication is a bijection-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">lmul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pow</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">iterate</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lmul</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 227096398,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613833307
    },
    {
        "content": "<p>Part of the game: <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/int/iterate.lean\">https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/int/iterate.lean</a></p>",
        "id": 227096525,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1613833434
    },
    {
        "content": "<p>Ah, thank you! no idea how I missed that ^^'. This method seems useful though, is there a reason why we don't have something like that in matlib\\stdlib?</p>",
        "id": 227096633,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613833540
    },
    {
        "content": "<p>ah, nvm, looked through the file</p>",
        "id": 227096702,
        "sender_full_name": "Ariel Fridman",
        "timestamp": 1613833598
    },
    {
        "content": "<p>There's a couple of things that iterate with <code>nat</code>s; I don't know if anyone's had a use case in mathlib for the <code>int</code> variant</p>",
        "id": 227096864,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1613833793
    },
    {
        "content": "<p>Oh this was just one of the experiments we did. It's a total cheat IIRC because it uses Lean groups to make it, and then we use it to make our own group theory development.</p>",
        "id": 227104271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613840813
    },
    {
        "content": "<p>OTOH I could totally imagine making an actual <code>int.iterate</code> independent of group theory, it's some kind of lambda calculus way of thinking about int I think, I forgot the details. The docs are a bit mangled in that file, I introduced a notation {{n}}^f for the n'th iterate of f because I wanted to experiment with the integer on the left, but I remember it drove Jason nuts and it looks like he deleted it :-) My logic was that there are problems with to_additive when it comes to pow v smul because g^n has n on the right and n \\bub g has n on the left.</p>",
        "id": 227104507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613841040
    }
]