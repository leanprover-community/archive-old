[
    {
        "content": "<p>It would be nice if <code>fin 3 -&gt; nat</code> could inherit nat subtraction element wise, but there is no typeclass that axiomatizes nat subtraction, meaning that there are no lemmas that would automatically be applicable. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.nat_sub\">docs#finsupp.nat_sub</a> is something that could benefit from this.</p>",
        "id": 227104517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613841066
    },
    {
        "content": "<p>You could still give pi-types an elementwise <code>has_sub</code>, right?</p>",
        "id": 227105588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613842276
    },
    {
        "content": "<p>Yes, but it would be nice to show that <code>a - 0 = a</code>, <code>a - a = 0</code>, and <code>0 - a = 0</code> for the pi type too</p>",
        "id": 227107160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613843990
    },
    {
        "content": "<p>And be able to use the same lemma name for those rewrites on both nat and pi-types-to-nat</p>",
        "id": 227107233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613844026
    },
    {
        "content": "<p>We should call it <code>monud</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 227107246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613844060
    },
    {
        "content": "<p>I guess I'm asking for two typeclasses, since the first two of those axioms are satisfied by add_group, but the latter diverges</p>",
        "id": 227107350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613844146
    },
    {
        "content": "<p>So nat would implement <code>saturated_sub</code>, and both saturated_sub and add_group implement <code>cancel_sub</code> or something</p>",
        "id": 227107410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613844221
    },
    {
        "content": "<p>the first one seems like it should be an extension of add_cancel_monoid satisfying <code>a + b - b = a</code></p>",
        "id": 227107471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613844256
    },
    {
        "content": "<p>Isn't there a <code>pi.semiring</code> instance?</p>",
        "id": 227107617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613844434
    },
    {
        "content": "<p>Oh sorry, semiring doesn't have sub</p>",
        "id": 227107632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613844454
    },
    {
        "content": "<p>(yet another reason why no one should ever use nat sub...)</p>",
        "id": 227107650,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613844481
    },
    {
        "content": "<p>There are pi instances for most typeclasses - the issue is that there is no typeclass that nat subtraction satisfies, so pi instances can't inherit any lemmas about it</p>",
        "id": 227108794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613845669
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cancellative_semiring\">docs#cancellative_semiring</a> ?</p>",
        "id": 227109233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613846117
    },
    {
        "content": "<p>I guess not, but if we did you could define subtraction on such things similarly to nat subtraction (sending something to zero when it doesn't make sense)</p>",
        "id": 227109293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613846172
    },
    {
        "content": "<p>Then define the ring-completion and prove that a cancellative semiring embeds in its ring completion, thereby generalizing a bunch of results about the interaction between nat and int</p>",
        "id": 227109333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613846229
    },
    {
        "content": "<p>Here's some precedent <a href=\"https://en.wikipedia.org/wiki/Monus\">https://en.wikipedia.org/wiki/Monus</a> (the long version of <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s suggested name might be  <code>comm_add_monoid_with_monus</code>)</p>",
        "id": 227109380,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613846283
    },
    {
        "content": "<p>In this version, <code>comm_add_monoid_with_monus</code> starts with a <code>comm_add_monoid</code> whose addition operation defines a partial order, and then <code>a - b</code> is the least <code>c</code> that solves <code>a &lt;= b + c</code></p>",
        "id": 227109571,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613846470
    },
    {
        "content": "<p>I don't think this axiomatizes <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s original use case though.</p>",
        "id": 227109589,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613846505
    }
]