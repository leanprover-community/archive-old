[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_of_range_eq_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">set.range</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hfg</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ht</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- mainly looking for this one</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_strict_mono_of_range_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">set.range</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ne.lt_or_lt</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">exists_of_range_eq_range</span> <span class=\"n\">hfg</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hmi</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hg.lt_iff_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"n\">m</span> <span class=\"n\">hmi</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hf.lt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hmi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"n\">hmi</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">exists_of_range_eq_range</span> <span class=\"n\">hfg.symm</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hmi</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hf.lt_iff_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"n\">m</span> <span class=\"n\">hmi</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hg.lt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hmi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"n\">hmi</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can't seem to find this in mathlib at the moment.</p>",
        "id": 228048424,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1614420917
    },
    {
        "content": "<p>Perhaps <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/order/order_iso_nat.html\">https://leanprover-community.github.io/mathlib_docs/order/order_iso_nat.html</a><br>\nis useful.  It contains related results.  For example, your result is equivalent to the fact that the embedding constructed in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.order_embedding_of_set\">docs#nat.order_embedding_of_set</a> is unique.</p>",
        "id": 228066989,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614442267
    },
    {
        "content": "<p>Another phrasing:  there exists a unique strict-mono function (or, a unique order-iso) from <code>ℕ</code> to itself.  It seems mathlib has these for <code>fin</code>:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.strict_mono_unique\">docs#fin.strict_mono_unique</a> <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.order_embedding_eq\">docs#fin.order_embedding_eq</a> <br>\nbut I don't see the result for <code>ℕ</code>.</p>",
        "id": 228067626,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614442974
    }
]