[
    {
        "content": "<p>I'm developing an API for graded rings as part of the liquid project, so I'm having to learn about <code>dfinsupp</code> (and about time too). <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has already done a lot of the groundwork -- thanks Eric. I realised yesterday that actually in some cases I want to switch back from dfinsupp to finsupp, but I don't know how to do it. Here's a little API I've been building but the very top definition and theorem are sorried. Am I approaching this correctly? Is there a slick way of filling in the top sorries? I am still a bit scared of quotients, although I'm much more confident now having taught a workshop on them!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.dfinsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum_graded</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- This would probably be enough for me to get started</span>\n<span class=\"kd\">def</span> <span class=\"n\">dfinsupp.to_finsupp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- defining property</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">dfinsupp.to_finsupp_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π₀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.to_finsupp</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- monoid variant</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">dfinsupp.to_finsupp.add_monoid_hom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp.to_finsupp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dfinsupp.to_finsupp_apply</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dfinsupp.to_finsupp_apply</span><span class=\"o\">]</span> <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"c1\">-- This seems natural</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">dfinsupp.to_finsupp_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom.comp</span> <span class=\"n\">dfinsupp.to_finsupp.add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp.map_range.add_monoid_hom</span> <span class=\"n\">φ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- the definition I actually want</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">direct_sum.add_submonoid_to_finsupp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp.to_finsupp_monoid_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235951401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619251322
    },
    {
        "content": "<p>I have a PR that adds precisely the definition in the title of this thread</p>",
        "id": 235951526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619251432
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7311\">#7311</a></p>",
        "id": 235951579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619251460
    },
    {
        "content": "<p>I'm really sorry! I find the PR queue a bit overwhelming. Many thanks!</p>\n<p>I think that <code>direct_sum.add_submonoid_to_finsupp</code> is somehow a fundamental thing: for example <code>direct_sum.to_add_monoid</code> is just <code>finsupp.sum</code> of <code>direct_sum.add_submonoid_to_finsupp</code>.</p>",
        "id": 235951679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619251581
    },
    {
        "content": "<p>I started with that definition too in <a href=\"https://github.com/leanprover-community/mathlib/issues/7217\">#7217</a>, but Johan made me question whether it was really more fundamental than plain to_finsupp</p>",
        "id": 235951834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619251742
    },
    {
        "content": "<p>Also there are computability and elaborator dragons all over the place</p>",
        "id": 235951860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619251770
    },
    {
        "content": "<p><code>dfinsupp</code> is entirely computable, finsupp is almost entirely not</p>",
        "id": 235951919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619251820
    }
]