[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  what is the status of smooth bump function in vector spaces? I can find a lot of topological stuff and some manifold stuff, but not the intermediate vector space notion. Specifically I have a compact set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> in a finite dimensional real vector space and a neighborhood <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, do we have a smooth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>-value function which equals <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> near <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and has compact support inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>?</p>",
        "id": 272532308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645293439
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_smooth_zero_one_of_closed\">docs#exists_smooth_zero_one_of_closed</a></p>",
        "id": 272532859,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294026
    },
    {
        "content": "<p>And use the fact that a vector space is a manifold.</p>",
        "id": 272532928,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294087
    },
    {
        "content": "<p>Do you mean we actually have this for manifolds but not for vector spaces?</p>",
        "id": 272532958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645294134
    },
    {
        "content": "<p>This doesn't seem reasonable to import manifold theory for this</p>",
        "id": 272532979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645294163
    },
    {
        "content": "<p>We have bump function supported on a ball for a vector space.</p>",
        "id": 272532987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294168
    },
    {
        "content": "<p>I don't see how to prove this lemma for manifolds without having a simpler proof for vector spaces.</p>",
        "id": 272533045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645294205
    },
    {
        "content": "<p>The proof for vector spaces (and closed sets, not closed balls) is the same as for manifolds.</p>",
        "id": 272533073,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294268
    },
    {
        "content": "<p>The main lemma is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smooth_bump_covering.exists_is_subordinate\">docs#smooth_bump_covering.exists_is_subordinate</a>.</p>",
        "id": 272533162,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294366
    },
    {
        "content": "<p>Why importing manifolds is so bad?</p>",
        "id": 272533183,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/specific_functions.html\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/specific_functions.html</a> right?</p>",
        "id": 272533185,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1645294416
    },
    {
        "content": "<p>Yes but this is about bump functions supported on closed balls.</p>",
        "id": 272533232,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294446
    },
    {
        "content": "<p>(more precisely, on closed balls in an unspecified Euclidean metric on your space)</p>",
        "id": 272533246,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> You can repeat the proof for vector spaces using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_cont_diff_bump\">docs#times_cont_diff_bump</a> if you want to avoid importing manifolds.</p>",
        "id": 272533585,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294912
    },
    {
        "content": "<p>It will be a bit easier because you won't need to care about the manifold boundary.</p>",
        "id": 272533637,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645294950
    },
    {
        "content": "<p>Usually I don't mind crushing easy things with super general tools, but that one seems a bit too much</p>",
        "id": 272533686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645295035
    },
    {
        "content": "<p>I would prefer not to have 2 theories of smooth partitions of unity in mathlib, one for vector spaces and one for manifolds.</p>",
        "id": 272533786,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645295154
    },
    {
        "content": "<p>Because it will be hard to maintain feature parity.</p>",
        "id": 272533835,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645295179
    },
    {
        "content": "<p>We'll have to restate things anyway</p>",
        "id": 272533929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645295291
    },
    {
        "content": "<p>I'm not even really convince you could derive the statement I asked about from the manifold stuff we have.</p>",
        "id": 272533989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645295385
    },
    {
        "content": "<p>Let me do it.</p>",
        "id": 272534929,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645296390
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.partition_of_unity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_times_cont_diff_zero_one</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">times_cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">eq_on</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">eq_on</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hfs</span><span class=\"o\">,</span> <span class=\"n\">hft</span><span class=\"o\">,</span> <span class=\"n\">hf01</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_smooth_zero_one_of_closed</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span> <span class=\"n\">hd</span>\n<span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.smooth.times_cont_diff</span><span class=\"o\">,</span> <span class=\"n\">hfs</span><span class=\"o\">,</span> <span class=\"n\">hft</span><span class=\"o\">,</span> <span class=\"n\">hf01</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 272535180,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645296686
    },
    {
        "content": "<p>If you want the function to be 1 in a <em>neighborhood</em> of <code>K</code>, then you need to use some separation property first.</p>",
        "id": 272535279,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645296777
    },
    {
        "content": "<p>IMHO, this should be done for manifolds.</p>",
        "id": 272535293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645296795
    },
    {
        "content": "<p>(I don't remember what are the minimal assumptions for existence of intermediate compact sets)</p>",
        "id": 272535578,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645297086
    },
    {
        "content": "<p>This is indeed easier than what I thought. The neighborhood question is independent from the question of going from manifolds to vector spaces.</p>",
        "id": 272537346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645298970
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> for writing such a good manifolds library.</p>",
        "id": 272539484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645301218
    },
    {
        "content": "<p>I just tried to use this idea of pulling the whole manifold library to get bump functions in vector spaces. Unfortunately if also brings <code>smooth_at</code> in the root namespace. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> do you think we could move this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smooth_at\">docs#smooth_at</a> to some manifold specific namespace?</p>",
        "id": 273418058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645986617
    },
    {
        "content": "<p>Yes, sure!</p>",
        "id": 273421381,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1645990882
    },
    {
        "content": "<p>Do you have a namespace to suggest?</p>",
        "id": 273422989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645993108
    },
    {
        "content": "<p>We can just call it <code>msmooth_at</code>.</p>",
        "id": 273423108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645993314
    },
    {
        "content": "<p>This will agree with <code>mdifferentiable</code> etc</p>",
        "id": 273423153,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645993346
    }
]