[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">⧸</span> <span class=\"n\">f.ker</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">f.range</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>do we have anything that tranforms f into a linear equiv this way ?</p>",
        "id": 274578215,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1646761944
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.quot_ker_equiv_range\">docs#linear_map.quot_ker_equiv_range</a> what you're looking for?</p>",
        "id": 274578707,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1646762149
    },
    {
        "content": "<p>Does <code>library_search</code> find that for you?</p>",
        "id": 274582905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646763769
    },
    {
        "content": "<p>I guess you have to have it imported for that to work, and it's a leaf file that you might not have seen before.</p>",
        "id": 274583002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646763816
    },
    {
        "content": "<p>library_search couldn't find it, but that was indeed because I was lacking the import</p>",
        "id": 274672920,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1646824381
    },
    {
        "content": "<p>Note that you can now search for \"first isomorphism theorem\" in the search bar, and several results show up.</p>",
        "id": 274673269,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646824582
    },
    {
        "content": "<p>This is strangely called \" first isomorphism law\" in the doc, but at least you can guess its real name.</p>",
        "id": 274673327,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646824626
    }
]