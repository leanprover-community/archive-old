[
    {
        "content": "<p>For reference, that's now what I combined the help into: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">q.factorization</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.div_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_factorization_dvd</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pow_factorization_dvd</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha'</span><span class=\"o\">:</span> <span class=\"n\">a.factorization</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n      <span class=\"k\">calc</span>  <span class=\"n\">a.factorization</span> <span class=\"n\">r</span>\n          <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q.factorization</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.factorization_div</span> <span class=\"n\">h'</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">q.factorization</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.factorization</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tsub_apply</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span> <span class=\"n\">r</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span>                <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat.prime.factorization_pow</span> <span class=\"n\">hr</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">n</span>                                     <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp.single_eq_same</span><span class=\"o\">,</span> <span class=\"n\">tsub_self</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>                                         <span class=\"o\">:</span> <span class=\"n\">tsub_self</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">nat.div_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"n\">nat.prime.pos</span> <span class=\"n\">hr</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_lt.mpr</span> <span class=\"o\">(</span><span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"n\">h'</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">hra</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">nat.prime.factorization_pos_of_dvd</span> <span class=\"n\">hr</span> <span class=\"n\">hh</span> <span class=\"n\">hra</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ha'</span> <span class=\"n\">at</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.lt_asymm</span> <span class=\"n\">w</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281615107,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1652039308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> has marked this topic as resolved.</p>",
        "id": 281615112,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652039320
    },
    {
        "content": "<p>For the example to be true, do you really need <code>hr</code>?  I can see that you use it in the proof, but you should be able to get away without it.</p>",
        "id": 281616237,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652041007
    },
    {
        "content": "<p>After all, <code>n</code> is just the largest power of <code>r</code> dividing <code>q</code>, which is finite thanks to <code>hq</code>.</p>",
        "id": 281616298,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652041098
    },
    {
        "content": "<p>Probably 2 &lt;= r is enough</p>",
        "id": 281616465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652041357
    },
    {
        "content": "<p>for that, you'd probably want to use the <code>multiplicity</code> API instead, though</p>",
        "id": 281616846,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652041906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> Yes you are right <code>hr</code> and <code>hq</code> seem to be partially redundant, but I'm not fussed about that, after all it's just a MWE for something  where both hypotheses are already present.</p>",
        "id": 281617029,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1652042206
    }
]