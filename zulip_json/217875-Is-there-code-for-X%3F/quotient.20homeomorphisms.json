[
    {
        "content": "<p>Do we have something similar to the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.homeomorph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">quotient_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 248645706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628272624
    },
    {
        "content": "<p>In case anyone wants a golfing challenge...</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.homeomorph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">quotient_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">homeomorph.homeomorph_of_continuous_open</span>\n<span class=\"o\">(</span><span class=\"n\">equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">quot.lift</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">quot.sound</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf.surjective</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">quot.mk</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">quotient_map_quot_mk.continuous_iff</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">quot.lift</span> <span class=\"n\">f</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">quot.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf.continuous</span>\n<span class=\"kd\">end</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">quotient_map_quot_mk.is_open_preimage</span> <span class=\"n\">at</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hf.is_open_preimage</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">equiv.of_bijective_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">⟩,</span><span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hx</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">quot.sound</span> <span class=\"n\">h.symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">quot.mk</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">equiv.of_bijective_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">quot.mk</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 248652055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628275533
    },
    {
        "content": "<p>In line 14:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"n\">quotient_map_quot_mk.continuous_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hf.continuous</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n</code></pre></div>\n</div></div>",
        "id": 248652822,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1628275895
    },
    {
        "content": "<p>Even <code>exact hf.continuous</code> works ;)</p>",
        "id": 248653315,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628276034
    },
    {
        "content": "<p>(after the rewrite)</p>",
        "id": 248653354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628276042
    },
    {
        "content": "<p>That quotient condition is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.ker\">docs#setoid.ker</a></p>",
        "id": 248654977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628276801
    },
    {
        "content": "<p>Which may have some lemmas that help</p>",
        "id": 248655021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628276822
    },
    {
        "content": "<p>A bit better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.setoid.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.homeomorph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">quotient_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">setoid.ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_map_quot_mk.continuous_iff.mpr</span> <span class=\"n\">hf.continuous</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_inv_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hf.continuous_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">continuous_quotient_mk</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[(</span><span class=\"n\">setoid.quotient_ker_equiv_of_surjective</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">quotient_map.surjective</span> <span class=\"n\">hf</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_eq</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">setoid.quotient_ker_equiv_of_surjective</span> <span class=\"n\">_</span> <span class=\"n\">hf.surjective</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 248656935,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628277839
    },
    {
        "content": "<p>That strikes me as quite a lot better :)</p>",
        "id": 248657467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628278089
    }
]