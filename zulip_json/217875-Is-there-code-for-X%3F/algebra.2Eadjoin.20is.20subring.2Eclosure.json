[
    {
        "content": "<p>I seem to be having difficulty stating this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_adjoin_eq</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">subsemiring.closure</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>which gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">increased</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">visualized</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"n\">trace.class_instances'</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Does this exist already? Am I missing something obvious to make this statement work?</p>",
        "id": 211784122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601482260
    },
    {
        "content": "<p>What are your imports?</p>",
        "id": 211784441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601482377
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/0bb5e5d94d688bdbde8615d924742315cbe19def/src/ring_theory/algebra.lean#L1093\">https://github.com/leanprover-community/mathlib/blob/0bb5e5d94d688bdbde8615d924742315cbe19def/src/ring_theory/algebra.lean#L1093</a></p>",
        "id": 211785623,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601482993
    },
    {
        "content": "<p>This is exactly how <code>adjoin</code> is defined</p>",
        "id": 211785646,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601483005
    },
    {
        "content": "<p>I know it is <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, but I can't work out how to unfold that in a proof</p>",
        "id": 211785818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601483079
    },
    {
        "content": "<p>The error was becaused I missed the trailing <code>:=</code> ...</p>",
        "id": 211785946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601483159
    }
]