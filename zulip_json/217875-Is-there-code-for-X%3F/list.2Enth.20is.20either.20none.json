[
    {
        "content": "<p>I'm not sure if this is two specific, but is there some lemma in the direction of?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.nth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">l.nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks</p>",
        "id": 226560729,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1613502648
    },
    {
        "content": "<p>If you generalize <code>l.nth n</code> to an arbitary element of <code>option (option α)</code>, this should be added to mathlib as <code>option.join_eq_none</code>. Contrast <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.join_ne_none\">docs#option.join_ne_none</a></p>",
        "id": 226561591,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613502990
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">option</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">join_eq_none</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">o.join</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">↔</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">∨</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rcases</span> <span class=\"n\">o</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">option</span>\n</code></pre></div>",
        "id": 226562824,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613503493
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6269\">#6269</a></p>",
        "id": 226563551,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613503767
    },
    {
        "content": "<p>This community is just so awesome <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span><br>\nThanks!</p>",
        "id": 226563636,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1613503798
    }
]