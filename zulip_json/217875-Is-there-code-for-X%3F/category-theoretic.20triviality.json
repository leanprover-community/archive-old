[
    {
        "content": "<p>I am at the goal at the <code>sorry</code> below and I want to reduce to <code>commutes</code>. What am I missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.functor.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⟶</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"n\">ψ</span> <span class=\"bp\">≫</span> <span class=\"n\">ρ</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"n\">ψ</span> <span class=\"bp\">≫</span> <span class=\"n\">ρ</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't want to have to do <code>suffices : f \\gg g  \\gg h \\gg blah blah</code> because in reality most of these functions are things like <code>eq_to_hom _</code> and I don't really want to switch proof terms on because they're full of <code>horner</code>.</p>",
        "id": 286296248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655343088
    },
    {
        "content": "<p>The problem with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⟶</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"n\">ψ</span> <span class=\"bp\">≫</span> <span class=\"n\">ρ</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"n\">ψ</span> <span class=\"bp\">≫</span> <span class=\"n\">ρ</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span> <span class=\"bp\">←</span> <span class=\"n\">category.assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">commutes</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">commutes</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is that in practice I don't have <code>commutes</code> to hand, it's what I want to reduce the goal to, and I can't guarantee how many &gt;&gt;s I'll have next time.</p>",
        "id": 286296468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655343314
    },
    {
        "content": "<p>Oh I've got it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">category.assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 286296579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655343421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you know about <code>reassoc_of</code>?</p>",
        "id": 286296632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655343482
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.functor.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⟶</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"n\">ψ</span> <span class=\"bp\">≫</span> <span class=\"n\">ρ</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"n\">ψ</span> <span class=\"bp\">≫</span> <span class=\"n\">ρ</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">reassoc_of</span> <span class=\"n\">commutes</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 286296693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655343531
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#category_theory.reassoc_of\">tactic#category_theory.reassoc_of</a></p>",
        "id": 286296696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655343539
    },
    {
        "content": "<p>Neither a tactic nor a metaprogram!</p>",
        "id": 286296817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655343689
    },
    {
        "content": "<p>But I don't want to type <code>simp [reassoc_of _],</code> in my position because <code>_</code> is horrible.</p>",
        "id": 286296896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655343758
    },
    {
        "content": "<p>That's really nice though!</p>",
        "id": 286296953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655343823
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#slice\">tactic#slice</a> (and <code>rhs</code>) might also be helpful</p>",
        "id": 286297040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655343890
    },
    {
        "content": "<p>E.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⟶</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"n\">ψ</span> <span class=\"bp\">≫</span> <span class=\"n\">ρ</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"n\">ψ</span> <span class=\"bp\">≫</span> <span class=\"n\">ρ</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">slice_lhs</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">commutes</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286297186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655344051
    }
]