[
    {
        "content": "<p>Hi, is there code for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">help</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">finset.sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">s.to_list</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">hind</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_insert</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hind</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- f a + (list.map f s.to_list).sum = (list.map f (insert a s).to_list).sum</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265136413,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1639650859
    },
    {
        "content": "<p>My instinct is to show that <code>(insert a s).to_list</code> bijects with <code>a :: s.to_list</code> in the sense of <code>list.perm</code> and then to show that <code>list.map</code> reflects <code>equiv.perm</code> and <code>list.sum</code> sends equivalent lists to equal sums.</p>",
        "id": 265136988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651170
    },
    {
        "content": "<p>Do we have any of that?</p>",
        "id": 265136998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651178
    },
    {
        "content": "<p>Of course. That's basically how <code>finset.sum</code> is defined in the first place.</p>",
        "id": 265137157,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639651240
    },
    {
        "content": "<p>Right! I just don't know my way around</p>",
        "id": 265137235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651282
    },
    {
        "content": "<p>OK we've reduced it to <code>a :: s.to_list ~ (insert a s).to_list</code></p>",
        "id": 265137585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651470
    },
    {
        "content": "<p>Okay, that sounds actually hard to prove</p>",
        "id": 265137631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639651499
    },
    {
        "content": "<p>Hmmz, it seems that <code>finset.sum</code> uses a <code>list.foldr</code> under the hood. Whereas <code>list.sum</code> is using a <code>foldl</code>. That's surprising.</p>",
        "id": 265137681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639651525
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">delta</span> <span class=\"n\">finset.sum</span> <span class=\"n\">multiset.sum</span> <span class=\"n\">list.sum</span> <span class=\"n\">multiset.foldr</span>\n    <span class=\"n\">multiset.map</span> <span class=\"n\">finset.to_list</span>\n<span class=\"c1\">-- quot.lift_on (quot.lift_on s.val</span>\n<span class=\"c1\">--  (λ (l : list A), ↑(list.map f l)) _) (λ (l : list B), list.foldr has_add.add 0 l) _ =</span>\n<span class=\"c1\">-- list.foldl has_add.add 0 (list.map f s.val.to_list)</span>\n</code></pre></div>",
        "id": 265137767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639651564
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">help</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">finset.sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">s.to_list</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">hind</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_insert</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hind</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">list.sum_cons</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list.perm.sum_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">list.map_cons</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list.perm.map</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- a :: s.to_list ~ (insert a s).to_list</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265137793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651575
    },
    {
        "content": "<p>Oh actually this is fine because we're talking about finsets, not multisets.</p>",
        "id": 265137830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639651610
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 265137845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651616
    },
    {
        "content": "<p>Extensionality is enough.</p>",
        "id": 265137850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639651619
    },
    {
        "content": "<p>Aah!</p>",
        "id": 265137877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651631
    },
    {
        "content": "<p>But I don't know how to prove the corresponding statement with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.to_list\">docs#multiset.to_list</a></p>",
        "id": 265138041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639651716
    },
    {
        "content": "<p>lol <code>list.perm.mem_iff</code> isn't an <code>iff</code></p>",
        "id": 265138047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651721
    },
    {
        "content": "<p>oh because it's not true because of repeats :-/</p>",
        "id": 265138158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639651801
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">help</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">finset.sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">s.to_list</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">hind</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_insert</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hind</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">list.sum_cons</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list.perm.sum_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">list.map_cons</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list.perm.map</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">list.perm_ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.mem_cons_iff</span><span class=\"o\">,</span> <span class=\"n\">iff_self</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_to_list</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_insert</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">finset.nodup_to_list</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">finset.nodup_to_list</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265138391,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639651922
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.sum_to_list\">docs#multiset.sum_to_list</a> exists</p>",
        "id": 265138533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639652001
    },
    {
        "content": "<p>should this be called <code>finset.sum_to_list</code>? or maybe <code>finset.to_list_sum</code>? whats the convension on the ordering</p>",
        "id": 265138892,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1639652244
    },
    {
        "content": "<p>I'd copy the multiset version and call it <code>finset.sum_to_list</code>. In general we put the \"outermost\" operator first, in this case <code>sum</code>.</p>",
        "id": 265139027,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639652315
    },
    {
        "content": "<p>Given the <code>multiset</code> precedent, <code>finset.sum_to_list</code>. Please make <code>finset.insert_to_list</code> as separate lemma</p>",
        "id": 265139042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639652332
    },
    {
        "content": "<p>Even better would be to call it <code>finset.prod_to_list</code> (and prove it for <code>Π</code> of course!): we have a magical translation from products to sums called <code>@[to_additive]</code>.</p>",
        "id": 265139107,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639652377
    },
    {
        "content": "<p>Can someone give Joseph push access to non-master branches of mathlib? His github userid is <code>Jlh18</code></p>",
        "id": 265139265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639652429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">help</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">s.to_list</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">finset.sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">multiset.coe_sum</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">multiset.coe_map</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_to_list</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265139335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639652468
    },
    {
        "content": "<p>Do we want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.sum_def</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.1.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>?</p>",
        "id": 265139745,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639652679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133584\">@Joseph Hua</span> <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 265139805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639652708
    },
    {
        "content": "<p>thank you!</p>",
        "id": 265139841,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1639652723
    },
    {
        "content": "<p>Golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">multiset.coe_sum</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">multiset.coe_map</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_to_list</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265139967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639652765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.2Eto_list.20sum/near/265139745\">said</a>:</p>\n<blockquote>\n<p>Do we want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.sum_def</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.1.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>?</p>\n</blockquote>\n<p>I'd see this as a <code>simp</code> lemma in the opposite direction named something like <code>sum_to_multiset</code>. (More precisely, as<code>@[to_additive] prod_to_multiset</code>.)</p>",
        "id": 265140057,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639652821
    },
    {
        "content": "<p>We don't need <code>finset.sum_def</code>, because we already have it as an equation lemma for <code>finset.sum</code>; <code>rw finset.sum</code> does the same thing as that lemma.</p>",
        "id": 265147385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639657348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.2Eto_list.20sum/near/265137681\">said</a>:</p>\n<blockquote>\n<p>Hmmz, it seems that <code>finset.sum</code> uses a <code>list.foldr</code> under the hood. Whereas <code>list.sum</code> is using a <code>foldl</code>. That's surprising.</p>\n</blockquote>\n<p>There's an open issue about changing <code>list.sum</code> to go in the other direction, which definitionally is more convenient but computationally is slower.</p>",
        "id": 265147466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639657389
    },
    {
        "content": "<p>The Zulip thread is <a href=\"#narrow/stream/113488-general/topic/list.2Eprod/near/128334739\">here</a>, <del>I can't find the github issue any more</del></p>",
        "id": 265148062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639657728
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10842\">#10842</a> is ready to land if someone wants to tell bors</p>",
        "id": 265274495,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639734870
    }
]