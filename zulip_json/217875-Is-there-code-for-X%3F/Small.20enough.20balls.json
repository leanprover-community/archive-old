[
    {
        "content": "<p>Do we have this somewhere in a <code>metric_space</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eventually_iff_eventually_norm'</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">z₀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have an ugly epsilon-delta proof but I'm guessing that it is a one-line proof using the filter API properly...</p>",
        "id": 307317846,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1667311351
    },
    {
        "content": "<p>should be easy from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.eventually_nhds_iff_ball\">docs#metric.eventually_nhds_iff_ball</a></p>",
        "id": 307327039,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667313484
    },
    {
        "content": "<p>Aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.mem_nhds_iff\">docs#metric.mem_nhds_iff</a> yes sure, this is what I am doing now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eventually_iff_eventually_norm</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">z₀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">metric.mem_nhds_iff.trans</span> <span class=\"o\">(</span><span class=\"n\">iff.trans</span> <span class=\"n\">_</span> <span class=\"n\">metric.mem_nhds_iff.symm</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">hr</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_ball_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">real.norm_eq_abs</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ball_subset_ball</span> <span class=\"o\">((</span><span class=\"n\">le_abs_self</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hr.le</span><span class=\"o\">)</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">hρ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty_Ioo.mpr</span> <span class=\"o\">(</span><span class=\"n\">mem_ball.mp</span> <span class=\"n\">hz</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">_root_.abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">dist_nonneg.trans</span> <span class=\"n\">hρ.1.le</span><span class=\"o\">),</span> <span class=\"n\">hρ.2</span><span class=\"o\">,</span> <span class=\"n\">mem_ball_zero_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">real.norm_eq_abs</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">this</span> <span class=\"n\">z</span> <span class=\"n\">hρ.1</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but it feels overly complicated. (Well this is for the version without the <code>[&gt;]</code> but that should be similar.)</p>",
        "id": 307327954,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1667313735
    },
    {
        "content": "<p>the other trick will be to use a filter basis for <code>𝓝[&gt;] 0</code> I think, along with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_basis.eventually\">docs#filter.has_basis.eventually</a>.</p>",
        "id": 307332590,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1667314921
    },
    {
        "content": "<p>I end up doing archimedean stuff like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"n\">z₀</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"n\">z₀</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">hρ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty_Ioo.mpr</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"n\">dist_nonneg.trans_lt</span> <span class=\"n\">hρ.1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">ρ</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"n\">abs_eq_self.mpr</span> <span class=\"n\">h1.le</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">ρ</span> <span class=\"o\">(</span><span class=\"n\">h2.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hρ.2</span><span class=\"o\">)</span> <span class=\"n\">h1</span> <span class=\"n\">z</span> <span class=\"n\">hρ.1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">hz.trans</span> <span class=\"o\">(</span><span class=\"n\">lt_of_abs_lt</span> <span class=\"n\">h1</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_iff_eventually_norm'</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">z₀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eventually_nhds_within_iff</span><span class=\"o\">,</span> <span class=\"n\">eventually_nhds_iff_ball</span><span class=\"o\">,</span> <span class=\"n\">toto</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 307336960,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1667316207
    },
    {
        "content": "<p>Here it is with the approach I suggested. There's still a bit of fussing you have to do after the rewrites, but it's pretty minimal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_iff_eventually_norm'</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">z₀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">nhds_within_has_basis</span> <span class=\"n\">nhds_basis_closed_ball</span> <span class=\"o\">(</span><span class=\"n\">set.Ioi</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">eventually_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">eventually_nhds_iff_ball</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real.closed_ball_eq_Icc</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">set.mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Ioi</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">],</span>\n  <span class=\"n\">congrm</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">hxε</span> <span class=\"n\">_</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">h.2</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">ball_subset_ball</span> <span class=\"n\">hxε</span> <span class=\"n\">hz</span><span class=\"o\">)⟩,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span> <span class=\"o\">(</span><span class=\"n\">neg_lt_self</span> <span class=\"n\">h.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">le_rfl</span> <span class=\"n\">h.1</span><span class=\"o\">⟩⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 307343859,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1667318184
    },
    {
        "content": "<p>I don't have time to give a solution right now, but let me just say that what we are really proving is <code>(𝓝 z₀).small_sets = (𝓝[&gt;] 0 : filter ℝ).map (ball z₀)</code> (see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually_small_sets_forall\">docs#filter.eventually_small_sets_forall</a>), but I'm not sure how to make this easy yet</p>",
        "id": 307371308,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1667325564
    },
    {
        "content": "<p>Here's my proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_iff_eventually_norm</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">z₀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">eventually_nhds_iff_ball</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exists₂_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.ball_eq_Ioo</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">ball_subset_ball</span> <span class=\"n\">hy.2.le</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">hr'</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_between</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"c1\">-- exists_lt_mem_ball_of_mem_ball is defeq</span>\n    <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"n\">r'</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">hr'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ball</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of</span><span class=\"o\">,</span> <span class=\"n\">real.dist_0_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_self.2</span><span class=\"o\">],</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">dist_nonneg.trans</span> <span class=\"n\">hr'.le</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 307379470,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667327944
    },
    {
        "content": "<p>Maybe you can golf it further using ideas in other approaches.</p>",
        "id": 307379760,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667328031
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tititi</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">z₀</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">z₀</span> <span class=\"n\">r</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">nhds_within_has_basis</span> <span class=\"n\">nhds_basis_closed_ball</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">eventually_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">metric.mem_nhds_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_closed_ball_zero_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists₂_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"o\">⟨</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"n\">ball_subset_ball</span> <span class=\"o\">(</span><span class=\"n\">le_of_abs_le</span> <span class=\"n\">hr</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨(</span><span class=\"n\">abs_eq_self.mpr</span> <span class=\"n\">hε.lt.le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">⟩⟩)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_iff_eventually_norm'</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">z₀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">tititi</span>\n</code></pre></div>",
        "id": 308156795,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1667662198
    },
    {
        "content": "<p>Actually, this might look a bit better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_iff_eventually_subset</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.has_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">nhds_within_has_basis</span> <span class=\"n\">nhds_basis_closed_ball</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">eventually_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hp.mem_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_closed_ball_zero_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exists₂_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">(</span><span class=\"n\">le_of_abs_le</span> <span class=\"n\">h'.1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">eq.le</span> <span class=\"o\">(</span><span class=\"n\">abs_eq_self.mpr</span> <span class=\"n\">hε.le</span><span class=\"o\">),</span> <span class=\"n\">hε</span><span class=\"o\">⟩⟩)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_nhds_iff_eventually_ball</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">z₀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_iff_eventually_subset</span> <span class=\"n\">nhds_basis_ball</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ball_subset_ball</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 308193799,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1667688062
    }
]