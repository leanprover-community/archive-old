[
    {
        "content": "<p>Do we have :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">p_val_nat_div_coprime</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span>  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span>  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n  <span class=\"n\">coprime</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(Maybe this needs <code>prime p</code>, but I think the <code>padic_val_nat</code> should work fine in this case).</p>",
        "id": 285110931,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654521501
    },
    {
        "content": "<p>It doesn't need <code>prime</code>. Instead it needs <code>squarefree</code>.</p>",
        "id": 285120727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654526234
    },
    {
        "content": "<p>Trouble happens when <code>padic_val_nat</code> is the \"true valuation\", but rounded down. For example <code>2 / 4 ^ padic_val_nat 4 2</code> is <code>2</code>, not <code>1</code>.</p>",
        "id": 285120910,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654526329
    },
    {
        "content": "<p>I've just PRed (<a href=\"https://github.com/leanprover-community/mathlib/pull/14576\">#14576</a>) a version of this for <code>factorization</code>, which uses an assumption of <code>prime p</code>.</p>",
        "id": 285121122,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654526436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/div.20by.20p_adic_val_nat.20is.20coprime/near/285120910\">said</a>:</p>\n<blockquote>\n<p>Trouble happens when <code>padic_val_nat</code> is the \"true valuation\", but rounded down. For example <code>2 / 4 ^ padic_val_nat 4 2</code> is <code>2</code>, not <code>1</code>.</p>\n</blockquote>\n<p>ah good point! tbh all I need is the prime case</p>",
        "id": 285121692,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654526694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/div.20by.20p_adic_val_nat.20is.20coprime/near/285121122\">said</a>:</p>\n<blockquote>\n<p>I've just PRed (<a href=\"https://github.com/leanprover-community/mathlib/pull/14576\">#14576</a>) a version of this for <code>factorization</code>, which uses an assumption of <code>prime p</code>.</p>\n</blockquote>\n<p>Great!</p>",
        "id": 285121717,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654526704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/div.20by.20p_adic_val_nat.20is.20coprime/near/285120727\">said</a>:</p>\n<blockquote>\n<p>It doesn't need <code>prime</code>. Instead it needs <code>squarefree</code>.</p>\n</blockquote>\n<p>Coming back to this: <code>squarefree</code> isn't the relevant criterion, what's needed is <code>coprime p n</code>.  For example, when <code>n = 21</code> and <code>p = 15</code> we have <code>padic_val_nat p n = 0</code> and so <code>coprime p (n / p ^ (padic_val_nat p n))</code> is false.</p>\n<p>So, using the generalised <code>pow_padic_val_nat_dvd</code> I've PRed in <a href=\"https://github.com/leanprover-community/mathlib/pull/14637\">#14637</a>, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">p.coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coprime</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">coprime.coprime_div_right</span> <span class=\"n\">hpn</span> <span class=\"o\">(</span><span class=\"n\">pow_padic_val_nat_dvd</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 285507494,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654766788
    },
    {
        "content": "<p>But... <code>coprime p n</code> means that <code>padic_val_nat p n = 0</code>, so you're just restating <code>coprime p n</code> in a complicated way.</p>",
        "id": 285507599,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654766868
    },
    {
        "content": "<p>Oh, of course</p>",
        "id": 285507719,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654766925
    },
    {
        "content": "<p>So how does <code>squarefree</code> help here?</p>",
        "id": 285507883,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654767013
    },
    {
        "content": "<p>It helps if you assume <code>p ∣ n</code> on top.</p>",
        "id": 285508050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654767120
    },
    {
        "content": "<p>Well, actually no it doesn't really seem to help.</p>",
        "id": 285508130,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654767150
    },
    {
        "content": "<p>A quick unit test suggests that <code>\\forall a &gt; 0, coprime p (a/ p^(padic_val_nat p a))</code> is true exactly when <code>prime p</code> or <code>p = 1</code></p>",
        "id": 285509014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654767607
    },
    {
        "content": "<p>the p = 1 case is boring since everything is coprime to 1</p>",
        "id": 285509098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654767655
    },
    {
        "content": "<p>The counterexample is: if <code>p = a * b</code> where a, b &gt; 1, then <code>padic_val_nat p a = 0</code> so <code>a / p^(padic_val_nat p a) = a</code> but <code>gcd p a = a != 1</code></p>",
        "id": 285509672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654767928
    },
    {
        "content": "<p>So that suggests that there's no further interesting generalisation beyond <code>coprime_of_div_pow_factorization</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/14576\">#14576</a>.</p>",
        "id": 285511656,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654769070
    },
    {
        "content": "<p>The prime case is the only one I need so I'm happy with that</p>",
        "id": 285564923,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654793837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/div.20by.20p_adic_val_nat.20is.20coprime/near/285564923\">said</a>:</p>\n<blockquote>\n<p>The prime case is the only one I need so I'm happy with that</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14576\">#14576</a> is merged now, so <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.coprime_of_div_pow_factorization\">docs#nat.coprime_of_div_pow_factorization</a> should be available</p>",
        "id": 286224723,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1655305294
    },
    {
        "content": "<p>Great, thank you!</p>",
        "id": 286226465,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1655305925
    }
]