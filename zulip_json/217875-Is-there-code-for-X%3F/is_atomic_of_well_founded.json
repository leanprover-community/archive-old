[
    {
        "content": "<p>Can anyone help me with the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.atoms</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_atomic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 281251369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651725392
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.atoms</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_atomic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or_iff_not_imp_left.2</span> <span class=\"bp\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">,</span><span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.has_min</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">,</span><span class=\"n\">le_rfl</span><span class=\"o\">⟩</span> <span class=\"k\">in</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hb.1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">not_imp_not.1</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hc</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hm</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">hc</span><span class=\"o\">,</span><span class=\"n\">hl.le.trans</span> <span class=\"n\">hb.2</span><span class=\"o\">⟩</span> <span class=\"n\">hl</span><span class=\"o\">⟩,</span> <span class=\"n\">hb.2</span><span class=\"o\">⟩</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 281255699,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651730299
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13967\">#13967</a></p>",
        "id": 281257673,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651732331
    }
]