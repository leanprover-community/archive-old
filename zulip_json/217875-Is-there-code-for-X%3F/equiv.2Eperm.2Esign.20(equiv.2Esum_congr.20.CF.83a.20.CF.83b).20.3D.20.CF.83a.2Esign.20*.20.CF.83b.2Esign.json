[
    {
        "content": "<p>I'm getting stuck on the last, \"well, obviously\" step of this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.sign</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sign_sum_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σa</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σb</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm.sign</span> <span class=\"o\">(</span><span class=\"n\">equiv.sum_congr</span> <span class=\"n\">σa</span> <span class=\"n\">σb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σa.sign</span> <span class=\"bp\">*</span> <span class=\"n\">σb.sign</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm.sign</span> <span class=\"o\">(</span><span class=\"n\">equiv.sum_congr</span> <span class=\"n\">σa</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σa.sign</span> <span class=\"bp\">∧</span>\n             <span class=\"n\">equiv.perm.sign</span> <span class=\"o\">(</span><span class=\"n\">equiv.sum_congr</span> <span class=\"mi\">1</span> <span class=\"n\">σb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σb.sign</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this.1</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">this.2</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">equiv.perm.sign_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.perm.mul_def</span><span class=\"o\">,</span> <span class=\"n\">equiv.perm.one_def</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">equiv.sum_congr_trans</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- obviously</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The argument is along the lines of \"sign counts the number of swaps, inserting elements which remain in place does not affect the number of swaps\".</p>",
        "id": 218984274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607256990
    },
    {
        "content": "<p>(it would also be cool if I could apply <code>wlog</code> to unify those two goals into a single goal)</p>",
        "id": 218984287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607257038
    },
    {
        "content": "<p>Reduced to an even more obvious statement,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_congr_swap_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.sum_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.swap</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_congr_swap_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.sum_congr</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equiv.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.swap</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sign_sum_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σa</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σb</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv.perm.sign</span> <span class=\"o\">(</span><span class=\"n\">equiv.sum_congr</span> <span class=\"n\">σa</span> <span class=\"n\">σb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σa.sign</span> <span class=\"bp\">*</span> <span class=\"n\">σb.sign</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm.sign</span> <span class=\"o\">(</span><span class=\"n\">equiv.sum_congr</span> <span class=\"n\">σa</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σa.sign</span> <span class=\"bp\">∧</span>\n             <span class=\"n\">equiv.perm.sign</span> <span class=\"o\">(</span><span class=\"n\">equiv.sum_congr</span> <span class=\"mi\">1</span> <span class=\"n\">σb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σb.sign</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this.1</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">this.2</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">equiv.perm.sign_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.perm.mul_def</span><span class=\"o\">,</span> <span class=\"n\">equiv.perm.one_def</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">equiv.sum_congr_trans</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">σa.swap_induction_on</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">σa'</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">ha</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">equiv.sum_congr_refl</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">equiv.sum_congr_trans</span><span class=\"o\">,</span> <span class=\"n\">equiv.perm.sign_mul</span><span class=\"o\">,</span>\n           <span class=\"n\">equiv.perm.sign_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">perm.sign_swap</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">erw</span> <span class=\"n\">equiv.sum_congr_swap_left</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">perm.sign_swap</span> <span class=\"o\">(</span><span class=\"n\">sum.injective_inl.ne_iff.mpr</span> <span class=\"n\">ha</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">σb.swap_induction_on</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">σb'</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">hb</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">equiv.sum_congr_refl</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">equiv.sum_congr_trans</span><span class=\"o\">,</span> <span class=\"n\">equiv.perm.sign_mul</span><span class=\"o\">,</span>\n           <span class=\"n\">equiv.perm.sign_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">perm.sign_swap</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">erw</span> <span class=\"n\">equiv.sum_congr_swap_right</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">perm.sign_swap</span> <span class=\"o\">(</span><span class=\"n\">sum.injective_inr.ne_iff.mpr</span> <span class=\"n\">hb</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218986229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607260029
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5266\">#5266</a></p>",
        "id": 219060719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607335664
    }
]