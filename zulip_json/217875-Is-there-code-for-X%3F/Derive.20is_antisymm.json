[
    {
        "content": "<p>Is there an easy way to get <code>is_antisymm</code> for <code>tag</code>'s <code>≤</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive has_le, derive has_lt]</span>\n<span class=\"kd\">def</span> <span class=\"n\">tag</span> <span class=\"o\">:=</span> <span class=\"n\">lex</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 241400913,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622731632
    },
    {
        "content": "<p>I would just derive <code>linear_order</code> directly and avoid the <code>is_antisymm</code> type class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lexicographic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.rel_classes</span>\n\n<span class=\"kd\">@[derive linear_order]</span>\n<span class=\"kd\">def</span> <span class=\"n\">tag</span> <span class=\"o\">:=</span> <span class=\"n\">lex</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_antisymm</span> <span class=\"n\">tag</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 241401445,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622731824
    }
]