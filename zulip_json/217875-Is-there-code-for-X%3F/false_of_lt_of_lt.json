[
    {
        "content": "<p>I'm surprised that <code>linarith</code> can't solve this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.complete_boolean_algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hba</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hab.trans</span> <span class=\"n\">hba</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_le</span> <span class=\"n\">le_rfl</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>Do we have this as a lemma anywhere?</p>",
        "id": 284390547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653930862
    },
    {
        "content": "<p>Linarith is linear arithmetic, but here there is no arithmetic, that is, <code>linarith</code> requires a linear ordered commutative ring <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/linarith/frontend.html\">https://leanprover-community.github.io/mathlib_docs/tactic/linarith/frontend.html</a></p>",
        "id": 284390807,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653931123
    },
    {
        "content": "<p>Ah indeed, <code>linarith</code> is happy to solve it with <code>linear_ordered_comm_ring</code></p>",
        "id": 284391716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653931822
    }
]