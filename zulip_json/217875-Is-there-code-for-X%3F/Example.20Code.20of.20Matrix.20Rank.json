[
    {
        "content": "<p>Is there an example code of proving a matrix's rank using <code>matrix.rank</code>? I was looking at the <code>matrix.lean</code> file in the test folder, but couldn't find anything. <br>\nThis is an mwe of an example of what I am trying to do if that helps point me to an example. <br>\nEdit: Fixed mwe so it had imports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.rank</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">matrix.rank</span> <span class=\"bp\">!!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">â„š</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">;</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 319679016,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1672955488
    },
    {
        "content": "<p>That's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, you need imports.</p>",
        "id": 319679150,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672955531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Example.20Code.20of.20Matrix.20Rank/near/319679150\">said</a>:</p>\n<blockquote>\n<p>That's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, you need imports.</p>\n</blockquote>\n<p>Sorry, updated. Forgot about the imports</p>",
        "id": 319679195,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1672955564
    },
    {
        "content": "<p>Lean is not a computer algebra package (yet); you could prove this by showing the rank was &lt;= 2 and &gt;= 2, but there's no tactic as far as I know which will do it for you.</p>",
        "id": 319684922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672958070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Example.20Code.20of.20Matrix.20Rank/near/319684922\">said</a>:</p>\n<blockquote>\n<p>Lean is not a computer algebra package (yet); you could prove this by showing the rank was &lt;= 2 and &gt;= 2, but there's no tactic as far as I know which will do it for you.</p>\n</blockquote>\n<p>Good to know, thank you!</p>",
        "id": 319687514,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1672959188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Example.20Code.20of.20Matrix.20Rank/near/319684922\">said</a>:</p>\n<blockquote>\n<p>Lean is not a computer algebra package (yet); you could prove this by showing the rank was &lt;= 2 and &gt;= 2, but there's no tactic as far as I know which will do it for you.</p>\n</blockquote>\n<p>What is needed to get Lean to a point where it can also operate like a computer algebra package? Is that something Lean 4 will be more adapt to?</p>",
        "id": 319697784,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1672964447
    },
    {
        "content": "<p>Lean4 is not particularly better than Lean3 for things like this, except possibly that actually computing LU decompositions (row reductions) could be implemented faster.</p>",
        "id": 319711110,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672973720
    },
    {
        "content": "<p>I think the first tactic one would want here is something like <code>lu_decomposition</code>, which looks for a matrix in the goal, and replaces it with its LU decomposition. (And maybe asserts the relevant facts about the pieces of the decomposition.)</p>",
        "id": 319711219,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672973792
    },
    {
        "content": "<p>As far as I'm aware no one has done this, but it would be a great project. (Preferably at this point it should be done in Lean4 rather than in Lean3, so we don't have to port it, but this requires waiting a little.)</p>",
        "id": 319711287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672973861
    },
    {
        "content": "<p>(I guess the other advantage of Lean4 here is that really this tactic should be implemented by calling out to some existing fast library for computing matrix decompositions, and this is much more viable from Lean4 than from Lean3.)</p>",
        "id": 319711368,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672973905
    },
    {
        "content": "<p>LU is another one of those things where the decomposition can be done without proofs and then the check that it's correct can be done formally</p>",
        "id": 319725243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672986770
    },
    {
        "content": "<p>(Making it particularly suitable for calling out to existing optimised fast libraries!)</p>",
        "id": 319748661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672998974
    },
    {
        "content": "<p>The only problem with using an existing fast library is it then becomes embarrassing when the slowest part of the whole procedure is just turning an <code>expr</code> into a matrix of numbers or whatever</p>",
        "id": 319749998,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672999522
    },
    {
        "content": "<p>(For what it's worth, I have some code that does the convert-to-expr step <a href=\"https://github.com/leanprover-community/mathlib/pull/15738/files#diff-b36bd1d8c59c371cba88a8d51500b848c17ed9625114b6a56e57eef24c89f1caR306-R307\">here</a>)</p>",
        "id": 319752773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673000680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> has been working on doing matrix operations like these in Sage and importing and verifying them in Lean (no LU decomposition yet, IIRC)</p>",
        "id": 319760877,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673003941
    },
    {
        "content": "<p>Yes I think we did RREF, but it should be only a small change to do LU instead</p>",
        "id": 319762428,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1673004496
    }
]