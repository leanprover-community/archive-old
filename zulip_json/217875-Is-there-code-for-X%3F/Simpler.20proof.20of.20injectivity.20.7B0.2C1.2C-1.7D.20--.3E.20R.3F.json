[
    {
        "content": "<p>I need the fact that when <code>a b : ℤ</code> are both in <code>{0, 1, -1}</code> and <code>(a : R) = (b : R)</code> in a nontrivial ring <code>R</code> of characteristic <code>≠ 2</code>, then <code>a = b</code>. I'm wondering if the following proof can be simplified.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"sd\">/-- We have `2 ≠ 0` in a nontrivial ring whose characteristic is not `2`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ring.two_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)),</span> <span class=\"n\">char_p.int_cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span> <span class=\"n\">int.coe_nat_dvd</span><span class=\"o\">,</span> <span class=\"n\">nat.dvd_prime</span> <span class=\"n\">nat.prime_two</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">or_iff_left</span> <span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">char_p.ring_char_ne_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- If two integers from `{0, 1, -1}` result in equal elements in a ring `R`</span>\n<span class=\"sd\">that is nontrivial and of characteristic not `2`, then they are equal. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ring.int_sign_eq_of_coe_eq</span>\n <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"c1\">-- move goals with `a = b` to the front</span>\n    <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- 6 goals remain</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">],</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">sub_eq_zero_of_eq</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">sub_eq_zero_of_eq</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hh</span> <span class=\"k\">with</span> <span class=\"n\">hh</span> <span class=\"bp\">|</span> <span class=\"n\">hh</span> <span class=\"bp\">|</span> <span class=\"n\">hh</span> <span class=\"bp\">|</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ring.two_ne_zero</span> <span class=\"n\">hR</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ring.two_ne_zero</span> <span class=\"n\">hR</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Fiddling with casts of numerals is especially annoying...)</p>",
        "id": 281721591,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652118875
    },
    {
        "content": "<p>Somehow I had the feeling that the proof of <code>hh</code> in the above should just be <code>dec_trivial</code>, but that does not seem to work.</p>",
        "id": 281721843,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652118996
    },
    {
        "content": "<p>Here's a minor golf for two_ne_zero, plus two more lemmas which I thought would be useful but turned out not to be because you can go straight from R to nat. I don't really see any way of dealing with all 9 cases in the big theorem; I mean, that's how we'd do it in our heads, right? I guess a more general approach would be to have a and b in <code>set.Icc (-N) N</code> and the assumption that the characteristic is 0 or bigger than 2N; that would force you to \"do it properly\" as it were.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_eq_zero_iff_nat_abs</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x.nat_abs</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">int.nat_abs_eq</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">hx</span> <span class=\"n\">hx</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">},</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ring_char.zspec</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_eq_zero_iff_nat_abs</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_dvd_left</span><span class=\"o\">,</span> <span class=\"n\">ring_char.spec</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- We have `2 ≠ 0` in a nontrivial ring whose characteristic is not `2`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ring.two_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span> <span class=\"n\">ring_char.spec</span><span class=\"o\">,</span> <span class=\"n\">nat.dvd_prime</span> <span class=\"n\">nat.prime_two</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">or_iff_left</span> <span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">char_p.ring_char_ne_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281732709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652123978
    },
    {
        "content": "<p>Thanks!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simpler.20proof.20of.20injectivity.20.7B0.2C1.2C-1.7D.20--.3E.20R.3F/near/281732709\">said</a>:</p>\n<blockquote>\n<p>I don't really see any way of dealing with all 9 cases in the big theorem; I mean, that's how we'd do it in our heads, right? I guess a more general approach would be to have a and b in <code>set.Icc (-N) N</code> and the assumption that the characteristic is 0 or bigger than 2N; that would force you to \"do it properly\" as it were.</p>\n</blockquote>\n<p>Well, but that would make the handling of the assumption on the characteristic much more unpleasant in my use case...</p>",
        "id": 281733251,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652124240
    },
    {
        "content": "<p>Here's a slightly shorter proof using the <code>rintro rfl</code> trick many times:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ring.int_sign_eq_of_coe_eq</span>\n <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hh</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ring.two_ne_zero</span> <span class=\"n\">hR</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ring.two_ne_zero</span> <span class=\"n\">hR</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281735071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652124966
    },
    {
        "content": "<p>Any reason you're not using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sign_type\">docs#sign_type</a>?</p>",
        "id": 281740962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652127841
    },
    {
        "content": "<p>This translates into \"The canonical map from <code>sign_type</code> is injective\"</p>",
        "id": 281741262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652127975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simpler.20proof.20of.20injectivity.20.7B0.2C1.2C-1.7D.20--.3E.20R.3F/near/281740962\">said</a>:</p>\n<blockquote>\n<p>Any reason you're not using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sign_type\">docs#sign_type</a>?</p>\n</blockquote>\n<p>Yes: I want to add values.<br>\nHow much simpler would the proof be when <code>a b : sign_type</code>? You still have nine cases to deal with...</p>",
        "id": 281742660,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652128734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simpler.20proof.20of.20injectivity.20.7B0.2C1.2C-1.7D.20--.3E.20R.3F/near/281735071\">said</a>:</p>\n<blockquote>\n<p>Here's a slightly shorter proof using the <code>rintro rfl</code> trick many times: (...)</p>\n</blockquote>\n<p>It is shorter, but a bit less efficient (although not by much).</p>",
        "id": 281743029,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652128944
    },
    {
        "content": "<p>The point of sign_type is basically to be coerced into the correct structure</p>",
        "id": 281747149,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652131078
    },
    {
        "content": "<p>The proof of <code>ring.two_ne_zero</code> can also be golfed to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ring.two_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hR</span> <span class=\"bp\">$</span> <span class=\"n\">char_p.ring_char_of_prime_eq_zero</span> <span class=\"n\">nat.prime_two</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>if you really want to obscure it.</p>",
        "id": 281801552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652176664
    },
    {
        "content": "<p>Also, in the spirit of <code>ring.int_sign_eq_of_coe_eq</code>, this lemma seems potentially useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">window</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">de</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.inj_on</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.Ico</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">ad</span><span class=\"o\">⟩</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">bd</span><span class=\"o\">⟩</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">char_p.int_coe_eq_int_coe_iff</span> <span class=\"n\">R</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">int.modeq_iff_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ab</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">int.lt_add_one_iff.mp</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg_nonpos.mp</span> <span class=\"o\">(</span><span class=\"n\">int.lt_add_one_iff.mp</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_lt_iff_lt_one_right</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">hc</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">c0</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281801714,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652176782
    },
    {
        "content": "<p>In fact, using <code>window</code>, you can prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ring.int_sign_eq_of_coe_eq_Ico</span>\n <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hR0</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ico</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ico</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">window</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ring_char.of_eq</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">nat.succ_le_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hR0</span><span class=\"o\">,</span> <span class=\"n\">char_p.ring_char_ne_one</span><span class=\"o\">,</span> <span class=\"n\">hR</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281803258,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652177741
    },
    {
        "content": "<p>Note that, besides replacing the explicit equalities of <code>a, b</code> I am using intervals.  Still, the main reason this feels simpler is the extra assumption <code>ring_char R ≠ 0</code>.  There was a discussion recently about the fact that <code>char_p R 0</code> is <em>not</em> an equivalent of <code>char_zero</code>.</p>\n<p>To me, your example seems to be further indication that <code>ring_char R = 0</code> should be mean <code>char_zero R</code> and not <code>char_p R 0</code>.</p>",
        "id": 281803543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652177901
    },
    {
        "content": "<p>This is a proof that in your case, the <code>ring_char</code> assumption also implies <code>char_zero R</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ch0</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hR0</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">char_p.char_p_to_char_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ring_char.of_eq</span> <span class=\"n\">hR0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281803594,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652177941
    }
]