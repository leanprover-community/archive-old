[
    {
        "content": "<p>At Xena. We just tried to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">37</span> <span class=\"k\">then</span> <span class=\"mi\">37</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>but failed miserably. I don't know how to steer integrals at all. We managed to split the integral up into two pieces but then we had to prove that the pieces were <code>interval_integrable</code>; we constructed a measure <em>on the reals</em> which was supported on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>37</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1/37]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mclose\">]</span></span></span></span> but then couldn't integrate f because it wasn't constant on the entire reals. It is equal to a constant function modulo a set of measure zero but to prove this we then had to prove was measurable. Maybe we could persevere but I thought it was easier to just ask.</p>",
        "id": 218031415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606417674
    },
    {
        "content": "<p>It's a simple function, so you could use the simple function integral</p>",
        "id": 218031808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606418033
    },
    {
        "content": "<p>So 150 lines later we have computed the <code>lintegral</code> of a related ennreal-valued function :-/</p>",
        "id": 218042847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606430113
    },
    {
        "content": "<p>This is harder than it looks, even when you look at it a bit and note that it's hard</p>",
        "id": 218042861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606430144
    },
    {
        "content": "<p>Are we missing API? Or automation? (a <code>measurable</code> tactic?)</p>",
        "id": 218043015,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606430344
    },
    {
        "content": "<p>I think one problem was we used <code>pnat</code> in the definition which was not easy to work with (kept needing to coerce to <code>ennreal</code> and back)</p>",
        "id": 218043764,
        "sender_full_name": "Jason KY.",
        "timestamp": 1606431403
    },
    {
        "content": "<p>I don't know the API (nobody did, we were all looking at it for the first time, Shing and Bhavik and Jason were involved). Switching from reals to ennreals (note there's no coercion in either direction) was a bit of a shock. We were trying to do something more general involving pnats which didn't help. I still don't know how to compute the integral because I don't know how to relate it to the lintegral of the ennreal-valued function. Yury has done a ton of stuff but I don't really know how to steer it. I explained the trouble I had when trying to compute it directly, but perhaps Yury or someone else who knows this part of the library might be able to sail through it.</p>",
        "id": 218043853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606431536
    },
    {
        "content": "<p>I'll try to add missing lemmas in a few days. I have a few deadlines on Nov. 30 and Dec. 1, so please ping me on Dec. 2.</p>",
        "id": 218051505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1606443405
    },
    {
        "content": "<p>This is not high priority! As usual in Xena it came from trying to do random undergraduate maths in Lean.</p>",
        "id": 218065206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606464497
    },
    {
        "content": "<p>Good representations of piecewise functions are very tricky. I've written a couple of papers about that, and I was only scratching the surface. The problems only arise when you start to worry about efficiency, undefinedness or decidability - if you ignore them, then it's not that big a deal.</p>",
        "id": 218308944,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1606753226
    }
]