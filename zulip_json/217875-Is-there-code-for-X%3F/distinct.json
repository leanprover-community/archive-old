[
    {
        "content": "<p>Suppose I have a type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> and three terms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo>:</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">x,y,z : \\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>. What's the idiomatic way to say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x,y,z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> are distinct?</p>",
        "id": 227005598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613758895
    },
    {
        "content": "<p>My inclination is to be tricky with matrices: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">distinct</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 227006127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613759149
    },
    {
        "content": "<p>This came up on the discord and whatever the idiomatic way is, it was generally agreed that the most helpful way was just x \\ne y \\and y \\ne z \\and z \\ne x. A more fun question: if alpha is linearly ordered and your goal is S_3-invariant, how do you now prove WLOG x&lt;y&lt;z?</p>",
        "id": 227006875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613759517
    },
    {
        "content": "<p>Okay, but now what if I have 5 elements?</p>",
        "id": 227006974,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613759546
    },
    {
        "content": "<p>I don't want to write too many things</p>",
        "id": 227007009,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613759565
    },
    {
        "content": "<p>Possibly <code>[x,y,z].pairwise (≠)</code></p>",
        "id": 227007018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613759569
    },
    {
        "content": "<p>Which should still give you helpful induction principles</p>",
        "id": 227007057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613759585
    },
    {
        "content": "<p>I would still like a smaller proof, but this isn't too bad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">cond.ne</span> <span class=\"bp\">$</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 227007458,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613759758
    },
    {
        "content": "<p>Do you ever really have 5 elements in practice?</p>",
        "id": 227014938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613762783
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Complete_quadrangle\">https://en.wikipedia.org/wiki/Complete_quadrangle</a></p>",
        "id": 227015164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613762875
    },
    {
        "content": "<p>I can get by with 3, but I might need 5 in the future :)</p>",
        "id": 227015281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613762904
    },
    {
        "content": "<p>I don't think I'll ever need 6 though.</p>",
        "id": 227015339,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613762931
    },
    {
        "content": "<p>This all started with the following lemma which I'm working on for some stuff with projective geometry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_unique_rep_of_colinear</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">proj</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.is_rep</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">colinear</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">function.injective</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">])</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">y.is_rep</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">z.is_rep</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 227015728,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613763068
    },
    {
        "content": "<p>(in some sense, this is the key lemma that makes the fundamental theorem of projective geometry actually work.)</p>",
        "id": 227015839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613763112
    }
]