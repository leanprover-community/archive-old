[
    {
        "content": "<p>I see we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given subgroups H, K of groups G, N respectively, H × K as a subgroup of G × N. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">subgroup.prod</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I don’t see corresponding notions for subgroups of pi groups (i.e. infinite products). Are they missing so far?</p>",
        "id": 270553364,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643896924
    },
    {
        "content": "<p>It would be called <code>subgroup.pi</code>, so I guess we don't!</p>",
        "id": 270553996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643897226
    },
    {
        "content": "<p>Ok, on it.</p>",
        "id": 270554411,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643897423
    },
    {
        "content": "<p>Why is some groupy theory stuff under <code>algebra</code>(e.g. <code>algebra.group.pi</code>) and others under <code>group_theory</code>? How to decide what goes where?</p>",
        "id": 270558312,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643899068
    },
    {
        "content": "<p>It depends on whether you see <code>group</code> as an algebraic structure belonging in the algebraic hierarchy, or as an object of study of its own. The separation is quite empirical.</p>",
        "id": 270558583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643899165
    },
    {
        "content": "<p>Before I go on proving the necessary lemmas (like those that we have for <code>subgroup.prod</code>), how is this for the definition?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/11801/files\">https://github.com/leanprover-community/mathlib/pull/11801/files</a></p>",
        "id": 270559963,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643899577
    },
    {
        "content": "<p>You can simplify the def of <code>carrier</code> to <code>{f | ∀ i, f i ∈ s i}</code> but I'm not sure it's terribly useful.</p>",
        "id": 270564841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643901425
    },
    {
        "content": "<p>It would make these silly <code>trivial</code> arguments go away, and some of the lemmas would become <code>refl</code> that otherwise aren’t. But it would mean not using <code>set.pi</code>. But maybe it’s nicer indeed.</p>",
        "id": 270571024,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643903703
    },
    {
        "content": "<p>Another option is to copy API of <code>set.pi</code> and take an argument <code>I : set η</code></p>",
        "id": 270572257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643904097
    },
    {
        "content": "<p>Hmm, not sure how useful that’s is. <code>\\Pi</code> doesn’t have an <code>I</code>, so why expect it for subgroups. We can generalize later if needed?</p>",
        "id": 270572720,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643904253
    },
    {
        "content": "<p>I don't know if it's useful either. Depends on how often you want to restrict only some coordinates.</p>",
        "id": 270575150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643905192
    },
    {
        "content": "<p>If you don't go this way, then you should drop <code>set.pi</code> and do what <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> suggested.</p>",
        "id": 270575260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643905223
    },
    {
        "content": "<p>Agreed with everything Yury said.</p>",
        "id": 270575335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643905262
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.pi\">docs#submodule.pi</a>?</p>",
        "id": 270576841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643905842
    },
    {
        "content": "<p>Yes, we do - so the subgroup API should match</p>",
        "id": 270576931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643905877
    },
    {
        "content": "<p>Hmm, ok, fair point. Will adjust.</p>",
        "id": 270579986,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643907031
    }
]