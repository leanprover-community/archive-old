[
    {
        "content": "<p>Is there something like this in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_mul_of_one_le_of_le'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n<span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul</span> <span class=\"n\">ha</span> <span class=\"n\">hbc</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">zero_le_one.trans</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>There is a version of this lemma for <code>[covariant_class α α (*) (≤)]</code>, but I want to apply it to reals.<br>\nIs <code>[ordered_semiring α]</code> the best scope for it?</p>",
        "id": 256800139,
        "sender_full_name": "Artem Vasilev",
        "timestamp": 1633724621
    },
    {
        "content": "<p>The ordered refactor hasn't hit rings/fields yet, so that's why the lemmas are less complete for them. With the current classes <code>ordered_semiring</code> is indeed the best class for this.</p>",
        "id": 256802502,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633725579
    },
    {
        "content": "<p>And to answer your question: no this doesn't seem to be there yet. I thought there would be a variant where <code>b</code> and <code>c</code> are identical, but I also cannot find that version.</p>",
        "id": 256802731,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633725702
    },
    {
        "content": "<p>Oh, the version where <code>b</code> and <code>c</code> are identical is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_mul_of_one_le_left\">docs#le_mul_of_one_le_left</a>.</p>",
        "id": 256803446,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633726027
    },
    {
        "content": "<p>Thank you! So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_mul_of_one_le_of_le'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">le_mul_of_one_le_left</span> <span class=\"n\">hb</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hbc</span> <span class=\"o\">(</span><span class=\"n\">zero_le_one.trans</span> <span class=\"n\">ha</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>works for me. Is there a demand for PRing individual lemmas like this one?</p>",
        "id": 256804931,
        "sender_full_name": "Artem Vasilev",
        "timestamp": 1633726765
    },
    {
        "content": "<p>Yes, a PR is good, thanks!</p>",
        "id": 256806439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633727417
    }
]