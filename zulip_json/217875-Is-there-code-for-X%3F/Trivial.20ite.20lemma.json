[
    {
        "content": "<p>How do I prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R₁</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292319357,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659878263
    },
    {
        "content": "<p>if_congr should be helpful, you could also just do congr', even simp could make progress</p>",
        "id": 292319533,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659878475
    },
    {
        "content": "<p><code>split_ifs ; tauto,</code></p>",
        "id": 292319538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659878486
    },
    {
        "content": "<p>or <code>congr' 1,  simp</code></p>",
        "id": 292319604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659878553
    },
    {
        "content": "<p>Does <code>rw eq_comm</code> work?</p>",
        "id": 292319793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659878819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> no it rewrites the equality itself</p>",
        "id": 292319878,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659878939
    },
    {
        "content": "<p><code>@eq_comm n</code>?</p>",
        "id": 292319898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659878955
    },
    {
        "content": "<p>thanks everyone, I used Patrick's first suggestion now</p>",
        "id": 292320037,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659879114
    },
    {
        "content": "<p>Eric: rewrite tactic failed, motive is not type correct<br>\n  λ (_a : Prop), ite (i' = i) 1 0 = ite (i = i') 1 0 = (ite _a 1 0 = ite (i = i') 1 0)</p>",
        "id": 292320042,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659879121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> <code>simp</code> didn't help, which surprised me</p>",
        "id": 292320091,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659879143
    },
    {
        "content": "<p><code>congr</code> was doing crazy things and I forgot that there is <code>congr'</code></p>",
        "id": 292320107,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659879190
    },
    {
        "content": "<p>Follow-up question: which of these lemmas (if any) should be in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">std_basis_apply'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">std_basis</span> <span class=\"n\">R₁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">R₁</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"n\">i'</span> <span class=\"bp\">=</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.std_basis_apply</span><span class=\"o\">,</span> <span class=\"n\">function.update_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.zero_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ring_hom_ite_zero_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ring_hom_ite_one_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 292320191,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659879307
    },
    {
        "content": "<p><code>σ₁</code> is obviously a <code>ring_hom</code></p>",
        "id": 292320351,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659879512
    },
    {
        "content": "<p>My second suggestion was morally more correct (closer to what you tried with <code>rw</code>)</p>",
        "id": 292320481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659879659
    },
    {
        "content": "<p>but it was less Lean-correct. <code>congr' 1, rw [eq_iff_iff], exact eq_comm</code>works though</p>",
        "id": 292320641,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659879851
    },
    {
        "content": "<p>or better <code>congr' 1, rw [eq_iff_iff, eq_comm]</code></p>",
        "id": 292320662,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659879884
    },
    {
        "content": "<p>Eric's suggestion can be made to work, but Lean resists: <code>simp_rw (@eq_comm n i _)</code>.</p>",
        "id": 292320703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659879925
    },
    {
        "content": "<p>What about <code>simp_rw eq_comm</code> or <code>simp only [eq_comm]</code>?</p>",
        "id": 292320898,
        "sender_full_name": "FR",
        "timestamp": 1659880184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Trivial.20ite.20lemma/near/292319533\">said</a>:</p>\n<blockquote>\n<p>if_congr should be helpful, you could also just do congr', even simp could make progress</p>\n</blockquote>\n<p>This works for me, a one line proof is <code>exact if_congr eq_comm rfl rfl</code></p>",
        "id": 292329867,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659892867
    }
]