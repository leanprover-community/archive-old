[
    {
        "content": "<p>Does mathlib have something resembling at least the first of these lemmas (gluing of functions parametrized by a family of sets, which agree on intersections of the sets), if not the second (a continuous version)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">eq_on</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">eq_on</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exists_unique_of_exists_of_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">choose</span> <span class=\"n\">I</span> <span class=\"n\">hI</span> <span class=\"n\">using</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hI</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">hf</span> <span class=\"n\">hf'</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_glue</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">eq_on</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">eq_on</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mem_of_mem_nhds</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">exists_unique_f</span> <span class=\"o\">:=</span> <span class=\"n\">glue</span> <span class=\"n\">hs'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exists_unique_of_exists_of_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_unique_f.exists</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">hf</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_continuous_at</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous.continuous_at.congr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter.eventually_eq_of_mem</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hf</span> <span class=\"n\">hf'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">continuous_map.coe_inj</span> <span class=\"o\">(</span><span class=\"n\">exists_unique_f.unique</span> <span class=\"n\">hf</span> <span class=\"n\">hf'</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252522535,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631130929
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> used something like it in the various files on local equivalences and local homeomorphisms?</p>",
        "id": 252522667,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631130971
    },
    {
        "content": "<p>Or maybe someone doing sheaf-y work like <span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span>?</p>",
        "id": 252522759,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631131012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> you were just doing this with bare functions recently, right?</p>",
        "id": 252523186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631131186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> was looking at this only a few days ago</p>",
        "id": 252523191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631131189
    },
    {
        "content": "<p>Aha!  This is <a href=\"https://github.com/leanprover-community/mathlib/issues/9019\">#9019</a> right?</p>",
        "id": 252524040,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631131467
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9019\">#9019</a>. The hypotheses are slightly different, I guess the thing you'd need would be <code>lift_of_eq_Union</code>. I didn't do anything topological. Maybe there should be just one version for defining maps out of sets contained in a Union. The <code>F : iota -&gt; alpha-&gt; beta</code> isn't ideal for my application, the functions are alg_homs defined on a sub_alg, and I really don't want to have to give them junk values elsewhere.</p>",
        "id": 252524677,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631131717
    },
    {
        "content": "<p>I also think it might be worth having several versions of this.</p>",
        "id": 252524769,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631131766
    },
    {
        "content": "<p>I like that your version allows one to lift \"partway\", i.e. in my setting just to the union of the sets, if they don't cover the space completely.  Of course this loses the uniqueness part of my statement.</p>",
        "id": 252525969,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631132162
    },
    {
        "content": "<p>We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Top.sheaf.exists_unique_gluing'\">docs#Top.sheaf.exists_unique_gluing'</a> and we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Top.sheaf_to_Top\">docs#Top.sheaf_to_Top</a>. Putting them together gives something close to your second lemma, though not quite. See for yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.local_predicate</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.sheaf_condition.unique_gluing</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Top</span>\n\n<span class=\"kd\">variables</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sheaf_to_Top</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">β</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_gluing'</span>\n</code></pre></div>\n<p>The difference is that this takes a family of  <em>open</em> sets <code>U : ι → opens α</code> and a family <code>f : Π i, C(U i, β)</code>.</p>",
        "id": 252608078,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631186224
    },
    {
        "content": "<p>Note that <code>(@sheaf_to_Top (Top.of α) (Top.of β)).presheaf.obj (op U)</code> is defeq to <code>C(U, β)</code>.</p>",
        "id": 252608109,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631186244
    },
    {
        "content": "<p>(Also, it requires α and β to live in the same universe)</p>",
        "id": 252608293,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631186352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> What do you think of <a href=\"https://github.com/leanprover-community/mathlib/issues/9019\">#9019</a> ? I was thinking of deleting <code>Union_lift_of_eq</code> and just having one version for defining maps out of any subtype contained in the Union.</p>",
        "id": 252619261,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631191801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Maybe we don't need the <code>of_eq</code> version, but I think it would be nice to have a special version for when the union is the whole set.  Full disclosure:  I just tried to write such a special version myself,  and found that I don't know enough about subtypes to do it!</p>",
        "id": 252722783,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631240076
    },
    {
        "content": "<p>Is this an ongoing part of mathlib development? I've been putting together (my own, not using the mathlib topology library, since I am an amateur) lemmas on exactly this stuff, about gluing along open sets + fiber products + fiber bundles.</p>\n<p>I had figured stuff like this was probably already in mathlib, but if it isn't, would this be a reasonable topic where a newcomer like me could contribute?</p>",
        "id": 252729824,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631246818
    },
    {
        "content": "<p>(I realize I'd have to learn the Lean style, actually use mathlib instead of my own homebrewed <code>topology</code> stuff, etc)</p>",
        "id": 252729846,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631246870
    },
    {
        "content": "<p>(In particular I wrote a lemma nearly identical to <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> 's <code>continuous_glue</code> above, right down to the proof strategy of using \"continuous iff continuous at each point\"... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 252730232,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631247316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"391579\">@Jake Levinson</span> Welcome!  We'll be glad to have your contributions!</p>\n<p>I do wonder if these gluing lemmas are a bit of a special case, and less suited for a newcomer than most.  It's clear that there are 100 possible variations (see the four versions mentioned by Chris, me, yourself and Justus, all in the last few days).  It seems to me that the challenge here is not in the proofs themselves, but in figuring out the most efficient path -- which versions are special cases of other versions, what special cases deserve their own entries in the library, etc.</p>",
        "id": 252733047,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631250109
    },
    {
        "content": "<p>Perhaps you could start by doing some testing -- can you deduce your version from Chris'?  Or if not, can you generalize yours in a way that allows Chris' to be deduced from yours?  Same for the one mentioned by Justus, etc etc.</p>",
        "id": 252733125,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631250191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Gluing.20of.20.5Bcontinuous.5D.20functions/near/252733047\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> Welcome!  We'll be glad to have your contributions!</p>\n<p>I do wonder if these gluing lemmas are a bit of a special case, and less suited for a newcomer than most.  It's clear that there are 100 possible variations (see the four versions mentioned by Chris, me, yourself and Justus, all in the last few days).  It seems to me that the challenge here is not in the proofs themselves, but in figuring out the most efficient path -- which versions are special cases of other versions, what special cases deserve their own entries in the library, etc.</p>\n</blockquote>\n<p>Thanks! That makes sense to me. I am definitely not in a position to judge the global merits of one approach over another, though could potentially help fill in <code>sorry</code>s if needed.</p>\n<p>I tried earlier today to deduce Chris's version from mine (which requires the sets to be a full cover). I think it's not too bad, but the main awkwardness indeed appeared to come from subtype stuff.</p>\n<p>One (minor?) subtype issue I noticed regarding extending a function to <code>Union S</code>, vs extending to the entire type (in the case of a full cover), is that the latter is not a direct special case of the former (even with the additional <code>lift_of_eq_Union</code> definition). In particular, even if we have the hypothesis <code>h : Union S = set.univ</code>, <code>lift_of_eq_Union</code> will produce a function <code>f : ↑set.univ → β</code> rather than <code>α → β</code>. That is, the domain of <code>f</code> is the subtype <code>{a : α // true}</code> which is equivalent but not equal to <code>α</code>.</p>\n<p>Something similar to this came up for me at one point and I found it annoying to have to deal with... so it may be handy to have some API to cover this case.  I know there's plenty of support for the usual <code>coe : {a : α // true} → α</code>, but is there a standard name for the one going the other way, <code>eoc : α → {a : α // true} := λ x, ⟨x, trivial⟩</code> as needed above?</p>",
        "id": 252871173,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631322577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"391579\">@Jake Levinson</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Sorry to have been slow in coming back to this.  I have written a PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/9239\">#9239</a>) containing just the version of continuous gluing I need.  Feel free to hijack this PR with other versions, if you have suggestions!</p>",
        "id": 253691361,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631855616
    }
]