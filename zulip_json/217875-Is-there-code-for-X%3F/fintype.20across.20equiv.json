[
    {
        "content": "<p>Do we have the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h'.to_embedding</span><span class=\"o\">,</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 241696080,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622992203
    },
    {
        "content": "<p>I'd call it <code>equiv.fintype</code> but that's taken by the <code>instance [fintype α] [fintype β] : fintype (α ≃ β) := sorry</code> that exists</p>",
        "id": 241696123,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622992263
    },
    {
        "content": "<p>We have fintype across injective maps, so you can use the fact that an equiv is injective</p>",
        "id": 241696195,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622992335
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_injective\">docs#fintype.of_injective</a> I think?</p>",
        "id": 241696204,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622992375
    },
    {
        "content": "<p>Oh, it's noncomputable =C</p>",
        "id": 241696208,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622992384
    },
    {
        "content": "<p>Oh and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_equiv\">docs#fintype.of_equiv</a></p>",
        "id": 241696219,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622992406
    },
    {
        "content": "<p>Ah, right after, <code>of_equiv</code></p>",
        "id": 241696220,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622992407
    },
    {
        "content": "<p>A follow up, is there something that can lift a <code>fintype</code> out of a quotient? Like in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fintype.multiset_nodup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">s.nodup</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_equiv</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s.val</span><span class=\"o\">,</span> <span class=\"n\">s.nodup</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s.val</span><span class=\"o\">,</span> <span class=\"n\">s.prop</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_def</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_def</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fintype.list_nodup</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">nodup</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 241696391,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622992670
    },
    {
        "content": "<p>There might just be a fintype instance on a quotient given a fintype instance on the original type?</p>",
        "id": 241696537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622992899
    },
    {
        "content": "<p>Oh that's not what you want, sorry. You want to go the other way!</p>",
        "id": 241696609,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622992982
    },
    {
        "content": "<p>Yeah, I want to show that <code>nodup</code> lists have a fintype, and then lower it into a different quotient than <code>multiset</code>.</p>",
        "id": 241696770,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622993210
    },
    {
        "content": "<p>Here's as neat as I could get it, I think it's doing the right thing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fintype.multiset_nodup</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">s.nodup</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_equiv</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s.val</span><span class=\"o\">,</span> <span class=\"n\">s.nodup</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s.val</span><span class=\"o\">,</span> <span class=\"n\">s.prop</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_def</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_def</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">multiset.finset_list</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.lift_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l.permutations.to_finset</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_permutations</span><span class=\"o\">,</span> <span class=\"n\">mem_to_finset</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h'.trans</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h'.trans</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">finset_list_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finset_list</span> <span class=\"bp\">=</span> <span class=\"n\">l.permutations.to_finset</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_finset_list</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">s.finset_list</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">quotient.induction_on</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fintype.list_nodup</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">nodup</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">s.nodup</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finset.subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">l.nodup</span><span class=\"o\">)</span> <span class=\"n\">s.val.finset_list</span><span class=\"o\">),</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 241700049,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622998324
    }
]