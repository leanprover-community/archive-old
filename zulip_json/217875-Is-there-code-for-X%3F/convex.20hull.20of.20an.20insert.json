[
    {
        "content": "<p>Do we have something akin to this lemma in mathlib? Maybe with affine combinations instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">convex_hull_insert</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">convex_hull</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">segment</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>The idea is to write an affine combination over <code>A ∪ {x}</code> as the sum of the contribution of x + an affine combination over <code>A</code>.</p>",
        "id": 235336487,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618922568
    },
    {
        "content": "<p>Also, do we have more generally the definition of <code>convex_join : set E → set E → set E</code> such that <code>convex_hull (A ∪ B) = convex_join (convex_hull A) (convex_hull B)</code>?</p>",
        "id": 235342459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618924974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I think you are our convexity expert...</p>",
        "id": 235344743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618925884
    }
]