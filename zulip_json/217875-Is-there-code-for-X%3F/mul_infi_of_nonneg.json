[
    {
        "content": "<p>Does this exist for <code>Inf</code> or some more general setting?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real.mul_infi_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">is_empty_or_nonempty</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real.cinfi_empty</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hrp</span> <span class=\"o\">:=</span> <span class=\"n\">hr.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">real.cinfi_const_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">order_iso.mul_left₀</span> <span class=\"n\">_</span> <span class=\"n\">hrp</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">order_iso.mul_left₀</span> <span class=\"n\">_</span> <span class=\"n\">hrp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">order_iso.map_cinfi</span> <span class=\"n\">_</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">infi</span><span class=\"o\">,</span> <span class=\"n\">infi</span><span class=\"o\">,</span> <span class=\"n\">real.Inf_of_not_bdd_below</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">real.Inf_of_not_bdd_below</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n    <span class=\"n\">order_iso.mul_left₀_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H.smul_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">inv_nonneg.mpr</span> <span class=\"n\">hr</span><span class=\"o\">),</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">image_smul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">range_comp</span><span class=\"o\">,</span> <span class=\"n\">function.comp</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel_left₀</span> <span class=\"n\">hrp.ne'</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(cc <span class=\"user-mention\" data-user-id=\"475844\">@Pierre-Alexandre Bazin</span>, this would help in your seminorm PR)</p>\n<p>Should the name mention <code>infi</code> or <code>cinfi</code>?</p>",
        "id": 272296894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645120108
    },
    {
        "content": "<p>Aha!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real.mul_infi_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">real.Inf_smul_of_nonneg</span> <span class=\"n\">hr</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Inf</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">range_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.Inf_smul_of_nonneg\">docs#real.Inf_smul_of_nonneg</a> is very close</p>",
        "id": 272297473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645120384
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12105\">#12105</a></p>",
        "id": 272299658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645121187
    }
]