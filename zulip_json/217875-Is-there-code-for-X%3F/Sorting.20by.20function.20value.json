[
    {
        "content": "<p>Is there a way to prove this already in mathlib? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291057491,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1658936287
    },
    {
        "content": "<p>As it stands, doesn't that just say the false statement \"some random injection from a finite linear order to an arbitrary linear order preserves the order\"? Or am I missing something? For example alpha=beta={0,1}, f=identity, e=x\\mapsto 1-x?</p>",
        "id": 291060799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658937682
    },
    {
        "content": "<p>I don't think so; it's saying that after composing with an appropriate permutation, the random injection preserves the order.</p>",
        "id": 291071056,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1658938496
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_extension\">docs#linear_extension</a>.  So you could probably define a partial order on <code>β</code> by saying that the elements that come from <code>α</code> have their order from <code>α</code>, everything else is bigger and then linearly extend.  Not sure how pleasant this would be, though.</p>",
        "id": 291071308,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658938604
    },
    {
        "content": "<p>Possibly inducing a partial order from mapping <code>β</code> to <code>with_top α</code> might help with some of the steps.</p>",
        "id": 291071527,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658938689
    },
    {
        "content": "<p>Maybe what's in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fin/tuple/sort.html\">https://leanprover-community.github.io/mathlib_docs/data/fin/tuple/sort.html</a> could be generalized to linear orders? This one is for permuting a finite domain rather than permuting the codomain.</p>",
        "id": 291071976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658938909
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.equiv.fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.fin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">nonempty_fintype</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">perm.extend_domain</span> <span class=\"o\">(((</span><span class=\"n\">mono_equiv_of_fin</span> <span class=\"n\">α</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">f.to_equiv_range.trans</span> <span class=\"o\">((</span><span class=\"n\">mono_equiv_of_fin</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_range</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm.to_equiv</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mono_equiv_of_fin</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_range</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">perm.extend_domain_apply_subtype</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- un-obfuscated</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">nonempty_fintype</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mono_equiv_of_fin</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_range</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm.to_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_equiv_range</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mono_equiv_of_fin</span> <span class=\"n\">α</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">c.trans</span> <span class=\"o\">(</span><span class=\"n\">b.trans</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">this.extend_domain</span> <span class=\"o\">(</span><span class=\"n\">mono_equiv_of_fin</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_range</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">perm.extend_domain_apply_subtype</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291074607,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658940082
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.extend_domain\">docs#equiv.perm.extend_domain</a>: very nice!</p>",
        "id": 291075413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658940434
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 291076684,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1658940978
    },
    {
        "content": "<p>Is it true for infinite <code>α</code>?</p>",
        "id": 291079892,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658942316
    },
    {
        "content": "<p>No, you can't <del>reorder</del> permute N to get its dual order ...</p>",
        "id": 291080663,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658942641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> How do you mean? Can't <code>e</code> flip N back over?</p>",
        "id": 291080835,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658942722
    },
    {
        "content": "<p>I think the scenario in question is when <code>f = order_dual.to_dual.to_embedding</code></p>",
        "id": 291080892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658942755
    },
    {
        "content": "<p>For infinite <code>α</code>, I think it might be true at least when it's countable. In the general case, I'd think the fact that there are different order types with the same cardinality would be an obstruction.</p>",
        "id": 291081364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658942970
    },
    {
        "content": "<p>I thought we concluded it's not even true when <code>α = nat</code> (<code>f = order_dual.to_dual.to_embedding</code>, <code>β = order_dual nat</code>)?</p>",
        "id": 291081479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658943005
    },
    {
        "content": "<p>Oh right, not sure how you'd flip N over...</p>",
        "id": 291081726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658943103
    },
    {
        "content": "<p>Proof goes something like \"if there was one, <code>e 0</code> would have to be greater than all other nats, but then nat would be finite\"</p>",
        "id": 291081748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658943112
    }
]