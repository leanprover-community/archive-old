[
    {
        "content": "<p>Dear All,</p>\n<p>I have been unable to find the lemma below, but I would imagine that it is already in mathlib: do you know what is its name?</p>\n<p>On a golfing technique, can you unify the <code>rcases</code> with <code>exact</code>?</p>\n<p>Thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">setext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">--  ext1, simp,  also proves this lemma</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union.mpr</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">set.mem_Union.mp</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">subtype.val_prop</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217965562,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606366191
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/data/set/lattice.lean:438</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">sUnion_singleton</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋃₀</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">Sup_singleton</span>\n</code></pre></div>",
        "id": 217967352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606368725
    },
    {
        "content": "<p>atm, you can't combine <code>rcases</code> with <code>exact</code>. And I don't know how to turn it into a syntax that would really save many characters.</p>",
        "id": 217967369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606368762
    },
    {
        "content": "<p>I don't think that is the theorem he's looking for?</p>",
        "id": 217972005,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606375883
    },
    {
        "content": "<p>Yup, you are totally right</p>",
        "id": 217972101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606376020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">setext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.subset.antisymm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">his</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union.2</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">his</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span> <span class=\"bp\">$</span>\n<span class=\"n\">set.Union_subset</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set.singleton_subset_iff.2</span> <span class=\"n\">i.2</span>\n</code></pre></div>",
        "id": 217972150,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606376063
    },
    {
        "content": "<p>Dear <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , thank you for your inputs!  Kenny's proof works for me!  I do not know whether this lemma should be added to <code>data.set.lattice</code>.  Do you have an opinion?</p>",
        "id": 217974071,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606378166
    },
    {
        "content": "<p>Should this lemma name contain the word subtype?</p>",
        "id": 217976640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606380272
    },
    {
        "content": "<p>The non-subtype version is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bUnion_of_singleton\">docs#set.bUnion_of_singleton</a></p>",
        "id": 217979292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606382295
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">setext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">set.bUnion_of_singleton</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 217979305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606382311
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Union_of_singleton\">docs#set.Union_of_singleton</a> is also close, but it's missing the coercions</p>",
        "id": 217980199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606382906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> bad link (<code>set.set.</code>)</p>",
        "id": 217982108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606384034
    },
    {
        "content": "<p>Zulip needs the same linters as mathlib</p>",
        "id": 217982158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606384063
    },
    {
        "content": "<p>I do not necessarily insist on this lemma appearing in mathlib.  I was simply surprised that it was not.  However, it is a lemma that I am using and, so far, I have not been able to make the other suggestions work (except for Kenny's).</p>",
        "id": 217987082,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606387462
    },
    {
        "content": "<p>Perhaps this is the more useful lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.Union_subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.subset.antisymm</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_Union.mp</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.mem_Union.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">i.prop</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩⟩,</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_Union.mp</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hhi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_Union.mp</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.mem_Union.mpr</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span> <span class=\"n\">hhi</span><span class=\"o\">⟩,</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 217988165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606388218
    },
    {
        "content": "<p>For my actual example, I have not been able to use <code>set.Union_subtype</code>, though this is likely due to the fact that I am not understanding what is going on.  I tried applying it with <code>f</code> given by <code>λ i, singleton i</code> and it did not work...</p>",
        "id": 217990295,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606389784
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">setext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.Union_subtype</span><span class=\"o\">,</span> <span class=\"n\">set.bUnion_of_singleton</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 217992855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606391707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> this now works, thank you!</p>\n<p>As I only use it once, I do not really have a strong opinion on which form of these lemmas to prefer, nor whether they \"should be\" in mathlib!</p>\n<p>In any case, thank you all for your help!</p>",
        "id": 218004924,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606399391
    }
]