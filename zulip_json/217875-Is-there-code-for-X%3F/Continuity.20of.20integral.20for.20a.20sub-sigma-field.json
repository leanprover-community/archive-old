[
    {
        "content": "<p>Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mα'</span> <span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">mα'</span> <span class=\"bp\">≤</span> <span class=\"n\">mα</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">)),</span> <span class=\"n\">integral</span> <span class=\"n\">μ</span> <span class=\"bp\">⇑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It looks like a composition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.continuous_integral\">docs#measure_theory.continuous_integral</a> with the fact that Lp of a sub-sigma-field is contained in Lp of the ambient sigma-field, but I am getting lost writing code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ae_trim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mα'</span> <span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">mα'</span> <span class=\"bp\">≤</span> <span class=\"n\">mα</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">ae_eq_fun</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span> <span class=\"n\">mα'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">ae_eq_fun</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span> <span class=\"n\">mα</span> <span class=\"n\">_</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measure.ae_eq_setoid</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span> <span class=\"n\">mα</span> <span class=\"n\">_</span> <span class=\"n\">μ</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measure.ae_eq_setoid</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span> <span class=\"n\">mα'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient.lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ae_strongly_measurable_of_ae_strongly_measurable_trim</span> <span class=\"n\">hm</span> <span class=\"n\">f.prop</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hfg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quotient.eq</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ae_eq_of_ae_eq_trim</span> <span class=\"n\">hfg</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277994869,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649235847
    },
    {
        "content": "<p>I am not sure we have this one. I thought I wrote something like that but I can't find it: I might be thinking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.continuous_set_integral\">docs#measure_theory.continuous_set_integral</a> instead.<br>\nAs you say, you should be able to get it from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.continuous_integral\">docs#measure_theory.continuous_integral</a> and some functions to go from one Lp space to another: look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp_meas_to_Lp_trim\">docs#measure_theory.Lp_meas_to_Lp_trim</a> and what's around it. I am not sure but it might be what you need.</p>",
        "id": 277997755,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1649237460
    },
    {
        "content": "<p>Must have been in your induction principle with measurability constraints :-) I am trying to do something similar as a way to learn the API (it's going to take a while ...). Indeed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.ae_strongly_measurable'\">docs#measure_theory.ae_strongly_measurable'</a> feelt promising.</p>",
        "id": 277998538,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649237895
    },
    {
        "content": "<p>The induction code is in PR <a href=\"https://github.com/leanprover-community/mathlib/pull/13129\">#13129</a> if you want to have a look</p>",
        "id": 277998703,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1649237993
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp_meas_to_Lp_trim_lie\">docs#measure_theory.Lp_meas_to_Lp_trim_lie</a> (line 600 in this PR) is what I was looking for :-)</p>",
        "id": 277999263,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649238289
    },
    {
        "content": "<p>Like this, it's not too bad in the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ae_strongly_measurable.mono</span> <span class=\"o\">{</span><span class=\"n\">m1</span> <span class=\"n\">m2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m1</span> <span class=\"bp\">≤</span> <span class=\"n\">m2</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">ae_strongly_measurable</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ae_strongly_measurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">h1.mono</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">ae_eq_of_ae_eq_trim</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Lp_trim_to_Lp</span> <span class=\"o\">{</span><span class=\"n\">m1</span> <span class=\"n\">m2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m1</span> <span class=\"bp\">≤</span> <span class=\"n\">m2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">Lp.ae_strongly_measurable</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mem_ℒp.to_Lp</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">hf.mono</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">snorm_trim_ae</span> <span class=\"n\">hm</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Lp.snorm_lt_top</span> <span class=\"n\">f</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Lp_trim_to_Lp.ae_eq</span> <span class=\"o\">{</span><span class=\"n\">m1</span> <span class=\"n\">m2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m1</span> <span class=\"bp\">≤</span> <span class=\"n\">m2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Lp_trim_to_Lp</span> <span class=\"n\">hm</span> <span class=\"n\">f</span> <span class=\"bp\">=ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Lp_trim_to_Lp</span><span class=\"o\">,</span> <span class=\"n\">mem_ℒp.coe_fn_to_Lp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mα'</span> <span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">mα'</span> <span class=\"bp\">≤</span> <span class=\"n\">mα</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">))),</span> <span class=\"n\">integral</span> <span class=\"n\">μ</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">)},</span> <span class=\"n\">integral</span> <span class=\"n\">μ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">integral</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">integral_trim_ae</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">Lp.ae_strongly_measurable</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_integral</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278142756,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649326846
    },
    {
        "content": "<p>your example does not use the two lemmas and the def, does it?</p>",
        "id": 278164530,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1649338585
    },
    {
        "content": "<p>Another way to define your <code>Lp_trim_to_Lp</code> would be to give it the value <code>λ f, Lp_trim_to_Lp_meas ℝ ℝ 1 μ hm f</code> (there is an implicit coercion to Lp in the end).</p>",
        "id": 278164962,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1649338785
    },
    {
        "content": "<p>No it doesn't use them in the end, but since the question of <code>Lp_trim_to_Lp</code> was raised above in the thread I kept it anyway for further reference.</p>",
        "id": 278171305,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649341431
    },
    {
        "content": "<p>Yet another version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Lp_trim_to_Lp'</span> <span class=\"o\">{</span><span class=\"n\">m1</span> <span class=\"n\">m2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m1</span> <span class=\"bp\">≤</span> <span class=\"n\">m2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_ℒp_of_mem_ℒp_trim</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">Lp.mem_ℒp</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_Lp</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>it's al the same under the hood anyway :-)</p>",
        "id": 278173343,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649342287
    }
]