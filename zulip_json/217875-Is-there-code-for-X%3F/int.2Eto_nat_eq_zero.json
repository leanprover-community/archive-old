[
    {
        "content": "<p>Dear All,</p>\n<p>are the two lemmas below already in mathlib?  If not, should they go in?  With the <code>simp</code> attribute?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">int.coe_nat_nonpos_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat.le_zero_iff</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">int.to_nat_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n.to_nat</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int.of_nat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">int.to_nat_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_nonpos_iff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int.neg_succ_of_nat_coe'</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273611991,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646127151
    },
    {
        "content": "<p>for the second one, maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.to_nat_eq_max\">docs#int.to_nat_eq_max</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.to_nat_of_nonpos\">docs#int.to_nat_of_nonpos</a> is sufficient? there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_num.int_to_nat_neg\">docs#norm_num.int_to_nat_neg</a> (+ a <code>pos</code> variant too), but I think we're encouraged to not use tactic lemmas</p>\n<p>the first one i'm 90% sure isn't anyhwere, I think it should be around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.coe_nat_pos\">docs#int.coe_nat_pos</a> but it doesn't seem like it is</p>",
        "id": 273618694,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646130511
    },
    {
        "content": "<p>Eric, thanks!  <code>int.to_nat_of_nonpos</code> is one of the implications (the <code>mpr</code> direction) of the second lemma.  I am trying to see if I can get a term-mode proof!</p>",
        "id": 273619438,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646130852
    },
    {
        "content": "<p>Have a look at <a href=\"https://tqft.net/mathlib/algebra/order/floor\">file#algebra/order/floor</a></p>",
        "id": 273619476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646130886
    },
    {
        "content": "<p>In particular, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/floor_ring.to_floor_semiring\">docs#floor_ring.to_floor_semiring</a></p>",
        "id": 273619512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646130909
    },
    {
        "content": "<p>Yaël, I have not been able to use your suggestion, but I also do not know my way around the <code>floor</code> library.</p>",
        "id": 273665706,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646151318
    },
    {
        "content": "<p>I found a term-mode proof, if it is preferable, though certainly there are multiple golfing possibilities!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_nat_nonpos_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_le.mp</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"n\">int.coe_nat_zero.le</span><span class=\"o\">))</span> <span class=\"n\">n.zero_le</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coe_nat_eq_zero.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_nat_neg_nat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span>  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_nat_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">},</span> <span class=\"n\">n.to_nat</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">⟨(</span><span class=\"n\">to_nat_coe_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">to_nat_coe_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">⟩</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span>       <span class=\"o\">:</span> <span class=\"n\">int.coe_nat_nonpos_iff.symm</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">to_nat_neg_nat</span><span class=\"o\">⟩</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span>    <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">int.neg_nonpos_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">int.coe_zero_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">int</span>\n</code></pre></div>\n<p>Also, CI is happy with the new lemmas being marked as <code>simp</code>, in case it matters!</p>",
        "id": 273665757,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646151338
    },
    {
        "content": "<p>I went ahead and made a PR : <a href=\"https://github.com/leanprover-community/mathlib/pull/12380\">#12380</a>.</p>",
        "id": 273703803,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646165821
    }
]