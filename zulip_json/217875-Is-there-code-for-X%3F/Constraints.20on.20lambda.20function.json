[
    {
        "content": "<p>Is there a way to constrain a variable in a lambda expression. For instance, if I am working with <code>λ x, 1/x</code> and the proof requires that <code>x≠ 0</code>, is there a way to constrain that variable inside the lambda expression, since x doesn't exist inside the local proof? The problem arises when applying a tactic and the expression changes to a form like: <code>(λ x, 1/x) y</code> where lean introduces a new variable, <code>y</code>,  but I have no way of also forcing <code>y≠ 0</code></p>",
        "id": 296443972,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1661977613
    },
    {
        "content": "<p>why do you need that assumption in the expression?</p>",
        "id": 296444077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661977652
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 296444116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661977671
    },
    {
        "content": "<p>there are a few possible techniques but the simplest is to not do that</p>",
        "id": 296444270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661977725
    },
    {
        "content": "<p>Because as I'm going in the proof, I end up with a goal <code>y≠ 0</code>, but I can't prove such a thing since that variable doesn't exist. An example would be showing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n\n<span class=\"o\">:</span><span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">:=</span>\n</code></pre></div>\n<p>Such a proof would require <code>x≠ 0</code><br>\nand I can't write it as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n<span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:</span><span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">=</span>  <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">:=</span>\n</code></pre></div>\n<p>because I also want to show</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n<span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">=</span>  <span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">:=</span>\n</code></pre></div>\n<p>which requires the first example when simplified</p>",
        "id": 296444601,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1661977873
    },
    {
        "content": "<p>Doesn't that just mean you forgot an assumption originally/your original goal is false?</p>",
        "id": 296444740,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661977924
    },
    {
        "content": "<p>I don't think so. take for instance showing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n<span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">=</span>  <span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">4</span><span class=\"o\">:=</span>\n</code></pre></div>\n<p>When simplified, the goal becomes <code>deriv (deriv (λ (x : ℝ), 2 / x ^ 2)) y = 12 / y ^ 4</code></p>\n<p>Yet to prove the inside derivative part, would require <code>x≠ 0</code> by using the deriv.div theorem. However, since <code>x</code> only exists in the lambda function, you can't write such a thing as a premise</p>",
        "id": 296445738,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1661978332
    },
    {
        "content": "<p>So when you try to prove that inside part,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n<span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">:=</span>\n</code></pre></div>\n<p>You can use <code>funext</code> to get a form of <code>deriv (λ (x : ℝ), 2 / x ^ 2) x = (-4) / x ^ 3</code> with a new variable x, but no way of also constraining <code>x≠ 0</code></p>",
        "id": 296446040,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1661978464
    },
    {
        "content": "<p>You might be looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_on\">docs#set.eq_on</a>, which is the relation that two functions are equal on a particular set</p>",
        "id": 296446109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661978495
    },
    {
        "content": "<p>That's because trying to prove that theorem by rewriting <code>deriv (λ (x : ℝ), 2 / x ^ 2)</code> to <code>λ x : ℝ, -4/x^3</code> is a wrong move, it's not true</p>",
        "id": 296446120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661978503
    },
    {
        "content": "<p>This is where your mistake lies. You cannot apply <code>funext</code> because both functions are only equal <strong>away from <code>0</code></strong>.</p>",
        "id": 296446123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661978505
    },
    {
        "content": "<p>(actually, it might be true because of fortuitous use of 1/0 = 0)</p>",
        "id": 296446281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661978562
    },
    {
        "content": "<p>Ah, I see, let me try that</p>",
        "id": 296446289,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1661978567
    },
    {
        "content": "<p>I think I see, since funext is for everywhere, but I need to only look at the set of all numbers exlcuding zero</p>",
        "id": 296446382,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1661978606
    },
    {
        "content": "<p>You might also be looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually_eq.deriv\">docs#filter.eventually_eq.deriv</a> or something similar, to work locally</p>",
        "id": 296448571,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1661979563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Constraints.20on.20lambda.20function/near/296446281\">said</a>:</p>\n<blockquote>\n<p>(actually, it might be true because of fortuitous use of 1/0 = 0)</p>\n</blockquote>\n<p>I was expecting <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_inv\">docs#deriv_inv</a> to be that unconditional result, but it's not...</p>",
        "id": 296449071,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661979745
    },
    {
        "content": "<p>Wait it is right ?</p>",
        "id": 296450089,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1661980168
    },
    {
        "content": "<p>I think so, yeah, because either <code>c x ≠ 0</code>  in which it holds just as in real maths, or <code>c x = 0</code> in which case <code>λ x, (c x)⁻¹</code> is not differentiable so <code>deriv (λ x, (c x)⁻¹) x = 0 = (c x)⁻¹</code>.</p>",
        "id": 296450750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661980413
    },
    {
        "content": "<p>Wait, if <code>c x</code> is <code>1 / x</code> (and hence <code>0</code> at <code>0</code>), then <code>λ x, (c x)⁻¹</code> is <code>id</code> and is differentiable at <code>0</code> IIUC?</p>",
        "id": 296453534,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1661981624
    },
    {
        "content": "<p>I don't think that function <code>c x</code> is differentiable at 0</p>",
        "id": 296454805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661982202
    },
    {
        "content": "<p>this being a precondition of the theorem</p>",
        "id": 296454827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661982213
    },
    {
        "content": "<p>Sure it does not <code>has_deriv_at</code> zero, but that means that <code>deriv c 0 = 0</code> as a garbage value and my remark was just about the equality <code>deriv (λ x, (c x)⁻¹) x = 0 = -(c x ^ 2)⁻¹ * deriv c x</code> being possibly true unconditionally, not about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_inv''\">docs#deriv_inv''</a> itself</p>",
        "id": 296455460,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1661982518
    }
]