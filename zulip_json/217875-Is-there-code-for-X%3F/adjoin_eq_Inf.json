[
    {
        "content": "<p>Do we have this somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjoin_eq_Inf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_Inf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">algebra.adjoin_le</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Inf_le</span> <span class=\"n\">algebra.subset_adjoin</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 264055654,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1638904083
    },
    {
        "content": "<p>Isn't this the definition of <code>adjoin</code>?</p>",
        "id": 264058531,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638905355
    },
    {
        "content": "<p>Its not. At least <code>rfl</code> does not work here. Its definition is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The minimal subalgebra that includes `s`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">adjoin</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">algebra_map_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">subsemiring.subset_closure</span> <span class=\"bp\">$</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subsemiring.closure</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264058809,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1638905484
    },
    {
        "content": "<p>I see... I guess we don't have that then. </p>\n<p>I was under the impression that there should be an <code>adjoin</code> whenever there is a Galois insertion to set, and that it should always be <em>defined</em> as such an Inf, but in this case someone decided the definition should be in terms of subsemirings instead of subalgebras for some reason.</p>",
        "id": 264059455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638905766
    },
    {
        "content": "<p><code>/-- The minimal subalgebra that includes </code>s<code>. -/</code> <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 264061420,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638906577
    },
    {
        "content": "<p>We could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.copy\">docs#subalgebra.copy</a> in the implementation to make the lemma above rfl</p>",
        "id": 264069874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638910377
    },
    {
        "content": "<p>Although I guess we could also just directly switch definition</p>",
        "id": 264069932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638910409
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator\">docs#closure_operator</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_adjoint\">docs#lower_adjoint</a> would help here.</p>",
        "id": 264134338,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638957999
    },
    {
        "content": "<p>That is, if we define <code>adjoin</code> to have type <code>lower_adjoint (coe : subalgebra R A → set A)</code>, then we can derive this lemma from the Galois connection, right?</p>",
        "id": 264134610,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638958197
    },
    {
        "content": "<p>Note that I'm not super happy with my current design of <code>lower_adjoint</code>, so feel free to suggest any change!</p>",
        "id": 264141286,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638962307
    },
    {
        "content": "<p>Do we have the associated galois_connection lemma already?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"c1\">-- do these exist somewhere with another name?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_least.Inf_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_least</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hal</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">Inf_le</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_Inf</span> <span class=\"n\">hal</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_greatest.Sup_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_greatest</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.dual.Inf_eq</span>\n\n<span class=\"c1\">-- do we need these if the above exists?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">galois_connection.Inf_le_u_eq_l</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">gc.is_least_l.Inf_eq</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">galois_connection.Sup_l_le_eq_u</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">gc.dual.Inf_le_u_eq_l</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- the lemma in this thread</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">adjoin_eq_Inf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">algebra.gc</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Inf_le_u_eq_l</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 264144497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638964483
    },
    {
        "content": "<p>Oh nice!</p>",
        "id": 264145477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638965170
    },
    {
        "content": "<p>Found a nicer proof using a missing <code>is_least.Inf_eq</code></p>",
        "id": 264146226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638965739
    },
    {
        "content": "<p>Ah, we have all the lemmas after all!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">adjoin_eq_Inf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.gc</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_glb_l.Inf_eq.symm</span>\n</code></pre></div>",
        "id": 264146666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638966028
    }
]