[
    {
        "content": "<p>Working in the concrete category of types, I find myself with two morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">Z\\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is an equalizer of this diagram. I have a term of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and a proof that the two corresponding terms of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> are equal. I want to make the corresponding term of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span>. Should I do this by creating a map <code>punit -&gt; X</code> and then applying category-theory mumbo-jumbo or is there a less \"primitive\" way to do this?</p>",
        "id": 215339112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604333291
    },
    {
        "content": "<p>Ha I was playing with this too today, it's more awkward than I'd like! I think it might be a good idea to have a lemma saying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">type_equalizer</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">fork.of_ι</span> <span class=\"n\">_</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>What do you and others think about this?</p>",
        "id": 215359126,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604341857
    },
    {
        "content": "<p>The proof of course goes via the map <code>punit -&gt; X</code> like you suggest but I think it's just a bit too painful needing to go through this messiness in the middle of a bigger proof, so I think something like this lemma would help</p>",
        "id": 215359266,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604341928
    },
    {
        "content": "<p>The reason I didn't suggest that is because today it's equalizers, and then tomorrow it's products, the day after it's something else. But I agree!</p>",
        "id": 215360028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604342345
    },
    {
        "content": "<p>I think it's worthwhile to have concrete representations for the (co)limits that can be easily represented with type theory (+ quotients). E.g.:</p>\n<ol>\n<li>Equalizers (as a subtype) / coequalizers (as quotient)</li>\n<li>Fibered (fibred?) products / pullbacks (as a subtype of the product)</li>\n<li>Binary coproducts (as a type-level sum)</li>\n<li>Products (as a Pi type)</li>\n</ol>\n<p>Are there any others that might be useful?</p>",
        "id": 215362999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604343787
    },
    {
        "content": "<p>They're already present for binary and arbitrary products and coproducts and terminal and initial objects</p>",
        "id": 215364004,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604344217
    },
    {
        "content": "<p>I think that combined with your list is everything I can think is helpful</p>",
        "id": 215364087,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604344258
    },
    {
        "content": "<p>we can make an API for equalizers in Type</p>",
        "id": 215365511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604344896
    },
    {
        "content": "<p>I am definitely coming round to this idea.</p>",
        "id": 215365716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604344967
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/4880\">https://github.com/leanprover-community/mathlib/pull/4880</a></p>",
        "id": 215365992,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604345080
    },
    {
        "content": "<p>Oh nice! Yeah this is perfect for my use case :D Thanks!</p>",
        "id": 215374213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604349028
    },
    {
        "content": "<p>I think that might be because my use case is very similar to yours :)</p>",
        "id": 215375085,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604349425
    }
]