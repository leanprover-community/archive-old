[
    {
        "content": "<p>Here is a mwe of my current situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Parameterized</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Parameterized</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>My goal is for the <code>F</code> function within <code>S</code> to take any <code>Parameterized</code> and create a <code>set</code> using the same type <code>X </code> as the <code>Parameterized</code> uses for its type argument <code>X</code>. I've tried defining <code>X</code> and <code>Y</code> as example variables. I tried defining them as <code>Sort</code> (as is done in various mathlib files), but I could not construct a <code>set</code> with them. I've tried permuting between curly braces and normal parenthesis in the <code>Parameterized</code> definition. The answer has eluded me due to the type classes. How can I achieve my goal?</p>",
        "id": 222204604,
        "sender_full_name": "Chase Norman",
        "timestamp": 1610251641
    },
    {
        "content": "<p>I would think you'd need to have <code>(X Y : Type)</code>, otherwise it's not possible to infer what types <code>Parameterized</code> is over.</p>",
        "id": 222205735,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610253800
    },
    {
        "content": "<p>This works for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Parameterized</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Parameterized</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is that the kind of thing you want?</p>",
        "id": 222393564,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610429723
    },
    {
        "content": "<p>This also works (and is not really any different from what I posted previously)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Parameterized</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Parameterized</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 222393850,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610430071
    },
    {
        "content": "<p>It may be easy to get confused when looking at mathlib for guidance as many files in mathlib have some line like <code>variables (X Y : Type) [fintype X] [fintype Y]</code> somewhere high up in the file: this line means that essentially every lemma/def/whatever later in the file also has the arguments <code>(X Y : Type) [fintype X] [fintype Y]</code> without having to write them explicitly. But this means that if you just look at one def or lemma statement later in the file you might be effectively missing part of the statement because you haven't looked at the line(s) in the file where various variables are declared</p>",
        "id": 222393970,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610430242
    }
]