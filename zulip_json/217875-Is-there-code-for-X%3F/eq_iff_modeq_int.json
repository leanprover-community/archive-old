[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eq_iff_modeq_int</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>I'm fixing up some old codewars kata and I find that this has disappeared from the library, in <a href=\"https://github.com/leanprover-community/mathlib/issues/2511\">#2511</a>. I need (a : zmod n) = b -&gt; a % n = b % n`. How am I supposed to get that now?</p>",
        "id": 197804176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589647728
    },
    {
        "content": "<p>It's about characteristic n now</p>",
        "id": 197805051,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589648904
    },
    {
        "content": "<p>I need to learn about <code>char_p</code>?</p>",
        "id": 197805292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589649268
    },
    {
        "content": "<p>No you don't, because you already learned it for the perfectoid project.</p>",
        "id": 197805302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649293
    },
    {
        "content": "<p>But n isn't prime!</p>",
        "id": 197805625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589649724
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eq_iff_modeq_int</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_sub</span><span class=\"o\">,</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">int_cast_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 197809876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589656068
    },
    {
        "content": "<p>But this doesn't use <code>zmod n</code> in an essential way, right?</p>",
        "id": 197809927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589656120
    },
    {
        "content": "<p>So it should be a lemma about arbitrary <code>R</code> with <code>char_p R n</code></p>",
        "id": 197809981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589656140
    },
    {
        "content": "<p>All I care about is that my kata is compiling again right now</p>",
        "id": 197810164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589656192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you deleted a lemma? shame on you</p>",
        "id": 197812203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659228
    },
    {
        "content": "<p>Did I? Where? When?</p>",
        "id": 197812215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589659247
    },
    {
        "content": "<p>This was a lemma before the refactor, I can't find it now</p>",
        "id": 197812228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659269
    },
    {
        "content": "<p>Oops</p>",
        "id": 197812234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589659282
    },
    {
        "content": "<p><code>eq_zero_iff_dvd_int</code> got renamed to <code>char_p.int_cast_eq_zero_iff</code> and a similar story for <code>nat</code>, but the lemma in question just seemed to vanish completely.</p>",
        "id": 197812305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659350
    },
    {
        "content": "<p>I see... I guess I messed up with porting some of the <code>zmodp</code> stuff to <code>zmod p</code>.</p>",
        "id": 197812306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589659351
    },
    {
        "content": "<p>My apologies</p>",
        "id": 197812314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589659370
    },
    {
        "content": "<p>Johan is saying that we have a better lemma somewhere now</p>",
        "id": 197812329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659419
    },
    {
        "content": "<p>Hmm... except that maybe we don't have it...</p>",
        "id": 197812339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589659434
    },
    {
        "content": "<p>I think I messed up</p>",
        "id": 197812343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589659439
    },
    {
        "content": "<p>I will try to restore stuff next week... now I first need to rest.</p>",
        "id": 197812479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589659593
    },
    {
        "content": "<p>This is what you get for not PRing your katas to mathlib</p>",
        "id": 197812527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589659667
    },
    {
        "content": "<p>exactly</p>",
        "id": 197812538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659682
    },
    {
        "content": "<p>/me deletes all of his Lean repos other than mathlib</p>",
        "id": 197812593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589659738
    },
    {
        "content": "<p>Noooo!</p>",
        "id": 197812605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589659757
    },
    {
        "content": "<p>Fortunately git is decentralized</p>",
        "id": 197812610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589659765
    },
    {
        "content": "<p>The perfectoid repo is on the community account</p>",
        "id": 197812616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589659775
    },
    {
        "content": "<p>Whilst proving <code>example  : (R : Type*) [ring R] (p : ℕ) [char_p R p] (a b : ℤ) : (a : R) = b ↔ a ≡ b [ZMOD p]</code> I noticed the following thing: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">sub_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">modeq_iff_dvd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>One a-b, one b-a. This meant that I had to add an <code>eq_comm</code> in the following proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory</span><span class=\"bp\">.</span><span class=\"n\">quadratic_reciprocity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">int_cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I think the above lemma is the correct thing to PR to mathlib (with perhaps a better proof) but this experience did make me wonder whether there should be a \"convention\" for the order of the subtractands when proving lemmas of this form.</p>",
        "id": 197842945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589712806
    },
    {
        "content": "<p>I think the trouble with my refactor PR was that I completely rewrote the API for <code>zmod</code>. Hence a lot of auxilliary lemmas no longer made sense, or weren't needed. I guess this lemma was collateral damage. My apologies.<br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Do you want to PR it, or shall I do it?</p>",
        "id": 197923899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589803743
    },
    {
        "content": "<p>I don't want to PR it, my PR's usually have to go through a few iterations and I am not looking at the mathlib github site at all at the minute</p>",
        "id": 197927861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589805471
    },
    {
        "content": "<p>Ok, I'll do it.</p>",
        "id": 197928998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589806140
    },
    {
        "content": "<p>Thanks. I'm trying to get another Lean post-doc and time is tight :-)</p>",
        "id": 197929023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589806164
    },
    {
        "content": "<p>Is there a slick way of proving</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_iff_modeq</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">exists_eq_add_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Currently I can only think of going through <code>zmod p</code>...</p>",
        "id": 197934816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589808795
    },
    {
        "content": "<p>have we <a href=\"#narrow/stream/113488-general/topic/wlog.20is.20slow\">fixed wlog</a>?</p>",
        "id": 197935060,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589808911
    },
    {
        "content": "<p>No, I don't think so.</p>",
        "id": 197935297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589809023
    },
    {
        "content": "<p>But that's not the hard part (-;</p>",
        "id": 197935315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589809032
    },
    {
        "content": "<p>I can easily work aroun <code>wlog</code>, of course</p>",
        "id": 197935337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589809047
    },
    {
        "content": "<p>Note that in this particular case it isn't slow (for a human)</p>",
        "id": 197935364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589809061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- elaboration of eq_iff_modeq took 1.41s</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_iff_modeq</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">exists_eq_add_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- elaboration of eq_iff_modeq&#39; took 222ms</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_iff_modeq&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">skip</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">eq_comm</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">exists_eq_add_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197936364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589809495
    },
    {
        "content": "<p>Hmm... thanks for keeping me honest.</p>",
        "id": 197938742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589810608
    },
    {
        "content": "<p>It seems that my hardware is 3 times as fast... so I didn't really notice</p>",
        "id": 197938915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589810679
    }
]