[
    {
        "content": "<p>Do we have the tools to prove a fact like this?  On paper I would say \"split all the polynomials as products of linear factors; apply unique factorization; match up and play pigeonhole\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.homogeneous</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">q</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.is_homogeneous</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B.is_homogeneous</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q.is_homogeneous</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c.is_homogeneous</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">x.is_homogeneous</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(I was trying an exercise about the resultant (page 33 <a href=\"https://homepages.warwick.ac.uk/staff/Miles.Reid/MA4A5/UAG.pdf\">here</a>) and this was the part that was hardest to Lean.)</p>",
        "id": 275430535,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647375925
    },
    {
        "content": "<p>Assume any appropriate nondegeneracy hypotheses.</p>",
        "id": 275430570,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647375956
    },
    {
        "content": "<p>We do not yet know that <code>mv_polynomial</code> is a UFD, right?</p>",
        "id": 275430889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647376127
    },
    {
        "content": "<p>I think we do for finitely many unknowns</p>",
        "id": 275431194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647376297
    },
    {
        "content": "<p>Independent of that, do we have the factorization into linear factors of (1) a 1-variable polynomial; (2) a 2-variable homogeneous polynomial ?  (Assuming an algebraically closed field in each case.)</p>",
        "id": 275431717,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647376542
    },
    {
        "content": "<p>Or, say, do we know that a linear polynomial is irreducible?</p>",
        "id": 275431896,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647376614
    },
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.irreducible_of_degree_eq_one\">docs#polynomial.irreducible_of_degree_eq_one</a>; not sure about <code>mv_polynomial</code></p>",
        "id": 275432264,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647376806
    },
    {
        "content": "<p>Separately, why is <code>ring_theory.polynomial.homogeneous</code> not in the subfolder <code>ring_theory.mv_polynomial</code>?</p>",
        "id": 275432617,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647377008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275431194\">said</a>:</p>\n<blockquote>\n<p>I think we do for finitely many unknowns</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I didn't see even this, where is it?</p>",
        "id": 275433834,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647377659
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/polynomial/basic.html#polynomial.unique_factorization_monoid\">https://leanprover-community.github.io/mathlib_docs/ring_theory/polynomial/basic.html#polynomial.unique_factorization_monoid</a></p>",
        "id": 275434484,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647378011
    },
    {
        "content": "<p>(I am with my phone)</p>",
        "id": 275434517,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647378024
    },
    {
        "content": "<p>This does not literally say that, but I am pretty sure we have all the isos needed to prove the theorem by induction</p>",
        "id": 275434614,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647378065
    },
    {
        "content": "<p>In one variable everything is in <a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/splitting_field.html\">https://leanprover-community.github.io/mathlib_docs/field_theory/splitting_field.html</a></p>",
        "id": 275434816,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647378129
    },
    {
        "content": "<p>I also wondered if this lemma existed?  If not, where should it live?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.mv_polynomial.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275439269,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647380341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275433834\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275431194\">said</a>:</p>\n<blockquote>\n<p>I think we do for finitely many unknowns</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> I didn't see even this, where is it?</p>\n</blockquote>\n<p>Yeah I can't find it: I think I was conflating it with polynomials in finitely many variables over a Noetherian ring being Noetherian. Note that a crucial part of this argument is the fact that if you're isomorphic to a Noetherian ring then you are a Noetherian ring, something which we can't prove automatically but which follows easily from the fact that a homomorphic image of a Noetherian ring is Noetherian. However the same trick does not work with UFDs! If R is a UFD then there can be injections R-&gt;S and surjections R-&gt;S to non-UFDs S (even if S is an integral domain) so we need a transfer lemma. Here's everything apart from that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.unique_factorization_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">polynomial.unique_factorization_monoid</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">transfer_fact</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- aargh</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">transfer_fact</span> <span class=\"o\">((</span><span class=\"n\">mv_polynomial.is_empty_alg_equiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_ring_equiv.symm</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">transfer_fact</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.fin_succ_equiv</span> <span class=\"n\">R</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_ring_equiv.symm</span> <span class=\"o\">},</span>\n    <span class=\"n\">resetI</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">polynomial.unique_factorization_monoid</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275439821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647380636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> here's a good example (after many years of waiting for one!):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.unique_factorization_domain</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ring_equiv.unique_factorization_monoid</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">well_founded_dvd_not_unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- well_founded dvd_not_unit</span>\n  <span class=\"n\">irreducible_iff_prime</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- irreducible iff prime</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>One of the goals is transferring well-foundedness over an isomorphism of partial orders, the other is transferring irreducibility and primality over rings.</p>",
        "id": 275442193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647381871
    },
    {
        "content": "<p>The hard-mode challenge here is to arrange so that the proof is <code>by transport along e</code>.</p>",
        "id": 275442292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647381958
    },
    {
        "content": "<p>Mario -- <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msqrt><mrow><mo>−</mo><mn>5</mn></mrow></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}\\to\\mathbb{Z}[\\sqrt{-5}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1156em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8656em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.8256em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1744em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is an injection from a UFD to an integral domain non-UFD, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msqrt><mrow><mo>−</mo><mn>5</mn></mrow></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[X]\\to\\mathbb{Z}[\\sqrt{-5}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1156em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8656em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.8256em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1744em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> (send <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mo>−</mo><mn>5</mn></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{-5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1744em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8656em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.8256em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1744em;\"><span></span></span></span></span></span></span></span></span> ) is a surjection from a UFD to an integral domain non-UFD, so your trick doesn't get us out of trouble.</p>",
        "id": 275442471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647382069
    },
    {
        "content": "<p>Noting that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">transport</span> <span class=\"n\">using</span> <span class=\"n\">e.</span>\n</code></pre></div>\n<p>is already real Lean code. The challenge is to \"upgrade\" <code>transport</code> so that it can take advantage of <code>e : R ≃+* S</code>.</p>",
        "id": 275442521,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647382112
    },
    {
        "content": "<p>The game is to try and get from \"R a UFD implies R[X] a UFD\" (which we have) to \"R a UFD implies mv_polynomial (some fintype) R is a UFD\"</p>",
        "id": 275442624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647382189
    },
    {
        "content": "<p>My trick factors down to the subterms though. Do we know that \"irreducible\", \"prime\", \"dvd_not_unit\" and \"well_founded\" are preserved under relevant morphisms? I would imagine that at least some of those aren't just invariant under ring equivs, but we should have the theorem in any case</p>",
        "id": 275443364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647382818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275430535\">said</a>:</p>\n<blockquote>\n<p>(I was trying an exercise about the resultant (page 33 <a href=\"https://homepages.warwick.ac.uk/staff/Miles.Reid/MA4A5/UAG.pdf\">here</a>) and this was the part that was hardest to Lean.)</p>\n</blockquote>\n<p>Anyway, that was an instructive exercise but I think I've done all I care to ... here's the branch if anyone else is inspired to take over :-) <a href=\"https://github.com/leanprover-community/mathlib/tree/resultant-quadratic-cubic\">branch#resultant-quadratic-cubic</a></p>",
        "id": 275444271,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647383407
    },
    {
        "content": "<p>Here's <code>unit</code> and <code>irreducible</code>: are the names correct?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.unique_factorization_domain</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.is_unit</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_unit.map</span> <span class=\"n\">e</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.is_unit_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">is_unit.map</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">is_unit.map</span> <span class=\"n\">e.symm</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.irreducible</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">not_unit'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">irreducible.not_unit</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"n\">e.is_unit_iff</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n  <span class=\"n\">is_unit_or_is_unit'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">e.symm</span> <span class=\"n\">at</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_equiv.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">irreducible.is_unit_or_is_unit'</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">e.symm.is_unit_iff</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">e.symm.is_unit_iff</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.irreducible_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">e.irreducible</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">e.symm.irreducible</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">e.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>for <code>prime</code> I'm not sure if we have isomorphisms of monoids with 0. For <code>well_founded</code> we need isomorphisms of partial orders -- do we have those?</p>",
        "id": 275444966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647383857
    },
    {
        "content": "<p>I don't think we need <code>mul_equiv.is_unit</code>, I guess this is just for dot-notation?</p>",
        "id": 275445147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647383945
    },
    {
        "content": "<p>oh yeah I was just getting the hang of it at that point :-)</p>",
        "id": 275445197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647383974
    },
    {
        "content": "<p>Is <code>irreducible</code> normally used as an instance argument? I would expect it to be a regular hypothesis here</p>",
        "id": 275445221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647383994
    },
    {
        "content": "<p>It should be stated using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv_class\">docs#mul_equiv_class</a></p>",
        "id": 275445222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647383995
    },
    {
        "content": "<p>You're talking about isomorphisms of monoids with zero or the transfer lemmas? Presumably the former?</p>",
        "id": 275445347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384056
    },
    {
        "content": "<p>It would be nice if <code>mul_equiv.irreducible</code> was true in greater generality, but I guess someone can tell me that it's false (in either direction) for ring homs</p>",
        "id": 275445373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647384073
    },
    {
        "content": "<p>For <code>well_founded</code> I believe we already have the theorem</p>",
        "id": 275445489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647384129
    },
    {
        "content": "<p>yeah, Z -&gt; Q and Z -&gt; Z/3Z both send the irreducible 2 to the unit 2 and irreducibles can't be units</p>",
        "id": 275445490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384129
    },
    {
        "content": "<p>what about the other direction? A non-irreducible being sent to an irreducible</p>",
        "id": 275445526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647384157
    },
    {
        "content": "<p>ooh that might be OK</p>",
        "id": 275445570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384190
    },
    {
        "content": "<p>oh curses, 6 is not irreducible in Z but it's irreducible in Z[1/2]</p>",
        "id": 275446134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384578
    },
    {
        "content": "<p>What about if the ring hom is a surjection?</p>",
        "id": 275446239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384634
    },
    {
        "content": "<p>How is 6 irreducible in Z[1/2]? Isn't it still 2*3?</p>",
        "id": 275446331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647384707
    },
    {
        "content": "<p>nope, XY is not irreducible in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[X,Y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">C</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span> but you can map that onto <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[Y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">C</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span> by sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to 1.</p>",
        "id": 275446337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275446331\">said</a>:</p>\n<blockquote>\n<p>How is 6 irreducible in Z[1/2]? Isn't it still 2*3?</p>\n</blockquote>\n<p>2 is a unit</p>",
        "id": 275446351,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647384719
    },
    {
        "content": "<p>3 = -1 * -3 but 3 is still irreducible in the integers</p>",
        "id": 275446414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384736
    },
    {
        "content": "<p>Oh I thought you meant half-integers</p>",
        "id": 275446521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647384833
    },
    {
        "content": "<p>oh that's not a ring</p>",
        "id": 275446578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384846
    },
    {
        "content": "<p>I'm doing fancy localisation</p>",
        "id": 275446589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384855
    },
    {
        "content": "<p>Strictly speaking we're talking about monoids here, although I don't know that this makes a difference</p>",
        "id": 275446636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647384885
    },
    {
        "content": "<p>Right, but all my rings are monoids</p>",
        "id": 275446657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384901
    },
    {
        "content": "<p>I'm just better at thinking about rings because I'd never heard of monoids 5 years ago ;-)</p>",
        "id": 275446687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647384922
    },
    {
        "content": "<p>Something can probably be said for local ring morphisms in the sense of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_local_ring_hom\">docs#is_local_ring_hom</a></p>",
        "id": 275446688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647384922
    },
    {
        "content": "<p>That excludes the localization counterexamples mentioned above.</p>",
        "id": 275446892,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647385057
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_irreducible_map\">docs#of_irreducible_map</a></p>",
        "id": 275446931,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647385076
    },
    {
        "content": "<p>Nice! I suppose we also have that ring equivs are local?</p>",
        "id": 275447014,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647385118
    },
    {
        "content": "<p>Until today that was my favourite transfer example.</p>",
        "id": 275447042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647385142
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_local_ring_hom_equiv\">docs#is_local_ring_hom_equiv</a></p>",
        "id": 275447148,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647385203
    },
    {
        "content": "<p>this stuff should get some fun_like love I think :b</p>",
        "id": 275447215,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647385214
    },
    {
        "content": "<p>So the Mario excuse to avoid having to write a proper <code>transport</code> tactic is either to say \"you haven't specified the problem well enough\" or to say \"there's no point having a tactic which proves that if X and Y are homeo and X is compact then Y is compact, because a continuous image of compact is compact and that's in your API so just use that\". </p>\n<p>My one desperate retort to this over the years has been \"aah well what about local rings -- if R is local and isomorphic to S then S is local, and being local doesn't transfer along injections or surjections (because the zero ring!) so now please write me a transport tactic\". However the modified workaround is this: like preprime (1 or prime) you define a pre-local ring to be either a local ring or the zero ring! Now prelocality does transfer along surjections, and nonzeroness transports along injections, and put the two together and you can deduce that localness transfers along bijections! This was a really annoying observation. But with Heather's brilliant UFD move the ball is firmly back in Mario's court ;-)</p>",
        "id": 275447592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647385412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275447148\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_local_ring_hom_equiv\">docs#is_local_ring_hom_equiv</a></p>\n</blockquote>\n<p>That's not it. We're looking for \"R equiv S and R local implies S local\" and I've just sketched a cool way to do it :-)</p>",
        "id": 275447744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647385511
    },
    {
        "content": "<p>I can't find morphisms of monoids with zero and I'm assuming that that a monoid morphism (<code>mul_hom</code>) of monoids with 0 doesn't automatically send 0 to 0, so perhaps this is a good time to go to bed.</p>",
        "id": 275447968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647385670
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  added <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero_hom\">docs#monoid_with_zero_hom</a> recently</p>",
        "id": 275448063,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647385737
    },
    {
        "content": "<p>To clarify, it's the right object, but no it's not mine.</p>",
        "id": 275448200,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647385842
    },
    {
        "content": "<p>oopsies, sorry!</p>",
        "id": 275448220,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647385861
    },
    {
        "content": "<p>What I added was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_monoid_with_zero_hom\">docs#order_monoid_with_zero_hom</a></p>",
        "id": 275448227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647385865
    },
    {
        "content": "<p>The goal being <a href=\"https://github.com/leanprover-community/mathlib/pull/3292\">#3292</a></p>",
        "id": 275448240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647385881
    },
    {
        "content": "<p>You can't be blamed because after having defined dozens of homs I myself had to check <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275448396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647385974
    },
    {
        "content": "<p>it's very annoying <code>f 0 = f(0 * a) = f 0 * f a</code>doesn't imply that <code>f 0 = 0</code> :/</p>",
        "id": 275448425,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647386003
    },
    {
        "content": "<p>I guess you need cancellation, but anyways that's a tangent</p>",
        "id": 275448495,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647386044
    },
    {
        "content": "<p>Oh OK great! But we don't have <code>monoid_with_zero_equiv</code>?</p>",
        "id": 275448894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647386352
    },
    {
        "content": "<p>It's <code>mul_equiv</code> again</p>",
        "id": 275448905,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647386371
    },
    {
        "content": "<p>The pattern is that an isomorphism respects many more properties than originally requested</p>",
        "id": 275448995,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647386408
    },
    {
        "content": "<p>Yes I got it. Thanks.</p>",
        "id": 275449002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647386418
    },
    {
        "content": "<p>There must be something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_hom.monoid_with_zero_hom\">docs#mul_hom.monoid_with_zero_hom</a> or something on one of my branches which does exactly this strengthening, Eric.</p>",
        "id": 275449011,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647386425
    },
    {
        "content": "<p>The proof is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mn>0</mn><mn>1</mn></msub><mo>=</mo><msub><mn>0</mn><mn>1</mn></msub><mo>×</mo><msub><mn>0</mn><mn>2</mn></msub><mo>=</mo><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">0_1=0_1\\times 0_2=0_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> so the zero is unique</p>",
        "id": 275449031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647386444
    },
    {
        "content": "<p>but for that you need some t such that <code>f t = 0</code>, right?</p>",
        "id": 275449093,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647386507
    },
    {
        "content": "<p>yeah I mean for the equivs. I'm showing that a monoid-isomorphism of monoids with 0 is a monoid-with-zero isomorphism.</p>",
        "id": 275449153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647386536
    },
    {
        "content": "<p>Nope, just a <code>0</code> in the domain.</p>",
        "id": 275449157,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647386538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275447592\">said</a>:</p>\n<blockquote>\n<p>So the Mario excuse to avoid having to write a proper <code>transport</code> tactic is either to say \"you haven't specified the problem well enough\" or to say \"there's no point having a tactic which proves that if X and Y are homeo and X is compact then Y is compact, because a continuous image of compact is compact and that's in your API so just use that\". </p>\n<p>My one desperate retort to this over the years has been \"aah well what about local rings -- if R is local and isomorphic to S then S is local, and being local doesn't transfer along injections or surjections (because the zero ring!) so now please write me a transport tactic\". However the modified workaround is this: like preprime (1 or prime) you define a pre-local ring to be either a local ring or the zero ring! Now prelocality does transfer along surjections, and nonzeroness transports along injections, and put the two together and you can deduce that localness transfers along bijections! This was a really annoying observation. But with Heather's brilliant UFD move the ball is firmly back in Mario's court ;-)</p>\n</blockquote>\n<p>I wouldn't call it an \"excuse\" so much as a framework for proving equiv lemmas. The fact that often you can make use of something weaker than an equiv is a side benefit but even without that the main point is that every notion in the library should have a theorem proving it is invariant under (suitable kinds of) equivs (or something weaker),  and so every transport lemma is only applying these lemmas to each immediate subterm, so they are generally quite short proofs.</p>",
        "id": 275449191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647386569
    },
    {
        "content": "<p>Was <code>mul_equiv.irreducible</code> above a short proof? It was mildly annoying. And the <code>well_founded</code> one scares me a bit.</p>",
        "id": 275449242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647386629
    },
    {
        "content": "<p>The issue is that these proofs do tend to vary in structure a bit depending on what the suitable kind of equiv is or how high-order they are, which makes writing a general tactic difficult</p>",
        "id": 275449322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647386677
    },
    {
        "content": "<p>of course I don't mean excuse in a serious way, I'm just giving an irreverent summary of the situation. I do find it fascinating that it's taken years to find this good example.</p>",
        "id": 275449340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647386695
    },
    {
        "content": "<p>The proof of <code>mul_equiv.irreducible</code> does look worse than it should be</p>",
        "id": 275449368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647386729
    },
    {
        "content": "<p>It's an annoying condition!</p>",
        "id": 275449389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647386747
    },
    {
        "content": "<p>most likely you need to be using more theorems like <code>or.map</code> or something</p>",
        "id": 275449396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647386750
    },
    {
        "content": "<p>I'm doing <code>mul_equiv.prime</code> now I've realised mul_equivs send 0 to 0</p>",
        "id": 275449499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647386806
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/or.map\">docs#or.map</a></p>",
        "id": 275450625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647387357
    },
    {
        "content": "<p>hey! I've been duped!</p>",
        "id": 275450674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647387368
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/or.imp\">docs#or.imp</a></p>",
        "id": 275450706,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1647387415
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.unique_factorization_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n\n<span class=\"cm\">irred iff prime stuff</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.is_unit_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">is_unit.map</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">is_unit.map</span> <span class=\"n\">e.symm</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.irreducible</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">not_unit'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">irreducible.not_unit</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"n\">e.is_unit_iff</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n  <span class=\"n\">is_unit_or_is_unit'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">e.symm</span> <span class=\"n\">at</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_equiv.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">irreducible.is_unit_or_is_unit'</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">e.symm.is_unit_iff</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">e.symm.is_unit_iff</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.irreducible_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">e.irreducible</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">e.symm.irreducible</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">e.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.prime</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hr.1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">map_zero</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_equiv.symm_apply_apply</span><span class=\"o\">],</span> <span class=\"o\">}),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hr.2.1</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">e.is_unit_iff</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm.to_monoid_hom.map_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_equiv.coe_to_monoid_hom</span><span class=\"o\">,</span> <span class=\"n\">mul_equiv.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">hr.2.2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">e.to_monoid_hom.map_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">e.to_monoid_hom.map_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.prime_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">e.prime</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">convert</span> <span class=\"n\">e.symm.prime</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">well-founded dvd not unit stuff</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.dvd_not_unit</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">dvd_not_unit</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dvd_not_unit</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hd.1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">map_zero</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_equiv.symm_apply_apply</span><span class=\"o\">],</span> <span class=\"o\">}),</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hd.2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hc</span> <span class=\"o\">((</span><span class=\"n\">e.is_unit_iff</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">e.map_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.dvd_not_unit_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">dvd_not_unit</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">dvd_not_unit</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">e.dvd_not_unit</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">convert</span> <span class=\"n\">e.symm.dvd_not_unit</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">where is my tactic which does this?</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ring_equiv.unique_factorization_monoid</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">well_founded_dvd_not_unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">dvd_not_unit</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">dvd_not_unit</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"n\">equiv_like.injective</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e.symm.to_mul_equiv.dvd_not_unit_iff.symm</span> <span class=\"o\">}</span>\n  <span class=\"k\">in</span> <span class=\"n\">rel_embedding.well_founded</span> <span class=\"n\">i</span> <span class=\"n\">hR.well_founded_dvd_not_unit</span><span class=\"o\">,</span>\n  <span class=\"n\">irreducible_iff_prime</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.symm.to_mul_equiv.irreducible_iff</span><span class=\"o\">,</span><span class=\"n\">e.symm.to_mul_equiv.prime_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">unique_factorization_monoid.irreducible_iff_prime</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n<span class=\"n\">unique_factorization_monoid</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.is_empty_alg_equiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_ring_equiv.symm.unique_factorization_monoid</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.fin_succ_equiv</span> <span class=\"n\">R</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_ring_equiv.symm.unique_factorization_monoid</span> <span class=\"o\">},</span>\n    <span class=\"n\">resetI</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">polynomial.unique_factorization_monoid</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> we've got it now :-)</p>",
        "id": 275454044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647390324
    },
    {
        "content": "<p>(I have no idea why I had to increase my deterministic timeout to 10^6 but it compiles for me)</p>",
        "id": 275454115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647390382
    },
    {
        "content": "<p>Excellent!  Remember I have a long list of demands, I also want to split a homogeneous polynomial in 2 variables over an algebraically closed field as a product of linear factors.</p>",
        "id": 275454426,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647390725
    },
    {
        "content": "<p>(Maybe <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> is on the way to this?)</p>",
        "id": 275454558,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647390883
    },
    {
        "content": "<p>My instinct is to dehomogenise, factor and rehomogenise but that doesn't sound at all nice...</p>",
        "id": 275454667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647390980
    },
    {
        "content": "<p>I'm a bit rusty here, can a homogeneous polynomial have a non-homogeneous factor?</p>",
        "id": 275454715,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647391053
    },
    {
        "content": "<p>We have a bunch of homogenization stuff in flt-regular for doing precisely this sort of thing, explicitly factoring <code>x^n - y^n</code> using the dehomogonized version. So most of the lemmata for that strategy should be already there. Maybe the only thing we don’t have is that dehomogenization (e.g. evaluate some variable at 1) is inverse to homogenization</p>",
        "id": 275457121,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647393426
    },
    {
        "content": "<p>I tried to set it up in a way where that would be nice though, in that homogenization doesn’t change the set of variables, so statements like dehomogenize and then rehomogenize is the identity should be literal equalities without changing rings, but we just never needed dehomogenizing yet I think</p>",
        "id": 275457212,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647393542
    },
    {
        "content": "<p>That does look nice!  I'll look forward to it being in mathlib!</p>\n<p><a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/ring_theory/polynomial/homogenization.lean\">https://github.com/leanprover-community/flt-regular/blob/master/src/ring_theory/polynomial/homogenization.lean</a><br>\nfor anyone else wanting to find it.</p>",
        "id": 275459606,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647396184
    },
    {
        "content": "<p>Full generality, using two lemmas above  :)<br>\nUsing this equivalent definition makes it unnecessary to deal with <code>irreducible</code> and well-foundedness.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.unique_factorization_domain</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.is_unit_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">is_unit.map</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">is_unit.map</span> <span class=\"n\">e.symm</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.prime</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid_with_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hr.1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">map_zero</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_equiv.symm_apply_apply</span><span class=\"o\">],</span> <span class=\"o\">}),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hr.2.1</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">e.is_unit_iff</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm.to_monoid_hom.map_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_equiv.coe_to_monoid_hom</span><span class=\"o\">,</span> <span class=\"n\">mul_equiv.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">hr.2.2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">e.to_monoid_hom.map_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">e.to_monoid_hom.map_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_equiv.unique_factorization_monoid</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">cancel_comm_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cancel_comm_monoid_with_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">unique_factorization_monoid.iff_exists_prime_factors</span> <span class=\"n\">at</span> <span class=\"n\">hR</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hR</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">map_zero</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]}))</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">hp</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">w.map</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">multiset.mem_map</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"o\">,</span><span class=\"n\">he</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e.prime</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">units.map</span> <span class=\"n\">e.to_monoid_hom</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">multiset.prod_hom</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">e.map_mul</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275463150,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647400798
    },
    {
        "content": "<p>Heather, regarding homogeneity of factors, factors of a homogeneous polynomial must be homogeneous, if the coefficients lie in an integral domain.</p>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> are polynomials with coefficients in an integral domain whose product is homogeneous, they they are homogeneous.  Indeed, write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><msub><mi>f</mi><mn>0</mn></msub><mo>+</mo><msub><mi>f</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">f=f_0+f_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> containing the sum of all the terms of minimum degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and similarly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>=</mo><msub><mi>g</mi><mn>0</mn></msub><mo>+</mo><msub><mi>g</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">g=g_0+g_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.  The product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">fg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> contains the homogeneous part <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><msub><mi>g</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_0g_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, having degree less than or equal to the degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">fg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>.  The degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><msub><mi>g</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_0g_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is strictly smaller than the degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">fg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> if at least one of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>g</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">g_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has degree strictly smaller than their corresponding polynomials.  Thus, if the product is homogeneous, both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> must be homogeneous.</p>\n<p>The integral domain assumption is used to see that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><msub><mi>g</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_0g_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is non-zero.</p>",
        "id": 275471619,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647412060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Nice, thanks!  That would simplify the argument a lot.</p>",
        "id": 275538144,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647448135
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> are you going to PR the UFD instance? :)</p>",
        "id": 275586929,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647470844
    },
    {
        "content": "<p>I have limited time to address PR reviews, so it would be ideal if someone else (maybe you) PR it :)</p>\n<p>I'm trying to deduce the infinite(ly many variable) case from the finite case, and it seems we don't have this <code>map_var</code> in mathlib right? If so then many lemmas I need (composition, injectivity, joint surjectivity from finsets) are probably also not there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map_var</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">τ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">eval₂_hom</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275590938,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647473852
    },
    {
        "content": "<p>Hmm, I read every file under <code>data.mv_polynomial</code> and in the third-to-last file I discovered that it's called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.rename\">docs#mv_polynomial.rename</a> (and the desired lemmas are there!)<br>\nDidn't expect even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.exists_finset_rename\">docs#mv_polynomial.exists_finset_rename</a>  is there (seems it's only applied to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.eq_zero_or_eq_zero_of_mul_eq_zero\">docs#mv_polynomial.eq_zero_or_eq_zero_of_mul_eq_zero</a>)</p>",
        "id": 275600724,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647483748
    },
    {
        "content": "<p>We even know it's monadic in <code>σ</code> (-;</p>",
        "id": 275611689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647498277
    },
    {
        "content": "<p>It has now been established that a polynomial ring of arbitrary number of variables over a UFD is itself a UFD: <a href=\"https://gist.github.com/alreadydone/31f1ee37aba285115cdb365d3fcdfd6a#file-mv_polynomial_ufd-lean-L128\">https://gist.github.com/alreadydone/31f1ee37aba285115cdb365d3fcdfd6a#file-mv_polynomial_ufd-lean-L128</a></p>",
        "id": 275767425,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647588247
    },
    {
        "content": "<p>Do you mind PRing it?</p>",
        "id": 275767550,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647588409
    },
    {
        "content": "<p>If someone wants to PR please feel free to do so! If no one does it I'll PR in a few days (declarations need to go into multiple files).</p>",
        "id": 275767912,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647588823
    },
    {
        "content": "<p>This is the first time I use something less general to prove something strictly more general. I guess this is an appropriate occasion to mark the less general stuff <code>private</code>.</p>",
        "id": 275768220,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647589103
    },
    {
        "content": "<p>I think it should be called <code>_aux</code>, because <code>private</code> has been causing mysterious bugs lately.</p>",
        "id": 275772069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647592236
    },
    {
        "content": "<p>In this case I don't think you need to worry. It seems like most of the private issues come from tactics applying private lemmas in other files, not from using a private lemma immediately after it is defined (and it might be fixed now anyways)</p>",
        "id": 275778917,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647596382
    },
    {
        "content": "<p>PR opened at <a href=\"https://github.com/leanprover-community/mathlib/pull/12866\">#12866</a></p>",
        "id": 276131218,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647909161
    },
    {
        "content": "<p>Nice!</p>\n<p>Does <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275471619\">this argument</a> of Damiano now imply that the homogeneous multivariable polynomials form a unique factorization <em>monoid</em>?</p>",
        "id": 276134884,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647913743
    },
    {
        "content": "<p>I think yes. Any submonoid of a <code>cancel_comm_monoid_with_zero</code> that contains zero is again a <code>cancel_comm_monoid_with_zero</code>. Damiano's argument shows that that the homogeneous polynomials in a multivariate polynomial ring over an integral domain is a <a href=\"https://en.wikipedia.org/wiki/Multiplicatively_closed_set\">saturated submonoid</a> (if xy is in the submonoid then x and y are also). However, it seems that the weaker property, that if xy and x are in the submonoid then y is also, already implies that <code>dvd, is_unit, prime, irreducible</code> are all the same in the submonoid as in the whole polynomial ring, so we can transfer <code>wf_dvd_domain</code> and <code>irreducible_iff_prime</code> properties to the submonoid, so the submonoid is also a <code>unique_factorization_monoid</code>.</p>\n<p>Now, by existence of factorization into primes the submonoid (which remains prime in the whole ring) and uniqueness in the whole polynomial ring, and since all units are homogeneous of degree 0 in a polynomial ring over a domain, we see that the factors of a homogeneous polynomial must be homogeneous, so the weaker property implies the stronger saturatedness. A weird argument!</p>",
        "id": 276137567,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647916846
    },
    {
        "content": "<p>Hmm, I made some errors: with the weaker condition, primeness in the whole ring implies primeness in the submonoid, but not vice versa.</p>",
        "id": 276140062,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647919944
    },
    {
        "content": "<p>I've successfully shown that a saturated submonoid of a unique_factorization_monoid containing 0 is itself a unique_factorization_monoid:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">submonoid.ufm</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">cancel_comm_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)],</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"bp\">↥</span><span class=\"n\">s</span>\n</code></pre></div>\n<p><a href=\"https://gist.github.com/alreadydone/869f2810d6b9a31eb2d4632e8df26c68\">https://gist.github.com/alreadydone/869f2810d6b9a31eb2d4632e8df26c68</a></p>",
        "id": 276145008,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647926633
    },
    {
        "content": "<p>Hmm, as currently stated, this is a vacuous statement, since everything divides 0 so everything must belong to the submonoid. The correct condition should be <code>∀ ⦃a b : α⦄, b ∈ s → b ≠ 0 → a ∣ b → a ∈ s</code>. Without <code>b ≠ 0</code>, this condition isn't satisfied by the homogeneous polynomials over a domain.</p>",
        "id": 276147230,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647929479
    },
    {
        "content": "<p>I managed to formalize Damiano's argument at what I think is appropriate generality for mathlib; here I show that factors of a nonzero homogeneous element in an algebra without zero divisors graded by a <code>linear_ordered_cancel_add_comm_monoid</code> are also homogeneous: <br>\n<a href=\"https://gist.github.com/alreadydone/6f26faa1bde01d1f7785a08bf83a6a28\">https://gist.github.com/alreadydone/6f26faa1bde01d1f7785a08bf83a6a28</a></p>",
        "id": 276819315,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1648432575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>, awesome!</p>",
        "id": 276819724,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648433245
    },
    {
        "content": "<p>I see you got the UFM part working too?</p>",
        "id": 276819842,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648433442
    },
    {
        "content": "<p>Thanks! I realize that we seem to be missing the graded_algebra instance on <code>mv_polynomial.homogeneous_submodule σ R</code> so my result can't be directly applied to mv_polynomial yet. I'm trying to construct one now; it seems everything necessary is in ring_theory.polynomial.homogeneous.</p>",
        "id": 276819928,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1648433578
    },
    {
        "content": "<p>Yes I made the UFM part work with the appropriate nonzero assumption, so you can concatenate the two gists. I'm not sure how useful the UFM instance is though; I used the UFM instance to show that being prime in the homogeneous submonoid is the same as being prime in the whole ring, but the irreducible_iff equivalence doesn't rely on UFM and may be good enough for applications.</p>",
        "id": 276820105,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1648433839
    },
    {
        "content": "<p>Well, so <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275430535\">here</a> was my original motivation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.homogeneous</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">q</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.is_homogeneous</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B.is_homogeneous</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q.is_homogeneous</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c.is_homogeneous</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">x.is_homogeneous</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 276820171,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648433953
    },
    {
        "content": "<p>It certainly feels like it should reduce to some factorization argument, but I don't have a theory about what the exact shortest path is.</p>",
        "id": 276820247,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648434083
    },
    {
        "content": "<p>I think you would only need that the mv_polynomial in two variables is UFD if you use the dehomogenize-factor-homogenize approach suggested by Kevin. However it might be easier to show that every homogeneous polynomial has a linear homogeneous factor (over alg_closed field), and to iterate this process it's most convenient to use the saturatedness I just showed to deduce the other factor is also homogeneous, so eventually we factorize B,q,A,c into products of multisets of linear factors. It's easy to show linear factors are irreducible (total_degree of a product of polynomials over an integral domain is the sum of total_degrees, so one of the factors must be degree 0, hence a constant and a unit). Then you use 2+3&gt;2+2=1+3 to show that no matter how you permute the elements, the multisets of factors of q and c must overlap up to associates, so you get a (homogeneous) linear factor that divides both.</p>",
        "id": 276827953,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1648444412
    },
    {
        "content": "<p>It turns out there are already two PRs <a href=\"https://github.com/leanprover-community/mathlib/pull/8913\">#8913</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/10119\">#10119</a> (latest activity 23 days ago by <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span>) providing the graded_algebra instance.</p>",
        "id": 276827955,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1648444413
    },
    {
        "content": "<p>I just cleaned up <a href=\"https://github.com/leanprover-community/mathlib/pull/10119\">#10119</a>, it should be usable now if you need it</p>",
        "id": 276831821,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1648448809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/276820247\">said</a>:</p>\n<blockquote>\n<p>It certainly feels like it should reduce to some factorization argument, but I don't have a theory about what the exact shortest path is.</p>\n</blockquote>\n<p>What about something like: factor <code>q</code> into linear factors <code>x_1 x_2</code>, then use that linear factors are prime? (Most of the discussion above seemed to be about irreducible, but primeness seems like what is actually needed). So <code>x_1</code> divides <code>A</code> or <code>c</code>. If it doesn't divide <code>c</code>, then factor <code>x_1</code> out of <code>A</code> leaving a scalar, then cancel the <code>x_1</code>, so now <code>x_2 | c</code>.</p>",
        "id": 278208215,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649356813
    },
    {
        "content": "<p>This avoids all the pigeonhole principle / multiset overlap messiness.</p>",
        "id": 278208296,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649356862
    },
    {
        "content": "<p>In fact it's enough (in this toy example) to just obtain <em>some</em> linear factor of q, since then the leftover factor is automatically also of degree 1.</p>",
        "id": 278208697,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649357052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"391579\">@Jake Levinson</span> Are you at all tempted to do it for me? :)</p>",
        "id": 278262282,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649399806
    },
    {
        "content": "<p>Hmm, I just tried running it and got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">field_theory.is_alg_closed.basic</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">resolve</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">field_theory.is_alg_closed.basic</span>\n</code></pre></div>\n<p>I think my Lean install might be out of date.</p>",
        "id": 278360009,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649450744
    },
    {
        "content": "<p>If you've got <code>leanproject</code> installed then you can just use it to get bang up to date fully compiled lean and mathlib, although exactly what you type depends on whether you're working with mathlib itself or with another project having mathlib as a dependency. If you're working in mathlib then <code>git pull</code> followed by <code>leanproject get-cache</code> should get you up to date.</p>",
        "id": 278370086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649457080
    },
    {
        "content": "<p>I was trying to construct the monoid iso (homogenization/dehomogenization) between R[x] and the submonoid of homogeneous polynomials in R[x,y] not divisible by y, so as to transfer factorization into linear polynomials in R[x] to factorization into linear homogeneous polynomials in R[x,y], for a domain R. The submonoid in R[x,y] is simply the meet (intersection) of the complement of the prime ideal (y) and <code>set_like.homogeneous_submonoid (homogeneous_submodule (fin 2) R)</code>. However, I was stuck at the first step: showing that y is a prime element. I tried to use canonical isomorphisms to reduce it to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.prime_X\">docs#polynomial.prime_X</a>, but encountered some inexplicable issues, most recently a typeclass issue: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.homogeneous</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prime_X</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"n\">sum_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"o\">({</span><span class=\"n\">n</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"n\">this.to_mul_equiv</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">σ : Type u_2,</span>\n<span class=\"cm\">_inst_1 : comm_ring R,</span>\n<span class=\"cm\">_inst_2 : is_domain R,</span>\n<span class=\"cm\">n : σ,</span>\n<span class=\"cm\">_inst : Π (a : Prop), decidable a,</span>\n<span class=\"cm\">this : mv_polynomial (punit ⊕ ↥{n}ᶜ) R ≃ₐ[R] mv_polynomial punit (mv_polynomial ↥{n}ᶜ R) :=</span>\n<span class=\"cm\">  sum_alg_equiv R punit ↥{n}ᶜ</span>\n<span class=\"cm\">⊢ algebra R (mv_polynomial punit (mv_polynomial ↥{n}ᶜ R))</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's really weird that we already have the alg_equiv <code>this</code> in the context, but Lean complains it can't find the algebra instance on the target!<br>\nUnfortunately I didn't have time to look into this further lately.</p>",
        "id": 278376428,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649463078
    },
    {
        "content": "<p>I'm taking a look, but I don't know this part of mathlib at all. For example, where do I find the lemma that <code>{σ : Type} {a b c : mv_polynomial σ K} \n  (ha : a ≠ 0) (H : a * b = a * c) : b = c</code>?</p>\n<p>Currently every time I try to use <code>library_search</code> it crashes VS Code with a memory consumption error. I don't know if this is something wrong with my installation or what.</p>",
        "id": 278378124,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649465252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  Here's the proof outline I was imagining. (I think some of these sorries might be easy to fill in, but as I mentioned I'm having trouble with Lean and VS Code at the moment, so I had limited searching ability...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.homogeneous</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mv_polynomial.is_homogeneous.factor</span>\n  <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">K</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g.is_homogeneous</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∣</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f.is_homogeneous</span> <span class=\"o\">(</span><span class=\"n\">f.total_degree</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- proof: by Damiano's argument higher up the thread (look at minimum and maximum degree parts of f)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mv_polynomial.prime_of_linear</span>\n  <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.is_homogeneous</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">prime</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- proof: irreducibility (by degree counting) + UFD</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mv_polynomial.has_linear_factor</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.is_homogeneous</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">x.is_homogeneous</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- proof: possibly annoying since it involves dehomogenizing</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">q</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.is_homogeneous</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B.is_homogeneous</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q.is_homogeneous</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c.is_homogeneous</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">q_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">x.is_homogeneous</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">q.has_linear_factor</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hxc</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxq</span><span class=\"o\">,</span> <span class=\"n\">hxc</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hxA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">prime.dvd_or_dvd</span> <span class=\"o\">(</span><span class=\"n\">x.prime_of_linear</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hxc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hxq.trans</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- pull out factors</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hqxy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hxq</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">A'</span><span class=\"o\">,</span> <span class=\"n\">hAxA'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hxA</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hAxA'</span><span class=\"o\">,</span> <span class=\"n\">hqxy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">x_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">A_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hAxA'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">A'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n\n\n  <span class=\"k\">have</span> <span class=\"n\">hyq</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">▸</span> <span class=\"n\">hqxy</span><span class=\"o\">⟩,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y.is_homogeneous</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">hq.factor</span> <span class=\"n\">hyq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">nat.add_left_cancel</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hq.inj_right</span> <span class=\"n\">_</span> <span class=\"n\">q_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hqxy.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hx.mul</span> <span class=\"o\">(</span><span class=\"n\">hq.factor</span> <span class=\"n\">hyq</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hA''</span> <span class=\"o\">:</span> <span class=\"n\">A'.is_homogeneous</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">hA.factor</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">x</span> <span class=\"n\">A'</span> <span class=\"bp\">▸</span> <span class=\"n\">hAxA'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">∣</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">nat.add_left_cancel</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hA.inj_right</span> <span class=\"n\">_</span> <span class=\"n\">A_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hAxA'.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hx.mul</span> <span class=\"o\">(</span><span class=\"n\">hA.factor</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">x</span> <span class=\"n\">A'</span> <span class=\"bp\">▸</span> <span class=\"n\">hAxA'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">∣</span> <span class=\"n\">A</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">A'_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">A_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hAxA'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">A'_inv</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">A'_mul</span> <span class=\"o\">:</span> <span class=\"n\">A'_inv</span> <span class=\"bp\">*</span> <span class=\"n\">A'</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- inverse of a nonzero constant?</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hyc</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H''</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A'_inv</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A'_inv</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">A'_inv</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">A'_inv</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">H'</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A'_inv</span> <span class=\"bp\">*</span> <span class=\"n\">A'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>             <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">A'_mul</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>                 <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">H''</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hyq</span><span class=\"o\">,</span> <span class=\"n\">hyc</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278381037,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649469188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/278378124\">said</a>:</p>\n<blockquote>\n<p>I'm taking a look, but I don't know this part of mathlib at all. For example, where do I find the lemma that <code>{σ : Type} {a b c : mv_polynomial σ K} \n  (ha : a ≠ 0) (H : a * b = a * c) : b = c</code>?</p>\n</blockquote>\n<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cancel_monoid_with_zero.mul_left_cancel_of_ne_zero\">docs#cancel_monoid_with_zero.mul_left_cancel_of_ne_zero</a>; the instance should be automatic for a domain or field K.</p>",
        "id": 278386596,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649477469
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> . I've golfed it a little more. Should I edit my post above or post a fresh version?</p>",
        "id": 278392352,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649487128
    }
]