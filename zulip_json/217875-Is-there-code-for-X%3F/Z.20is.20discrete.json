[
    {
        "content": "<p>Do we have a lemma approximately like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 248726653,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628357504
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int.norm_eq_abs</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">int.eq_zero_iff_abs_lt_one.mp</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 248726861,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1628357773
    },
    {
        "content": "<p>maybe we should have a <code>library_search_mod_cast</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 248726960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628357938
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> !</p>",
        "id": 248726978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628357986
    },
    {
        "content": "<p>FWIW, I have found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.tendsto_coe_cofinite\">docs#int.tendsto_coe_cofinite</a> to be a useful abstract formulation of \"<code>ℤ</code> is discrete\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Under the coercion from `ℤ` to `ℝ`, inverse images of compact sets are finite. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_coe_cofinite</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 248729871,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1628361873
    },
    {
        "content": "<p>This is a lovely way of thinking about it! Actually it would look even nicer using ideals not filters because then the <code>co-</code> prefixes would go</p>",
        "id": 248730031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628362147
    }
]