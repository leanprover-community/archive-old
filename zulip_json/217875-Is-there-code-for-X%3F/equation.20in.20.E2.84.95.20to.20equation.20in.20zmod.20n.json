[
    {
        "content": "<p>I feel like I'm missing something obvious here.  If I'm trying to prove, for example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and I have the corresponding statement that holds for all <code>x : ℕ</code> (in this case, <code>nat.sq_sub_sq x 1</code>), can I use the equation in <code>ℕ</code> to prove the equation in <code>zmod n</code>?</p>",
        "id": 291481436,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659261100
    },
    {
        "content": "<p>I suspect the answer is either going to be \"No, of course not, because ...\" or \"Of course, it's just ...\".   Either way, I have the <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> ready!</p>",
        "id": 291481500,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659261182
    },
    {
        "content": "<p>No, not really, but it is an equation in the language of rings and <code>zmod n</code> is a ring so <code>by ring</code> should work</p>",
        "id": 291481850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659261722
    },
    {
        "content": "<p>in fact this theorem is considreably harder over <code>nat</code> because <code>-</code> doesn't mean the usual thing</p>",
        "id": 291481883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659261752
    },
    {
        "content": "<p>Yeah the canonical map (call it f) from nat to zmod n is surjective which is one of the ingredients you'd need for this, but it does not satisfy f(a-b) = f(a) - f(b) which would be another.</p>",
        "id": 291483442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659263949
    },
    {
        "content": "<p>eg x-(x+1)=0 can be proved for nat but can't be deduced for zmod n</p>",
        "id": 291483520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659264036
    },
    {
        "content": "<p>Yes, I'd once again forgotten about the problem of subtraction.</p>",
        "id": 291483560,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659264092
    },
    {
        "content": "<p>For instance, when <code>x=0</code> the statement over <code>ℕ</code> and over <code>zmod n</code> are both true but represent \"different\" identities.</p>",
        "id": 291483717,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659264294
    },
    {
        "content": "<p>Yeah, I realise now that if I want to get a result for <code>zmod n</code> from something more generic, the natural generalisation is something like <code>comm_ring R</code>, not <code>ℕ</code>.</p>",
        "id": 291483976,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659264621
    },
    {
        "content": "<p>And indeed the example I gave above has <code>_root_.sq_sub_sq x 1</code> for <code>x : R</code>.</p>",
        "id": 291484002,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659264683
    },
    {
        "content": "<p>How about from \\Z?</p>",
        "id": 291484695,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659265601
    },
    {
        "content": "<p>Then it becomes the statement \"evaluation of a polynomial commutes with ring homomorphisms\" which presumably is there somewhere...</p>",
        "id": 291486257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659267920
    },
    {
        "content": "<p>Is it <a href=\"https://leanprover-community.github.io/mathlib_docs/data/polynomial/eval.html#polynomial.eval%E2%82%82_at_apply\">this</a> result? BTW: How can I paste <code>docs</code> links if there is a subscript? The usual way did not work...</p>",
        "id": 291488971,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659271925
    },
    {
        "content": "<p>You can't, we need to fix the Zulip linkifiers (if they can be fixed)</p>",
        "id": 291490444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659273836
    },
    {
        "content": "<p>Related to my previous question, do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hα0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp_odd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291826452,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659521141
    },
    {
        "content": "<p>The proof for <code>x : zmod p</code> is more straightforward, because we have [no_zero_divisors (zmod p)]`.</p>",
        "id": 291826622,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659521247
    },
    {
        "content": "<p>And I can prove this (without any issues with subtraction)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp_odd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I can't see how to use this to get a proof of the above.</p>",
        "id": 291826784,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659521367
    },
    {
        "content": "<p>No need for <code>hα0 : 0 &lt; α</code>, it's true for <code>α = 0</code></p>",
        "id": 291826915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659521447
    },
    {
        "content": "<p>Why not <code>x : int</code> instead of <code>x : nat</code> for the intermediate result?</p>",
        "id": 291827647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659521905
    },
    {
        "content": "<p>Then the result would be easier to use.</p>",
        "id": 291827663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659521923
    },
    {
        "content": "<p>I've started an attempt on that, but I've run into difficulties proving it and other difficulties in using it for the <code>zmod (p^α)</code> result — I get tangled up in coercions.</p>",
        "id": 291828204,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659522249
    },
    {
        "content": "<p>The outline of the proof for <code>x : nat</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp_odd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.sq_sub_sq</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>  <span class=\"c1\">-- because if p divides both then p ∣ 2</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h_plus</span> <span class=\"n\">h_minus</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>where the last two <code>sorry</code>s are taken care of with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prime.pow_dvd_of_dvd_mul_left\">docs#prime.pow_dvd_of_dvd_mul_left</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prime.pow_dvd_of_dvd_mul_right\">docs#prime.pow_dvd_of_dvd_mul_right</a>.</p>",
        "id": 291828604,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659522486
    },
    {
        "content": "<p>But I can't see how to write the counterpart of <code>¬ p ∣ (x + 1) </code> and <code>¬ p ∣ (x - 1) </code> in the <code>zmod (p^α)</code> case.</p>",
        "id": 291828697,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659522564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> has marked this topic as unresolved.</p>",
        "id": 291903211,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659552339
    },
    {
        "content": "<p>Sorry, I didn't check back into the thread after I marked it as resolved. Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for writing up a solution!</p>",
        "id": 291903347,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659552418
    },
    {
        "content": "<p>Here's the version I figured out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">zmod</span>\n\n<span class=\"sd\">/-- If an odd prime power `p^α` divides `x^2 - 1` then it divides `x-1` or `x+1`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">square_roots_of_one_int</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp_odd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">pp'</span> <span class=\"o\">:=</span> <span class=\"n\">prime_iff_prime_int.1</span> <span class=\"n\">pp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">diffsquare</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">root</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">not_and_distrib</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hp1</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_sub</span> <span class=\"n\">hp1</span> <span class=\"n\">hp2</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h4</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">prime_two_or_dvd_of_dvd_two_mul_pow_self_two</span> <span class=\"n\">pp</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pp.ne_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp_odd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hp_odd</span> <span class=\"n\">even_two</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h_plus</span> <span class=\"n\">h_minus</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">prime.pow_dvd_of_dvd_mul_left</span> <span class=\"n\">pp'</span> <span class=\"n\">α</span> <span class=\"n\">h_plus</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">diffsquare</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">prime.pow_dvd_of_dvd_mul_right</span> <span class=\"n\">pp'</span> <span class=\"n\">α</span> <span class=\"n\">h_minus</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">diffsquare</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- If `x : zmod (p^α)` (for odd prime `p`) satisfies `x^2 = 1` then `x = 1 ∨ x = -1` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">square_roots_of_one_zmod</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp_odd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or.imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">square_roots_of_one_int</span> <span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">pp</span> <span class=\"n\">hp_odd</span> <span class=\"n\">_</span> <span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int_coe_eq_int_coe_iff_dvd_sub</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int_coe_eq_int_coe_iff_dvd_sub</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int_coe_eq_int_coe_iff_dvd_sub</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291903869,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659552675
    },
    {
        "content": "<p>Of course I was cheating in the latter proof by leaving the <code>simp</code>s unsqueezed.  Here's a better version with tem changed to <code>{norm,push}_cast</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">zmod</span>\n\n<span class=\"sd\">/-- If `x : zmod (p^α)` (for odd prime `p`) satisfies `x^2 = 1` then `x = 1 ∨ x = -1` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">square_roots_of_one_zmod</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp_odd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or.imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">square_roots_of_one_int</span> <span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">pp</span> <span class=\"n\">hp_odd</span> <span class=\"n\">_</span> <span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int_coe_eq_int_coe_iff_dvd_sub</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int_coe_eq_int_coe_iff_dvd_sub</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int_coe_eq_int_coe_iff_dvd_sub</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291905025,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659553245
    }
]