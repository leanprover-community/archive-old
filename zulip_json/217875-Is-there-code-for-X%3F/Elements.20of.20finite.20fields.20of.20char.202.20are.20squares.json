[
    {
        "content": "<p>Is this in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_square_of_char_two</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_square</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(probably <code>field F</code> is stronger than necessary).</p>",
        "id": 279106872,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650046074
    },
    {
        "content": "<p>Do we not know that finite fields are perfect? I thought I saw that in mathlib at some point.</p>",
        "id": 279107295,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650046317
    },
    {
        "content": "<p>I thought so too but can't find it</p>",
        "id": 279107354,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650046331
    },
    {
        "content": "<p>We certainly have Frobenius as a ring hom, which is injective hence surjective since things are finite. It should be easy enough to prove.</p>",
        "id": 279107426,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650046375
    },
    {
        "content": "<p>I guess the most direct way is to use <code>a ^ (#F - 1) = 1</code> (for nonzero a) to write down a square root explicitly.</p>",
        "id": 279107646,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650046533
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">frobenius_bijective</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">fintype.injective_iff_bijective</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">frobenius_inj</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">frobenius_bijective</span> <span class=\"n\">p</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 279107808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650046624
    },
    {
        "content": "<p><del>Slightly annoying that the definition of square is the opposite of that of surjective</del> Edit: golf time</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_reduced</span> <span class=\"n\">K</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">K</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_square</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists_imp_exists</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"n\">eq.symm</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"o\">((</span><span class=\"n\">fintype.bijective_iff_injective_and_card</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">⟨</span><span class=\"n\">frobenius_inj</span> <span class=\"n\">K</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 279108702,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650047151
    },
    {
        "content": "<p>This gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">eq.subst'</span> <span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">elaborator</span> <span class=\"n\">has</span> <span class=\"n\">special</span> <span class=\"n\">support</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">application</span> <span class=\"o\">(</span><span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">handled</span> <span class=\"n\">as</span> <span class=\"n\">an</span> <span class=\"s2\">\"eliminator\"</span><span class=\"o\">),</span> <span class=\"n\">but</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">must</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"n\">metavariables</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 279109202,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650047421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> might be interested in this topic, too.</p>",
        "id": 279109284,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650047472
    },
    {
        "content": "<p>That's very strange, you mean exactly the same code in a new file gives you an error?</p>",
        "id": 279109362,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650047520
    },
    {
        "content": "<p>Hm, it works in a fresh file. I'll check...</p>",
        "id": 279109641,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650047665
    },
    {
        "content": "<p>OK, I must have done something wrong. I copied it again, and now it works.</p>",
        "id": 279109958,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650047859
    },
    {
        "content": "<p>Seems like I missed out on some finite field fun!</p>",
        "id": 279111252,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650048612
    }
]