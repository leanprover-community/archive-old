[
    {
        "content": "<p>Hello, is there code identifying these two gcds? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">come_on</span> <span class=\"o\">(</span><span class=\"n\">cc</span> <span class=\"n\">dd</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_domain.gcd</span> <span class=\"n\">cc</span> <span class=\"n\">dd</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">cc</span> <span class=\"n\">dd</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226203698,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1613168175
    },
    {
        "content": "<p>Unfortunately it's not true!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">come_on</span> <span class=\"o\">(</span><span class=\"n\">cc</span> <span class=\"n\">dd</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_domain.gcd</span> <span class=\"n\">cc</span> <span class=\"n\">dd</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">cc</span> <span class=\"n\">dd</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">slim_check</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>reports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">===================</span>\n<span class=\"n\">Found</span> <span class=\"n\">problems</span><span class=\"bp\">!</span>\n\n<span class=\"n\">cc</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">dd</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">issue</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">hold</span>\n<span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"n\">shrinks</span><span class=\"o\">)</span>\n<span class=\"c1\">-------------------</span>\n</code></pre></div>",
        "id": 226204423,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613168632
    },
    {
        "content": "<p>It is surprising there is no theorem about this though</p>",
        "id": 226204514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613168667
    },
    {
        "content": "<p>it's not hard to prove they are equal up to sign, because they both satisfy the universal property of gcd</p>",
        "id": 226204547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613168687
    },
    {
        "content": "<p>but I'm not sure the exact rules of the sign of <code>euclidean_domain.gcd</code> are important to pin down</p>",
        "id": 226204615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613168733
    },
    {
        "content": "<p>Ah ok, thanks. Is there a lemma that they agree up to sign?</p>",
        "id": 226205250,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1613169096
    },
    {
        "content": "<p>I didn't see any, hopefully it shouldn't be too hard to prove, but it might depend a bit on what version is needed for your application.</p>",
        "id": 226205332,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613169125
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.euclidean_domain</span> <span class=\"n\">data.int.gcd</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int.nat_abs</span> <span class=\"o\">(</span><span class=\"n\">euclidean_domain.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.dvd_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int.coe_nat_dvd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">int.nat_abs_dvd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">int.dvd_gcd</span> <span class=\"o\">(</span><span class=\"n\">euclidean_domain.gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">euclidean_domain.gcd_dvd_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">int.dvd_nat_abs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">euclidean_domain.dvd_gcd</span> <span class=\"o\">(</span><span class=\"n\">int.gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int.gcd_dvd_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226205978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613169577
    },
    {
        "content": "<p>After some mathematica explorations, looks like this is the sign:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.euclidean_domain</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">euclidean_domain.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 226207138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613170232
    },
    {
        "content": "<p>We have<br>\n<code>lemma nat_abs_gcd (i j : ℤ) : nat_abs (gcd_monoid.gcd i j) = int.gcd i j := rfl</code><br>\nin <code>ring_theory/int/basic.lean</code>.</p>",
        "id": 226208137,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1613170891
    },
    {
        "content": "<p>that's evidently a different function, though, since it's true by refl</p>",
        "id": 226208409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613171054
    },
    {
        "content": "<p>to wit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_gcd</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">int.gcd</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gcd_monoid.gcd</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 226208427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613171067
    },
    {
        "content": "<p>however there might be a theorem relating <code>euclidean_domain.gcd</code> and <code>gcd_domain.gcd</code> when they both apply</p>",
        "id": 226208464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613171112
    },
    {
        "content": "<p>Great thanks! Followup question: I started using <code>euclidean_domain.gcd</code> because there's a function <code>euclidean_domain.gcd_a</code> etc, which I don't see in <code>int.gcd</code>? Or am I just missing something? Thanks!</p>",
        "id": 226217715,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1613178883
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.gcd</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gcd_a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">m.gcd_a</span> <span class=\"n\">n.nat_abs</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">]</span>    <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">m.succ.gcd_a</span> <span class=\"n\">n.nat_abs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gcd_b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m.nat_abs.gcd_b</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span>    <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">m.nat_abs.gcd_b</span> <span class=\"n\">n.succ</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">gcd_eq_gcd_ab</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">gcd_a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">gcd_b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.gcd_eq_gcd_ab</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">y.succ</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">neg_mul_neg</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.gcd_eq_gcd_ab</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x.succ</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">neg_mul_neg</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.gcd_eq_gcd_ab</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x.succ</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">y.succ</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_neg</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.gcd_eq_gcd_ab</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">int</span>\n</code></pre></div>",
        "id": 226219068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613180544
    },
    {
        "content": "<p>added in <a href=\"https://github.com/leanprover-community/mathlib/issues/6212\">#6212</a></p>",
        "id": 226219802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613181437
    }
]