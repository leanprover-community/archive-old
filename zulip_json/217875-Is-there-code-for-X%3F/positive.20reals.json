[
    {
        "content": "<p>Dear All,</p>\n<p>do strictly positive reals appear in mathlib?  If so, are they an <code>ordered_comm_group</code>?</p>\n<p>I searched a bit and could not find them.</p>\n<p>Thanks!</p>",
        "id": 234625595,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618469665
    },
    {
        "content": "<p>Maybe <code>units nnreal</code> is the closest we have -- assuming nnreal is a monoid...</p>",
        "id": 234625781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618469797
    },
    {
        "content": "<p>Hmm, I can try. I was playing with the inequalities that Johan suggested in <code>liquid</code> and there are very few lemmas about divisibility that apply to <code>R&gt;0</code> since it does not have many instances...</p>",
        "id": 234625855,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618469863
    },
    {
        "content": "<p>Let see if using <code>units nnreal</code> makes it easier!</p>",
        "id": 234625873,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618469879
    },
    {
        "content": "<p>Ok, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_group</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 234627711,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618470500
    },
    {
        "content": "<p>If that's the route you want to go down then probably the next thing to do is to define a constructor which takes in a real and a proof that it's positive, and gives you an element of the units.</p>",
        "id": 234627978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618470639
    },
    {
        "content": "<p>Since it seems that the lemma that I will use most often is <code>a / b ≤ a / c ↔ c ≤ b</code>, with <code>a b c : nnreal</code>, I will just prove this by breaking up the terms and reducing to the real case.  Hopefully, I will not need more lemmas!</p>",
        "id": 234628567,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618470959
    },
    {
        "content": "<p>Not too pretty, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">preal.div_le_div_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a00</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b00</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">c00</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c0</span><span class=\"o\">,</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">div_le_div_left</span> <span class=\"n\">a00</span> <span class=\"n\">b00</span> <span class=\"n\">c00</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff.rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234629288,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618471380
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">preal.div_le_div_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nnreal.div_le_iff</span> <span class=\"n\">b0.ne.symm</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">nnreal.le_div_iff_mul_le</span> <span class=\"n\">c0.ne.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_le_mul_left</span> <span class=\"n\">a0</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 234630204,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1618471874
    },
    {
        "content": "<p>Rémy, thank you very much!  I had not found the <code>nnreal.div_le_iff + ...</code> lemmas!</p>",
        "id": 234630502,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618472040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/positive.20reals/near/234628567\">said</a>:</p>\n<blockquote>\n<p>Since it seems that the lemma that I will use most often is <code>a / b ≤ a / c ↔ c ≤ b</code>, with <code>a b c : nnreal</code>, I will just prove this by breaking up the terms and reducing to the real case.  Hopefully, I will not need more lemmas!</p>\n</blockquote>\n<p>Doesn't this work in any <code>linear_ordered_comm_group_with_zero</code>?</p>",
        "id": 234631201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618472419
    },
    {
        "content": "<p>It's probably just a hole in the API</p>",
        "id": 234631224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618472426
    },
    {
        "content": "<p>Almost every lemma that's proven for <code>nnreal</code> should work in that generality</p>",
        "id": 234631265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618472452
    },
    {
        "content": "<p>I could not find the lemmas with inequalities for <code>linear_ordered_comm_group_with_zero</code>: the ones that I found were either for <code>comm_group</code> or <code>field</code>.  I was not able to find the <code>with_zero</code> version.</p>",
        "id": 234631504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618472577
    },
    {
        "content": "<p>There are some holes in the API. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/linear_ordered_comm_group_with_zero.lean#L158\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/linear_ordered_comm_group_with_zero.lean#L158</a> seems to be the only lemma about \"div\".</p>",
        "id": 234631919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618472793
    },
    {
        "content": "<p>But it's not even about <code>div</code>.</p>",
        "id": 234631926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618472798
    },
    {
        "content": "<p>But there's enough about <code>le</code> and <code>inv</code>.</p>",
        "id": 234631942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618472812
    },
    {
        "content": "<p>Johan, thanks for the pointer: I will try to work with what is available, before trying to fill in the holes!</p>",
        "id": 234632047,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618472866
    }
]