[
    {
        "content": "<p>In <code>topology/sheaves/sheafify.lean</code>, it is listed that there is no sheafification as a functor; and I would like to try that. Just to be safe, there is no universal property of sheafification right? I.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>F</mi><mo>→</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">f : F \\to G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is a morphism from presheaf to sheaf (of Types), then it factors uniquely as <code>F.to_sheafify</code> and <code>F.sheafify -&gt; G </code>.</p>",
        "id": 273616028,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1646129238
    },
    {
        "content": "<p>I believe it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.grothendieck_topology.sheafify_lift\">docs#category_theory.grothendieck_topology.sheafify_lift</a>, though it is for sheaves on sites.</p>",
        "id": 273617163,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646129797
    },
    {
        "content": "<p>Can't we reuse all the sheafification API that Adam has built?</p>",
        "id": 273617202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646129824
    },
    {
        "content": "<p>He really did a lot. It doesn't make much sense to redo all of that.</p>",
        "id": 273617234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646129843
    },
    {
        "content": "<p>I think the culprit is that the docs of <a href=\"https://tqft.net/mathlib/topology/sheaves/sheafify\">file#topology/sheaves/sheafify</a> is not updated.</p>",
        "id": 273617382,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646129914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/universal.20property.20of.20sheafification.20.28on.20topological.20spaces.29/near/273617163\">said</a>:</p>\n<blockquote>\n<p>I believe it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.grothendieck_topology.sheafify_lift\">docs#category_theory.grothendieck_topology.sheafify_lift</a>, though it is for sheaves on sites.</p>\n</blockquote>\n<p>I am not sure, because it seems to me that sheafification of presheaves on sites and on topological spaces used very different approach, so it is not entirely trivial that the two approaches are isomorphic</p>",
        "id": 273617609,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1646130017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/universal.20property.20of.20sheafification.20.28on.20topological.20spaces.29/near/273617202\">said</a>:</p>\n<blockquote>\n<p>Can't we reuse all the sheafification API that Adam has built?</p>\n</blockquote>\n<p>So, in order to translate stuff from presheaves on sites to presheaves on Top, it might be easier to show universal property of sheafification on Tops first</p>",
        "id": 273618035,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1646130201
    },
    {
        "content": "<p>Probably showing that the stalks of <code>grothendieck_topology.sheafify_lift F.to_sheafify _</code> is iso will do. I believe it wouldn't be that hard.<br>\nThat said, is there a reason why you must use <code>topology/sheaves/sheafify.lean</code>? I would rather make that file deprecated.</p>",
        "id": 273618100,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646130232
    },
    {
        "content": "<p>There might still be value in keeping that file and proving the iso as a sanity check though. But I don't think that file should be used any further</p>",
        "id": 273618496,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646130401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/universal.20property.20of.20sheafification.20.28on.20topological.20spaces.29/near/273618100\">said</a>:</p>\n<blockquote>\n<p>Probably showing that the stalks of <code>grothendieck_topology.sheafify_lift F.to_sheafify _</code> is iso will do. I believe it wouldn't be that hard.<br>\nThat said, is there a reason why you must use <code>topology/sheaves/sheafify.lean</code>? I would rather make that file deprecated.</p>\n</blockquote>\n<p>Nothing in particular, I am trying to play with sheafification of presheaf of modules, that is the first file I looked at.</p>",
        "id": 273618643,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1646130483
    },
    {
        "content": "<p>Is there a quick way to see where <code>topology/sheaves/sheafify.lean</code> is used so that we can see how hard it is to deprecate this file?</p>",
        "id": 273619106,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1646130675
    },
    {
        "content": "<p>Look at what files import it: <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/sheaves/sheafify.html\">https://leanprover-community.github.io/mathlib_docs/topology/sheaves/sheafify.html</a></p>",
        "id": 273619177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646130713
    },
    {
        "content": "<p>The answer is <span aria-label=\"zero\" class=\"emoji emoji-0030-20e3\" role=\"img\" title=\"zero\">:zero:</span></p>",
        "id": 273619187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646130721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>  so deprecating this file literally cost nothing</p>",
        "id": 273619339,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1646130790
    },
    {
        "content": "<p>I think there is already an effort underway to redefine sheaves on a topological space via sheaves on a site.</p>",
        "id": 273622218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646132235
    }
]