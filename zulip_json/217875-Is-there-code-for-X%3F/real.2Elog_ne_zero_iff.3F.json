[
    {
        "content": "<p>I feel this theorem is missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.log_ne_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The closest thing to this is <code>log_pos</code> which can help derive it, unsure if it is considered enough? (It seems like the situation is similar for the complex version of exponential)</p>",
        "id": 224740887,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612193007
    },
    {
        "content": "<p>Is it true? What is <code>real.log (-1)</code>?</p>",
        "id": 224741942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612193385
    },
    {
        "content": "<p>I should try to prove first :p but what I meant is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real.log_ne_zero_of_ne_one</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"n\">real.log</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">real.log_pos</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">real.log_neg</span> <span class=\"n\">hx_pos</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224742290,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612193512
    },
    {
        "content": "<p>Isn't this just injectivity of log?</p>",
        "id": 224754350,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612197903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/real.2Elog_ne_zero_iff.3F/near/224754350\">said</a>:</p>\n<blockquote>\n<p>Isn't this just injectivity of log?</p>\n</blockquote>\n<p>I'm not sure I see a proof of the log injectivity in the file, though there is a proof that exp is injective in the same file</p>",
        "id": 224756067,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612198508
    },
    {
        "content": "<p>injectivity of log is the same as functionality of exp</p>",
        "id": 224756152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612198538
    },
    {
        "content": "<p>functionality := ?</p>",
        "id": 224756192,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612198553
    },
    {
        "content": "<p>being a function</p>",
        "id": 224756257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612198564
    },
    {
        "content": "<p>exp is a function</p>",
        "id": 224756269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612198567
    },
    {
        "content": "<p><code>log x = y \\iff x = exp y</code></p>",
        "id": 224756275,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612198569
    },
    {
        "content": "<p>Ah, right</p>",
        "id": 224756284,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612198573
    },
    {
        "content": "<p>of course, log isn't, really, since exp isn't injective</p>",
        "id": 224756346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612198603
    },
    {
        "content": "<p><code>log x = 0 iff x = exp 0 = 1</code>, indeed.</p>",
        "id": 224756369,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612198612
    },
    {
        "content": "<p><code>real.exp</code> isn't injective?!</p>",
        "id": 224756674,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612198727
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp_injective\">docs#real.exp_injective</a></p>",
        "id": 224756776,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612198767
    },
    {
        "content": "<p>ah, good point</p>",
        "id": 224756784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612198769
    },
    {
        "content": "<p>I was thinking of <code>complex.exp</code></p>",
        "id": 224756816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612198783
    },
    {
        "content": "<p>We have some missing lemmas relating the inverses of <code>real.log</code> and <code>real.exp</code></p>",
        "id": 224757011,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612198852
    },
    {
        "content": "<p>And then \"injectivity\" of <code>real.log</code> comes out of having an inverse, etc.</p>",
        "id": 224757066,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612198872
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.strict_mono_incr_on_log\">docs#real.strict_mono_incr_on_log</a></p>",
        "id": 224826204,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612238282
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono_incr_on.inj_on\">docs#strict_mono_incr_on.inj_on</a><br>\nBut a PR with <code>(h : x ≠ 0) : log x = y ↔ exp y = abs x</code> and <code>(h : 0 &lt; x) : log x = y ↔ exp y = x</code> is very welcome.</p>",
        "id": 224826365,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612238444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/real.2Elog_ne_zero_iff.3F/near/224826365\">said</a>:</p>\n<blockquote>\n<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono_incr_on.inj_on\">docs#strict_mono_incr_on.inj_on</a><br>\nBut a PR with <code>(h : x ≠ 0) : log x = y ↔ exp y = abs x</code> and <code>(h : 0 &lt; x) : log x = y ↔ exp y = x</code> is very welcome.</p>\n</blockquote>\n<p>Alright, will try to come up with something</p>",
        "id": 224863659,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612268702
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 224863669,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612268705
    },
    {
        "content": "<p>Is there a bundled <code>exp</code> equiv from real to R+?</p>",
        "id": 224864076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612268954
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp_order_iso\">docs#real.exp_order_iso</a></p>",
        "id": 224869792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612272223
    }
]