[
    {
        "content": "<p>How do I say that a <code>semiring</code> is a <code>cancel_comm_monoid_with_zero</code>? I cannot use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cancel_comm_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>since now <code>R</code> has two <code>monoid</code> structure. For rings we have <code>is_domain</code>, but it requires <code>ring</code> and not <code>semiring</code>.</p>\n<p>This is relevant for ideals of a Dedekind domain, that are a <code>semiring</code> and a <code>cancel_comm_monoid_with_zero</code>, and in the <code>flt-regular</code> project we would like to prove a general result about this semirings.</p>",
        "id": 284215346,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653722132
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_divisors.to_cancel_comm_monoid_with_zero\">docs#no_zero_divisors.to_cancel_comm_monoid_with_zero</a> work here?</p>",
        "id": 284216208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653723536
    },
    {
        "content": "<p>It is for <code>comm_ring</code></p>",
        "id": 284216220,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653723582
    },
    {
        "content": "<p>Right, and it's proved using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_regular_of_ne_zero'\">docs#is_regular_of_ne_zero'</a></p>",
        "id": 284216267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653723604
    },
    {
        "content": "<p>Which also needs an almost-ring</p>",
        "id": 284216276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653723622
    },
    {
        "content": "<p>So I guess probably a new typeclass is needed...</p>",
        "id": 284216280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653723634
    },
    {
        "content": "<p>I guess the right thing is to have <code>is_domain</code> for <code>semiring</code></p>",
        "id": 284216283,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653723637
    },
    {
        "content": "<p>Let me see what happens</p>",
        "id": 284216285,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653723656
    },
    {
        "content": "<p>Defined in a different way though, right?</p>",
        "id": 284216296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653723677
    },
    {
        "content": "<p>Ah, I am stupid</p>",
        "id": 284216353,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653723740
    },
    {
        "content": "<p>Is it possible that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_divisors\">docs#no_zero_divisors</a> is uninteresting on a semiring, and we should redefine it to \"all non-zero elements are regular\"?</p>",
        "id": 284216364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653723771
    },
    {
        "content": "<p>Of course to prove the cancellative property we need subtraction</p>",
        "id": 284216367,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653723773
    },
    {
        "content": "<p>Yes, we probably need something like <code>is_cancellative_semiring</code> meaning all elements are regular, or something like that</p>",
        "id": 284216517,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653723984
    },
    {
        "content": "<p><code>cancel_semiring</code>?</p>",
        "id": 284216547,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653724066
    },
    {
        "content": "<p>Since we know have <code>is_domain</code> it should be <code>is_cancellative</code>. I don't know if this is worth the effort (do we have other interesting examples?)</p>",
        "id": 284216810,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653724362
    },
    {
        "content": "<p>Do we have any examples of things with no zero divisors that aren't cancellative?</p>",
        "id": 284219247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653728132
    },
    {
        "content": "<p>I have no idea...</p>",
        "id": 284219879,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653729212
    },
    {
        "content": "<p>I mean, they should exist, I don't know an interesting example</p>",
        "id": 284220020,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653729424
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> knows?</p>",
        "id": 284220028,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653729440
    },
    {
        "content": "<p>Perhaps an easier question is \"are any of the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_divisors\">docs#no_zero_divisors</a> instances an example of this\"</p>",
        "id": 284220474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653730170
    },
    {
        "content": "<p>I'm not at Lean now, but isn't this similar to the distinction between <code>char_zero</code> and <code>char_p 0</code>?  That is, <code>no_zero_divisors</code> could apply to something that has a non-zero absorbing element, while cancellative would not.</p>",
        "id": 284226868,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653740038
    },
    {
        "content": "<p>A more concrete example that I would test if I were at a computer: is <code>fin 2</code> a <code>non_zero_divisor</code> semiring that is not cancellative?</p>",
        "id": 284226928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653740118
    },
    {
        "content": "<p>(by <code>fin 2</code> I mean that <code>1+1=1</code> and everything else \"obvious\".)</p>\n<p>Ah, maybe to get it to work for multiplication, we might need <code>fin (something larger than 2, maybe 3 works)</code>.</p>",
        "id": 284227012,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653740249
    },
    {
        "content": "<p>In <code>fin 3</code>, the identity <code>2*1=2*2</code> shows that it is not cancellative, yet it has no non-trivial zero-divisors... Likely by <code>dec_trivial!</code></p>",
        "id": 284227081,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653740371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60semiring.60.20and.20.60cancel_comm_monoid_with_zero.60/near/284227081\">said</a>:</p>\n<blockquote>\n<p>In <code>fin 3</code>, the identity <code>2*1=2*2</code> shows that it is not cancellative, yet it has no non-trivial zero-divisors... Likely by <code>dec_trivial!</code></p>\n</blockquote>\n<p>What am I missing? Surely that equality is false as <code>2%3 = 2 != 1 = 4%3</code>?</p>",
        "id": 284227208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653740538
    },
    {
        "content": "<p>fin 3 is cancellative because it's a field, right?</p>",
        "id": 284227237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653740585
    },
    {
        "content": "<p>Use absorbing addition and multiplication.</p>",
        "id": 284227247,
        "sender_full_name": "FR",
        "timestamp": 1653740603
    },
    {
        "content": "<p>I meant <code>fin n</code> to have absorbing operations: any sum/product at least <code>n-1</code> equals <code>n-1</code></p>",
        "id": 284227254,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653740624
    },
    {
        "content": "<p>I have lost track of which operation <code>fin</code> has right now...</p>",
        "id": 284227296,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653740645
    },
    {
        "content": "<p>Eric, what you described is what I would call <code>zmod</code>, which indeed is a field for prime input.  In my mind, <code>fin</code> has the more \"exotic\" absorbing property.</p>",
        "id": 284227319,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653740717
    },
    {
        "content": "<p>For a possibly more used example: is ennreal something that has no zero divisors, but is cancellative?</p>",
        "id": 284227444,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653740897
    },
    {
        "content": "<p><code>fin n</code> and <code>zmod n</code> are identical right now except when <code>n=0</code></p>",
        "id": 284227611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653741190
    },
    {
        "content": "<p>Ok, thanks for the clarification.  Is the finite example clear, though?  More importantly, it works, right?</p>\n<p>Also ennreal should work, right?  <code>x * ∞ = ∞</code> for any <code>x</code>, implies non-cancellative.  However, <code>mul_eq_zero</code> should work for ennreal.</p>",
        "id": 284228095,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653741937
    },
    {
        "content": "<p>I guess I will just create a class <code>is_cancellative</code> with some basic instances, it seems the easiest thing to do.</p>",
        "id": 284271388,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653810195
    },
    {
        "content": "<p>I was running into a similar issue with semigroups (unless I missing something), are you planning on also adding left/right variants?</p>",
        "id": 284283834,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1653827449
    },
    {
        "content": "<p>I don't know, but I will surely be slow, so if you are interested in doing it please go ahead.</p>",
        "id": 284283940,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653827605
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib/pull/17440\">#17440</a> as a start. It defined <code>is_left_cancellative_semigroup</code>, <code>is_right_cancellative_semigroup</code>, <code>is_left_cancellative_monoid</code>, <code>is_right_cancellative_monoid</code>, <code>is_cancellative_monoid</code> and it provides some basic instances.</p>",
        "id": 308649839,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1667932825
    }
]