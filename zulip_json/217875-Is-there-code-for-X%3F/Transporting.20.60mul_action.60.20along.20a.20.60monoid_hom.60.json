[
    {
        "content": "<p>Do we have this definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If `M` has an `R`-action, then it has an `R'`-action through `f` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">monoid_hom.transport_mul_action</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R'</span> <span class=\"bp\">→*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231975342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616769513
    },
    {
        "content": "<p>Or these two from the same family?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monoid_hom.transport_distrib_mul_action</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R'</span> <span class=\"bp\">→*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"n\">f.transport_mul_action</span> <span class=\"n\">M</span> <span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ring_hom.transport_semimodule</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R'</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">semimodule</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span><span class=\"n\">f.to_monoid_hom.transport_distrib_mul_action</span> <span class=\"n\">M</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231979725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616771016
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6895\">#6895</a>, this generalizes <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars.semimodule\">docs#restrict_scalars.semimodule</a>, and I think we don't have it yet.</p>",
        "id": 231992090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616775387
    },
    {
        "content": "<p>Whoops, we had this already as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.comp_hom\">docs#mul_action.comp_hom</a></p>",
        "id": 232246453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617013516
    },
    {
        "content": "<p>We really need to get that algebraic hierarchy build up and running</p>",
        "id": 232246642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617013634
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Duplicate.20mul_action.20defs/near/232246589\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Duplicate.20mul_action.20defs/near/232246589</a> for voting on the better name</p>",
        "id": 232246683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617013670
    }
]