[
    {
        "content": "<p>Is there something equivalent to <code>right_inverse_of_injective</code> in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">right_inverse_of_injective</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n        <span class=\"k\">then</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span>\n        <span class=\"k\">else</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">ha</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204943155,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1595611533
    },
    {
        "content": "<p><code>left_inverse_inv_fun</code></p>",
        "id": 204943909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595611856
    },
    {
        "content": "<p>or even <code>injective.has_left_inverse</code></p>",
        "id": 204944371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595612051
    }
]