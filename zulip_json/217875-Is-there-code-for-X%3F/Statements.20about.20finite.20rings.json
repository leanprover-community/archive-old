[
    {
        "content": "<p>I am unable to find the following statements in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prime_dvd_char_iff_dvd_card</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char_ne_zero_of_finite</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(I guess <code>[ring R]</code> would be enough.)<br>\nDid I overlook something? Are there easy proofs using what is available?</p>",
        "id": 284298846,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653848915
    },
    {
        "content": "<p>Here is a proof of the second one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">char_ne_zero_of_finite</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">eq.mp</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">char_p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ring_char.char_p</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.char_p_to_char_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_injective_infinite_fintype</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">nat.cast_injective</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284299685,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653850090
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14454\">#14454</a> for <code>char_ne_zero_of_finite</code></p>",
        "id": 284300924,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653851592
    },
    {
        "content": "<p>For <code>ring</code>s, there is <code>char_p.char_ne_zero_of_fintype</code>, so one has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">char_ne_zero_of_finite'</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">char_p.char_ne_zero_of_fintype</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 284301210,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653852049
    },
    {
        "content": "<p>OK, the proof of <code>char_p.char_ne_zero_of_fintype</code> also works for <code>[non_assoc_ring R]</code>. I'll add this (and the simpler proof) to the PR.</p>",
        "id": 284301281,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653852150
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_zero.infinite\">docs#char_zero.infinite</a> should be close to the second one.</p>",
        "id": 284303474,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653855537
    },
    {
        "content": "<p>Yes; the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.char_ne_zero_of_fintype\">docs#char_p.char_ne_zero_of_fintype</a> is more or less (and up to fiddling with <code>char_zero</code> vs. <code>char_p _ 0</code>) the same as that of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_zero.infinite\">docs#char_zero.infinite</a>.</p>",
        "id": 284303796,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653856035
    },
    {
        "content": "<p>Using <code>exists_prime_add_order_of_dvd_card</code> of <a href=\"https://github.com/leanprover-community/mathlib/pull/14471\">#14471</a>, I have now completed the proofs I needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.cycle.type</span>\n\n<span class=\"c1\">-- still with `equiv.perm.` prefix to make it work with current mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_prime_add_order_of_dvd_card</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">add_order_of</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">equiv.perm.exists_prime_order_of_dvd_card</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hdvd</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_unit_iff_not_dvd_char</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hch</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.cast_eq_zero</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">is_unit.exists_left_inv</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.prime.not_dvd_one</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span>\n             <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">mul_left_cancel₀</span> <span class=\"o\">(</span><span class=\"n\">char_p.char_ne_zero_of_fintype</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"n\">hq</span><span class=\"o\">⟩,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">char_p.int_cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">hch</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₄</span> <span class=\"n\">h₃</span> <span class=\"n\">hq.symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">nat.is_coprime_iff_coprime.mpr</span> <span class=\"o\">((</span><span class=\"n\">nat.prime.coprime_iff_not_dvd</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hch</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_unit_of_mul_eq_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prime_dvd_char_iff_dvd_card</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat.dvd_trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_dvd.mp</span> <span class=\"o\">((</span><span class=\"n\">char_p.int_cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">char_p.cast_card_eq_zero</span> <span class=\"n\">R</span><span class=\"o\">))),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">exists_prime_add_order_of_dvd_card</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hr₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:=</span> <span class=\"n\">add_order_of_nsmul_eq_zero</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">is_unit.exists_left_inv</span> <span class=\"o\">((</span><span class=\"n\">is_unit_iff_not_dvd_char</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h₀</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hr₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr₁</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mt</span> <span class=\"n\">add_monoid.order_of_eq_one_iff.mpr</span>\n                 <span class=\"o\">(</span><span class=\"n\">ne_of_eq_of_ne</span> <span class=\"n\">hr</span> <span class=\"o\">(</span><span class=\"n\">nat.prime.ne_one</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)))</span> <span class=\"n\">hr₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_is_unit_prime_of_dvd_card</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">is_unit_iff_not_dvd_char</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">not_not.mpr</span> <span class=\"o\">((</span><span class=\"n\">prime_dvd_char_iff_dvd_card</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 284405160,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653943373
    },
    {
        "content": "<p>I'm going to add these to the auxiliary results in my working version of the Legendre symbol code, unless people want me to add this to mathlib now.</p>",
        "id": 284405367,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653943601
    },
    {
        "content": "<p>Nice! What are your long term goals here?</p>",
        "id": 284416712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653957982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> short-term I want the last statment for use in a proof related to Gauss sums.<br>\nA little bit longer-term, this will be part of the Gauss sum proof of Quadratic Reciprocity (and the supplementary law for 2), by which I want to replace the combinatorial proof that is currently in mathlib (which seems to be a bit inefficient; also, the Gauss sum proof gives a more general statement for quadratic characters).</p>",
        "id": 284498624,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654012864
    },
    {
        "content": "<p>Cubic and quartic reciprocity would be really cool to have; one could follow the approach in Ireland-Rosen.</p>",
        "id": 284540459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654033081
    },
    {
        "content": "<p>Yes, but what I <em>really</em> want to do is get the product formula for the Hilbert symbol into mathlib.</p>",
        "id": 284628478,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654097637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm planning to run a seminar on formalising results from number theory during the next winter semester here. This could be an opportunity to make some progress in this direction. I'll probably contact you at some point to get advice on how to do it.</p>",
        "id": 284628674,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654097738
    },
    {
        "content": "<p>Sure! Your students would be welcome to use my Discord. They will probably have a course whatsapp group or discord anyway, and they may as well use mine because there will be more experts in it.</p>",
        "id": 284631978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654099189
    }
]