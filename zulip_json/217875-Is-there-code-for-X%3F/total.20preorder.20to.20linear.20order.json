[
    {
        "content": "<p>Does mathlib contain anything like a proof of the following? (I am interested in the finite case, which can be done by induction, but it presumably holds in general). </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">total_preorder_to_linear_order</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_total_preorder</span> <span class=\"n\">β</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_linear_order</span> <span class=\"n\">β</span> <span class=\"n\">r'</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r'</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 233822974,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617975890
    },
    {
        "content": "<p>On a related note, would it make sense for <code>total_preorder</code> to be a class? It arises naturally as an order lift of a linear order.</p>",
        "id": 233827921,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617977665
    },
    {
        "content": "<p>Perhaps I'm missing something, but I don't think this works, since there could be elements <code>x</code> and <code>y</code> in <code>β</code> which are related both ways but aren't equal - ie <code>r'</code> won't be antisymmetric</p>",
        "id": 233869583,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617992947
    },
    {
        "content": "<p>If you want an extension of a partial order to a linear order I have code for that lying around somewhere which I can PR</p>",
        "id": 233869676,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617992991
    },
    {
        "content": "<p>ah, you're right. I do still want a preorder though - I suppose I mean that if x &lt; y then x &lt;' y (where &lt; is the preorder and &lt;' is the linear order). What I'm thinking about is sorting a set by the value of some function to a linear order (hence giving a total preorder) with ties being broken arbitrarily. This is a bit annoying to express in terms of the unbundled order typeclasses, though.</p>",
        "id": 233870848,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617993527
    },
    {
        "content": "<p>You can convert a preorder to a partial order by taking quotients by the relation r x y or r y x, and then make that into a linear order... Does that work for your use case?</p>",
        "id": 233870972,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617993592
    },
    {
        "content": "<p>I suppose it doesn't, it's different from your notion of breaking ties arbitrarily</p>",
        "id": 233871129,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617993655
    },
    {
        "content": "<p>The case where every pair is comparable both ways in the preorder is asking for a linear order on an arbitrary type - i.e. a weak version of the well-ordering principle. I can't see this anywhere in mathlib, though.</p>",
        "id": 233871356,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617993748
    },
    {
        "content": "<p>I think it might be with Zorn's lemma if anywhere?</p>",
        "id": 233871967,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617994009
    },
    {
        "content": "<p>If not, I have a branch which upgrades any partial order to a linear order, in particular the empty partial order, which also gives a linear order on any type</p>",
        "id": 233872042,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617994045
    },
    {
        "content": "<p>I don't see this in an obvious way in <code>order.zorn</code>. If you could link to the branch, that'd be great!</p>",
        "id": 233875773,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617995525
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7142\">#7142</a></p>",
        "id": 233878815,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617996909
    },
    {
        "content": "<p>I'm not finding the well-ordering principle in mathlib anywhere either...</p>",
        "id": 233880098,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617997475
    },
    {
        "content": "<p>Found it! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_ordering_rel\">docs#well_ordering_rel</a></p>",
        "id": 233883106,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617998793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/total.20preorder.20to.20linear.20order/near/233870848\">said</a>:</p>\n<blockquote>\n<p>ah, you're right. I do still want a preorder though - I suppose I mean that if x &lt; y then x &lt;' y (where &lt; is the preorder and &lt;' is the linear order). What I'm thinking about is sorting a set by the value of some function to a linear order (hence giving a total preorder) with ties being broken arbitrarily. This is a bit annoying to express in terms of the unbundled order typeclasses, though.</p>\n</blockquote>\n<p>If I'm understanding correctly, you want an extension of an <code>is_strict_total_order</code> from an <code>is_strict_weak_order</code>?</p>",
        "id": 233883956,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617999202
    },
    {
        "content": "<p>Specifically where the strict_weak_order comes from something like <code>is_strict_weak_order_of_is_total_preorder</code></p>",
        "id": 233884008,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617999238
    },
    {
        "content": "<p>That looks right, yes</p>",
        "id": 233887784,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1618001224
    },
    {
        "content": "<p>It looks like this is easy to do, with the heavy lifting done by your extension lemma.</p>",
        "id": 233888142,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1618001408
    }
]