[
    {
        "content": "<p>Is there anything like that somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_pow_of_log_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_exp_of_log_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">real.log</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">real.exp</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I need <code>le_pow_of_log_le</code></p>",
        "id": 241532365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622812252
    },
    {
        "content": "<p>Does monotonicity of <code>exp</code> get you the second one?</p>",
        "id": 241532789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812494
    },
    {
        "content": "<p><code>have := real.exp_monotone h</code> followed by <code>rw real.exp_log ha at this</code> or something</p>",
        "id": 241533061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812655
    },
    {
        "content": "<p>Yeah, I think that works. Do you think such lemmas are worth having?</p>",
        "id": 241533235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622812742
    },
    {
        "content": "<p>Is the second one true as an <code>iff</code>?</p>",
        "id": 241533287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812771
    },
    {
        "content": "<p>So they are a Galois connection I guess</p>",
        "id": 241534373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622813239
    },
    {
        "content": "<p>Except conditional on <code>a</code> being positive</p>",
        "id": 241534397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622813251
    },
    {
        "content": "<p>I think this lemma is worth having:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">log_le_iff_le_exp</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">real.log</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">real.exp</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">real.exp_log</span> <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">real.exp_monotone</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">real.exp_le_exp.mp</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">real.exp_log</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 241534426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622813264
    },
    {
        "content": "<p>right, they're a galois connection between pos_real and real</p>",
        "id": 241534436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622813270
    },
    {
        "content": "<p>In fact they're simply an order isomorphism between pos_real and real, this is what should be proved</p>",
        "id": 241534497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622813287
    },
    {
        "content": "<p>I suspect we have that</p>",
        "id": 241534512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622813298
    },
    {
        "content": "<p>well then this is a consequence</p>",
        "id": 241534529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622813310
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp_order_iso\">docs#real.exp_order_iso</a></p>",
        "id": 241534558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622813327
    },
    {
        "content": "<p>Yes, but it's a consequence that probably has awkard coe debris to clean up</p>",
        "id": 241534575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622813342
    },
    {
        "content": "<p>Maybe there's still an easier proof using that lemma though</p>",
        "id": 241534741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622813407
    },
    {
        "content": "<p>I mean, real.log is defined using the order iso</p>",
        "id": 241534802,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622813437
    },
    {
        "content": "<p>I think your first lemma is false?</p>",
        "id": 241535750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622813885
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_pow_of_log_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.log_le_log</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">real.rpow_pos_of_pos</span> <span class=\"n\">hb</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">real.log_rpow</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_inv_le_iff</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- 0 &lt; real.log b</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241535769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622813893
    },
    {
        "content": "<p>If a=b=1/2 and c=2 then h is true and the conclusion isn't.</p>",
        "id": 241536651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622814310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/rpow.20log.20exp.20inequalities/near/241534558\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp_order_iso\">docs#real.exp_order_iso</a></p>\n</blockquote>\n<p>I tried using this a while back and it was hellish</p>",
        "id": 241538265,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622814983
    },
    {
        "content": "<p>Ah yes, we need  1 &lt; b to divide out the logs properly.</p>",
        "id": 241540889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622815962
    }
]