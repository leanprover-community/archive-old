[
    {
        "content": "<p>I think I get how to form an generated ideal (mathlib calls them span). I can't seem to lift them to sets in the way I have previously done for general ideals. Any ideas where I am going wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ideal.span</span> <span class=\"n\">int</span> <span class=\"n\">_</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">ideal.span</span> <span class=\"n\">int</span> <span class=\"n\">_</span> <span class=\"o\">{</span><span class=\"mi\">4</span><span class=\"o\">}</span>  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313821584,
        "sender_full_name": "Ben",
        "timestamp": 1670166660
    },
    {
        "content": "<p>Your statement doesn't make sense; it says \"let I be a member of <code>ideal.span ({2} : set int)</code>\" (i.e. an integer), then it tries to turn it into a set of integers</p>",
        "id": 313822298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670167036
    },
    {
        "content": "<p>I assume you meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">{</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">ideal.add_eq_sup</span><span class=\"o\">,</span> <span class=\"n\">sup_idem</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- looks false to me!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313822483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670167132
    },
    {
        "content": "<p>Probably <code>ideal.span {2} * ideal.span {2} = ideal.span {4}</code> is true. It wouldn't surprise me if <code>2 * I</code> is being interpreted as <code>I + I</code> which is of course <code>I</code> again.</p>",
        "id": 313822878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670167393
    },
    {
        "content": "<p>Here's how to enable the instance you need so that you can write something similar to what you wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule.pointwise</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">{</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">submodule.map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">erw</span> <span class=\"n\">submodule.map_span</span><span class=\"o\">,</span>  <span class=\"c1\">-- this line and the one above combined are a missing lemma</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.image_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313823327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670167648
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib/pull/17814\">#17814</a> with some of the missing lemmas</p>",
        "id": 313826590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670169435
    },
    {
        "content": "<p>Ah I see because <code>ideal R</code> is a type, <code>ideal</code> is type constructor. Whereas <code>ideal.span</code> generates a specific ideal (not a general one).</p>",
        "id": 313828862,
        "sender_full_name": "Ben",
        "timestamp": 1670170541
    },
    {
        "content": "<p>The full statement I am trying to prove here is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">4</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)):</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">J</span> <span class=\"bp\">≠</span> <span class=\"n\">I</span> <span class=\"bp\">∩</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 313830079,
        "sender_full_name": "Ben",
        "timestamp": 1670171210
    },
    {
        "content": "<p>That's false, because <code>I := I_val</code> does not mean what you think it means</p>",
        "id": 313830351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670171362
    },
    {
        "content": "<p>It means \"if the user doesn't specify the ideal <code>I</code>, use <code>I_val</code>\", not \"<code>I</code> is always equal to <code>I_val</code>\"</p>",
        "id": 313830399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670171389
    },
    {
        "content": "<p>You probably meant <code>(I) (hI : I = ideal.span ({2}: set int))</code></p>",
        "id": 313830592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670171444
    },
    {
        "content": "<p>Ah I didn't realise it could specified by a <em>caller/user</em>. <br>\nI did try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">4</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">J</span> <span class=\"bp\">≠</span> <span class=\"n\">I</span> <span class=\"bp\">∩</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But it doesn't like <code>(I: set int)</code> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 313830869,
        "sender_full_name": "Ben",
        "timestamp": 1670171615
    },
    {
        "content": "<p>What does the error message say?</p>",
        "id": 313832900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670172761
    },
    {
        "content": "<p><code>invalid type ascription, term has type ideal R but is expected to have type set ℤ</code>. Ah wait was because I already had a <code>variable (I: ideal R)</code> in scope... Lean doesn't seem to mind things with the same name in the scope</p>",
        "id": 313833478,
        "sender_full_name": "Ben",
        "timestamp": 1670173116
    },
    {
        "content": "<p>Coming back to this, I managed to prove my final statement. However wanted to tidy some stuff up and getting a <code>(deterministic) timeout</code> here. What am I doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">4</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"mi\">8</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">ideal.prod_span_singleton</span> <span class=\"n\">int</span> <span class=\"n\">int.comm_semiring</span> <span class=\"n\">int</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}:</span> <span class=\"n\">finset</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313842944,
        "sender_full_name": "Ben",
        "timestamp": 1670178572
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 313845046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670179874
    },
    {
        "content": "<p>One thing you're doing wrong is using <code>@</code>. The whole point of implicit arguments is that lean is supposed to handle them itself, for normal usage you're not expected to need <code>@</code>.</p>",
        "id": 313845157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670179958
    },
    {
        "content": "<p>I think the LHS of <code>@ideal.prod_span_singleton ...</code> reduces to something like <code>1 * span {2} * span {4}</code>, so it's not defeq to <code>I * J</code>.</p>",
        "id": 313847887,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670181794
    },
    {
        "content": "<p>You want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.span_singleton_mul_span_singleton\">docs#ideal.span_singleton_mul_span_singleton</a></p>",
        "id": 313847923,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670181829
    },
    {
        "content": "<p>BTW, no need to <code>rw [I, J]</code>.</p>",
        "id": 313847998,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670181859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Represent.20a.20ideal.20generated.20by.20an.20integer/near/313847923\">said</a>:</p>\n<blockquote>\n<p>You want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.span_singleton_mul_span_singleton\">docs#ideal.span_singleton_mul_span_singleton</a></p>\n</blockquote>\n<p>Ah this is the one I was looking for, don't know how I missed it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 313852988,
        "sender_full_name": "Ben",
        "timestamp": 1670185570
    },
    {
        "content": "<p>Is there a <code>ideal.mul_coe</code>? looking for something that equates pointwise set multiplication being the same as multiplication of ideals</p>",
        "id": 313853434,
        "sender_full_name": "Ben",
        "timestamp": 1670185905
    },
    {
        "content": "<p>Pointwise set multiplication of ideals is not in general the same as multiplication of ideals (it is, of course, when the ideals are principal). The product <code>I * J</code> is the ideal <em>generated</em> by the pointwise product (the latter need not be an ideal).</p>",
        "id": 313853608,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670186044
    },
    {
        "content": "<p>Ah yes, is there a proof of that for principal ideals? I am unfortunately in set land as ideals don't have intersection or equality</p>",
        "id": 313945408,
        "sender_full_name": "Ben",
        "timestamp": 1670240948
    },
    {
        "content": "<p>What do you mean by \"ideals don't have intersection or equality\"??</p>",
        "id": 313945696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670241051
    },
    {
        "content": "<p>Okay just realised equality works. But the following fails in Lean with <code>failed to synthesize type class instance for has_inter (ideal R)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">∩</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">∩</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 313947819,
        "sender_full_name": "Ben",
        "timestamp": 1670241854
    },
    {
        "content": "<p>I think you need <code>⊓</code> notation instead of <code>∩</code> notation. The <code>∩</code> symbol is pretty much just used for sets in mathlib, while <code>⊓</code> is used in other (semi)lattices.</p>",
        "id": 313948107,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670241961
    },
    {
        "content": "<p>Then your example is proved by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_comm\">docs#inf_comm</a>.</p>",
        "id": 313948244,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670241990
    },
    {
        "content": "<p>Ah yes just found that symbol while looking at the <code>set.has_inter</code>!</p>",
        "id": 313948924,
        "sender_full_name": "Ben",
        "timestamp": 1670242213
    },
    {
        "content": "<p>Huh the<code>inf</code> refers to infimum, only seen that use to refer to the greatest lower bound of a set, how does that relate to here</p>",
        "id": 313948954,
        "sender_full_name": "Ben",
        "timestamp": 1670242227
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_inf\">docs#has_inf</a> should explain that</p>",
        "id": 313949575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670242352
    },
    {
        "content": "<p>... but it does not. It stands for <code>inf</code>imum</p>",
        "id": 313949612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670242366
    },
    {
        "content": "<p>It's the infimum in a lattice. Set intersection is an example of an infimum. The infima of two elements of a linear order is also an example of the infimum, i.e. the usual <code>inf</code> operator.</p>",
        "id": 313949703,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670242404
    },
    {
        "content": "<p>If you want the greatest lower bound of a set of things in a linear order, for example, consider <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_linear_order.Inf\">docs#complete_linear_order.Inf</a>.</p>",
        "id": 313949824,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670242442
    },
    {
        "content": "<p>For more information, look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lattice\">docs#lattice</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice\">docs#complete_lattice</a>.</p>",
        "id": 313949903,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670242459
    },
    {
        "content": "<p>If <code>I</code> and <code>J</code> are ideals then <code>I ⊓ J</code>, the largest ideal which is contained in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>,  is what a mathematician would call <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>∩</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">I\\cap J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> and <code>I ⊔ J</code>, the smallest ideal containing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>, is what a mathematician would call <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>+</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">I+J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>.</p>",
        "id": 313952337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670243370
    }
]