[
    {
        "content": "<p>I haven't worked with sigma-types before.  How do I rewrite a fact by an equality in the type?  Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩)</span>  <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">⟨</span><span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 260538849,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636236326
    },
    {
        "content": "<p><code>subst hi</code>?</p>",
        "id": 260538929,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636236391
    },
    {
        "content": "<p>Aha!  Thank you!</p>",
        "id": 260538947,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636236413
    },
    {
        "content": "<p>This only works if <code>i</code> or <code>i'</code> is a variable, not an expression.</p>",
        "id": 260538957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636236436
    },
    {
        "content": "<p>It works in my use case, anyway.</p>",
        "id": 260539076,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636236592
    },
    {
        "content": "<p><code>cases hi</code> is sometimes useful, too.</p>",
        "id": 260539745,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636237509
    },
    {
        "content": "<p>nice trick! (spoiler alert: turns <code>i = i'</code> into <code>i = i</code>)</p>",
        "id": 260541060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636239547
    },
    {
        "content": "<p>In fact is this how <code>subst</code> works? I always imagined it would be super-complicated!</p>",
        "id": 260541140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636239615
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">guard</span> <span class=\"n\">h.is_local_constant</span><span class=\"o\">,</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">expr.is_heq</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">is_def_eq</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n    <span class=\"n\">new_h_type</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">],</span>\n    <span class=\"n\">new_h_pr</span>   <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq_of_heq</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">new_h</span> <span class=\"bp\">←</span> <span class=\"n\">assertv</span> <span class=\"n\">h.local_pp_name</span> <span class=\"n\">new_h_type</span> <span class=\"n\">new_h_pr</span><span class=\"o\">,</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">subst_core</span> <span class=\"n\">new_h</span><span class=\"o\">)</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">subst_core</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>(this is <code>tactic.subst</code>, what <code>tactic.interactive.subst</code> uses). It's at this point I wish I understood meta stuff :-/</p>",
        "id": 260541208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636239686
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#subst\">tactic#subst</a> can also often be replaced with a pattern-match, in this case by moving <code>i i' h</code> right of the colon and matching on <code>_ _ rfl</code></p>",
        "id": 260541341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636239880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/equality.20in.20sigma-types/near/260541140\">said</a>:</p>\n<blockquote>\n<p>In fact is this how <code>subst</code> works? I always imagined it would be super-complicated!</p>\n</blockquote>\n<p>I had the same question, and I got as far as finding it ends up being written in C++, which these <code>meta constant</code>s all are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Given a local constant t, if t has type (lhs = rhs) apply substitution.</span>\n<span class=\"cm\">   Otherwise, try to find a local constant that has type of the form (t = t') or (t' = t).</span>\n<span class=\"cm\">   The tactic fails if the given expression is not a local constant. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">constant</span> <span class=\"n\">subst_core</span>     <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n</code></pre></div>",
        "id": 260541711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636240462
    },
    {
        "content": "<p>lol <a href=\"https://github.com/leanprover-community/lean/issues/646\">lean#646</a></p>",
        "id": 260541920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636240644
    },
    {
        "content": "<p>So where can we see the actual definition <code>subst_core</code> in the repo? I've never gone this deep before.</p>",
        "id": 260542041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636240810
    },
    {
        "content": "<p>found it, thanks git grep -- it's presumably <a href=\"https://github.com/leanprover-community/lean/blob/63dc257c30d0a71f91c1e706e447256f53139be7/src/library/tactic/subst_tactic.cpp#L124\">this</a></p>",
        "id": 260542065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636240864
    },
    {
        "content": "<p>actually judging by <a href=\"https://github.com/leanprover-community/lean/blob/63dc257c30d0a71f91c1e706e447256f53139be7/src/library/tactic/subst_tactic.cpp#L187\">this</a> it's actually <a href=\"https://github.com/leanprover-community/lean/blob/63dc257c30d0a71f91c1e706e447256f53139be7/src/library/tactic/subst_tactic.cpp#L136\">this</a>?</p>",
        "id": 260542186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636241083
    },
    {
        "content": "<p>right so i <em>think</em> it's a C++ program which literally recurses into the expression and replaces one term by the other? Is this part of the fabled \"kernel\" I've heard so much about? Or are we not there yet?</p>",
        "id": 260542269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636241242
    },
    {
        "content": "<p>This is the elaborator -- there are things like <code>mk_eq_drec</code> to create the rewrites that show up in the proof term that the tactic proof creates. This all gets shipped off to the kernel to do a final check that everything was created correctly.</p>",
        "id": 260542407,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636241512
    },
    {
        "content": "<p>(I'm not actually sure how to classify which part of Lean this is, other than we're not at the kernel yet.  This is specifically some C++ code implementing a tactic, and I think in principle it could be written in Lean.)</p>",
        "id": 260542510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636241701
    },
    {
        "content": "<p>And indeed is written <a href=\"https://github.com/leanprover/lean4/blob/master/stage0/src/Lean/Meta/Tactic/Subst.lean#L122\">in Lean</a> in Lean 4.</p>",
        "id": 260542888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636242322
    }
]