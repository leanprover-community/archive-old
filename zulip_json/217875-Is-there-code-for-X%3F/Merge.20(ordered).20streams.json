[
    {
        "content": "<p>Is there a way to use what's in <code>data.stream</code> to merge two ordered streams into an ordered stream? I'm guessing that if so, it uses <code>stream.corec_on</code> but I'm not quite sure how it would be done</p>",
        "id": 270412894,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1643819209
    },
    {
        "content": "<p>E.g.  merging</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"bp\">....</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>results in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"bp\">....</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 270413154,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1643819294
    },
    {
        "content": "<p>Here's a fun (monadic) way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">corec_state</span> <span class=\"o\">((</span><span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">c.head</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d.head</span> <span class=\"k\">then</span>\n      <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">c.tail</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span>\n      <span class=\"n\">return</span> <span class=\"n\">c.head</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d.tail</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span>\n      <span class=\"n\">return</span> <span class=\"n\">d.head</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"bp\">++ₛ</span><span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">8</span><span class=\"o\">))</span>\n             <span class=\"o\">([</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"bp\">++ₛ</span> <span class=\"n\">const</span> <span class=\"mi\">8</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">take</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 270424297,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643822850
    },
    {
        "content": "<p>Ah, interesting! Thanks for sharing, Alex</p>",
        "id": 270425789,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1643823350
    },
    {
        "content": "<p>Note that streams are highly computationally ineffective.</p>",
        "id": 270426642,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643823609
    }
]