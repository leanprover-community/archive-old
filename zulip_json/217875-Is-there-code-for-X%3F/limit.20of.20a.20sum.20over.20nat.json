[
    {
        "content": "<p>I'm knocking up a quick implementation of binary expansions for LTE. I'm hoping that what we have about infinite sums already makes this easy but I don't immediately see how to do it cleanly (a version with reals instead of non-negative reals would also be fine):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span> <span class=\"c1\">-- [0,∞)</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span> <span class=\"c1\">-- infinite sums</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"c1\">-- notation ℝ≥0 for [0,∞)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"c1\">-- notation ∑ for finite sums</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"c1\">-- for finset.range</span>\n\n<span class=\"c1\">-- let a₀ a₁ a₂... be a sequence of non-negative reals and let r be a non-negative real</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Suppose the finite sums of the aᵢ are bounded above by r</span>\n  <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- and get arbitrarily close to r.</span>\n  <span class=\"o\">(</span><span class=\"n\">hge</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- Then r is the sum.</span>\n<span class=\"n\">has_sum</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 281006515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651581567
    },
    {
        "content": "<p>how about using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal.has_sum_iff_tendsto_nat\">docs#nnreal.has_sum_iff_tendsto_nat</a>? There's still a bit of work involved, but I don't think it would be too bad.</p>",
        "id": 281008111,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651582447
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum_iff_tendsto_nat_of_nonneg\">docs#has_sum_iff_tendsto_nat_of_nonneg</a> for the real version with a nonnegativity hypothesis instead.</p>",
        "id": 281008681,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651582701
    },
    {
        "content": "<p>Another approach would be to go into <code>ennreal</code> directly, where you can use easy comparison results. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.sum_le_tsum\">docs#ennreal.sum_le_tsum</a> would allow you to use <code>hge</code> to get <code>ε + ∑' n, (a n : ℝ≥0∞)  &gt; ↑r</code> for all <code>ε &gt; 0</code>, from which <code>∑' n, (a n : ℝ≥0∞) ≥ ↑r</code> follows via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_forall_pos_le_add\">docs#le_of_forall_pos_le_add</a>. You could then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal.tsum_le_of_sum_range_le\">docs#nnreal.tsum_le_of_sum_range_le</a> to get the other inequality (with some coercions), and then finally <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal.tsum_eq_to_nnreal_tsum\">docs#nnreal.tsum_eq_to_nnreal_tsum</a> to glue it back to <code>nnreal</code>.</p>",
        "id": 281011231,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651583891
    },
    {
        "content": "<p>ha ha it was using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable.has_sum_iff_tendsto_nat\">docs#summable.has_sum_iff_tendsto_nat</a> which I think is essentially the same as <code>nnreal.has_sum_iff_tendsto_nat</code>, and then struggling a bit more, which was what prompted me to ask :-) Maybe you're right and <code>ennreal</code> is easier. Thanks!</p>",
        "id": 281014392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651585404
    },
    {
        "content": "<p>I'm not sure <code>ennreal</code> is tons easier. I feel like we're probably missing a lemma here.</p>",
        "id": 281014763,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651585545
    },
    {
        "content": "<p>Also, someone probably knows the <code>tsum</code> library way better than me <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 281016783,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651586399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> in case you want it, not golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span> <span class=\"c1\">-- [0,∞)</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span> <span class=\"c1\">-- infinite sums</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"c1\">-- notation ℝ≥0 for [0,∞)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"c1\">-- notation ∑ for finite sums</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"c1\">-- for finset.range</span>\n\n<span class=\"c1\">-- let a₀ a₁ a₂... be a sequence of non-negative reals and let r be a non-negative real</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Suppose the finite sums of the aᵢ are bounded above by r</span>\n  <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- and get arbitrarily close to r.</span>\n  <span class=\"o\">(</span><span class=\"n\">hge</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- Then r is the sum.</span>\n<span class=\"n\">has_sum</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nnreal.has_sum_iff_tendsto_nat</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric.tendsto_nhds</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">ε</span> <span class=\"n\">to</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">using</span> <span class=\"n\">hε.lt.le</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hge</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.eventually_at_top</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nnreal.dist_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">abs_lt.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_sub_iff_add_lt'</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">sub_lt_iff_lt_add'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat.add_sub_of_le</span> <span class=\"n\">hN</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"n\">finset.sum_range_add</span><span class=\"o\">,</span> <span class=\"n\">nnreal.coe_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hB</span> <span class=\"o\">(</span><span class=\"n\">le_add_of_nonneg_right</span> <span class=\"n\">nnreal.zero_le_coe</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sub_lt_iff_lt_add</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_add_of_pos_left</span> <span class=\"n\">r</span> <span class=\"n\">hε</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281023341,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651588920
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 281023774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651589086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Here's the one via <code>ℝ≥0∞</code>. I think this is more the way a mathematician would think about it, and it's shorter. I was having trouble finding <code>ennreal.tsum_eq_supr_sum</code> before.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Suppose the finite sums of the aᵢ are bounded above by r</span>\n  <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- and get arbitrarily close to r.</span>\n  <span class=\"o\">(</span><span class=\"n\">hge</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- Then r is the sum.</span>\n<span class=\"n\">has_sum</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">ennreal.has_sum_coe</span><span class=\"o\">,</span> <span class=\"c1\">-- nnreal sums to an nnreal iff ennreal does</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ennreal.has_sum</span><span class=\"o\">,</span> <span class=\"c1\">-- ennreal has a sum which is the supremum over finite sums</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ennreal.tsum_eq_supr_sum</span><span class=\"o\">,</span> <span class=\"n\">ennreal.tsum_eq_supr_nat</span><span class=\"o\">],</span> <span class=\"c1\">-- the supremum over finite sums is the supremum over all partial sums</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">ennreal.le_of_forall_pos_le_add</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">supr_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hle</span><span class=\"o\">)),</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hge</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">ennreal.coe_mono</span> <span class=\"n\">hB.lt.le</span>\n  <span class=\"bp\">...</span>             <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">le_supr</span> <span class=\"n\">_</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281030596,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651591789
    }
]