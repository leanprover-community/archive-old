[
    {
        "content": "<p>We have the arrow category. Do we also have the following construction? Let <code>C</code> be a category. Then build a new category whose objects are pairs <code>(X, f)</code>, where <code>X : C</code> and <code>f : X ⟶ X</code>.<br>\nFor <code>C = Module R</code> this construction spits out <code>Module (polynomial R)</code> (up to canonical equivalence).</p>",
        "id": 256472743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633549629
    },
    {
        "content": "<p>This is <a href=\"https://mathoverflow.net/q/149007/23872\">https://mathoverflow.net/q/149007/23872</a> right? Not that it answers your question <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 256475358,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633550631
    },
    {
        "content": "<p>No, we don't have it.</p>",
        "id": 256475642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633550735
    },
    {
        "content": "<p>I did have the Karoubi envelope / idempotent completion (the same, but with f^2 = f), but I don't think it ever made it to mathlib.</p>",
        "id": 256475909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633550839
    },
    {
        "content": "<p>Can't you do something like <code>functor.category single_obj \\N C</code>?</p>",
        "id": 256479290,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1633552286
    },
    {
        "content": "<p>Looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.single_obj\">docs#category_theory.single_obj</a> now, it looks like we're missing some construction like <code>single_obj.lift</code> of the following form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.single_obj</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">category_theory.single_obj.lift</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">End</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">single_obj</span> <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f.map_one</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f.map_mul</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 256486043,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633554871
    },
    {
        "content": "<p>If we combine that with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_monoid.lift\">docs#free_monoid.lift</a> then that already get fairly close to what <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is looking for, I think.</p>",
        "id": 256486306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633554997
    }
]