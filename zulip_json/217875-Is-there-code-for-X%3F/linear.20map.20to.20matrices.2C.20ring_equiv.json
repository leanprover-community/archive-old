[
    {
        "content": "<p>Do we have this? Should we?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span> <span class=\"n\">set</span> <span class=\"n\">linear_map</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Linear maps `(n → R) →ₗ[R] (n → R)` are ring-equivalent to `matrix n n R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix''</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">≃+*</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_matrix'</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_lin'</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">to_lin'_to_matrix'</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">to_matrix'_to_lin'</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">to_matrix'_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_equiv.map_add'</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228249649,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614612536
    },
    {
        "content": "<p>Do we have the R-algebra structure on square matrices sending <code>r</code> to <code>r \\smul I</code>? (which would make that an alg_equiv)</p>",
        "id": 228250123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614612702
    },
    {
        "content": "<p>We do have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">matrix_algebra</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.scalar</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">smul_def'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.scalar</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">matrix.scalar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228251330,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614613135
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix_algebra\">docs#matrix_algebra</a></p>",
        "id": 228252292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614613497
    },
    {
        "content": "<p>Do we also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.algebra\">docs#linear_map.algebra</a>?</p>",
        "id": 228252367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614613523
    },
    {
        "content": "<p>What do you want <code>linear_map.algebra</code> to do?</p>",
        "id": 228252586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614613588
    },
    {
        "content": "<p>So this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">matrix.algebra_map_eq_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- Linear maps `(n → R) →ₗ[R] (n → R)` are ring-equivalent to `matrix n n R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix''a</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_matrix'</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_lin'</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">to_lin'_to_matrix'</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">to_matrix'_to_lin'</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">to_matrix'_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_equiv.map_add'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">matrix.algebra_map_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">module.algebra_map_End_apply</span><span class=\"o\">,</span>\n               <span class=\"n\">to_matrix'_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228252760,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614613663
    },
    {
        "content": "<p>Not sure how these should all be named.</p>",
        "id": 228252830,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614613687
    },
    {
        "content": "<p>Ah, it's <del>probably</del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.endomorphism_algebra\">docs#module.endomorphism_algebra</a> <del>or something</del></p>",
        "id": 228253960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614614079
    },
    {
        "content": "<p>Relatedly, do we have the <code>to_monoid_hom</code> versions of this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_ring_hom_comp_symm_to_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">e.to_ring_hom.comp</span> <span class=\"n\">e.symm.to_ring_hom</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228254145,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614614145
    },
    {
        "content": "<p>Probably not</p>",
        "id": 228254332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614614201
    },
    {
        "content": "<p>But it might be written in terms of coercions instead of an explicit <code>.to_...</code></p>",
        "id": 228254425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614614235
    },
    {
        "content": "<p>If you're going to add that definition, it would be good to have an un-primed version that works for a more general <code>M →ₗ[R] M</code> given a basis</p>",
        "id": 228255848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614614687
    },
    {
        "content": "<p>As for naming, the unprimed version could I guess be:</p>\n<ul>\n<li><code>linear_map.to_matrixₐ</code>, <code>matrix.to_linₐ</code></li>\n<li><code>linear_map.to_matrix_alg_equiv</code>, <code>matrix.to_lin_alg_equiv</code></li>\n<li><code>linear_map.to_square_matrix</code>, <code>matrix.square_to_lin</code></li>\n</ul>\n<p>I think I prefer the long <code>alg_equiv</code> spelling over <code>ₐ</code>, as I don't know what if any precedent there is for the latter.</p>",
        "id": 228256798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614614981
    },
    {
        "content": "<p>How would you do this for the <code>is_basis</code> version, given that there is no <code>semiring (ι →₀ R)</code>?</p>",
        "id": 228285583,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614624748
    },
    {
        "content": "<p>I don't follow, why do you need that semiring?</p>",
        "id": 228285716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614624802
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228286306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614625005
    },
    {
        "content": "<p>nevermind... forgot to assume <code>comm_semiring</code>.</p>",
        "id": 228286411,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614625047
    },
    {
        "content": "<p>Oh, and it looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis\">docs#is_basis</a> requires a <code>ring</code></p>",
        "id": 228286699,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614625155
    },
    {
        "content": "<p>I might be not understanding something about the right typeclass setup here, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Canonical algebra equivalence between a module and the linear combinations of basis vectors. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">module_alg_equiv_finsupp</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives that <code>semiring (ι →₀ R)</code> complaint</p>",
        "id": 228286716,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614625165
    },
    {
        "content": "<p>Oh you don't want <code>M</code>, but rather the endomorphism <del>ring</del> semiring of <code>M</code>.</p>",
        "id": 228286935,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614625224
    },
    {
        "content": "<p>I was trying to copy the definition for <code>is_basis.equiv_fun</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A module over `R` with a finite basis is linearly equivalent to functions from its basis to `R`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_basis.equiv_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">module_equiv_finsupp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">coe_fn</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.coe_add</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.coe_smul</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">finsupp.equiv_fun_on_fintype</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228287061,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614625270
    },
    {
        "content": "<p>That's a linear equiv, not an algebra equiv</p>",
        "id": 228287083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614625280
    },
    {
        "content": "<p>The issue is that <code>is_basis</code> needs to be generalized to semirings.</p>",
        "id": 228287232,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614625332
    },
    {
        "content": "<p>Yes, so to make it an alg equiv, I was going the lazy route of just substituting <code>alg_equiv</code> for <code>linear_equiv</code> where possible</p>",
        "id": 228287233,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614625334
    },
    {
        "content": "<p>Because that's what worked for the <code>linear_map \\to matrix</code> <code>alg_equiv</code>s</p>",
        "id": 228287317,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614625366
    },
    {
        "content": "<p>But in your code above,, over rings, this is not what you do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix''a</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 228287320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614625366
    },
    {
        "content": "<p>You're trying to construct this, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrixa</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 228287443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614625406
    },
    {
        "content": "<p>Mayube this will clarify things:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 228287446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614625407
    },
    {
        "content": "<p>And you already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_matrix\">docs#linear_map.to_matrix</a></p>",
        "id": 228287511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614625433
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Linear maps `(n → R) →ₗ[R] (n → R)` are algebra equivalent to `matrix n n R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix_alg_equiv'</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix'</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.to_lin'</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.to_lin'_to_matrix'</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix'_to_lin'</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix'_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix'.map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">module.algebra_map_End_eq_smul_id</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>And you asked for the unprimed versions</p>",
        "id": 228287580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614625450
    },
    {
        "content": "<p>Yes, I think you can just remove the <code>'</code> from most of the lemmas you use</p>",
        "id": 228287626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614625471
    },
    {
        "content": "<p>And possibly have to think about <code>commutes'</code> slightly</p>",
        "id": 228287645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614625483
    },
    {
        "content": "<p>We have that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given bases of two modules `M₁` and `M₂` over a commutative ring `R`, we get a linear</span>\n<span class=\"sd\">equivalence between linear maps `M₁ →ₗ M₂` and matrices over `R` indexed by the bases. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">linear_equiv.arrow_congr</span> <span class=\"n\">hv₁.equiv_fun</span> <span class=\"n\">hv₂.equiv_fun</span><span class=\"o\">)</span> <span class=\"n\">linear_map.to_matrix'</span>\n</code></pre></div>\n<p>but what fills in the underscore here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a basis of a module `M₁` over a commutative ring `R`, we get an algebra</span>\n<span class=\"sd\">equivalence between linear maps `M₁ →ₗ M₁` and square matrices over `R` indexed by the basis. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix_alg_equiv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">alg_equiv.trans</span> <span class=\"n\">_</span> <span class=\"n\">linear_map.to_matrix_alg_equiv'</span>\n</code></pre></div>",
        "id": 228287758,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614625521
    },
    {
        "content": "<p>So going down this route, I wanted to write <code>is_basis.alg_equiv_fun</code></p>",
        "id": 228287853,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614625563
    },
    {
        "content": "<p>I don't think you want to get there from here</p>",
        "id": 228288650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614625842
    },
    {
        "content": "<p>The \"just remove the primes\" approach</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix_alg_equiv</span> <span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.to_lin</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.to_lin_to_matrix</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix_to_lin</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix_mul</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228290758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614626655
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a basis of a module `M₁` over a commutative ring `R`, we get an algebra</span>\n<span class=\"sd\">equivalence between linear maps `M₁ →ₗ M₁` and square matrices over `R` indexed by the basis. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix_alg_equiv</span> <span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.to_lin</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.to_lin_to_matrix</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix_to_lin</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.to_matrix_mul</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">hv</span> <span class=\"n\">hv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">module.algebra_map_End_eq_smul_id</span><span class=\"o\">,</span> <span class=\"n\">linear_map.to_matrix_id</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228291948,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614627121
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 228291995,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614627126
    },
    {
        "content": "<p>But to answer your question, the thing that's missing is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">linear_equiv.arrow_congr₂</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">linear_equiv.arrow_congr</span> <span class=\"n\">e</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228292219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614627206
    },
    {
        "content": "<p>Which probably belongs right after <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.endomorphism_algebra\">docs#module.endomorphism_algebra</a></p>",
        "id": 228292576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614627339
    }
]