[
    {
        "content": "<p>Do we have these? I couldn't find them, but I'm a bit surprised.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit0_mod_two</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_mod</span><span class=\"o\">,</span> <span class=\"n\">mod_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mod</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit1_mod_two</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">add_mod</span><span class=\"o\">,</span> <span class=\"n\">bit0_mod_two</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mod_mod</span><span class=\"o\">,</span> <span class=\"n\">one_mod</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 211878758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601539031
    },
    {
        "content": "<p>The closest I could find is <code>bodd_bit</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bodd_bit0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bodd</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">nat.bodd_bit</span> <span class=\"n\">ff</span> <span class=\"n\">_</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bodd_bit1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bodd</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">nat.bodd_bit</span> <span class=\"n\">tt</span> <span class=\"n\">_</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit0_mod_two</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat.mod_two_of_bodd</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit1_mod_two</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat.mod_two_of_bodd</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 211879761,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601539752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  Thanks! You managed to prove twice as many simp-lemmas in about the same number of characters.</p>",
        "id": 211881237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601540857
    },
    {
        "content": "<p>Shall I PR these to <code>nat.basic</code>?</p>",
        "id": 211881387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601540955
    },
    {
        "content": "<p>Apparently <code>bodd_bit0</code> is already in <code>nat.basic</code>.  So yes, that seems like the right place.</p>",
        "id": 211881503,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601541008
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4343\">#4343</a></p>",
        "id": 211881998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601541319
    }
]