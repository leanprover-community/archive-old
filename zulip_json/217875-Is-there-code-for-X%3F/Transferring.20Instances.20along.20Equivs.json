[
    {
        "content": "<p>Say I have <code>(M N : Type u) (f : M equiv N) [monoid M]</code>, is there a way of transfering the monoid structure of <code>M</code> via <code>f</code> to <code>N</code> without \"typing everything out\"?</p>\n<p>In my situation, I have a monoid instance on <code>M = (punit --&gt; N)</code>.</p>",
        "id": 240767537,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622398485
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transport\">tactic#transport</a></p>",
        "id": 240767921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622399111
    },
    {
        "content": "<p>Beautiful. Thanks!</p>",
        "id": 240768353,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622399772
    },
    {
        "content": "<p>actually, why is this a tactic and not a definition?</p>",
        "id": 240770219,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622402925
    },
    {
        "content": "<p>You can use this for other kinds of algebraic structures as well (which is only possible in lean with metaprogramming)</p>",
        "id": 240770381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622403207
    },
    {
        "content": "<p>If you want a definition for monoids only, you can make one yourself using this tactic</p>",
        "id": 240770429,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622403245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transport_monoid</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">transport</span> <span class=\"n\">using</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">transport_monoid</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">e.symm</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">transport_monoid</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 240770595,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622403533
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.monoid\">docs#function.injective.monoid</a> help?</p>",
        "id": 240773964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622408661
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.monoid\">docs#equiv.monoid</a></p>",
        "id": 240773971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622408686
    },
    {
        "content": "<p>Which is the version without needing a tactic</p>",
        "id": 240773981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622408707
    },
    {
        "content": "<p>it's okay. <code>transport</code> doesn't look like it's gonna do anything crazy like <code>tidy</code>. I was just wondering why it's in the meta, and not within the type theory.</p>",
        "id": 240774157,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622408955
    },
    {
        "content": "<p>It's in the meta because writing all of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.monoid\">docs#equiv.monoid</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.group\">docs#equiv.group</a>, etc by hand would be super tedious. Except we did that anyway, so I'm not really sure why we have both.</p>",
        "id": 240774496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622409434
    },
    {
        "content": "<p>but is it possible to have a single <code>transport</code> function within the type theory that allows you to transfer across any kind of structure across equivs?</p>",
        "id": 240775331,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622410671
    },
    {
        "content": "<p>Depends on the definition of <code>structure</code>. If you encode things in terms of universal algebra, then yes, but then translating back to the structures like monoids, groups, etc. as they're usually defined in mathlib still would require meta code.</p>",
        "id": 240775615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622411157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I’m moving toward that with <a href=\"https://github.com/leanprover-community/mathlib/issues/7754\">#7754</a>...</p>",
        "id": 240778853,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622416337
    },
    {
        "content": "<p>I would be happy to start porting this stuff I did a while ago here <a href=\"https://github.com/adamtopaz/UnivAlg\">https://github.com/adamtopaz/UnivAlg</a> once we settle on a way to work with first order structures!</p>",
        "id": 240778913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622416450
    },
    {
        "content": "<p>I had planned about a year ago to steadily make <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#equiv_rw\">tactic#equiv_rw</a> (the real trick underlying <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transport\">tactic#transport</a>) more and more powerful. There is a lot that can be done here! (There's not reason it can't deal with quantifiers, and if could also be a lot cleverer about using equivs-with-structure.) But I got distracted by other things.</p>",
        "id": 240782148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622422634
    },
    {
        "content": "<p>If you look in the test file for <code>transport</code> you'll see it happily transports <code>lie_ring</code>, etc., --- so it exists because it is / is-intended-to-be a general purpose tool.</p>",
        "id": 240782197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622422686
    },
    {
        "content": "<p>The hard coded things like <code>docs#equiv.monoid</code> predate it.</p>",
        "id": 240782198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622422702
    },
    {
        "content": "<p>Does it transport things like topological spaces?</p>",
        "id": 240782397,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622423081
    },
    {
        "content": "<p>No, but that was the example I was last working on. (Obviously not hard coding something for topological spaces, but teaching it to cope with the relevant sorts of quantifiers/dependencies.)</p>",
        "id": 240792475,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622437409
    },
    {
        "content": "<p>I really wanted to transport compactness across a homeomorphism (again, by a metaprogram that had never heard of spaces, homeomorphisms, or compactness). Certainly doable,  just takes some work.</p>",
        "id": 240792538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622437494
    }
]