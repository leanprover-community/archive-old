[
    {
        "content": "<p>I'm trying to prove something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.geom_sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">geom_sum_eq_factor_inv_geom_sum</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n  <span class=\"n\">geom_series</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And I wonder if there is something to say: I want a semiring with multiplicative inverses, which I think, are called semifields.</p>",
        "id": 224761512,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612200533
    },
    {
        "content": "<p>Someone just told me 'division semiring' now :D</p>",
        "id": 224761783,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612200668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> was adding these in <a href=\"https://github.com/leanprover-community/mathlib/issues/5539\">#5539</a></p>",
        "id": 224762332,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612200905
    },
    {
        "content": "<p>You might have more fun proving this if you express it as <code>geom_series x (n + 1) = (x ^ n) * geom_series (x \\-) (n + 1)</code></p>",
        "id": 224762698,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612201043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Semifields.3F/near/224762698\">said</a>:</p>\n<blockquote>\n<p>You might have more fun proving this if you express it as <code>geom_series x (n + 1) = (x ^ n) * geom_series (x \\-) n</code></p>\n</blockquote>\n<p>Indeed</p>",
        "id": 224762743,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612201065
    },
    {
        "content": "<p>Nat substraction is frightening</p>",
        "id": 224762823,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612201084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Semifields.3F/near/224762332\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> was adding these in <a href=\"https://github.com/leanprover-community/mathlib/issues/5539\">#5539</a></p>\n</blockquote>\n<p>Thanks for the reference! Will wait for them, meanwhile, it will be just field</p>",
        "id": 224762877,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612201111
    },
    {
        "content": "<p>Did you already see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/geom_sum_inv\">docs#geom_sum_inv</a></p>",
        "id": 224762941,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612201129
    },
    {
        "content": "<p>I was planning to use it</p>",
        "id": 224763032,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612201167
    },
    {
        "content": "<p>Why are semifields needed here?</p>",
        "id": 224763513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612201376
    },
    {
        "content": "<p>Are there any concrete semifields of interest that aren't fields already?</p>",
        "id": 224763612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612201426
    },
    {
        "content": "<p>Are the <del>positive</del> non-negative rationals a semifield?</p>",
        "id": 224763731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612201455
    },
    {
        "content": "<p>no 0</p>",
        "id": 224763765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612201469
    },
    {
        "content": "<p>Pretend I said non-negative</p>",
        "id": 224763822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612201500
    },
    {
        "content": "<p>I suppose you could argue those are not of interest</p>",
        "id": 224763940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612201549
    },
    {
        "content": "<p>I think you see where I'm going with this...</p>",
        "id": 224763990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612201563
    },
    {
        "content": "<p>Yes you can always take an algebraic object and chop it in half</p>",
        "id": 224764071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612201600
    },
    {
        "content": "<p>Isn't max-plus algebra semifield?</p>",
        "id": 224764117,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612201626
    },
    {
        "content": "<p>There is a lot of stuff about <code>nnreal</code> in mathlib. That is a \"serious\" type.</p>",
        "id": 224764134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612201639
    },
    {
        "content": "<p>(R, max, +)</p>",
        "id": 224764135,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612201640
    },
    {
        "content": "<p>Okay, I grant that nnreal is a useful example, but you need at least two examples to make generalization worthwhile, and max-plus is not in mathlib AFAIK</p>",
        "id": 224764503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612201813
    },
    {
        "content": "<p>Right, but won't it be easier to add max-plus if there is already an api for semifield, nobody wants to add a definition with no supporting lemmata but writing a bunch of things for max-plus which will then be generalised and unified with nnreal later by making them both semifields seems a bit inefficient.</p>",
        "id": 224765131,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612202052
    },
    {
        "content": "<p>Adding a new algebraic class means a lot of API to fill out, and longer typeclass instances for everything else. It's something to avoid if at all possible</p>",
        "id": 224765653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612202235
    },
    {
        "content": "<p>For sure it's more than you would have if you just proved theorems on both types independently</p>",
        "id": 224765865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612202313
    },
    {
        "content": "<p>We have two examples - <code>field</code> and <code>nnreal</code></p>",
        "id": 224765999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612202384
    },
    {
        "content": "<p>I don't think you need two examples to insert a new entry between two existing typeclasses - inserting one still means that you can reuse existing lemmas for your new weaker object</p>",
        "id": 224766139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612202435
    },
    {
        "content": "<p>Most of the API to \"fill out\" would just be moving relevant bits of API from <code>field</code> to <code>semifield</code></p>",
        "id": 224766178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612202463
    },
    {
        "content": "<p>It's the algebraic _structures_ like <code>subfield</code> that cause the huge amount of pain to fill out</p>",
        "id": 224766235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612202485
    },
    {
        "content": "<p>Yes, but that doesn't change the fact that now typeclass instances will have to stop at one more intermediate node while trying to show that a field has a plus</p>",
        "id": 224766348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612202524
    },
    {
        "content": "<p>IMO the cost of humans duplicating lemmas is way higher than a small slowdown to typeclass search</p>",
        "id": 224766446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612202577
    },
    {
        "content": "<p>The cost of copy paste is actually not that high</p>",
        "id": 224766488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612202594
    },
    {
        "content": "<p>Every duplicate lemma we have makes auto-complete and doc-gen search less effective</p>",
        "id": 224766532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612202618
    },
    {
        "content": "<p>it's a little inelegant, but that's what the tradeoff is about</p>",
        "id": 224766538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612202621
    },
    {
        "content": "<p>Performance tradeoffs should only be made after measuring</p>",
        "id": 224766709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612202705
    },
    {
        "content": "<p>Ie, add <code>semifield</code>, and see if the slowdown is actually relevant</p>",
        "id": 224766747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612202721
    },
    {
        "content": "<p>One more example: The Krasner semifield: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 + 1 = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 224766777,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612202732
    },
    {
        "content": "<p>Or is this called the boolean semifield? I don't remember.</p>",
        "id": 224766809,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612202755
    },
    {
        "content": "<p>I don't doubt that examples can be made to fit the definition</p>",
        "id": 224766876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612202771
    },
    {
        "content": "<p>I can come up with lots of examples of moufang loops but that doesn't mean mathlib needs to have the definition</p>",
        "id": 224766922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612202796
    },
    {
        "content": "<p><del>A morphism from a commutative ring  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> is \"the same\" as a prime ideal.</del> Sorry that was wrong (you need to consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> as a hyperfield, not a semifield, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">1 + 1 = \\{0,1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>, then it becomes true.)</p>",
        "id": 224766941,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612202808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Semifields.3F/near/224766488\">said</a>:</p>\n<blockquote>\n<p>The cost of copy paste is actually not that high</p>\n</blockquote>\n<p>Personally I find copy pasting quite annoying, there are variables and sections and namespaces etc to consider, it can often be a bigger job than ctrl-c ctrl-v.<br>\nAnd thats if people remember to copy paste, I think there's a maintenance burden on people to either always double check whether a lemma they prove for field or division ring also may apply to nnreal and copy paste it, in practice nobody does this so it seems to me we would miss potentially useful results this way.</p>",
        "id": 224767912,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612203263
    },
    {
        "content": "<p>Well this is in part the cost of keeping <code>nnreal</code> around as an algebraic object instead of just a subtype of <code>real</code>. I'm still not sure that was a good idea</p>",
        "id": 224770106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612204246
    },
    {
        "content": "<p>If used <code>real</code> at the start of LTE, then switched to <code>nnreal</code>. I'm very happy with the change.</p>",
        "id": 224772102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612205099
    },
    {
        "content": "<p>I found <code>nnreal</code> very useful here and there in analysis.</p>",
        "id": 224772342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612205191
    },
    {
        "content": "<p>(e.g., as an algebraic type with <code>norm_cast</code> lemmas both to <code>real</code> and <code>ennreal</code>)</p>",
        "id": 224772386,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612205217
    },
    {
        "content": "<p>But <code>nnreal.lean</code> isn't really that long of a file, and there aren't any subfiles, so I think the status quo is fine</p>",
        "id": 224772606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612205319
    },
    {
        "content": "<p>certainly anything about the coe to real isn't going to generalize to semifields</p>",
        "id": 224772803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612205421
    },
    {
        "content": "<p>and that's where most of the theorems are coming from</p>",
        "id": 224772825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612205434
    },
    {
        "content": "<p>in fact the only thing that looks like it would generalize is the last section <code>section inv</code>, which is more about canonically ordered semifields</p>",
        "id": 224773187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612205577
    },
    {
        "content": "<p>there is a definition of subtraction on nnreal, I don't know if we want a class for that (which it could share with nat) but general semifields don't have it</p>",
        "id": 224773454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612205674
    },
    {
        "content": "<p>Note that a whole bunch of lemmas about <code>nnreal</code> were generalized to lin.ord.comm.grp with zero's</p>",
        "id": 224781056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612208945
    },
    {
        "content": "<p>Sorry for spamming the conversation, but I cannot resist saying the Moufang loops actually paly a role in studying rational points on cubic hypersurfaces.</p>",
        "id": 224784111,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612210391
    },
    {
        "content": "<p>Another class of examples of semifields would be fractional ideals in a Dedekind domain (PR coming soon, hopefully!)</p>",
        "id": 224793550,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612214828
    }
]