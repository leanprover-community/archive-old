[
    {
        "content": "<p>This is complaining about a missing instance, but I'm pretty sure the instance is in mathlib somewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.sign</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mod_sum_congr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">sl</span> <span class=\"n\">sr</span><span class=\"o\">,</span> <span class=\"n\">σ₁</span> <span class=\"bp\">=</span> <span class=\"n\">σ₂</span> <span class=\"bp\">*</span> <span class=\"n\">equiv.sum_congr</span> <span class=\"n\">sl</span> <span class=\"n\">sr</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">equiv.perm.mul_def</span><span class=\"o\">,</span> <span class=\"n\">equiv.perm.one_def</span><span class=\"o\">]⟩,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"o\">⟨</span><span class=\"n\">sl</span><span class=\"o\">,</span> <span class=\"n\">sr</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">sl</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">sr</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">equiv.perm.mul_def</span><span class=\"o\">,</span> <span class=\"n\">equiv.perm.inv_def</span><span class=\"o\">]}⟩,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"n\">σ₃</span> <span class=\"o\">⟨</span><span class=\"n\">sl₁₂</span><span class=\"o\">,</span> <span class=\"n\">sr₁₂</span><span class=\"o\">,</span> <span class=\"n\">h₁₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">sl₂₃</span><span class=\"o\">,</span> <span class=\"n\">sr₂₃</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">sl₂₃</span> <span class=\"bp\">*</span> <span class=\"n\">sl₁₂</span><span class=\"o\">,</span> <span class=\"n\">sr₂₃</span> <span class=\"bp\">*</span> <span class=\"n\">sr₁₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁₂</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">equiv.perm.mul_def</span><span class=\"o\">,</span> <span class=\"n\">equiv.perm.inv_def</span><span class=\"o\">]}⟩</span>\n<span class=\"o\">⟩}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"bp\">$</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">))</span>  <span class=\"c1\">-- ok</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">mod_sum_congr</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- failed to synthesize type class instance for \"fintype (quotient (mod_sum_congr α β))\"</span>\n</code></pre></div>",
        "id": 218981184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607252157
    },
    {
        "content": "<p>Ah, it seems <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.fintype\">docs#quotient.fintype</a> needs the setoid to be decidable</p>",
        "id": 218981243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607252221
    },
    {
        "content": "<p>This needs some decidability of the equivalence relation ... yes</p>",
        "id": 218981249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607252225
    },
    {
        "content": "<p>Or <code>noncomputable theory</code>, I suppose...</p>",
        "id": 218981256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607252243
    },
    {
        "content": "<p>Any tips for how to construct the decidable instance constructively? I know how I'd write an algorithm to decide the statement, but I don't really know how to transfer them to lean; in particular, I don;t know how to state <code>pa</code> and <code>pb</code> in a way that lean already knows is decidable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">mod_sum_congr</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">mod_sum_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">pa</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">σ₂</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">σ₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inl</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">pb</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">σ₂</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">σ₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inr</span> <span class=\"n\">b₂</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">pa</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">pb</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">pa</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pa</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"bp\">;</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">pb</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pb</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">decidable.is_true</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">decidable.is_false</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218981740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607252980
    },
    {
        "content": "<p><code>pa</code> should be trivially decidable via exhaustive iteration over the fintype <code>α</code>, right?</p>",
        "id": 218981836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607253107
    },
    {
        "content": "<p>are there already <code>decidable_eq</code>/<code>fintype</code> instances for <code>equiv</code>s between two <code>decidable_eq</code>+<code>fintype</code> types?</p>",
        "id": 218981953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607253284
    },
    {
        "content": "<p>Nevermind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">mod_sum_congr</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">mod_sum_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I must have been rememvering an older version where I used sigma types instead of sum type</p>",
        "id": 218981965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607253314
    }
]