[
    {
        "content": "<p>Hey! is there a tactic that closes the goal, given an assumption of the form <code>constructor₁ args₁ == constructor₂ args₂</code>? <br>\nBy the way, I'm not even sure how to do that for proper equality. Thanks!</p>",
        "id": 309150062,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668156396
    },
    {
        "content": "<p>Try <code>cases h</code></p>",
        "id": 309154362,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668158301
    },
    {
        "content": "<p>I get <code>cases tactic failed, unsupported equality between type and constructor indices</code></p>",
        "id": 309155726,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668158889
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 309155784,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668158916
    },
    {
        "content": "<p>I think it would be better and less painful to avoid heq from the start.</p>",
        "id": 309155823,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1668158936
    },
    {
        "content": "<p>OK, let me get a MWE (sorry I didn't provide it directly)</p>",
        "id": 309156151,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668159036
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.path</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">quiver</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">path</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">P_snd</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">Q_snd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">--here</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quiver</span>\n</code></pre></div>",
        "id": 309156964,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668159382
    },
    {
        "content": "<p>It's a dumb example obviously, but at <code>--here</code> I get this heterogeous equality I have to deal with</p>",
        "id": 309157067,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668159424
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"n\">subst</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or simply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩,</span>\n</code></pre></div>",
        "id": 309157924,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668159783
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.path</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">quiver</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"c1\">--[quiver.{u+1} U]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">path</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq.symm</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quiver</span>\n</code></pre></div>",
        "id": 309157979,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668159807
    },
    {
        "content": "<p>I have no idea what you want to do with your weird universes.</p>",
        "id": 309158102,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668159851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60no_confusion_heq.60.20tactic.3F/near/309157924\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"n\">subst</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or simply</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Neat, thanks!</p>",
        "id": 309158221,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668159898
    },
    {
        "content": "<blockquote>\n<p>I have no idea what you want to do with your weird universes.</p>\n</blockquote>\n<p>In this case it doesn't matter, but <code>quiver</code> has some trouble with needing <code>+1</code> in some places</p>",
        "id": 309158295,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668159933
    },
    {
        "content": "<p>btw <code>eq.symm</code> still works in that case</p>",
        "id": 309158444,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668160021
    },
    {
        "content": "<p>Yes, but I didn't want to prove symmetry of equality, that was just a random type I decided to use. Sorry if that wasn't clear!</p>",
        "id": 309158534,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668160071
    },
    {
        "content": "<p>Note that, in general, two different constructors of the same type may be equal if type parameters are different. For example, the following can neither be proved nor disproved:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- Undecidable</span>\n</code></pre></div>\n<p>This is not the case in your example, though.</p>",
        "id": 309158724,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668160141
    },
    {
        "content": "<p>ah, I just found out my example wasn't close enough to my real case because the components of <code>F,G</code> can be made into variables</p>",
        "id": 309158937,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668160212
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.path</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">quiver</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">prefunctor</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- rename to `star_path` ?</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">path_from</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">path</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">prefunctor.path_from</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path_from</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">path_from</span> <span class=\"o\">(</span><span class=\"n\">φ.obj</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">φ.obj</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">φ.map_path</span> <span class=\"n\">p.2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">path</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">φ.path_from</span> <span class=\"n\">u</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">φ.path_from</span> <span class=\"n\">u</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">φ.path_from</span> <span class=\"n\">u</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">φ.path_from</span> <span class=\"n\">u</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">P_snd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">Q_snd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_right</span><span class=\"o\">,</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> here -/</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quiver</span>\n</code></pre></div>",
        "id": 309160478,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668160789
    },
    {
        "content": "<p>I believe I could just make it a lemma so that the components there would really be variables, and then your proof would work, but if there is a one-line way to use it in the proof, that would be welcome</p>",
        "id": 309160665,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1668160851
    },
    {
        "content": "<p>In theory, it can be proved using a single <code>heq.rec</code> application, but you would need to construct the motive explicitly, which is very hard. I don't think there is an easy way to prove your goal.</p>",
        "id": 309224591,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668184119
    },
    {
        "content": "<p>Here is a very ugly proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">path</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">φ.path_from</span> <span class=\"n\">u</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">φ.path_from</span> <span class=\"n\">u</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">φ.path_from</span> <span class=\"n\">u</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">φ.path_from</span> <span class=\"n\">u</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sigma.mk.inj_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">P_snd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">Q_snd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">symmetry'</span> <span class=\"n\">at</span> <span class=\"n\">h_left</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">φ.obj</span> <span class=\"n\">Q_snd_b</span> <span class=\"bp\">⟶</span> <span class=\"n\">φ.obj</span> <span class=\"n\">Q_snd_c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">φ.obj</span> <span class=\"n\">Q_snd_b</span> <span class=\"bp\">⟶</span> <span class=\"n\">φ.obj</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h_left</span> <span class=\"o\">},</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">path.nil</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">φ.obj</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ.obj</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n        <span class=\"o\">(</span><span class=\"n\">φ.map_path</span> <span class=\"n\">Q_snd_ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">h₁.mp</span> <span class=\"o\">(</span><span class=\"n\">φ.map</span> <span class=\"n\">Q_snd_ᾰ_1</span><span class=\"o\">)),</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n      <span class=\"n\">apply</span> <span class=\"n\">eq_of_heq</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h_right.trans</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h_left</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}}},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 309229295,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668185972
    }
]