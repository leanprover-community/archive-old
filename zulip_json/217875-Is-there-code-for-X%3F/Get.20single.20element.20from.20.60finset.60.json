[
    {
        "content": "<p>Is there a way to  (a) state that a <code>finset</code> contains exactly one element, and (b) extract that element if (a) is true?</p>",
        "id": 224479348,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611931408
    },
    {
        "content": "<p>Computably?</p>",
        "id": 224479380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611931431
    },
    {
        "content": "<p>Otherwise, <code>s.card = 1</code></p>",
        "id": 224479409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611931439
    },
    {
        "content": "<p>And there must be some lemma that gives <code>s.nonempty</code> from <code>0 &lt; s.card</code></p>",
        "id": 224479493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611931470
    },
    {
        "content": "<p>If you want to do this computably, you'll have to look at the def'n of <code>finset</code>, and notice that it's basically a <code>list</code> under the hood.</p>",
        "id": 224479644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611931532
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224479799,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611931591
    },
    {
        "content": "<p>For the classical path <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.card_eq_one\"><code>finset.card_eq_one</code></a> works.</p>",
        "id": 224480459,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611931869
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">multiset.extract_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.rec_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">quotient.sound</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">H₂</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">a.length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">b.length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">list.perm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">h.mem_iff.1</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">multiset.eq_extract_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s.extract_singleton</span> <span class=\"n\">h</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.induction_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset.extract_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.1.extract_singleton</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset.eq_extract_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"n\">s.extract_singleton</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.eq_of_veq</span> <span class=\"bp\">$</span> <span class=\"n\">s.1.eq_extract_singleton</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 224481318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611932260
    },
    {
        "content": "<p>Can <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.choose\">docs#finset.choose</a> help here?</p>",
        "id": 224482792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611932802
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset.extract_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.choose</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset.card_eq_one.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">finset.mem_singleton_self</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton.mp</span> <span class=\"n\">h.1</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224484025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611933290
    }
]