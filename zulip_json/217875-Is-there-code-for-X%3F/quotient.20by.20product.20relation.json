[
    {
        "content": "<p>Is this anywhere in the Lean library? I managed to prove it using only <code>quot.sound</code> without <code>propext</code>. If r₁ and r₂ are setoids, there is a simpler proof using <code>quotient.exact</code>, which however depends on <code>propext</code>. The setoid version for Pi types also holds (requires <code>quotient.choice</code>; is this in the library?), but if the relations are only reflexive, the kernels of the quotients are the equivalence relations generated by the respective relations (<code>eqv_gen</code>), but the <code>eqv_gen</code> of the product relation doesn't necessarily equal the product of the <code>eqv_gen</code>s, because it can take any number of steps to reach a pair of elements in the transitive closure, and across different coordinates, these numbers may well be unbounded.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rprod</span> <span class=\"o\">{</span><span class=\"n\">α₁</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α₂</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r₁</span><span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₂</span><span class=\"o\">:</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span><span class=\"o\">:</span> <span class=\"n\">pprod</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"n\">r₁</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">r₂</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">a&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_quot</span> <span class=\"o\">{</span><span class=\"n\">α₁</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α₂</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r₁</span><span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₂</span><span class=\"o\">:</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r₁</span> <span class=\"bp\">∧</span> <span class=\"n\">reflexive</span> <span class=\"n\">r₂</span><span class=\"o\">):</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">rprod</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">quot</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quot</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">pprod</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"n\">pprod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r₁</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r₂</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">],</span>\n    <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span> <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rprod</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pprod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"n\">r₂</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"k\">with</span> <span class=\"n\">hg&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"n\">r₁</span> <span class=\"bp\">_</span> <span class=\"n\">g&#39;</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hg&#39;</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">hr</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">ind</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">a₂</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">ind</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">triv</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">a_fst</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">ind</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">a_snd</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">ind</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">prod_quot</span> <span class=\"c1\">-- quot.sound</span>\n</code></pre></div>\n\n\n<p>I appreciate any simplification of the proof. Moreover, if I replace the last line with <code>revert a_snd, apply quot.ind, simp }</code> the proof still works but will then depend on <code>propext</code>. I am not experienced enough to track down the problem, so help is appreciated.</p>",
        "id": 207806839,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1598244004
    },
    {
        "content": "<p>No, I don't think this has been proved in mathlib</p>",
        "id": 207806925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598244170
    },
    {
        "content": "<p>What's your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> header? I can't find <code>rprod</code></p>",
        "id": 207806987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598244257
    },
    {
        "content": "<p>I found <code>prod.rprod</code> but it doesn't work on <code>Sort</code>s; it looks like you are using <code>pprod</code> but there is no <code>pprod.rprod</code> that has been proved AFAICT</p>",
        "id": 207807095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598244431
    },
    {
        "content": "<p>Sorry,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">rprod</span> <span class=\"o\">{</span><span class=\"n\">α₁</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α₂</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r₁</span><span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₂</span><span class=\"o\">:</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span><span class=\"o\">:</span> <span class=\"n\">pprod</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"n\">r₁</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">r₂</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">a&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 207807149,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1598244556
    },
    {
        "content": "<p>You should start the proof with <code>fconstructor</code> to skip the <code>swap</code>s</p>",
        "id": 207807221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598244642
    },
    {
        "content": "<p>also the <code>hr</code> hypothesis should be two hypotheses</p>",
        "id": 207807307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598244799
    },
    {
        "content": "<p>As for avoiding propext, tactics use it all the time. You will have a bad day trying to avoid it unless you rewrite some of the core algorithms</p>",
        "id": 207807353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598244862
    },
    {
        "content": "<p>you can remove the <code>dsimp</code> on the last line though</p>",
        "id": 207807364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598244921
    },
    {
        "content": "<p>you can replace the coherence proofs at the end with</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Did I mention that <code>rcases</code> (or <code>rintro</code> in this guise) is awesome?</p>",
        "id": 207807457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598245056
    },
    {
        "content": "<p>Here's a compression pass:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">prod_quot</span> <span class=\"o\">{</span><span class=\"n\">α₁</span> <span class=\"n\">α₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hr₁</span><span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr₂</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">rprod</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">quot</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quot</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">pprod</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"n\">pprod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r₁</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r₂</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n    <span class=\"k\">by</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">],</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">pprod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">hr₁</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"bp\">⟨</span><span class=\"n\">a₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hr₂</span> <span class=\"n\">a₂</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩⟩;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"bp\">⟩⟩;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207808034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598245840
    },
    {
        "content": "<p><code>ext ⟨a₂⟩,</code>, also brought to you by rcases</p>",
        "id": 207808045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598245865
    },
    {
        "content": "<p>abbreviating <code>apply funext, apply quot.ind, intro a₂,</code> from the original proof</p>",
        "id": 207808055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598245890
    },
    {
        "content": "<p>I really like <code>ext ⟨a₂⟩</code>. It is really useful. Another place that parser would be helpful is in <code>choose</code>.</p>",
        "id": 207826611,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598263808
    },
    {
        "content": "<p>I actually thought about adding it when I was working on <code>choose!</code>, but it conflicts with the current syntax a bit</p>",
        "id": 207885271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598297006
    },
    {
        "content": "<p>Pi type version</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">pi_setoid_quot</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">pi_setoid</span> <span class=\"err\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">⟦</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"err\">⟧</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">))),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"err\">⟦</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"err\">⟧</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩;</span> <span class=\"n\">exact</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk_out</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">pi_setoid_quot</span> <span class=\"c1\">-- all three</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk_out</span> <span class=\"c1\">-- choice, propext; incorporates exactness</span>\n</code></pre></div>",
        "id": 207889416,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1598299118
    }
]