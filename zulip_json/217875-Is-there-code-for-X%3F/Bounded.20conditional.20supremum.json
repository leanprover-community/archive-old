[
    {
        "content": "<p>In the naming convention, we have <code>supr</code> for the indexed supremum, <code>bsupr</code> for the bounded indexed supremum, <code>csupr</code> for the conditional indexed supremum. Are people fine with me using <code>bcsupr</code> for the bounded conditional indexed supremum or do you have better alternatives?</p>",
        "id": 266629511,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641152350
    },
    {
        "content": "<p>Bounded csuprs don't work in the current design unfortunately (at least, on generalized types), because the csupr when the condition is false is unspecified</p>",
        "id": 266883094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641342231
    },
    {
        "content": "<p>But I still have a few lemmas about them.</p>",
        "id": 266907503,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641370138
    },
    {
        "content": "<p>I'm curious; can you give an example?</p>",
        "id": 266917385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641377446
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/convexity_modulus\">branch#convexity_modulus</a></p>",
        "id": 266917439,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641377482
    },
    {
        "content": "<p>You can see that I'm using the fact that when <code>csupr</code> is unspecified it is still equal to some definite value.</p>",
        "id": 266917732,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641377662
    },
    {
        "content": "<p>I guess my argument would be that those statements are perhaps worse than useless, as they suggest that <code>bcsupr</code> is actually a useful meaningful thing; but all the times I've seen someone actually try to use it in a generic setting the conclusion was it didn't mean what they wanted it to mean</p>",
        "id": 266927274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641384570
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bcsupr_mono_right</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Is indeed a true lemma, but the left and right hand side are not what would usually be considered a bounded supremum, as the semantics are not \"exclude the elements where <code>p i</code> doesn't hold\", but \"replace them with some unspecified constant\"</p>",
        "id": 266927365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641384635
    },
    {
        "content": "<p>The meaningful version of that lemma is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">csupr_subtype_mono_right</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>But  I suspect that's an obvious  special case of an existing lemma</p>",
        "id": 266927515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641384725
    },
    {
        "content": "<p>So what are you suggesting? That I take one sup over all pairs <code>x</code> and <code>y</code>?</p>",
        "id": 266929149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641385864
    },
    {
        "content": "<p>Does taking the nnreal norm make things easier?</p>",
        "id": 266929507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386140
    },
    {
        "content": "<p>Why would it? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 266929980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641386455
    },
    {
        "content": "<p>Because that's a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_lattice_bot\">docs#conditionally_complete_lattice_bot</a> which has well-behaved bounded supremums</p>",
        "id": 266930092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386532
    },
    {
        "content": "<p>No it doesn't. What you're taking the supremum of must be bounded.</p>",
        "id": 266930132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641386573
    },
    {
        "content": "<p>Ahah, stop editing <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 266930145,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641386582
    },
    {
        "content": "<p>Hmm, is <code>conditionally_complete_lattice_bot</code> gone?</p>",
        "id": 266930163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386595
    },
    {
        "content": "<p>Oh yeah, <code>order_bot</code></p>",
        "id": 266930176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386603
    },
    {
        "content": "<p>Yeah, since Yakov's refactor</p>",
        "id": 266930181,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641386605
    },
    {
        "content": "<p>Sorry, by \"bounded\" i mean in the sense of <code>bsupr</code> not <code>bdd_below</code></p>",
        "id": 266930236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386638
    },
    {
        "content": "<p>Then I maintain my \"no\". What if you take <code>Sup univ</code>?</p>",
        "id": 266930310,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641386665
    },
    {
        "content": "<p>My claim is that on types with <code>order_bot</code>, <code>⨆ (i : ι) (hi : p i)</code> and <code>⨆ i : subtype p,</code> coincide because <code>⨆ (i : false), _ = bot</code></p>",
        "id": 266930391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386722
    },
    {
        "content": "<p>The lemmas you have right now are odd because you know nothing about <code>⨆ i : false, _</code></p>",
        "id": 266930504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386763
    },
    {
        "content": "<p>Is that a lemma? I doubt it's true because you are still not addressing the case of unbounded sets.</p>",
        "id": 266930550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641386789
    },
    {
        "content": "<p>A lot of the lemmas here look like they ought to generalize to order_bot: <a href=\"https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#lemmas-about-a-conditionally-complete-linear-order-with-bottom-element\">https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#lemmas-about-a-conditionally-complete-linear-order-with-bottom-element</a></p>",
        "id": 266930633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386841
    },
    {
        "content": "<p>Oh, at any rate what I meant to link above was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order_bot\">docs#conditionally_complete_linear_order_bot</a></p>",
        "id": 266930725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386883
    },
    {
        "content": "<p>Which <code>nnreal</code> satisfies</p>",
        "id": 266930759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386890
    },
    {
        "content": "<p>I don't like the idea of going through <code>nnreal</code>.</p>",
        "id": 266930853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641386957
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_nnnorm.nnnorm\">docs#has_nnnorm.nnnorm</a> (<code>∥a∥₊</code>) presumably to help with this kind of thing</p>",
        "id": 266930892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641386980
    },
    {
        "content": "<p>Yeah but that means I have to coerce back from <code>nnreal</code> to <code>real</code> or have <code>convex_mod</code> be <code>nnreal</code>-valued.</p>",
        "id": 266931224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641387144
    },
    {
        "content": "<p>Is having <code>convex_mod</code> be <code>nnreal</code>-valued a problem?</p>",
        "id": 266931275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641387187
    },
    {
        "content": "<p>That seems like the obvious choice</p>",
        "id": 266931290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641387197
    },
    {
        "content": "<p>I have yet to formalize a single bit of the applications of <code>convex_mod</code>, so I really don't know.</p>",
        "id": 266931422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641387266
    },
    {
        "content": "<p>In the literature, they even define <code>convex_mod : Icc 0 2 → Icc 0 1</code>, but that's definitely too extreme.</p>",
        "id": 266931705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641387438
    },
    {
        "content": "<p>Thinking about this again, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, should we have a dedicated API for <code>⨆ x : subtype p, f x</code>?</p>",
        "id": 276395225,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648067238
    },
    {
        "content": "<p>Either that or something akin to <code>finsum</code> but for supr</p>",
        "id": 276395672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648067444
    },
    {
        "content": "<p>But maybe that can't exist</p>",
        "id": 276395801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648067503
    },
    {
        "content": "<p>Isn't <code>supr</code> already akin <code>finsum</code>? Just a badly behaved one.</p>",
        "id": 276395803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648067504
    },
    {
        "content": "<p>I guess we could have a separate notation and a different naming convention (<code>bcsupr</code> anyone?), bur I'm not yet sure what the notation should look like.</p>",
        "id": 276396022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648067590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Bounded.20conditional.20supremum/near/276395225\">said</a>:</p>\n<blockquote>\n<p>Thinking about this again, <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>, should we have a dedicated API for <code>⨆ x : subtype p, f x</code>?</p>\n</blockquote>\n<p>I think we should have API for <code>⨆ x : s, f x</code>, but we maybe already have that? It's way more common (for me) to work with sets than with subtypes, so I personally don't see the value of <em>also</em> having API for <code>⨆ x : subtype p, f x</code>.</p>",
        "id": 276455698,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648117635
    },
    {
        "content": "<p>Can't they be used interchangeably?</p>",
        "id": 276459402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648119854
    },
    {
        "content": "<p>more or less yes (not in <code>rw</code>/<code>simp</code> probably). I think it would be nicer if they are stated using sets instead of subtypes.</p>",
        "id": 276462629,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648121888
    },
    {
        "content": "<p>I don't really see the point. <code>subtype</code> is morally more general.</p>",
        "id": 276463673,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648122572
    },
    {
        "content": "<p>Note: <code>Sup (f '' s)</code> means the same, and has currently more API. I just think <code>⨆ x : s, f x</code> is a much nicer way of writing this term.</p>",
        "id": 276472145,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648127050
    },
    {
        "content": "<p>I am fighting my way through a possible API for conditional suprema in <a href=\"https://github.com/leanprover-community/mathlib/tree/convexity_modulus\">branch#convexity_modulus</a>. If people have ocmments on which lemmas are worthy of living, that would be great.</p>",
        "id": 276480308,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648130950
    }
]