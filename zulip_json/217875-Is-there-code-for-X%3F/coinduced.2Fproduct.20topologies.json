[
    {
        "content": "<p>Is this true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X₀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t₀</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X₀</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X₀</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">prod.topological_space</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">t₀.coinduced</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.topological_space</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t₀</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coinduced</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It would imply what I really want, which is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X₀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₀</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X₀</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X₀</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X₀</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">t₀.coinduced</span> <span class=\"n\">f</span> <span class=\"k\">in</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but another route to the latter would be fine (we seem to be lacking lemmas for proving that a map with domain a product is continuous).</p>",
        "id": 265608635,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640029977
    },
    {
        "content": "<p>The product topology is an inf, so you can use lemmas about <code>inf</code> of topologies to obtain continuity.</p>",
        "id": 265610494,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640031085
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/induced_inf\">docs#induced_inf</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coinduced_sup\">docs#coinduced_sup</a> but no <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coinduced_inf\">docs#coinduced_inf</a></p>",
        "id": 265610528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640031117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/coinduced.2Fproduct.20topologies/near/265610494\">said</a>:</p>\n<blockquote>\n<p>The product topology is an inf, so you can use lemmas about <code>inf</code> of topologies to obtain continuity.</p>\n</blockquote>\n<p>Yes, but unfortunately as far as I can tell the only lemmas we have about proving continuity with respect to an inf-domain are trivial, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_inf_dom_left\">docs#continuous_inf_dom_left</a> and twin.</p>",
        "id": 265611216,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640031593
    },
    {
        "content": "<p>That's because a prroduct is a limit, so the universal property tells you how to map into the product, not out of it <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 265611677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640031857
    },
    {
        "content": "<p>I think this lemma is false.</p>",
        "id": 265613278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640032846
    },
    {
        "content": "<p>Because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.map_inf_le\">docs#monotone.map_inf_le</a> is the wrong way around</p>",
        "id": 265613521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640033002
    },
    {
        "content": "<p>Note that if <code>coinduced_inf</code> were true then a product of quotient maps would be a quotient map, which is known to be false (product and quotients don't commute in Top).</p>",
        "id": 265614554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640033616
    },
    {
        "content": "<p>It means you can probably cook up a counter-example using <code>X_0 = ℚ</code>, <code>X = ℚ/ℤ</code> and<code>Y = ℚ</code>. In that case <code>X₀ × Y → X × Y</code> is not a quotient map.</p>",
        "id": 265614843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640033773
    },
    {
        "content": "<p>I got the second fact working under the condition of surjectivity of <code>f</code> and local compactness of <code>Y</code>, both of which are true in my use case -- not clear to me whether the second condition in particular is necessary, though (as opposed to just a hack to let me pass to the compact-open characterization of the product topology).</p>",
        "id": 265614949,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640033847
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X₀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₀</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X₀</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">locally_compact_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X₀</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X₀</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">t₀.coinduced</span> <span class=\"n\">f</span> <span class=\"k\">in</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">Gf</span> <span class=\"o\">:</span> <span class=\"n\">X₀</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_map.curry</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hGf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">Gf</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">continuous_map.curry</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">continuous</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Gf</span> <span class=\"n\">x₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">continuous_map.continuous_uncurry_of_continuous</span> <span class=\"o\">⟨</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Gf</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">hGf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_coinduced_dom</span> <span class=\"n\">hGf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265614958,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640033852
    },
    {
        "content": "<p>(This should be more nicely expressed using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_map\">docs#quotient_map</a> so I'll switch to that formulation.)</p>",
        "id": 265615342,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640034063
    },
    {
        "content": "<p>Quotient map version (still curious about whether the local compactness of <code>Y</code> is needed):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X₀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₀</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X₀</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_compact_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X₀</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">quotient_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X₀</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">Gf</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X₀</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_map.curry</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf.surjective</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Gf</span> <span class=\"n\">x₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hf.continuous_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Gf.continuous</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">continuous_map.continuous_uncurry_of_continuous</span> <span class=\"o\">⟨</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265616209,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640034562
    },
    {
        "content": "<p>I'm not suprised you need assumptions on Y. The optimal assumption is probably something like weak Hausdorff compactly generated.</p>",
        "id": 265616555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640034775
    },
    {
        "content": "<p>Thanks!  Always good to have a topologist on hand :)</p>",
        "id": 265618887,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640036496
    },
    {
        "content": "<p>/me should read before writing a reply.</p>",
        "id": 265627479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640042179
    }
]