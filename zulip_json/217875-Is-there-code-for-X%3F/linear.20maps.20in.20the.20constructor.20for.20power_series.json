[
    {
        "content": "<p>I'm wondering if the following lemmas would be useful to have in mathlib, or are already in some form in mathlib, or if there is a reason why they (and similar lemmas basically translating the stuff from linear_map to <a href=\"http://power_series.mk\">power_series.mk</a>) are not present there.  I could need it in a theorem, but I can of course also make the proof of the theorem a little longer.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_series.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">power_series</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mk_map_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,(</span><span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_mk</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_add</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mk_map_zero</span><span class=\"o\">:</span> <span class=\"n\">mk</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_mk</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span> <span class=\"n\">pi.zero_apply</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mk_map_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n<span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">S.sum</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">S.sum</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">mk</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_mk</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_sum</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 227194173,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613941792
    },
    {
        "content": "<p>A better strategy might be to show that <code>mk</code> is an a <code>linear_map</code>, and then the sum lemmas are free</p>",
        "id": 227195638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613943440
    },
    {
        "content": "<p>That makes sense!</p>",
        "id": 227195812,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613943642
    },
    {
        "content": "<p>Also, <code>λ p,(a p) + (b p)</code> is just <code>a + b</code> thanks to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.add_monoid\">docs#pi.add_monoid</a></p>",
        "id": 227199107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613946171
    },
    {
        "content": "<p>I think this theorem should do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pow_series_mk_is_lin_map</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]:</span>\n<span class=\"n\">is_linear_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span><span class=\"n\">mk</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_smul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Where should it be located? In module.linear_map?</p>",
        "id": 227263633,
        "sender_full_name": "Fabian Kruse",
        "timestamp": 1613999540
    },
    {
        "content": "<p>I think that the preferred solution would be not to prove is_linear_map but to instead construct a term <code>mk'</code> of type <code>linear_map</code></p>",
        "id": 227266358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614000871
    }
]