[
    {
        "content": "<p>Do we have reasonable statements of the following kind? (Specializing to the <code>at_top</code> filter is probably not optimal generality, but the question is if I'm missing existing results from the library.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">limsup_antitone_continuous_eq_antitone_continuous_liminf</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_decr</span> <span class=\"o\">:</span> <span class=\"n\">antitone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">at_top.limsup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">at_top.liminf</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 289002206,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1657320600
    },
    {
        "content": "<p>I also did not find related lemmas about <code>Sup</code> and <code>Inf</code> under decreasing (continuous) functions. Or increasing (continuous) functions for that matter. Below are clumsy proofs. I'd greatly appreciate an answer to <em>Is there code for X?</em> about any of them. Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.order.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.ennreal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">order</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sup_antitone_le_antitone_Inf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_semilattice_Inf</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- It should be enough to assume `[complete_semilattice_Sup S] [linear_order S]`</span>\n  <span class=\"c1\">-- but how to make the `≤` of these two match?</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_decr</span> <span class=\"o\">:</span> <span class=\"n\">antitone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Sup_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x_in_fA</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">mem_image</span> <span class=\"n\">f</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x_in_fA</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">z_in_A</span><span class=\"o\">,</span> <span class=\"n\">fz_eq_x</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">b_gt</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f_decr</span> <span class=\"o\">(</span><span class=\"n\">Inf_le</span> <span class=\"n\">z_in_A</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fz_eq_x</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_self_iff_false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">b_gt</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_Inf_le_Sup_continuous</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.nonempty</span><span class=\"o\">):</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_Sup_iff.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">InfA_mem_clA</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">Inf_mem_closure</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">continuous.continuous_on</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f_cont</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">continuous_on.image_closure</span> <span class=\"n\">aux</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">closure_mono</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">Iic</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hb</span><span class=\"o\">)),</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">closure_Iic</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">InfA_mem_clA</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sup_antitone_eq_antitone_Inf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_decr</span> <span class=\"o\">:</span> <span class=\"n\">antitone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.nonempty</span><span class=\"o\">):</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Sup_antitone_le_antitone_Inf</span> <span class=\"n\">f_decr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">continuous_Inf_le_Sup_continuous</span> <span class=\"n\">f_cont</span> <span class=\"n\">A</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Inf_antitone_eq_antitone_Sup</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_decr</span> <span class=\"o\">:</span> <span class=\"n\">antitone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.nonempty</span><span class=\"o\">):</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Sup_antitone_eq_antitone_Inf</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">f_cont</span> <span class=\"n\">A</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">f_decr</span> <span class=\"n\">r₂</span> <span class=\"n\">r₁</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">limsup_eq_Inf_Sup</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">at_top.limsup</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">Ici</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">limsup_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Inf_le_Inf</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">image_univ</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">Ici_mem_at_top</span> <span class=\"n\">j</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_Sup</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">_</span> <span class=\"n\">hij</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">limsup_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_Inf_iff.mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">eventually_at_top</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Inf_le_of_le</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">j</span><span class=\"o\">)),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Sup_le</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">j_le_k</span><span class=\"o\">,</span> <span class=\"n\">ak_eq_x</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ak_eq_x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hj</span> <span class=\"n\">k</span> <span class=\"n\">j_le_k</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">liminf_eq_Sup_Inf</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">at_top.liminf</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Sup</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">Ici</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">limsup_eq_Inf_Sup</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">liminf_antitone_continuous_eq_antitone_continuous_limsup</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_decr</span> <span class=\"o\">:</span> <span class=\"n\">antitone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">at_top.liminf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">at_top.limsup</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">limsup_eq_Inf_Sup</span><span class=\"o\">,</span> <span class=\"n\">liminf_eq_Sup_Inf</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span><span class=\"n\">Sup_antitone_eq_antitone_Inf</span> <span class=\"n\">f_decr</span> <span class=\"n\">f_cont</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nonempty_image_iff.mpr</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ_nonempty</span> <span class=\"n\">ι</span> <span class=\"n\">_</span><span class=\"o\">))],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">image_image</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">image_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">Inf_antitone_eq_antitone_Sup</span> <span class=\"n\">f_decr</span> <span class=\"n\">f_cont</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nonempty_image_iff.mpr</span> <span class=\"n\">nonempty_Ici</span><span class=\"o\">),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">image_image</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">limsup_antitone_continuous_eq_antitone_continuous_liminf</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_decr</span> <span class=\"o\">:</span> <span class=\"n\">antitone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">at_top.limsup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">at_top.liminf</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">liminf_antitone_continuous_eq_antitone_continuous_limsup</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">f_cont</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">f_decr</span> <span class=\"n\">r₂</span> <span class=\"n\">r₁</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289002435,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1657320777
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/antitone.le_map_Inf\">docs#antitone.le_map_Inf</a></p>",
        "id": 289124670,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657488316
    },
    {
        "content": "<p>(with type-class assumptions that are neither stronger nor weaker than yours, but which can probably be weakened)</p>",
        "id": 289124741,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657488388
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.limsup_eq_infi_supr\">docs#filter.limsup_eq_infi_supr</a> might be as convenient as your version?</p>",
        "id": 289125076,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657488912
    },
    {
        "content": "<p>Thanks!</p>\n<p>Meanwhile I had created a PR, <a href=\"https://github.com/leanprover-community/mathlib/pull/15218\">#15218</a>.</p>",
        "id": 289125797,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1657489909
    },
    {
        "content": "<p>I indeed did not succeed in reducing to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/antitone.le_map_Inf\">docs#antitone.le_map_Inf</a> and friends. <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 289125799,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1657489918
    },
    {
        "content": "<p>And I just had noticed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.limsup_eq_infi_supr\">docs#filter.limsup_eq_infi_supr</a>, which (with its liminf-counterpart), as you say, should get rid of two lemmas above.</p>",
        "id": 289125841,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1657489937
    },
    {
        "content": "<p>But is it really true that the result <code>limsup_antitone_continuous_eq_antitone_continuous_liminf</code> does not currently exist in this or similar enough form?</p>",
        "id": 289125868,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1657490020
    },
    {
        "content": "<p>I think we don't because a while ago I had a PR for <code>ennreal.inv_limsup</code> and friends, which I needed for the Gelfand formula.</p>",
        "id": 289134740,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1657504435
    },
    {
        "content": "<p>I still had difficulties using those existing lemmas, which seem like they should help. <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>\n<p>I marked the PR as \"help wanted\", because it seems likely I am not doing things the ideal way. But since I would nevertheless like the <code>limsup_antitone_continuous_eq_antitone_continuous_liminf</code> result merged into mathlib, I simultaneously marked it as \"awaiting review\". I hope thus leaving the judgement to reviewers is not terribly rude here.</p>",
        "id": 289239741,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1657568221
    }
]