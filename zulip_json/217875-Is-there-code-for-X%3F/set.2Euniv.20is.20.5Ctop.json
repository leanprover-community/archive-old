[
    {
        "content": "<p>I ended up stuck with this as a subgoal, which was quite annoying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>The solution is <code>set.mem_univ a</code>, but neither <code>simp</code> nor <code>library_search</code> were able to find it. Should there be a lemma for this?</p>",
        "id": 216211463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605015532
    },
    {
        "content": "<p>I'd like to see a <code>@[simp] lemma : (⊤ : set A) = univ</code>.</p>",
        "id": 216211674,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605015624
    },
    {
        "content": "<p>Looks like it was just forgotten, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bot_eq_empty\">docs#set.bot_eq_empty</a>` is there</p>",
        "id": 216213341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605016394
    },
    {
        "content": "<p>I'll make a PR</p>",
        "id": 216213580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605016486
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4963\">#4963</a></p>",
        "id": 216214587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605016907
    },
    {
        "content": "<p>I guess the \"canonical form\" for <code>(⊤ : set A)</code> is <code>univ</code> in the library. <code>simp</code> is usually something which proves equalities and &lt;-&gt;s rather than random simple facts, I guess.</p>",
        "id": 216216734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605017753
    },
    {
        "content": "<p>My reading was that simp has a second job, which is to turn things into canonical forms</p>",
        "id": 216218073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605018267
    },
    {
        "content": "<p>(eg how we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.to_fun_eq_coe\">docs#monoid_hom.to_fun_eq_coe</a>)</p>",
        "id": 216218107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605018288
    },
    {
        "content": "<p>Yeah you're dead right, and Anne's <code>simp</code> lemma is doing exactly that. I guess I'm saying that Anne's approach is the correct one for <code>simp</code>, rather than adding your original subgoal as a simp lemma.</p>",
        "id": 216220402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605019144
    }
]