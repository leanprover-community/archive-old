[
    {
        "content": "<p>Is the a coercion from <code>set s</code> to <code>set α</code> where <code>s : set α</code> in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set_coe</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">t</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 207181607,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597689942
    },
    {
        "content": "<p>Is this what you mean? This was mentioned in an earlier thread and there may be some other way:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 207189331,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597693952
    },
    {
        "content": "<p>might I point out that (a) it is not preferable to unfold <code>set</code> as a function to <code>Prop</code>, and (b) it is also not preferable to use <code>if then else</code> to define a <code>Prop</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set_coe</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207189641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597694147
    },
    {
        "content": "<p>(oh, right, and your code isn't <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because there is no coercion of <code>s</code> to a type without the import)</p>",
        "id": 207189708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597694169
    },
    {
        "content": "<p>my code is only meant to be a version of your code that adheres more to mathlib guidelines, but as <span class=\"user-mention\" data-user-id=\"259857\">@Dan Stanescu</span> points out, <code>subtype.val '' A</code> is more preferable.</p>",
        "id": 207189803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597694223
    },
    {
        "content": "<p>Here is a link to the stream I mentioned:</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/Subset.20of.20subset\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Subset.20of.20subset</a></p>",
        "id": 207190255,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597694489
    },
    {
        "content": "<p><code>subtype.val</code> is often not the preferred way to express thing, you should probably use <code>coe : s -&gt; alpha</code></p>",
        "id": 207191876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597695349
    },
    {
        "content": "<p>Yes, that is mentioned in the thread I pointed to.</p>",
        "id": 207192240,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597695530
    }
]