[
    {
        "content": "<p>Does mathlib have something like the category of finite sets (as a category)?</p>",
        "id": 201073649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592341365
    },
    {
        "content": "<p>this introduces the category_theory library<br>\n<a href=\"https://leanprover-community.github.io/theories/category_theory.html\">https://leanprover-community.github.io/theories/category_theory.html</a></p>",
        "id": 201073869,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592341489
    },
    {
        "content": "<p>Thanks, I looked at this, but the word \"finite\" is not mentioned there. I am aware of the \"category of types\" here: <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/types.html\">https://leanprover-community.github.io/mathlib_docs/category_theory/types.html</a><br>\nI guess I'm looking for something similar where the objects are finite types.</p>",
        "id": 201074318,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592341707
    },
    {
        "content": "<p>I don't think it currently exists.</p>",
        "id": 201074421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592341771
    },
    {
        "content": "<p>Should be easy to define using <code>induced_category</code> plus your favorite notion of finite set.</p>",
        "id": 201075056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592342054
    },
    {
        "content": "<p>So something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">full_subcategory</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">fin_types</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"c1\">-- the category of finite types</span>\n<span class=\"n\">def</span> <span class=\"n\">fin_type</span> <span class=\"o\">:=</span> <span class=\"n\">induced_category</span> <span class=\"bp\">_</span> <span class=\"n\">fin_types</span><span class=\"bp\">.</span><span class=\"n\">carrier</span>\n</code></pre></div>",
        "id": 201076132,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592342711
    },
    {
        "content": "<p>Oh. There's some stuff about full subcategories. I guess that's good enough in this case.</p>",
        "id": 201076356,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592342833
    },
    {
        "content": "<p>But this takes a predicate as an input, so I guess this is a roundabout way to make it work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fin_type</span> <span class=\"o\">:=</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">full_subcategory</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 201076905,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592343144
    },
    {
        "content": "<p>Yep, either of these will work but for the second one you will need to <code>choose</code> a <code>fintype</code> whenever you need it. In cases like this one where <code>fintype</code> is a subsingleton, you have a full subcategory in math but in Lean it's probably better to use the first approach--you don't quite have a subcategory, instead you have a category whose \"fibers\" of objects are subsingletons, if that makes sense.</p>",
        "id": 201077474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592343479
    },
    {
        "content": "<p>I was thinking about this earlier today actually - might it be nicer to use <code>bundled fintype</code> instead?</p>",
        "id": 201077630,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592343561
    },
    {
        "content": "<p>Do bundled fintypes already exist in mathlib?</p>",
        "id": 201078046,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592343794
    },
    {
        "content": "<p>bundled exists already, and fintype exists already</p>",
        "id": 201078086,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592343829
    },
    {
        "content": "<p>Oh. I'm not familiar with <code>bundled</code> where is this?</p>",
        "id": 201078171,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592343870
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span><span class=\"bp\">.</span><span class=\"n\">bundled</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Fintype</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">fintype</span>\n</code></pre></div>",
        "id": 201078220,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592343902
    },
    {
        "content": "<p>Ah! Awesome. Yes, so I guess something like this is equivalent to the first construction:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">full_subcategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span><span class=\"bp\">.</span><span class=\"n\">bundled</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">def</span> <span class=\"n\">FinType</span> <span class=\"o\">:=</span> <span class=\"n\">induced_category</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">bundled</span> <span class=\"n\">fintype</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 201078465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592344078
    },
    {
        "content": "<p>Sure, but I feel like you could just use <code>def Fintype := bundled fintype</code> as the category of finite types, without using <code>induced_category</code> or anything</p>",
        "id": 201078562,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592344138
    },
    {
        "content": "<p>hmm....</p>",
        "id": 201078613,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592344172
    },
    {
        "content": "<p>Take a look at <code>algebra.category.Group</code> (and friends) to see examples of how to use</p>",
        "id": 201078786,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592344262
    },
    {
        "content": "<p><code>bundled fintype</code> will be a large category right?, which might be undesirable.</p>",
        "id": 201079291,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592344577
    },
    {
        "content": "<p>I think this is necessary for what I'd like to eventually do, since I will eventually need to consider the \"usual embedding from the category of finite sets to sets\".</p>",
        "id": 201079628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592344848
    },
    {
        "content": "<p>I think the other alternatives above would also give a large category</p>",
        "id": 201079702,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592344902
    },
    {
        "content": "<p>If you want a small category you can make it out of <code>fin</code>.</p>",
        "id": 201079722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592344920
    },
    {
        "content": "<p>Functors don't have to go between categories with the same universe parameters</p>",
        "id": 201079795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592344959
    },
    {
        "content": "<p>Ah ok, so it's not a restriction!</p>",
        "id": 201079861,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592345018
    },
    {
        "content": "<p>It's a restriction, but not when it comes to considering functors</p>",
        "id": 201079952,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592345068
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span>  Did the category of finite sets ever make it into mathlib?</p>",
        "id": 214716217,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603812575
    },
    {
        "content": "<p>Not that I know of!</p>",
        "id": 214726026,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1603816281
    },
    {
        "content": "<p>Okay, I sketched some code for <code>FinType</code> here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/FinSet/src/category_theory/FinType.lean\">https://github.com/leanprover-community/mathlib/blob/FinSet/src/category_theory/FinType.lean</a><br>\nIt's all very basic for now, but I did add the equivalence of <code>FinType</code> with its skeletal version (objects indexed by nat).</p>",
        "id": 214743063,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603823196
    }
]