[
    {
        "content": "<p>Lemma: If a function taking values in <code>ennreal</code> has finite integral, then it is finite almost everywhere. Is this in mathlib somewhere? (I wrote out most of the proof -- see below -- before thinking to ask here... But I couldn't figure out how to say: now <code>g</code> is a simple function, so its integral is the measure of <code>s</code> times its value, which is infinite. But maybe there's a better way of doing this?...) Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.lebesgue</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ae_not_top_of_has_finite_integral</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory.measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀ᵐ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">,</span>  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">measure_theory.ae_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">μ_pos</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_iff.mpr</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"bp\">∈</span><span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">not_lt_top_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ite_eq_right_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">not_lt_top_iff</span><span class=\"o\">,</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">],</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">hfa</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">lt_top_iff_ne_top.mp</span> <span class=\"n\">this</span> <span class=\"n\">hfa</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">int_g_le_int_f</span> <span class=\"o\">:</span> <span class=\"bp\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">measure_theory.lintegral_mono</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">top_le_iff</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">int_f_eq_top</span> <span class=\"o\">:</span> <span class=\"bp\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">top_le_iff</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">this</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">int_g_le_int_f</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ennreal.not_lt_top.mpr</span> <span class=\"n\">int_f_eq_top</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 307594098,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1667414252
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.ae_lt_top\">docs#measure_theory.ae_lt_top</a></p>",
        "id": 307596003,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667414782
    },
    {
        "content": "<p>Argh. Seriously? <code>library_search</code> timed out. :(</p>",
        "id": 307596841,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1667415063
    },
    {
        "content": "<p>You can always set the timeout a bit higher when this happens, <a href=\"https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout\">https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout</a></p>",
        "id": 307598169,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667415502
    },
    {
        "content": "<p>My experience is that as soon as you import measure theory, <code>library_search</code> timing out is pretty much the norm</p>",
        "id": 307598227,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667415530
    },
    {
        "content": "<p>But you could have helped it by writing the hypothesis in the standard form: for ennreal we use <code>≠ ∞</code> in hypotheses and <code>&lt; ∞</code> in conclusions</p>",
        "id": 307598443,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667415603
    },
    {
        "content": "<p>Also your statement did not include any measurability condition. And without a.e.-measurability the integral is zero.</p>",
        "id": 307598664,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667415672
    },
    {
        "content": "<p>Unless that's not the case for <code>lintegral</code> but only for <code>integral</code>... But in any case, we don't have meaningful results for lintegral of non-a.e.-measurable functions.</p>",
        "id": 307598936,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667415780
    }
]