[
    {
        "content": "<p>Have I gone mad or do we really not have the definition of proper maps?</p>",
        "id": 305450827,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666389843
    },
    {
        "content": "<p>For example, is the following really missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.separation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_proper_map</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">K</span><span class=\"o\">⦄,</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous.is_proper_map_of_compact_of_t2</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">):</span>\n  <span class=\"n\">is_proper_map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">K</span> <span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hK.is_closed.preimage</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_compact</span>\n</code></pre></div>",
        "id": 305450930,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666389869
    },
    {
        "content": "<p>I have used related properties a number of times under the spelling <code>tendsto cocompact at_top</code> or <code>tendsto cocompact cocompact</code>.</p>",
        "id": 305451256,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666389993
    },
    {
        "content": "<p>There was some discussion along these lines before...</p>",
        "id": 305451411,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666390062
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cocompact_map\">docs#cocompact_map</a></p>",
        "id": 305451526,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666390107
    },
    {
        "content": "<p>Eg.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_norm_cocompact_at_top\">docs#tendsto_norm_cocompact_at_top</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_cocompact_mul_left\">docs#filter.tendsto_cocompact_mul_left</a></p>",
        "id": 305451561,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666390118
    },
    {
        "content": "<p>OK I'll look into this. At the very least, someone should add the phrase \"proper map\" to some doc strings.</p>",
        "id": 305451603,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666390140
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 305451622,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666390145
    },
    {
        "content": "<p>This is exactly what I need, thanks.</p>",
        "id": 305451837,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666390245
    },
    {
        "content": "<p>Here's the relevant PR anyway: <a href=\"https://github.com/leanprover-community/mathlib/pull/17107\">#17107</a></p>",
        "id": 305456886,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666393178
    },
    {
        "content": "<p>There was <a href=\"#narrow/stream/113488-general/topic/understanding.20universe.20error\">an attempt at the universally closed definition</a></p>",
        "id": 305468540,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666400017
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/116395-maths/topic/proper.20maps\">this discussion</a> related to why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cocompact_map\">docs#cocompact_map</a> is not called <code>proper_map</code></p>",
        "id": 305521272,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1666438140
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> that's a useful thread. Incidentally I think we should unbundle <code>cocompact_map</code> into <code>is_cocompact_map</code> like we have for <code>is_open_map</code> and <code>is_closed_map</code>.</p>",
        "id": 305527356,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666440987
    },
    {
        "content": "<p>If you want to unbundle it, that's fine, but please also leave the bundled version in place. These are the right morphisms I need for various things related to non-unital C star algebras. See, for example, the functorial property at the bottom of that file.</p>",
        "id": 305541521,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666447629
    },
    {
        "content": "<p>Note also that we have the statement that cocompact maps have the property you specify when the space is locally compact and Hausdorff. Otherwise they may not.</p>",
        "id": 305541832,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666447757
    },
    {
        "content": "<p>I have no plans to unbundle for now at least! I'm just going by my own made up guidelines that:</p>\n<ol>\n<li>It is preferable not to bundle to save boilerplate and to make it possible to combine predicates without authoring new classes</li>\n<li>The main exceptions to 1 are when the set of maps themselves are a primary object of study, or (often related) when we have important typeclass instances keyed off such a map</li>\n</ol>\n<p>To be concrete, I was mostly motivated to make my remark above because I wanted to speak of a cocompact group homomorphism and I cannot conveniently do this with the classes we currently have (but I could if we just had <code>is_cocompact_map</code> analogous to <code>is_open_map</code> and <code>is_closed_map</code>).</p>",
        "id": 305547949,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666450716
    },
    {
        "content": "<p>Thank you for creating <code>cocompact_map</code> in the first place though: implementation details aside, it was just what I needed (and I may be wrong about the bundling anyway).</p>",
        "id": 305548137,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666450793
    },
    {
        "content": "<p>Makes sense. For things which are common enough and span multiple domains, unbundled versions can certainly be useful.</p>",
        "id": 305552038,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666452675
    }
]