[
    {
        "content": "<p>I would like to merely state the result:</p>\n<blockquote>\n<p>Let M be a noetherian module over R, and suppose K and L are submodules of M such that <code>K ≅ M ⊕ L</code>. Then <code>L = ⊥</code>.</p>\n</blockquote>\n<p>How do I talk about the direct sum of two submodules?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 239700353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621576694
    },
    {
        "content": "<p>I don't particularly mind if we treat <code>L</code> just as another <code>R</code> module, rather than a submodule.</p>",
        "id": 239700382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621576754
    },
    {
        "content": "<p>Does the abstract product get a module structure?</p>",
        "id": 239700994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621577192
    },
    {
        "content": "<p>I mean <code>prod</code></p>",
        "id": 239701005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621577205
    },
    {
        "content": "<p>Ah, okay!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>typechecks at least. I'll see if I can prove it.</p>",
        "id": 239701260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621577406
    },
    {
        "content": "<p>I don't even know a maths proof</p>",
        "id": 239704931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621580211
    },
    {
        "content": "<p>There's a copy of <code>K</code> inside <code>M</code>. But since <code>K ≃ₗ[R] (M × L)</code>, there an even smaller copy of <code>K</code> inside that, with a copy of <code>L</code> to spare. Repeat this over and over again, obtaining more and more copies of <code>L</code>. The successive direct sums of these form an ascending chain, so it stabilizes, which is only possible if <code>L = ⊥</code>.</p>",
        "id": 239705645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621580669
    },
    {
        "content": "<p>Can you get here by showing the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.rank\">docs#module.rank</a> of the prod of two modules is the sum of their ranks? So <code>rank K = rank M + rank L</code>, but K is a submodule of M so <code>rank K ≤ rank M</code> and <code>rank L = 0</code></p>",
        "id": 239711722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621584278
    },
    {
        "content": "<p>I think it's true more generally that if a submodule <code>K</code> of <code>M</code> surjects onto <code>M</code> via <code>f</code>, then <code>f</code> is an isomorphism. The proof is the same: let <code>X 0</code> be the zero submodule of <code>K</code>, and recursively let <code>X (i+1)</code> be the preimage of <code>X i</code> under <code>f</code>. Then this must stabilise which is only possible if <code>f</code> has zero kernel</p>",
        "id": 239711934,
        "sender_full_name": "David Wärn",
        "timestamp": 1621584387
    },
    {
        "content": "<p>I don't think ranks will help you since <code>L</code> having zero rank does not mean <code>L</code> is zero, but it does provide the right intuition</p>",
        "id": 239712064,
        "sender_full_name": "David Wärn",
        "timestamp": 1621584460
    },
    {
        "content": "<p>You're right, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dim_zero_iff\">docs#dim_zero_iff</a> requires a field</p>",
        "id": 239712452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621584656
    },
    {
        "content": "<p>Also we now have lots of lemmas about <code>dim</code> that didn't get renamed when <code>rank</code> did...</p>",
        "id": 239712492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621584687
    },
    {
        "content": "<p>Yes, for general rings there is no good notion of rank. For integral domains you can tensor up to the field of factions and ask for the dimension, so then the rank of Z^n is Z but the rank of every finite abelian group and more generally every torsion abelian group will be 0</p>",
        "id": 239717152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621587012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/direct.20sums.20of.20submodules/near/239711934\">said</a>:</p>\n<blockquote>\n<p>I think it's true more generally that if a submodule <code>K</code> of <code>M</code> surjects onto <code>M</code> via <code>f</code>, then <code>f</code> is an isomorphism. The proof is the same: let <code>X 0</code> be the zero submodule of <code>K</code>, and recursively let <code>X (i+1)</code> be the preimage of <code>X i</code> under <code>f</code>. Then this must stabilise which is only possible if <code>f</code> has zero kernel</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>, could you explain this in more detail? I don't understand any of it. :-) Why are the <code>X i</code> increasing?</p>",
        "id": 239721520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621589204
    },
    {
        "content": "<p>I actually just yesterday proved that a surjective endomorphism (of a noetherian module) is injective, by looking at <code>(f ^ n).ker</code>. In fact I think this argument goes through unchanged if <code>f : K \\to M</code>, (i.e. a surjective map out of a submodule) rather than an endomorphism.</p>",
        "id": 239721887,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621589428
    },
    {
        "content": "<p>And... I'm an idiot. This is exactly what you said :-)</p>",
        "id": 239721944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621589466
    }
]