[
    {
        "content": "<p>Does this exist?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finsupp.sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f.sum</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 213056577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602518452
    },
    {
        "content": "<p>I can prove it as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monoid_hom.map_finsupp_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f.sum</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp.sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h.map_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">g2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">g2</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finsupp.sum</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213058013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602519159
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_monoid_hom.map_finsupp_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f.sum</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.map_sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 213060980,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602520769
    },
    {
        "content": "<p>Or better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">monoid_hom.map_finsupp_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→*</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f.prod</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f.prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.map_prod</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 213061124,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602520853
    },
    {
        "content": "<p>I failed to find it in <code>data/finsupp/basic</code></p>",
        "id": 213061141,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602520864
    },
    {
        "content": "<p>Are you happy to PR those?</p>",
        "id": 213063678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602522436
    },
    {
        "content": "<p>Feel free to PR. I won't have time for this (I mean, monitoring the status of the PR) today.</p>",
        "id": 213065259,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602523375
    },
    {
        "content": "<p>It's Canadian Thanksgiving!</p>",
        "id": 213065366,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602523443
    },
    {
        "content": "<p>That explains why all our favourite Canadians are online at once!  <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span></p>",
        "id": 213065484,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602523556
    },
    {
        "content": "<p>Oh, is <span class=\"user-mention\" data-user-id=\"326322\">@Jacques Carette</span> Canadian?</p>",
        "id": 213065608,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602523630
    },
    {
        "content": "<p>Yeah</p>",
        "id": 213065619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602523636
    },
    {
        "content": "<p>(I think so)</p>",
        "id": 213065850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602523769
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4585\">#4585</a></p>",
        "id": 213079162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602532078
    },
    {
        "content": "<p>Not included is <code>alg_hom.map_finsupp_prod</code> and <code>alg_hom.map_finsupp_sum</code> because I'm not sure where to put them</p>",
        "id": 213079251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602532130
    },
    {
        "content": "<p>^ Those are now done in <a href=\"https://github.com/leanprover-community/mathlib/issues/4603\">#4603</a>. It's annoying how when you extend a structure, you have to manually copy across all the lemmas about the base structure.</p>",
        "id": 213136441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602585559
    },
    {
        "content": "<p>Yes, I am Canadian.</p>",
        "id": 213152620,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1602595295
    },
    {
        "content": "<p>It looks like this already existed as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum_hom\">docs#finsupp.sum_hom</a></p>",
        "id": 213403475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602756567
    },
    {
        "content": "<p>Should I revert those PRs?</p>",
        "id": 213403489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602756577
    }
]