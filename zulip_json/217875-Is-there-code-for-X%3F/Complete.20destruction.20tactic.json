[
    {
        "content": "<p>Is there a tactic that completely destructs a structure? I want something like <code>obtain</code>/<code>rcases</code>, but where it recursively destructs every field that's a structure.</p>\n<p>My use case is for bundled homs instances, because new structure inheritance means that in general you can't just do <code>cases</code> on a bundled whatever-hom and get the underlying map. Instead, I'm resorting to writing brittle code like<br>\n<code>coe_injective' := λ f g h, by { obtain ⟨⟨_, _⟩, _⟩ := f, obtain ⟨⟨_, _⟩, _⟩ := g, congr' }</code><br>\nwhich will break as soon as the hom hierarchy changes.</p>",
        "id": 269017137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642943770
    },
    {
        "content": "<p>Any opinion, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>?</p>",
        "id": 269017139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642943777
    },
    {
        "content": "<p>Do you know about <code>rintros?</code> and <code>rcases?</code>?</p>",
        "id": 269017366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642944118
    },
    {
        "content": "<p>You can at least take inspiration from the code doing that.</p>",
        "id": 269017408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642944153
    },
    {
        "content": "<p>Yup, but once again they require me to write different things every time the precise inheritance order changes, something which will happen a lot when we build the hierarchy and also when we port to Lean 4 (because we'll give up on old inheritance for good).</p>",
        "id": 269017486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642944271
    },
    {
        "content": "<p>I wish <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.destruct\">docs#tactic.destruct</a> was I wanted.</p>",
        "id": 269017516,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642944314
    },
    {
        "content": "<p>Your use case sounds like the territory of <code>ext</code></p>",
        "id": 269017681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642944568
    },
    {
        "content": "<p>I think <code>ext</code> is unfortunately both too powerful and too demanding: I explicitly don't want the <code>ext</code> lemmas (they come from the instances I'm trying to prove) and if I had them it would apply <code>ext</code> onto the functions, which I don't want either.</p>",
        "id": 269017789,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642944715
    },
    {
        "content": "<p>In contrast, <code>ext1</code> is not powerful enough, as reaching the correct level of destruction will require several applications of it, and a variable number of them, which is what I'm trying to avoid.</p>",
        "id": 269017928,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642944902
    },
    {
        "content": "<p>Maybe it would help to give an actual example of what you want to do?</p>",
        "id": 269018585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642945787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Complete.20destruction.20tactic/near/269017789\">said</a>:</p>\n<blockquote>\n<p>I think <code>ext</code> is unfortunately both too powerful and too demanding: I explicitly don't want the <code>ext</code> lemmas (they come from the instances I'm trying to prove) and if I had them it would apply <code>ext</code> onto the functions, which I don't want either.</p>\n</blockquote>\n<p>Does <code>ext : 3</code> (or some other number) work?</p>",
        "id": 269018632,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642945809
    },
    {
        "content": "<p>Even if it does, that's not what I want, because I don't want to have to tweak the number.</p>",
        "id": 269018652,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642945874
    },
    {
        "content": "<p>This kind of issue also seems implicit in what you're asking for though--how much destruction is \"complete\"?</p>",
        "id": 269018663,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642945902
    },
    {
        "content": "<p>when no field is a structure anymore</p>",
        "id": 269018711,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642945938
    },
    {
        "content": "<p>Actually, we could weaken that to \"no Type-valued structure\"</p>",
        "id": 269018726,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642945970
    },
    {
        "content": "<p>But I guess I don't really buy that next week, you'll have the same problem but instead of having a function inside you have another structure, which you don't want to destruct this time, etc</p>",
        "id": 269018729,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642945976
    },
    {
        "content": "<p>I totally get that, but it doesn't happen in my case. What I'm asking for is probably quite specific.</p>",
        "id": 269018748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642946029
    },
    {
        "content": "<p>OK well assuming you're trying to prove <code>coe_injective'</code> for e.g. <code>ring_hom</code>--is there a reason <code>ring_hom</code> doesn't have <code>@[ext]</code>?</p>",
        "id": 269018891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642946256
    },
    {
        "content": "<p>If it did then <code>ext1</code> should be the correct amount of <code>cases</code>, right? And we could just not prove the extensionality lemma manually later.</p>",
        "id": 269018940,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642946311
    },
    {
        "content": "<p>The reason is that extensionality for <code>ring_hom</code> comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like.ext\">docs#fun_like.ext</a> through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.ring_hom_class\">docs#ring_hom.ring_hom_class</a></p>",
        "id": 269019033,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642946407
    },
    {
        "content": "<p>It doesn't come from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.ext\">docs#ring_hom.ext</a>?</p>",
        "id": 269019136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642946506
    },
    {
        "content": "<p>Oh in that case it seems it does <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269019191,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642946531
    },
    {
        "content": "<p>I might be too simple-minded here because I don't know anything about this <code>fun_like</code> stuff.</p>",
        "id": 269019196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642946542
    },
    {
        "content": "<p>I learned about <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#destruct\">tactic#destruct</a> recently, which might be helpful. You can set up a destruction loop to completely break something apart. It likely will break things up <em>too</em> much, though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">destruct</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"#narrow/stream/113489-new-members/topic/generated.20names/near/268491636\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/generated.20names/near/268491636</a></p>",
        "id": 269031763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642962133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Complete.20destruction.20tactic/near/269018891\">said</a>:</p>\n<blockquote>\n<p>OK well assuming you're trying to prove <code>coe_injective'</code> for e.g. <code>ring_hom</code>--is there a reason <code>ring_hom</code> doesn't have <code>@[ext]</code>?</p>\n</blockquote>\n<p>Do you mean something like <code>@[ext] structure ring_hom extends monoid_hom, add_monoid_hom</code>? That attribute generates the wrong <code>ext</code> lemma since it involves the fields, <code>f.to_fun = g.to_fun</code> instead of the coercions <code>⇑ f = ⇑ g</code>.</p>",
        "id": 269088138,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643021797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Complete.20destruction.20tactic/near/269019191\">said</a>:</p>\n<blockquote>\n<p>Oh in that case it seems it does <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>Every morphism still has its own <code>ext</code> lemma. I copied this from <code>set_like</code>, as I understand the <code>ext</code> tactic doesn't do a typeclass search to look for lemmas, so it can't find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like.ext\">docs#fun_like.ext</a>.</p>",
        "id": 269088384,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643021912
    },
    {
        "content": "<p>Ah I was missing that part!</p>",
        "id": 269088441,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643021938
    },
    {
        "content": "<p>I think we can get quite far by adapting the code implementing <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#ext\">attribute#ext</a>, let me see if I can quickly assemble something...</p>",
        "id": 269089292,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643022362
    },
    {
        "content": "<p>Still needs a bit of cleanup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ring_hom'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_hom</span> <span class=\"o\">:</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">to_hom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_hom</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">to_hom</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- Does `struct_name` refer to a `Type`-valued structure?</span>\n\n<span class=\"sd\">That is, is `struct_name` an inductive type with one constructor,</span>\n<span class=\"sd\">living in some universe `Type*` instead of `Prop`?</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">is_Type_valued_struct</span> <span class=\"o\">(</span><span class=\"n\">struct_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n   <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"n\">env.structure_fields</span> <span class=\"n\">struct_name</span> <span class=\"k\">with</span>  <span class=\"c1\">-- TODO: is this the best way to check that it is a struct?</span>\n   <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">ff</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n     <span class=\"n\">struct_decl</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">struct_name</span><span class=\"o\">,</span>\n     <span class=\"n\">struct_name_full</span> <span class=\"bp\">←</span> <span class=\"n\">resolve_constant</span> <span class=\"n\">struct_name</span><span class=\"o\">,</span>\n     <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">expr.const</span> <span class=\"n\">tt</span> <span class=\"n\">struct_name_full</span> <span class=\"bp\">$</span> <span class=\"n\">struct_decl.univ_params.map</span> <span class=\"n\">level.param</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n     <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n     <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n   <span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- `struct_bash_step h`: splits the `Type`-valued structure `h` into all its fields;</span>\n<span class=\"sd\">it does nothing if `h` is `Prop`-valued or not a structure.</span>\n\n<span class=\"sd\">Returns the newly created fields.</span>\n\n<span class=\"sd\">Useful for extensionality-like proofs.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">struct_bash_step</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">struct_type</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">head_beta</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">struct_type.is_app</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">struct_type.get_app_fn.is_constant</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n   <span class=\"k\">else</span> <span class=\"k\">do</span>\n     <span class=\"k\">let</span> <span class=\"n\">struct_name</span> <span class=\"o\">:=</span> <span class=\"n\">struct_type.get_app_fn.const_name</span><span class=\"o\">,</span>\n     <span class=\"n\">is_struct</span> <span class=\"bp\">←</span> <span class=\"n\">is_Type_valued_struct</span> <span class=\"n\">struct_name</span><span class=\"o\">,</span>\n     <span class=\"k\">if</span> <span class=\"n\">is_struct</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n       <span class=\"n\">new_exprs</span> <span class=\"bp\">←</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n       <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">new_exprs</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">))</span>\n     <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n\n<span class=\"sd\">/-- `struct_bash structs`: recursively splits each `Type`-valued structure in `structs` into all its fields;</span>\n<span class=\"sd\">it does nothing if a structure is `Prop`-valued or not a structure.</span>\n\n<span class=\"sd\">Useful for extensionality-like proofs.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">struct_bash</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">initial_structs</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">new_structs</span> <span class=\"bp\">←</span> <span class=\"n\">initial_structs.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">list.reverse</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">struct_bash_step</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n   <span class=\"k\">match</span> <span class=\"n\">new_structs</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n   <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">struct_bash</span> <span class=\"n\">new_structs.join</span>\n   <span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n\n<span class=\"sd\">/-- `struct_bash s`: recursively splits the `Type`-valued structure `s` into all its fields;</span>\n<span class=\"sd\">it does nothing if `s` is `Prop`-valued or not a structure.</span>\n\n<span class=\"sd\">Useful for extensionality-like proofs.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">struct_bash</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.many</span> <span class=\"n\">lean.parser.ident</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">initial_structs</span> <span class=\"bp\">←</span> <span class=\"n\">h.mmap</span> <span class=\"n\">get_local</span><span class=\"o\">,</span>\n   <span class=\"n\">_root_.struct_bash</span> <span class=\"n\">initial_structs</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ring_hom.fun_like'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fun_like</span> <span class=\"o\">(</span><span class=\"n\">ring_hom'</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_hom.to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">struct_bash</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">congr'</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 269096633,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643026573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, I remember you had trouble too with the <code>case</code> tactic renaming your locals in the presence of dependencies, how did you end up fixing that?</p>",
        "id": 269096844,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643026710
    },
    {
        "content": "<p>Sorry what's the issue exactly?</p>",
        "id": 269097833,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643027332
    },
    {
        "content": "<p>I have a list of hypotheses (<code>: list expr</code>) to apply <code>tactic.cases</code> on, however if you do <code>cases h1</code> and <code>h2</code> depends on <code>h1</code> then <code>h2</code> gets reverted and re-introduced, so the expression <code>h2</code> doesn't refer to anything in the context anymore.</p>",
        "id": 269098289,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643027624
    },
    {
        "content": "<p>Ah yes, that issue. Afaict there are two ways to address this:</p>\n<ul>\n<li>Identify hypotheses by their user names. You can rename before and after to make sure these are unique, though this messes up error messages, so ideally you only rename when necessary. This is what I ended up doing.</li>\n<li>Maintain a mapping between the old and new unique names of these hyps and update them in the relevant expressions. This is what Lean 4 does with its <code>FVSubst</code>s. Not all primitive tactics report such mappings, but <code>cases</code> does afair.</li>\n</ul>",
        "id": 269099481,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643028317
    },
    {
        "content": "<p>Aha, so in that first approach you'd do <code>h ← get_local h</code> right before you call <code>cases h</code>, and then map <code>expr.const_name</code> over the new locals <code>: expr</code> that <code>cases h</code> returns.</p>",
        "id": 269099932,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643028586
    },
    {
        "content": "<p>I guess <code>local_pp_name</code> instead of <code>const_name</code>; other than that sounds good. But beware of duplicate pp names.</p>",
        "id": 269100952,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643029096
    }
]