[
    {
        "content": "<p>What is the easiest way to prove this? I have a very low-level proof, so I hope there is a better way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p.fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">W</span> <span class=\"bp\">∧</span> <span class=\"n\">p.snd</span> <span class=\"bp\">&lt;</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">W</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set.finite.fintype</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mk</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">set.finite.prod</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">H</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.finite_lt_nat</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">W</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">W</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.mul_div_left</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_of_succ_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_div</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat.dvd_add_right</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_left</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n        <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">}}},</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">finset.card_eq_of_bijective</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"n\">W</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">W</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n      <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">add_lt_add_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">simp_rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.lt_add_right</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat.lt_add_right</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.lt_succ_self</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.mod_eq_of_lt</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"n\">h₁</span> <span class=\"o\">}}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mk</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.mod_lt</span><span class=\"o\">,</span> <span class=\"n\">by_contra'</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.div_lt_of_lt_mul</span> <span class=\"n\">h</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mk</span><span class=\"o\">],</span> <span class=\"n\">rintro</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.div_add_mod'</span> <span class=\"n\">i</span> <span class=\"n\">W</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.div_add_mod'</span> <span class=\"n\">j</span> <span class=\"n\">W</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">h₆</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 280791566,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651407586
    },
    {
        "content": "<p>This is much less bad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p.fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">W</span> <span class=\"bp\">∧</span> <span class=\"n\">p.snd</span> <span class=\"bp\">&lt;</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk_fin</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">W</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_mk_fin</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">mk_fin</span> <span class=\"n\">W</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mk_fin</span><span class=\"o\">,</span> <span class=\"n\">mk</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">W</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_equiv</span> <span class=\"o\">(</span><span class=\"n\">mk_fin</span> <span class=\"n\">W</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">equiv.set_congr</span> <span class=\"o\">(</span><span class=\"n\">coe_mk_fin</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">W</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">coe_mk_fin</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- or just `simp`</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mk_fin</span><span class=\"o\">,</span> <span class=\"n\">set.to_finset_card</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_sort_coe</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.card_product</span><span class=\"o\">,</span> <span class=\"n\">finset.card_range</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280791981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651408194
    },
    {
        "content": "<p>Of course, it would be easier to just use the finset in the first place</p>",
        "id": 280792058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651408281
    },
    {
        "content": "<p>Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">t.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280817599,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651444308
    },
    {
        "content": "<p>Or this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">#</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">t.to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280817603,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651444318
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_congr\">docs#fintype.card_congr</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.eq\">docs#cardinal.eq</a> will make progress on the second one</p>",
        "id": 280817731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651444491
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_coe\">docs#fintype.card_coe</a> in reverse basically closes the first one</p>",
        "id": 280817918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651444797
    }
]