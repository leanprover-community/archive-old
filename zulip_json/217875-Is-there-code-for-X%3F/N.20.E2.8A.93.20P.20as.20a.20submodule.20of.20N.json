[
    {
        "content": "<p>Given an <code>R</code>-module <code>M</code> and <code>N P : submodule R M</code>, is there a way to view <code>N ⊓ P</code> as a submodule of <code>N</code> (or <code>P</code>, respectively)?</p>\n<p>I am thinking of something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">submodule.inter</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">set.restrict</span> <span class=\"n\">P.1</span> <span class=\"n\">N.1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">set.restrict_eq</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">P.2</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.restrict_eq</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.restrict_eq</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.restrict_eq</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">P.3</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.restrict_eq</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.restrict_eq</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">P.4</span> <span class=\"n\">c</span> <span class=\"n\">hx</span><span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'd assume something similar is already in mathlib, or the problem can be resolved without such a definition, but I didn't find the correct statement in the <code>submodule</code> section / couldn't really figure out how to do it with what there is. Of course, there should then also be lemmas relating <code>submodule.inter N P</code> with <code>N ⊓ P</code>.</p>",
        "id": 271864292,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1644861741
    },
    {
        "content": "<p>More generally, there should be a way to view <code>N</code> as submodule of <code>P</code> for <code>N ≤ P</code>.</p>",
        "id": 271864872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644861988
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.of_le\">docs#submodule.of_le</a>?</p>",
        "id": 271865022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644862044
    },
    {
        "content": "<p>Well, and then you need to <code>submodule.map</code> the <code>⊤</code> submodule through that...</p>",
        "id": 271865255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644862122
    },
    {
        "content": "<p>Hopefully there's a shorter way to express the result.</p>",
        "id": 271865292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644862138
    },
    {
        "content": "<p>Is it just <code>N.comap P.subtype</code>?</p>",
        "id": 271865689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644862295
    },
    {
        "content": "<p>Or vice versa?</p>",
        "id": 271865709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644862301
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.subgroup_of\">docs#subgroup.subgroup_of</a> which uses that definition, we could repeat it for modules</p>",
        "id": 271865803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644862326
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.comap_subtype_equiv_of_le\">docs#submodule.comap_subtype_equiv_of_le</a> is also close</p>",
        "id": 271865867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644862352
    },
    {
        "content": "<p>Oh that looks good! I'll try it out tomorrow<br>\nThank you!</p>",
        "id": 271866116,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1644862449
    },
    {
        "content": "<p>Yes, exactly what I needed. Thanks!</p>",
        "id": 271938013,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1644912108
    }
]