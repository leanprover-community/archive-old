[
    {
        "content": "<p>I use ring a lot as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But if I try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">))</span>\n        <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>ring fails. Is there a way to get ring to work for Euclidean space vectors?</p>",
        "id": 266631242,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641154907
    },
    {
        "content": "<p>Does <code>abel</code>work?</p>",
        "id": 266631593,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641155476
    },
    {
        "content": "<p>What ring structure would you want on the euclidean space? I doubt that instance is defined in mathlib.</p>",
        "id": 266631651,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641155565
    },
    {
        "content": "<p>Maybe you just want pointwise addition/multiplication? In that case, you should use <code>fin 10 → ℝ</code>.</p>",
        "id": 266631821,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641155826
    },
    {
        "content": "<p><code>abel</code> works thanks</p>",
        "id": 266632399,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641156769
    },
    {
        "content": "<p>OK next question (related). How about linarith?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">w</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>Works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">w</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>Fails.</p>",
        "id": 266634903,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641160569
    },
    {
        "content": "<p>See a message I just wrote in <a href=\"#narrow/stream/113489-new-members/topic/.60ring.60.20using.20hypothesis/near/266634413\">another stream</a>, replacing <code>ring</code> with <code>abel</code></p>",
        "id": 266634988,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641160752
    },
    {
        "content": "<p>Essentially, figure out for yourself the coefficients <code>linarith</code> would have used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h'</span><span class=\"bp\">;</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266635260,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641161044
    },
    {
        "content": "<p>By the way, do you really need to be working with <code>euclidean_space</code>?  You might find you have fewer distracting details if you assume <code>{x y z w : V}</code> where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 266635302,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641161161
    },
    {
        "content": "<p>That's OK but seems more low-level than I was hoping for. Does Linarith just not work unless it's basically the reals or some similar \"ordered field\"?</p>",
        "id": 266636058,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641162195
    },
    {
        "content": "<p>Also why do you need to use \";\" after convert?</p>",
        "id": 266636062,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641162214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"441939\">Patrick Johnstone</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ring.20for.20vector.20spaces/near/266636062\">said</a>:</p>\n<blockquote>\n<p>Also why do you need to use \";\" after convert?</p>\n</blockquote>\n<p>In this case you probably don't, but it makes the technique more general (it allows it to work for a system of 10 equations rather than just one).</p>",
        "id": 266636127,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641162284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"441939\">Patrick Johnstone</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ring.20for.20vector.20spaces/near/266636058\">said</a>:</p>\n<blockquote>\n<p>Does Linarith just not work unless it's basically the reals or some similar \"ordered field\"?</p>\n</blockquote>\n<p>Right, I think it's ordered commutative semirings.</p>",
        "id": 266636137,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641162316
    },
    {
        "content": "<p>Is the problem with <code>eucliean_space \\R (fin 10)</code> for linarith that it is not \"totally ordered\"?</p>",
        "id": 266636276,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641162507
    },
    {
        "content": "<p>It sure isn't!</p>",
        "id": 266636278,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641162522
    },
    {
        "content": "<p>Ok and there isn't a linarith for equalities only? That doesn't need the commutative semiring to be ordered? That would seem to simplify things only trying to prove equalities.</p>",
        "id": 266636416,
        "sender_full_name": "Patrick Johnstone",
        "timestamp": 1641162725
    },
    {
        "content": "<p>Please read the thread I linked above.  Basically you're asking a for a \"Grobner basis tactic\", which doesn't exist currently in Lean, but which you can approximate by providing the coefficients yourself -- I indicated an efficient syntax for doing this.</p>",
        "id": 266636450,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641162820
    }
]