[
    {
        "content": "<p>We have the very convenient <code>nat_ceil</code>. Why don't we have <code>nat_floor</code>? Is there a cheap way to emulate it, or something?</p>",
        "id": 241554646,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622821579
    },
    {
        "content": "<p>Just looking at the definition, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.to_nat\">docs#int.to_nat</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/floor\">docs#floor</a></p>",
        "id": 241554939,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622821704
    },
    {
        "content": "<p>Hmm... should I make an API then?</p>",
        "id": 241555214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622821831
    },
    {
        "content": "<p>If you're able to work with int-valued floors, you can just use the floor API. Do you absolutely need naturals?</p>",
        "id": 241555467,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622821934
    },
    {
        "content": "<p>Yeah it would be better because I'm using it with <code>nat.iterate</code>.</p>",
        "id": 241556193,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622822270
    },
    {
        "content": "<p>Probably we should have floor_semirings</p>",
        "id": 241559710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622823818
    },
    {
        "content": "<p>What are the axioms for a <code>floor_semiring</code>?</p>",
        "id": 241559977,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622823931
    },
    {
        "content": "<p><code>nnreal</code> should be one :-)</p>",
        "id": 241560138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622824000
    },
    {
        "content": "<p><code>nat</code> also :-)</p>",
        "id": 241560446,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622824133
    },
    {
        "content": "<p>How about just change <code>linear_ordered_ring</code> to <code>linear_ordered_semiring</code> in the definition of <code>floor_ring</code>? Whatever that is...</p>",
        "id": 241560664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622824212
    },
    {
        "content": "<p><code>floor</code> is a Galois connection from the semiring to the integers.</p>",
        "id": 241560800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622824268
    },
    {
        "content": "<p>I didn't know <code>floor_ring</code> was a thing...</p>",
        "id": 241560947,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622824328
    },
    {
        "content": "<p>Probably even a Galois insertion, as floor of an integer is itself.</p>",
        "id": 241560961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622824333
    },
    {
        "content": "<p>Beware Kevin just confessed he became mad.</p>",
        "id": 241561036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622824375
    },
    {
        "content": "<p>Ahah, what? <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 241561065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622824392
    },
    {
        "content": "<p>I mean, he always has been.</p>",
        "id": 241561082,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622824402
    },
    {
        "content": "<p>Who in the world would want to render undergraduates useful?</p>",
        "id": 241561130,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622824423
    },
    {
        "content": "<p>Still it got <a href=\"#narrow/stream/236604-Zulip-meta/topic/wide.20code.20blocks/near/241558135\">worse</a>.</p>",
        "id": 241561361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622824502
    },
    {
        "content": "<p>Oh</p>",
        "id": 241561514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622824568
    },
    {
        "content": "<p>After checking, I think <code>floor_semiring</code> is indeed a good idea.</p>",
        "id": 241562283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622824963
    },
    {
        "content": "<p>The relationship between floor_ring and floor_semiring is still an issue since a semiring doesn't have a natural coercion from int</p>",
        "id": 241562909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622825251
    },
    {
        "content": "<p>Oh that's interesting. Maybe a floor_semiring should have a floor function to nat and really not be a floor ring?</p>",
        "id": 241563082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622825332
    },
    {
        "content": "<p>Yeah, we can layer them.</p>",
        "id": 241563102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622825345
    },
    {
        "content": "<p><code>floor_semiring</code> would readily extend <code>nat_ceil</code> (and the yet inexistent <code>nat_floor</code>) and maybe we could set up an inference from <code>floor_ring</code> to <code>floor_semiring</code> using <code>int.to_nat</code>?</p>",
        "id": 241563268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622825419
    },
    {
        "content": "<p>I can't really imagine a nat-valued floor function on the reals, this is what's confusing me.</p>",
        "id": 241564032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622825769
    },
    {
        "content": "<p>If you want to define semiring_floor of (-1 : real) to be 0 then it doesn't satisfy the Galois connection property: (0 : nat) &lt;= floor(-1) but 0 isn't &lt;= -1 in the reals.</p>",
        "id": 241564175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622825856
    },
    {
        "content": "<p>I'm now writing the API. Shall I mention directly the gc in the class definition?</p>",
        "id": 241572940,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622829936
    },
    {
        "content": "<p>And here I hit a problem. I have two conflicting notions of floor. Is there any way to give them the same name, but allow Lean to get the best one regarding the situation? (it sounds prone to creating bugs...) That is, it gets the ring floor when dealing with a <code>floor_ring</code> and the semiring floor when dealing with a<code>floor_semiring</code>.</p>",
        "id": 241574659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622830861
    },
    {
        "content": "<p>Actually, the name is not too bad because we can define notation. But what about notation then?</p>",
        "id": 241575899,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622831536
    },
    {
        "content": "<p>This is what typeclasses are for. Except what happens if something is both a floor_ring and a floor_semiring?</p>",
        "id": 241578859,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622833068
    },
    {
        "content": "<p>I don't think that happens because a <code>floor_ring</code> is bounded below and a <code>floor_semiring</code>is unbounded.</p>",
        "id": 241581107,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622834250
    },
    {
        "content": "<p>Of course, you can take different ordering of the same type, but that surely doesn't come up in practice when using floors and ceils.</p>",
        "id": 241581161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622834280
    },
    {
        "content": "<p>It's actually not that trivial to generalise that stuff... For example, how can you define the fractional part without referring to substraction?</p>",
        "id": 241588471,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622838140
    },
    {
        "content": "<p>Is there something like a partial substraction where <code>a - b + b = a</code> if <code>b ≤ a</code>, as for ℕ?</p>",
        "id": 241588702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622838297
    },
    {
        "content": "<p>\"monus\" has been used for that before I think. Pi-like types with nat in their codomain would inherit such a structure</p>",
        "id": 241596464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842932
    },
    {
        "content": "<p>Where do I find that? The docs search is inconclusive.</p>",
        "id": 241646626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622913533
    },
    {
        "content": "<p><code>monus</code> only exists in zulip threads</p>",
        "id": 241648355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622915938
    },
    {
        "content": "<p>Isn't it basically equivalent to some cancellative assumption? <code>a+b=a+c -&gt; b=c</code>?</p>",
        "id": 241648459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622916052
    },
    {
        "content": "<p>Oh maybe it's equivalent to this \"canonical order\" assumption as in canonically_ordered_monoid</p>",
        "id": 241648486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622916093
    },
    {
        "content": "<p>Not really. The cancellative assumption asserts that this monus is unique. What I want is the existence</p>",
        "id": 241648491,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622916099
    },
    {
        "content": "<p>Then canonical order I think</p>",
        "id": 241648507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622916115
    },
    {
        "content": "<p>Wait, maybe you just want half of that implication. The integers are not canonically ordered, for example</p>",
        "id": 241648584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622916178
    },
    {
        "content": "<p>Aren't they?</p>",
        "id": 241648617,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622916222
    },
    {
        "content": "<p>the reverse implication fails</p>",
        "id": 241648627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622916232
    },
    {
        "content": "<p><code>a - b + b = a</code> does not imply <code>b &lt;= a</code></p>",
        "id": 241648675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622916245
    },
    {
        "content": "<p>I don't think we have a version of canonically ordered with just one side of the implication</p>",
        "id": 241648704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622916287
    },
    {
        "content": "<p>And I guess linear_ordered isn't enough?</p>",
        "id": 241648718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622916307
    },
    {
        "content": "<p>No, it's off the beaten path of algebraic classes since negatives make it fail</p>",
        "id": 241648755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622916359
    },
    {
        "content": "<p>Argh</p>",
        "id": 241648803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622916373
    },
    {
        "content": "<p>And what about ceil?</p>",
        "id": 241648806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622916378
    },
    {
        "content": "<p>Isn't N conditionnally complete?</p>",
        "id": 241648832,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622916420
    },
    {
        "content": "<p>Ah wait, that's bad. I want to match <code>floor</code>. So maybe I can define <code>ceil x := ite (floor x = x) x (floor x + 1)</code>? Sounds a bit tricky to prove stuff about.</p>",
        "id": 241648961,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622916599
    },
    {
        "content": "<p>If  a <code>linear_ordered_semiring</code> really is the positive half of a <code>linear_ordered_ring</code>, how come it be that hard</p>",
        "id": 241649055,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622916658
    },
    {
        "content": "<p>If you really want the integers to not be a floor semiring then you can use canonically ordered. The issue is whether the floor is int valued or nat valued. If it's nat valued then the key floor axiom implies that everything in the ring is &gt;= 0 and then you're fine to use canonically ordered additive monoids. Maybe they should not be called floor semirings though, maybe semifloor semirings or something?</p>",
        "id": 241649831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622917554
    },
    {
        "content": "<p>My instinct about a floor semiring is that it should just be a floor ring without the - and in particular the floor will be int valued.</p>",
        "id": 241649905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622917608
    },
    {
        "content": "<p>Yes, I have the same instinct. But then the <code>floor_ring</code> <code>ceil</code> is defined as <code>-floor (-x)</code> and that's not really usable as a definition anymore.</p>",
        "id": 241650828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622918821
    },
    {
        "content": "<p>That's interesting, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\R_{\\geq0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> has a perfectly good notion of <code>ceil</code>.</p>",
        "id": 241651657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622919892
    },
    {
        "content": "<p>Yes absolutely. But I think this is related to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\R_{\\ge 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> being archimedean.</p>",
        "id": 241651729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622919963
    },
    {
        "content": "<p>But don't forget that we get to specify the floor function. So the ceil function has to stem from <code>floor</code> somehow.</p>",
        "id": 241651747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622920000
    },
    {
        "content": "<p>The commutative additive monoids satisfying this cancellation law a+b=a+c -&gt; b=c are precisely the commutative additive monoids which are submonoids of commutative additive groups. So one could then ask the same question: if you have a semiring with an int-valued floor and it satisfies additive cancellation, does the associated ring that you get by \"formally adding negatives\" also get a floor ring structure? This is just the same ceil question in disguise.</p>",
        "id": 241651756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622920015
    },
    {
        "content": "<p>I'm tempted to say yes but this sounds a bit tricky because negating floor makes it into a ceil (I guess that was your point). So maybe using <code>ceil x = floor x or floor x + 1</code> is an alternative?</p>",
        "id": 241652486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622921102
    },
    {
        "content": "<p>Tangent question does <code>floor_ring</code> imply <code>archimedean</code>?</p>",
        "id": 241652498,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622921120
    },
    {
        "content": "<p>perhaps not directly but they are closely related (in the same file, even)</p>",
        "id": 241654326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622923943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> thought about this sort of thing. What started off as a simple-looking project to define decimal expansions of real numbers in lean (something which might still not be done!) turned into a rabbit hole of trying to figure out precisely which rings had some kind of notion of expansion of this kind and ultimately I think we came up with some pretty weird examples of floor rings but I can no longer remember them. Maybe Calle still can</p>",
        "id": 241654356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622924012
    },
    {
        "content": "<p>actually they aren't in the same file anymore. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/archimedean.floor_ring\">docs#archimedean.floor_ring</a> shows that an archimedean ring is a floor ring but I don't see the converse in the library</p>",
        "id": 241654412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622924094
    },
    {
        "content": "<p>I'm pretty sure that if it's not there then we knew an example where it wasn't true</p>",
        "id": 241654449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622924162
    },
    {
        "content": "<p>I think it should be true, although the proof might rely on an additional assumption like being a field so that you get the simplified characterization of archimedean</p>",
        "id": 241654545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622924297
    },
    {
        "content": "<p>it follows pretty directly from <code>archimedean_iff_rat_le</code> and <code>le_ceil</code></p>",
        "id": 241654621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622924410
    },
    {
        "content": "<p>I think Calle and I spent some time thinking about noncommutative floor rings, eg add two non-commuting polynomial variables to the integers and make them infinitesimally small</p>",
        "id": 241654624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622924418
    },
    {
        "content": "<p>We definitely weren't restricting to fields</p>",
        "id": 241654630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622924447
    },
    {
        "content": "<p>We had examples where the decimal expansion of a number didn't converge to the number etc</p>",
        "id": 241654646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622924484
    },
    {
        "content": "<p>It might not be an instance because you need to say something like floor_ring + field that would be a diamond</p>",
        "id": 241654649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622924490
    },
    {
        "content": "<p>This thread is relevant:<br>\n<a href=\"#narrow/stream/113488-general/topic/subtraction.20in.20canonically_ordered_add_monoid\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/subtraction.20in.20canonically_ordered_add_monoid</a><br>\nI wanted to define truncated subtraction (\"monus\") for all canonically ordered monoids. <br>\nI started on it, but at that time it was very hard, since I needed a lot more classes to prove specific properties about this subtraction (in a good amount of generality). I am planning to retry with all the new ordered-monoid classes we recently got.</p>",
        "id": 241679195,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622966164
    },
    {
        "content": "<p>Ah great!</p>",
        "id": 241681161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622969207
    }
]