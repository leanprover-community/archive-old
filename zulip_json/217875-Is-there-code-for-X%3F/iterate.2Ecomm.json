[
    {
        "content": "<p>Dear All,</p>\n<p>I think that this lemma is not part of <code>logic/function/iterate</code>.  If it is not there, do you think that it would be a good idea to add it?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comm</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">iterate_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_comm</span><span class=\"o\">,</span> <span class=\"n\">iterate_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233682418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617898493
    },
    {
        "content": "<p>Seems reasonable, I wonder if we should establish a simp-normal form for these sorts of things though, I see there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_add\">docs#function.iterate_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_mul\">docs#function.iterate_mul</a> both of which insert more iteration symbols rather than arithmetic operations on nats neither of which is <code>@[simp]</code> though, so I would think adding the symm of those lemmas as simp lemmas would help when working with an expression like this.</p>",
        "id": 233683284,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1617898892
    },
    {
        "content": "<p>I don't agree that the symm of those is the right direction for simp. There are basically no lemmas about <code>f^[2]</code>, for example. But if you splat it out, you're more likely to have lemmas about application or composition</p>",
        "id": 233685653,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617899883
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7121\">#7121</a></p>",
        "id": 233705472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617906679
    },
    {
        "content": "<p>Just noticed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.commute.iterate_iterate_self\">docs#function.commute.iterate_iterate_self</a> which seems related.</p>",
        "id": 233705884,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617906818
    },
    {
        "content": "<p>I do not know much about what the best for formalization would be, but my instinct would be to transfer everything to the \"exponents\" and then act there.  So, I would have formulated <code>iterate_add</code> and <code>iterate_mul</code> in reverse order to the current one.  Since Yuri made this choice, I am probably wrong!</p>",
        "id": 233706039,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617906862
    },
    {
        "content": "<p>Bryan, the statement that you mention seems indeed very close, but I am failing to use it...</p>",
        "id": 233707413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617907374
    },
    {
        "content": "<p>Right, I'm not sure how <code>commute</code> is supposed to be used, but it looks like there's some useful API around it.</p>",
        "id": 233708034,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617907627
    },
    {
        "content": "<p>I've gotten to having to prove <code>f^[n]^[m] x = f^[n] (f^[m] x)</code>, but I am struggling to make progress.</p>",
        "id": 233708202,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617907685
    },
    {
        "content": "<p>Wait, that is equivalent to <code>f^[n * m] x = f^[n + m] x</code>: this is not what I want!  No wonder I was not making progress!</p>\n<p>Bryan, I think that the one that you mention is <em>addition</em> of exponents, not <em>multiplication</em>!</p>",
        "id": 233708438,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617907786
    },
    {
        "content": "<p>Ah, sorry about that!</p>",
        "id": 233708454,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617907797
    },
    {
        "content": "<p>It's commutativity of multiplication in the group of endos</p>",
        "id": 233708538,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617907819
    },
    {
        "content": "<p>No worries!  I find it somewhat confusing myself.</p>",
        "id": 233708542,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617907821
    },
    {
        "content": "<p>function.commute is missing a helper lemma about application</p>",
        "id": 233708661,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617907876
    },
    {
        "content": "<p>Yakov, I would like to understand better your last statement: would you mind expanding a bit and giving me a hint as to what kind of lemma you are thinking of?</p>",
        "id": 233708796,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617907934
    },
    {
        "content": "<p>I would be happy to add it to my \"one-lemma PR\"!</p>",
        "id": 233708826,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617907948
    },
    {
        "content": "<p>You have, via function.comm that the composition of f and g is the same as composing g and f. congr_fun with that equality gives you that for all x, (f o g) x = (g o f) x</p>",
        "id": 233709899,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908386
    },
    {
        "content": "<p>So you have the tools now to make the proof you need. You can use apply congr_fun to generalize over whatever you're applying on. The helper lemma would just state that directly, something like</p>",
        "id": 233710094,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908446
    },
    {
        "content": "<p>function.commute.apply (h : function.commute f g) (x : a) : g (f x) = f (g x) := congr_fun h x</p>",
        "id": 233710302,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908529
    },
    {
        "content": "<p>Or something</p>",
        "id": 233710306,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908532
    },
    {
        "content": "<p>Then your proof becomes (function.commute.iterate_iterate_self f m n).apply x</p>",
        "id": 233710421,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908582
    },
    {
        "content": "<p>Ok, let me try!  Thanks a lot!</p>",
        "id": 233710491,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617908603
    },
    {
        "content": "<p>And there, you're using that projection notation</p>",
        "id": 233710523,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908617
    },
    {
        "content": "<p>Does that make sense? We're constructing a proposition and right away using a lemma about it. And because of namespaces, we can use the projection</p>",
        "id": 233710653,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908663
    },
    {
        "content": "<p>Ah hold on, your original lemma is about exponentiation. I misunderstood</p>",
        "id": 233710970,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908793
    },
    {
        "content": "<p>Yakov, it turns out, that the proof is your lemma even easier!  Maybe this is why Yuri did not add it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">function.commute.apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 233710993,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617908802
    },
    {
        "content": "<p>Yes, you're using the defeq of h there</p>",
        "id": 233711062,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908830
    },
    {
        "content": "<p>Yes, I think that the one that I want is not the one that Bryan mentioned, but I still took some time to figure out that it wasn't, so I would like to understand how to better get this things!</p>",
        "id": 233711088,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617908838
    },
    {
        "content": "<p>Indeed, I <code>unfold</code>ed twice before I removed them.</p>",
        "id": 233711174,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617908868
    },
    {
        "content": "<p>The defeq is via the definition of semiconj</p>",
        "id": 233711204,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908874
    },
    {
        "content": "<p>here is the non-minimal proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">function.commute.apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_fun</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">function.commute</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">semiconj</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233711328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617908907
    },
    {
        "content": "<p>Right. I think it's still nice to provide the API that wraps the defeq operations, just in case someone wants to generalize the definition in a way that defeq no longer works. Others might disagree</p>",
        "id": 233711394,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617908930
    },
    {
        "content": "<p>Ok, so you are saying that it is better to have the explicit <code>unfold</code> steps?</p>",
        "id": 233711463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617908968
    },
    {
        "content": "<p>I can see why this proof is probably the \"other\" candidate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">function.commute.apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">function.commute</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">semiconj</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">-- at this stage, h : ∀ (x : α), f (g x) = g (f x)</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233711558,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617909004
    },
    {
        "content": "<p>Of course, maybe the lemma should be the symm of that. It's not clear a priori which is the \"inside\" function in commute f g</p>",
        "id": 233711608,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617909015
    },
    {
        "content": "<p>Ah, I meant for users of the API. In the making of the actual API, it's fine to use defeq</p>",
        "id": 233711653,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617909039
    },
    {
        "content": "<p>(in my opinion)</p>",
        "id": 233711684,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617909050
    },
    {
        "content": "<p>I can add this lemma to the PR, even if it is about \"addition\" instead of \"multiplication\".</p>",
        "id": 233711761,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617909093
    },
    {
        "content": "<p>(If you think that it would be useful to have: adding \"unused\" lemmas is rarely an issue with CI building.)</p>",
        "id": 233711821,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617909119
    },
    {
        "content": "<p>Right. Regarding reduction of exponents: since we're operating solely in the nat monoid, any reduction would lead solely to a growth of the exponent. So it'd be harder to deal with a f^3 than f^2 o f</p>",
        "id": 233711981,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617909175
    },
    {
        "content": "<p>I see, so this is why the direction of these lemmas goes in the direction that feels \"wrong\" to me: thanks for the explanation!</p>",
        "id": 233712187,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617909253
    },
    {
        "content": "<p>So while the expression is \"simpler\" with a reduced exponent, it's harder to prove things about it.</p>",
        "id": 233712194,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617909258
    },
    {
        "content": "<p>Yakov, I added your function.commute.apply lemma as well!</p>",
        "id": 233712656,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617909444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/iterate.2Ecomm/near/233711981\">said</a>:</p>\n<blockquote>\n<p>Right. Regarding reduction of exponents: since we're operating solely in the nat monoid, any reduction would lead solely to a growth of the exponent. So it'd be harder to deal with a f^3 than f^2 o f</p>\n</blockquote>\n<p>I think this is the key point I was missing here, the example I had in my head of things \"cancelling out\" when you combine the exponents really can't happen with nat-indexing. So maybe the best form is the version currently there, having a simp-normal form still seems useful though?</p>",
        "id": 233732100,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1617916853
    },
    {
        "content": "<p>Is <code>simp</code> a tactic for proving things or simplifying expressions? If the former, you might want to make the proof you use break the monoidal term by 2s or by 3s, that will lead to fewer rewrites.</p>",
        "id": 233733984,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617917479
    },
    {
        "content": "<p>We break off by ones because of the <code>nat.succ</code> structure. But execution of a function that has been raised to a nat power is more efficient if you execute by twos, and even more so by threes. But it's harder to write the method to do that.</p>",
        "id": 233734185,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617917555
    },
    {
        "content": "<p>Are you sure function.commutes.apply is a useful lemma? Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.commute\">docs#function.commute</a> really unfold to composition?</p>",
        "id": 233738325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617919602
    },
    {
        "content": "<p>Yeah, if you have a term <code>h : function.commutes f g</code>, <code>h x</code> is syntactically <code>f (g x) = g (f x)</code> - the lemma is pointless</p>",
        "id": 233738534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617919718
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">function.commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">∀ (x : α), f (g x) = g (f x)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 233738543,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617919723
    },
    {
        "content": "<p>When I'm working with a new prop, I don't always know what it reduces to. And to find out here that <code>(h : function.commute f g) x</code> would mean <code>f (g x) = g (f x)</code> would require going down some search path.</p>",
        "id": 233738654,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617919791
    },
    {
        "content": "<p>Or just <code>#check</code></p>",
        "id": 233738712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617919809
    },
    {
        "content": "<p>It's not indicated in the docs anywhere. One way to explicitly indicate is just to have a lemma that says exactly what it means.</p>",
        "id": 233738761,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617919838
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">function.commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">function.commute f g : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 233738765,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617919841
    },
    {
        "content": "<p>I mean, add an x in that check</p>",
        "id": 233738786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617919854
    },
    {
        "content": "<p>Right, one needed to know that that was a valid thing to say in the first place</p>",
        "id": 233738812,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617919869
    },
    {
        "content": "<p>To be clear, I meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 233739142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617920060
    },
    {
        "content": "<p>That's basically a problem for any definition that expands to a function type - eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix\">docs#matrix</a></p>",
        "id": 233739178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617920096
    },
    {
        "content": "<p>So maybe a doc-gen solution is needed here?</p>",
        "id": 233739199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617920111
    },
    {
        "content": "<p>Yes I understand what you meant. This example works because of how commute is defined, and how semiconj is defined. In <a href=\"https://github.com/leanprover-community/mathlib/issues/7118\">#7118</a>, I redefine <code>perm.disjoint</code> to be <code>disjoint f.support g.support</code> instead of <code>def disjoint (f g : perm α) := ∀ x, f x = x ∨ g x = x</code>. So previous proofs that used <code>cases (h : disjoint f g) x with hfx hgx</code> won't work straight out of the box. But if there was a <code>disjoint.apply</code> or whatever, it would be stable to the definitional change.</p>",
        "id": 233739535,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617920317
    },
    {
        "content": "<p>What does <code>h x</code> now produce?</p>",
        "id": 233741836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617921686
    },
    {
        "content": "<p>(for perm.disjoint)</p>",
        "id": 233741849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617921706
    },
    {
        "content": "<p>An error, _root_.disjoint expects a set membership prop</p>",
        "id": 233749295,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617926928
    },
    {
        "content": "<p>My experience with the <code>commute</code> issue has been that it took me a while to realise that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>that is, applying <code>h</code> to <code>x</code>, was even a thing.  Of course, I did in the end, but I would have liked that this information had been more prominent.  As a not so experienced user, I still struggle with seeing through the definitions.</p>\n<p>Maybe just a pointer in a doc-string would be enough.</p>",
        "id": 233755633,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617932195
    },
    {
        "content": "<p>Feel free to improve docstrings. About LHS vs RHS in <code>iterate_add</code> etc, AFAIR it was not me who made the choice. I moved these lemmas from <code>nat.iterate_*</code> and did not think about LHS vs RHS.</p>",
        "id": 233768445,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617944331
    },
    {
        "content": "<p>I don't know which direction is better.</p>",
        "id": 233768489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617944399
    },
    {
        "content": "<p>I will not change the direction of the lemmas, but I will make an attempt at doc strings!</p>",
        "id": 233768693,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617944508
    },
    {
        "content": "<p>For those interested, I added the second line to the doc string of <code>commute</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Two maps `f g : α → α` commute if `f ∘ g = g ∘ f`.</span>\n<span class=\"sd\">Given `h : function.commute f g` and `a : α`, the term `h a` has Type `h a : f (g a) = g (f a)`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">commute</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">semiconj</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>Any comments are more than welcome!  I personally find it very helpful when doc strings give \"expected usages\", since often definitions are a little opaque.</p>",
        "id": 233770837,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617946686
    },
    {
        "content": "<p>Ok, the doc string appears to have generated lots of support!</p>\n<p>At the moment, the lemma directly below the definition of <code>commute</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">commute.apply</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and, given the doc string, I am now leaning towards Eric's idea that this is superfluous: this simply allows to write <code>h.apply x</code> instead of <code>h x</code>.</p>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  this comment if the lemma should stay.  <span aria-label=\"thumbs down\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"thumbs down\">:thumbs_down:</span>  this comment if the lemma should go.</p>",
        "id": 233774671,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617950311
    },
    {
        "content": "<p>A <code>commute.comp_eq</code> lemma that applies funext might still be a useful addition</p>",
        "id": 233775484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617950990
    },
    {
        "content": "<p>Assuming it doesn't exist already</p>",
        "id": 233775551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617951021
    },
    {
        "content": "<p>I believe this lemma (<code>commute.apply</code>) would be useful if you made <code>f</code> (and maybe also <code>g</code>) explicit and put <code>h</code> at the end.  Then you could do <code>rw commute.apply f x</code> and get a subgoal for <code>function.commute f g</code>.</p>",
        "id": 233775613,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617951081
    },
    {
        "content": "<p>As far as I can see, <code>commute.comp_eq</code> does not exist, but there is a similar one for <code>semiconj</code> (see code below and recall<br>\n<code>def commute (f g : α → α) : Prop := semiconj f g g</code>).</p>\n<p>Thus, I <del>am tempted to</del> <em>will not</em> introduce <code>commute.comp_eq </code>, but may revive the <code>commute.apply</code> with explicit function(s), if people agree that this is wanted.  I personally have not worked much with this API, so I am in no position of judging whether it is useful or not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- We say that `f : α → β` semiconjugates `ga : α → α` to `gb : β → β` if `f ∘ ga = gb ∘ f`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">semiconj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">semiconj</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">fab</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fbc</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ga</span> <span class=\"n\">ga'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">gb</span> <span class=\"n\">gb'</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">gc</span> <span class=\"n\">gc'</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">comp_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">semiconj</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">ga</span> <span class=\"bp\">=</span> <span class=\"n\">gb</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 233776159,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617951514
    },
    {
        "content": "<p>If you have <code>h : commute f g</code>, then you have <code>h.comp_eq</code>. It unfolds <code>commute</code> to <code>semiconj</code>, then applies <code>semiconj.comp_eq</code>.</p>",
        "id": 233776802,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617951726
    }
]