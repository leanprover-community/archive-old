[
    {
        "content": "<p>Is the following in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.units</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monoid.unit_of_not_nontrivial</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nontrivial</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_unit</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">is_unit</span> <span class=\"bp\">$</span> <span class=\"n\">subsingleton_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">not_nontrivial_iff_subsingleton.mp</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">is_unit_one</span>\n<span class=\"bp\">````</span>\n</code></pre></div>",
        "id": 286259980,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655320514
    },
    {
        "content": "<p>You would definitely spell it out with <code>[subsingleton M]</code> rather than <code>(hM : ¬ nontrivial M)</code>.</p>",
        "id": 286260367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655320685
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_unit_of_subsingleton\">docs#is_unit_of_subsingleton</a></p>",
        "id": 286260390,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655320702
    },
    {
        "content": "<p>One of the areas I find mathlib covers the most well is the trivial case :b</p>",
        "id": 286260498,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655320768
    },
    {
        "content": "<p>If I want to distinguish cases according to <code>nontrivial M</code>, how do I get <code>[subsingleton M]</code> from <code> ¬ nontrivial M</code>?</p>",
        "id": 286260870,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655320959
    },
    {
        "content": "<p>There are various useful lemmas near <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subsingleton_or_nontrivial\">docs#subsingleton_or_nontrivial</a></p>",
        "id": 286260927,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655320996
    },
    {
        "content": "<p>OK; I realize that I'm already using this in my proof <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 286261104,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655321083
    },
    {
        "content": "<p>Still, I think my version has the advantage that I don't have to introduce a <code>[subsingleton]</code> instance first.</p>",
        "id": 286261311,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655321192
    },
    {
        "content": "<p>Do you know the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nontriviality\">tactic#nontriviality</a>? Most of these lemmas are structured around having that tactic be able to take care of the trivial case in one line, with little or no help from the user.</p>",
        "id": 286261634,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655321352
    },
    {
        "content": "<p>I have a piece of code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">by_cases</span> <span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hR</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring.inverse_non_unit</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">map_nonunit</span> <span class=\"n\">χ</span> <span class=\"n\">not_is_unit_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false.rec</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">monoid.unit_of_not_nontrivial</span> <span class=\"n\">hR</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>I.e., I need to make a distinction between the case that a ring is nontrivial and the trivial case.<br>\nI guess I could replace the <code>haveI := hR</code> line by <code>nontriviality</code>, but this does not look like a big improvement...</p>",
        "id": 286262551,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655321779
    },
    {
        "content": "<p>(Note that the claim that <code>0</code> is not a unit is only valid in nontrivial rings.)</p>",
        "id": 286262616,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655321832
    },
    {
        "content": "<p>Yes, the idea is that the <code>nontriviality R</code> tactic does lines 1,2,4 of your snippet in one (readable) command.</p>",
        "id": 286262688,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655321874
    },
    {
        "content": "<p>There are many examples in files about polynomial degrees for instance, where many results about e.g. <code>deg x^n</code> only hold in a non-zero ring.</p>",
        "id": 286262814,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655321952
    },
    {
        "content": "<p>How does the tactic remove the need to distinguish cases? I do want to allow the ring to be trivial.</p>",
        "id": 286262849,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655321988
    },
    {
        "content": "<p>It clears that case for you, using an appropriate <code>simp</code> lemma normally. Letting you focus on the nontrivial case.</p>",
        "id": 286262953,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655322033
    },
    {
        "content": "<p>If I put <code>nontriviality R</code> before the first line, I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"n\">prove</span> <span class=\"n\">goal</span> <span class=\"n\">assuming</span> <span class=\"bp\">`</span><span class=\"n\">subsingleton</span> <span class=\"n\">R</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>So how does it clear the trivial case?</p>",
        "id": 286263239,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655322198
    },
    {
        "content": "<p>I guess the trivial case is not so trivial after all...</p>",
        "id": 286263283,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655322232
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 286263297,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1655322238
    },
    {
        "content": "<p>If you set up your original lemma in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/In.20a.20trivial.20monoid.2C.20everything.20is.20a.20unit/near/286259980\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/In.20a.20trivial.20monoid.2C.20everything.20is.20a.20unit/near/286259980</a> using a <code>subsingleton</code> assumption rather than not nontrivial it might work, but its hard to say without runnable code</p>",
        "id": 286263492,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655322331
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> seems to be difficult without copying a lot of code.<br>\nThe goal is of the form <code>⇑χ (ring.inverse a) = 0</code> with <code>a : R</code> and <code>ha : ¬is_unit a</code> in the state, where <code>χ : mul_char R R'</code> (a monoid hom. that sends non-units to zero).<br>\nIf I replace <code>χ</code> by just a monoid hom, it works.</p>",
        "id": 286264435,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655322829
    },
    {
        "content": "<p>Which is perhaps strange, since <code>is_unit_of_subsingleton</code> gives a contradiction with <code>ha</code> regardless of the goal.</p>",
        "id": 286264697,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655322960
    },
    {
        "content": "<p>Even with a <code>mul_char</code>, if I isolate this part of the code, it does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">mul_char</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ</span> <span class=\"o\">(</span><span class=\"n\">ring.inverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nontriviality</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>clears the trivial case.</p>",
        "id": 286265506,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655323326
    },
    {
        "content": "<p>So it has to do with something in the context?</p>",
        "id": 286265535,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655323343
    },
    {
        "content": "<p>I take it back: <code>nontriviality R</code> does not. Without argument, it uses <code>R'</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 286265716,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655323440
    },
    {
        "content": "<p>(Same with monoid homomorphism in place of <code>mul_char</code>.)</p>",
        "id": 286265838,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655323474
    },
    {
        "content": "<p>So maybe this is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.integral_domain</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ring.inverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nontriviality</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286266002,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655323551
    },
    {
        "content": "<p>Yeah, I can't get <code>nontriviality</code> to work either, but maybe if you add it to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.nontriviality_by_assumption\">docs#tactic.nontriviality_by_assumption</a></p>",
        "id": 286267804,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1655324382
    },
    {
        "content": "<p><code>nontriviality R using [is_unit_of_subsingleton]</code> does not work, either.<br>\nWhat does \"it\" refer to in your post?</p>",
        "id": 286268472,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655324703
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ring.inverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nontriviality</span> <span class=\"n\">R</span> <span class=\"n\">using</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ring.inverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">is_unit_of_subsingleton</span> <span class=\"n\">a</span><span class=\"o\">))],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>in that it does clear the trivial case. But I have to basically spell out the proof anyway here.</p>",
        "id": 286271067,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655325890
    },
    {
        "content": "<p><code>casesI subsingleton_or_nontrivial R</code> is the normal way to handle this kind of thing</p>",
        "id": 286271764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655326261
    },
    {
        "content": "<p>Yeah its a bit of a funny one, seeing as nontriviality is getting a contradiction with the assumption it works best with that assumption reverted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.integral_domain</span>\n<span class=\"bp\">.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ring.inverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">nontriviality</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286278736,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655329744
    },
    {
        "content": "<p>Maybe there is some improvement needed for this tactic</p>",
        "id": 286278755,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655329759
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/alexjbest/better-nontriviality\">branch#alexjbest/better-nontriviality</a>, lets see if it builds!</p>",
        "id": 286280649,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655330743
    },
    {
        "content": "<p>is there any way to let it take extra simp args instead of just doing <code>*</code>? maybe that'll be slow</p>",
        "id": 286280837,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655330836
    },
    {
        "content": "<p>It can already take extra simp args, just not targets. I'm not sure about slowness, there are already likely many simp lemmas being tried, so adding  a few local hypotheses seems ok, but the additional targets could be a lot.</p>",
        "id": 286281061,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655330927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/In.20a.20trivial.20monoid.2C.20everything.20is.20a.20unit/near/286278736\">said</a>:</p>\n<blockquote>\n<p>Yeah its a bit of a funny one, seeing as nontriviality is getting a contradiction with the assumption it works best with that assumption reverted:</p>\n</blockquote>\n<p>Thanks. This works fine in my proof.</p>",
        "id": 286355664,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655387664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/In.20a.20trivial.20monoid.2C.20everything.20is.20a.20unit/near/286280649\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/tree/alexjbest/better-nontriviality\">branch#alexjbest/better-nontriviality</a>, lets see if it builds!</p>\n</blockquote>\n<p>Mathlib builds but one of the tests fails, so maybe some more thought is needed. But I think this should be in scope for <code>nontriviality</code></p>",
        "id": 286359418,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655389422
    }
]