[
    {
        "content": "<p>Do we know that elements of the completion of a uniform space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> can be represented as limits of Cauchy filters on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>?</p>",
        "id": 291271897,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659055971
    },
    {
        "content": "<p>This is my formalization and proof of the result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.completion</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Cauchy_tendsto_nhds_self</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Cauchy</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F.1.tendsto</span> <span class=\"n\">Cauchy.pure_cauchy</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uniform.tendsto_nhds_left</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hts</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">Cauchy.mem_uniformity'.1</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">hrt</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cauchy_iff'.1</span> <span class=\"n\">F.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.mem_map_iff_exists_image</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.image_subset_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hts</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.mem_prod_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space.completion</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"n\">F</span> <span class=\"bp\">‚àß</span> <span class=\"n\">F.tendsto</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uniform_space.completion.coe_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">erw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">inducing.tendsto_nhds_iff</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Cauchy_tendsto_nhds_self</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">uniform_inducing.inducing</span> <span class=\"o\">‚ü®</span><span class=\"n\">uniform_space.comap_quotient_eq_uniformity</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I feel I don't really understand it, but I was able to complete the proofs!</p>",
        "id": 291278838,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659063774
    },
    {
        "content": "<p>Nice! That's roughly the proof I had, but I would be surprised if there wasn't a lemma in mathlib that makes this a one-liner.</p>",
        "id": 291279126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659064095
    },
    {
        "content": "<p>I'm not sure at all I can do better, but I feel like there <em>has</em> to be a nicer proof involving <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_inducing\">docs#dense_inducing</a> or things like that</p>",
        "id": 291279241,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659064240
    },
    {
        "content": "<p>Let me give it a try</p>",
        "id": 291279243,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659064245
    },
    {
        "content": "<p>Indeed</p>",
        "id": 291279636,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659064799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.completion</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">uniform_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"n\">F</span> <span class=\"bp\">‚àß</span> <span class=\"n\">tendsto</span> <span class=\"n\">coe</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">comap</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">cauchy_nhds.comap'</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">completion.dense_inducing_coe.comap_nhds_ne_bot</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">tendsto_comap</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">completion.uniform_inducing_coe</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap_uniformity</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291279671,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659064803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Elements.20of.20completion.20as.20limits/near/291278838\">said</a>:</p>\n<blockquote>\n<p>This is my formalization and proof of the result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.completion</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Cauchy_tendsto_nhds_self</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Cauchy</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F.1.tendsto</span> <span class=\"n\">Cauchy.pure_cauchy</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uniform.tendsto_nhds_left</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hts</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">Cauchy.mem_uniformity'.1</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">hrt</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cauchy_iff'.1</span> <span class=\"n\">F.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.mem_map_iff_exists_image</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.image_subset_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hts</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.mem_prod_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space.completion</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"n\">F</span> <span class=\"bp\">‚àß</span> <span class=\"n\">F.tendsto</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uniform_space.completion.coe_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">erw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">inducing.tendsto_nhds_iff</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Cauchy_tendsto_nhds_self</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">uniform_inducing.inducing</span> <span class=\"o\">‚ü®</span><span class=\"n\">uniform_space.comap_quotient_eq_uniformity</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I feel I don't really understand it, but I was able to complete the proofs!</p>\n</blockquote>\n<p>Sorry, I could have saved you a lot of trouble <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 291279688,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659064835
    },
    {
        "content": "<p>This is really a lemma about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_inducing\">docs#uniform_inducing</a> s with dense range</p>",
        "id": 291279809,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659065043
    },
    {
        "content": "<p>I don't even use the fact that the completion is complete x)</p>",
        "id": 291279832,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659065061
    },
    {
        "content": "<p>Very nice proof! Can be compactified to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"n\">F</span> <span class=\"bp\">‚àß</span> <span class=\"n\">tendsto</span> <span class=\"n\">coe</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">comap</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">cauchy_nhds.comap'</span>\n  <span class=\"o\">(</span><span class=\"n\">completion.uniform_inducing_coe</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap_uniformity.le</span>\n  <span class=\"o\">(</span><span class=\"n\">completion.dense_inducing_coe.comap_nhds_ne_bot</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">tendsto_comap</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 291280403,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659065932
    },
    {
        "content": "<p>Nice, I feel better now that you golfed me back <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 291280493,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659066071
    },
    {
        "content": "<p>Your proof shows every point <code>x</code> in the completion is the limit at the preferred Cauchy filter <code>comap coe (ùìù x)</code>, which is interesting, as my proof shows that any Cauchy filter in the class of <code>x</code> has <code>x</code> as the limit.</p>",
        "id": 291280507,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659066100
    },
    {
        "content": "<p>I think the philosophy for such constructions which have a nice universal property is to forbid yourself to unfold the constructions, so somehow we don't want to make sense of \"filters in the class of <code>x</code>\"</p>",
        "id": 291280829,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659066548
    },
    {
        "content": "<p>But I agree that your approach feels natural</p>",
        "id": 291280883,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659066608
    },
    {
        "content": "<p>I wonder if this result also has a short proof ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">forall_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space.completion</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Cauchy</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">quotient.mk'</span> <span class=\"n\">F</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F.1.tendsto</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">F</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uniform_space.completion.coe_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">erw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">inducing.tendsto_nhds_iff</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Cauchy_tendsto_nhds_self</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">uniform_inducing.inducing</span> <span class=\"o\">‚ü®</span><span class=\"n\">uniform_space.comap_quotient_eq_uniformity</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291280993,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659066814
    },
    {
        "content": "<p>of course this only makes sense for <code>completion</code> not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion\">docs#abstract_completion</a> ...</p>",
        "id": 291281194,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659067072
    },
    {
        "content": "<p>I don't see a more clever way than proving first </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Cauchy.tendsto_nhds_self</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Cauchy</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">Cauchy.pure_cauchy</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">F.val</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">forall_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space.completion</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Cauchy</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">quotient.mk'</span> <span class=\"n\">F</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F.1.tendsto</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">F</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">continuous_quotient_mk.tendsto</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">F.tendsto_nhds_self</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291281701,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659067761
    },
    {
        "content": "<p>And I don't think the first sorry can be solved without using filter bases and so on</p>",
        "id": 291281763,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659067845
    },
    {
        "content": "<p>I also can't find the following lemma in mathlib; is there a simpler proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">separation_setoid_eq_inseparable_setoid</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">uniform_space.separation_setoid</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=</span> <span class=\"n\">inseparable_setoid</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">separation_rel</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">inseparable</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inseparable_iff_forall_open</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">uniform_space.separation_setoid</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm'</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_open_uniformity.1</span> <span class=\"n\">hs</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">uniformity_has_basis_open.mem_separation_rel</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">refl_mem_uniformity</span> <span class=\"n\">hs.1</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">continuous.prod.mk</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open_preimage</span> <span class=\"n\">_</span> <span class=\"n\">hs.2</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291283136,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659069733
    },
    {
        "content": "<p>It's nice that you can train student and then send them do internship across the Atlantic so that they can answer questions for you when you sleep. I still tried to get to the bottom of this and found a couple of surprising holes (as usual). I suggest adding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.completion</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.surjective.comap_ne_bot_iff_ne_bot</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">F.ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">‚ä•</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"n\">comap_bot</span><span class=\"o\">‚ü©,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.comap_of_surj</span> <span class=\"n\">hf</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_closure_range_iff_comap</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚àà</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_closure_iff_comap_ne_bot</span><span class=\"o\">],</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">coe_comp_range_factorization</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">filter.comap_comap</span><span class=\"o\">,</span>\n                 <span class=\"n\">surjective_onto_range.comap_ne_bot_iff_ne_bot</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Not used below but nice to have.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">dense_range.comap_nhds_ne_bot</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dense_range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_closure_range_iff_comap.mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">uniform_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_cauchy_tendsto</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"bp\">‚àÉ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"n\">F</span> <span class=\"bp\">‚àß</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">cauchy_nhds.comap'</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">mem_closure_range_iff_comap.mp</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">tendsto_comap</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">uniform_space.completion</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">uniform_space.completion.exists_cauchy_tendsto</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"n\">F</span> <span class=\"bp\">‚àß</span> <span class=\"n\">tendsto</span> <span class=\"n\">coe</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists_cauchy_tendsto</span> <span class=\"o\">(</span><span class=\"n\">uniform_inducing_coe</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap_uniformity.le</span> <span class=\"o\">(</span><span class=\"n\">dense_range_coe</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291305935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659091164
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 291332218,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659104240
    },
    {
        "content": "<p>So I was able to prove a characterization of the backward map from <code>completion Œ±</code> to <code>Cauchy Œ±</code> constructed by Anatole. The code is at <a href=\"https://gist.github.com/alreadydone/9fcfb78af6cd48bdedf3220a598b8321\">https://gist.github.com/alreadydone/9fcfb78af6cd48bdedf3220a598b8321</a>, where the map is called <code>preferred_cauchy</code>. It turns out it's a right inverse to the \"separation quotient\" map that produces <code>completion Œ±</code> from <code>Cauchy Œ±</code>. Moreover, it sends a point <code>x</code> in the completion to the unique maximal Cauchy filter <code>F</code> that tends to <code>x</code> under <code>Œ± ‚Üí completion Œ±</code>; as it turns out, <code>F</code> tends to <code>x</code> iff it maps to <code>x</code> under the quotient map. This was rather mysterious to me, as points in <code>Cauchy Œ±</code> that maps to the same point in <code>completion Œ±</code> are by definition topologically indistinguishable, but it makes sense when you think about <code>Cauchy Œ±</code> as filters on the original space <code>Œ±</code> instead of a space by itself, so everything still makes sense when considering <code>abstract_completion</code>, which doesn't mention an intermediate space.</p>\n<p>To understand this better I worked out an example: consider the uniformity ‚ä§ = {univ} on the two point set Œ± = {0, 1}, which induces the trivial topology; every ne_bot filter on this space is Cauchy, and there are three of them: ‚ä§={univ}, ùìü {0}, and ùìü {1}. Of course the map <code>Œ± ‚Üí completion Œ±</code> sends x to ùìü {x}, while ‚ä§ is not in the image. The separation quotient consists of exactly one point, and <code>preferred_cauchy</code> maps it to ‚ä§.</p>",
        "id": 291406230,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659155336
    }
]