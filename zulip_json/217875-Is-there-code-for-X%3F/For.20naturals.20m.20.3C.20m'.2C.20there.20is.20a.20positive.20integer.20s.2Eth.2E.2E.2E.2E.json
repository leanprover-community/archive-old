[
    {
        "content": "<p>Is this in mathlib? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sub_diff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">m'</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">m'</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.add_sub_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234128596,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1618219708
    },
    {
        "content": "<p>The version with <code>&lt;=</code> conditions exists.</p>",
        "id": 234129094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618219987
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_eq_add_of_lt\">docs#nat.exists_eq_add_of_lt</a> which is similar to what you are looking for</p>",
        "id": 234129143,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618220016
    },
    {
        "content": "<p>I was thinking of <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/ordered_monoid.html#le_iff_exists_add\">https://leanprover-community.github.io/mathlib_docs/algebra/ordered_monoid.html#le_iff_exists_add</a></p>",
        "id": 234129197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618220043
    },
    {
        "content": "<p>That golfs to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.exists_eq_add_of_lt'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">m'</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">k.succ</span><span class=\"o\">,</span> <span class=\"n\">k.zero_lt_succ</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 234129344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618220102
    },
    {
        "content": "<p>But it's often more convenient to work in terms of <code>n.succ</code> instead of <code>0 &lt; n</code></p>",
        "id": 234129550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618220206
    },
    {
        "content": "<p>That's often true locally, but if you want to apply results in a different part of the library, then <code>0 &lt; n</code> is typically more flexible.</p>",
        "id": 234129759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618220325
    },
    {
        "content": "<p>Because then you're often just handed a <code>n : nat</code>, and you don't want to case on it before applying a lemma.</p>",
        "id": 234129807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618220349
    },
    {
        "content": "<p>Worth PR'ing the above, perhaps as <code>nat.exists_eq_add_nonneg_of_lt</code> then?</p>",
        "id": 234130928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618220923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> : OK,  -- I'm in the middle of a PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6743\">#6743</a> in which I need this. Is it better to keep PRs affecting such fundamental files such as <code>algebra.ordered_monoid</code> separate or could I just as well edit <code>algebra.ordered_monoid</code> in the course of that PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6743\">#6743</a>?</p>",
        "id": 234140927,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1618226458
    },
    {
        "content": "<p>I'd recommend:</p>\n<ul>\n<li>adding the lemma wherever is most convenient for now, and continuing the PR - putting it in the right place right now will make your builds very slow</li>\n<li>creating a new PR with just that lemma, in the right place</li>\n</ul>\n<p>By the time the first complex PR is close to ready to merge, chances are the second one is already merged, and all you have to do is remove your copy of the lemma</p>",
        "id": 234142123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618227145
    },
    {
        "content": "<p>I usually put lemma into correct files and use <code>--old</code>.</p>",
        "id": 234222100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618258109
    }
]