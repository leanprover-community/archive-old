[
    {
        "content": "<p>Is there an instance to say that a coercion is monotone (<code>↑x ≤ ↑y ↔ x ≤ y</code>)?</p>",
        "id": 237392779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620160108
    },
    {
        "content": "<p>It can be antimono, like the coe for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.pfilter.set.has_coe\">docs#order.pfilter.set.has_coe</a>, if I understood correctly</p>",
        "id": 237395067,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620161217
    },
    {
        "content": "<p>Hmm I think I'm wrong about that</p>",
        "id": 237395283,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620161293
    },
    {
        "content": "<p>In my case I can stick to mono, but my prominent problem is that I need an instance to stick in lemmas.</p>",
        "id": 237395321,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620161309
    },
    {
        "content": "<p>mono is normally only a one-way implication.</p>",
        "id": 237395622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620161451
    },
    {
        "content": "<p>Hmm... Surely I'm not the first to ask for a coercion to be well-behaved wrt orders?</p>",
        "id": 237395726,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620161516
    },
    {
        "content": "<p>Do you know about <code>norm_cast</code>?</p>",
        "id": 237395789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620161537
    },
    {
        "content": "<p>I'm sure there are plenty of <code>coe_le</code> lemmas, but they're not instances.</p>",
        "id": 237395821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620161549
    },
    {
        "content": "<p>They are registered as norm_cast lemmas.</p>",
        "id": 237395852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620161567
    },
    {
        "content": "<p>Are all coercions assumed to respect the order? Surely not.</p>",
        "id": 237395880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620161581
    },
    {
        "content": "<p>Here's a MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.preorder_hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.monotonicity</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">closure_operator</span> <span class=\"kd\">extends</span> <span class=\"n\">α</span> <span class=\"bp\">→ₘ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_closure'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">idempotent'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 237395993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620161639
    },
    {
        "content": "<p>No, you prove <code>coe_le_coe</code> (which does seem to be an iff in all cases I looked at) and tag it with <code>norm_cast</code> and <code>simp</code>. It's this word \"instance\" I don't understand.</p>",
        "id": 237396070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620161664
    },
    {
        "content": "<p>Aah, <code>coe_mono</code> is the one way implication</p>",
        "id": 237396130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620161691
    },
    {
        "content": "<p>I have two types <code>α</code>  and <code>β</code>and I require <code>β</code>to coerce to <code>α</code>. Now, I want to require it to coerce \"nicely\".</p>",
        "id": 237396213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620161732
    },
    {
        "content": "<p>I think we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like.coe_mono\">docs#set_like.coe_mono</a></p>",
        "id": 237396332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620161780
    },
    {
        "content": "<p>This looks quite good! But I think my <code>α</code> can be more general than a set. And in general I would like the coercion stuff to go smoothly as I'm basically introducing coercions everywhere.</p>",
        "id": 237396561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620161887
    },
    {
        "content": "<p>I think it's pretty unusual to require a <code>has_coe</code> typeclass in another definition</p>",
        "id": 237396624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620161923
    },
    {
        "content": "<p>Does that mean I am doing my definition wrong? Do you have any workaround?</p>",
        "id": 237396687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620161959
    },
    {
        "content": "<p>If you go down your current path you'll need a new <code>coe_monotone</code> typeclass</p>",
        "id": 237397250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620162090
    },
    {
        "content": "<p>And likely some others</p>",
        "id": 237397352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620162114
    },
    {
        "content": "<p>Yeah... I had assumed they already existed because it sounds sensible to have them.</p>",
        "id": 237397528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620162142
    },
    {
        "content": "<p>What other objects are you thinking of that aren't set-like?</p>",
        "id": 237397712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620162178
    },
    {
        "content": "<p>This sounds very <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 237398365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620162309
    },
    {
        "content": "<p>What about the radical of a natural? Or do we think of it as a multiset of its prime factors?</p>",
        "id": 237398464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620162335
    },
    {
        "content": "<p>I must say that I can't really think of an example where <code>set_like</code> wouldn't apply. But then I'm still worried about the amount of norm casting I would introduce.</p>",
        "id": 237398954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620162472
    },
    {
        "content": "<p>I mean, I'm virtually talking about ALL closure operators across mathlib. Surely we don't want to deal with <code>norm_cast</code> that often when the instance system could take care of it for us.</p>",
        "id": 237400683,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620162954
    },
    {
        "content": "<p>You're talking about all closure operators <em>for which one direction is always spelled <code>coe</code></em>, right?</p>",
        "id": 237401387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620163128
    },
    {
        "content": "<p>What makes those more interesting than closure operators which are spelt with a different function name?</p>",
        "id": 237401632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620163200
    },
    {
        "content": "<p>More or less. I noticed that I could unify bundled and unbundled closure operators (where the bundling refers to their output) if only I could make Lean use <code>id </code> as a coercion from <code>α</code> to <code>α</code> when <code>α = β</code>.</p>",
        "id": 237401960,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620163274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monotone.20coercion/near/237401632\">said</a>:</p>\n<blockquote>\n<p>What makes those more interesting than closure operators which are spelt with a different function name?</p>\n</blockquote>\n<p>You mean <code>affine_span</code>/<code>span_points</code>, for example? I thought it would simplify the API by reducing the amount of duplication that goes into such an approach.</p>",
        "id": 237402231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620163342
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_span\">docs#affine_span</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/span_points\">docs#span_points</a>?</p>",
        "id": 237402479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620163411
    },
    {
        "content": "<p>Are there any interesting closure operators that do use coe but aren't set_like (ie, don't have a compatible has_mem)</p>",
        "id": 237403192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620163603
    },
    {
        "content": "<p>I can't think of any.</p>",
        "id": 237404037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620164041
    },
    {
        "content": "<p>Actually I think the cleanest thing to do is to just ditch the ordering on <code>beta</code> and go full coercion. I still have the problem with <code>alpha = beta</code> but at worst this could be solved by defining another structure called <code>endo_closure_operator</code> or something.</p>",
        "id": 237445001,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620194470
    },
    {
        "content": "<p>Why not just use a function <code>f</code>? I don't see why it has to be a coercion</p>",
        "id": 237445299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620194693
    },
    {
        "content": "<p>The whole point is that, for example, the subgroup closure of a set will be a subgroup, which can be coerced back to a set.</p>",
        "id": 237446053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620195382
    },
    {
        "content": "<p>yes, that coercion is a function</p>",
        "id": 237446646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620195922
    },
    {
        "content": "<p>if you want to be generic over possible closure systems then you should use a function, like is done with galois insertions</p>",
        "id": 237446665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620195958
    },
    {
        "content": "<p>Hmm, that's interesting. If I then feed a coercion as the function, will it automatically appear with up arrows in the pretty print?</p>",
        "id": 237446905,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620196159
    },
    {
        "content": "<p>Also, if I feed in <code>id</code>, will it simplify it automatically?</p>",
        "id": 237447614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620196689
    },
    {
        "content": "<p>No, but you can use simp lemmas to clean up the expression</p>",
        "id": 237450591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620198670
    },
    {
        "content": "<p>you need such a thing anyway for applying a typeclass function on a particular instance</p>",
        "id": 237450632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620198712
    },
    {
        "content": "<p>Actually yes to the first thing: if you use <code>coe</code> as the function <code>coe x</code> will be in the expression and this gets displayed as <code>\\u x</code>. But <code>id x</code> is not displayed as <code>x</code></p>",
        "id": 237450746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620198785
    },
    {
        "content": "<p>Okay well. It appears that what I want to do is really a Galois insertion, but bundled.</p>",
        "id": 237450801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620198822
    },
    {
        "content": "<p>In that case, you will have a special map associated to your structure, like <code>closure_operator.to_fun</code>, and there should be simp lemmas like <code>closure_operator.to_fun (set X) x = x</code>, <code>closure_operator.to_fun (subgroup X) x = \\u x</code>, and so on</p>",
        "id": 237451272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620199106
    },
    {
        "content": "<p>A galois insertion bundling both <code>l</code> and <code>u</code> or just one of them?</p>",
        "id": 237451352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620199175
    },
    {
        "content": "<p>Both I'd say. I want <code>c : closure_operator a b</code> to coerce to <code>l : a -&gt; b</code>, but I also want any term of <code>b</code> to go through <code>u : b -&gt; a</code> when stating inequalities. In practice, <code>u</code> will be the coercion from <code>b</code> to <code>a</code> most of the time.</p>",
        "id": 237452449,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620199850
    },
    {
        "content": "<p>I really feel like people here have thought harder about that than I did. But I still think there's something to be done about the way it is set up.</p>",
        "id": 237452610,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620199941
    },
    {
        "content": "<p>We shouldn't have both <code>span_points</code> and <code>affine_span</code>. Only the latter ought to exist. And lemmas about closure operators should be accessible by dot notation: the proof of <code>subset_affine_span</code> should be <code>affine_span.le_closure</code>.</p>",
        "id": 237452892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620200099
    },
    {
        "content": "<p>What I want is to bundle the current closure operators we have with the information that they are in fact closure operators, and that through a structure that would support dot notation.</p>",
        "id": 237453056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620200194
    },
    {
        "content": "<p>This bundled structure would require as inputs: the closure operation so to speak <code>l : a -&gt; b</code>, the operation to get back to the original type <code>u : b -&gt; a</code>, the proof that <code>u o l</code> is inflationary, the proof that <code>u o l</code> is idempotent.</p>",
        "id": 237453914,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620200677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monotone.20coercion/near/237451352\">said</a>:</p>\n<blockquote>\n<p>A galois insertion bundling both <code>l</code> and <code>u</code> or just one of them?</p>\n</blockquote>\n<p>To be precise here, I'm suggesting the choice between these two:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">fully_bundled</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">partially_bundled</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 237454573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620201054
    },
    {
        "content": "<p><code>closure</code> could then have type <code>fully_bundled (subgroup G) (set G)</code> or <code>partially_bundled (coe : subgroup G → set G)</code></p>",
        "id": 237454795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620201167
    },
    {
        "content": "<p>I think <code>fully_bundled</code> makes more sense here given the aim</p>",
        "id": 237455126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201354
    },
    {
        "content": "<p>That's what I think too. But there's not much difference functionally?</p>",
        "id": 237455251,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620201417
    },
    {
        "content": "<p>The types would be slightly different but it doesn't matter much as we'll define concrete terms.</p>",
        "id": 237455402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620201500
    },
    {
        "content": "<p>the advantage of the partially bundled approach, or parameters more generally, is that you will not have to rewrite a term: in the lemma about <code>u (l x) = x</code>, when you apply that with <code>partially_bundled</code> it looks like <code>u (bundle.l x) = x</code> where <code>u</code> is whatever term you want, including <code>coe</code></p>",
        "id": 237455455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201538
    },
    {
        "content": "<p>I think that is one of the reasons why galois insertion uses parameters for <code>l</code> and <code>u</code></p>",
        "id": 237455502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201562
    },
    {
        "content": "<p>Ah, I see. Well, no I don't really. But it sounds as if I could see.</p>",
        "id": 237455764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620201693
    },
    {
        "content": "<p>You still have to feed in both <code>u</code> and <code>l</code> at some point, right?</p>",
        "id": 237455983,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620201803
    },
    {
        "content": "<p>What woild it look like with <code>fully_bundled</code>?</p>",
        "id": 237456167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620201906
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">fully_bundled</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">partially_bundled</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fully_bundled.l_u</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">bu</span> <span class=\"o\">:</span> <span class=\"n\">fully_bundled</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bu.l</span> <span class=\"o\">(</span><span class=\"n\">bu.u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">bu.gi.l_u_eq</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">partially_bundled.l_u</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">bu</span> <span class=\"o\">:</span> <span class=\"n\">partially_bundled</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bu.l</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">bu.gi.l_u_eq</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">bar</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">span</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">span</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">full</span> <span class=\"o\">:</span> <span class=\"n\">fully_bundled</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">span</span><span class=\"o\">,</span>\n  <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">gi</span> <span class=\"o\">:=</span> <span class=\"n\">gi</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">full_l</span> <span class=\"o\">:</span> <span class=\"n\">full.l</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">full_u</span> <span class=\"o\">:</span> <span class=\"n\">full.u</span> <span class=\"bp\">=</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">part</span> <span class=\"o\">:</span> <span class=\"n\">partially_bundled</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">span</span><span class=\"o\">,</span>\n  <span class=\"n\">gi</span> <span class=\"o\">:=</span> <span class=\"n\">gi</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">part_l</span> <span class=\"o\">:</span> <span class=\"n\">part.l</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_full</span> <span class=\"o\">:=</span> <span class=\"n\">full.l_u</span><span class=\"o\">,</span> <span class=\"c1\">-- ∀ (x : bar), full.l (full.u x) = x</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_part</span> <span class=\"o\">:=</span> <span class=\"n\">part.l_u</span><span class=\"o\">,</span> <span class=\"c1\">-- ∀ (x : bar), part.l ↑x = x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h_full</span> <span class=\"n\">h_part</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- both are now ∀ (x : bar), span ↑x = x</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237457141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620202370
    },
    {
        "content": "<p>My intuition says you want this partially bundled, so that you can instantiate <code>α := set α</code> and <code>u := coe : β → set α</code>, so you can state lemmas along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subset_closure</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"n\">closure_operator</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">c.gi.gc.le_u</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 237468030,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620208069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monotone.20coercion/near/237452892\">said</a>:</p>\n<blockquote>\n<p>We shouldn't have both <code>span_points</code> and <code>affine_span</code>. Only the latter ought to exist. And lemmas about closure operators should be accessible by dot notation: the proof of <code>subset_affine_span</code> should be <code>affine_span.le_closure</code>.</p>\n</blockquote>\n<p>The purpose of <code>span_points</code> is really (a) as a detail of how <code>affine_span</code> is implemented, which might go away with some more general infrastructure handling closure operators, and (b) as an explicit description of what points are in the affine span, in relation to <code>vector_span</code>. The latter is still relevant in the presence of more general infrastructure, though maybe as a lemma rather than a definition.</p>\n<p>(Lemmas about <code>span_points</code> should have corresponding <code>affine_span</code> lemmas, but I'm not sure they all do at present. Anything that uses a <code>span_points</code> lemma in a context where it actually has an <code>affine_span</code> ought to be fixed to avoid that abuse of defeq and use an <code>affine_span</code> lemma instead, independent of any more general refactoring of closure operators.)</p>",
        "id": 237586355,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1620259766
    },
    {
        "content": "<p>Wait, let's move to <a href=\"#narrow/stream/113488-general/topic/Closure.20operators\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Closure.20operators</a></p>",
        "id": 238172203,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620664407
    }
]