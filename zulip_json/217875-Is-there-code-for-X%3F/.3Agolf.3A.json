[
    {
        "content": "<p>Anyone want to golf:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cofinality</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">set.not_infinite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">s.infinite</span> <span class=\"bp\">↔</span> <span class=\"n\">s.finite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.infinite</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Surely this is not that hard!</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">range_infinite_of_union_finset_infinite</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">infinite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">((</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">sUnion_range</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finite.sUnion</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">image_univ</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"o\">(((</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.image_comp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">image_univ</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">finite_image_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">finset.coe_inj.mp</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">finset.finite_to_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">w</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241505313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622795484
    },
    {
        "content": "<p>Let me see <span aria-label=\"golf\" class=\"emoji emoji-1f3cc\" role=\"img\" title=\"golf\">:golf:</span></p>",
        "id": 241505484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622795604
    },
    {
        "content": "<p>Maybe it is better to just have a family of sets, and separately the witnesses they are finite.</p>",
        "id": 241506777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622796447
    },
    {
        "content": "<p>feel like the glue that is missing is:<br>\na) that union is a subset (or equal) to the range<br>\nb) coe'd fintypes create fintypes of subsets</p>",
        "id": 241510838,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622799014
    },
    {
        "content": "<p>I got it</p>",
        "id": 241511287,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622799353
    },
    {
        "content": "<p>It's not much shorter than yours, but my main <code>have</code> is factorisable as a standalone lemma. I'm quite surprised it doesn't exist already</p>",
        "id": 241511376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622799393
    },
    {
        "content": "<p>Here you go!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">range_infinite_of_union_finset_infinite</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">infinite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"c1\">--no need to go by contradiction. `s.infinite` is defed `¬s.finite`</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">h.to_finset.bUnion</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_bUnion</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h.mem_to_finset.2</span> <span class=\"o\">(</span><span class=\"n\">mem_range_self</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.mem_to_finset.1</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.finite_mem_finset</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241512616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622800153
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>! I've rolled this into my branch, and split out the <code>have</code> as a lemma. Hopefully it will see the light of day in the PR queue soon. :-)</p>",
        "id": 241513747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622800787
    },
    {
        "content": "<p>I'd suggest proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Union_finset_finite_of_range_finite</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">finite</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>instead as your lemma really is the contrapositive of this one.</p>",
        "id": 241519718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622804567
    }
]