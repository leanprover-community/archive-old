[
    {
        "content": "<p>We don't have these relating the supremum on ℝ≥0∞ to the supremum on ℝ≥0, right? If not, I assume we want it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.supr_coe_eq_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">∞</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">supr_eq_top</span><span class=\"o\">,</span> <span class=\"n\">not_bdd_above_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hf</span> <span class=\"n\">r</span> <span class=\"n\">ennreal.coe_lt_top</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">ennreal.coe_lt_coe.mp</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">supr_eq_top</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">not_bdd_above_iff.mp</span> <span class=\"n\">hf</span> <span class=\"n\">b.to_nnreal</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.coe_to_nnreal</span> <span class=\"n\">hb.ne</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ennreal.coe_lt_coe.mpr</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.supr_coe_lt_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span> <span class=\"bp\">↔</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">lt_top_iff_ne_top</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">not_iff_not.mpr</span> <span class=\"n\">ennreal.supr_coe_eq_top</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.supr_coe_to_nnreal</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"bp\">=</span> <span class=\"n\">supr</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">is_empty_or_nonempty</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">csupr_of_empty</span><span class=\"o\">,</span> <span class=\"n\">ennreal.zero_to_nnreal</span><span class=\"o\">,</span> <span class=\"n\">bot_eq_zero'</span><span class=\"o\">]},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">((</span><span class=\"n\">le_csupr_iff'</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ennreal.coe_le_coe.mp</span> <span class=\"o\">(</span><span class=\"n\">ennreal.coe_to_nnreal_le_self.trans</span> <span class=\"o\">(</span><span class=\"n\">supr_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hb</span><span class=\"o\">))),</span>\n      <span class=\"n\">refine</span> <span class=\"n\">csupr_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ennreal.coe_le_coe.mp</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.coe_to_nnreal</span> <span class=\"o\">(</span><span class=\"n\">ennreal.supr_coe_lt_top.mpr</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">]</span>\n        <span class=\"n\">using</span> <span class=\"n\">le_supr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nnreal.supr_of_not_bdd_above</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">ennreal.supr_coe_eq_top.mpr</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n        <span class=\"n\">ennreal.top_to_nnreal</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292696511,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660110033
    },
    {
        "content": "<p>I would definitely say we want them if we don't have them! When I was doing a bunch of sums (not suprs) in LTE it was really nice to be able to switch seamlessly between sums in nnreal and ennreal depending on what I was doing</p>",
        "id": 292715924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660121537
    },
    {
        "content": "<p>You seem to be missing the titular lemma,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ennreal.supr_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">supr</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 292731387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660128705
    },
    {
        "content": "<p>That sounds more useful reversed (and tagged <code>norm_cast</code>). Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.coe_supr\">docs#ennreal.coe_supr</a> exist? edit: no :(</p>",
        "id": 292731592,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660128809
    },
    {
        "content": "<p>I'm about to write <code>with_top.coe_supr</code> to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.coe_Sup\">docs#with_top.coe_Sup</a></p>",
        "id": 292732273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660129142
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15975\">#15975</a></p>",
        "id": 292732644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660129317
    },
    {
        "content": "<p>(with the direction reversed as suggested, and <code>norm_cast</code>)</p>",
        "id": 292733917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660129870
    },
    {
        "content": "<p>generalized slightly with essentially the same proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">with_top.supr_coe_eq_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order_bot</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">supr_eq_top</span><span class=\"o\">,</span> <span class=\"n\">not_bdd_above_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hf</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">with_top.coe_lt_top</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">with_top.coe_lt_coe.mp</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">supr_eq_top</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">not_bdd_above_iff.mp</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">b.untop</span> <span class=\"n\">hb.ne</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">with_top.coe_untop</span> <span class=\"n\">_</span> <span class=\"n\">hb.ne</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">with_top.coe_lt_coe.mpr</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">with_top.supr_coe_lt_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order_bot</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">lt_top_iff_ne_top</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">not_iff_not.mpr</span> <span class=\"n\">with_top.supr_coe_eq_top</span>\n</code></pre></div>",
        "id": 292763546,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660141092
    },
    {
        "content": "<p>Interestingly, we can't even state the <code>infi</code> versions because we don't have any such thing as <code>conditionally_complete_linear_order_top</code> (not that I think it's necessary).</p>",
        "id": 292763696,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660141148
    },
    {
        "content": "<p>Note that the versions in my PR didn't need anything stronger than <code>partial_order β</code> and <code>has_Inf β</code>; so maybe the <code>infi</code> version can be stated after all</p>",
        "id": 292767210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660142209
    },
    {
        "content": "<p>hmmm... does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr_eq_top\">docs#supr_eq_top</a> have requirements that are too stringent?</p>",
        "id": 292768135,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660142509
    },
    {
        "content": "<p>In any case, I just made <a href=\"https://github.com/leanprover-community/mathlib/pull/15979\">#15979</a></p>",
        "id": 292768225,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660142531
    }
]