[
    {
        "content": "<p>Everybody knows that I don't like finset. If you're not using <code>set.finite</code>, which is just bundled finiteness (like we have bundled subgroups etc which everyone loves) then I sometimes feel like you deserve all the trouble you get. Bhavik tells me that he never gets trouble now and I do believe him because I know that people like him and Chris are really really good at this stuff. </p>\n<p>I was just placating the linter in the <code>undeprecate</code> branch and I noticed there was no <code>dfinsupp</code> documentation. I started writing some in a way which I hoped would make sense to mathematicians. On the way I realised it was just constructive finite support Pi. Is there a nonconstructive version of this in Lean? It far better models the way I think about arbitrary direct sums personally.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_finitely_supported</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">S.finite</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Do we have this? Does it deserve an API? Oh I guess it is like an unbundled pi type, whereas you can think of <code>dfinsupp</code> as a bundled pi type. Why do we prefer bundled group homs to unbundled ones? Maybe typeclass inference would struggle with it. If we found no use for <code>is_group_hom</code> then does that mean there's no use for this?</p>",
        "id": 247798002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627728092
    },
    {
        "content": "<p>Arguably <code>finsupp</code> is constructive too (in that it holds the support as data), it just throws it away at the last moment by not using <code>decidable</code> arguments.</p>",
        "id": 247798067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627728221
    },
    {
        "content": "<p>The best part is <code>dfinsupp</code> is not the correct way to define the direct sum constructively either</p>",
        "id": 247799099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730072
    },
    {
        "content": "<p>What would the best way be to do so in your opinion, Reid?</p>",
        "id": 247799170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627730191
    },
    {
        "content": "<p>Well the best way is of course the classical one, but the correct constructive way is as (inductively generated term algebra)/(inductively generated relations)</p>",
        "id": 247799188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730253
    },
    {
        "content": "<p>I think the downside of that approach is that you no longer have definitional control of coefficient extraction, right?</p>",
        "id": 247799229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627730301
    },
    {
        "content": "<p>but that's the incorrect thing to want</p>",
        "id": 247799236,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730316
    },
    {
        "content": "<p>the direct sum is a coproduct, it's naturally equipped with maps <em>from</em> the components</p>",
        "id": 247799238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730332
    },
    {
        "content": "<p>and you can't extract coefficients without having decidable equality</p>",
        "id": 247799245,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730347
    },
    {
        "content": "<p>The current definition is some weird neither-fish-nor-fowl thing.</p>",
        "id": 247799249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730364
    },
    {
        "content": "<blockquote>\n<p>it's naturally equipped with maps from the components</p>\n</blockquote>\n<p>Right, but it's not clear that the naturalness of those maps is something lean can exploit in the way it can exploit the current definition reduction of <code>coe_fn</code>, even if mathematically they're the more interesting maps.</p>",
        "id": 247799318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627730466
    },
    {
        "content": "<p>I thought the whole point of the API is so that none of these differences matter</p>",
        "id": 247799320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627730473
    },
    {
        "content": "<p>Except sometimes APIs include \"this definitional reduction is deliberate\"</p>",
        "id": 247799372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627730559
    },
    {
        "content": "<p>Well they do matter from a constructive perspective, and from a classical perspective the API is littered with unnecessary <code>decidable_eq</code> constraints</p>",
        "id": 247799373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730562
    },
    {
        "content": "<p>but maybe Kevin had something different in mind?</p>",
        "id": 247799378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730580
    },
    {
        "content": "<p>Ah, is your point Reid that <code>direct_sum.of</code> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.single\">docs#dfinsupp.single</a> would not need <code>decidable_eq</code> if it were implemented the way you describe?</p>",
        "id": 247799388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627730631
    },
    {
        "content": "<p>but getting the coefficient would</p>",
        "id": 247799436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627730671
    },
    {
        "content": "<p>I think my main point is that constructively there is a single thing (up to isomorphism) which can be called the \"direct sum of a family of groups\" and <code>dfinsupp</code> is not (isomorphic to) that thing at all</p>",
        "id": 247799450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730702
    },
    {
        "content": "<p>it's kind of like using multiset as an implementation of <code>finsupp A nat</code></p>",
        "id": 247799454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627730711
    },
    {
        "content": "<p><code>dfinsupp</code> is isomorphic to that thing in all ways that we can express in lean though, right?</p>",
        "id": 247799500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627730768
    },
    {
        "content": "<p>assuming <code>decidable_eq</code>, yes</p>",
        "id": 247799509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627730813
    },
    {
        "content": "<p>I don't really know what that means. In principle you could inspect the definitions/proof and replay them in another topos (e.g. condensed sets, where this free abelian group construction on an object without decidable equality is really important!). If by \"in Lean\" you mean assuming classical everything, then yes that's true which is why I included the other part of my previous sentence.</p>",
        "id": 247799522,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627730881
    },
    {
        "content": "<p>Presumably you'd apply the same argument against the current construction of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a>, and the idea of using finsupp for a free module, as opposed to another generator / relations construction?</p>",
        "id": 247799703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627731059
    },
    {
        "content": "<p>Yes, monoid algebras etc are based on coproducts of comm monoids so should constructively be defined as Reid says</p>",
        "id": 247809696,
        "sender_full_name": "David Wärn",
        "timestamp": 1627745729
    },
    {
        "content": "<p>Sorry, I don't mean to suggest that we'd need a new definition of <code>monoid_algebra</code>, just that it should (from a constructive perspective) be based on the constructive counterpart of <code>finsupp</code> rather than on <code>finsupp</code></p>",
        "id": 247813365,
        "sender_full_name": "David Wärn",
        "timestamp": 1627749405
    },
    {
        "content": "<p>Basically, in any use case of <code>finsupp</code> / <code>dfinsupp</code> (e.g. free modules, direct sums of modules, monoid algebras, polynomial algebras), you need the underlying type to be a coproduct in the category of commutative monoids (otherwise your polynomial algebra or whatever won't get its universal property). Luckily, if you have some <code>decidable_eq</code> instance (which you do if you're working classically) then <code>finsupp</code> / <code>dfinsupp</code> <em>is</em> such a coproduct, but if you don't have these instances then it's just ... not. It's like how the box topology is just not the corrrect topology on an infinite product of topological space, if that means anything to you. However you <em>can still define</em> a coproduct in this case (e.g. take the abelianisation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_product\">docs#free_product</a>).</p>",
        "id": 247813703,
        "sender_full_name": "David Wärn",
        "timestamp": 1627749888
    },
    {
        "content": "<p>The only downside to this constructive coproduct afaics is that unlike <code>finsupp</code> it doesn't really have any extensionality principle, and you can potentially get performance issues if you try to compute with it (imagine computing the polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>10</mn></msup></mrow><annotation encoding=\"application/x-tex\">(1+x)^{10}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">10</span></span></span></span></span></span></span></span></span></span></span></span> without collecting like terms -- instead of 11 terms you get 1024).</p>",
        "id": 247813715,
        "sender_full_name": "David Wärn",
        "timestamp": 1627749909
    }
]