[
    {
        "content": "<p>Is there a tactic that does nothing except change <code>not not P</code> to <code>P</code> everywhere in an expression?</p>",
        "id": 212219014,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601810944
    },
    {
        "content": "<p><code>simp only [not_not]</code></p>",
        "id": 212219253,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1601811358
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 212219317,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601811437
    },
    {
        "content": "<p>The simp lemma has to be of the form <code>l = r</code> or <code>l ↔ r</code>?</p>",
        "id": 212219902,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601812413
    },
    {
        "content": "<p>Out of curiosity, is there a theoretical limitation preventing having a similar tactic that also works for <code>→</code>?</p>",
        "id": 212220649,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601813714
    },
    {
        "content": "<p>Find the iff version using library search and simp on that instead</p>",
        "id": 212222059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601815883
    },
    {
        "content": "<p>I was just thinking it might be an interesting exercise to make one, but not if it is theoretically impossible.</p>",
        "id": 212222145,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601816021
    },
    {
        "content": "<p>It's a rather different problem, because everything in Lean preserves <code>=</code>, while only some specific subset of things preserves <code>→</code>.</p>",
        "id": 212222587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601816856
    },
    {
        "content": "<p>For example if <code>p = q</code> then you can conclude <code>not p = not q</code> but from <code>p -&gt; q</code> you can't conclude <code>not p -&gt; not q</code>.</p>",
        "id": 212222799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601817137
    },
    {
        "content": "<p>You may also be interested in <code>push_neg</code></p>",
        "id": 212231750,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601831793
    },
    {
        "content": "<p>How do you use <code>simp</code> to simplify a hypothesis, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">-- use a variation of simp only [not_not] here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212233073,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601833541
    },
    {
        "content": "<p><code>simp at s1</code></p>",
        "id": 212233322,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601833850
    },
    {
        "content": "<p>Although it'd be better to use <code>simp only [...]</code>, as that hint says, so <code>simp only [not_not] at s1</code></p>",
        "id": 212233385,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601833926
    },
    {
        "content": "<p>I may be doing something else wrong. This doesn't seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_not_1</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span>  <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">by_contradiction</span> <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n<span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_not_2</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a2</span> <span class=\"n\">a1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_not'</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.intro</span> <span class=\"n\">not_not_1</span> <span class=\"n\">not_not_2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_not'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">s1</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212233879,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601834554
    },
    {
        "content": "<p><code>simp</code> changes the existing hypothesis; this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_not'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">s1</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 212234038,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1601834756
    },
    {
        "content": "<p>Oh. Can it be used to return the result instead?</p>",
        "id": 212234323,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601835074
    },
    {
        "content": "<p>That is, is there an option to it for that.</p>",
        "id": 212234342,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601835105
    },
    {
        "content": "<p>What do you mean by \"return the result\"?</p>",
        "id": 212234405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601835191
    },
    {
        "content": "<p>Maybe add a new hypothesis with a user given name and leave s1 unchanged?</p>",
        "id": 212234497,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601835307
    },
    {
        "content": "<p>I guess it doesn't really matter.</p>",
        "id": 212234514,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601835340
    },
    {
        "content": "<p>That's what Ruben's code does. <code>s1</code> is the same before and after that line.</p>",
        "id": 212234519,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1601835350
    },
    {
        "content": "<p>Nevermind, sorry.</p>",
        "id": 212234521,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601835350
    },
    {
        "content": "<p>Oh. Right. I was putting the cursor after the first part of it, I didn't expect it to change back.</p>",
        "id": 212234586,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601835417
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 212234596,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601835430
    }
]